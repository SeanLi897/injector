
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4e4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b58  0800d5f8  0800d5f8  0000e5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e150  0800e150  000101d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e150  0800e150  0000f150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e158  0800e158  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e158  0800e158  0000f158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e15c  0800e15c  0000f15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800e160  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b28  200001d8  0800e338  000101d8  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  20000d00  0800e338  00010d00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000255af  00000000  00000000  00010201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005951  00000000  00000000  000357b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000e232  00000000  00000000  0003b101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001660  00000000  00000000  00049338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001597  00000000  00000000  0004a998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e41c  00000000  00000000  0004bf2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a6a0  00000000  00000000  0006a34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a00d  00000000  00000000  000949eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012e9f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005608  00000000  00000000  0012ea3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00134044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d5dc 	.word	0x0800d5dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800d5dc 	.word	0x0800d5dc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	@ 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__gesf2>:
 8000d98:	f04f 3cff 	mov.w	ip, #4294967295
 8000d9c:	e006      	b.n	8000dac <__cmpsf2+0x4>
 8000d9e:	bf00      	nop

08000da0 <__lesf2>:
 8000da0:	f04f 0c01 	mov.w	ip, #1
 8000da4:	e002      	b.n	8000dac <__cmpsf2+0x4>
 8000da6:	bf00      	nop

08000da8 <__cmpsf2>:
 8000da8:	f04f 0c01 	mov.w	ip, #1
 8000dac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000db0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000db4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000db8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dbc:	bf18      	it	ne
 8000dbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dc2:	d011      	beq.n	8000de8 <__cmpsf2+0x40>
 8000dc4:	b001      	add	sp, #4
 8000dc6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dca:	bf18      	it	ne
 8000dcc:	ea90 0f01 	teqne	r0, r1
 8000dd0:	bf58      	it	pl
 8000dd2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dd6:	bf88      	it	hi
 8000dd8:	17c8      	asrhi	r0, r1, #31
 8000dda:	bf38      	it	cc
 8000ddc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000de0:	bf18      	it	ne
 8000de2:	f040 0001 	orrne.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dec:	d102      	bne.n	8000df4 <__cmpsf2+0x4c>
 8000dee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000df2:	d105      	bne.n	8000e00 <__cmpsf2+0x58>
 8000df4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000df8:	d1e4      	bne.n	8000dc4 <__cmpsf2+0x1c>
 8000dfa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dfe:	d0e1      	beq.n	8000dc4 <__cmpsf2+0x1c>
 8000e00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <__aeabi_cfrcmple>:
 8000e08:	4684      	mov	ip, r0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	4661      	mov	r1, ip
 8000e0e:	e7ff      	b.n	8000e10 <__aeabi_cfcmpeq>

08000e10 <__aeabi_cfcmpeq>:
 8000e10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e12:	f7ff ffc9 	bl	8000da8 <__cmpsf2>
 8000e16:	2800      	cmp	r0, #0
 8000e18:	bf48      	it	mi
 8000e1a:	f110 0f00 	cmnmi.w	r0, #0
 8000e1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e20 <__aeabi_fcmpeq>:
 8000e20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e24:	f7ff fff4 	bl	8000e10 <__aeabi_cfcmpeq>
 8000e28:	bf0c      	ite	eq
 8000e2a:	2001      	moveq	r0, #1
 8000e2c:	2000      	movne	r0, #0
 8000e2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e32:	bf00      	nop

08000e34 <__aeabi_fcmplt>:
 8000e34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e38:	f7ff ffea 	bl	8000e10 <__aeabi_cfcmpeq>
 8000e3c:	bf34      	ite	cc
 8000e3e:	2001      	movcc	r0, #1
 8000e40:	2000      	movcs	r0, #0
 8000e42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e46:	bf00      	nop

08000e48 <__aeabi_fcmple>:
 8000e48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e4c:	f7ff ffe0 	bl	8000e10 <__aeabi_cfcmpeq>
 8000e50:	bf94      	ite	ls
 8000e52:	2001      	movls	r0, #1
 8000e54:	2000      	movhi	r0, #0
 8000e56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e5a:	bf00      	nop

08000e5c <__aeabi_fcmpge>:
 8000e5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e60:	f7ff ffd2 	bl	8000e08 <__aeabi_cfrcmple>
 8000e64:	bf94      	ite	ls
 8000e66:	2001      	movls	r0, #1
 8000e68:	2000      	movhi	r0, #0
 8000e6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e6e:	bf00      	nop

08000e70 <__aeabi_fcmpgt>:
 8000e70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e74:	f7ff ffc8 	bl	8000e08 <__aeabi_cfrcmple>
 8000e78:	bf34      	ite	cc
 8000e7a:	2001      	movcc	r0, #1
 8000e7c:	2000      	movcs	r0, #0
 8000e7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e82:	bf00      	nop

08000e84 <__aeabi_uldivmod>:
 8000e84:	b953      	cbnz	r3, 8000e9c <__aeabi_uldivmod+0x18>
 8000e86:	b94a      	cbnz	r2, 8000e9c <__aeabi_uldivmod+0x18>
 8000e88:	2900      	cmp	r1, #0
 8000e8a:	bf08      	it	eq
 8000e8c:	2800      	cmpeq	r0, #0
 8000e8e:	bf1c      	itt	ne
 8000e90:	f04f 31ff 	movne.w	r1, #4294967295
 8000e94:	f04f 30ff 	movne.w	r0, #4294967295
 8000e98:	f000 b99e 	b.w	80011d8 <__aeabi_idiv0>
 8000e9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ea0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ea4:	f000 f83c 	bl	8000f20 <__udivmoddi4>
 8000ea8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eb0:	b004      	add	sp, #16
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_d2lz>:
 8000eb4:	b538      	push	{r3, r4, r5, lr}
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2300      	movs	r3, #0
 8000eba:	4604      	mov	r4, r0
 8000ebc:	460d      	mov	r5, r1
 8000ebe:	f7ff fd87 	bl	80009d0 <__aeabi_dcmplt>
 8000ec2:	b928      	cbnz	r0, 8000ed0 <__aeabi_d2lz+0x1c>
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	4629      	mov	r1, r5
 8000ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ecc:	f000 b80a 	b.w	8000ee4 <__aeabi_d2ulz>
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ed6:	f000 f805 	bl	8000ee4 <__aeabi_d2ulz>
 8000eda:	4240      	negs	r0, r0
 8000edc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ee0:	bd38      	pop	{r3, r4, r5, pc}
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_d2ulz>:
 8000ee4:	b5d0      	push	{r4, r6, r7, lr}
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <__aeabi_d2ulz+0x34>)
 8000eea:	4606      	mov	r6, r0
 8000eec:	460f      	mov	r7, r1
 8000eee:	f7ff fafd 	bl	80004ec <__aeabi_dmul>
 8000ef2:	f7ff fdd3 	bl	8000a9c <__aeabi_d2uiz>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	f7ff fa7e 	bl	80003f8 <__aeabi_ui2d>
 8000efc:	2200      	movs	r2, #0
 8000efe:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <__aeabi_d2ulz+0x38>)
 8000f00:	f7ff faf4 	bl	80004ec <__aeabi_dmul>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4630      	mov	r0, r6
 8000f0a:	4639      	mov	r1, r7
 8000f0c:	f7ff f936 	bl	800017c <__aeabi_dsub>
 8000f10:	f7ff fdc4 	bl	8000a9c <__aeabi_d2uiz>
 8000f14:	4621      	mov	r1, r4
 8000f16:	bdd0      	pop	{r4, r6, r7, pc}
 8000f18:	3df00000 	.word	0x3df00000
 8000f1c:	41f00000 	.word	0x41f00000

08000f20 <__udivmoddi4>:
 8000f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f24:	9d08      	ldr	r5, [sp, #32]
 8000f26:	460c      	mov	r4, r1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d14e      	bne.n	8000fca <__udivmoddi4+0xaa>
 8000f2c:	4694      	mov	ip, r2
 8000f2e:	458c      	cmp	ip, r1
 8000f30:	4686      	mov	lr, r0
 8000f32:	fab2 f282 	clz	r2, r2
 8000f36:	d962      	bls.n	8000ffe <__udivmoddi4+0xde>
 8000f38:	b14a      	cbz	r2, 8000f4e <__udivmoddi4+0x2e>
 8000f3a:	f1c2 0320 	rsb	r3, r2, #32
 8000f3e:	4091      	lsls	r1, r2
 8000f40:	fa20 f303 	lsr.w	r3, r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	4319      	orrs	r1, r3
 8000f4a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f56:	fb07 1114 	mls	r1, r7, r4, r1
 8000f5a:	fa1f f68c 	uxth.w	r6, ip
 8000f5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb04 f106 	mul.w	r1, r4, r6
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d90a      	bls.n	8000f84 <__udivmoddi4+0x64>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f104 30ff 	add.w	r0, r4, #4294967295
 8000f76:	f080 8110 	bcs.w	800119a <__udivmoddi4+0x27a>
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	f240 810d 	bls.w	800119a <__udivmoddi4+0x27a>
 8000f80:	3c02      	subs	r4, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1a59      	subs	r1, r3, r1
 8000f86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000f8e:	fb00 f606 	mul.w	r6, r0, r6
 8000f92:	fa1f f38e 	uxth.w	r3, lr
 8000f96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	d90a      	bls.n	8000fb4 <__udivmoddi4+0x94>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa6:	f080 80fa 	bcs.w	800119e <__udivmoddi4+0x27e>
 8000faa:	429e      	cmp	r6, r3
 8000fac:	f240 80f7 	bls.w	800119e <__udivmoddi4+0x27e>
 8000fb0:	4463      	add	r3, ip
 8000fb2:	3802      	subs	r0, #2
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	1b9b      	subs	r3, r3, r6
 8000fb8:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000fbc:	b11d      	cbz	r5, 8000fc6 <__udivmoddi4+0xa6>
 8000fbe:	40d3      	lsrs	r3, r2
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	d905      	bls.n	8000fda <__udivmoddi4+0xba>
 8000fce:	b10d      	cbz	r5, 8000fd4 <__udivmoddi4+0xb4>
 8000fd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e7f5      	b.n	8000fc6 <__udivmoddi4+0xa6>
 8000fda:	fab3 f183 	clz	r1, r3
 8000fde:	2900      	cmp	r1, #0
 8000fe0:	d146      	bne.n	8001070 <__udivmoddi4+0x150>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d302      	bcc.n	8000fec <__udivmoddi4+0xcc>
 8000fe6:	4290      	cmp	r0, r2
 8000fe8:	f0c0 80ee 	bcc.w	80011c8 <__udivmoddi4+0x2a8>
 8000fec:	1a86      	subs	r6, r0, r2
 8000fee:	eb64 0303 	sbc.w	r3, r4, r3
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	2d00      	cmp	r5, #0
 8000ff6:	d0e6      	beq.n	8000fc6 <__udivmoddi4+0xa6>
 8000ff8:	e9c5 6300 	strd	r6, r3, [r5]
 8000ffc:	e7e3      	b.n	8000fc6 <__udivmoddi4+0xa6>
 8000ffe:	2a00      	cmp	r2, #0
 8001000:	f040 808f 	bne.w	8001122 <__udivmoddi4+0x202>
 8001004:	eba1 040c 	sub.w	r4, r1, ip
 8001008:	2101      	movs	r1, #1
 800100a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800100e:	fa1f f78c 	uxth.w	r7, ip
 8001012:	fbb4 f6f8 	udiv	r6, r4, r8
 8001016:	fb08 4416 	mls	r4, r8, r6, r4
 800101a:	fb07 f006 	mul.w	r0, r7, r6
 800101e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001022:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001026:	4298      	cmp	r0, r3
 8001028:	d908      	bls.n	800103c <__udivmoddi4+0x11c>
 800102a:	eb1c 0303 	adds.w	r3, ip, r3
 800102e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001032:	d202      	bcs.n	800103a <__udivmoddi4+0x11a>
 8001034:	4298      	cmp	r0, r3
 8001036:	f200 80cb 	bhi.w	80011d0 <__udivmoddi4+0x2b0>
 800103a:	4626      	mov	r6, r4
 800103c:	1a1c      	subs	r4, r3, r0
 800103e:	fbb4 f0f8 	udiv	r0, r4, r8
 8001042:	fb08 4410 	mls	r4, r8, r0, r4
 8001046:	fb00 f707 	mul.w	r7, r0, r7
 800104a:	fa1f f38e 	uxth.w	r3, lr
 800104e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001052:	429f      	cmp	r7, r3
 8001054:	d908      	bls.n	8001068 <__udivmoddi4+0x148>
 8001056:	eb1c 0303 	adds.w	r3, ip, r3
 800105a:	f100 34ff 	add.w	r4, r0, #4294967295
 800105e:	d202      	bcs.n	8001066 <__udivmoddi4+0x146>
 8001060:	429f      	cmp	r7, r3
 8001062:	f200 80ae 	bhi.w	80011c2 <__udivmoddi4+0x2a2>
 8001066:	4620      	mov	r0, r4
 8001068:	1bdb      	subs	r3, r3, r7
 800106a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800106e:	e7a5      	b.n	8000fbc <__udivmoddi4+0x9c>
 8001070:	f1c1 0720 	rsb	r7, r1, #32
 8001074:	408b      	lsls	r3, r1
 8001076:	fa22 fc07 	lsr.w	ip, r2, r7
 800107a:	ea4c 0c03 	orr.w	ip, ip, r3
 800107e:	fa24 f607 	lsr.w	r6, r4, r7
 8001082:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001086:	fbb6 f8f9 	udiv	r8, r6, r9
 800108a:	fa1f fe8c 	uxth.w	lr, ip
 800108e:	fb09 6618 	mls	r6, r9, r8, r6
 8001092:	fa20 f307 	lsr.w	r3, r0, r7
 8001096:	408c      	lsls	r4, r1
 8001098:	fa00 fa01 	lsl.w	sl, r0, r1
 800109c:	fb08 f00e 	mul.w	r0, r8, lr
 80010a0:	431c      	orrs	r4, r3
 80010a2:	0c23      	lsrs	r3, r4, #16
 80010a4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010a8:	4298      	cmp	r0, r3
 80010aa:	fa02 f201 	lsl.w	r2, r2, r1
 80010ae:	d90a      	bls.n	80010c6 <__udivmoddi4+0x1a6>
 80010b0:	eb1c 0303 	adds.w	r3, ip, r3
 80010b4:	f108 36ff 	add.w	r6, r8, #4294967295
 80010b8:	f080 8081 	bcs.w	80011be <__udivmoddi4+0x29e>
 80010bc:	4298      	cmp	r0, r3
 80010be:	d97e      	bls.n	80011be <__udivmoddi4+0x29e>
 80010c0:	f1a8 0802 	sub.w	r8, r8, #2
 80010c4:	4463      	add	r3, ip
 80010c6:	1a1e      	subs	r6, r3, r0
 80010c8:	fbb6 f3f9 	udiv	r3, r6, r9
 80010cc:	fb09 6613 	mls	r6, r9, r3, r6
 80010d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80010d4:	b2a4      	uxth	r4, r4
 80010d6:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80010da:	45a6      	cmp	lr, r4
 80010dc:	d908      	bls.n	80010f0 <__udivmoddi4+0x1d0>
 80010de:	eb1c 0404 	adds.w	r4, ip, r4
 80010e2:	f103 30ff 	add.w	r0, r3, #4294967295
 80010e6:	d266      	bcs.n	80011b6 <__udivmoddi4+0x296>
 80010e8:	45a6      	cmp	lr, r4
 80010ea:	d964      	bls.n	80011b6 <__udivmoddi4+0x296>
 80010ec:	3b02      	subs	r3, #2
 80010ee:	4464      	add	r4, ip
 80010f0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80010f4:	fba0 8302 	umull	r8, r3, r0, r2
 80010f8:	eba4 040e 	sub.w	r4, r4, lr
 80010fc:	429c      	cmp	r4, r3
 80010fe:	46c6      	mov	lr, r8
 8001100:	461e      	mov	r6, r3
 8001102:	d350      	bcc.n	80011a6 <__udivmoddi4+0x286>
 8001104:	d04d      	beq.n	80011a2 <__udivmoddi4+0x282>
 8001106:	b155      	cbz	r5, 800111e <__udivmoddi4+0x1fe>
 8001108:	ebba 030e 	subs.w	r3, sl, lr
 800110c:	eb64 0406 	sbc.w	r4, r4, r6
 8001110:	fa04 f707 	lsl.w	r7, r4, r7
 8001114:	40cb      	lsrs	r3, r1
 8001116:	431f      	orrs	r7, r3
 8001118:	40cc      	lsrs	r4, r1
 800111a:	e9c5 7400 	strd	r7, r4, [r5]
 800111e:	2100      	movs	r1, #0
 8001120:	e751      	b.n	8000fc6 <__udivmoddi4+0xa6>
 8001122:	fa0c fc02 	lsl.w	ip, ip, r2
 8001126:	f1c2 0320 	rsb	r3, r2, #32
 800112a:	40d9      	lsrs	r1, r3
 800112c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001130:	fa20 f303 	lsr.w	r3, r0, r3
 8001134:	fa00 fe02 	lsl.w	lr, r0, r2
 8001138:	fbb1 f0f8 	udiv	r0, r1, r8
 800113c:	fb08 1110 	mls	r1, r8, r0, r1
 8001140:	4094      	lsls	r4, r2
 8001142:	431c      	orrs	r4, r3
 8001144:	fa1f f78c 	uxth.w	r7, ip
 8001148:	0c23      	lsrs	r3, r4, #16
 800114a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800114e:	fb00 f107 	mul.w	r1, r0, r7
 8001152:	4299      	cmp	r1, r3
 8001154:	d908      	bls.n	8001168 <__udivmoddi4+0x248>
 8001156:	eb1c 0303 	adds.w	r3, ip, r3
 800115a:	f100 36ff 	add.w	r6, r0, #4294967295
 800115e:	d22c      	bcs.n	80011ba <__udivmoddi4+0x29a>
 8001160:	4299      	cmp	r1, r3
 8001162:	d92a      	bls.n	80011ba <__udivmoddi4+0x29a>
 8001164:	3802      	subs	r0, #2
 8001166:	4463      	add	r3, ip
 8001168:	1a5b      	subs	r3, r3, r1
 800116a:	fbb3 f1f8 	udiv	r1, r3, r8
 800116e:	fb08 3311 	mls	r3, r8, r1, r3
 8001172:	b2a4      	uxth	r4, r4
 8001174:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001178:	fb01 f307 	mul.w	r3, r1, r7
 800117c:	42a3      	cmp	r3, r4
 800117e:	d908      	bls.n	8001192 <__udivmoddi4+0x272>
 8001180:	eb1c 0404 	adds.w	r4, ip, r4
 8001184:	f101 36ff 	add.w	r6, r1, #4294967295
 8001188:	d213      	bcs.n	80011b2 <__udivmoddi4+0x292>
 800118a:	42a3      	cmp	r3, r4
 800118c:	d911      	bls.n	80011b2 <__udivmoddi4+0x292>
 800118e:	3902      	subs	r1, #2
 8001190:	4464      	add	r4, ip
 8001192:	1ae4      	subs	r4, r4, r3
 8001194:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001198:	e73b      	b.n	8001012 <__udivmoddi4+0xf2>
 800119a:	4604      	mov	r4, r0
 800119c:	e6f2      	b.n	8000f84 <__udivmoddi4+0x64>
 800119e:	4608      	mov	r0, r1
 80011a0:	e708      	b.n	8000fb4 <__udivmoddi4+0x94>
 80011a2:	45c2      	cmp	sl, r8
 80011a4:	d2af      	bcs.n	8001106 <__udivmoddi4+0x1e6>
 80011a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80011aa:	eb63 060c 	sbc.w	r6, r3, ip
 80011ae:	3801      	subs	r0, #1
 80011b0:	e7a9      	b.n	8001106 <__udivmoddi4+0x1e6>
 80011b2:	4631      	mov	r1, r6
 80011b4:	e7ed      	b.n	8001192 <__udivmoddi4+0x272>
 80011b6:	4603      	mov	r3, r0
 80011b8:	e79a      	b.n	80010f0 <__udivmoddi4+0x1d0>
 80011ba:	4630      	mov	r0, r6
 80011bc:	e7d4      	b.n	8001168 <__udivmoddi4+0x248>
 80011be:	46b0      	mov	r8, r6
 80011c0:	e781      	b.n	80010c6 <__udivmoddi4+0x1a6>
 80011c2:	4463      	add	r3, ip
 80011c4:	3802      	subs	r0, #2
 80011c6:	e74f      	b.n	8001068 <__udivmoddi4+0x148>
 80011c8:	4606      	mov	r6, r0
 80011ca:	4623      	mov	r3, r4
 80011cc:	4608      	mov	r0, r1
 80011ce:	e711      	b.n	8000ff4 <__udivmoddi4+0xd4>
 80011d0:	3e02      	subs	r6, #2
 80011d2:	4463      	add	r3, ip
 80011d4:	e732      	b.n	800103c <__udivmoddi4+0x11c>
 80011d6:	bf00      	nop

080011d8 <__aeabi_idiv0>:
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop

080011dc <AD24C02_Write2Byte>:
#include "AD24C02.h"

#define AD24C02_ADDRESS 0XA0

void AD24C02_Write2Byte(uint8_t memAddress, uint16_t *data) {
 80011dc:	b507      	push	{r0, r1, r2, lr}
    uint8_t buffer[3];
    buffer[0] = memAddress;          // Memory address
    buffer[1] = (uint8_t)(*data);    // Low byte of data
 80011de:	880b      	ldrh	r3, [r1, #0]
    buffer[0] = memAddress;          // Memory address
 80011e0:	f88d 0004 	strb.w	r0, [sp, #4]
    buffer[1] = (uint8_t)(*data);    // Low byte of data
 80011e4:	f88d 3005 	strb.w	r3, [sp, #5]
    buffer[2] = (uint8_t)(*data >> 8); // High byte of data
    I2C_WriteData(AD24C02_ADDRESS, buffer, 3); // Write address + 2 bytes
 80011e8:	2203      	movs	r2, #3
    buffer[2] = (uint8_t)(*data >> 8); // High byte of data
 80011ea:	0a1b      	lsrs	r3, r3, #8
    I2C_WriteData(AD24C02_ADDRESS, buffer, 3); // Write address + 2 bytes
 80011ec:	a901      	add	r1, sp, #4
 80011ee:	20a0      	movs	r0, #160	@ 0xa0
    buffer[2] = (uint8_t)(*data >> 8); // High byte of data
 80011f0:	f88d 3006 	strb.w	r3, [sp, #6]
    I2C_WriteData(AD24C02_ADDRESS, buffer, 3); // Write address + 2 bytes
 80011f4:	f004 f806 	bl	8005204 <I2C_WriteData>
}
 80011f8:	b003      	add	sp, #12
 80011fa:	f85d fb04 	ldr.w	pc, [sp], #4

080011fe <AD24C02_Read2Byte>:

void AD24C02_Read2Byte(uint8_t memAddress, uint16_t *data) {
 80011fe:	b513      	push	{r0, r1, r4, lr}
 8001200:	460c      	mov	r4, r1
 8001202:	f88d 0007 	strb.w	r0, [sp, #7]
   I2C_WriteData(AD24C02_ADDRESS, &memAddress, 1);
 8001206:	f10d 0107 	add.w	r1, sp, #7
 800120a:	2201      	movs	r2, #1
 800120c:	20a0      	movs	r0, #160	@ 0xa0
 800120e:	f003 fff9 	bl	8005204 <I2C_WriteData>
   I2C_ReadData(AD24C02_ADDRESS, (uint8_t*)data, 2);
 8001212:	2202      	movs	r2, #2
 8001214:	4621      	mov	r1, r4
 8001216:	20a0      	movs	r0, #160	@ 0xa0
 8001218:	f004 f814 	bl	8005244 <I2C_ReadData>
}
 800121c:	b002      	add	sp, #8
 800121e:	bd10      	pop	{r4, pc}

08001220 <READOUT_SAVE_DATA>:

void READOUT_SAVE_DATA(void){
 8001220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	AD24C02_Read2Byte(SUM_DOSAGE_ADDRESS,&total_inject_Dosage);
 8001222:	4e19      	ldr	r6, [pc, #100]	@ (8001288 <READOUT_SAVE_DATA+0x68>)
	HAL_Delay(10);
	AD24C02_Read2Byte(TOTAL_TREE_ADDRESS,&total_Times);
 8001224:	4f19      	ldr	r7, [pc, #100]	@ (800128c <READOUT_SAVE_DATA+0x6c>)
	AD24C02_Read2Byte(SUM_DOSAGE_ADDRESS,&total_inject_Dosage);
 8001226:	4631      	mov	r1, r6
 8001228:	2020      	movs	r0, #32
 800122a:	f7ff ffe8 	bl	80011fe <AD24C02_Read2Byte>
	HAL_Delay(10);
 800122e:	200a      	movs	r0, #10
 8001230:	f005 fce4 	bl	8006bfc <HAL_Delay>
	HAL_Delay(10);
	AD24C02_Read2Byte(CURRENT_TREE_NUMBER,&current_TreeNo);
 8001234:	4d16      	ldr	r5, [pc, #88]	@ (8001290 <READOUT_SAVE_DATA+0x70>)
	AD24C02_Read2Byte(TOTAL_TREE_ADDRESS,&total_Times);
 8001236:	4639      	mov	r1, r7
 8001238:	2030      	movs	r0, #48	@ 0x30
 800123a:	f7ff ffe0 	bl	80011fe <AD24C02_Read2Byte>
	HAL_Delay(10);
 800123e:	200a      	movs	r0, #10
	HAL_Delay(10);

	sprintf(Tx_Buffer,"Main.n2.val=%d\xff\xff\xff",total_Times);
 8001240:	4c14      	ldr	r4, [pc, #80]	@ (8001294 <READOUT_SAVE_DATA+0x74>)
	HAL_Delay(10);
 8001242:	f005 fcdb 	bl	8006bfc <HAL_Delay>
	AD24C02_Read2Byte(CURRENT_TREE_NUMBER,&current_TreeNo);
 8001246:	4629      	mov	r1, r5
 8001248:	2040      	movs	r0, #64	@ 0x40
 800124a:	f7ff ffd8 	bl	80011fe <AD24C02_Read2Byte>
	HAL_Delay(10);
 800124e:	200a      	movs	r0, #10
 8001250:	f005 fcd4 	bl	8006bfc <HAL_Delay>
	sprintf(Tx_Buffer,"Main.n2.val=%d\xff\xff\xff",total_Times);
 8001254:	883a      	ldrh	r2, [r7, #0]
 8001256:	4910      	ldr	r1, [pc, #64]	@ (8001298 <READOUT_SAVE_DATA+0x78>)
 8001258:	4620      	mov	r0, r4
 800125a:	f009 fc53 	bl	800ab04 <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800125e:	4620      	mov	r0, r4
 8001260:	f005 fb8c 	bl	800697c <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"Main.n3.val=%d\xff\xff\xff",total_inject_Dosage);
 8001264:	8832      	ldrh	r2, [r6, #0]
 8001266:	490d      	ldr	r1, [pc, #52]	@ (800129c <READOUT_SAVE_DATA+0x7c>)
 8001268:	4620      	mov	r0, r4
 800126a:	f009 fc4b 	bl	800ab04 <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800126e:	4620      	mov	r0, r4
 8001270:	f005 fb84 	bl	800697c <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"Main.t19.txt=\"%04d\"\xff\xff\xff",current_TreeNo);
 8001274:	4620      	mov	r0, r4
 8001276:	882a      	ldrh	r2, [r5, #0]
 8001278:	4909      	ldr	r1, [pc, #36]	@ (80012a0 <READOUT_SAVE_DATA+0x80>)
 800127a:	f009 fc43 	bl	800ab04 <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800127e:	4620      	mov	r0, r4
}
 8001280:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001284:	f005 bb7a 	b.w	800697c <USART1_Tx_HMIdata>
 8001288:	20000a40 	.word	0x20000a40
 800128c:	20000a3e 	.word	0x20000a3e
 8001290:	200008b2 	.word	0x200008b2
 8001294:	20000b7e 	.word	0x20000b7e
 8001298:	0800d5fb 	.word	0x0800d5fb
 800129c:	0800d60d 	.word	0x0800d60d
 80012a0:	0800d61f 	.word	0x0800d61f

080012a4 <AD24C02_DataCheck>:

void AD24C02_DataCheck(void){
 80012a4:	b508      	push	{r3, lr}
	if(total_inject_Dosage > 9999){
 80012a6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80012aa:	4911      	ldr	r1, [pc, #68]	@ (80012f0 <AD24C02_DataCheck+0x4c>)
 80012ac:	880a      	ldrh	r2, [r1, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d904      	bls.n	80012bc <AD24C02_DataCheck+0x18>
		total_inject_Dosage = 0;
 80012b2:	2300      	movs	r3, #0
		AD24C02_Write2Byte(SUM_DOSAGE_ADDRESS,&total_inject_Dosage);
 80012b4:	2020      	movs	r0, #32
		total_inject_Dosage = 0;
 80012b6:	800b      	strh	r3, [r1, #0]
		AD24C02_Write2Byte(SUM_DOSAGE_ADDRESS,&total_inject_Dosage);
 80012b8:	f7ff ff90 	bl	80011dc <AD24C02_Write2Byte>
	}
	if(total_Times > 9999){
 80012bc:	f242 730f 	movw	r3, #9999	@ 0x270f
 80012c0:	490c      	ldr	r1, [pc, #48]	@ (80012f4 <AD24C02_DataCheck+0x50>)
 80012c2:	880a      	ldrh	r2, [r1, #0]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d904      	bls.n	80012d2 <AD24C02_DataCheck+0x2e>
		total_Times = 0;
 80012c8:	2300      	movs	r3, #0
		AD24C02_Write2Byte(TOTAL_TREE_ADDRESS,&total_Times);
 80012ca:	2030      	movs	r0, #48	@ 0x30
		total_Times = 0;
 80012cc:	800b      	strh	r3, [r1, #0]
		AD24C02_Write2Byte(TOTAL_TREE_ADDRESS,&total_Times);
 80012ce:	f7ff ff85 	bl	80011dc <AD24C02_Write2Byte>
	}
	if(current_TreeNo > 9999){
 80012d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80012d6:	4908      	ldr	r1, [pc, #32]	@ (80012f8 <AD24C02_DataCheck+0x54>)
 80012d8:	880a      	ldrh	r2, [r1, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d906      	bls.n	80012ec <AD24C02_DataCheck+0x48>
		current_TreeNo = 0;
 80012de:	2300      	movs	r3, #0
		AD24C02_Write2Byte(CURRENT_TREE_NUMBER,&current_TreeNo);
 80012e0:	2040      	movs	r0, #64	@ 0x40
		current_TreeNo = 0;
 80012e2:	800b      	strh	r3, [r1, #0]
	}
}
 80012e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		AD24C02_Write2Byte(CURRENT_TREE_NUMBER,&current_TreeNo);
 80012e8:	f7ff bf78 	b.w	80011dc <AD24C02_Write2Byte>
}
 80012ec:	bd08      	pop	{r3, pc}
 80012ee:	bf00      	nop
 80012f0:	20000a40 	.word	0x20000a40
 80012f4:	20000a3e 	.word	0x20000a3e
 80012f8:	200008b2 	.word	0x200008b2

080012fc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80012fc:	b507      	push	{r0, r1, r2, lr}
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
PUTCHAR_PROTOTYPE {
 8001302:	9001      	str	r0, [sp, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001304:	2201      	movs	r2, #1
 8001306:	a901      	add	r1, sp, #4
 8001308:	4803      	ldr	r0, [pc, #12]	@ (8001318 <__io_putchar+0x1c>)
 800130a:	f007 fa46 	bl	800879a <HAL_UART_Transmit>
    return ch;
}
 800130e:	9801      	ldr	r0, [sp, #4]
 8001310:	b003      	add	sp, #12
 8001312:	f85d fb04 	ldr.w	pc, [sp], #4
 8001316:	bf00      	nop
 8001318:	20000b34 	.word	0x20000b34

0800131c <process_gps_data>:



/* 解析GPS-GGA数据 */
int process_gps_data(const char *data, GPS_Data* result) {
 800131c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001320:	460c      	mov	r4, r1
    if (!data || !result) return -1;
 8001322:	4605      	mov	r5, r0
int process_gps_data(const char *data, GPS_Data* result) {
 8001324:	b0a2      	sub	sp, #136	@ 0x88
    if (!data || !result) return -1;
 8001326:	b920      	cbnz	r0, 8001332 <process_gps_data+0x16>
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
        }
        token = strtok_r(NULL, ",", &saveptr);
        field_index++;
    }
    return 0; // 成功
}
 800132c:	b022      	add	sp, #136	@ 0x88
 800132e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!data || !result) return -1;
 8001332:	2900      	cmp	r1, #0
 8001334:	d0f8      	beq.n	8001328 <process_gps_data+0xc>
    memset(result, 0, sizeof(GPS_Data));
 8001336:	223c      	movs	r2, #60	@ 0x3c
 8001338:	2100      	movs	r1, #0
 800133a:	4620      	mov	r0, r4
 800133c:	f009 fc55 	bl	800abea <memset>
    char *checksum_ptr = strchr(data, '*');
 8001340:	212a      	movs	r1, #42	@ 0x2a
 8001342:	4628      	mov	r0, r5
 8001344:	f009 fc68 	bl	800ac18 <strchr>
    if (!checksum_ptr) return -1; // 无校验和
 8001348:	4606      	mov	r6, r0
 800134a:	2800      	cmp	r0, #0
 800134c:	d0ec      	beq.n	8001328 <process_gps_data+0xc>
    uint8_t checksum_recv = strtol(checksum_ptr + 1, NULL, 16);
 800134e:	2210      	movs	r2, #16
 8001350:	2100      	movs	r1, #0
 8001352:	3001      	adds	r0, #1
 8001354:	f008 fc6a 	bl	8009c2c <strtol>
    for (const char *p = data + 1; p < checksum_ptr; p++) {
 8001358:	1c6f      	adds	r7, r5, #1
 800135a:	463a      	mov	r2, r7
    uint8_t checksum_calc = 0;
 800135c:	2300      	movs	r3, #0
    uint8_t checksum_recv = strtol(checksum_ptr + 1, NULL, 16);
 800135e:	b2c0      	uxtb	r0, r0
    for (const char *p = data + 1; p < checksum_ptr; p++) {
 8001360:	42b2      	cmp	r2, r6
 8001362:	d32a      	bcc.n	80013ba <process_gps_data+0x9e>
    if (checksum_calc != checksum_recv) {
 8001364:	4283      	cmp	r3, r0
 8001366:	f040 80b4 	bne.w	80014d2 <process_gps_data+0x1b6>
    if (strncmp(data + 1, "GNGGA", 5) != 0 && strncmp(data + 1, "GNRMC", 5) != 0) {
 800136a:	2205      	movs	r2, #5
 800136c:	4638      	mov	r0, r7
 800136e:	495c      	ldr	r1, [pc, #368]	@ (80014e0 <process_gps_data+0x1c4>)
 8001370:	f009 fc5f 	bl	800ac32 <strncmp>
 8001374:	b138      	cbz	r0, 8001386 <process_gps_data+0x6a>
 8001376:	2205      	movs	r2, #5
 8001378:	4638      	mov	r0, r7
 800137a:	495a      	ldr	r1, [pc, #360]	@ (80014e4 <process_gps_data+0x1c8>)
 800137c:	f009 fc59 	bl	800ac32 <strncmp>
 8001380:	2800      	cmp	r0, #0
 8001382:	f040 80a9 	bne.w	80014d8 <process_gps_data+0x1bc>
    result->header[5] = '\0';
 8001386:	2600      	movs	r6, #0
    strncpy(result->header, data + 1, 5);
 8001388:	4639      	mov	r1, r7
 800138a:	2205      	movs	r2, #5
 800138c:	4620      	mov	r0, r4
 800138e:	f009 fc62 	bl	800ac56 <strncpy>
    strncpy(data_copy, data, sizeof(data_copy));
 8001392:	4629      	mov	r1, r5
 8001394:	2280      	movs	r2, #128	@ 0x80
    result->header[5] = '\0';
 8001396:	7166      	strb	r6, [r4, #5]
    strncpy(data_copy, data, sizeof(data_copy));
 8001398:	a802      	add	r0, sp, #8
 800139a:	f009 fc5c 	bl	800ac56 <strncpy>
    token = strtok_r(data_copy, ",", &saveptr);
 800139e:	4952      	ldr	r1, [pc, #328]	@ (80014e8 <process_gps_data+0x1cc>)
 80013a0:	aa01      	add	r2, sp, #4
 80013a2:	a802      	add	r0, sp, #8
 80013a4:	f009 fc92 	bl	800accc <strtok_r>
 80013a8:	4605      	mov	r5, r0
                if (strcmp(result->header, "GNGGA") == 0) {
 80013aa:	4f4d      	ldr	r7, [pc, #308]	@ (80014e0 <process_gps_data+0x1c4>)
        token = strtok_r(NULL, ",", &saveptr);
 80013ac:	f8df a138 	ldr.w	sl, [pc, #312]	@ 80014e8 <process_gps_data+0x1cc>
                strncpy(result->time, token, sizeof(result->time) - 1);
 80013b0:	f104 0907 	add.w	r9, r4, #7
    while (token) {
 80013b4:	b92d      	cbnz	r5, 80013c2 <process_gps_data+0xa6>
    return 0; // 成功
 80013b6:	4628      	mov	r0, r5
 80013b8:	e7b8      	b.n	800132c <process_gps_data+0x10>
        checksum_calc ^= *p;
 80013ba:	f812 1b01 	ldrb.w	r1, [r2], #1
 80013be:	404b      	eors	r3, r1
    for (const char *p = data + 1; p < checksum_ptr; p++) {
 80013c0:	e7ce      	b.n	8001360 <process_gps_data+0x44>
        switch (field_index) {
 80013c2:	1e73      	subs	r3, r6, #1
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	d80d      	bhi.n	80013e4 <process_gps_data+0xc8>
 80013c8:	e8df f003 	tbb	[pc, r3]
 80013cc:	2e241405 	.word	0x2e241405
 80013d0:	0c0c5544 	.word	0x0c0c5544
 80013d4:	67          	.byte	0x67
 80013d5:	00          	.byte	0x00
                strncpy(result->time, token, sizeof(result->time) - 1);
 80013d6:	220b      	movs	r2, #11
 80013d8:	4629      	mov	r1, r5
 80013da:	4648      	mov	r0, r9
 80013dc:	f009 fc3b 	bl	800ac56 <strncpy>
                result->time[sizeof(result->time) - 1] = '\0';
 80013e0:	2300      	movs	r3, #0
 80013e2:	74a3      	strb	r3, [r4, #18]
        token = strtok_r(NULL, ",", &saveptr);
 80013e4:	4651      	mov	r1, sl
 80013e6:	2000      	movs	r0, #0
 80013e8:	aa01      	add	r2, sp, #4
 80013ea:	f009 fc6f 	bl	800accc <strtok_r>
        field_index++;
 80013ee:	3601      	adds	r6, #1
        token = strtok_r(NULL, ",", &saveptr);
 80013f0:	4605      	mov	r5, r0
        field_index++;
 80013f2:	e7df      	b.n	80013b4 <process_gps_data+0x98>
								if (strcmp(result->header, "GNGGA") == 0){
 80013f4:	4639      	mov	r1, r7
            		} else if (strcmp(result->header, "GNRMC") == 0) {
 80013f6:	4620      	mov	r0, r4
 80013f8:	f7fe feaa 	bl	8000150 <strcmp>
 80013fc:	4680      	mov	r8, r0
 80013fe:	2800      	cmp	r0, #0
 8001400:	d1f0      	bne.n	80013e4 <process_gps_data+0xc8>
										strncpy(result->latitude, token, sizeof(result->latitude) - 1);
 8001402:	220b      	movs	r2, #11
 8001404:	4629      	mov	r1, r5
 8001406:	f104 0013 	add.w	r0, r4, #19
 800140a:	f009 fc24 	bl	800ac56 <strncpy>
										result->latitude[sizeof(result->latitude) - 1] = '\0';
 800140e:	f884 801e 	strb.w	r8, [r4, #30]
 8001412:	e7e7      	b.n	80013e4 <process_gps_data+0xc8>
            		if (strcmp(result->header, "GNGGA") == 0){
 8001414:	4639      	mov	r1, r7
 8001416:	4620      	mov	r0, r4
 8001418:	f7fe fe9a 	bl	8000150 <strcmp>
 800141c:	b910      	cbnz	r0, 8001424 <process_gps_data+0x108>
										result->lat_dir = *token;
 800141e:	782b      	ldrb	r3, [r5, #0]
 8001420:	77e3      	strb	r3, [r4, #31]
 8001422:	e7df      	b.n	80013e4 <process_gps_data+0xc8>
            		} else if (strcmp(result->header, "GNRMC") == 0) {
 8001424:	492f      	ldr	r1, [pc, #188]	@ (80014e4 <process_gps_data+0x1c8>)
 8001426:	e7e6      	b.n	80013f6 <process_gps_data+0xda>
								if (strcmp(result->header, "GNGGA") == 0){
 8001428:	4639      	mov	r1, r7
 800142a:	4620      	mov	r0, r4
 800142c:	f7fe fe90 	bl	8000150 <strcmp>
 8001430:	4680      	mov	r8, r0
 8001432:	b940      	cbnz	r0, 8001446 <process_gps_data+0x12a>
										strncpy(result->longitude, token, sizeof(result->longitude) - 1);
 8001434:	220b      	movs	r2, #11
 8001436:	4629      	mov	r1, r5
 8001438:	f104 0020 	add.w	r0, r4, #32
 800143c:	f009 fc0b 	bl	800ac56 <strncpy>
										result->longitude[sizeof(result->longitude) - 1] = '\0';
 8001440:	f884 802b 	strb.w	r8, [r4, #43]	@ 0x2b
 8001444:	e7ce      	b.n	80013e4 <process_gps_data+0xc8>
								}else if (strcmp(result->header, "GNRMC") == 0) {
 8001446:	4620      	mov	r0, r4
 8001448:	4926      	ldr	r1, [pc, #152]	@ (80014e4 <process_gps_data+0x1c8>)
 800144a:	f7fe fe81 	bl	8000150 <strcmp>
 800144e:	2800      	cmp	r0, #0
 8001450:	d1c8      	bne.n	80013e4 <process_gps_data+0xc8>
 8001452:	e7e4      	b.n	800141e <process_gps_data+0x102>
								if (strcmp(result->header, "GNGGA") == 0){
 8001454:	4639      	mov	r1, r7
 8001456:	4620      	mov	r0, r4
 8001458:	f7fe fe7a 	bl	8000150 <strcmp>
 800145c:	b918      	cbnz	r0, 8001466 <process_gps_data+0x14a>
										result->lon_dir = *token;
 800145e:	782b      	ldrb	r3, [r5, #0]
 8001460:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8001464:	e7be      	b.n	80013e4 <process_gps_data+0xc8>
								}else if (strcmp(result->header, "GNRMC") == 0) {
 8001466:	4620      	mov	r0, r4
 8001468:	491e      	ldr	r1, [pc, #120]	@ (80014e4 <process_gps_data+0x1c8>)
 800146a:	f7fe fe71 	bl	8000150 <strcmp>
 800146e:	4680      	mov	r8, r0
 8001470:	2800      	cmp	r0, #0
 8001472:	d1b7      	bne.n	80013e4 <process_gps_data+0xc8>
 8001474:	e7de      	b.n	8001434 <process_gps_data+0x118>
								if (strcmp(result->header, "GNGGA") == 0){
 8001476:	4639      	mov	r1, r7
 8001478:	4620      	mov	r0, r4
 800147a:	f7fe fe69 	bl	8000150 <strcmp>
 800147e:	b928      	cbnz	r0, 800148c <process_gps_data+0x170>
										result->fix_status = (uint8_t)atoi(token);
 8001480:	4628      	mov	r0, r5
 8001482:	f007 fc89 	bl	8008d98 <atoi>
 8001486:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800148a:	e7ab      	b.n	80013e4 <process_gps_data+0xc8>
								}else if (strcmp(result->header, "GNRMC") == 0) {
 800148c:	4620      	mov	r0, r4
 800148e:	4915      	ldr	r1, [pc, #84]	@ (80014e4 <process_gps_data+0x1c8>)
 8001490:	f7fe fe5e 	bl	8000150 <strcmp>
 8001494:	2800      	cmp	r0, #0
 8001496:	d1a5      	bne.n	80013e4 <process_gps_data+0xc8>
 8001498:	e7e1      	b.n	800145e <process_gps_data+0x142>
                if (strcmp(result->header, "GNGGA") == 0) {
 800149a:	4639      	mov	r1, r7
 800149c:	4620      	mov	r0, r4
 800149e:	f7fe fe57 	bl	8000150 <strcmp>
 80014a2:	b930      	cbnz	r0, 80014b2 <process_gps_data+0x196>
                    result->altitude = atof(token);
 80014a4:	4628      	mov	r0, r5
 80014a6:	f007 fc74 	bl	8008d92 <atof>
 80014aa:	f7ff fb17 	bl	8000adc <__aeabi_d2f>
 80014ae:	6320      	str	r0, [r4, #48]	@ 0x30
 80014b0:	e798      	b.n	80013e4 <process_gps_data+0xc8>
                } else if (strcmp(result->header, "GNRMC") == 0) {
 80014b2:	4620      	mov	r0, r4
 80014b4:	490b      	ldr	r1, [pc, #44]	@ (80014e4 <process_gps_data+0x1c8>)
 80014b6:	f7fe fe4b 	bl	8000150 <strcmp>
 80014ba:	4680      	mov	r8, r0
 80014bc:	2800      	cmp	r0, #0
 80014be:	d191      	bne.n	80013e4 <process_gps_data+0xc8>
                    strncpy(result->date, token, sizeof(result->date) - 1);
 80014c0:	2206      	movs	r2, #6
 80014c2:	4629      	mov	r1, r5
 80014c4:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80014c8:	f009 fbc5 	bl	800ac56 <strncpy>
                    result->date[sizeof(result->date) - 1] = '\0';
 80014cc:	f884 803a 	strb.w	r8, [r4, #58]	@ 0x3a
 80014d0:	e788      	b.n	80013e4 <process_gps_data+0xc8>
        return -2; // 校验和错误
 80014d2:	f06f 0001 	mvn.w	r0, #1
 80014d6:	e729      	b.n	800132c <process_gps_data+0x10>
        return -3; // 不支持的消息类型
 80014d8:	f06f 0002 	mvn.w	r0, #2
 80014dc:	e726      	b.n	800132c <process_gps_data+0x10>
 80014de:	bf00      	nop
 80014e0:	0800d636 	.word	0x0800d636
 80014e4:	0800d63c 	.word	0x0800d63c
 80014e8:	0800d9a8 	.word	0x0800d9a8

080014ec <Format_GPS_Date>:
//格式化日期字符串
void Format_GPS_Date(char* DateResault,char* time,char* date){
 80014ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014f0:	4615      	mov	r5, r2
		char Resault[12] = {0};
 80014f2:	2400      	movs	r4, #0
		// 解析日期字符串
		char dd_part[3] = {0};
 80014f4:	4b29      	ldr	r3, [pc, #164]	@ (800159c <Format_GPS_Date+0xb0>)
void Format_GPS_Date(char* DateResault,char* time,char* date){
 80014f6:	b08a      	sub	sp, #40	@ 0x28
		char dd_part[3] = {0};
 80014f8:	f8b3 a000 	ldrh.w	sl, [r3]
void Format_GPS_Date(char* DateResault,char* time,char* date){
 80014fc:	4606      	mov	r6, r0
 80014fe:	4689      	mov	r9, r1
		char mm_part[3] = {0};
		char yy_part[3] = {0};

		strncpy(dd_part, date, 2);
 8001500:	2202      	movs	r2, #2
 8001502:	4629      	mov	r1, r5
 8001504:	a803      	add	r0, sp, #12
		char Resault[12] = {0};
 8001506:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800150a:	9409      	str	r4, [sp, #36]	@ 0x24
		char dd_part[3] = {0};
 800150c:	f8ad a00c 	strh.w	sl, [sp, #12]
 8001510:	f88d 400e 	strb.w	r4, [sp, #14]
		char mm_part[3] = {0};
 8001514:	f8ad a010 	strh.w	sl, [sp, #16]
 8001518:	f88d 4012 	strb.w	r4, [sp, #18]
		char yy_part[3] = {0};
 800151c:	f8ad a014 	strh.w	sl, [sp, #20]
 8001520:	f88d 4016 	strb.w	r4, [sp, #22]
		strncpy(dd_part, date, 2);
 8001524:	f009 fb97 	bl	800ac56 <strncpy>
		strncpy(mm_part, date + 2, 2);
 8001528:	2202      	movs	r2, #2
 800152a:	a804      	add	r0, sp, #16
 800152c:	18a9      	adds	r1, r5, r2
 800152e:	f009 fb92 	bl	800ac56 <strncpy>
		strncpy(yy_part, date + 4, 2);
 8001532:	1d29      	adds	r1, r5, #4
 8001534:	2202      	movs	r2, #2
 8001536:	a805      	add	r0, sp, #20
 8001538:	f009 fb8d 	bl	800ac56 <strncpy>

		int dd = atoi(dd_part);
 800153c:	a803      	add	r0, sp, #12
 800153e:	f007 fc2b 	bl	8008d98 <atoi>
 8001542:	4680      	mov	r8, r0
		int mm = atoi(mm_part);
 8001544:	a804      	add	r0, sp, #16
 8001546:	f007 fc27 	bl	8008d98 <atoi>
 800154a:	4607      	mov	r7, r0
		int yy = atoi(yy_part);
 800154c:	a805      	add	r0, sp, #20
 800154e:	f007 fc23 	bl	8008d98 <atoi>

		// 解析时间字符串
		char hh_part[3] = {0};
		strncpy(hh_part, time, 2);
 8001552:	4649      	mov	r1, r9
		int yy = atoi(yy_part);
 8001554:	4605      	mov	r5, r0
		strncpy(hh_part, time, 2);
 8001556:	2202      	movs	r2, #2
 8001558:	a806      	add	r0, sp, #24
		char hh_part[3] = {0};
 800155a:	f8ad a018 	strh.w	sl, [sp, #24]
 800155e:	f88d 401a 	strb.w	r4, [sp, #26]
		strncpy(hh_part, time, 2);
 8001562:	f009 fb78 	bl	800ac56 <strncpy>
		int hh = atoi(hh_part);
 8001566:	a806      	add	r0, sp, #24
 8001568:	f007 fc16 	bl	8008d98 <atoi>

		// 格式化输出
		snprintf(Resault,12,"%4d/%02d/%02d", 2000 + yy, mm, dd+((hh+8)/24));
 800156c:	2318      	movs	r3, #24
 800156e:	f100 0208 	add.w	r2, r0, #8
 8001572:	fb92 f2f3 	sdiv	r2, r2, r3
 8001576:	4442      	add	r2, r8
 8001578:	e9cd 7200 	strd	r7, r2, [sp]
 800157c:	f505 63fa 	add.w	r3, r5, #2000	@ 0x7d0
 8001580:	210c      	movs	r1, #12
 8001582:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <Format_GPS_Date+0xb4>)
 8001584:	a807      	add	r0, sp, #28
 8001586:	f009 fa89 	bl	800aa9c <sniprintf>
		strncpy(DateResault, Resault, 15);
 800158a:	220f      	movs	r2, #15
 800158c:	4630      	mov	r0, r6
 800158e:	a907      	add	r1, sp, #28
 8001590:	f009 fb61 	bl	800ac56 <strncpy>
}
 8001594:	b00a      	add	sp, #40	@ 0x28
 8001596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800159a:	bf00      	nop
 800159c:	0800d5f8 	.word	0x0800d5f8
 80015a0:	0800d642 	.word	0x0800d642

080015a4 <Format_GPS_Time>:

//格式化日期时间字符串
void Format_GPS_Time(char* TimeResault,char* time){
		char Resault[10] = {0};
 80015a4:	2300      	movs	r3, #0
void Format_GPS_Time(char* TimeResault,char* time){
 80015a6:	b570      	push	{r4, r5, r6, lr}
		// 解析时间字符串
		char hh_part[3] = {0};
 80015a8:	4a20      	ldr	r2, [pc, #128]	@ (800162c <Format_GPS_Time+0x88>)
void Format_GPS_Time(char* TimeResault,char* time){
 80015aa:	b088      	sub	sp, #32
		char hh_part[3] = {0};
 80015ac:	8812      	ldrh	r2, [r2, #0]
void Format_GPS_Time(char* TimeResault,char* time){
 80015ae:	4605      	mov	r5, r0
		char hh_part[3] = {0};
 80015b0:	f8ad 2008 	strh.w	r2, [sp, #8]
		char mi_part[3] = {0};
 80015b4:	f8ad 200c 	strh.w	r2, [sp, #12]
		char ss_part[3] = {0};
 80015b8:	f8ad 2010 	strh.w	r2, [sp, #16]

		strncpy(hh_part, time, 2);
 80015bc:	a802      	add	r0, sp, #8
 80015be:	2202      	movs	r2, #2
		char Resault[10] = {0};
 80015c0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80015c4:	f8ad 301c 	strh.w	r3, [sp, #28]
		char hh_part[3] = {0};
 80015c8:	f88d 300a 	strb.w	r3, [sp, #10]
		char mi_part[3] = {0};
 80015cc:	f88d 300e 	strb.w	r3, [sp, #14]
		char ss_part[3] = {0};
 80015d0:	f88d 3012 	strb.w	r3, [sp, #18]
void Format_GPS_Time(char* TimeResault,char* time){
 80015d4:	460c      	mov	r4, r1
		strncpy(hh_part, time, 2);
 80015d6:	f009 fb3e 	bl	800ac56 <strncpy>
		strncpy(mi_part, time + 2, 2);
 80015da:	2202      	movs	r2, #2
 80015dc:	a803      	add	r0, sp, #12
 80015de:	18a1      	adds	r1, r4, r2
 80015e0:	f009 fb39 	bl	800ac56 <strncpy>
		strncpy(ss_part, time + 4, 2);
 80015e4:	1d21      	adds	r1, r4, #4
 80015e6:	2202      	movs	r2, #2
 80015e8:	a804      	add	r0, sp, #16
 80015ea:	f009 fb34 	bl	800ac56 <strncpy>

		int hh = atoi(hh_part);
 80015ee:	a802      	add	r0, sp, #8
 80015f0:	f007 fbd2 	bl	8008d98 <atoi>
 80015f4:	4604      	mov	r4, r0
		int mi = atoi(mi_part);
 80015f6:	a803      	add	r0, sp, #12
 80015f8:	f007 fbce 	bl	8008d98 <atoi>
 80015fc:	4606      	mov	r6, r0
		int ss = atoi(ss_part);
 80015fe:	a804      	add	r0, sp, #16
 8001600:	f007 fbca 	bl	8008d98 <atoi>

		// 格式化输出
		sprintf(Resault,"%02d:%02d:%02d", (hh+8)%24, mi, ss);
 8001604:	2218      	movs	r2, #24
 8001606:	f104 0108 	add.w	r1, r4, #8
 800160a:	fb91 f4f2 	sdiv	r4, r1, r2
 800160e:	4633      	mov	r3, r6
 8001610:	fb02 1214 	mls	r2, r2, r4, r1
 8001614:	9000      	str	r0, [sp, #0]
 8001616:	4906      	ldr	r1, [pc, #24]	@ (8001630 <Format_GPS_Time+0x8c>)
 8001618:	a805      	add	r0, sp, #20
 800161a:	f009 fa73 	bl	800ab04 <siprintf>
		strncpy(TimeResault, Resault, 12);
 800161e:	220c      	movs	r2, #12
 8001620:	4628      	mov	r0, r5
 8001622:	a905      	add	r1, sp, #20
 8001624:	f009 fb17 	bl	800ac56 <strncpy>
}
 8001628:	b008      	add	sp, #32
 800162a:	bd70      	pop	{r4, r5, r6, pc}
 800162c:	0800d5f8 	.word	0x0800d5f8
 8001630:	0800d650 	.word	0x0800d650

08001634 <Format_FileName_Date>:

//格式化日期字符串(2025-02-22)
void Format_FileName_Date(char* NameResault,char* time,char* date){
 8001634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001638:	4614      	mov	r4, r2
//		char Resault[21] = {0};
		// 解析日期字符串
		char dd_part[3] = {0};
 800163a:	2500      	movs	r5, #0
 800163c:	4b24      	ldr	r3, [pc, #144]	@ (80016d0 <Format_FileName_Date+0x9c>)
void Format_FileName_Date(char* NameResault,char* time,char* date){
 800163e:	b086      	sub	sp, #24
		char dd_part[3] = {0};
 8001640:	f8b3 a000 	ldrh.w	sl, [r3]
void Format_FileName_Date(char* NameResault,char* time,char* date){
 8001644:	4606      	mov	r6, r0
 8001646:	4689      	mov	r9, r1
		char mm_part[3] = {0};
		char yy_part[3] = {0};

		strncpy(dd_part, date, 2);
 8001648:	2202      	movs	r2, #2
 800164a:	4621      	mov	r1, r4
 800164c:	a802      	add	r0, sp, #8
		char dd_part[3] = {0};
 800164e:	f8ad a008 	strh.w	sl, [sp, #8]
 8001652:	f88d 500a 	strb.w	r5, [sp, #10]
		char mm_part[3] = {0};
 8001656:	f8ad a00c 	strh.w	sl, [sp, #12]
 800165a:	f88d 500e 	strb.w	r5, [sp, #14]
		char yy_part[3] = {0};
 800165e:	f8ad a010 	strh.w	sl, [sp, #16]
 8001662:	f88d 5012 	strb.w	r5, [sp, #18]
		strncpy(dd_part, date, 2);
 8001666:	f009 faf6 	bl	800ac56 <strncpy>
		strncpy(mm_part, date + 2, 2);
 800166a:	2202      	movs	r2, #2
 800166c:	a803      	add	r0, sp, #12
 800166e:	18a1      	adds	r1, r4, r2
 8001670:	f009 faf1 	bl	800ac56 <strncpy>
		strncpy(yy_part, date + 4, 2);
 8001674:	1d21      	adds	r1, r4, #4
 8001676:	2202      	movs	r2, #2
 8001678:	a804      	add	r0, sp, #16
 800167a:	f009 faec 	bl	800ac56 <strncpy>

		int dd = atoi(dd_part);
 800167e:	a802      	add	r0, sp, #8
 8001680:	f007 fb8a 	bl	8008d98 <atoi>
 8001684:	4680      	mov	r8, r0
		int mm = atoi(mm_part);
 8001686:	a803      	add	r0, sp, #12
 8001688:	f007 fb86 	bl	8008d98 <atoi>
 800168c:	4607      	mov	r7, r0
		int yy = atoi(yy_part);
 800168e:	a804      	add	r0, sp, #16
 8001690:	f007 fb82 	bl	8008d98 <atoi>

		// 解析时间字符串
		char hh_part[3] = {0};
		strncpy(hh_part, time, 2);
 8001694:	4649      	mov	r1, r9
		int yy = atoi(yy_part);
 8001696:	4604      	mov	r4, r0
		strncpy(hh_part, time, 2);
 8001698:	2202      	movs	r2, #2
 800169a:	a805      	add	r0, sp, #20
		char hh_part[3] = {0};
 800169c:	f8ad a014 	strh.w	sl, [sp, #20]
 80016a0:	f88d 5016 	strb.w	r5, [sp, #22]
		strncpy(hh_part, time, 2);
 80016a4:	f009 fad7 	bl	800ac56 <strncpy>
		int hh = atoi(hh_part);
 80016a8:	a805      	add	r0, sp, #20
 80016aa:	f007 fb75 	bl	8008d98 <atoi>
		// 格式化输出
//		snprintf(NameResault,12,"%4d%02d%02d", 2000 + yy, mm, dd+((hh+8)/24));
		snprintf(NameResault,12,"%2d%02d%02d", yy, mm, dd+((hh+8)/24));
 80016ae:	2318      	movs	r3, #24
 80016b0:	f100 0208 	add.w	r2, r0, #8
 80016b4:	fb92 f2f3 	sdiv	r2, r2, r3
 80016b8:	4442      	add	r2, r8
 80016ba:	e9cd 7200 	strd	r7, r2, [sp]
 80016be:	4623      	mov	r3, r4
 80016c0:	210c      	movs	r1, #12
 80016c2:	4630      	mov	r0, r6
 80016c4:	4a03      	ldr	r2, [pc, #12]	@ (80016d4 <Format_FileName_Date+0xa0>)
 80016c6:	f009 f9e9 	bl	800aa9c <sniprintf>
//		strncpy(NameResault, Resault, 8);
}
 80016ca:	b006      	add	sp, #24
 80016cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016d0:	0800d5f8 	.word	0x0800d5f8
 80016d4:	0800d65f 	.word	0x0800d65f

080016d8 <FormatLongitude>:

//格式化经度字符串
void FormatLongitude(char* LongitudeStr, char* Longitude, char Lon_dir) {
 80016d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    // 解析输入字符串格式：DDDMM.MMMMM
    char dd_part[4] = {0};      // 度（3位）
 80016da:	2300      	movs	r3, #0
void FormatLongitude(char* LongitudeStr, char* Longitude, char Lon_dir) {
 80016dc:	460e      	mov	r6, r1
 80016de:	4615      	mov	r5, r2
    char mm_part[3] = {0};      // 分（2位）
 80016e0:	4a10      	ldr	r2, [pc, #64]	@ (8001724 <FormatLongitude+0x4c>)
void FormatLongitude(char* LongitudeStr, char* Longitude, char Lon_dir) {
 80016e2:	4604      	mov	r4, r0
    char mm_part[3] = {0};      // 分（2位）
 80016e4:	8812      	ldrh	r2, [r2, #0]
    char decimal_part[6] = {0}; // 小数分（最多5位）

    // 分割字符串
    strncpy(dd_part, Longitude, 3);
 80016e6:	a803      	add	r0, sp, #12
    char mm_part[3] = {0};      // 分（2位）
 80016e8:	f8ad 2008 	strh.w	r2, [sp, #8]
    strncpy(dd_part, Longitude, 3);
 80016ec:	2203      	movs	r2, #3
    char dd_part[4] = {0};      // 度（3位）
 80016ee:	9303      	str	r3, [sp, #12]
    char mm_part[3] = {0};      // 分（2位）
 80016f0:	f88d 300a 	strb.w	r3, [sp, #10]
    strncpy(dd_part, Longitude, 3);
 80016f4:	f009 faaf 	bl	800ac56 <strncpy>
    strncpy(mm_part, Longitude + 3, 2);
 80016f8:	1cf1      	adds	r1, r6, #3
 80016fa:	2202      	movs	r2, #2
 80016fc:	a802      	add	r0, sp, #8
 80016fe:	f009 faaa 	bl	800ac56 <strncpy>
    if (dot_ptr) {
        strncpy(decimal_part, dot_ptr + 1, 5); // 取小数点后最多5位
    }

    // 转换为数值
    int dd = atoi(dd_part);
 8001702:	a803      	add	r0, sp, #12
 8001704:	f007 fb48 	bl	8008d98 <atoi>
 8001708:	4606      	mov	r6, r0
    int mm = atoi(mm_part);
 800170a:	a802      	add	r0, sp, #8
 800170c:	f007 fb44 	bl	8008d98 <atoi>
//    int ss = (int)total_seconds;
//    int decimals = (int)((total_seconds - ss) * 1000.0 + 0.5); // 四舍五入到三位小数

    // 格式化输出到缓冲区（最大长度示例：E123°45'67.890）
//    snprintf(LongitudeStr, 20, "%c%03d°%02d’%02d.%03d\"", Lon_dir, dd, mm, ss, decimals);
    snprintf(LongitudeStr, 20, "%c%d°%02d’", Lon_dir, dd, mm);
 8001710:	462b      	mov	r3, r5
 8001712:	e9cd 6000 	strd	r6, r0, [sp]
 8001716:	2114      	movs	r1, #20
 8001718:	4620      	mov	r0, r4
 800171a:	4a03      	ldr	r2, [pc, #12]	@ (8001728 <FormatLongitude+0x50>)
 800171c:	f009 f9be 	bl	800aa9c <sniprintf>
}
 8001720:	b004      	add	sp, #16
 8001722:	bd70      	pop	{r4, r5, r6, pc}
 8001724:	0800d5f8 	.word	0x0800d5f8
 8001728:	0800d66b 	.word	0x0800d66b

0800172c <FormatLatitude>:

//格式化纬度字符串
void FormatLatitude(char* LatitudeStr, char* Latitude, char Lat_dir) {
 800172c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    // 解析输入字符串格式：DDMM.MMMMM
    char dd_part[3] = {0};      // 度（2位）
 800172e:	4b14      	ldr	r3, [pc, #80]	@ (8001780 <FormatLatitude+0x54>)
void FormatLatitude(char* LatitudeStr, char* Latitude, char Lat_dir) {
 8001730:	4615      	mov	r5, r2
    char dd_part[3] = {0};      // 度（2位）
 8001732:	881a      	ldrh	r2, [r3, #0]
 8001734:	2300      	movs	r3, #0
void FormatLatitude(char* LatitudeStr, char* Latitude, char Lat_dir) {
 8001736:	4604      	mov	r4, r0
    char dd_part[3] = {0};      // 度（2位）
 8001738:	f8ad 2008 	strh.w	r2, [sp, #8]
    char mm_part[3] = {0};      // 分（2位）
 800173c:	f8ad 200c 	strh.w	r2, [sp, #12]
    char decimal_part[6] = {0}; // 小数分（最多5位）

    // 分割字符串
    strncpy(dd_part, Latitude, 2);
 8001740:	a802      	add	r0, sp, #8
 8001742:	2202      	movs	r2, #2
    char dd_part[3] = {0};      // 度（2位）
 8001744:	f88d 300a 	strb.w	r3, [sp, #10]
    char mm_part[3] = {0};      // 分（2位）
 8001748:	f88d 300e 	strb.w	r3, [sp, #14]
void FormatLatitude(char* LatitudeStr, char* Latitude, char Lat_dir) {
 800174c:	460e      	mov	r6, r1
    strncpy(dd_part, Latitude, 2);
 800174e:	f009 fa82 	bl	800ac56 <strncpy>
    strncpy(mm_part, Latitude + 2, 2);
 8001752:	2202      	movs	r2, #2
 8001754:	a803      	add	r0, sp, #12
 8001756:	18b1      	adds	r1, r6, r2
 8001758:	f009 fa7d 	bl	800ac56 <strncpy>
    if (dot_ptr) {
        strncpy(decimal_part, dot_ptr + 1, 5); // 取小数点后最多5位
    }

    // 转换为数值
    int dd = atoi(dd_part);
 800175c:	a802      	add	r0, sp, #8
 800175e:	f007 fb1b 	bl	8008d98 <atoi>
 8001762:	4606      	mov	r6, r0
    int mm = atoi(mm_part);
 8001764:	a803      	add	r0, sp, #12
 8001766:	f007 fb17 	bl	8008d98 <atoi>
//    int ss = (int)total_seconds;
//    int decimals = (int)((total_seconds - ss) * 1000.0 + 0.5); // 四舍五入到三位小数

    // 格式化输出到缓冲区（最大长度示例：N23°45'67.890）
//    snprintf(LatitudeStr, 20, "%c%02d°%02d’%02d.%03d\"", Lat_dir, dd, mm, ss, decimals);
    snprintf(LatitudeStr, 20, "%c%d°%02d’", Lat_dir, dd, mm);
 800176a:	462b      	mov	r3, r5
 800176c:	e9cd 6000 	strd	r6, r0, [sp]
 8001770:	2114      	movs	r1, #20
 8001772:	4620      	mov	r0, r4
 8001774:	4a03      	ldr	r2, [pc, #12]	@ (8001784 <FormatLatitude+0x58>)
 8001776:	f009 f991 	bl	800aa9c <sniprintf>
}
 800177a:	b004      	add	sp, #16
 800177c:	bd70      	pop	{r4, r5, r6, pc}
 800177e:	bf00      	nop
 8001780:	0800d5f8 	.word	0x0800d5f8
 8001784:	0800d66b 	.word	0x0800d66b

08001788 <FormatAltitude>:

//海拔数据格式化（-9999.9~99999.9）
void FormatAltitude(char* AltitudeStr, float Altitude){
 8001788:	b513      	push	{r0, r1, r4, lr}
 800178a:	4604      	mov	r4, r0
	snprintf(AltitudeStr, 7, "%.1f", Altitude);
 800178c:	4608      	mov	r0, r1
 800178e:	f7fe fe55 	bl	800043c <__aeabi_f2d>
 8001792:	4a04      	ldr	r2, [pc, #16]	@ (80017a4 <FormatAltitude+0x1c>)
 8001794:	e9cd 0100 	strd	r0, r1, [sp]
 8001798:	2107      	movs	r1, #7
 800179a:	4620      	mov	r0, r4
 800179c:	f009 f97e 	bl	800aa9c <sniprintf>
}
 80017a0:	b002      	add	sp, #8
 80017a2:	bd10      	pop	{r4, pc}
 80017a4:	0800d679 	.word	0x0800d679

080017a8 <HMI_GPSDataRefresh>:

int HMI_GPSDataRefresh(GPS_Data GGA_Result_Data, GPS_Data RMC_Result_Data){
 80017a8:	b084      	sub	sp, #16
 80017aa:	b530      	push	{r4, r5, lr}
 80017ac:	b09f      	sub	sp, #124	@ 0x7c
 80017ae:	ac22      	add	r4, sp, #136	@ 0x88
 80017b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char Str_buf[30] = {0};
 80017b4:	2400      	movs	r4, #0
 80017b6:	221a      	movs	r2, #26
 80017b8:	4621      	mov	r1, r4
	char Tx_Buffer[50] = {0};

	if(GGA_data_used && RMC_data_used){
 80017ba:	4d58      	ldr	r5, [pc, #352]	@ (800191c <HMI_GPSDataRefresh+0x174>)
	char Str_buf[30] = {0};
 80017bc:	a80a      	add	r0, sp, #40	@ 0x28
 80017be:	9409      	str	r4, [sp, #36]	@ 0x24
 80017c0:	f009 fa13 	bl	800abea <memset>
	char Tx_Buffer[50] = {0};
 80017c4:	4621      	mov	r1, r4
 80017c6:	222e      	movs	r2, #46	@ 0x2e
 80017c8:	a812      	add	r0, sp, #72	@ 0x48
 80017ca:	9411      	str	r4, [sp, #68]	@ 0x44
 80017cc:	f009 fa0d 	bl	800abea <memset>
	if(GGA_data_used && RMC_data_used){
 80017d0:	782b      	ldrb	r3, [r5, #0]
 80017d2:	4c53      	ldr	r4, [pc, #332]	@ (8001920 <HMI_GPSDataRefresh+0x178>)
 80017d4:	b11b      	cbz	r3, 80017de <HMI_GPSDataRefresh+0x36>
 80017d6:	7823      	ldrb	r3, [r4, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f040 809c 	bne.w	8001916 <HMI_GPSDataRefresh+0x16e>
		return -1;
	}

	if(GGA_data_used == 0){
 80017de:	782b      	ldrb	r3, [r5, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d157      	bne.n	8001894 <HMI_GPSDataRefresh+0xec>
			//经度
			FormatLongitude(Str_buf, GGA_Result_Data.longitude, GGA_Result_Data.lon_dir);
 80017e4:	f89d 20b4 	ldrb.w	r2, [sp, #180]	@ 0xb4
 80017e8:	a92a      	add	r1, sp, #168	@ 0xa8
 80017ea:	a809      	add	r0, sp, #36	@ 0x24
 80017ec:	f7ff ff74 	bl	80016d8 <FormatLongitude>
			if(GGA_Result_Data.fix_status == 1)
 80017f0:	f89d 30b5 	ldrb.w	r3, [sp, #181]	@ 0xb5
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d157      	bne.n	80018a8 <HMI_GPSDataRefresh+0x100>
				snprintf(Tx_Buffer,35,"Main.t14.txt=\"%s\"\xff\xff\xff",Str_buf);
 80017f8:	2123      	movs	r1, #35	@ 0x23
 80017fa:	4a4a      	ldr	r2, [pc, #296]	@ (8001924 <HMI_GPSDataRefresh+0x17c>)
 80017fc:	ab09      	add	r3, sp, #36	@ 0x24
 80017fe:	a811      	add	r0, sp, #68	@ 0x44
 8001800:	f009 f94c 	bl	800aa9c <sniprintf>
			else
				snprintf(Tx_Buffer,35,"Main.t14.txt=\"E119°06'\"\xff\xff\xff");
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001804:	a811      	add	r0, sp, #68	@ 0x44
 8001806:	f005 f8b9 	bl	800697c <USART1_Tx_HMIdata>

			memset(Str_buf, '\0', sizeof(Str_buf));
 800180a:	221e      	movs	r2, #30
 800180c:	2100      	movs	r1, #0
 800180e:	a809      	add	r0, sp, #36	@ 0x24
 8001810:	f009 f9eb 	bl	800abea <memset>
			memset(Tx_Buffer, '\0', sizeof(Tx_Buffer));
 8001814:	2232      	movs	r2, #50	@ 0x32
 8001816:	2100      	movs	r1, #0
 8001818:	a811      	add	r0, sp, #68	@ 0x44
 800181a:	f009 f9e6 	bl	800abea <memset>

			//纬度
			FormatLatitude(Str_buf, GGA_Result_Data.latitude, GGA_Result_Data.lat_dir);
 800181e:	f89d 20a7 	ldrb.w	r2, [sp, #167]	@ 0xa7
 8001822:	f10d 019b 	add.w	r1, sp, #155	@ 0x9b
 8001826:	a809      	add	r0, sp, #36	@ 0x24
 8001828:	f7ff ff80 	bl	800172c <FormatLatitude>
			if(GGA_Result_Data.fix_status == 1)
 800182c:	f89d 30b5 	ldrb.w	r3, [sp, #181]	@ 0xb5
 8001830:	2b01      	cmp	r3, #1
 8001832:	d13e      	bne.n	80018b2 <HMI_GPSDataRefresh+0x10a>
				snprintf(Tx_Buffer,35,"Main.t15.txt=\"%s\"\xff\xff\xff",Str_buf);
 8001834:	2123      	movs	r1, #35	@ 0x23
 8001836:	4a3c      	ldr	r2, [pc, #240]	@ (8001928 <HMI_GPSDataRefresh+0x180>)
 8001838:	ab09      	add	r3, sp, #36	@ 0x24
 800183a:	a811      	add	r0, sp, #68	@ 0x44
 800183c:	f009 f92e 	bl	800aa9c <sniprintf>
			else
				snprintf(Tx_Buffer,35,"Main.t15.txt=\"N33°36'\"\xff\xff\xff");
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001840:	a811      	add	r0, sp, #68	@ 0x44
 8001842:	f005 f89b 	bl	800697c <USART1_Tx_HMIdata>

			memset(Str_buf, '\0', sizeof(Str_buf));
 8001846:	221e      	movs	r2, #30
 8001848:	2100      	movs	r1, #0
 800184a:	a809      	add	r0, sp, #36	@ 0x24
 800184c:	f009 f9cd 	bl	800abea <memset>
			memset(Tx_Buffer, '\0', sizeof(Tx_Buffer));
 8001850:	2232      	movs	r2, #50	@ 0x32
 8001852:	2100      	movs	r1, #0
 8001854:	a811      	add	r0, sp, #68	@ 0x44
 8001856:	f009 f9c8 	bl	800abea <memset>

			//海拔
			FormatAltitude(Str_buf, GGA_Result_Data.altitude);
 800185a:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 800185c:	a809      	add	r0, sp, #36	@ 0x24
 800185e:	f7ff ff93 	bl	8001788 <FormatAltitude>
			if(GGA_Result_Data.fix_status == 1)
 8001862:	f89d 30b5 	ldrb.w	r3, [sp, #181]	@ 0xb5
 8001866:	2b01      	cmp	r3, #1
 8001868:	d128      	bne.n	80018bc <HMI_GPSDataRefresh+0x114>
				snprintf(Tx_Buffer,30,"Main.t17.txt=\"%s\"\xff\xff\xff",Str_buf);
 800186a:	211e      	movs	r1, #30
 800186c:	4a2f      	ldr	r2, [pc, #188]	@ (800192c <HMI_GPSDataRefresh+0x184>)
 800186e:	ab09      	add	r3, sp, #36	@ 0x24
 8001870:	a811      	add	r0, sp, #68	@ 0x44
 8001872:	f009 f913 	bl	800aa9c <sniprintf>
			else
				snprintf(Tx_Buffer,30,"Main.t17.txt=\"28.0\"\xff\xff\xff");
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001876:	a811      	add	r0, sp, #68	@ 0x44
 8001878:	f005 f880 	bl	800697c <USART1_Tx_HMIdata>

			memset(Str_buf, '\0', sizeof(Str_buf));
 800187c:	221e      	movs	r2, #30
 800187e:	2100      	movs	r1, #0
 8001880:	a809      	add	r0, sp, #36	@ 0x24
 8001882:	f009 f9b2 	bl	800abea <memset>
			memset(Tx_Buffer, '\0', sizeof(Tx_Buffer));
 8001886:	2232      	movs	r2, #50	@ 0x32
 8001888:	2100      	movs	r1, #0
 800188a:	a811      	add	r0, sp, #68	@ 0x44
 800188c:	f009 f9ad 	bl	800abea <memset>

			GGA_data_used = 1;
 8001890:	2301      	movs	r3, #1
 8001892:	702b      	strb	r3, [r5, #0]
	}

	//日期时间
	if(RMC_data_used == 0){
 8001894:	7822      	ldrb	r2, [r4, #0]
 8001896:	f002 03ff 	and.w	r3, r2, #255	@ 0xff
 800189a:	b1a2      	cbz	r2, 80018c6 <HMI_GPSDataRefresh+0x11e>
			memset(Str_buf, '\0', sizeof(Str_buf));
			memset(Tx_Buffer, '\0', sizeof(Tx_Buffer));

			RMC_data_used = 1;
	}
	return 0;
 800189c:	2000      	movs	r0, #0
}
 800189e:	b01f      	add	sp, #124	@ 0x7c
 80018a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80018a4:	b004      	add	sp, #16
 80018a6:	4770      	bx	lr
				snprintf(Tx_Buffer,35,"Main.t14.txt=\"E119°06'\"\xff\xff\xff");
 80018a8:	4921      	ldr	r1, [pc, #132]	@ (8001930 <HMI_GPSDataRefresh+0x188>)
 80018aa:	a811      	add	r0, sp, #68	@ 0x44
 80018ac:	f009 fa99 	bl	800ade2 <strcpy>
 80018b0:	e7a8      	b.n	8001804 <HMI_GPSDataRefresh+0x5c>
				snprintf(Tx_Buffer,35,"Main.t15.txt=\"N33°36'\"\xff\xff\xff");
 80018b2:	4920      	ldr	r1, [pc, #128]	@ (8001934 <HMI_GPSDataRefresh+0x18c>)
 80018b4:	a811      	add	r0, sp, #68	@ 0x44
 80018b6:	f009 fa94 	bl	800ade2 <strcpy>
 80018ba:	e7c1      	b.n	8001840 <HMI_GPSDataRefresh+0x98>
				snprintf(Tx_Buffer,30,"Main.t17.txt=\"28.0\"\xff\xff\xff");
 80018bc:	491e      	ldr	r1, [pc, #120]	@ (8001938 <HMI_GPSDataRefresh+0x190>)
 80018be:	a811      	add	r0, sp, #68	@ 0x44
 80018c0:	f009 fa8f 	bl	800ade2 <strcpy>
 80018c4:	e7d7      	b.n	8001876 <HMI_GPSDataRefresh+0xce>
			Format_GPS_Date(date_buf,RMC_Result_Data.time,RMC_Result_Data.date);
 80018c6:	aa3e      	add	r2, sp, #248	@ 0xf8
 80018c8:	f10d 01cb 	add.w	r1, sp, #203	@ 0xcb
 80018cc:	a803      	add	r0, sp, #12
			Format_GPS_Time(time_buf,RMC_Result_Data.time);
 80018ce:	ad06      	add	r5, sp, #24
		char date_buf[12] = {0};
 80018d0:	e9cd 3303 	strd	r3, r3, [sp, #12]
		char time_buf[12] = {0};
 80018d4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80018d8:	e9cd 3307 	strd	r3, r3, [sp, #28]
			Format_GPS_Date(date_buf,RMC_Result_Data.time,RMC_Result_Data.date);
 80018dc:	f7ff fe06 	bl	80014ec <Format_GPS_Date>
			Format_GPS_Time(time_buf,RMC_Result_Data.time);
 80018e0:	4628      	mov	r0, r5
 80018e2:	f10d 01cb 	add.w	r1, sp, #203	@ 0xcb
 80018e6:	f7ff fe5d 	bl	80015a4 <Format_GPS_Time>
			if(GGA_Result_Data.fix_status == 1)
 80018ea:	f89d 30b5 	ldrb.w	r3, [sp, #181]	@ 0xb5
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d10c      	bne.n	800190c <HMI_GPSDataRefresh+0x164>
				snprintf(Tx_Buffer,45,"Main.t4.txt=\"%s  %s\"\xff\xff\xff",date_buf, time_buf);
 80018f2:	212d      	movs	r1, #45	@ 0x2d
 80018f4:	4a11      	ldr	r2, [pc, #68]	@ (800193c <HMI_GPSDataRefresh+0x194>)
 80018f6:	9500      	str	r5, [sp, #0]
 80018f8:	ab03      	add	r3, sp, #12
 80018fa:	a811      	add	r0, sp, #68	@ 0x44
 80018fc:	f009 f8ce 	bl	800aa9c <sniprintf>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001900:	a811      	add	r0, sp, #68	@ 0x44
 8001902:	f005 f83b 	bl	800697c <USART1_Tx_HMIdata>
			RMC_data_used = 1;
 8001906:	2301      	movs	r3, #1
 8001908:	7023      	strb	r3, [r4, #0]
 800190a:	e7c7      	b.n	800189c <HMI_GPSDataRefresh+0xf4>
				snprintf(Tx_Buffer,45,"Main.t4.txt=\"2025/01/01  12:00:00\"\xff\xff\xff");
 800190c:	490c      	ldr	r1, [pc, #48]	@ (8001940 <HMI_GPSDataRefresh+0x198>)
 800190e:	a811      	add	r0, sp, #68	@ 0x44
 8001910:	f009 fa67 	bl	800ade2 <strcpy>
 8001914:	e7f4      	b.n	8001900 <HMI_GPSDataRefresh+0x158>
		return -1;
 8001916:	f04f 30ff 	mov.w	r0, #4294967295
 800191a:	e7c0      	b.n	800189e <HMI_GPSDataRefresh+0xf6>
 800191c:	20000001 	.word	0x20000001
 8001920:	20000000 	.word	0x20000000
 8001924:	0800d67e 	.word	0x0800d67e
 8001928:	0800d6af 	.word	0x0800d6af
 800192c:	0800d6df 	.word	0x0800d6df
 8001930:	0800d693 	.word	0x0800d693
 8001934:	0800d6c4 	.word	0x0800d6c4
 8001938:	0800d6f4 	.word	0x0800d6f4
 800193c:	0800d70b 	.word	0x0800d70b
 8001940:	0800d723 	.word	0x0800d723

08001944 <HMI_init>:
uint8_t focus_key_pressed = 0;

enum HMI_PAGE page_location;
enum CONFIRM_RESAULT sec_confirm_resault;

void HMI_init(void){
 8001944:	b538      	push	{r3, r4, r5, lr}
  refresh_bat_vlt();

	sprintf(Tx_Buffer,"Main.n0.val=0\xff\xff\xff");
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
	memset(Tx_Buffer,'\0',sizeof(Tx_Buffer));
 8001946:	2532      	movs	r5, #50	@ 0x32
	sprintf(Tx_Buffer,"Main.n0.val=0\xff\xff\xff");
 8001948:	4c1d      	ldr	r4, [pc, #116]	@ (80019c0 <HMI_init+0x7c>)
  refresh_bat_vlt();
 800194a:	f001 fa19 	bl	8002d80 <refresh_bat_vlt>
	sprintf(Tx_Buffer,"Main.n0.val=0\xff\xff\xff");
 800194e:	491d      	ldr	r1, [pc, #116]	@ (80019c4 <HMI_init+0x80>)
 8001950:	4620      	mov	r0, r4
 8001952:	f009 fa46 	bl	800ade2 <strcpy>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001956:	4620      	mov	r0, r4
 8001958:	f005 f810 	bl	800697c <USART1_Tx_HMIdata>
	memset(Tx_Buffer,'\0',sizeof(Tx_Buffer));
 800195c:	462a      	mov	r2, r5
 800195e:	2100      	movs	r1, #0
 8001960:	4620      	mov	r0, r4
 8001962:	f009 f942 	bl	800abea <memset>

	sprintf(Tx_Buffer,"Main.t3.txt=\"0.0\"\xff\xff\xff");
 8001966:	4918      	ldr	r1, [pc, #96]	@ (80019c8 <HMI_init+0x84>)
 8001968:	4620      	mov	r0, r4
 800196a:	f009 fa3a 	bl	800ade2 <strcpy>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800196e:	4620      	mov	r0, r4
 8001970:	f005 f804 	bl	800697c <USART1_Tx_HMIdata>
	memset(Tx_Buffer,'\0',sizeof(Tx_Buffer));
 8001974:	462a      	mov	r2, r5
 8001976:	2100      	movs	r1, #0
 8001978:	4620      	mov	r0, r4
 800197a:	f009 f936 	bl	800abea <memset>

	sprintf(Tx_Buffer,"Main.t0.txt=\"启动中...\"\xff\xff\xff");
 800197e:	4913      	ldr	r1, [pc, #76]	@ (80019cc <HMI_init+0x88>)
 8001980:	4620      	mov	r0, r4
 8001982:	f009 fa2e 	bl	800ade2 <strcpy>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001986:	4620      	mov	r0, r4
 8001988:	f004 fff8 	bl	800697c <USART1_Tx_HMIdata>
	memset(Tx_Buffer,'\0',sizeof(Tx_Buffer));
 800198c:	462a      	mov	r2, r5
 800198e:	2100      	movs	r1, #0
 8001990:	4620      	mov	r0, r4
 8001992:	f009 f92a 	bl	800abea <memset>

	sprintf(Tx_Buffer,"Main.t8.txt=\"\"\xff\xff\xff");
 8001996:	490e      	ldr	r1, [pc, #56]	@ (80019d0 <HMI_init+0x8c>)
 8001998:	4620      	mov	r0, r4
 800199a:	f009 fa22 	bl	800ade2 <strcpy>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800199e:	4620      	mov	r0, r4
 80019a0:	f004 ffec 	bl	800697c <USART1_Tx_HMIdata>
	memset(Tx_Buffer,'\0',sizeof(Tx_Buffer));
 80019a4:	462a      	mov	r2, r5
 80019a6:	2100      	movs	r1, #0
 80019a8:	4620      	mov	r0, r4
 80019aa:	f009 f91e 	bl	800abea <memset>

	sprintf(Tx_Buffer,"page Main\xff\xff\xff");
 80019ae:	4620      	mov	r0, r4
 80019b0:	4908      	ldr	r1, [pc, #32]	@ (80019d4 <HMI_init+0x90>)
 80019b2:	f009 fa16 	bl	800ade2 <strcpy>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80019b6:	4620      	mov	r0, r4
}
 80019b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80019bc:	f004 bfde 	b.w	800697c <USART1_Tx_HMIdata>
 80019c0:	20000b7e 	.word	0x20000b7e
 80019c4:	0800d749 	.word	0x0800d749
 80019c8:	0800d75a 	.word	0x0800d75a
 80019cc:	0800d76f 	.word	0x0800d76f
 80019d0:	0800d78d 	.word	0x0800d78d
 80019d4:	0800d79f 	.word	0x0800d79f

080019d8 <Send_To_HMI>:

void Send_To_HMI(uint8_t index,uint8_t* name) {
 80019d8:	b510      	push	{r4, lr}
    /* 构造HMI指令并发送 */
    sprintf(Tx_Buffer, "File_M.t%d.txt=\"%s\"\xff\xff\xff", index, name);
 80019da:	4c06      	ldr	r4, [pc, #24]	@ (80019f4 <Send_To_HMI+0x1c>)
void Send_To_HMI(uint8_t index,uint8_t* name) {
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
    sprintf(Tx_Buffer, "File_M.t%d.txt=\"%s\"\xff\xff\xff", index, name);
 80019e0:	4620      	mov	r0, r4
 80019e2:	4905      	ldr	r1, [pc, #20]	@ (80019f8 <Send_To_HMI+0x20>)
 80019e4:	f009 f88e 	bl	800ab04 <siprintf>
    USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80019e8:	4620      	mov	r0, r4
}
 80019ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80019ee:	f004 bfc5 	b.w	800697c <USART1_Tx_HMIdata>
 80019f2:	bf00      	nop
 80019f4:	20000b7e 	.word	0x20000b7e
 80019f8:	0800d7ac 	.word	0x0800d7ac

080019fc <Clear_HMI_Item>:

void Clear_HMI_Item(uint8_t index) {
 80019fc:	b510      	push	{r4, lr}
    /* 清空指定位置的显示 */
    sprintf(Tx_Buffer, "File_M.t%d.txt=\"\"\xff\xff\xff", index);
 80019fe:	4c05      	ldr	r4, [pc, #20]	@ (8001a14 <Clear_HMI_Item+0x18>)
void Clear_HMI_Item(uint8_t index) {
 8001a00:	4602      	mov	r2, r0
    sprintf(Tx_Buffer, "File_M.t%d.txt=\"\"\xff\xff\xff", index);
 8001a02:	4905      	ldr	r1, [pc, #20]	@ (8001a18 <Clear_HMI_Item+0x1c>)
 8001a04:	4620      	mov	r0, r4
 8001a06:	f009 f87d 	bl	800ab04 <siprintf>
    USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001a0a:	4620      	mov	r0, r4
}
 8001a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001a10:	f004 bfb4 	b.w	800697c <USART1_Tx_HMIdata>
 8001a14:	20000b7e 	.word	0x20000b7e
 8001a18:	0800d7c3 	.word	0x0800d7c3

08001a1c <Back_to_MainPage>:

void Back_to_MainPage(void){
	page_location = Main_page;
 8001a1c:	2200      	movs	r2, #0
void Back_to_MainPage(void){
 8001a1e:	b510      	push	{r4, lr}
	sprintf(Tx_Buffer,"page Main\xff\xff\xff");
 8001a20:	4c13      	ldr	r4, [pc, #76]	@ (8001a70 <Back_to_MainPage+0x54>)
	page_location = Main_page;
 8001a22:	4b14      	ldr	r3, [pc, #80]	@ (8001a74 <Back_to_MainPage+0x58>)
	sprintf(Tx_Buffer,"page Main\xff\xff\xff");
 8001a24:	4914      	ldr	r1, [pc, #80]	@ (8001a78 <Back_to_MainPage+0x5c>)
 8001a26:	4620      	mov	r0, r4
	page_location = Main_page;
 8001a28:	701a      	strb	r2, [r3, #0]
	sprintf(Tx_Buffer,"page Main\xff\xff\xff");
 8001a2a:	f009 f9da 	bl	800ade2 <strcpy>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001a2e:	4620      	mov	r0, r4
 8001a30:	f004 ffa4 	bl	800697c <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"Main.n2.val=%d\xff\xff\xff",total_Times);
 8001a34:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <Back_to_MainPage+0x60>)
 8001a36:	4912      	ldr	r1, [pc, #72]	@ (8001a80 <Back_to_MainPage+0x64>)
 8001a38:	881a      	ldrh	r2, [r3, #0]
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f009 f862 	bl	800ab04 <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001a40:	4620      	mov	r0, r4
 8001a42:	f004 ff9b 	bl	800697c <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"Main.n3.val=%d\xff\xff\xff",total_inject_Dosage);
 8001a46:	4b0f      	ldr	r3, [pc, #60]	@ (8001a84 <Back_to_MainPage+0x68>)
 8001a48:	490f      	ldr	r1, [pc, #60]	@ (8001a88 <Back_to_MainPage+0x6c>)
 8001a4a:	881a      	ldrh	r2, [r3, #0]
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	f009 f859 	bl	800ab04 <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001a52:	4620      	mov	r0, r4
 8001a54:	f004 ff92 	bl	800697c <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"Main.t19.txt=\"%04d\"\xff\xff\xff",current_TreeNo);
 8001a58:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <Back_to_MainPage+0x70>)
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	881a      	ldrh	r2, [r3, #0]
 8001a5e:	490c      	ldr	r1, [pc, #48]	@ (8001a90 <Back_to_MainPage+0x74>)
 8001a60:	f009 f850 	bl	800ab04 <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001a64:	4620      	mov	r0, r4
}
 8001a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001a6a:	f004 bf87 	b.w	800697c <USART1_Tx_HMIdata>
 8001a6e:	bf00      	nop
 8001a70:	20000b7e 	.word	0x20000b7e
 8001a74:	20000370 	.word	0x20000370
 8001a78:	0800d79f 	.word	0x0800d79f
 8001a7c:	20000a3e 	.word	0x20000a3e
 8001a80:	0800d5fb 	.word	0x0800d5fb
 8001a84:	20000a40 	.word	0x20000a40
 8001a88:	0800d60d 	.word	0x0800d60d
 8001a8c:	200008b2 	.word	0x200008b2
 8001a90:	0800d61f 	.word	0x0800d61f

08001a94 <Refresh_Display>:

void Refresh_Display() {
 8001a94:	b570      	push	{r4, r5, r6, lr}
    // 计算显示标志
    paging.show_prev_more = (paging.start_index > 0);
 8001a96:	4c1e      	ldr	r4, [pc, #120]	@ (8001b10 <Refresh_Display+0x7c>)
    paging.show_next_more = (paging.start_index + MAX_DISPLAY_ITEMS < paging.file_count);
 8001a98:	2500      	movs	r5, #0
    paging.show_prev_more = (paging.start_index > 0);
 8001a9a:	8863      	ldrh	r3, [r4, #2]
 8001a9c:	1e1a      	subs	r2, r3, #0
 8001a9e:	bf18      	it	ne
 8001aa0:	2201      	movne	r2, #1
 8001aa2:	7322      	strb	r2, [r4, #12]
    paging.show_next_more = (paging.start_index + MAX_DISPLAY_ITEMS < paging.file_count);
 8001aa4:	8822      	ldrh	r2, [r4, #0]
 8001aa6:	3306      	adds	r3, #6
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	bfac      	ite	ge
 8001aac:	2300      	movge	r3, #0
 8001aae:	2301      	movlt	r3, #1
 8001ab0:	7363      	strb	r3, [r4, #13]

    // 清空显示
    for(uint8_t i=0; i<MAX_DISPLAY_ITEMS; i++)
        Clear_HMI_Item(i);
 8001ab2:	b2e8      	uxtb	r0, r5
    for(uint8_t i=0; i<MAX_DISPLAY_ITEMS; i++)
 8001ab4:	3501      	adds	r5, #1
        Clear_HMI_Item(i);
 8001ab6:	f7ff ffa1 	bl	80019fc <Clear_HMI_Item>
    for(uint8_t i=0; i<MAX_DISPLAY_ITEMS; i++)
 8001aba:	2d06      	cmp	r5, #6
 8001abc:	d1f9      	bne.n	8001ab2 <Refresh_Display+0x1e>

    uint8_t display_pos = 0;

    // 显示前页提示
    if(paging.show_prev_more) {
 8001abe:	7b20      	ldrb	r0, [r4, #12]
 8001ac0:	b120      	cbz	r0, 8001acc <Refresh_Display+0x38>
        Send_To_HMI(display_pos++, "...");
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	4913      	ldr	r1, [pc, #76]	@ (8001b14 <Refresh_Display+0x80>)
 8001ac6:	f7ff ff87 	bl	80019d8 <Send_To_HMI>
 8001aca:	2001      	movs	r0, #1

    // 显示当前页文件
    for(uint8_t i=0; i < MAX_DISPLAY_ITEMS - paging.show_prev_more - paging.show_next_more; i++) {
        uint16_t actual_index = paging.start_index + i;
        if(actual_index < paging.file_count) {
            Send_To_HMI(display_pos++, paging.file_list[actual_index]);
 8001acc:	2500      	movs	r5, #0
    for(uint8_t i=0; i < MAX_DISPLAY_ITEMS - paging.show_prev_more - paging.show_next_more; i++) {
 8001ace:	7b22      	ldrb	r2, [r4, #12]
 8001ad0:	7b61      	ldrb	r1, [r4, #13]
 8001ad2:	f1c2 0206 	rsb	r2, r2, #6
 8001ad6:	b2eb      	uxtb	r3, r5
 8001ad8:	1a52      	subs	r2, r2, r1
 8001ada:	4293      	cmp	r3, r2
 8001adc:	db06      	blt.n	8001aec <Refresh_Display+0x58>
        }
    }

    // 显示后页提示
    if(paging.show_next_more) {
 8001ade:	b1a9      	cbz	r1, 8001b0c <Refresh_Display+0x78>
        Send_To_HMI(MAX_DISPLAY_ITEMS-1, "...");
    }
}
 8001ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        Send_To_HMI(MAX_DISPLAY_ITEMS-1, "...");
 8001ae4:	2005      	movs	r0, #5
 8001ae6:	490b      	ldr	r1, [pc, #44]	@ (8001b14 <Refresh_Display+0x80>)
 8001ae8:	f7ff bf76 	b.w	80019d8 <Send_To_HMI>
        uint16_t actual_index = paging.start_index + i;
 8001aec:	8862      	ldrh	r2, [r4, #2]
 8001aee:	4413      	add	r3, r2
        if(actual_index < paging.file_count) {
 8001af0:	8822      	ldrh	r2, [r4, #0]
        uint16_t actual_index = paging.start_index + i;
 8001af2:	b29b      	uxth	r3, r3
        if(actual_index < paging.file_count) {
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d907      	bls.n	8001b08 <Refresh_Display+0x74>
            Send_To_HMI(display_pos++, paging.file_list[actual_index]);
 8001af8:	68a2      	ldr	r2, [r4, #8]
 8001afa:	1c46      	adds	r6, r0, #1
 8001afc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b00:	b2f6      	uxtb	r6, r6
 8001b02:	f7ff ff69 	bl	80019d8 <Send_To_HMI>
 8001b06:	4630      	mov	r0, r6
    for(uint8_t i=0; i < MAX_DISPLAY_ITEMS - paging.show_prev_more - paging.show_next_more; i++) {
 8001b08:	3501      	adds	r5, #1
 8001b0a:	e7e0      	b.n	8001ace <Refresh_Display+0x3a>
}
 8001b0c:	bd70      	pop	{r4, r5, r6, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000374 	.word	0x20000374
 8001b14:	0800d7d8 	.word	0x0800d7d8

08001b18 <Cache_File_List>:

void Cache_File_List() {
 8001b18:	b570      	push	{r4, r5, r6, lr}
    DIR dir;
    FILINFO fno;
    uint16_t count = 0;

    // 释放旧内存
    if(paging.file_list != NULL) {
 8001b1a:	4c30      	ldr	r4, [pc, #192]	@ (8001bdc <Cache_File_List+0xc4>)
void Cache_File_List() {
 8001b1c:	b092      	sub	sp, #72	@ 0x48
    if(paging.file_list != NULL) {
 8001b1e:	68a3      	ldr	r3, [r4, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d13f      	bne.n	8001ba4 <Cache_File_List+0x8c>
            free(paging.file_list[i]);
        free(paging.file_list);
    }
    // 第一次遍历统计数量
//    f_mount(&fs, "0:", 1);
    f_opendir(&dir, "/");
 8001b24:	492e      	ldr	r1, [pc, #184]	@ (8001be0 <Cache_File_List+0xc8>)
 8001b26:	a806      	add	r0, sp, #24
 8001b28:	f002 fcaf 	bl	800448a <f_opendir>
    uint16_t count = 0;
 8001b2c:	2500      	movs	r5, #0
    while(f_readdir(&dir, &fno) == FR_OK && fno.fname[0]) {
 8001b2e:	4669      	mov	r1, sp
 8001b30:	a806      	add	r0, sp, #24
 8001b32:	f002 fcfd 	bl	8004530 <f_readdir>
 8001b36:	b918      	cbnz	r0, 8001b40 <Cache_File_List+0x28>
 8001b38:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d133      	bne.n	8001ba8 <Cache_File_List+0x90>
        if(!(fno.fattrib & AM_DIR))
            count++;
    }
    f_closedir(&dir);
 8001b40:	a806      	add	r0, sp, #24
 8001b42:	f002 fce1 	bl	8004508 <f_closedir>

    // 分配内存
    paging.file_list = malloc(count * sizeof(char*));
 8001b46:	00a8      	lsls	r0, r5, #2
 8001b48:	f007 f92a 	bl	8008da0 <malloc>
    paging.file_count = 0;
 8001b4c:	2300      	movs	r3, #0
    paging.file_list = malloc(count * sizeof(char*));
 8001b4e:	60a0      	str	r0, [r4, #8]

    // 第二次遍历存储文件名
    f_opendir(&dir, "/");
 8001b50:	4923      	ldr	r1, [pc, #140]	@ (8001be0 <Cache_File_List+0xc8>)
 8001b52:	a806      	add	r0, sp, #24
    paging.file_count = 0;
 8001b54:	8023      	strh	r3, [r4, #0]
    f_opendir(&dir, "/");
 8001b56:	f002 fc98 	bl	800448a <f_opendir>
    while(f_readdir(&dir, &fno) == FR_OK && fno.fname[0]) {
 8001b5a:	4669      	mov	r1, sp
 8001b5c:	a806      	add	r0, sp, #24
 8001b5e:	f002 fce7 	bl	8004530 <f_readdir>
 8001b62:	b910      	cbnz	r0, 8001b6a <Cache_File_List+0x52>
 8001b64:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001b68:	bb2b      	cbnz	r3, 8001bb6 <Cache_File_List+0x9e>
            paging.file_list[paging.file_count] = malloc(16);
            strcpy(paging.file_list[paging.file_count], fno.fname);
            paging.file_count++;
        }
    }
    f_closedir(&dir);
 8001b6a:	a806      	add	r0, sp, #24
 8001b6c:	f002 fccc 	bl	8004508 <f_closedir>
//    f_mount(NULL, "0:", 0);

    // 计算分页
    paging.total_pages = (paging.file_count + MAX_DISPLAY_ITEMS-1) / MAX_DISPLAY_ITEMS;
 8001b70:	2206      	movs	r2, #6
 8001b72:	8823      	ldrh	r3, [r4, #0]
 8001b74:	3305      	adds	r3, #5
 8001b76:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b7a:	7163      	strb	r3, [r4, #5]
    paging.start_index = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	8063      	strh	r3, [r4, #2]
    paging.current_page = 1;
 8001b80:	2301      	movs	r3, #1
 8001b82:	7123      	strb	r3, [r4, #4]
}
 8001b84:	b012      	add	sp, #72	@ 0x48
 8001b86:	bd70      	pop	{r4, r5, r6, pc}
            free(paging.file_list[i]);
 8001b88:	b2ab      	uxth	r3, r5
 8001b8a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8001b8e:	f007 f90f 	bl	8008db0 <free>
        for(uint16_t i=0; i<paging.file_count; i++)
 8001b92:	3501      	adds	r5, #1
 8001b94:	8822      	ldrh	r2, [r4, #0]
 8001b96:	b2ab      	uxth	r3, r5
 8001b98:	429a      	cmp	r2, r3
            free(paging.file_list[i]);
 8001b9a:	68a0      	ldr	r0, [r4, #8]
        for(uint16_t i=0; i<paging.file_count; i++)
 8001b9c:	d8f4      	bhi.n	8001b88 <Cache_File_List+0x70>
        free(paging.file_list);
 8001b9e:	f007 f907 	bl	8008db0 <free>
 8001ba2:	e7bf      	b.n	8001b24 <Cache_File_List+0xc>
 8001ba4:	2500      	movs	r5, #0
 8001ba6:	e7f5      	b.n	8001b94 <Cache_File_List+0x7c>
        if(!(fno.fattrib & AM_DIR))
 8001ba8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001bac:	06da      	lsls	r2, r3, #27
            count++;
 8001bae:	bf5c      	itt	pl
 8001bb0:	3501      	addpl	r5, #1
 8001bb2:	b2ad      	uxthpl	r5, r5
 8001bb4:	e7bb      	b.n	8001b2e <Cache_File_List+0x16>
        if(!(fno.fattrib & AM_DIR)) {
 8001bb6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001bba:	06db      	lsls	r3, r3, #27
 8001bbc:	d4cd      	bmi.n	8001b5a <Cache_File_List+0x42>
            paging.file_list[paging.file_count] = malloc(16);
 8001bbe:	2010      	movs	r0, #16
 8001bc0:	8825      	ldrh	r5, [r4, #0]
 8001bc2:	68a6      	ldr	r6, [r4, #8]
 8001bc4:	f007 f8ec 	bl	8008da0 <malloc>
            strcpy(paging.file_list[paging.file_count], fno.fname);
 8001bc8:	f10d 0109 	add.w	r1, sp, #9
            paging.file_list[paging.file_count] = malloc(16);
 8001bcc:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
            paging.file_count++;
 8001bd0:	3501      	adds	r5, #1
            strcpy(paging.file_list[paging.file_count], fno.fname);
 8001bd2:	f009 f906 	bl	800ade2 <strcpy>
            paging.file_count++;
 8001bd6:	8025      	strh	r5, [r4, #0]
 8001bd8:	e7bf      	b.n	8001b5a <Cache_File_List+0x42>
 8001bda:	bf00      	nop
 8001bdc:	20000374 	.word	0x20000374
 8001be0:	0800d7dc 	.word	0x0800d7dc

08001be4 <delete_file>:


FRESULT delete_file(const char* path) {
 8001be4:	b510      	push	{r4, lr}
 8001be6:	b086      	sub	sp, #24
    FRESULT res;

    // 检查文件是否存在
    FILINFO fno;
    if((res = f_stat(path, &fno)) != FR_OK) {
 8001be8:	4669      	mov	r1, sp
FRESULT delete_file(const char* path) {
 8001bea:	4604      	mov	r4, r0
    if((res = f_stat(path, &fno)) != FR_OK) {
 8001bec:	f002 fcc3 	bl	8004576 <f_stat>
 8001bf0:	b910      	cbnz	r0, 8001bf8 <delete_file+0x14>

        return res; // 返回错误码：FR_NO_FILE等
    }

    // 执行删除
    if((res = f_unlink(path)) != FR_OK) {
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f002 fce1 	bl	80045ba <f_unlink>
        return res; // 返回错误码：FR_DENIED（写保护）等
    }

    return FR_OK;
}
 8001bf8:	b006      	add	sp, #24
 8001bfa:	bd10      	pop	{r4, pc}

08001bfc <page_turning>:

void page_turning(void){
	// 在翻页操作前范围检查
	if(paging.start_index < 0) paging.start_index = 0;
	if(paging.start_index >= paging.file_count)
 8001bfc:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <page_turning+0x4c>)
 8001bfe:	885a      	ldrh	r2, [r3, #2]
 8001c00:	8819      	ldrh	r1, [r3, #0]
 8001c02:	428a      	cmp	r2, r1
			paging.start_index = paging.file_count - MAX_DISPLAY_ITEMS;
 8001c04:	bf24      	itt	cs
 8001c06:	1f8a      	subcs	r2, r1, #6
 8001c08:	805a      	strhcs	r2, [r3, #2]

	// 处理前页翻页
	if(current_focus_line == 0 && paging.show_prev_more) {
 8001c0a:	4a10      	ldr	r2, [pc, #64]	@ (8001c4c <page_turning+0x50>)
 8001c0c:	7812      	ldrb	r2, [r2, #0]
 8001c0e:	b962      	cbnz	r2, 8001c2a <page_turning+0x2e>
 8001c10:	7b1a      	ldrb	r2, [r3, #12]
 8001c12:	b1ba      	cbz	r2, 8001c44 <page_turning+0x48>
			paging.start_index = (paging.start_index >= (MAX_DISPLAY_ITEMS-1)) ?
 8001c14:	885a      	ldrh	r2, [r3, #2]
 8001c16:	2a05      	cmp	r2, #5
 8001c18:	bf38      	it	cc
 8001c1a:	2205      	movcc	r2, #5
 8001c1c:	3a05      	subs	r2, #5
 8001c1e:	805a      	strh	r2, [r3, #2]
													paging.start_index - (MAX_DISPLAY_ITEMS-1) : 0;
			paging.current_page--;
 8001c20:	791a      	ldrb	r2, [r3, #4]
 8001c22:	3a01      	subs	r2, #1
	// 处理后页翻页
	else
	if(current_focus_line == (MAX_DISPLAY_ITEMS-1) && paging.show_next_more) {
		if(paging.start_index + MAX_DISPLAY_ITEMS < paging.file_count) {
				paging.start_index += (MAX_DISPLAY_ITEMS-1);
				paging.current_page++;
 8001c24:	711a      	strb	r2, [r3, #4]
				Refresh_Display();
 8001c26:	f7ff bf35 	b.w	8001a94 <Refresh_Display>
	if(current_focus_line == (MAX_DISPLAY_ITEMS-1) && paging.show_next_more) {
 8001c2a:	2a05      	cmp	r2, #5
 8001c2c:	d10a      	bne.n	8001c44 <page_turning+0x48>
 8001c2e:	7b5a      	ldrb	r2, [r3, #13]
 8001c30:	b142      	cbz	r2, 8001c44 <page_turning+0x48>
		if(paging.start_index + MAX_DISPLAY_ITEMS < paging.file_count) {
 8001c32:	885a      	ldrh	r2, [r3, #2]
 8001c34:	1d90      	adds	r0, r2, #6
 8001c36:	4288      	cmp	r0, r1
 8001c38:	da04      	bge.n	8001c44 <page_turning+0x48>
				paging.start_index += (MAX_DISPLAY_ITEMS-1);
 8001c3a:	3205      	adds	r2, #5
 8001c3c:	805a      	strh	r2, [r3, #2]
				paging.current_page++;
 8001c3e:	791a      	ldrb	r2, [r3, #4]
 8001c40:	3201      	adds	r2, #1
 8001c42:	e7ef      	b.n	8001c24 <page_turning+0x28>
		}
	}
}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000374 	.word	0x20000374
 8001c4c:	20000385 	.word	0x20000385

08001c50 <On_Delete_Key_Pressed>:

void On_Delete_Key_Pressed(){
 8001c50:	b5f0      	push	{r4, r5, r6, r7, lr}
	if((paging.show_prev_more && current_focus_line == 0) || (paging.show_next_more && current_focus_line == 5))
 8001c52:	4d40      	ldr	r5, [pc, #256]	@ (8001d54 <On_Delete_Key_Pressed+0x104>)
 8001c54:	4a40      	ldr	r2, [pc, #256]	@ (8001d58 <On_Delete_Key_Pressed+0x108>)
 8001c56:	7b2b      	ldrb	r3, [r5, #12]
 8001c58:	7814      	ldrb	r4, [r2, #0]
void On_Delete_Key_Pressed(){
 8001c5a:	b091      	sub	sp, #68	@ 0x44
	if((paging.show_prev_more && current_focus_line == 0) || (paging.show_next_more && current_focus_line == 5))
 8001c5c:	b10b      	cbz	r3, 8001c62 <On_Delete_Key_Pressed+0x12>
 8001c5e:	2c00      	cmp	r4, #0
 8001c60:	d067      	beq.n	8001d32 <On_Delete_Key_Pressed+0xe2>
 8001c62:	7b6a      	ldrb	r2, [r5, #13]
 8001c64:	b10a      	cbz	r2, 8001c6a <On_Delete_Key_Pressed+0x1a>
 8001c66:	2c05      	cmp	r4, #5
 8001c68:	d063      	beq.n	8001d32 <On_Delete_Key_Pressed+0xe2>
		return 1;
	// 计算实际文件索引（需考虑分页提示符）
	uint16_t actual_index = paging.start_index + current_focus_line;
 8001c6a:	886a      	ldrh	r2, [r5, #2]
 8001c6c:	4414      	add	r4, r2
 8001c6e:	b2a4      	uxth	r4, r4
	if(paging.show_prev_more) actual_index -= 1; // 排除"..."行
 8001c70:	b10b      	cbz	r3, 8001c76 <On_Delete_Key_Pressed+0x26>
 8001c72:	3c01      	subs	r4, #1
 8001c74:	b2a4      	uxth	r4, r4

	// 构造完整路径
	char full_path[12 + 3] = "0:/";
 8001c76:	2300      	movs	r3, #0
 8001c78:	4a38      	ldr	r2, [pc, #224]	@ (8001d5c <On_Delete_Key_Pressed+0x10c>)
	strcat(full_path, paging.file_list[actual_index]);
 8001c7a:	68ae      	ldr	r6, [r5, #8]
	char full_path[12 + 3] = "0:/";
 8001c7c:	e9cd 2300 	strd	r2, r3, [sp]
 8001c80:	9302      	str	r3, [sp, #8]
 8001c82:	f8cd 300b 	str.w	r3, [sp, #11]
	strcat(full_path, paging.file_list[actual_index]);
 8001c86:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8001c8a:	4668      	mov	r0, sp
 8001c8c:	f008 ffb5 	bl	800abfa <strcat>

	sprintf(Tx_Buffer, "File_M.t7.txt=\"确认删除%s?\"\xff\xff\xff",paging.file_list[actual_index]);
 8001c90:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8001c94:	4932      	ldr	r1, [pc, #200]	@ (8001d60 <On_Delete_Key_Pressed+0x110>)
 8001c96:	4833      	ldr	r0, [pc, #204]	@ (8001d64 <On_Delete_Key_Pressed+0x114>)
 8001c98:	f008 ff34 	bl	800ab04 <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001c9c:	4831      	ldr	r0, [pc, #196]	@ (8001d64 <On_Delete_Key_Pressed+0x114>)
 8001c9e:	f004 fe6d 	bl	800697c <USART1_Tx_HMIdata>
	Confirm_Msg.display = 1;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	4e30      	ldr	r6, [pc, #192]	@ (8001d68 <On_Delete_Key_Pressed+0x118>)
	strcat(full_path, paging.file_list[actual_index]);
 8001ca6:	00a7      	lsls	r7, r4, #2
	Confirm_Msg.display = 1;
 8001ca8:	7033      	strb	r3, [r6, #0]
	Confirm_Msg.type = CONFIRM_DELETE_FILE;
 8001caa:	2302      	movs	r3, #2

	while(1){
		if(key_code == KEY_CONFIRM){
 8001cac:	4c2f      	ldr	r4, [pc, #188]	@ (8001d6c <On_Delete_Key_Pressed+0x11c>)
	Confirm_Msg.type = CONFIRM_DELETE_FILE;
 8001cae:	7073      	strb	r3, [r6, #1]
		if(key_code == KEY_CONFIRM){
 8001cb0:	7823      	ldrb	r3, [r4, #0]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d12f      	bne.n	8001d16 <On_Delete_Key_Pressed+0xc6>
			key_code = KEY_NULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	7023      	strb	r3, [r4, #0]
			key_code = KEY_NULL;
			return;
		}
	}

	sprintf(Tx_Buffer, "File_M.t7.txt=\"正在删除%s\"\xff\xff\xff",paging.file_list[actual_index]);
 8001cba:	68ab      	ldr	r3, [r5, #8]
 8001cbc:	492c      	ldr	r1, [pc, #176]	@ (8001d70 <On_Delete_Key_Pressed+0x120>)
 8001cbe:	59da      	ldr	r2, [r3, r7]
 8001cc0:	4828      	ldr	r0, [pc, #160]	@ (8001d64 <On_Delete_Key_Pressed+0x114>)
 8001cc2:	f008 ff1f 	bl	800ab04 <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001cc6:	4827      	ldr	r0, [pc, #156]	@ (8001d64 <On_Delete_Key_Pressed+0x114>)
 8001cc8:	f004 fe58 	bl	800697c <USART1_Tx_HMIdata>

	FIL fp;
	if(f_open(&fp, full_path, FA_READ) == FR_OK) {
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4669      	mov	r1, sp
 8001cd0:	a804      	add	r0, sp, #16
 8001cd2:	f002 f92d 	bl	8003f30 <f_open>
 8001cd6:	b910      	cbnz	r0, 8001cde <On_Delete_Key_Pressed+0x8e>
			f_close(&fp); // 确保文件未被占用
 8001cd8:	a804      	add	r0, sp, #16
 8001cda:	f002 fbc5 	bl	8004468 <f_close>
	}
	// 执行删除
	FRESULT res = delete_file(full_path);
 8001cde:	4668      	mov	r0, sp
 8001ce0:	f7ff ff80 	bl	8001be4 <delete_file>

	// 处理结果
	if(res == FR_OK) {
 8001ce4:	4604      	mov	r4, r0
 8001ce6:	b928      	cbnz	r0, 8001cf4 <On_Delete_Key_Pressed+0xa4>
		// 在删除成功后更新缓存前释放旧内存
		if(paging.file_list != NULL) {
 8001ce8:	68ab      	ldr	r3, [r5, #8]
 8001cea:	bb53      	cbnz	r3, 8001d42 <On_Delete_Key_Pressed+0xf2>
			for(uint16_t i=0; i<paging.file_count; i++)
					free(paging.file_list[i]);
			free(paging.file_list);
		}
			// 更新文件列表缓存
			Cache_File_List();
 8001cec:	f7ff ff14 	bl	8001b18 <Cache_File_List>
			Refresh_Display();
 8001cf0:	f7ff fed0 	bl	8001a94 <Refresh_Display>
	else {
//			sprintf(Tx_Buffer, "File_M.t7.txt=\"错误:%d\"\xff\xff\xff", res);
	}
//	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);

	HAL_Delay(1000);
 8001cf4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cf8:	f004 ff80 	bl	8006bfc <HAL_Delay>

	sprintf(Tx_Buffer, "File_M.t7.txt=\"\"\xff\xff\xff",paging.file_list[actual_index]);
 8001cfc:	68ab      	ldr	r3, [r5, #8]
 8001cfe:	491d      	ldr	r1, [pc, #116]	@ (8001d74 <On_Delete_Key_Pressed+0x124>)
 8001d00:	59da      	ldr	r2, [r3, r7]
 8001d02:	4818      	ldr	r0, [pc, #96]	@ (8001d64 <On_Delete_Key_Pressed+0x114>)
 8001d04:	f008 fefe 	bl	800ab04 <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001d08:	4816      	ldr	r0, [pc, #88]	@ (8001d64 <On_Delete_Key_Pressed+0x114>)
 8001d0a:	f004 fe37 	bl	800697c <USART1_Tx_HMIdata>
	Confirm_Msg.display = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	7033      	strb	r3, [r6, #0]
	Confirm_Msg.type = CONFIRM_NULL;
 8001d12:	7073      	strb	r3, [r6, #1]
 8001d14:	e00d      	b.n	8001d32 <On_Delete_Key_Pressed+0xe2>
		if(key_code == KEY_CANCEL){
 8001d16:	7823      	ldrb	r3, [r4, #0]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d1c9      	bne.n	8001cb0 <On_Delete_Key_Pressed+0x60>
			sprintf(Tx_Buffer, "File_M.t7.txt=\"\"\xff\xff\xff");
 8001d1c:	4915      	ldr	r1, [pc, #84]	@ (8001d74 <On_Delete_Key_Pressed+0x124>)
 8001d1e:	4811      	ldr	r0, [pc, #68]	@ (8001d64 <On_Delete_Key_Pressed+0x114>)
 8001d20:	f009 f85f 	bl	800ade2 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001d24:	480f      	ldr	r0, [pc, #60]	@ (8001d64 <On_Delete_Key_Pressed+0x114>)
 8001d26:	f004 fe29 	bl	800697c <USART1_Tx_HMIdata>
			Confirm_Msg.display = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	7033      	strb	r3, [r6, #0]
			Confirm_Msg.type = CONFIRM_NULL;
 8001d2e:	7073      	strb	r3, [r6, #1]
			key_code = KEY_NULL;
 8001d30:	7023      	strb	r3, [r4, #0]
}
 8001d32:	b011      	add	sp, #68	@ 0x44
 8001d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
					free(paging.file_list[i]);
 8001d36:	b2a3      	uxth	r3, r4
 8001d38:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8001d3c:	f007 f838 	bl	8008db0 <free>
			for(uint16_t i=0; i<paging.file_count; i++)
 8001d40:	3401      	adds	r4, #1
 8001d42:	882a      	ldrh	r2, [r5, #0]
 8001d44:	b2a3      	uxth	r3, r4
 8001d46:	429a      	cmp	r2, r3
					free(paging.file_list[i]);
 8001d48:	68a8      	ldr	r0, [r5, #8]
			for(uint16_t i=0; i<paging.file_count; i++)
 8001d4a:	d8f4      	bhi.n	8001d36 <On_Delete_Key_Pressed+0xe6>
			free(paging.file_list);
 8001d4c:	f007 f830 	bl	8008db0 <free>
 8001d50:	e7cc      	b.n	8001cec <On_Delete_Key_Pressed+0x9c>
 8001d52:	bf00      	nop
 8001d54:	20000374 	.word	0x20000374
 8001d58:	20000385 	.word	0x20000385
 8001d5c:	002f3a30 	.word	0x002f3a30
 8001d60:	0800d7de 	.word	0x0800d7de
 8001d64:	20000b7e 	.word	0x20000b7e
 8001d68:	20000372 	.word	0x20000372
 8001d6c:	20000910 	.word	0x20000910
 8001d70:	0800d801 	.word	0x0800d801
 8001d74:	0800d823 	.word	0x0800d823

08001d78 <sendFile_key_pressed>:

void sendFile_key_pressed(){
 8001d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if((paging.show_prev_more && current_focus_line == 0) || (paging.show_next_more && current_focus_line == 5))
 8001d7c:	4c50      	ldr	r4, [pc, #320]	@ (8001ec0 <sendFile_key_pressed+0x148>)
 8001d7e:	4b51      	ldr	r3, [pc, #324]	@ (8001ec4 <sendFile_key_pressed+0x14c>)
 8001d80:	7b22      	ldrb	r2, [r4, #12]
 8001d82:	781b      	ldrb	r3, [r3, #0]
void sendFile_key_pressed(){
 8001d84:	b0ab      	sub	sp, #172	@ 0xac
	if((paging.show_prev_more && current_focus_line == 0) || (paging.show_next_more && current_focus_line == 5))
 8001d86:	b10a      	cbz	r2, 8001d8c <sendFile_key_pressed+0x14>
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d037      	beq.n	8001dfc <sendFile_key_pressed+0x84>
 8001d8c:	7b61      	ldrb	r1, [r4, #13]
 8001d8e:	b109      	cbz	r1, 8001d94 <sendFile_key_pressed+0x1c>
 8001d90:	2b05      	cmp	r3, #5
 8001d92:	d033      	beq.n	8001dfc <sendFile_key_pressed+0x84>
		return 1;
	// 计算实际文件索引（需考虑分页提示符）
	uint16_t actual_index = paging.start_index + current_focus_line;
 8001d94:	8861      	ldrh	r1, [r4, #2]
 8001d96:	440b      	add	r3, r1
 8001d98:	b29b      	uxth	r3, r3
	if(paging.show_prev_more) actual_index -= 1; // 排除"..."行
 8001d9a:	b10a      	cbz	r2, 8001da0 <sendFile_key_pressed+0x28>
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29b      	uxth	r3, r3

	// 构造完整路径
	char full_path[12 + 3] = "0:/";
 8001da0:	2200      	movs	r2, #0
 8001da2:	4949      	ldr	r1, [pc, #292]	@ (8001ec8 <sendFile_key_pressed+0x150>)
 8001da4:	9203      	str	r2, [sp, #12]
 8001da6:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001daa:	f8cd 200f 	str.w	r2, [sp, #15]
	strcat(full_path, paging.file_list[actual_index]);
 8001dae:	68a2      	ldr	r2, [r4, #8]
 8001db0:	a801      	add	r0, sp, #4
 8001db2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001db6:	009f      	lsls	r7, r3, #2
 8001db8:	f008 ff1f 	bl	800abfa <strcat>

	while(1){
		if(HAL_GPIO_ReadPin(BLE_LED_GPIO_Port, BLE_LED_Pin) == GPIO_PIN_RESET)
 8001dbc:	f8df 910c 	ldr.w	r9, [pc, #268]	@ 8001ecc <sendFile_key_pressed+0x154>
 8001dc0:	4e43      	ldr	r6, [pc, #268]	@ (8001ed0 <sendFile_key_pressed+0x158>)
		{
			sprintf(Tx_Buffer, "File_M.t7.txt=\"蓝牙未连接\"\xff\xff\xff");
 8001dc2:	f8df 8110 	ldr.w	r8, [pc, #272]	@ 8001ed4 <sendFile_key_pressed+0x15c>
		if(HAL_GPIO_ReadPin(BLE_LED_GPIO_Port, BLE_LED_Pin) == GPIO_PIN_RESET)
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	4648      	mov	r0, r9
 8001dca:	f005 fcd9 	bl	8007780 <HAL_GPIO_ReadPin>
 8001dce:	4605      	mov	r5, r0
 8001dd0:	b9b8      	cbnz	r0, 8001e02 <sendFile_key_pressed+0x8a>
			sprintf(Tx_Buffer, "File_M.t7.txt=\"蓝牙未连接\"\xff\xff\xff");
 8001dd2:	4641      	mov	r1, r8
 8001dd4:	4840      	ldr	r0, [pc, #256]	@ (8001ed8 <sendFile_key_pressed+0x160>)
 8001dd6:	f009 f804 	bl	800ade2 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001dda:	483f      	ldr	r0, [pc, #252]	@ (8001ed8 <sendFile_key_pressed+0x160>)
 8001ddc:	f004 fdce 	bl	800697c <USART1_Tx_HMIdata>
		}else
			break;

		if(key_code == KEY_CANCEL){
 8001de0:	7833      	ldrb	r3, [r6, #0]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d1ef      	bne.n	8001dc6 <sendFile_key_pressed+0x4e>
			sprintf(Tx_Buffer, "File_M.t7.txt=\"\"\xff\xff\xff");
 8001de6:	493d      	ldr	r1, [pc, #244]	@ (8001edc <sendFile_key_pressed+0x164>)
 8001de8:	483b      	ldr	r0, [pc, #236]	@ (8001ed8 <sendFile_key_pressed+0x160>)
 8001dea:	f008 fffa 	bl	800ade2 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001dee:	483a      	ldr	r0, [pc, #232]	@ (8001ed8 <sendFile_key_pressed+0x160>)
 8001df0:	f004 fdc4 	bl	800697c <USART1_Tx_HMIdata>
			Confirm_Msg.display = 0;
 8001df4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee0 <sendFile_key_pressed+0x168>)
			Confirm_Msg.type = CONFIRM_NULL;
			key_code = KEY_NULL;
 8001df6:	7035      	strb	r5, [r6, #0]
			Confirm_Msg.display = 0;
 8001df8:	701d      	strb	r5, [r3, #0]
			Confirm_Msg.type = CONFIRM_NULL;
 8001dfa:	705d      	strb	r5, [r3, #1]

	sprintf(Tx_Buffer, "File_M.t7.txt=\"\"\xff\xff\xff",paging.file_list[actual_index]);
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
	Confirm_Msg.display = 0;
	Confirm_Msg.type = CONFIRM_NULL;
}
 8001dfc:	b02b      	add	sp, #172	@ 0xac
 8001dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sprintf(Tx_Buffer, "File_M.t7.txt=\"确认发送%s?\"\xff\xff\xff",paging.file_list[actual_index]);
 8001e02:	68a3      	ldr	r3, [r4, #8]
 8001e04:	4937      	ldr	r1, [pc, #220]	@ (8001ee4 <sendFile_key_pressed+0x16c>)
 8001e06:	59da      	ldr	r2, [r3, r7]
 8001e08:	4833      	ldr	r0, [pc, #204]	@ (8001ed8 <sendFile_key_pressed+0x160>)
 8001e0a:	f008 fe7b 	bl	800ab04 <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001e0e:	4832      	ldr	r0, [pc, #200]	@ (8001ed8 <sendFile_key_pressed+0x160>)
 8001e10:	f004 fdb4 	bl	800697c <USART1_Tx_HMIdata>
	Confirm_Msg.display = 1;
 8001e14:	2301      	movs	r3, #1
 8001e16:	4d32      	ldr	r5, [pc, #200]	@ (8001ee0 <sendFile_key_pressed+0x168>)
 8001e18:	702b      	strb	r3, [r5, #0]
	Confirm_Msg.type = CONFIRM_SEND_FILE;
 8001e1a:	706b      	strb	r3, [r5, #1]
		if(key_code == KEY_CONFIRM){
 8001e1c:	7833      	ldrb	r3, [r6, #0]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d13b      	bne.n	8001e9a <sendFile_key_pressed+0x122>
			key_code = KEY_NULL;
 8001e22:	f04f 0800 	mov.w	r8, #0
	res = check_file_exists(full_path);
 8001e26:	a801      	add	r0, sp, #4
			key_code = KEY_NULL;
 8001e28:	f886 8000 	strb.w	r8, [r6]
	res = check_file_exists(full_path);
 8001e2c:	f000 f8e8 	bl	8002000 <check_file_exists>
	} else if (res == FR_NO_FILE) {
 8001e30:	2804      	cmp	r0, #4
 8001e32:	d0e3      	beq.n	8001dfc <sendFile_key_pressed+0x84>
	sprintf(Tx_Buffer, "File_M.t7.txt=\"正在发送%s\"\xff\xff\xff",paging.file_list[actual_index]);
 8001e34:	68a3      	ldr	r3, [r4, #8]
 8001e36:	492c      	ldr	r1, [pc, #176]	@ (8001ee8 <sendFile_key_pressed+0x170>)
 8001e38:	59da      	ldr	r2, [r3, r7]
 8001e3a:	4827      	ldr	r0, [pc, #156]	@ (8001ed8 <sendFile_key_pressed+0x160>)
 8001e3c:	f008 fe62 	bl	800ab04 <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001e40:	4825      	ldr	r0, [pc, #148]	@ (8001ed8 <sendFile_key_pressed+0x160>)
 8001e42:	f004 fd9b 	bl	800697c <USART1_Tx_HMIdata>
	uint8_t line_buf[100] = {0};
 8001e46:	2260      	movs	r2, #96	@ 0x60
 8001e48:	4641      	mov	r1, r8
 8001e4a:	a812      	add	r0, sp, #72	@ 0x48
 8001e4c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8001e50:	f008 fecb 	bl	800abea <memset>
	res = f_open(&fp, full_path, FA_READ);
 8001e54:	2201      	movs	r2, #1
 8001e56:	a901      	add	r1, sp, #4
 8001e58:	a805      	add	r0, sp, #20
 8001e5a:	f002 f869 	bl	8003f30 <f_open>
	if(res != FR_OK)
 8001e5e:	2800      	cmp	r0, #0
 8001e60:	d1cc      	bne.n	8001dfc <sendFile_key_pressed+0x84>
	while(f_gets(line_buf,sizeof(line_buf),&fp)!= NULL){
 8001e62:	2164      	movs	r1, #100	@ 0x64
 8001e64:	aa05      	add	r2, sp, #20
 8001e66:	a811      	add	r0, sp, #68	@ 0x44
 8001e68:	f002 ff68 	bl	8004d3c <f_gets>
 8001e6c:	bb20      	cbnz	r0, 8001eb8 <sendFile_key_pressed+0x140>
	res = f_close(&fp);
 8001e6e:	a805      	add	r0, sp, #20
 8001e70:	f002 fafa 	bl	8004468 <f_close>
	if(res != FR_OK)
 8001e74:	4606      	mov	r6, r0
 8001e76:	2800      	cmp	r0, #0
 8001e78:	d1c0      	bne.n	8001dfc <sendFile_key_pressed+0x84>
	HAL_Delay(1000);
 8001e7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e7e:	f004 febd 	bl	8006bfc <HAL_Delay>
	sprintf(Tx_Buffer, "File_M.t7.txt=\"\"\xff\xff\xff",paging.file_list[actual_index]);
 8001e82:	68a3      	ldr	r3, [r4, #8]
 8001e84:	4915      	ldr	r1, [pc, #84]	@ (8001edc <sendFile_key_pressed+0x164>)
 8001e86:	59da      	ldr	r2, [r3, r7]
 8001e88:	4813      	ldr	r0, [pc, #76]	@ (8001ed8 <sendFile_key_pressed+0x160>)
 8001e8a:	f008 fe3b 	bl	800ab04 <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001e8e:	4812      	ldr	r0, [pc, #72]	@ (8001ed8 <sendFile_key_pressed+0x160>)
 8001e90:	f004 fd74 	bl	800697c <USART1_Tx_HMIdata>
	Confirm_Msg.display = 0;
 8001e94:	702e      	strb	r6, [r5, #0]
	Confirm_Msg.type = CONFIRM_NULL;
 8001e96:	706e      	strb	r6, [r5, #1]
 8001e98:	e7b0      	b.n	8001dfc <sendFile_key_pressed+0x84>
		if(key_code == KEY_CANCEL){
 8001e9a:	7833      	ldrb	r3, [r6, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d1bd      	bne.n	8001e1c <sendFile_key_pressed+0xa4>
			sprintf(Tx_Buffer, "File_M.t7.txt=\"\"\xff\xff\xff");
 8001ea0:	490e      	ldr	r1, [pc, #56]	@ (8001edc <sendFile_key_pressed+0x164>)
 8001ea2:	480d      	ldr	r0, [pc, #52]	@ (8001ed8 <sendFile_key_pressed+0x160>)
 8001ea4:	f008 ff9d 	bl	800ade2 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001ea8:	480b      	ldr	r0, [pc, #44]	@ (8001ed8 <sendFile_key_pressed+0x160>)
 8001eaa:	f004 fd67 	bl	800697c <USART1_Tx_HMIdata>
			Confirm_Msg.display = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	702b      	strb	r3, [r5, #0]
			Confirm_Msg.type = CONFIRM_NULL;
 8001eb2:	706b      	strb	r3, [r5, #1]
			key_code = KEY_NULL;
 8001eb4:	7033      	strb	r3, [r6, #0]
			return;
 8001eb6:	e7a1      	b.n	8001dfc <sendFile_key_pressed+0x84>
		USART2_Tx_BLEdata(line_buf);
 8001eb8:	a811      	add	r0, sp, #68	@ 0x44
 8001eba:	f004 fd6f 	bl	800699c <USART2_Tx_BLEdata>
 8001ebe:	e7d0      	b.n	8001e62 <sendFile_key_pressed+0xea>
 8001ec0:	20000374 	.word	0x20000374
 8001ec4:	20000385 	.word	0x20000385
 8001ec8:	002f3a30 	.word	0x002f3a30
 8001ecc:	40010c00 	.word	0x40010c00
 8001ed0:	20000910 	.word	0x20000910
 8001ed4:	0800d837 	.word	0x0800d837
 8001ed8:	20000b7e 	.word	0x20000b7e
 8001edc:	0800d823 	.word	0x0800d823
 8001ee0:	20000372 	.word	0x20000372
 8001ee4:	0800d85a 	.word	0x0800d85a
 8001ee8:	0800d87d 	.word	0x0800d87d

08001eec <scroll_focus_line>:

 void scroll_focus_line(void){
 8001eec:	b538      	push	{r3, r4, r5, lr}
	sprintf(Tx_Buffer,"File_M.t%d.bco=65535\xff\xff\xff",last_focus_line);
 8001eee:	4c12      	ldr	r4, [pc, #72]	@ (8001f38 <scroll_focus_line+0x4c>)
 8001ef0:	4d12      	ldr	r5, [pc, #72]	@ (8001f3c <scroll_focus_line+0x50>)
 8001ef2:	4913      	ldr	r1, [pc, #76]	@ (8001f40 <scroll_focus_line+0x54>)
 8001ef4:	782a      	ldrb	r2, [r5, #0]
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	f008 fe04 	bl	800ab04 <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001efc:	4620      	mov	r0, r4
 8001efe:	f004 fd3d 	bl	800697c <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"File_M.t%d.pco=0\xff\xff\xff",last_focus_line);
 8001f02:	782a      	ldrb	r2, [r5, #0]
 8001f04:	490f      	ldr	r1, [pc, #60]	@ (8001f44 <scroll_focus_line+0x58>)
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);

	sprintf(Tx_Buffer,"File_M.t%d.bco=825\xff\xff\xff",current_focus_line);
 8001f06:	4d10      	ldr	r5, [pc, #64]	@ (8001f48 <scroll_focus_line+0x5c>)
	sprintf(Tx_Buffer,"File_M.t%d.pco=0\xff\xff\xff",last_focus_line);
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f008 fdfb 	bl	800ab04 <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f004 fd34 	bl	800697c <USART1_Tx_HMIdata>
	sprintf(Tx_Buffer,"File_M.t%d.bco=825\xff\xff\xff",current_focus_line);
 8001f14:	782a      	ldrb	r2, [r5, #0]
 8001f16:	490d      	ldr	r1, [pc, #52]	@ (8001f4c <scroll_focus_line+0x60>)
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f008 fdf3 	bl	800ab04 <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f004 fd2c 	bl	800697c <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"File_M.t%d.pco=65535\xff\xff\xff",current_focus_line);
 8001f24:	4620      	mov	r0, r4
 8001f26:	782a      	ldrb	r2, [r5, #0]
 8001f28:	4909      	ldr	r1, [pc, #36]	@ (8001f50 <scroll_focus_line+0x64>)
 8001f2a:	f008 fdeb 	bl	800ab04 <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001f2e:	4620      	mov	r0, r4
}
 8001f30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001f34:	f004 bd22 	b.w	800697c <USART1_Tx_HMIdata>
 8001f38:	20000b7e 	.word	0x20000b7e
 8001f3c:	20000384 	.word	0x20000384
 8001f40:	0800d89f 	.word	0x0800d89f
 8001f44:	0800d8b7 	.word	0x0800d8b7
 8001f48:	20000385 	.word	0x20000385
 8001f4c:	0800d8cb 	.word	0x0800d8cb
 8001f50:	0800d8e1 	.word	0x0800d8e1

08001f54 <f_write_retry>:
// 增加写入超时
#define SD_WRITE_TIMEOUT 10000  // 10秒
int SDCard_states = 0;
uint16_t csv_crt_line_No = 0;

FRESULT f_write_retry(FIL* fp, const void* buff, UINT btw) {
 8001f54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001f58:	4607      	mov	r7, r0
 8001f5a:	4688      	mov	r8, r1
 8001f5c:	4615      	mov	r5, r2
  UINT bw;
  FRESULT res;
  uint32_t start = HAL_GetTick();
 8001f5e:	f004 fe47 	bl	8006bf0 <HAL_GetTick>

  do {
    res = f_write(fp, buff, btw, &bw);

    if(res != FR_OK) break;
    if(HAL_GetTick() - start > SD_WRITE_TIMEOUT) {
 8001f62:	f242 7910 	movw	r9, #10000	@ 0x2710
  uint32_t start = HAL_GetTick();
 8001f66:	4606      	mov	r6, r0
    res = f_write(fp, buff, btw, &bw);
 8001f68:	462a      	mov	r2, r5
 8001f6a:	4641      	mov	r1, r8
 8001f6c:	4638      	mov	r0, r7
 8001f6e:	ab01      	add	r3, sp, #4
 8001f70:	f002 f982 	bl	8004278 <f_write>
    if(res != FR_OK) break;
 8001f74:	4604      	mov	r4, r0
 8001f76:	b938      	cbnz	r0, 8001f88 <f_write_retry+0x34>
    if(HAL_GetTick() - start > SD_WRITE_TIMEOUT) {
 8001f78:	f004 fe3a 	bl	8006bf0 <HAL_GetTick>
 8001f7c:	1b80      	subs	r0, r0, r6
 8001f7e:	4548      	cmp	r0, r9
 8001f80:	d806      	bhi.n	8001f90 <f_write_retry+0x3c>
      res = FR_TIMEOUT;
      break;
    }
  } while(bw != btw);
 8001f82:	9b01      	ldr	r3, [sp, #4]
 8001f84:	42ab      	cmp	r3, r5
 8001f86:	d1ef      	bne.n	8001f68 <f_write_retry+0x14>

  return res;
}
 8001f88:	4620      	mov	r0, r4
 8001f8a:	b003      	add	sp, #12
 8001f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      res = FR_TIMEOUT;
 8001f90:	240f      	movs	r4, #15
 8001f92:	e7f9      	b.n	8001f88 <f_write_retry+0x34>

08001f94 <SD_FS_Init>:
  }
  return SDCard_states;
}

uint8_t SD_FS_Init(void)
{
 8001f94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    static FATFS sd_fs;
    uint32_t ret = 0;
    MKFS_PARM opt = {0};
 8001f96:	2210      	movs	r2, #16
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4668      	mov	r0, sp
 8001f9c:	f008 fe25 	bl	800abea <memset>
    opt.fmt = FM_FAT;
 8001fa0:	2201      	movs	r2, #1
    static uint8_t work_buf[512] = {0};
    ret = f_mount(&sd_fs, DISK_SD, 1);
 8001fa2:	490b      	ldr	r1, [pc, #44]	@ (8001fd0 <SD_FS_Init+0x3c>)
 8001fa4:	480b      	ldr	r0, [pc, #44]	@ (8001fd4 <SD_FS_Init+0x40>)
    opt.fmt = FM_FAT;
 8001fa6:	f88d 2000 	strb.w	r2, [sp]
    ret = f_mount(&sd_fs, DISK_SD, 1);
 8001faa:	f001 ff97 	bl	8003edc <f_mount>

    if(ret != FR_OK)
 8001fae:	b158      	cbz	r0, 8001fc8 <SD_FS_Init+0x34>
    {
        switch(ret)
 8001fb0:	f1a0 030d 	sub.w	r3, r0, #13
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d806      	bhi.n	8001fc8 <SD_FS_Init+0x34>
        {
            case FR_NO_FILESYSTEM:
            {
                ret = f_mkfs(DISK_SD, &opt, work_buf, sizeof(work_buf));
 8001fba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fbe:	4669      	mov	r1, sp
 8001fc0:	4a05      	ldr	r2, [pc, #20]	@ (8001fd8 <SD_FS_Init+0x44>)
 8001fc2:	4803      	ldr	r0, [pc, #12]	@ (8001fd0 <SD_FS_Init+0x3c>)
 8001fc4:	f002 fb4a 	bl	800465c <f_mkfs>
    else
    {
//    	printf("sd fs f_mkfs success!\r\n");
    }
    return ret;
}
 8001fc8:	b2c0      	uxtb	r0, r0
 8001fca:	b005      	add	sp, #20
 8001fcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fd0:	0800d8f9 	.word	0x0800d8f9
 8001fd4:	20000588 	.word	0x20000588
 8001fd8:	20000388 	.word	0x20000388

08001fdc <SDCard_InsertCheck>:
int SDCard_InsertCheck(void){
 8001fdc:	b508      	push	{r3, lr}
  if(SD_INSERT){
 8001fde:	2101      	movs	r1, #1
 8001fe0:	4806      	ldr	r0, [pc, #24]	@ (8001ffc <SDCard_InsertCheck+0x20>)
 8001fe2:	f005 fbcd 	bl	8007780 <HAL_GPIO_ReadPin>
 8001fe6:	b930      	cbnz	r0, 8001ff6 <SDCard_InsertCheck+0x1a>
		ret = SD_FS_Init();
 8001fe8:	f7ff ffd4 	bl	8001f94 <SD_FS_Init>
  	if(ret == 0){
 8001fec:	3800      	subs	r0, #0
 8001fee:	bf18      	it	ne
 8001ff0:	2001      	movne	r0, #1
 8001ff2:	4240      	negs	r0, r0
}
 8001ff4:	bd08      	pop	{r3, pc}
  	SDCard_states = -2;//未插入SD卡
 8001ff6:	f06f 0001 	mvn.w	r0, #1
  return SDCard_states;
 8001ffa:	e7fb      	b.n	8001ff4 <SDCard_InsertCheck+0x18>
 8001ffc:	40011400 	.word	0x40011400

08002000 <check_file_exists>:

FRESULT check_file_exists(const char* path) {
 8002000:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    FILINFO fno;
    return f_stat(path, &fno);
 8002002:	4669      	mov	r1, sp
 8002004:	f002 fab7 	bl	8004576 <f_stat>
}
 8002008:	b007      	add	sp, #28
 800200a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002010 <CSV_sheet_Init>:

int CSV_sheet_Init(void){
 8002010:	b530      	push	{r4, r5, lr}

	if(SDCard_states == 0){
 8002012:	4b30      	ldr	r3, [pc, #192]	@ (80020d4 <CSV_sheet_Init+0xc4>)
int CSV_sheet_Init(void){
 8002014:	b0b5      	sub	sp, #212	@ 0xd4
	if(SDCard_states == 0){
 8002016:	681c      	ldr	r4, [r3, #0]
 8002018:	2c00      	cmp	r4, #0
 800201a:	d157      	bne.n	80020cc <CSV_sheet_Init+0xbc>
    FIL fp;
    FRESULT res;
    uint16_t File_Num = 1;

    char USER_FILE_NAME[20] = {0};
 800201c:	2210      	movs	r2, #16
 800201e:	4621      	mov	r1, r4
 8002020:	eb0d 0002 	add.w	r0, sp, r2
 8002024:	9403      	str	r4, [sp, #12]
 8002026:	f008 fde0 	bl	800abea <memset>
    char file_name_buf[20] = {0};
 800202a:	2210      	movs	r2, #16
 800202c:	4621      	mov	r1, r4
 800202e:	a809      	add	r0, sp, #36	@ 0x24
 8002030:	9408      	str	r4, [sp, #32]
 8002032:	f008 fdda 	bl	800abea <memset>

    if(GPS_GGA_Data.fix_status == 1){
 8002036:	4b28      	ldr	r3, [pc, #160]	@ (80020d8 <CSV_sheet_Init+0xc8>)
 8002038:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800203c:	2b01      	cmp	r3, #1
 800203e:	d118      	bne.n	8002072 <CSV_sheet_Init+0x62>
    	Format_FileName_Date(file_name_buf, GPS_RMC_Data.time, GPS_RMC_Data.date);
 8002040:	4a26      	ldr	r2, [pc, #152]	@ (80020dc <CSV_sheet_Init+0xcc>)
 8002042:	a808      	add	r0, sp, #32
 8002044:	f1a2 012d 	sub.w	r1, r2, #45	@ 0x2d
 8002048:	f7ff faf4 	bl	8001634 <Format_FileName_Date>
    }
    else{
    	sprintf(file_name_buf,"250101");
    }
    snprintf(USER_FILE_NAME,20,"0:/%s%02d.csv", file_name_buf, File_Num);
 800204c:	2501      	movs	r5, #1
 800204e:	2114      	movs	r1, #20
 8002050:	4a23      	ldr	r2, [pc, #140]	@ (80020e0 <CSV_sheet_Init+0xd0>)
 8002052:	9500      	str	r5, [sp, #0]
 8002054:	ab08      	add	r3, sp, #32
 8002056:	a803      	add	r0, sp, #12
 8002058:	f008 fd20 	bl	800aa9c <sniprintf>

    res = check_file_exists(USER_FILE_NAME);
 800205c:	a803      	add	r0, sp, #12
 800205e:	f7ff ffcf 	bl	8002000 <check_file_exists>

    if (res == FR_OK) {//文件存在
 8002062:	b958      	cbnz	r0, 800207c <CSV_sheet_Init+0x6c>
    	AD24C02_Read2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);
 8002064:	2050      	movs	r0, #80	@ 0x50
 8002066:	491f      	ldr	r1, [pc, #124]	@ (80020e4 <CSV_sheet_Init+0xd4>)
 8002068:	f7ff f8c9 	bl	80011fe <AD24C02_Read2Byte>
	}
	else
	{
		return -1;//没发现SDCard
	}
}
 800206c:	4620      	mov	r0, r4
 800206e:	b035      	add	sp, #212	@ 0xd4
 8002070:	bd30      	pop	{r4, r5, pc}
    	sprintf(file_name_buf,"250101");
 8002072:	491d      	ldr	r1, [pc, #116]	@ (80020e8 <CSV_sheet_Init+0xd8>)
 8002074:	a808      	add	r0, sp, #32
 8002076:	f008 feb4 	bl	800ade2 <strcpy>
 800207a:	e7e7      	b.n	800204c <CSV_sheet_Init+0x3c>
    else if (res == FR_NO_FILE) {//文件不存在
 800207c:	2804      	cmp	r0, #4
 800207e:	d105      	bne.n	800208c <CSV_sheet_Init+0x7c>
        FRESULT ret = f_open(&fp, USER_FILE_NAME, FA_WRITE | FA_OPEN_APPEND);
 8002080:	2232      	movs	r2, #50	@ 0x32
 8002082:	a903      	add	r1, sp, #12
 8002084:	a80d      	add	r0, sp, #52	@ 0x34
 8002086:	f001 ff53 	bl	8003f30 <f_open>
        if(ret != FR_OK)
 800208a:	b108      	cbz	r0, 8002090 <CSV_sheet_Init+0x80>
          return 1;
 800208c:	2401      	movs	r4, #1
 800208e:	e7ed      	b.n	800206c <CSV_sheet_Init+0x5c>
    		char header[] = {0xE5,0xBA,0x8F,0xE5,0x8F,0xB7,0x2C,0xE6,0x97,0xA5,0xE6
 8002090:	226a      	movs	r2, #106	@ 0x6a
 8002092:	4916      	ldr	r1, [pc, #88]	@ (80020ec <CSV_sheet_Init+0xdc>)
 8002094:	a819      	add	r0, sp, #100	@ 0x64
 8002096:	f008 feba 	bl	800ae0e <memcpy>
        ret = f_write_retry(&fp, header, strlen(header));
 800209a:	a819      	add	r0, sp, #100	@ 0x64
 800209c:	f7fe f862 	bl	8000164 <strlen>
 80020a0:	a919      	add	r1, sp, #100	@ 0x64
 80020a2:	4602      	mov	r2, r0
 80020a4:	a80d      	add	r0, sp, #52	@ 0x34
 80020a6:	f7ff ff55 	bl	8001f54 <f_write_retry>
 80020aa:	4605      	mov	r5, r0
        f_sync(&fp);
 80020ac:	a80d      	add	r0, sp, #52	@ 0x34
 80020ae:	f002 f9a5 	bl	80043fc <f_sync>
        if(ret != FR_OK)
 80020b2:	2d00      	cmp	r5, #0
 80020b4:	d1ea      	bne.n	800208c <CSV_sheet_Init+0x7c>
        ret = f_close(&fp);
 80020b6:	a80d      	add	r0, sp, #52	@ 0x34
 80020b8:	f002 f9d6 	bl	8004468 <f_close>
        if(ret != FR_OK)
 80020bc:	2800      	cmp	r0, #0
 80020be:	d1e5      	bne.n	800208c <CSV_sheet_Init+0x7c>
        csv_crt_line_No = 0;
 80020c0:	4908      	ldr	r1, [pc, #32]	@ (80020e4 <CSV_sheet_Init+0xd4>)
 80020c2:	8008      	strh	r0, [r1, #0]
        AD24C02_Write2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);
 80020c4:	2050      	movs	r0, #80	@ 0x50
 80020c6:	f7ff f889 	bl	80011dc <AD24C02_Write2Byte>
        return 0;
 80020ca:	e7cf      	b.n	800206c <CSV_sheet_Init+0x5c>
		return -1;//没发现SDCard
 80020cc:	f04f 34ff 	mov.w	r4, #4294967295
 80020d0:	e7cc      	b.n	800206c <CSV_sheet_Init+0x5c>
 80020d2:	bf00      	nop
 80020d4:	200007bc 	.word	0x200007bc
 80020d8:	20000230 	.word	0x20000230
 80020dc:	20000228 	.word	0x20000228
 80020e0:	0800d903 	.word	0x0800d903
 80020e4:	200007b8 	.word	0x200007b8
 80020e8:	0800d8fc 	.word	0x0800d8fc
 80020ec:	0800d911 	.word	0x0800d911

080020f0 <SDCard_Write_log>:

int SDCard_Write_log(GPS_Data GGA_Result_Data, GPS_Data RMC_Result_Data){
 80020f0:	b084      	sub	sp, #16
 80020f2:	b530      	push	{r4, r5, lr}
 80020f4:	b0d1      	sub	sp, #324	@ 0x144
 80020f6:	ac54      	add	r4, sp, #336	@ 0x150
 80020f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(SDCard_states == 0){
 80020fc:	4bb5      	ldr	r3, [pc, #724]	@ (80023d4 <SDCard_Write_log+0x2e4>)
 80020fe:	681c      	ldr	r4, [r3, #0]
 8002100:	2c00      	cmp	r4, #0
 8002102:	f040 8193 	bne.w	800242c <SDCard_Write_log+0x33c>
    FIL fp;
    FRESULT res;
    uint16_t File_Num = 1;
    char USER_FILE_NAME[20] = {0};
 8002106:	2210      	movs	r2, #16
 8002108:	4621      	mov	r1, r4
 800210a:	eb0d 0002 	add.w	r0, sp, r2
 800210e:	9403      	str	r4, [sp, #12]
 8002110:	f008 fd6b 	bl	800abea <memset>
    char file_name_buf[20] = {0};
 8002114:	2210      	movs	r2, #16
 8002116:	4621      	mov	r1, r4
 8002118:	a809      	add	r0, sp, #36	@ 0x24
 800211a:	9408      	str	r4, [sp, #32]
 800211c:	f008 fd65 	bl	800abea <memset>
    SD_LogData LogBuf;

    if(GGA_Result_Data.fix_status == 1){    //按日期格式化文件名
 8002120:	f89d 317d 	ldrb.w	r3, [sp, #381]	@ 0x17d
 8002124:	2b01      	cmp	r3, #1
 8002126:	f040 8085 	bne.w	8002234 <SDCard_Write_log+0x144>
    	Format_FileName_Date(file_name_buf, GPS_RMC_Data.time, GPS_RMC_Data.date);
 800212a:	4aab      	ldr	r2, [pc, #684]	@ (80023d8 <SDCard_Write_log+0x2e8>)
 800212c:	a808      	add	r0, sp, #32
 800212e:	f1a2 012d 	sub.w	r1, r2, #45	@ 0x2d
 8002132:	f7ff fa7f 	bl	8001634 <Format_FileName_Date>
    }
    else{
    	sprintf(file_name_buf,"250101");
    }
    snprintf(USER_FILE_NAME,20,"0:/%s%02d.csv", file_name_buf, File_Num);
 8002136:	2301      	movs	r3, #1
 8002138:	2114      	movs	r1, #20
 800213a:	4aa8      	ldr	r2, [pc, #672]	@ (80023dc <SDCard_Write_log+0x2ec>)
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	a803      	add	r0, sp, #12
 8002140:	ab08      	add	r3, sp, #32
 8002142:	f008 fcab 	bl	800aa9c <sniprintf>

    res = check_file_exists(USER_FILE_NAME);    //检查文件是否存在
 8002146:	a803      	add	r0, sp, #12
 8002148:	f7ff ff5a 	bl	8002000 <check_file_exists>
    FRESULT ret = f_open(&fp, USER_FILE_NAME, FA_WRITE | FA_OPEN_APPEND);    //打开文件，若文件不存在则创建新文件，并定位到文件末尾
 800214c:	2232      	movs	r2, #50	@ 0x32
    res = check_file_exists(USER_FILE_NAME);    //检查文件是否存在
 800214e:	4605      	mov	r5, r0
    FRESULT ret = f_open(&fp, USER_FILE_NAME, FA_WRITE | FA_OPEN_APPEND);    //打开文件，若文件不存在则创建新文件，并定位到文件末尾
 8002150:	a903      	add	r1, sp, #12
 8002152:	a80d      	add	r0, sp, #52	@ 0x34
 8002154:	f001 feec 	bl	8003f30 <f_open>
    if(ret != FR_OK)
 8002158:	4604      	mov	r4, r0
 800215a:	2800      	cmp	r0, #0
 800215c:	d168      	bne.n	8002230 <SDCard_Write_log+0x140>
    {
//    	printf("f_open fail: %s\r\n", USER_FILE_NAME);
      return 1;
    }

    switch(res){
 800215e:	b1bd      	cbz	r5, 8002190 <SDCard_Write_log+0xa0>
 8002160:	2d04      	cmp	r5, #4
 8002162:	f040 8122 	bne.w	80023aa <SDCard_Write_log+0x2ba>
    case FR_NO_FILE://文件不存在，先向文件中写入列名称：序号,日期,时间,树木编号,注射剂量,经度,纬度,海拔,累计剂量,累计数量
    		char header[] = {0xE5,0xBA,0x8F,0xE5,0x8F,0xB7,0x2C,0xE6,0x97,0xA5,0xE6,0x9C,0x9F,
 8002166:	226a      	movs	r2, #106	@ 0x6a
 8002168:	499d      	ldr	r1, [pc, #628]	@ (80023e0 <SDCard_Write_log+0x2f0>)
 800216a:	a835      	add	r0, sp, #212	@ 0xd4
 800216c:	f008 fe4f 	bl	800ae0e <memcpy>
						0xBC,0x96,0xE5,0x8F,0xB7,0x2C,0xE6,0xB3,0xA8,0xE5,0xB0,0x84,0xE9,0x87,0x8F,
						0x2F,0x6D,0x4C,0x2C,0xE7,0xBB,0x8F,0xE5,0xBA,0xA6,0x2C,0xE7,0xBA,0xAC,0xE5,
						0xBA,0xA6,0x2C,0xE6,0xB5,0xB7,0xE6,0x8B,0x94,0x2F,0x6D,0x2C,0xE7,0xB4,0xAF,
						0xE8,0xAE,0xA1,0xE6,0xB3,0xA8,0xE8,0x8D,0xAF,0xE9,0x87,0x8F,0x2F,0x6D,0x4C,
						0x2C,0xE7,0xB4,0xAF,0xE8,0xAE,0xA1,0xE6,0xB3,0xA8,0xE8,0x8D,0xAF,0xE6,0x95,0xB0,0x0D,0X0A};
        ret = f_write_retry(&fp, header, strlen(header));
 8002170:	a835      	add	r0, sp, #212	@ 0xd4
 8002172:	f7fd fff7 	bl	8000164 <strlen>
 8002176:	a935      	add	r1, sp, #212	@ 0xd4
 8002178:	4602      	mov	r2, r0
 800217a:	a80d      	add	r0, sp, #52	@ 0x34
 800217c:	f7ff feea 	bl	8001f54 <f_write_retry>
        f_sync(&fp);
 8002180:	a80d      	add	r0, sp, #52	@ 0x34
 8002182:	f002 f93b 	bl	80043fc <f_sync>
        csv_crt_line_No = 0;
 8002186:	4997      	ldr	r1, [pc, #604]	@ (80023e4 <SDCard_Write_log+0x2f4>)
        AD24C02_Write2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);
 8002188:	2050      	movs	r0, #80	@ 0x50
        csv_crt_line_No = 0;
 800218a:	800c      	strh	r4, [r1, #0]
        AD24C02_Write2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);
 800218c:	f7ff f826 	bl	80011dc <AD24C02_Write2Byte>
    case FR_OK://文件存在
    		char write_bf[50];
				LogBuf.No = csv_crt_line_No++;
 8002190:	4c94      	ldr	r4, [pc, #592]	@ (80023e4 <SDCard_Write_log+0x2f4>)
				Format_GPS_Date(LogBuf.Date,RMC_Result_Data.time,RMC_Result_Data.date);
 8002192:	f20d 1193 	addw	r1, sp, #403	@ 0x193
				LogBuf.No = csv_crt_line_No++;
 8002196:	8823      	ldrh	r3, [r4, #0]
				Format_GPS_Date(LogBuf.Date,RMC_Result_Data.time,RMC_Result_Data.date);
 8002198:	f10d 009a 	add.w	r0, sp, #154	@ 0x9a
				LogBuf.No = csv_crt_line_No++;
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	8022      	strh	r2, [r4, #0]
				Format_GPS_Date(LogBuf.Date,RMC_Result_Data.time,RMC_Result_Data.date);
 80021a0:	aa70      	add	r2, sp, #448	@ 0x1c0
				LogBuf.No = csv_crt_line_No++;
 80021a2:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
				Format_GPS_Date(LogBuf.Date,RMC_Result_Data.time,RMC_Result_Data.date);
 80021a6:	f7ff f9a1 	bl	80014ec <Format_GPS_Date>
				Format_GPS_Time(LogBuf.Time,RMC_Result_Data.time);
 80021aa:	f20d 1193 	addw	r1, sp, #403	@ 0x193
 80021ae:	f10d 00a5 	add.w	r0, sp, #165	@ 0xa5
 80021b2:	f7ff f9f7 	bl	80015a4 <Format_GPS_Time>
				LogBuf.TreeSN = current_TreeNo;
 80021b6:	4b8c      	ldr	r3, [pc, #560]	@ (80023e8 <SDCard_Write_log+0x2f8>)
				LogBuf.TreeDose = InjectTimes*2;
				FormatLongitude(LogBuf.Lng, GGA_Result_Data.longitude, GGA_Result_Data.lon_dir);
 80021b8:	f89d 217c 	ldrb.w	r2, [sp, #380]	@ 0x17c
				LogBuf.TreeSN = current_TreeNo;
 80021bc:	881b      	ldrh	r3, [r3, #0]
				FormatLongitude(LogBuf.Lng, GGA_Result_Data.longitude, GGA_Result_Data.lon_dir);
 80021be:	a95c      	add	r1, sp, #368	@ 0x170
				LogBuf.TreeSN = current_TreeNo;
 80021c0:	f8ad 30b0 	strh.w	r3, [sp, #176]	@ 0xb0
				LogBuf.TreeDose = InjectTimes*2;
 80021c4:	4b89      	ldr	r3, [pc, #548]	@ (80023ec <SDCard_Write_log+0x2fc>)
				FormatLongitude(LogBuf.Lng, GGA_Result_Data.longitude, GGA_Result_Data.lon_dir);
 80021c6:	a82d      	add	r0, sp, #180	@ 0xb4
				LogBuf.TreeDose = InjectTimes*2;
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	f8ad 30b2 	strh.w	r3, [sp, #178]	@ 0xb2
				FormatLongitude(LogBuf.Lng, GGA_Result_Data.longitude, GGA_Result_Data.lon_dir);
 80021d0:	f7ff fa82 	bl	80016d8 <FormatLongitude>
				FormatLatitude(LogBuf.Lat, GGA_Result_Data.latitude, GGA_Result_Data.lat_dir);
 80021d4:	f89d 216f 	ldrb.w	r2, [sp, #367]	@ 0x16f
 80021d8:	f20d 1163 	addw	r1, sp, #355	@ 0x163
 80021dc:	f10d 00be 	add.w	r0, sp, #190	@ 0xbe
 80021e0:	f7ff faa4 	bl	800172c <FormatLatitude>
				FormatAltitude(LogBuf.Alt, GGA_Result_Data.altitude);
 80021e4:	9860      	ldr	r0, [sp, #384]	@ 0x180
 80021e6:	f7fe f929 	bl	800043c <__aeabi_f2d>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	a832      	add	r0, sp, #200	@ 0xc8
 80021f0:	f7ff faca 	bl	8001788 <FormatAltitude>
				LogBuf.CumDose = total_inject_Dosage;
 80021f4:	4b7e      	ldr	r3, [pc, #504]	@ (80023f0 <SDCard_Write_log+0x300>)
				LogBuf.CumQuty = total_Times;

				AD24C02_Write2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);
 80021f6:	4621      	mov	r1, r4
				LogBuf.CumDose = total_inject_Dosage;
 80021f8:	881b      	ldrh	r3, [r3, #0]
				AD24C02_Write2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);
 80021fa:	2050      	movs	r0, #80	@ 0x50
				LogBuf.CumDose = total_inject_Dosage;
 80021fc:	f8ad 30d0 	strh.w	r3, [sp, #208]	@ 0xd0
				LogBuf.CumQuty = total_Times;
 8002200:	4b7c      	ldr	r3, [pc, #496]	@ (80023f4 <SDCard_Write_log+0x304>)
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	f8ad 30d2 	strh.w	r3, [sp, #210]	@ 0xd2
				AD24C02_Write2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);
 8002208:	f7fe ffe8 	bl	80011dc <AD24C02_Write2Byte>
//				printf("\r\n");

//				printf("%04d,",LogBuf.No);//第1列：序号 0001
				sprintf(write_bf,"%4d,",LogBuf.No);
 800220c:	f8bd 2098 	ldrh.w	r2, [sp, #152]	@ 0x98
 8002210:	4979      	ldr	r1, [pc, #484]	@ (80023f8 <SDCard_Write_log+0x308>)
 8002212:	a819      	add	r0, sp, #100	@ 0x64
 8002214:	f008 fc76 	bl	800ab04 <siprintf>
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 8002218:	a819      	add	r0, sp, #100	@ 0x64
 800221a:	f7fd ffa3 	bl	8000164 <strlen>
 800221e:	a919      	add	r1, sp, #100	@ 0x64
 8002220:	4602      	mov	r2, r0
 8002222:	a80d      	add	r0, sp, #52	@ 0x34
 8002224:	f7ff fe96 	bl	8001f54 <f_write_retry>
				if (ret != FR_OK) {
 8002228:	b148      	cbz	r0, 800223e <SDCard_Write_log+0x14e>
//				    printf("Write failed: %d\n", ret);
				    f_close(&fp);
 800222a:	a80d      	add	r0, sp, #52	@ 0x34
 800222c:	f002 f91c 	bl	8004468 <f_close>
      return 1;
 8002230:	2001      	movs	r0, #1
 8002232:	e0ba      	b.n	80023aa <SDCard_Write_log+0x2ba>
    	sprintf(file_name_buf,"250101");
 8002234:	4971      	ldr	r1, [pc, #452]	@ (80023fc <SDCard_Write_log+0x30c>)
 8002236:	a808      	add	r0, sp, #32
 8002238:	f008 fdd3 	bl	800ade2 <strcpy>
 800223c:	e77b      	b.n	8002136 <SDCard_Write_log+0x46>
				    return 1;
				}
//				memset(write_bf,'\0',sizeof(write_bf));

				if(GGA_Result_Data.fix_status == 1){
 800223e:	f89d 317d 	ldrb.w	r3, [sp, #381]	@ 0x17d
 8002242:	2b01      	cmp	r3, #1
 8002244:	f040 80b6 	bne.w	80023b4 <SDCard_Write_log+0x2c4>
//					printf("%s,",LogBuf.Date);//第2列：日期 2025/02/25
					sprintf(write_bf,"%s,",LogBuf.Date);//第2列：日期 2025/02/25
 8002248:	496d      	ldr	r1, [pc, #436]	@ (8002400 <SDCard_Write_log+0x310>)
 800224a:	f10d 029a 	add.w	r2, sp, #154	@ 0x9a
 800224e:	a819      	add	r0, sp, #100	@ 0x64
 8002250:	f008 fc58 	bl	800ab04 <siprintf>
				}
				else{
//					printf("2025/01/01,");//第2列：日期 2025/01/01
					sprintf(write_bf,"2025/01/01,");//第2列：日期 2025/01/01
				}
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 8002254:	a819      	add	r0, sp, #100	@ 0x64
 8002256:	f7fd ff85 	bl	8000164 <strlen>
 800225a:	a919      	add	r1, sp, #100	@ 0x64
 800225c:	4602      	mov	r2, r0
 800225e:	a80d      	add	r0, sp, #52	@ 0x34
 8002260:	f7ff fe78 	bl	8001f54 <f_write_retry>
				if (ret != FR_OK) {
 8002264:	2800      	cmp	r0, #0
 8002266:	d1e0      	bne.n	800222a <SDCard_Write_log+0x13a>
				    f_close(&fp);
				    return 1;
				}
//				memset(write_bf,'\0',sizeof(write_bf));

				if(GGA_Result_Data.fix_status == 1){
 8002268:	f89d 317d 	ldrb.w	r3, [sp, #381]	@ 0x17d
 800226c:	2b01      	cmp	r3, #1
 800226e:	f040 80a6 	bne.w	80023be <SDCard_Write_log+0x2ce>
//					printf("%s,",LogBuf.Time);//第3列：时间 18:21:21
					sprintf(write_bf,"%s,",LogBuf.Time);//第3列：时间 18:21:21
 8002272:	4963      	ldr	r1, [pc, #396]	@ (8002400 <SDCard_Write_log+0x310>)
 8002274:	f10d 02a5 	add.w	r2, sp, #165	@ 0xa5
 8002278:	a819      	add	r0, sp, #100	@ 0x64
 800227a:	f008 fc43 	bl	800ab04 <siprintf>
				}
				else{
//					printf("12:00:00,");//第3列：时间 12:00:00
					sprintf(write_bf,"12:00:00,");//第3列：时间 12:00:00
				}
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 800227e:	a819      	add	r0, sp, #100	@ 0x64
 8002280:	f7fd ff70 	bl	8000164 <strlen>
 8002284:	a919      	add	r1, sp, #100	@ 0x64
 8002286:	4602      	mov	r2, r0
 8002288:	a80d      	add	r0, sp, #52	@ 0x34
 800228a:	f7ff fe63 	bl	8001f54 <f_write_retry>
				if (ret != FR_OK) {
 800228e:	2800      	cmp	r0, #0
 8002290:	d1cb      	bne.n	800222a <SDCard_Write_log+0x13a>
				    return 1;
				}
//				memset(write_bf,'\0',sizeof(write_bf));

//				printf("%04d,",LogBuf.TreeSN);//第4列：序号 0001
				sprintf(write_bf,"%4d,",LogBuf.TreeSN);
 8002292:	f8bd 20b0 	ldrh.w	r2, [sp, #176]	@ 0xb0
 8002296:	4958      	ldr	r1, [pc, #352]	@ (80023f8 <SDCard_Write_log+0x308>)
 8002298:	a819      	add	r0, sp, #100	@ 0x64
 800229a:	f008 fc33 	bl	800ab04 <siprintf>
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 800229e:	a819      	add	r0, sp, #100	@ 0x64
 80022a0:	f7fd ff60 	bl	8000164 <strlen>
 80022a4:	a919      	add	r1, sp, #100	@ 0x64
 80022a6:	4602      	mov	r2, r0
 80022a8:	a80d      	add	r0, sp, #52	@ 0x34
 80022aa:	f7ff fe53 	bl	8001f54 <f_write_retry>
				if (ret != FR_OK) {
 80022ae:	2800      	cmp	r0, #0
 80022b0:	d1bb      	bne.n	800222a <SDCard_Write_log+0x13a>
				    return 1;
				}
//				memset(write_bf,'\0',sizeof(write_bf));

//				printf("%d,",LogBuf.TreeDose);//第5列：注射剂量 30
				sprintf(write_bf,"%d,",LogBuf.TreeDose);
 80022b2:	f8bd 20b2 	ldrh.w	r2, [sp, #178]	@ 0xb2
 80022b6:	4953      	ldr	r1, [pc, #332]	@ (8002404 <SDCard_Write_log+0x314>)
 80022b8:	a819      	add	r0, sp, #100	@ 0x64
 80022ba:	f008 fc23 	bl	800ab04 <siprintf>
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 80022be:	a819      	add	r0, sp, #100	@ 0x64
 80022c0:	f7fd ff50 	bl	8000164 <strlen>
 80022c4:	a919      	add	r1, sp, #100	@ 0x64
 80022c6:	4602      	mov	r2, r0
 80022c8:	a80d      	add	r0, sp, #52	@ 0x34
 80022ca:	f7ff fe43 	bl	8001f54 <f_write_retry>
				if (ret != FR_OK) {
 80022ce:	2800      	cmp	r0, #0
 80022d0:	d1ab      	bne.n	800222a <SDCard_Write_log+0x13a>
				    f_close(&fp);
				    return 1;
				}
//				memset(write_bf,'\0',sizeof(write_bf));

				if(GGA_Result_Data.fix_status == 1){
 80022d2:	f89d 317d 	ldrb.w	r3, [sp, #381]	@ 0x17d
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d176      	bne.n	80023c8 <SDCard_Write_log+0x2d8>
//					printf("%s,",LogBuf.Lng);//第6列：经度 E118°48'
					sprintf(write_bf,"%s,",LogBuf.Lng);//第6列：经度 E118°48'
 80022da:	4949      	ldr	r1, [pc, #292]	@ (8002400 <SDCard_Write_log+0x310>)
 80022dc:	aa2d      	add	r2, sp, #180	@ 0xb4
 80022de:	a819      	add	r0, sp, #100	@ 0x64
 80022e0:	f008 fc10 	bl	800ab04 <siprintf>
				}
				else{
//					printf("E118°48',");//第6列：经度 E118°48'
					sprintf(write_bf,"E119°06',");//第6列：经度 E118°48
				}
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 80022e4:	a819      	add	r0, sp, #100	@ 0x64
 80022e6:	f7fd ff3d 	bl	8000164 <strlen>
 80022ea:	a919      	add	r1, sp, #100	@ 0x64
 80022ec:	4602      	mov	r2, r0
 80022ee:	a80d      	add	r0, sp, #52	@ 0x34
 80022f0:	f7ff fe30 	bl	8001f54 <f_write_retry>
				if (ret != FR_OK) {
 80022f4:	2800      	cmp	r0, #0
 80022f6:	d198      	bne.n	800222a <SDCard_Write_log+0x13a>
				    f_close(&fp);
				    return 1;
				}
//				memset(write_bf,'\0',sizeof(write_bf));

				if(GGA_Result_Data.fix_status == 1){
 80022f8:	f89d 317d 	ldrb.w	r3, [sp, #381]	@ 0x17d
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	f040 808b 	bne.w	8002418 <SDCard_Write_log+0x328>
//					printf("%s,",LogBuf.Lat);//第7列：纬度 N31°50'
					sprintf(write_bf,"%s,",LogBuf.Lat);//第7列：纬度 N31°50'
 8002302:	493f      	ldr	r1, [pc, #252]	@ (8002400 <SDCard_Write_log+0x310>)
 8002304:	f10d 02be 	add.w	r2, sp, #190	@ 0xbe
 8002308:	a819      	add	r0, sp, #100	@ 0x64
 800230a:	f008 fbfb 	bl	800ab04 <siprintf>
				}
				else{
//					printf("N31°50',");//第7列：纬度 N31°50'
					sprintf(write_bf,"N33°36',");//第7列：纬度 N31°50'
				}
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 800230e:	a819      	add	r0, sp, #100	@ 0x64
 8002310:	f7fd ff28 	bl	8000164 <strlen>
 8002314:	a919      	add	r1, sp, #100	@ 0x64
 8002316:	4602      	mov	r2, r0
 8002318:	a80d      	add	r0, sp, #52	@ 0x34
 800231a:	f7ff fe1b 	bl	8001f54 <f_write_retry>
				if (ret != FR_OK) {
 800231e:	2800      	cmp	r0, #0
 8002320:	d183      	bne.n	800222a <SDCard_Write_log+0x13a>
				    f_close(&fp);
				    return 1;
				}
//				memset(write_bf,'\0',sizeof(write_bf));

				if(GGA_Result_Data.fix_status == 1){
 8002322:	f89d 317d 	ldrb.w	r3, [sp, #381]	@ 0x17d
 8002326:	2b01      	cmp	r3, #1
 8002328:	d17b      	bne.n	8002422 <SDCard_Write_log+0x332>
//					printf("%s,",LogBuf.Alt);//第8列：海拔 88.9
					sprintf(write_bf,"%s,",LogBuf.Alt);//第8列：海拔 88.9
 800232a:	4935      	ldr	r1, [pc, #212]	@ (8002400 <SDCard_Write_log+0x310>)
 800232c:	aa32      	add	r2, sp, #200	@ 0xc8
 800232e:	a819      	add	r0, sp, #100	@ 0x64
 8002330:	f008 fbe8 	bl	800ab04 <siprintf>
				}
				else{
//					printf("88.9,");//第8列：海拔 88.9
					sprintf(write_bf,"28.0,");//第8列：海拔 88.9
				}
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 8002334:	a819      	add	r0, sp, #100	@ 0x64
 8002336:	f7fd ff15 	bl	8000164 <strlen>
 800233a:	a919      	add	r1, sp, #100	@ 0x64
 800233c:	4602      	mov	r2, r0
 800233e:	a80d      	add	r0, sp, #52	@ 0x34
 8002340:	f7ff fe08 	bl	8001f54 <f_write_retry>
				if (ret != FR_OK) {
 8002344:	2800      	cmp	r0, #0
 8002346:	f47f af70 	bne.w	800222a <SDCard_Write_log+0x13a>
				    return 1;
				}
//				memset(write_bf,'\0',sizeof(write_bf));

//				printf("%d,",LogBuf.CumDose);//第9列，累计剂量 892
				sprintf(write_bf,"%d,",LogBuf.CumDose);
 800234a:	f8bd 20d0 	ldrh.w	r2, [sp, #208]	@ 0xd0
 800234e:	492d      	ldr	r1, [pc, #180]	@ (8002404 <SDCard_Write_log+0x314>)
 8002350:	a819      	add	r0, sp, #100	@ 0x64
 8002352:	f008 fbd7 	bl	800ab04 <siprintf>
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 8002356:	a819      	add	r0, sp, #100	@ 0x64
 8002358:	f7fd ff04 	bl	8000164 <strlen>
 800235c:	a919      	add	r1, sp, #100	@ 0x64
 800235e:	4602      	mov	r2, r0
 8002360:	a80d      	add	r0, sp, #52	@ 0x34
 8002362:	f7ff fdf7 	bl	8001f54 <f_write_retry>
				if (ret != FR_OK) {
 8002366:	2800      	cmp	r0, #0
 8002368:	f47f af5f 	bne.w	800222a <SDCard_Write_log+0x13a>
				    return 1;
				}
//				memset(write_bf,'\0',sizeof(write_bf));

//				printf("%d\r\n",LogBuf.CumQuty);//第10列，累计数量 112
				sprintf(write_bf,"%d\r\n",LogBuf.CumQuty);
 800236c:	f8bd 20d2 	ldrh.w	r2, [sp, #210]	@ 0xd2
 8002370:	4925      	ldr	r1, [pc, #148]	@ (8002408 <SDCard_Write_log+0x318>)
 8002372:	a819      	add	r0, sp, #100	@ 0x64
 8002374:	f008 fbc6 	bl	800ab04 <siprintf>
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 8002378:	a819      	add	r0, sp, #100	@ 0x64
 800237a:	f7fd fef3 	bl	8000164 <strlen>
 800237e:	a919      	add	r1, sp, #100	@ 0x64
 8002380:	4602      	mov	r2, r0
 8002382:	a80d      	add	r0, sp, #52	@ 0x34
 8002384:	f7ff fde6 	bl	8001f54 <f_write_retry>
				if (ret != FR_OK) {
 8002388:	4601      	mov	r1, r0
 800238a:	2800      	cmp	r0, #0
 800238c:	f47f af4d 	bne.w	800222a <SDCard_Write_log+0x13a>
//				    printf("Write failed: %d\n", ret);
				    f_close(&fp);
				    return 1;
				}
				memset(write_bf,'\0',sizeof(write_bf));
 8002390:	2232      	movs	r2, #50	@ 0x32
 8002392:	a819      	add	r0, sp, #100	@ 0x64
 8002394:	f008 fc29 	bl	800abea <memset>

				f_sync(&fp);
 8002398:	a80d      	add	r0, sp, #52	@ 0x34
 800239a:	f002 f82f 	bl	80043fc <f_sync>

        ret = f_close(&fp);
 800239e:	a80d      	add	r0, sp, #52	@ 0x34
 80023a0:	f002 f862 	bl	8004468 <f_close>
        if(ret != FR_OK)
 80023a4:	2800      	cmp	r0, #0
 80023a6:	f47f af43 	bne.w	8002230 <SDCard_Write_log+0x140>
	}
	else
	{
		return -1;//没发现SDCard
	}
}
 80023aa:	b051      	add	sp, #324	@ 0x144
 80023ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80023b0:	b004      	add	sp, #16
 80023b2:	4770      	bx	lr
					sprintf(write_bf,"2025/01/01,");//第2列：日期 2025/01/01
 80023b4:	4915      	ldr	r1, [pc, #84]	@ (800240c <SDCard_Write_log+0x31c>)
 80023b6:	a819      	add	r0, sp, #100	@ 0x64
 80023b8:	f008 fd13 	bl	800ade2 <strcpy>
 80023bc:	e74a      	b.n	8002254 <SDCard_Write_log+0x164>
					sprintf(write_bf,"12:00:00,");//第3列：时间 12:00:00
 80023be:	4914      	ldr	r1, [pc, #80]	@ (8002410 <SDCard_Write_log+0x320>)
 80023c0:	a819      	add	r0, sp, #100	@ 0x64
 80023c2:	f008 fd0e 	bl	800ade2 <strcpy>
 80023c6:	e75a      	b.n	800227e <SDCard_Write_log+0x18e>
					sprintf(write_bf,"E119°06',");//第6列：经度 E118°48
 80023c8:	4912      	ldr	r1, [pc, #72]	@ (8002414 <SDCard_Write_log+0x324>)
 80023ca:	a819      	add	r0, sp, #100	@ 0x64
 80023cc:	f008 fd09 	bl	800ade2 <strcpy>
 80023d0:	e788      	b.n	80022e4 <SDCard_Write_log+0x1f4>
 80023d2:	bf00      	nop
 80023d4:	200007bc 	.word	0x200007bc
 80023d8:	20000228 	.word	0x20000228
 80023dc:	0800d903 	.word	0x0800d903
 80023e0:	0800d911 	.word	0x0800d911
 80023e4:	200007b8 	.word	0x200007b8
 80023e8:	200008b2 	.word	0x200008b2
 80023ec:	20000935 	.word	0x20000935
 80023f0:	20000a40 	.word	0x20000a40
 80023f4:	20000a3e 	.word	0x20000a3e
 80023f8:	0800d97c 	.word	0x0800d97c
 80023fc:	0800d8fc 	.word	0x0800d8fc
 8002400:	0800d981 	.word	0x0800d981
 8002404:	0800d99b 	.word	0x0800d99b
 8002408:	0800d9ba 	.word	0x0800d9ba
 800240c:	0800d985 	.word	0x0800d985
 8002410:	0800d991 	.word	0x0800d991
 8002414:	0800d99f 	.word	0x0800d99f
					sprintf(write_bf,"N33°36',");//第7列：纬度 N31°50'
 8002418:	4906      	ldr	r1, [pc, #24]	@ (8002434 <SDCard_Write_log+0x344>)
 800241a:	a819      	add	r0, sp, #100	@ 0x64
 800241c:	f008 fce1 	bl	800ade2 <strcpy>
 8002420:	e775      	b.n	800230e <SDCard_Write_log+0x21e>
					sprintf(write_bf,"28.0,");//第8列：海拔 88.9
 8002422:	4905      	ldr	r1, [pc, #20]	@ (8002438 <SDCard_Write_log+0x348>)
 8002424:	a819      	add	r0, sp, #100	@ 0x64
 8002426:	f008 fcdc 	bl	800ade2 <strcpy>
 800242a:	e783      	b.n	8002334 <SDCard_Write_log+0x244>
		return -1;//没发现SDCard
 800242c:	f04f 30ff 	mov.w	r0, #4294967295
 8002430:	e7bb      	b.n	80023aa <SDCard_Write_log+0x2ba>
 8002432:	bf00      	nop
 8002434:	0800d9aa 	.word	0x0800d9aa
 8002438:	0800d9b4 	.word	0x0800d9b4

0800243c <SD_WriteByte>:
//  /*!< Return the byte read from the SPI bus */
//  return SPI_I2S_ReceiveData(SD_SPI);
//}

// SPI单字节传输
uint8_t SD_WriteByte(uint8_t data) {
 800243c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t rx;
  HAL_SPI_TransmitReceive(&hspi1, &data, &rx, 1, 100);
 800243e:	2364      	movs	r3, #100	@ 0x64
uint8_t SD_WriteByte(uint8_t data) {
 8002440:	f88d 000f 	strb.w	r0, [sp, #15]
  HAL_SPI_TransmitReceive(&hspi1, &data, &rx, 1, 100);
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	f10d 0217 	add.w	r2, sp, #23
 800244a:	2301      	movs	r3, #1
 800244c:	f10d 010f 	add.w	r1, sp, #15
 8002450:	4803      	ldr	r0, [pc, #12]	@ (8002460 <SD_WriteByte+0x24>)
 8002452:	f005 fddb 	bl	800800c <HAL_SPI_TransmitReceive>
  return rx;
}
 8002456:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800245a:	b007      	add	sp, #28
 800245c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002460:	20000938 	.word	0x20000938

08002464 <SD_SendCmd>:
{
 8002464:	b537      	push	{r0, r1, r2, r4, r5, lr}
  for (i = 0; i < 6; i++)
 8002466:	2400      	movs	r4, #0
 8002468:	466d      	mov	r5, sp
  Frame[1] = (uint8_t)(Arg >> 24); /*!< Construct byte 2 */
 800246a:	0e0b      	lsrs	r3, r1, #24
 800246c:	f88d 3001 	strb.w	r3, [sp, #1]
  Frame[2] = (uint8_t)(Arg >> 16); /*!< Construct byte 3 */
 8002470:	0c0b      	lsrs	r3, r1, #16
  Frame[0] = (Cmd | 0x40); /*!< Construct byte 1 */
 8002472:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
  Frame[2] = (uint8_t)(Arg >> 16); /*!< Construct byte 3 */
 8002476:	f88d 3002 	strb.w	r3, [sp, #2]
  Frame[3] = (uint8_t)(Arg >> 8); /*!< Construct byte 4 */
 800247a:	0a0b      	lsrs	r3, r1, #8
  Frame[0] = (Cmd | 0x40); /*!< Construct byte 1 */
 800247c:	f88d 0000 	strb.w	r0, [sp]
  Frame[3] = (uint8_t)(Arg >> 8); /*!< Construct byte 4 */
 8002480:	f88d 3003 	strb.w	r3, [sp, #3]
  Frame[4] = (uint8_t)(Arg); /*!< Construct byte 5 */
 8002484:	f88d 1004 	strb.w	r1, [sp, #4]
  Frame[5] = (Crc); /*!< Construct CRC: byte 6 */
 8002488:	f88d 2005 	strb.w	r2, [sp, #5]
    SD_WriteByte(Frame[i]); /*!< Send the Cmd bytes */
 800248c:	f815 0b01 	ldrb.w	r0, [r5], #1
  for (i = 0; i < 6; i++)
 8002490:	3401      	adds	r4, #1
    SD_WriteByte(Frame[i]); /*!< Send the Cmd bytes */
 8002492:	f7ff ffd3 	bl	800243c <SD_WriteByte>
  for (i = 0; i < 6; i++)
 8002496:	2c06      	cmp	r4, #6
 8002498:	d1f8      	bne.n	800248c <SD_SendCmd+0x28>
}
 800249a:	b003      	add	sp, #12
 800249c:	bd30      	pop	{r4, r5, pc}

0800249e <SD_ReadByte>:
  */
uint8_t SD_ReadByte(void)
{
  uint8_t Data = 0;

  Data = SD_WriteByte(SD_DUMMY_BYTE);
 800249e:	20ff      	movs	r0, #255	@ 0xff
 80024a0:	f7ff bfcc 	b.w	800243c <SD_WriteByte>

080024a4 <SD_GetDataResponse>:
{
 80024a4:	b538      	push	{r3, r4, r5, lr}
 80024a6:	2541      	movs	r5, #65	@ 0x41
    response = SD_ReadByte();
 80024a8:	f7ff fff9 	bl	800249e <SD_ReadByte>
    response &= 0x1F;
 80024ac:	f000 041f 	and.w	r4, r0, #31
    switch (response)
 80024b0:	2c0b      	cmp	r4, #11
 80024b2:	d009      	beq.n	80024c8 <SD_GetDataResponse+0x24>
 80024b4:	2c0d      	cmp	r4, #13
 80024b6:	d007      	beq.n	80024c8 <SD_GetDataResponse+0x24>
 80024b8:	2c05      	cmp	r4, #5
 80024ba:	d001      	beq.n	80024c0 <SD_GetDataResponse+0x1c>
  while (i <= 64)
 80024bc:	3d01      	subs	r5, #1
 80024be:	d1f3      	bne.n	80024a8 <SD_GetDataResponse+0x4>
  while (SD_ReadByte() == 0);
 80024c0:	f7ff ffed 	bl	800249e <SD_ReadByte>
 80024c4:	2800      	cmp	r0, #0
 80024c6:	d0fb      	beq.n	80024c0 <SD_GetDataResponse+0x1c>
}
 80024c8:	4620      	mov	r0, r4
 80024ca:	bd38      	pop	{r3, r4, r5, pc}

080024cc <SD_GetResponse>:
{
 80024cc:	b538      	push	{r3, r4, r5, lr}
 80024ce:	4605      	mov	r5, r0
  uint32_t Count = 0xFFF;
 80024d0:	f640 74ff 	movw	r4, #4095	@ 0xfff
  while ((SD_ReadByte() != Response) && Count)
 80024d4:	f7ff ffe3 	bl	800249e <SD_ReadByte>
 80024d8:	42a8      	cmp	r0, r5
 80024da:	d000      	beq.n	80024de <SD_GetResponse+0x12>
 80024dc:	b92c      	cbnz	r4, 80024ea <SD_GetResponse+0x1e>
  if (Count == 0)
 80024de:	fab4 f484 	clz	r4, r4
 80024e2:	0964      	lsrs	r4, r4, #5
 80024e4:	4264      	negs	r4, r4
}
 80024e6:	b2e0      	uxtb	r0, r4
 80024e8:	bd38      	pop	{r3, r4, r5, pc}
    Count--;
 80024ea:	3c01      	subs	r4, #1
 80024ec:	e7f2      	b.n	80024d4 <SD_GetResponse+0x8>
	...

080024f0 <SD_GoIdleState>:
{
 80024f0:	b510      	push	{r4, lr}
  SD_CS_LOW();
 80024f2:	2200      	movs	r2, #0
 80024f4:	2110      	movs	r1, #16
 80024f6:	480c      	ldr	r0, [pc, #48]	@ (8002528 <SD_GoIdleState+0x38>)
 80024f8:	f005 f948 	bl	800778c <HAL_GPIO_WritePin>
  SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95);
 80024fc:	2100      	movs	r1, #0
 80024fe:	2295      	movs	r2, #149	@ 0x95
 8002500:	4608      	mov	r0, r1
 8002502:	f7ff ffaf 	bl	8002464 <SD_SendCmd>
  if (SD_GetResponse(SD_IN_IDLE_STATE))
 8002506:	2001      	movs	r0, #1
 8002508:	f7ff ffe0 	bl	80024cc <SD_GetResponse>
 800250c:	4604      	mov	r4, r0
 800250e:	b948      	cbnz	r0, 8002524 <SD_GoIdleState+0x34>
	SD_CS_HIGH();
 8002510:	4805      	ldr	r0, [pc, #20]	@ (8002528 <SD_GoIdleState+0x38>)
 8002512:	2201      	movs	r2, #1
 8002514:	2110      	movs	r1, #16
 8002516:	f005 f939 	bl	800778c <HAL_GPIO_WritePin>
	SD_WriteByte(SD_DUMMY_BYTE);
 800251a:	20ff      	movs	r0, #255	@ 0xff
 800251c:	f7ff ff8e 	bl	800243c <SD_WriteByte>
}
 8002520:	4620      	mov	r0, r4
 8002522:	bd10      	pop	{r4, pc}
    return SD_RESPONSE_FAILURE;
 8002524:	24ff      	movs	r4, #255	@ 0xff
 8002526:	e7fb      	b.n	8002520 <SD_GoIdleState+0x30>
 8002528:	40010800 	.word	0x40010800

0800252c <SD_ReadMultiBlocks>:
{
 800252c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002530:	4615      	mov	r5, r2
	if (SD_Type == SD_TYPE_V2HC)
 8002532:	4a24      	ldr	r2, [pc, #144]	@ (80025c4 <SD_ReadMultiBlocks+0x98>)
{
 8002534:	4606      	mov	r6, r0
	if (SD_Type == SD_TYPE_V2HC)
 8002536:	7812      	ldrb	r2, [r2, #0]
  SD_CS_LOW();
 8002538:	2110      	movs	r1, #16
	if (SD_Type == SD_TYPE_V2HC)
 800253a:	2a04      	cmp	r2, #4
    ReadAddr /= 512;
 800253c:	bf08      	it	eq
 800253e:	0a6d      	lsreq	r5, r5, #9
  SD_CS_LOW();
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	4820      	ldr	r0, [pc, #128]	@ (80025c8 <SD_ReadMultiBlocks+0x9c>)
{
 8002546:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 800254a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
    BlockSize = 512;
 800254c:	bf04      	itt	eq
 800254e:	f44f 7900 	moveq.w	r9, #512	@ 0x200
    ReadAddr /= 512;
 8002552:	ea45 55c3 	orreq.w	r5, r5, r3, lsl #23
  SD_Error rvalue = SD_RESPONSE_FAILURE;
 8002556:	24ff      	movs	r4, #255	@ 0xff
  SD_CS_LOW();
 8002558:	f005 f918 	bl	800778c <HAL_GPIO_WritePin>
  uint32_t i = 0, Offset = 0;
 800255c:	f04f 0800 	mov.w	r8, #0
  while (NumberOfBlocks--)
 8002560:	b957      	cbnz	r7, 8002578 <SD_ReadMultiBlocks+0x4c>
  SD_CS_HIGH();
 8002562:	4819      	ldr	r0, [pc, #100]	@ (80025c8 <SD_ReadMultiBlocks+0x9c>)
 8002564:	2201      	movs	r2, #1
 8002566:	2110      	movs	r1, #16
 8002568:	f005 f910 	bl	800778c <HAL_GPIO_WritePin>
  SD_WriteByte(SD_DUMMY_BYTE);
 800256c:	20ff      	movs	r0, #255	@ 0xff
 800256e:	f7ff ff65 	bl	800243c <SD_WriteByte>
}
 8002572:	4620      	mov	r0, r4
 8002574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SD_SendCmd (SD_CMD_READ_SINGLE_BLOCK, ReadAddr + Offset, 0xFF);
 8002578:	2011      	movs	r0, #17
 800257a:	22ff      	movs	r2, #255	@ 0xff
 800257c:	eb08 0105 	add.w	r1, r8, r5
 8002580:	f7ff ff70 	bl	8002464 <SD_SendCmd>
    if (SD_GetResponse(SD_RESPONSE_NO_ERROR))
 8002584:	2000      	movs	r0, #0
 8002586:	f7ff ffa1 	bl	80024cc <SD_GetResponse>
 800258a:	b9c8      	cbnz	r0, 80025c0 <SD_ReadMultiBlocks+0x94>
    if (!SD_GetResponse(SD_START_DATA_SINGLE_BLOCK_READ))
 800258c:	20fe      	movs	r0, #254	@ 0xfe
 800258e:	f7ff ff9d 	bl	80024cc <SD_GetResponse>
 8002592:	4604      	mov	r4, r0
 8002594:	b990      	cbnz	r0, 80025bc <SD_ReadMultiBlocks+0x90>
 8002596:	eb06 0a09 	add.w	sl, r6, r9
      for (i = 0; i < BlockSize; i++)
 800259a:	4556      	cmp	r6, sl
 800259c:	d109      	bne.n	80025b2 <SD_ReadMultiBlocks+0x86>
      Offset += BlockSize;
 800259e:	44c8      	add	r8, r9
      SD_ReadByte();
 80025a0:	f7ff ff7d 	bl	800249e <SD_ReadByte>
      SD_ReadByte();
 80025a4:	f7ff ff7b 	bl	800249e <SD_ReadByte>
    SD_WriteByte(SD_DUMMY_BYTE);
 80025a8:	20ff      	movs	r0, #255	@ 0xff
 80025aa:	f7ff ff47 	bl	800243c <SD_WriteByte>
 80025ae:	3f01      	subs	r7, #1
 80025b0:	e7d6      	b.n	8002560 <SD_ReadMultiBlocks+0x34>
        *pBuffer = SD_ReadByte();
 80025b2:	f7ff ff74 	bl	800249e <SD_ReadByte>
 80025b6:	f806 0b01 	strb.w	r0, [r6], #1
      for (i = 0; i < BlockSize; i++)
 80025ba:	e7ee      	b.n	800259a <SD_ReadMultiBlocks+0x6e>
      rvalue = SD_RESPONSE_FAILURE;
 80025bc:	24ff      	movs	r4, #255	@ 0xff
 80025be:	e7f3      	b.n	80025a8 <SD_ReadMultiBlocks+0x7c>
      return  SD_RESPONSE_FAILURE;
 80025c0:	24ff      	movs	r4, #255	@ 0xff
 80025c2:	e7d6      	b.n	8002572 <SD_ReadMultiBlocks+0x46>
 80025c4:	20000818 	.word	0x20000818
 80025c8:	40010800 	.word	0x40010800

080025cc <SD_WriteMultiBlocks>:
{
 80025cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025d0:	4615      	mov	r5, r2
	if (SD_Type == SD_TYPE_V2HC)
 80025d2:	4a25      	ldr	r2, [pc, #148]	@ (8002668 <SD_WriteMultiBlocks+0x9c>)
{
 80025d4:	4606      	mov	r6, r0
	if (SD_Type == SD_TYPE_V2HC)
 80025d6:	7812      	ldrb	r2, [r2, #0]
  SD_CS_LOW();
 80025d8:	2110      	movs	r1, #16
	if (SD_Type == SD_TYPE_V2HC)
 80025da:	2a04      	cmp	r2, #4
    WriteAddr /= 512;
 80025dc:	bf08      	it	eq
 80025de:	0a6d      	lsreq	r5, r5, #9
  SD_CS_LOW();
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	4821      	ldr	r0, [pc, #132]	@ (800266c <SD_WriteMultiBlocks+0xa0>)
{
 80025e6:	f8bd 8018 	ldrh.w	r8, [sp, #24]
    WriteAddr /= 512;
 80025ea:	bf04      	itt	eq
 80025ec:	ea45 55c3 	orreq.w	r5, r5, r3, lsl #23
    BlockSize = 512;
 80025f0:	f44f 7800 	moveq.w	r8, #512	@ 0x200
{
 80025f4:	9f07      	ldr	r7, [sp, #28]
  SD_Error rvalue = SD_RESPONSE_FAILURE;
 80025f6:	24ff      	movs	r4, #255	@ 0xff
  SD_CS_LOW();
 80025f8:	f005 f8c8 	bl	800778c <HAL_GPIO_WritePin>
    SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, WriteAddr + Offset, 0xFF);
 80025fc:	1bad      	subs	r5, r5, r6
  while (NumberOfBlocks--)
 80025fe:	b957      	cbnz	r7, 8002616 <SD_WriteMultiBlocks+0x4a>
  SD_CS_HIGH();
 8002600:	481a      	ldr	r0, [pc, #104]	@ (800266c <SD_WriteMultiBlocks+0xa0>)
 8002602:	2201      	movs	r2, #1
 8002604:	2110      	movs	r1, #16
 8002606:	f005 f8c1 	bl	800778c <HAL_GPIO_WritePin>
  SD_WriteByte(SD_DUMMY_BYTE);
 800260a:	20ff      	movs	r0, #255	@ 0xff
 800260c:	f7ff ff16 	bl	800243c <SD_WriteByte>
}
 8002610:	4620      	mov	r0, r4
 8002612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, WriteAddr + Offset, 0xFF);
 8002616:	2018      	movs	r0, #24
 8002618:	22ff      	movs	r2, #255	@ 0xff
 800261a:	1971      	adds	r1, r6, r5
 800261c:	f7ff ff22 	bl	8002464 <SD_SendCmd>
    if (SD_GetResponse(SD_RESPONSE_NO_ERROR))
 8002620:	2000      	movs	r0, #0
 8002622:	f7ff ff53 	bl	80024cc <SD_GetResponse>
 8002626:	b9e0      	cbnz	r0, 8002662 <SD_WriteMultiBlocks+0x96>
    SD_WriteByte(SD_DUMMY_BYTE);
 8002628:	20ff      	movs	r0, #255	@ 0xff
 800262a:	f7ff ff07 	bl	800243c <SD_WriteByte>
    SD_WriteByte(SD_START_DATA_SINGLE_BLOCK_WRITE);
 800262e:	20fe      	movs	r0, #254	@ 0xfe
 8002630:	f7ff ff04 	bl	800243c <SD_WriteByte>
    for (i = 0; i < BlockSize; i++)
 8002634:	4634      	mov	r4, r6
 8002636:	4446      	add	r6, r8
 8002638:	42b4      	cmp	r4, r6
 800263a:	d10d      	bne.n	8002658 <SD_WriteMultiBlocks+0x8c>
    SD_ReadByte();
 800263c:	f7ff ff2f 	bl	800249e <SD_ReadByte>
    SD_ReadByte();
 8002640:	f7ff ff2d 	bl	800249e <SD_ReadByte>
    if (SD_GetDataResponse() == SD_DATA_OK)
 8002644:	f7ff ff2e 	bl	80024a4 <SD_GetDataResponse>
 8002648:	4626      	mov	r6, r4
 800264a:	1f44      	subs	r4, r0, #5
 800264c:	bf18      	it	ne
 800264e:	f04f 34ff 	movne.w	r4, #4294967295
 8002652:	3f01      	subs	r7, #1
 8002654:	b2e4      	uxtb	r4, r4
 8002656:	e7d2      	b.n	80025fe <SD_WriteMultiBlocks+0x32>
      SD_WriteByte(*pBuffer);
 8002658:	f814 0b01 	ldrb.w	r0, [r4], #1
 800265c:	f7ff feee 	bl	800243c <SD_WriteByte>
    for (i = 0; i < BlockSize; i++)
 8002660:	e7ea      	b.n	8002638 <SD_WriteMultiBlocks+0x6c>
      return SD_RESPONSE_FAILURE;
 8002662:	24ff      	movs	r4, #255	@ 0xff
 8002664:	e7d4      	b.n	8002610 <SD_WriteMultiBlocks+0x44>
 8002666:	bf00      	nop
 8002668:	20000818 	.word	0x20000818
 800266c:	40010800 	.word	0x40010800

08002670 <SD_GetCSDRegister>:
{
 8002670:	b5f0      	push	{r4, r5, r6, r7, lr}
  SD_CS_LOW();
 8002672:	2200      	movs	r2, #0
{
 8002674:	b085      	sub	sp, #20
  SD_CS_LOW();
 8002676:	2110      	movs	r1, #16
{
 8002678:	4604      	mov	r4, r0
  SD_CS_LOW();
 800267a:	4879      	ldr	r0, [pc, #484]	@ (8002860 <SD_GetCSDRegister+0x1f0>)
 800267c:	f005 f886 	bl	800778c <HAL_GPIO_WritePin>
  SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF);
 8002680:	22ff      	movs	r2, #255	@ 0xff
 8002682:	2100      	movs	r1, #0
 8002684:	2009      	movs	r0, #9
 8002686:	f7ff feed 	bl	8002464 <SD_SendCmd>
  if (!SD_GetResponse(SD_RESPONSE_NO_ERROR))
 800268a:	2000      	movs	r0, #0
 800268c:	f7ff ff1e 	bl	80024cc <SD_GetResponse>
 8002690:	4605      	mov	r5, r0
 8002692:	2800      	cmp	r0, #0
 8002694:	f040 80cd 	bne.w	8002832 <SD_GetCSDRegister+0x1c2>
    if (!SD_GetResponse(SD_START_DATA_SINGLE_BLOCK_READ))
 8002698:	20fe      	movs	r0, #254	@ 0xfe
 800269a:	f7ff ff17 	bl	80024cc <SD_GetResponse>
 800269e:	2800      	cmp	r0, #0
 80026a0:	f000 80bd 	beq.w	800281e <SD_GetCSDRegister+0x1ae>
    SD_WriteByte(SD_DUMMY_BYTE);
 80026a4:	20ff      	movs	r0, #255	@ 0xff
 80026a6:	f7ff fec9 	bl	800243c <SD_WriteByte>
    SD_WriteByte(SD_DUMMY_BYTE);
 80026aa:	20ff      	movs	r0, #255	@ 0xff
 80026ac:	f7ff fec6 	bl	800243c <SD_WriteByte>
  SD_CS_HIGH();
 80026b0:	2201      	movs	r2, #1
 80026b2:	2110      	movs	r1, #16
 80026b4:	486a      	ldr	r0, [pc, #424]	@ (8002860 <SD_GetCSDRegister+0x1f0>)
 80026b6:	f005 f869 	bl	800778c <HAL_GPIO_WritePin>
  SD_WriteByte(SD_DUMMY_BYTE);
 80026ba:	20ff      	movs	r0, #255	@ 0xff
 80026bc:	f7ff febe 	bl	800243c <SD_WriteByte>
  SD_csd->CSDStruct = (CSD_Tab[0] & 0xC0) >> 6;
 80026c0:	f89d 3000 	ldrb.w	r3, [sp]
 80026c4:	099a      	lsrs	r2, r3, #6
 80026c6:	7022      	strb	r2, [r4, #0]
  SD_csd->SysSpecVersion = (CSD_Tab[0] & 0x3C) >> 2;
 80026c8:	f3c3 0283 	ubfx	r2, r3, #2, #4
  SD_csd->Reserved1 = CSD_Tab[0] & 0x03;
 80026cc:	f003 0303 	and.w	r3, r3, #3
  SD_csd->SysSpecVersion = (CSD_Tab[0] & 0x3C) >> 2;
 80026d0:	7062      	strb	r2, [r4, #1]
  SD_csd->Reserved1 = CSD_Tab[0] & 0x03;
 80026d2:	70a3      	strb	r3, [r4, #2]
  SD_csd->TAAC = CSD_Tab[1];
 80026d4:	f89d 3001 	ldrb.w	r3, [sp, #1]
  SD_csd->CardComdClasses |= (CSD_Tab[5] & 0xF0) >> 4;
 80026d8:	f89d 2005 	ldrb.w	r2, [sp, #5]
  SD_csd->TAAC = CSD_Tab[1];
 80026dc:	70e3      	strb	r3, [r4, #3]
  SD_csd->NSAC = CSD_Tab[2];
 80026de:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80026e2:	7123      	strb	r3, [r4, #4]
  SD_csd->MaxBusClkFrec = CSD_Tab[3];
 80026e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80026e8:	7163      	strb	r3, [r4, #5]
  SD_csd->CardComdClasses = CSD_Tab[4] << 4;
 80026ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	80e3      	strh	r3, [r4, #6]
  SD_csd->CardComdClasses |= (CSD_Tab[5] & 0xF0) >> 4;
 80026f2:	88e3      	ldrh	r3, [r4, #6]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 80026fa:	80e3      	strh	r3, [r4, #6]
  SD_csd->PartBlockRead = (CSD_Tab[6] & 0x80) >> 7;
 80026fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
  SD_csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 8002700:	f002 020f 	and.w	r2, r2, #15
 8002704:	7222      	strb	r2, [r4, #8]
  SD_csd->PartBlockRead = (CSD_Tab[6] & 0x80) >> 7;
 8002706:	09da      	lsrs	r2, r3, #7
 8002708:	7262      	strb	r2, [r4, #9]
  SD_csd->WrBlockMisalign = (CSD_Tab[6] & 0x40) >> 6;
 800270a:	f3c3 1280 	ubfx	r2, r3, #6, #1
 800270e:	72a2      	strb	r2, [r4, #10]
  SD_csd->RdBlockMisalign = (CSD_Tab[6] & 0x20) >> 5;
 8002710:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8002714:	72e2      	strb	r2, [r4, #11]
  SD_csd->DSRImpl = (CSD_Tab[6] & 0x10) >> 4;
 8002716:	f3c3 1200 	ubfx	r2, r3, #4, #1
 800271a:	7322      	strb	r2, [r4, #12]
  SD_csd->Reserved2 = 0; /*!< Reserved */
 800271c:	2200      	movs	r2, #0
  SD_csd->DeviceSize = (CSD_Tab[6] & 0x03) << 10;
 800271e:	029b      	lsls	r3, r3, #10
 8002720:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
  SD_csd->Reserved2 = 0; /*!< Reserved */
 8002724:	7362      	strb	r2, [r4, #13]
  SD_csd->DeviceSize = (CSD_Tab[6] & 0x03) << 10;
 8002726:	6123      	str	r3, [r4, #16]
  if ((SD_Type == SD_TYPE_V1) || (SD_Type == SD_TYPE_V2))
 8002728:	4b4e      	ldr	r3, [pc, #312]	@ (8002864 <SD_GetCSDRegister+0x1f4>)
 800272a:	781a      	ldrb	r2, [r3, #0]
		SD_csd->DeviceSizeMul |= (CSD_Tab[10] & 0x80) >> 7;
 800272c:	f89d 300a 	ldrb.w	r3, [sp, #10]
  if ((SD_Type == SD_TYPE_V1) || (SD_Type == SD_TYPE_V2))
 8002730:	1e51      	subs	r1, r2, #1
 8002732:	2901      	cmp	r1, #1
 8002734:	d87f      	bhi.n	8002836 <SD_GetCSDRegister+0x1c6>
		SD_csd->DeviceSize |= (CSD_Tab[7]) << 2;
 8002736:	6922      	ldr	r2, [r4, #16]
 8002738:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800273c:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8002740:	6122      	str	r2, [r4, #16]
		SD_csd->DeviceSize |= (CSD_Tab[8] & 0xC0) >> 6;
 8002742:	6921      	ldr	r1, [r4, #16]
 8002744:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002748:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 800274c:	6121      	str	r1, [r4, #16]
		SD_csd->MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 800274e:	f3c2 01c2 	ubfx	r1, r2, #3, #3
		SD_csd->MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07);
 8002752:	f002 0207 	and.w	r2, r2, #7
		SD_csd->MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 8002756:	7521      	strb	r1, [r4, #20]
		SD_csd->MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07);
 8002758:	7562      	strb	r2, [r4, #21]
		SD_csd->MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 800275a:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800275e:	0951      	lsrs	r1, r2, #5
 8002760:	75a1      	strb	r1, [r4, #22]
		SD_csd->MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 8002762:	f3c2 0182 	ubfx	r1, r2, #2, #3
		SD_csd->DeviceSizeMul = (CSD_Tab[9] & 0x03) << 1;
 8002766:	0052      	lsls	r2, r2, #1
 8002768:	f002 0206 	and.w	r2, r2, #6
		SD_csd->MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 800276c:	75e1      	strb	r1, [r4, #23]
		SD_csd->DeviceSizeMul = (CSD_Tab[9] & 0x03) << 1;
 800276e:	7622      	strb	r2, [r4, #24]
		SD_csd->DeviceSizeMul |= (CSD_Tab[10] & 0x80) >> 7;
 8002770:	7e22      	ldrb	r2, [r4, #24]
 8002772:	ea42 12d3 	orr.w	r2, r2, r3, lsr #7
 8002776:	7622      	strb	r2, [r4, #24]
  SD_csd->EraseGrSize = (CSD_Tab[10] & 0x40) >> 6;
 8002778:	f3c3 1280 	ubfx	r2, r3, #6, #1
  SD_csd->EraseGrMul = (CSD_Tab[10] & 0x3F) << 1;
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
  SD_csd->EraseGrSize = (CSD_Tab[10] & 0x40) >> 6;
 8002782:	7662      	strb	r2, [r4, #25]
  SD_csd->EraseGrMul = (CSD_Tab[10] & 0x3F) << 1;
 8002784:	76a3      	strb	r3, [r4, #26]
  SD_csd->EraseGrMul |= (CSD_Tab[11] & 0x80) >> 7;
 8002786:	7ea2      	ldrb	r2, [r4, #26]
 8002788:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
 800278c:	4628      	mov	r0, r5
  SD_csd->EraseGrMul |= (CSD_Tab[11] & 0x80) >> 7;
 800278e:	ea42 12d3 	orr.w	r2, r2, r3, lsr #7
  SD_csd->WrProtectGrSize = (CSD_Tab[11] & 0x7F);
 8002792:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
  SD_csd->EraseGrMul |= (CSD_Tab[11] & 0x80) >> 7;
 8002796:	76a2      	strb	r2, [r4, #26]
  SD_csd->WrProtectGrSize = (CSD_Tab[11] & 0x7F);
 8002798:	76e3      	strb	r3, [r4, #27]
  SD_csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 800279a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800279e:	09da      	lsrs	r2, r3, #7
 80027a0:	7722      	strb	r2, [r4, #28]
  SD_csd->ManDeflECC = (CSD_Tab[12] & 0x60) >> 5;
 80027a2:	f3c3 1241 	ubfx	r2, r3, #5, #2
 80027a6:	7762      	strb	r2, [r4, #29]
  SD_csd->WrSpeedFact = (CSD_Tab[12] & 0x1C) >> 2;
 80027a8:	f3c3 0282 	ubfx	r2, r3, #2, #3
  SD_csd->MaxWrBlockLen = (CSD_Tab[12] & 0x03) << 2;
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	f003 030c 	and.w	r3, r3, #12
  SD_csd->WrSpeedFact = (CSD_Tab[12] & 0x1C) >> 2;
 80027b2:	77a2      	strb	r2, [r4, #30]
  SD_csd->MaxWrBlockLen = (CSD_Tab[12] & 0x03) << 2;
 80027b4:	77e3      	strb	r3, [r4, #31]
  SD_csd->MaxWrBlockLen |= (CSD_Tab[13] & 0xC0) >> 6;
 80027b6:	7fe2      	ldrb	r2, [r4, #31]
 80027b8:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80027bc:	ea42 1293 	orr.w	r2, r2, r3, lsr #6
 80027c0:	77e2      	strb	r2, [r4, #31]
  SD_csd->WriteBlockPaPartial = (CSD_Tab[13] & 0x20) >> 5;
 80027c2:	f3c3 1240 	ubfx	r2, r3, #5, #1
 80027c6:	f884 2020 	strb.w	r2, [r4, #32]
  SD_csd->Reserved3 = 0;
 80027ca:	2200      	movs	r2, #0
  SD_csd->ContentProtectAppli = (CSD_Tab[13] & 0x01);
 80027cc:	f003 0301 	and.w	r3, r3, #1
  SD_csd->Reserved3 = 0;
 80027d0:	f884 2021 	strb.w	r2, [r4, #33]	@ 0x21
  SD_csd->ContentProtectAppli = (CSD_Tab[13] & 0x01);
 80027d4:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  SD_csd->FileFormatGrouop = (CSD_Tab[14] & 0x80) >> 7;
 80027d8:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80027dc:	09da      	lsrs	r2, r3, #7
 80027de:	f884 2023 	strb.w	r2, [r4, #35]	@ 0x23
  SD_csd->CopyFlag = (CSD_Tab[14] & 0x40) >> 6;
 80027e2:	f3c3 1280 	ubfx	r2, r3, #6, #1
 80027e6:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
  SD_csd->PermWrProtect = (CSD_Tab[14] & 0x20) >> 5;
 80027ea:	f3c3 1240 	ubfx	r2, r3, #5, #1
 80027ee:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
  SD_csd->TempWrProtect = (CSD_Tab[14] & 0x10) >> 4;
 80027f2:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80027f6:	f884 2026 	strb.w	r2, [r4, #38]	@ 0x26
  SD_csd->FileFormat = (CSD_Tab[14] & 0x0C) >> 2;
 80027fa:	f3c3 0281 	ubfx	r2, r3, #2, #2
  SD_csd->ECC = (CSD_Tab[14] & 0x03);
 80027fe:	f003 0303 	and.w	r3, r3, #3
  SD_csd->FileFormat = (CSD_Tab[14] & 0x0C) >> 2;
 8002802:	f884 2027 	strb.w	r2, [r4, #39]	@ 0x27
  SD_csd->ECC = (CSD_Tab[14] & 0x03);
 8002806:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
  SD_csd->CSD_CRC = (CSD_Tab[15] & 0xFE) >> 1;
 800280a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
  SD_csd->Reserved4 = 1;
 8002814:	2301      	movs	r3, #1
 8002816:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
}
 800281a:	b005      	add	sp, #20
 800281c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800281e:	466f      	mov	r7, sp
      for (i = 0; i < 16; i++)
 8002820:	462e      	mov	r6, r5
        CSD_Tab[i] = SD_ReadByte();
 8002822:	f7ff fe3c 	bl	800249e <SD_ReadByte>
      for (i = 0; i < 16; i++)
 8002826:	3601      	adds	r6, #1
 8002828:	2e10      	cmp	r6, #16
        CSD_Tab[i] = SD_ReadByte();
 800282a:	f807 0b01 	strb.w	r0, [r7], #1
      for (i = 0; i < 16; i++)
 800282e:	d1f8      	bne.n	8002822 <SD_GetCSDRegister+0x1b2>
 8002830:	e738      	b.n	80026a4 <SD_GetCSDRegister+0x34>
  SD_Error rvalue = SD_RESPONSE_FAILURE;
 8002832:	25ff      	movs	r5, #255	@ 0xff
 8002834:	e73c      	b.n	80026b0 <SD_GetCSDRegister+0x40>
	else if (SD_Type == SD_TYPE_V2HC)
 8002836:	2a04      	cmp	r2, #4
 8002838:	d19e      	bne.n	8002778 <SD_GetCSDRegister+0x108>
		SD_csd->DeviceSize = (CSD_Tab[7] & 0x3F) << 16;
 800283a:	f89d 2007 	ldrb.w	r2, [sp, #7]
		SD_csd->DeviceSize |= (CSD_Tab[8] << 8);
 800283e:	f89d 1008 	ldrb.w	r1, [sp, #8]
		SD_csd->DeviceSize = (CSD_Tab[7] & 0x3F) << 16;
 8002842:	0412      	lsls	r2, r2, #16
 8002844:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8002848:	6122      	str	r2, [r4, #16]
		SD_csd->DeviceSize |= (CSD_Tab[8] << 8);
 800284a:	6922      	ldr	r2, [r4, #16]
 800284c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002850:	6122      	str	r2, [r4, #16]
		SD_csd->DeviceSize |= (CSD_Tab[9]);
 8002852:	6921      	ldr	r1, [r4, #16]
 8002854:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8002858:	430a      	orrs	r2, r1
 800285a:	6122      	str	r2, [r4, #16]
 800285c:	e78c      	b.n	8002778 <SD_GetCSDRegister+0x108>
 800285e:	bf00      	nop
 8002860:	40010800 	.word	0x40010800
 8002864:	20000818 	.word	0x20000818

08002868 <SD_GetCIDRegister>:
{
 8002868:	b5f0      	push	{r4, r5, r6, r7, lr}
  SD_CS_LOW();
 800286a:	2200      	movs	r2, #0
{
 800286c:	b085      	sub	sp, #20
  SD_CS_LOW();
 800286e:	2110      	movs	r1, #16
{
 8002870:	4604      	mov	r4, r0
  SD_CS_LOW();
 8002872:	4840      	ldr	r0, [pc, #256]	@ (8002974 <SD_GetCIDRegister+0x10c>)
 8002874:	f004 ff8a 	bl	800778c <HAL_GPIO_WritePin>
  SD_SendCmd(SD_CMD_SEND_CID, 0, 0xFF);
 8002878:	22ff      	movs	r2, #255	@ 0xff
 800287a:	2100      	movs	r1, #0
 800287c:	200a      	movs	r0, #10
 800287e:	f7ff fdf1 	bl	8002464 <SD_SendCmd>
  if (!SD_GetResponse(SD_RESPONSE_NO_ERROR))
 8002882:	2000      	movs	r0, #0
 8002884:	f7ff fe22 	bl	80024cc <SD_GetResponse>
 8002888:	4605      	mov	r5, r0
 800288a:	2800      	cmp	r0, #0
 800288c:	d170      	bne.n	8002970 <SD_GetCIDRegister+0x108>
    if (!SD_GetResponse(SD_START_DATA_SINGLE_BLOCK_READ))
 800288e:	20fe      	movs	r0, #254	@ 0xfe
 8002890:	f7ff fe1c 	bl	80024cc <SD_GetResponse>
 8002894:	b940      	cbnz	r0, 80028a8 <SD_GetCIDRegister+0x40>
 8002896:	466f      	mov	r7, sp
      for (i = 0; i < 16; i++)
 8002898:	462e      	mov	r6, r5
        CID_Tab[i] = SD_ReadByte();
 800289a:	f7ff fe00 	bl	800249e <SD_ReadByte>
      for (i = 0; i < 16; i++)
 800289e:	3601      	adds	r6, #1
 80028a0:	2e10      	cmp	r6, #16
        CID_Tab[i] = SD_ReadByte();
 80028a2:	f807 0b01 	strb.w	r0, [r7], #1
      for (i = 0; i < 16; i++)
 80028a6:	d1f8      	bne.n	800289a <SD_GetCIDRegister+0x32>
    SD_WriteByte(SD_DUMMY_BYTE);
 80028a8:	20ff      	movs	r0, #255	@ 0xff
 80028aa:	f7ff fdc7 	bl	800243c <SD_WriteByte>
    SD_WriteByte(SD_DUMMY_BYTE);
 80028ae:	20ff      	movs	r0, #255	@ 0xff
 80028b0:	f7ff fdc4 	bl	800243c <SD_WriteByte>
  SD_CS_HIGH();
 80028b4:	2201      	movs	r2, #1
 80028b6:	2110      	movs	r1, #16
 80028b8:	482e      	ldr	r0, [pc, #184]	@ (8002974 <SD_GetCIDRegister+0x10c>)
 80028ba:	f004 ff67 	bl	800778c <HAL_GPIO_WritePin>
  SD_WriteByte(SD_DUMMY_BYTE);
 80028be:	20ff      	movs	r0, #255	@ 0xff
 80028c0:	f7ff fdbc 	bl	800243c <SD_WriteByte>
  SD_cid->ManufacturerID = CID_Tab[0];
 80028c4:	f89d 3000 	ldrb.w	r3, [sp]
  SD_cid->OEM_AppliID |= CID_Tab[2];
 80028c8:	f89d 2002 	ldrb.w	r2, [sp, #2]
  SD_cid->ManufacturerID = CID_Tab[0];
 80028cc:	7023      	strb	r3, [r4, #0]
  SD_cid->OEM_AppliID = CID_Tab[1] << 8;
 80028ce:	f89d 3001 	ldrb.w	r3, [sp, #1]
}
 80028d2:	4628      	mov	r0, r5
  SD_cid->OEM_AppliID = CID_Tab[1] << 8;
 80028d4:	021b      	lsls	r3, r3, #8
 80028d6:	8063      	strh	r3, [r4, #2]
  SD_cid->OEM_AppliID |= CID_Tab[2];
 80028d8:	8863      	ldrh	r3, [r4, #2]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	4313      	orrs	r3, r2
 80028de:	8063      	strh	r3, [r4, #2]
  SD_cid->ProdName1 = CID_Tab[3] << 24;
 80028e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
  SD_cid->ProdName1 |= CID_Tab[4] << 16;
 80028e4:	f89d 2004 	ldrb.w	r2, [sp, #4]
  SD_cid->ProdName1 = CID_Tab[3] << 24;
 80028e8:	061b      	lsls	r3, r3, #24
 80028ea:	6063      	str	r3, [r4, #4]
  SD_cid->ProdName1 |= CID_Tab[4] << 16;
 80028ec:	6863      	ldr	r3, [r4, #4]
 80028ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80028f2:	6063      	str	r3, [r4, #4]
  SD_cid->ProdName1 |= CID_Tab[5] << 8;
 80028f4:	6863      	ldr	r3, [r4, #4]
 80028f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80028fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80028fe:	6063      	str	r3, [r4, #4]
  SD_cid->ProdName1 |= CID_Tab[6];
 8002900:	6862      	ldr	r2, [r4, #4]
 8002902:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002906:	4313      	orrs	r3, r2
 8002908:	6063      	str	r3, [r4, #4]
  SD_cid->ProdName2 = CID_Tab[7];
 800290a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  SD_cid->ProdSN |= CID_Tab[10] << 16;
 800290e:	f89d 200a 	ldrb.w	r2, [sp, #10]
  SD_cid->ProdName2 = CID_Tab[7];
 8002912:	7223      	strb	r3, [r4, #8]
  SD_cid->ProdRev = CID_Tab[8];
 8002914:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002918:	7263      	strb	r3, [r4, #9]
  SD_cid->ProdSN = CID_Tab[9] << 24;
 800291a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800291e:	061b      	lsls	r3, r3, #24
 8002920:	60e3      	str	r3, [r4, #12]
  SD_cid->ProdSN |= CID_Tab[10] << 16;
 8002922:	68e3      	ldr	r3, [r4, #12]
 8002924:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002928:	60e3      	str	r3, [r4, #12]
  SD_cid->ProdSN |= CID_Tab[11] << 8;
 800292a:	68e3      	ldr	r3, [r4, #12]
 800292c:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8002930:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002934:	60e3      	str	r3, [r4, #12]
  SD_cid->ProdSN |= CID_Tab[12];
 8002936:	68e2      	ldr	r2, [r4, #12]
 8002938:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	60e3      	str	r3, [r4, #12]
  SD_cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 8002940:	7c22      	ldrb	r2, [r4, #16]
 8002942:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8002946:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
  SD_cid->ManufactDate = (CID_Tab[13] & 0x0F) << 8;
 800294a:	021b      	lsls	r3, r3, #8
 800294c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
  SD_cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 8002950:	7422      	strb	r2, [r4, #16]
  SD_cid->ManufactDate = (CID_Tab[13] & 0x0F) << 8;
 8002952:	8263      	strh	r3, [r4, #18]
  SD_cid->ManufactDate |= CID_Tab[14];
 8002954:	8a63      	ldrh	r3, [r4, #18]
 8002956:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800295a:	b29b      	uxth	r3, r3
 800295c:	4313      	orrs	r3, r2
 800295e:	8263      	strh	r3, [r4, #18]
  SD_cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 8002960:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002964:	085b      	lsrs	r3, r3, #1
 8002966:	7523      	strb	r3, [r4, #20]
  SD_cid->Reserved2 = 1;
 8002968:	2301      	movs	r3, #1
 800296a:	7563      	strb	r3, [r4, #21]
}
 800296c:	b005      	add	sp, #20
 800296e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  SD_Error rvalue = SD_RESPONSE_FAILURE;
 8002970:	25ff      	movs	r5, #255	@ 0xff
 8002972:	e79f      	b.n	80028b4 <SD_GetCIDRegister+0x4c>
 8002974:	40010800 	.word	0x40010800

08002978 <SD_GetCardInfo>:
{
 8002978:	b570      	push	{r4, r5, r6, lr}
 800297a:	4604      	mov	r4, r0
  status = SD_GetCSDRegister(&(cardinfo->SD_csd));
 800297c:	f7ff fe78 	bl	8002670 <SD_GetCSDRegister>
  status = SD_GetCIDRegister(&(cardinfo->SD_cid));
 8002980:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8002984:	f7ff ff70 	bl	8002868 <SD_GetCIDRegister>
	if ((SD_Type == SD_TYPE_V1) || (SD_Type == SD_TYPE_V2))
 8002988:	4b13      	ldr	r3, [pc, #76]	@ (80029d8 <SD_GetCardInfo+0x60>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	1e5a      	subs	r2, r3, #1
 800298e:	2a01      	cmp	r2, #1
 8002990:	d816      	bhi.n	80029c0 <SD_GetCardInfo+0x48>
  cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 8002992:	2301      	movs	r3, #1
  cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
 8002994:	6925      	ldr	r5, [r4, #16]
  cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 8002996:	7e22      	ldrb	r2, [r4, #24]
  cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 8002998:	7a21      	ldrb	r1, [r4, #8]
  cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 800299a:	3202      	adds	r2, #2
  cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 800299c:	fa03 f101 	lsl.w	r1, r3, r1
  cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 80029a0:	4093      	lsls	r3, r2
 80029a2:	17de      	asrs	r6, r3, #31
  cardinfo->CardCapacity *= cardinfo->CardBlockSize;
 80029a4:	fba3 3201 	umull	r3, r2, r3, r1
 80029a8:	fb01 2206 	mla	r2, r1, r6, r2
  cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 80029ac:	6521      	str	r1, [r4, #80]	@ 0x50
  cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
 80029ae:	1c69      	adds	r1, r5, #1
  cardinfo->CardCapacity *= cardinfo->CardBlockSize;
 80029b0:	fba3 3101 	umull	r3, r1, r3, r1
 80029b4:	fb05 2202 	mla	r2, r5, r2, r2
 80029b8:	440a      	add	r2, r1
 80029ba:	e9c4 3212 	strd	r3, r2, [r4, #72]	@ 0x48
}
 80029be:	bd70      	pop	{r4, r5, r6, pc}
	else if (SD_Type == SD_TYPE_V2HC)
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d1fc      	bne.n	80029be <SD_GetCardInfo+0x46>
	  cardinfo->CardCapacity = (uint64_t)(cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
 80029c4:	6923      	ldr	r3, [r4, #16]
 80029c6:	3301      	adds	r3, #1
 80029c8:	0b5a      	lsrs	r2, r3, #13
 80029ca:	04db      	lsls	r3, r3, #19
 80029cc:	e9c4 3212 	strd	r3, r2, [r4, #72]	@ 0x48
    cardinfo->CardBlockSize = 512;
 80029d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029d4:	6523      	str	r3, [r4, #80]	@ 0x50
 80029d6:	e7f2      	b.n	80029be <SD_GetCardInfo+0x46>
 80029d8:	20000818 	.word	0x20000818

080029dc <SD_GetCardType>:
{
 80029dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	SD_CS_HIGH();
 80029de:	2201      	movs	r2, #1
 80029e0:	2110      	movs	r1, #16
 80029e2:	4854      	ldr	r0, [pc, #336]	@ (8002b34 <SD_GetCardType+0x158>)
 80029e4:	f004 fed2 	bl	800778c <HAL_GPIO_WritePin>
	SD_WriteByte(SD_DUMMY_BYTE);
 80029e8:	20ff      	movs	r0, #255	@ 0xff
 80029ea:	f7ff fd27 	bl	800243c <SD_WriteByte>
	SD_CS_LOW();
 80029ee:	2200      	movs	r2, #0
 80029f0:	2110      	movs	r1, #16
 80029f2:	4850      	ldr	r0, [pc, #320]	@ (8002b34 <SD_GetCardType+0x158>)
 80029f4:	f004 feca 	bl	800778c <HAL_GPIO_WritePin>
  SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AA, 0x87);
 80029f8:	2287      	movs	r2, #135	@ 0x87
 80029fa:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80029fe:	2008      	movs	r0, #8
 8002a00:	f7ff fd30 	bl	8002464 <SD_SendCmd>
	uint32_t Count = 0xFFF;
 8002a04:	f640 74ff 	movw	r4, #4095	@ 0xfff
  while (( (R1_Resp = SD_ReadByte()) == 0xFF) && Count)
 8002a08:	f7ff fd49 	bl	800249e <SD_ReadByte>
 8002a0c:	28ff      	cmp	r0, #255	@ 0xff
 8002a0e:	d105      	bne.n	8002a1c <SD_GetCardType+0x40>
 8002a10:	b914      	cbnz	r4, 8002a18 <SD_GetCardType+0x3c>
    return SD_RESPONSE_FAILURE;
 8002a12:	20ff      	movs	r0, #255	@ 0xff
}
 8002a14:	b002      	add	sp, #8
 8002a16:	bd70      	pop	{r4, r5, r6, pc}
    Count--;
 8002a18:	3c01      	subs	r4, #1
 8002a1a:	e7f5      	b.n	8002a08 <SD_GetCardType+0x2c>
  if (Count == 0)
 8002a1c:	2c00      	cmp	r4, #0
 8002a1e:	d0f8      	beq.n	8002a12 <SD_GetCardType+0x36>
	if(R1_Resp == (SD_IN_IDLE_STATE|SD_ILLEGAL_COMMAND))
 8002a20:	2805      	cmp	r0, #5
 8002a22:	d11b      	bne.n	8002a5c <SD_GetCardType+0x80>
			SD_CS_HIGH();
 8002a24:	4c43      	ldr	r4, [pc, #268]	@ (8002b34 <SD_GetCardType+0x158>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	2110      	movs	r1, #16
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f004 feae 	bl	800778c <HAL_GPIO_WritePin>
			SD_WriteByte(SD_DUMMY_BYTE);
 8002a30:	20ff      	movs	r0, #255	@ 0xff
 8002a32:	f7ff fd03 	bl	800243c <SD_WriteByte>
			SD_CS_LOW();
 8002a36:	2200      	movs	r2, #0
 8002a38:	2110      	movs	r1, #16
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	f004 fea6 	bl	800778c <HAL_GPIO_WritePin>
			SD_SendCmd(SD_CMD_SEND_OP_COND, 0, 0xFF);
 8002a40:	2001      	movs	r0, #1
 8002a42:	22ff      	movs	r2, #255	@ 0xff
 8002a44:	2100      	movs	r1, #0
 8002a46:	f7ff fd0d 	bl	8002464 <SD_SendCmd>
		while (SD_GetResponse(SD_RESPONSE_NO_ERROR));
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f7ff fd3e 	bl	80024cc <SD_GetResponse>
 8002a50:	2800      	cmp	r0, #0
 8002a52:	d1e8      	bne.n	8002a26 <SD_GetCardType+0x4a>
		SD_Type = SD_TYPE_V1;
 8002a54:	2201      	movs	r2, #1
 8002a56:	4b38      	ldr	r3, [pc, #224]	@ (8002b38 <SD_GetCardType+0x15c>)
                SD_Type = SD_TYPE_V2;
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	e05f      	b.n	8002b1c <SD_GetCardType+0x140>
  else if (R1_Resp == SD_IN_IDLE_STATE)
 8002a5c:	2801      	cmp	r0, #1
 8002a5e:	d15d      	bne.n	8002b1c <SD_GetCardType+0x140>
 8002a60:	ad01      	add	r5, sp, #4
 8002a62:	462e      	mov	r6, r5
      for (i = 0; i < 4; i++)
 8002a64:	2400      	movs	r4, #0
        R7R3_Resp[i] = SD_ReadByte();
 8002a66:	f7ff fd1a 	bl	800249e <SD_ReadByte>
      for (i = 0; i < 4; i++)
 8002a6a:	3401      	adds	r4, #1
 8002a6c:	2c04      	cmp	r4, #4
        R7R3_Resp[i] = SD_ReadByte();
 8002a6e:	f806 0b01 	strb.w	r0, [r6], #1
      for (i = 0; i < 4; i++)
 8002a72:	d1f8      	bne.n	8002a66 <SD_GetCardType+0x8a>
			SD_CS_HIGH();
 8002a74:	2201      	movs	r2, #1
 8002a76:	2110      	movs	r1, #16
 8002a78:	482e      	ldr	r0, [pc, #184]	@ (8002b34 <SD_GetCardType+0x158>)
 8002a7a:	f004 fe87 	bl	800778c <HAL_GPIO_WritePin>
			SD_WriteByte(SD_DUMMY_BYTE);
 8002a7e:	20ff      	movs	r0, #255	@ 0xff
 8002a80:	f7ff fcdc 	bl	800243c <SD_WriteByte>
			SD_CS_LOW();
 8002a84:	2200      	movs	r2, #0
 8002a86:	2110      	movs	r1, #16
 8002a88:	482a      	ldr	r0, [pc, #168]	@ (8002b34 <SD_GetCardType+0x158>)
 8002a8a:	f004 fe7f 	bl	800778c <HAL_GPIO_WritePin>
			if(R7R3_Resp[2]==0x01 && R7R3_Resp[3]==0xAA)
 8002a8e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d142      	bne.n	8002b1c <SD_GetCardType+0x140>
 8002a96:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002a9a:	2baa      	cmp	r3, #170	@ 0xaa
 8002a9c:	d13e      	bne.n	8002b1c <SD_GetCardType+0x140>
 8002a9e:	24c9      	movs	r4, #201	@ 0xc9
    			SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF);
 8002aa0:	2037      	movs	r0, #55	@ 0x37
 8002aa2:	22ff      	movs	r2, #255	@ 0xff
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	f7ff fcdd 	bl	8002464 <SD_SendCmd>
					if (!SD_GetResponse(SD_RESPONSE_NO_ERROR)) // SD_IN_IDLE_STATE
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f7ff fd0e 	bl	80024cc <SD_GetResponse>
 8002ab0:	2800      	cmp	r0, #0
 8002ab2:	d0ae      	beq.n	8002a12 <SD_GetCardType+0x36>
    			SD_SendCmd(SD_ACMD_SD_SEND_OP_COND, 0x40000000, 0xFF);
 8002ab4:	22ff      	movs	r2, #255	@ 0xff
 8002ab6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002aba:	2029      	movs	r0, #41	@ 0x29
 8002abc:	f7ff fcd2 	bl	8002464 <SD_SendCmd>
					if(Count-- == 0)
 8002ac0:	3c01      	subs	r4, #1
 8002ac2:	d0a6      	beq.n	8002a12 <SD_GetCardType+0x36>
         }while(SD_GetResponse(SD_RESPONSE_NO_ERROR));
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f7ff fd01 	bl	80024cc <SD_GetResponse>
 8002aca:	2800      	cmp	r0, #0
 8002acc:	d1e8      	bne.n	8002aa0 <SD_GetCardType+0xc4>
						SD_CS_HIGH();
 8002ace:	4e19      	ldr	r6, [pc, #100]	@ (8002b34 <SD_GetCardType+0x158>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	2110      	movs	r1, #16
 8002ad4:	4630      	mov	r0, r6
 8002ad6:	f004 fe59 	bl	800778c <HAL_GPIO_WritePin>
						SD_WriteByte(SD_DUMMY_BYTE);
 8002ada:	20ff      	movs	r0, #255	@ 0xff
 8002adc:	f7ff fcae 	bl	800243c <SD_WriteByte>
						SD_CS_LOW();
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2110      	movs	r1, #16
 8002ae4:	4630      	mov	r0, r6
 8002ae6:	f004 fe51 	bl	800778c <HAL_GPIO_WritePin>
						SD_SendCmd(SD_CMD_READ_OCR, 0, 0xFF);
 8002aea:	22ff      	movs	r2, #255	@ 0xff
 8002aec:	2100      	movs	r1, #0
 8002aee:	203a      	movs	r0, #58	@ 0x3a
 8002af0:	f7ff fcb8 	bl	8002464 <SD_SendCmd>
					while ( SD_GetResponse(SD_RESPONSE_NO_ERROR) || Count-- == 0);
 8002af4:	2000      	movs	r0, #0
 8002af6:	f7ff fce9 	bl	80024cc <SD_GetResponse>
 8002afa:	4604      	mov	r4, r0
 8002afc:	2800      	cmp	r0, #0
 8002afe:	d1e7      	bne.n	8002ad0 <SD_GetCardType+0xf4>
							R7R3_Resp[i] = SD_ReadByte();
 8002b00:	f7ff fccd 	bl	800249e <SD_ReadByte>
						for (i = 0; i < 4; i++)
 8002b04:	3401      	adds	r4, #1
 8002b06:	2c04      	cmp	r4, #4
							R7R3_Resp[i] = SD_ReadByte();
 8002b08:	f805 0b01 	strb.w	r0, [r5], #1
						for (i = 0; i < 4; i++)
 8002b0c:	d1f8      	bne.n	8002b00 <SD_GetCardType+0x124>
            if(R7R3_Resp[0]&0x40)    //检查CCS标志
 8002b0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b12:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002b16:	4b08      	ldr	r3, [pc, #32]	@ (8002b38 <SD_GetCardType+0x15c>)
 8002b18:	d00a      	beq.n	8002b30 <SD_GetCardType+0x154>
                SD_Type = SD_TYPE_V2HC;
 8002b1a:	701c      	strb	r4, [r3, #0]
  SD_CS_HIGH();
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	2110      	movs	r1, #16
 8002b20:	4804      	ldr	r0, [pc, #16]	@ (8002b34 <SD_GetCardType+0x158>)
 8002b22:	f004 fe33 	bl	800778c <HAL_GPIO_WritePin>
  SD_WriteByte(SD_DUMMY_BYTE);
 8002b26:	20ff      	movs	r0, #255	@ 0xff
 8002b28:	f7ff fc88 	bl	800243c <SD_WriteByte>
	return SD_RESPONSE_NO_ERROR;
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	e771      	b.n	8002a14 <SD_GetCardType+0x38>
                SD_Type = SD_TYPE_V2;
 8002b30:	2202      	movs	r2, #2
 8002b32:	e791      	b.n	8002a58 <SD_GetCardType+0x7c>
 8002b34:	40010800 	.word	0x40010800
 8002b38:	20000818 	.word	0x20000818

08002b3c <SD_Init>:
{
 8002b3c:	b510      	push	{r4, lr}
  SD_CS_HIGH();
 8002b3e:	2201      	movs	r2, #1
 8002b40:	2110      	movs	r1, #16
 8002b42:	480b      	ldr	r0, [pc, #44]	@ (8002b70 <SD_Init+0x34>)
 8002b44:	f004 fe22 	bl	800778c <HAL_GPIO_WritePin>
 8002b48:	240a      	movs	r4, #10
    SD_WriteByte(SD_DUMMY_BYTE);
 8002b4a:	20ff      	movs	r0, #255	@ 0xff
 8002b4c:	f7ff fc76 	bl	800243c <SD_WriteByte>
  for (i = 0; i <= 9; i++)
 8002b50:	3c01      	subs	r4, #1
 8002b52:	d1fa      	bne.n	8002b4a <SD_Init+0xe>
		SD_GoIdleState();
 8002b54:	f7ff fccc 	bl	80024f0 <SD_GoIdleState>
		SD_GetCardType();
 8002b58:	f7ff ff40 	bl	80029dc <SD_GetCardType>
	}while(SD_Type == SD_TYPE_NOT_SD && i++ >10);
 8002b5c:	4b05      	ldr	r3, [pc, #20]	@ (8002b74 <SD_Init+0x38>)
	if(SD_Type == SD_TYPE_NOT_SD)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	b123      	cbz	r3, 8002b6c <SD_Init+0x30>
}
 8002b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return SD_GetCardInfo(&SDCardInfo);
 8002b66:	4804      	ldr	r0, [pc, #16]	@ (8002b78 <SD_Init+0x3c>)
 8002b68:	f7ff bf06 	b.w	8002978 <SD_GetCardInfo>
}
 8002b6c:	20ff      	movs	r0, #255	@ 0xff
 8002b6e:	bd10      	pop	{r4, pc}
 8002b70:	40010800 	.word	0x40010800
 8002b74:	20000818 	.word	0x20000818
 8002b78:	200007c0 	.word	0x200007c0

08002b7c <MX_ADC1_Init>:

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002b7c:	4823      	ldr	r0, [pc, #140]	@ (8002c0c <MX_ADC1_Init+0x90>)
 8002b7e:	4b24      	ldr	r3, [pc, #144]	@ (8002c10 <MX_ADC1_Init+0x94>)
{
 8002b80:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 8002b82:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002b84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b88:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b8a:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b8e:	2400      	movs	r4, #0
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002b90:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b92:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 8002b94:	2304      	movs	r3, #4
{
 8002b96:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b98:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002b9c:	9403      	str	r4, [sp, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002b9e:	7305      	strb	r5, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ba0:	7504      	strb	r4, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ba2:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 4;
 8002ba4:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ba6:	f004 fa57 	bl	8007058 <HAL_ADC_Init>
 8002baa:	b108      	cbz	r0, 8002bb0 <MX_ADC1_Init+0x34>
  {
    Error_Handler();
 8002bac:	f002 fefa 	bl	80059a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002bb0:	e9cd 4501 	strd	r4, r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002bb4:	2402      	movs	r4, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bb6:	4815      	ldr	r0, [pc, #84]	@ (8002c0c <MX_ADC1_Init+0x90>)
 8002bb8:	a901      	add	r1, sp, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002bba:	9403      	str	r4, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bbc:	f004 f8de 	bl	8006d7c <HAL_ADC_ConfigChannel>
 8002bc0:	b108      	cbz	r0, 8002bc6 <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 8002bc2:	f002 feef 	bl	80059a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002bc6:	2301      	movs	r3, #1
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bc8:	4810      	ldr	r0, [pc, #64]	@ (8002c0c <MX_ADC1_Init+0x90>)
 8002bca:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002bcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bd0:	f004 f8d4 	bl	8006d7c <HAL_ADC_ConfigChannel>
 8002bd4:	b108      	cbz	r0, 8002bda <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 8002bd6:	f002 fee5 	bl	80059a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002bda:	2108      	movs	r1, #8
 8002bdc:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bde:	480b      	ldr	r0, [pc, #44]	@ (8002c0c <MX_ADC1_Init+0x90>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002be0:	e9cd 1301 	strd	r1, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002be4:	a901      	add	r1, sp, #4
 8002be6:	f004 f8c9 	bl	8006d7c <HAL_ADC_ConfigChannel>
 8002bea:	b108      	cbz	r0, 8002bf0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002bec:	f002 feda 	bl	80059a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002bf0:	2304      	movs	r3, #4
 8002bf2:	2209      	movs	r2, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bf4:	4805      	ldr	r0, [pc, #20]	@ (8002c0c <MX_ADC1_Init+0x90>)
 8002bf6:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002bfa:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bfe:	f004 f8bd 	bl	8006d7c <HAL_ADC_ConfigChannel>
 8002c02:	b108      	cbz	r0, 8002c08 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8002c04:	f002 fece 	bl	80059a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c08:	b005      	add	sp, #20
 8002c0a:	bd30      	pop	{r4, r5, pc}
 8002c0c:	20000874 	.word	0x20000874
 8002c10:	40012400 	.word	0x40012400

08002c14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	2210      	movs	r2, #16
{
 8002c16:	b530      	push	{r4, r5, lr}
 8002c18:	4605      	mov	r5, r0
 8002c1a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	eb0d 0002 	add.w	r0, sp, r2
 8002c20:	2100      	movs	r1, #0
 8002c22:	f007 ffe2 	bl	800abea <memset>
  if(adcHandle->Instance==ADC1)
 8002c26:	682a      	ldr	r2, [r5, #0]
 8002c28:	4b27      	ldr	r3, [pc, #156]	@ (8002cc8 <HAL_ADC_MspInit+0xb4>)
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d14a      	bne.n	8002cc4 <HAL_ADC_MspInit+0xb0>
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPS_PPS_Pin|ADC_GASP_Pin;
 8002c2e:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c30:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8002c34:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c36:	4825      	ldr	r0, [pc, #148]	@ (8002ccc <HAL_ADC_MspInit+0xb8>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c3c:	619a      	str	r2, [r3, #24]
 8002c3e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c40:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c42:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8002c46:	9201      	str	r2, [sp, #4]
 8002c48:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4a:	699a      	ldr	r2, [r3, #24]
 8002c4c:	f042 0204 	orr.w	r2, r2, #4
 8002c50:	619a      	str	r2, [r3, #24]
 8002c52:	699a      	ldr	r2, [r3, #24]
 8002c54:	f002 0204 	and.w	r2, r2, #4
 8002c58:	9202      	str	r2, [sp, #8]
 8002c5a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5c:	699a      	ldr	r2, [r3, #24]
 8002c5e:	f042 0208 	orr.w	r2, r2, #8
 8002c62:	619a      	str	r2, [r3, #24]
 8002c64:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c66:	e9cd 4404 	strd	r4, r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	9303      	str	r3, [sp, #12]
 8002c70:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c72:	f004 fcad 	bl	80075d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VADC_BDC1_Pin|ADC_BAT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c76:	4816      	ldr	r0, [pc, #88]	@ (8002cd0 <HAL_ADC_MspInit+0xbc>)
 8002c78:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c7a:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7e:	f004 fca7 	bl	80075d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c82:	2300      	movs	r3, #0
    hdma_adc1.Instance = DMA1_Channel1;
 8002c84:	4c13      	ldr	r4, [pc, #76]	@ (8002cd4 <HAL_ADC_MspInit+0xc0>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c86:	4a14      	ldr	r2, [pc, #80]	@ (8002cd8 <HAL_ADC_MspInit+0xc4>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c88:	2180      	movs	r1, #128	@ 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c8a:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002c92:	f44f 6080 	mov.w	r0, #1024	@ 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c96:	e9c4 1203 	strd	r1, r2, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	e9c4 0205 	strd	r0, r2, [r4, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ca0:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ca2:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ca4:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ca6:	f004 fb2b 	bl	8007300 <HAL_DMA_Init>
 8002caa:	b108      	cbz	r0, 8002cb0 <HAL_ADC_MspInit+0x9c>
    {
      Error_Handler();
 8002cac:	f002 fe7a 	bl	80059a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 12, 0);
 8002cb0:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002cb2:	622c      	str	r4, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 12, 0);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	210c      	movs	r1, #12
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002cb8:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 12, 0);
 8002cba:	f004 facf 	bl	800725c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002cbe:	2012      	movs	r0, #18
 8002cc0:	f004 fafc 	bl	80072bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002cc4:	b009      	add	sp, #36	@ 0x24
 8002cc6:	bd30      	pop	{r4, r5, pc}
 8002cc8:	40012400 	.word	0x40012400
 8002ccc:	40010800 	.word	0x40010800
 8002cd0:	40010c00 	.word	0x40010c00
 8002cd4:	20000830 	.word	0x20000830
 8002cd8:	40020008 	.word	0x40020008

08002cdc <HAL_ADC_ConvCpltCallback>:
{
    // 处理 ADC 转换结果
	static uint32_t adc_buf[4] = {0};
	static uint8_t i = 0;

	if(hadc->Instance == ADC1){
 8002cdc:	6802      	ldr	r2, [r0, #0]
 8002cde:	4b1f      	ldr	r3, [pc, #124]	@ (8002d5c <HAL_ADC_ConvCpltCallback+0x80>)
{
 8002ce0:	b530      	push	{r4, r5, lr}
	if(hadc->Instance == ADC1){
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d117      	bne.n	8002d16 <HAL_ADC_ConvCpltCallback+0x3a>
		if(i <= 9){
 8002ce6:	481e      	ldr	r0, [pc, #120]	@ (8002d60 <HAL_ADC_ConvCpltCallback+0x84>)
 8002ce8:	7803      	ldrb	r3, [r0, #0]
 8002cea:	2b09      	cmp	r3, #9
 8002cec:	d814      	bhi.n	8002d18 <HAL_ADC_ConvCpltCallback+0x3c>
			adc_buf[0] += ADC_rslt[0];
 8002cee:	4a1d      	ldr	r2, [pc, #116]	@ (8002d64 <HAL_ADC_ConvCpltCallback+0x88>)
 8002cf0:	491d      	ldr	r1, [pc, #116]	@ (8002d68 <HAL_ADC_ConvCpltCallback+0x8c>)
 8002cf2:	6814      	ldr	r4, [r2, #0]
 8002cf4:	880d      	ldrh	r5, [r1, #0]
			adc_buf[1] += ADC_rslt[1];
			adc_buf[2] += ADC_rslt[2];
			adc_buf[3] += ADC_rslt[3];
			i++;
 8002cf6:	3301      	adds	r3, #1
			adc_buf[0] += ADC_rslt[0];
 8002cf8:	442c      	add	r4, r5
 8002cfa:	6014      	str	r4, [r2, #0]
			adc_buf[1] += ADC_rslt[1];
 8002cfc:	884d      	ldrh	r5, [r1, #2]
 8002cfe:	6854      	ldr	r4, [r2, #4]
			i++;
 8002d00:	7003      	strb	r3, [r0, #0]
			adc_buf[1] += ADC_rslt[1];
 8002d02:	442c      	add	r4, r5
 8002d04:	6054      	str	r4, [r2, #4]
			adc_buf[2] += ADC_rslt[2];
 8002d06:	888d      	ldrh	r5, [r1, #4]
 8002d08:	6894      	ldr	r4, [r2, #8]
 8002d0a:	442c      	add	r4, r5
 8002d0c:	6094      	str	r4, [r2, #8]
			adc_buf[3] += ADC_rslt[3];
 8002d0e:	88cc      	ldrh	r4, [r1, #6]
 8002d10:	68d1      	ldr	r1, [r2, #12]
 8002d12:	4421      	add	r1, r4
 8002d14:	60d1      	str	r1, [r2, #12]
			adc_buf[2]= 0;
			adc_buf[3]= 0;
			ADC_CONV_cplt = 1;
		}
	}
}
 8002d16:	bd30      	pop	{r4, r5, pc}
		else if(i == 10)
 8002d18:	2b0a      	cmp	r3, #10
 8002d1a:	d1fc      	bne.n	8002d16 <HAL_ADC_ConvCpltCallback+0x3a>
			motor1_adc_val 	= adc_buf[0]/10;
 8002d1c:	4a11      	ldr	r2, [pc, #68]	@ (8002d64 <HAL_ADC_ConvCpltCallback+0x88>)
 8002d1e:	4c13      	ldr	r4, [pc, #76]	@ (8002d6c <HAL_ADC_ConvCpltCallback+0x90>)
 8002d20:	6811      	ldr	r1, [r2, #0]
 8002d22:	fbb1 f1f3 	udiv	r1, r1, r3
 8002d26:	8021      	strh	r1, [r4, #0]
			motor2_adc_val 	= adc_buf[1]/10;
 8002d28:	6851      	ldr	r1, [r2, #4]
 8002d2a:	4c11      	ldr	r4, [pc, #68]	@ (8002d70 <HAL_ADC_ConvCpltCallback+0x94>)
 8002d2c:	fbb1 f1f3 	udiv	r1, r1, r3
 8002d30:	8021      	strh	r1, [r4, #0]
			bat_adc_val 		= adc_buf[2]/10;
 8002d32:	6891      	ldr	r1, [r2, #8]
 8002d34:	4c0f      	ldr	r4, [pc, #60]	@ (8002d74 <HAL_ADC_ConvCpltCallback+0x98>)
 8002d36:	fbb1 f1f3 	udiv	r1, r1, r3
 8002d3a:	8021      	strh	r1, [r4, #0]
			gaspres_adc_val = adc_buf[3]/10;
 8002d3c:	68d1      	ldr	r1, [r2, #12]
 8002d3e:	fbb1 f1f3 	udiv	r1, r1, r3
 8002d42:	4b0d      	ldr	r3, [pc, #52]	@ (8002d78 <HAL_ADC_ConvCpltCallback+0x9c>)
 8002d44:	8019      	strh	r1, [r3, #0]
			i = 0;
 8002d46:	2300      	movs	r3, #0
			adc_buf[1]= 0;
 8002d48:	e9c2 3300 	strd	r3, r3, [r2]
			adc_buf[3]= 0;
 8002d4c:	e9c2 3302 	strd	r3, r3, [r2, #8]
			ADC_CONV_cplt = 1;
 8002d50:	2201      	movs	r2, #1
			i = 0;
 8002d52:	7003      	strb	r3, [r0, #0]
			ADC_CONV_cplt = 1;
 8002d54:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <HAL_ADC_ConvCpltCallback+0xa0>)
 8002d56:	701a      	strb	r2, [r3, #0]
}
 8002d58:	e7dd      	b.n	8002d16 <HAL_ADC_ConvCpltCallback+0x3a>
 8002d5a:	bf00      	nop
 8002d5c:	40012400 	.word	0x40012400
 8002d60:	2000082c 	.word	0x2000082c
 8002d64:	2000081c 	.word	0x2000081c
 8002d68:	200008a6 	.word	0x200008a6
 8002d6c:	20000930 	.word	0x20000930
 8002d70:	2000092e 	.word	0x2000092e
 8002d74:	200008ae 	.word	0x200008ae
 8002d78:	2000090a 	.word	0x2000090a
 8002d7c:	200008a4 	.word	0x200008a4

08002d80 <refresh_bat_vlt>:

uint8_t low_power =0;
uint16_t bat_adc_val = 0;
uint8_t bat_val_refreshed = 0;

void refresh_bat_vlt(){
 8002d80:	b510      	push	{r4, lr}
	level_20 = (uint16_t)(20.4/20/VREF*4095);//20.4V
	level_40 = (uint16_t)(21.0/20/VREF*4095);//21V
	level_60 = (uint16_t)(22.0/20/VREF*4095);//22V
	level_80 = (uint16_t)(24.0/20/VREF*4095);//24V

	bat_adc_val = (uint16_t)(bat_adc_val*1.01);
 8002d82:	4c3d      	ldr	r4, [pc, #244]	@ (8002e78 <refresh_bat_vlt+0xf8>)
 8002d84:	8820      	ldrh	r0, [r4, #0]
 8002d86:	f7fd fb47 	bl	8000418 <__aeabi_i2d>
 8002d8a:	a339      	add	r3, pc, #228	@ (adr r3, 8002e70 <refresh_bat_vlt+0xf0>)
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	f7fd fbac 	bl	80004ec <__aeabi_dmul>
 8002d94:	f7fd fe82 	bl	8000a9c <__aeabi_d2uiz>
	if(bat_adc_val <= level_0){
 8002d98:	f240 43a3 	movw	r3, #1187	@ 0x4a3
	bat_adc_val = (uint16_t)(bat_adc_val*1.01);
 8002d9c:	b280      	uxth	r0, r0
	if(bat_adc_val <= level_0){
 8002d9e:	4298      	cmp	r0, r3
	bat_adc_val = (uint16_t)(bat_adc_val*1.01);
 8002da0:	8020      	strh	r0, [r4, #0]
	if(bat_adc_val <= level_0){
 8002da2:	4b36      	ldr	r3, [pc, #216]	@ (8002e7c <refresh_bat_vlt+0xfc>)
 8002da4:	d818      	bhi.n	8002dd8 <refresh_bat_vlt+0x58>
		low_power = 1;
 8002da6:	2201      	movs	r2, #1

		//请立即充电，0%
		sprintf(Tx_Buffer,"Main.n4.val=0\xff\xff\xff");
 8002da8:	4935      	ldr	r1, [pc, #212]	@ (8002e80 <refresh_bat_vlt+0x100>)
 8002daa:	4836      	ldr	r0, [pc, #216]	@ (8002e84 <refresh_bat_vlt+0x104>)
		low_power = 1;
 8002dac:	701a      	strb	r2, [r3, #0]
		sprintf(Tx_Buffer,"Main.n4.val=0\xff\xff\xff");
 8002dae:	f008 f818 	bl	800ade2 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002db2:	4834      	ldr	r0, [pc, #208]	@ (8002e84 <refresh_bat_vlt+0x104>)
 8002db4:	f003 fde2 	bl	800697c <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.j0.val=0\xff\xff\xff");
 8002db8:	4933      	ldr	r1, [pc, #204]	@ (8002e88 <refresh_bat_vlt+0x108>)
 8002dba:	4832      	ldr	r0, [pc, #200]	@ (8002e84 <refresh_bat_vlt+0x104>)
 8002dbc:	f008 f811 	bl	800ade2 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002dc0:	4830      	ldr	r0, [pc, #192]	@ (8002e84 <refresh_bat_vlt+0x104>)
 8002dc2:	f003 fddb 	bl	800697c <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.t0.txt=\"请立即\r\n 充电\"\xff\xff\xff");
 8002dc6:	4931      	ldr	r1, [pc, #196]	@ (8002e8c <refresh_bat_vlt+0x10c>)
		//100%
		low_power = 0;

		sprintf(Tx_Buffer,"Main.n4.val=100\xff\xff\xff");
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
		sprintf(Tx_Buffer,"Main.j0.val=100\xff\xff\xff");
 8002dc8:	482e      	ldr	r0, [pc, #184]	@ (8002e84 <refresh_bat_vlt+0x104>)
 8002dca:	f008 f80a 	bl	800ade2 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
	}

}
 8002dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002dd2:	482c      	ldr	r0, [pc, #176]	@ (8002e84 <refresh_bat_vlt+0x104>)
 8002dd4:	f003 bdd2 	b.w	800697c <USART1_Tx_HMIdata>
	}else if(bat_adc_val > level_0 && bat_adc_val <= level_20){
 8002dd8:	f240 42ed 	movw	r2, #1261	@ 0x4ed
 8002ddc:	4290      	cmp	r0, r2
 8002dde:	d811      	bhi.n	8002e04 <refresh_bat_vlt+0x84>
		low_power = 0;
 8002de0:	2200      	movs	r2, #0
		sprintf(Tx_Buffer,"Main.n4.val=20\xff\xff\xff");
 8002de2:	492b      	ldr	r1, [pc, #172]	@ (8002e90 <refresh_bat_vlt+0x110>)
 8002de4:	4827      	ldr	r0, [pc, #156]	@ (8002e84 <refresh_bat_vlt+0x104>)
		low_power = 0;
 8002de6:	701a      	strb	r2, [r3, #0]
		sprintf(Tx_Buffer,"Main.n4.val=20\xff\xff\xff");
 8002de8:	f007 fffb 	bl	800ade2 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002dec:	4825      	ldr	r0, [pc, #148]	@ (8002e84 <refresh_bat_vlt+0x104>)
 8002dee:	f003 fdc5 	bl	800697c <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.j0.val=20\xff\xff\xff");
 8002df2:	4928      	ldr	r1, [pc, #160]	@ (8002e94 <refresh_bat_vlt+0x114>)
 8002df4:	4823      	ldr	r0, [pc, #140]	@ (8002e84 <refresh_bat_vlt+0x104>)
 8002df6:	f007 fff4 	bl	800ade2 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002dfa:	4822      	ldr	r0, [pc, #136]	@ (8002e84 <refresh_bat_vlt+0x104>)
 8002dfc:	f003 fdbe 	bl	800697c <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.t0.txt=\"请尽快\r\n 充电\"\xff\xff\xff");
 8002e00:	4925      	ldr	r1, [pc, #148]	@ (8002e98 <refresh_bat_vlt+0x118>)
 8002e02:	e7e1      	b.n	8002dc8 <refresh_bat_vlt+0x48>
	}else if(bat_adc_val > level_20 && bat_adc_val <= level_40){
 8002e04:	f240 5213 	movw	r2, #1299	@ 0x513
 8002e08:	4290      	cmp	r0, r2
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	d809      	bhi.n	8002e24 <refresh_bat_vlt+0xa4>
		sprintf(Tx_Buffer,"Main.n4.val=40\xff\xff\xff");
 8002e10:	4922      	ldr	r1, [pc, #136]	@ (8002e9c <refresh_bat_vlt+0x11c>)
 8002e12:	481c      	ldr	r0, [pc, #112]	@ (8002e84 <refresh_bat_vlt+0x104>)
		low_power = 0;
 8002e14:	701a      	strb	r2, [r3, #0]
		sprintf(Tx_Buffer,"Main.n4.val=40\xff\xff\xff");
 8002e16:	f007 ffe4 	bl	800ade2 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002e1a:	481a      	ldr	r0, [pc, #104]	@ (8002e84 <refresh_bat_vlt+0x104>)
 8002e1c:	f003 fdae 	bl	800697c <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.j0.val=40\xff\xff\xff");
 8002e20:	491f      	ldr	r1, [pc, #124]	@ (8002ea0 <refresh_bat_vlt+0x120>)
 8002e22:	e7d1      	b.n	8002dc8 <refresh_bat_vlt+0x48>
	}else if(bat_adc_val > level_40 && bat_adc_val <= level_60){
 8002e24:	f5b0 6faa 	cmp.w	r0, #1360	@ 0x550
 8002e28:	d809      	bhi.n	8002e3e <refresh_bat_vlt+0xbe>
		sprintf(Tx_Buffer,"Main.n4.val=60\xff\xff\xff");
 8002e2a:	491e      	ldr	r1, [pc, #120]	@ (8002ea4 <refresh_bat_vlt+0x124>)
 8002e2c:	4815      	ldr	r0, [pc, #84]	@ (8002e84 <refresh_bat_vlt+0x104>)
		low_power = 0;
 8002e2e:	701a      	strb	r2, [r3, #0]
		sprintf(Tx_Buffer,"Main.n4.val=60\xff\xff\xff");
 8002e30:	f007 ffd7 	bl	800ade2 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002e34:	4813      	ldr	r0, [pc, #76]	@ (8002e84 <refresh_bat_vlt+0x104>)
 8002e36:	f003 fda1 	bl	800697c <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.j0.val=60\xff\xff\xff");
 8002e3a:	491b      	ldr	r1, [pc, #108]	@ (8002ea8 <refresh_bat_vlt+0x128>)
 8002e3c:	e7c4      	b.n	8002dc8 <refresh_bat_vlt+0x48>
	}else if(bat_adc_val > level_60 && bat_adc_val <= level_80){
 8002e3e:	f240 51cc 	movw	r1, #1484	@ 0x5cc
 8002e42:	4288      	cmp	r0, r1
		low_power = 0;
 8002e44:	701a      	strb	r2, [r3, #0]
	}else if(bat_adc_val > level_60 && bat_adc_val <= level_80){
 8002e46:	d808      	bhi.n	8002e5a <refresh_bat_vlt+0xda>
		sprintf(Tx_Buffer,"Main.n4.val=80\xff\xff\xff");
 8002e48:	4918      	ldr	r1, [pc, #96]	@ (8002eac <refresh_bat_vlt+0x12c>)
 8002e4a:	480e      	ldr	r0, [pc, #56]	@ (8002e84 <refresh_bat_vlt+0x104>)
 8002e4c:	f007 ffc9 	bl	800ade2 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002e50:	480c      	ldr	r0, [pc, #48]	@ (8002e84 <refresh_bat_vlt+0x104>)
 8002e52:	f003 fd93 	bl	800697c <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.j0.val=80\xff\xff\xff");
 8002e56:	4916      	ldr	r1, [pc, #88]	@ (8002eb0 <refresh_bat_vlt+0x130>)
 8002e58:	e7b6      	b.n	8002dc8 <refresh_bat_vlt+0x48>
		sprintf(Tx_Buffer,"Main.n4.val=100\xff\xff\xff");
 8002e5a:	4916      	ldr	r1, [pc, #88]	@ (8002eb4 <refresh_bat_vlt+0x134>)
 8002e5c:	4809      	ldr	r0, [pc, #36]	@ (8002e84 <refresh_bat_vlt+0x104>)
 8002e5e:	f007 ffc0 	bl	800ade2 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002e62:	4808      	ldr	r0, [pc, #32]	@ (8002e84 <refresh_bat_vlt+0x104>)
 8002e64:	f003 fd8a 	bl	800697c <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.j0.val=100\xff\xff\xff");
 8002e68:	4913      	ldr	r1, [pc, #76]	@ (8002eb8 <refresh_bat_vlt+0x138>)
 8002e6a:	e7ad      	b.n	8002dc8 <refresh_bat_vlt+0x48>
 8002e6c:	f3af 8000 	nop.w
 8002e70:	c28f5c29 	.word	0xc28f5c29
 8002e74:	3ff028f5 	.word	0x3ff028f5
 8002e78:	200008ae 	.word	0x200008ae
 8002e7c:	200008b0 	.word	0x200008b0
 8002e80:	0800d9bf 	.word	0x0800d9bf
 8002e84:	20000b7e 	.word	0x20000b7e
 8002e88:	0800d9d0 	.word	0x0800d9d0
 8002e8c:	0800d9e1 	.word	0x0800d9e1
 8002e90:	0800da05 	.word	0x0800da05
 8002e94:	0800da17 	.word	0x0800da17
 8002e98:	0800da29 	.word	0x0800da29
 8002e9c:	0800da4d 	.word	0x0800da4d
 8002ea0:	0800da5f 	.word	0x0800da5f
 8002ea4:	0800da71 	.word	0x0800da71
 8002ea8:	0800da83 	.word	0x0800da83
 8002eac:	0800da95 	.word	0x0800da95
 8002eb0:	0800daa7 	.word	0x0800daa7
 8002eb4:	0800dab9 	.word	0x0800dab9
 8002eb8:	0800dacc 	.word	0x0800dacc

08002ebc <Buzzer>:
#include "buzzer.h"

void Buzzer(uint16_t beep_ms){
 8002ebc:	b538      	push	{r3, r4, r5, lr}
 8002ebe:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002ec0:	4d08      	ldr	r5, [pc, #32]	@ (8002ee4 <Buzzer+0x28>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ec8:	4628      	mov	r0, r5
 8002eca:	f004 fc5f 	bl	800778c <HAL_GPIO_WritePin>
	HAL_Delay(beep_ms);
 8002ece:	4620      	mov	r0, r4
 8002ed0:	f003 fe94 	bl	8006bfc <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002ed4:	4628      	mov	r0, r5
}
 8002ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002eda:	2200      	movs	r2, #0
 8002edc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ee0:	f004 bc54 	b.w	800778c <HAL_GPIO_WritePin>
 8002ee4:	40010c00 	.word	0x40010c00

08002ee8 <disk_status>:

  default:
      status = STA_NOINIT;
  }
  return status;
}
 8002ee8:	3800      	subs	r0, #0
 8002eea:	bf18      	it	ne
 8002eec:	2001      	movne	r0, #1
 8002eee:	4770      	bx	lr

08002ef0 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002ef0:	b508      	push	{r3, lr}
  DSTATUS status = STA_NOINIT;
  switch (pdrv) {
 8002ef2:	b928      	cbnz	r0, 8002f00 <disk_initialize+0x10>
  case DEV_SPI_SD:          /* SD CARD */
      if (SD_Init()==SD_RESPONSE_NO_ERROR) {
 8002ef4:	f7ff fe22 	bl	8002b3c <SD_Init>
 8002ef8:	3800      	subs	r0, #0
 8002efa:	bf18      	it	ne
 8002efc:	2001      	movne	r0, #1

  default:
      status = STA_NOINIT;
  }
  return status;
}
 8002efe:	bd08      	pop	{r3, pc}
          status = STA_NOINIT;
 8002f00:	2001      	movs	r0, #1
 8002f02:	e7fc      	b.n	8002efe <disk_initialize+0xe>

08002f04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002f04:	b513      	push	{r0, r1, r4, lr}
 8002f06:	4604      	mov	r4, r0
 8002f08:	4608      	mov	r0, r1
 8002f0a:	4619      	mov	r1, r3
  DRESULT status = RES_PARERR;
  SD_Error SD_state = SD_RESPONSE_NO_ERROR;

  switch (pdrv) {
 8002f0c:	4623      	mov	r3, r4
 8002f0e:	b964      	cbnz	r4, 8002f2a <disk_read+0x26>
  case DEV_SPI_SD: /* SD CARD */
      SD_state=SD_ReadMultiBlocks(buff,sector *SD_BLOCK_SIZE,SD_BLOCK_SIZE,count);
 8002f10:	9101      	str	r1, [sp, #4]
 8002f12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f16:	0252      	lsls	r2, r2, #9
 8002f18:	9100      	str	r1, [sp, #0]
 8002f1a:	f7ff fb07 	bl	800252c <SD_ReadMultiBlocks>

      if (SD_state!=SD_RESPONSE_NO_ERROR)
 8002f1e:	3800      	subs	r0, #0
 8002f20:	bf18      	it	ne
 8002f22:	2001      	movne	r0, #1
 8002f24:	0080      	lsls	r0, r0, #2

  default:
      status = RES_PARERR;
  }
  return status;
}
 8002f26:	b002      	add	sp, #8
 8002f28:	bd10      	pop	{r4, pc}
  DRESULT status = RES_PARERR;
 8002f2a:	2004      	movs	r0, #4
 8002f2c:	e7fb      	b.n	8002f26 <disk_read+0x22>

08002f2e <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8002f2e:	b513      	push	{r0, r1, r4, lr}
 8002f30:	4604      	mov	r4, r0
 8002f32:	4608      	mov	r0, r1
  DRESULT status = RES_PARERR;
  SD_Error SD_state = SD_RESPONSE_NO_ERROR;

  if (!count) {
 8002f34:	b173      	cbz	r3, 8002f54 <disk_write+0x26>
      return RES_PARERR;    /* Check parameter */
  }

  switch (pdrv) {
 8002f36:	b96c      	cbnz	r4, 8002f54 <disk_write+0x26>
  case DEV_SPI_SD: /* SD CARD */

      SD_state=SD_WriteMultiBlocks((uint8_t *)buff,sector*SD_BLOCK_SIZE,SD_BLOCK_SIZE,count);
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f3e:	0252      	lsls	r2, r2, #9
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	4623      	mov	r3, r4
 8002f44:	f7ff fb42 	bl	80025cc <SD_WriteMultiBlocks>

      if (SD_state!=SD_RESPONSE_NO_ERROR)
 8002f48:	3800      	subs	r0, #0
 8002f4a:	bf18      	it	ne
 8002f4c:	2001      	movne	r0, #1
 8002f4e:	0080      	lsls	r0, r0, #2

  default:
      status = RES_PARERR;
  }
  return status;
}
 8002f50:	b002      	add	sp, #8
 8002f52:	bd10      	pop	{r4, pc}
      return RES_PARERR;    /* Check parameter */
 8002f54:	2004      	movs	r0, #4
 8002f56:	e7fb      	b.n	8002f50 <disk_write+0x22>

08002f58 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002f58:	b538      	push	{r3, r4, r5, lr}
 8002f5a:	4615      	mov	r5, r2
  DRESULT status = RES_PARERR;
  switch (pdrv) {
 8002f5c:	4604      	mov	r4, r0
 8002f5e:	b9b0      	cbnz	r0, 8002f8e <disk_ioctl+0x36>
  case DEV_SPI_SD: /* SD CARD */
      switch (cmd) {
 8002f60:	2902      	cmp	r1, #2
 8002f62:	d00c      	beq.n	8002f7e <disk_ioctl+0x26>
 8002f64:	2903      	cmp	r1, #3
 8002f66:	d00f      	beq.n	8002f88 <disk_ioctl+0x30>
 8002f68:	2901      	cmp	r1, #1
 8002f6a:	d10b      	bne.n	8002f84 <disk_ioctl+0x2c>
      case GET_BLOCK_SIZE :
          *(DWORD * )buff = 1;
          break;

      case GET_SECTOR_COUNT:
  *(DWORD*)buff = SDCardInfo.CardCapacity/SDCardInfo.CardBlockSize;
 8002f6c:	4909      	ldr	r1, [pc, #36]	@ (8002f94 <disk_ioctl+0x3c>)
 8002f6e:	4603      	mov	r3, r0
 8002f70:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8002f72:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	@ 0x48
 8002f76:	f7fd ff85 	bl	8000e84 <__aeabi_uldivmod>
 8002f7a:	6028      	str	r0, [r5, #0]
          break;
 8002f7c:	e002      	b.n	8002f84 <disk_ioctl+0x2c>
          *(WORD * )buff = SD_BLOCK_SIZE;
 8002f7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f82:	8013      	strh	r3, [r2, #0]

  default:
      status = RES_PARERR;
  }
  return status;
}
 8002f84:	4620      	mov	r0, r4
 8002f86:	bd38      	pop	{r3, r4, r5, pc}
          *(DWORD * )buff = 1;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	6013      	str	r3, [r2, #0]
          break;
 8002f8c:	e7fa      	b.n	8002f84 <disk_ioctl+0x2c>
  DRESULT status = RES_PARERR;
 8002f8e:	2404      	movs	r4, #4
 8002f90:	e7f8      	b.n	8002f84 <disk_ioctl+0x2c>
 8002f92:	bf00      	nop
 8002f94:	200007c0 	.word	0x200007c0

08002f98 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f98:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd4 <MX_DMA_Init+0x3c>)
{
 8002f9a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f9c:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 8002f9e:	2106      	movs	r1, #6
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fa0:	f042 0201 	orr.w	r2, r2, #1
 8002fa4:	615a      	str	r2, [r3, #20]
 8002fa6:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 8002fa8:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 8002fb0:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fb2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 8002fb4:	f004 f952 	bl	800725c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002fb8:	200b      	movs	r0, #11
 8002fba:	f004 f97f 	bl	80072bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	200d      	movs	r0, #13
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	f004 f94a 	bl	800725c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002fc8:	200d      	movs	r0, #13

}
 8002fca:	b003      	add	sp, #12
 8002fcc:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002fd0:	f004 b974 	b.w	80072bc <HAL_NVIC_EnableIRQ>
 8002fd4:	40021000 	.word	0x40021000

08002fd8 <Set_Dosage>:
uint8_t read_i2c = 0;
uint16_t Dosage_set;
uint16_t Dosage_load;
uint16_t current_TreeNo = 0;

void Set_Dosage(){
 8002fd8:	b538      	push	{r3, r4, r5, lr}
	//刷新注药量设定值
		if(key_value_Refresh){
 8002fda:	4c3b      	ldr	r4, [pc, #236]	@ (80030c8 <Set_Dosage+0xf0>)
 8002fdc:	7823      	ldrb	r3, [r4, #0]
 8002fde:	b18b      	cbz	r3, 8003004 <Set_Dosage+0x2c>
			sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",Dosage_set);
 8002fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80030cc <Set_Dosage+0xf4>)
 8002fe2:	493b      	ldr	r1, [pc, #236]	@ (80030d0 <Set_Dosage+0xf8>)
 8002fe4:	881a      	ldrh	r2, [r3, #0]
 8002fe6:	483b      	ldr	r0, [pc, #236]	@ (80030d4 <Set_Dosage+0xfc>)
 8002fe8:	f007 fd8c 	bl	800ab04 <siprintf>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002fec:	4839      	ldr	r0, [pc, #228]	@ (80030d4 <Set_Dosage+0xfc>)
 8002fee:	f003 fcc5 	bl	800697c <USART1_Tx_HMIdata>
			key_value_Refresh = 0;
 8002ff2:	2300      	movs	r3, #0

			sprintf(Tx_Buffer,"Main.t0.txt=\"\"\xff\xff\xff");
 8002ff4:	4938      	ldr	r1, [pc, #224]	@ (80030d8 <Set_Dosage+0x100>)
 8002ff6:	4837      	ldr	r0, [pc, #220]	@ (80030d4 <Set_Dosage+0xfc>)
			key_value_Refresh = 0;
 8002ff8:	7023      	strb	r3, [r4, #0]
			sprintf(Tx_Buffer,"Main.t0.txt=\"\"\xff\xff\xff");
 8002ffa:	f007 fef2 	bl	800ade2 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002ffe:	4835      	ldr	r0, [pc, #212]	@ (80030d4 <Set_Dosage+0xfc>)
 8003000:	f003 fcbc 	bl	800697c <USART1_Tx_HMIdata>
		}
	//确认键按下，等待启动按键按下
		if(confirm_pressed && waiting_start){
 8003004:	4a35      	ldr	r2, [pc, #212]	@ (80030dc <Set_Dosage+0x104>)
 8003006:	4c36      	ldr	r4, [pc, #216]	@ (80030e0 <Set_Dosage+0x108>)
 8003008:	7811      	ldrb	r1, [r2, #0]
 800300a:	7823      	ldrb	r3, [r4, #0]
 800300c:	2900      	cmp	r1, #0
 800300e:	d030      	beq.n	8003072 <Set_Dosage+0x9a>
 8003010:	2b00      	cmp	r3, #0
 8003012:	d030      	beq.n	8003076 <Set_Dosage+0x9e>
			confirm_pressed = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	7013      	strb	r3, [r2, #0]
		}
	//等待START状态下START按键被按下，显示√
		if(waiting_start && start_pressed){
 8003018:	4b32      	ldr	r3, [pc, #200]	@ (80030e4 <Set_Dosage+0x10c>)
 800301a:	781a      	ldrb	r2, [r3, #0]
 800301c:	b35a      	cbz	r2, 8003076 <Set_Dosage+0x9e>
			waiting_start = 0;
 800301e:	2200      	movs	r2, #0
			start_pressed = 0;
 8003020:	701a      	strb	r2, [r3, #0]
			Injecting = 1;
 8003022:	2301      	movs	r3, #1
			waiting_start = 0;
 8003024:	7022      	strb	r2, [r4, #0]
			Injecting = 1;
 8003026:	4a30      	ldr	r2, [pc, #192]	@ (80030e8 <Set_Dosage+0x110>)
			first_run_clcDos = 1;
			current_TreeNo++;
 8003028:	4d30      	ldr	r5, [pc, #192]	@ (80030ec <Set_Dosage+0x114>)
			Injecting = 1;
 800302a:	7013      	strb	r3, [r2, #0]
			first_run_clcDos = 1;
 800302c:	4a30      	ldr	r2, [pc, #192]	@ (80030f0 <Set_Dosage+0x118>)

			AD24C02_Write2Byte(DOSAGE_SET_ADDRESS,&Dosage_load);
 800302e:	4931      	ldr	r1, [pc, #196]	@ (80030f4 <Set_Dosage+0x11c>)
			first_run_clcDos = 1;
 8003030:	7013      	strb	r3, [r2, #0]
			current_TreeNo++;
 8003032:	882b      	ldrh	r3, [r5, #0]
			AD24C02_Write2Byte(DOSAGE_SET_ADDRESS,&Dosage_load);
 8003034:	2010      	movs	r0, #16
			current_TreeNo++;
 8003036:	3301      	adds	r3, #1
 8003038:	802b      	strh	r3, [r5, #0]
			AD24C02_Write2Byte(DOSAGE_SET_ADDRESS,&Dosage_load);
 800303a:	f7fe f8cf 	bl	80011dc <AD24C02_Write2Byte>
			HAL_Delay(10);
 800303e:	200a      	movs	r0, #10
 8003040:	f003 fddc 	bl	8006bfc <HAL_Delay>

			sprintf(Tx_Buffer,"Main.t8.txt=\"√\"\xff\xff\xff");
 8003044:	492c      	ldr	r1, [pc, #176]	@ (80030f8 <Set_Dosage+0x120>)
 8003046:	4823      	ldr	r0, [pc, #140]	@ (80030d4 <Set_Dosage+0xfc>)
 8003048:	f007 fecb 	bl	800ade2 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800304c:	4821      	ldr	r0, [pc, #132]	@ (80030d4 <Set_Dosage+0xfc>)
 800304e:	f003 fc95 	bl	800697c <USART1_Tx_HMIdata>

			sprintf(Tx_Buffer,"Main.t0.txt=\"\"\xff\xff\xff");
 8003052:	4921      	ldr	r1, [pc, #132]	@ (80030d8 <Set_Dosage+0x100>)
 8003054:	481f      	ldr	r0, [pc, #124]	@ (80030d4 <Set_Dosage+0xfc>)
 8003056:	f007 fec4 	bl	800ade2 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800305a:	481e      	ldr	r0, [pc, #120]	@ (80030d4 <Set_Dosage+0xfc>)
 800305c:	f003 fc8e 	bl	800697c <USART1_Tx_HMIdata>

			sprintf(Tx_Buffer,"Main.t19.txt=\"%04d\"\xff\xff\xff",current_TreeNo);
 8003060:	882a      	ldrh	r2, [r5, #0]
 8003062:	4926      	ldr	r1, [pc, #152]	@ (80030fc <Set_Dosage+0x124>)
 8003064:	481b      	ldr	r0, [pc, #108]	@ (80030d4 <Set_Dosage+0xfc>)
 8003066:	f007 fd4d 	bl	800ab04 <siprintf>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800306a:	481a      	ldr	r0, [pc, #104]	@ (80030d4 <Set_Dosage+0xfc>)
 800306c:	f003 fc86 	bl	800697c <USART1_Tx_HMIdata>
 8003070:	e001      	b.n	8003076 <Set_Dosage+0x9e>
		if(waiting_start && start_pressed){
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1d0      	bne.n	8003018 <Set_Dosage+0x40>
		}
	//等待START时间超时，√消失，需要重新按下确认键
		if(waiting_start_timeout){
 8003076:	4a22      	ldr	r2, [pc, #136]	@ (8003100 <Set_Dosage+0x128>)
 8003078:	7813      	ldrb	r3, [r2, #0]
 800307a:	b14b      	cbz	r3, 8003090 <Set_Dosage+0xb8>
			waiting_start_timeout = 0;
 800307c:	2300      	movs	r3, #0
			waiting_start = 0;

			sprintf(Tx_Buffer,"Main.t8.txt=\"\"\xff\xff\xff");
 800307e:	4921      	ldr	r1, [pc, #132]	@ (8003104 <Set_Dosage+0x12c>)
 8003080:	4814      	ldr	r0, [pc, #80]	@ (80030d4 <Set_Dosage+0xfc>)
			waiting_start_timeout = 0;
 8003082:	7013      	strb	r3, [r2, #0]
			waiting_start = 0;
 8003084:	7023      	strb	r3, [r4, #0]
			sprintf(Tx_Buffer,"Main.t8.txt=\"\"\xff\xff\xff");
 8003086:	f007 feac 	bl	800ade2 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800308a:	4812      	ldr	r0, [pc, #72]	@ (80030d4 <Set_Dosage+0xfc>)
 800308c:	f003 fc76 	bl	800697c <USART1_Tx_HMIdata>
		}

		//Q_SET按键按下，读取上次保存的剂量值
		if(read_i2c && !waiting_start && !Injecting){
 8003090:	4a1d      	ldr	r2, [pc, #116]	@ (8003108 <Set_Dosage+0x130>)
 8003092:	7813      	ldrb	r3, [r2, #0]
 8003094:	b1b3      	cbz	r3, 80030c4 <Set_Dosage+0xec>
 8003096:	4914      	ldr	r1, [pc, #80]	@ (80030e8 <Set_Dosage+0x110>)
 8003098:	7823      	ldrb	r3, [r4, #0]
 800309a:	7809      	ldrb	r1, [r1, #0]
 800309c:	430b      	orrs	r3, r1
 800309e:	d111      	bne.n	80030c4 <Set_Dosage+0xec>
			read_i2c = 0;
			AD24C02_Read2Byte(DOSAGE_SET_ADDRESS,&Dosage_val);
 80030a0:	4c1a      	ldr	r4, [pc, #104]	@ (800310c <Set_Dosage+0x134>)
 80030a2:	2010      	movs	r0, #16
 80030a4:	4621      	mov	r1, r4
			read_i2c = 0;
 80030a6:	7013      	strb	r3, [r2, #0]
			AD24C02_Read2Byte(DOSAGE_SET_ADDRESS,&Dosage_val);
 80030a8:	f7fe f8a9 	bl	80011fe <AD24C02_Read2Byte>
			Dosage_set = Dosage_val;
 80030ac:	8822      	ldrh	r2, [r4, #0]
 80030ae:	4b07      	ldr	r3, [pc, #28]	@ (80030cc <Set_Dosage+0xf4>)
			sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",Dosage_set);
 80030b0:	4907      	ldr	r1, [pc, #28]	@ (80030d0 <Set_Dosage+0xf8>)
 80030b2:	4808      	ldr	r0, [pc, #32]	@ (80030d4 <Set_Dosage+0xfc>)
			Dosage_set = Dosage_val;
 80030b4:	801a      	strh	r2, [r3, #0]
			sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",Dosage_set);
 80030b6:	f007 fd25 	bl	800ab04 <siprintf>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
		}
}
 80030ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80030be:	4805      	ldr	r0, [pc, #20]	@ (80030d4 <Set_Dosage+0xfc>)
 80030c0:	f003 bc5c 	b.w	800697c <USART1_Tx_HMIdata>
}
 80030c4:	bd38      	pop	{r3, r4, r5, pc}
 80030c6:	bf00      	nop
 80030c8:	20000917 	.word	0x20000917
 80030cc:	200008b6 	.word	0x200008b6
 80030d0:	0800dadf 	.word	0x0800dadf
 80030d4:	20000b7e 	.word	0x20000b7e
 80030d8:	0800daf1 	.word	0x0800daf1
 80030dc:	2000091f 	.word	0x2000091f
 80030e0:	20000920 	.word	0x20000920
 80030e4:	2000091e 	.word	0x2000091e
 80030e8:	20000934 	.word	0x20000934
 80030ec:	200008b2 	.word	0x200008b2
 80030f0:	200008b9 	.word	0x200008b9
 80030f4:	200008b4 	.word	0x200008b4
 80030f8:	0800db03 	.word	0x0800db03
 80030fc:	0800d61f 	.word	0x0800d61f
 8003100:	20000a3d 	.word	0x20000a3d
 8003104:	0800d78d 	.word	0x0800d78d
 8003108:	200008b8 	.word	0x200008b8
 800310c:	200008ba 	.word	0x200008ba

08003110 <Refresh_counter>:

void Refresh_counter(){
 8003110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	AD24C02_Write2Byte(SUM_DOSAGE_ADDRESS,&total_inject_Dosage);
 8003112:	4e19      	ldr	r6, [pc, #100]	@ (8003178 <Refresh_counter+0x68>)
	HAL_Delay(10);
	AD24C02_Write2Byte(TOTAL_TREE_ADDRESS,&total_Times);
 8003114:	4f19      	ldr	r7, [pc, #100]	@ (800317c <Refresh_counter+0x6c>)
	AD24C02_Write2Byte(SUM_DOSAGE_ADDRESS,&total_inject_Dosage);
 8003116:	4631      	mov	r1, r6
 8003118:	2020      	movs	r0, #32
 800311a:	f7fe f85f 	bl	80011dc <AD24C02_Write2Byte>
	HAL_Delay(10);
 800311e:	200a      	movs	r0, #10
 8003120:	f003 fd6c 	bl	8006bfc <HAL_Delay>
	HAL_Delay(10);
	AD24C02_Write2Byte(CURRENT_TREE_NUMBER,&current_TreeNo);
 8003124:	4d16      	ldr	r5, [pc, #88]	@ (8003180 <Refresh_counter+0x70>)
	AD24C02_Write2Byte(TOTAL_TREE_ADDRESS,&total_Times);
 8003126:	4639      	mov	r1, r7
 8003128:	2030      	movs	r0, #48	@ 0x30
 800312a:	f7fe f857 	bl	80011dc <AD24C02_Write2Byte>
	HAL_Delay(10);
 800312e:	200a      	movs	r0, #10
	HAL_Delay(10);

	sprintf(Tx_Buffer,"Main.n2.val=%d\xff\xff\xff",total_Times);
 8003130:	4c14      	ldr	r4, [pc, #80]	@ (8003184 <Refresh_counter+0x74>)
	HAL_Delay(10);
 8003132:	f003 fd63 	bl	8006bfc <HAL_Delay>
	AD24C02_Write2Byte(CURRENT_TREE_NUMBER,&current_TreeNo);
 8003136:	4629      	mov	r1, r5
 8003138:	2040      	movs	r0, #64	@ 0x40
 800313a:	f7fe f84f 	bl	80011dc <AD24C02_Write2Byte>
	HAL_Delay(10);
 800313e:	200a      	movs	r0, #10
 8003140:	f003 fd5c 	bl	8006bfc <HAL_Delay>
	sprintf(Tx_Buffer,"Main.n2.val=%d\xff\xff\xff",total_Times);
 8003144:	883a      	ldrh	r2, [r7, #0]
 8003146:	4910      	ldr	r1, [pc, #64]	@ (8003188 <Refresh_counter+0x78>)
 8003148:	4620      	mov	r0, r4
 800314a:	f007 fcdb 	bl	800ab04 <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800314e:	4620      	mov	r0, r4
 8003150:	f003 fc14 	bl	800697c <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"Main.n3.val=%d\xff\xff\xff",total_inject_Dosage);
 8003154:	8832      	ldrh	r2, [r6, #0]
 8003156:	490d      	ldr	r1, [pc, #52]	@ (800318c <Refresh_counter+0x7c>)
 8003158:	4620      	mov	r0, r4
 800315a:	f007 fcd3 	bl	800ab04 <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800315e:	4620      	mov	r0, r4
 8003160:	f003 fc0c 	bl	800697c <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"Main.t19.txt=\"%04d\"\xff\xff\xff",current_TreeNo);
 8003164:	4620      	mov	r0, r4
 8003166:	882a      	ldrh	r2, [r5, #0]
 8003168:	4909      	ldr	r1, [pc, #36]	@ (8003190 <Refresh_counter+0x80>)
 800316a:	f007 fccb 	bl	800ab04 <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800316e:	4620      	mov	r0, r4
}
 8003170:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8003174:	f003 bc02 	b.w	800697c <USART1_Tx_HMIdata>
 8003178:	20000a40 	.word	0x20000a40
 800317c:	20000a3e 	.word	0x20000a3e
 8003180:	200008b2 	.word	0x200008b2
 8003184:	20000b7e 	.word	0x20000b7e
 8003188:	0800d5fb 	.word	0x0800d5fb
 800318c:	0800d60d 	.word	0x0800d60d
 8003190:	0800d61f 	.word	0x0800d61f

08003194 <Refresh_Dosage>:

void Refresh_Dosage(){
 8003194:	b508      	push	{r3, lr}
	uint16_t RemainingDosage = 0;
	RemainingDosage = RemainingTimes * 2;

	if(Injecting){
 8003196:	4b0c      	ldr	r3, [pc, #48]	@ (80031c8 <Refresh_Dosage+0x34>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	b1a3      	cbz	r3, 80031c6 <Refresh_Dosage+0x32>
	RemainingDosage = RemainingTimes * 2;
 800319c:	4b0b      	ldr	r3, [pc, #44]	@ (80031cc <Refresh_Dosage+0x38>)
		sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",RemainingDosage);
 800319e:	490c      	ldr	r1, [pc, #48]	@ (80031d0 <Refresh_Dosage+0x3c>)
	RemainingDosage = RemainingTimes * 2;
 80031a0:	781a      	ldrb	r2, [r3, #0]
		sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",RemainingDosage);
 80031a2:	480c      	ldr	r0, [pc, #48]	@ (80031d4 <Refresh_Dosage+0x40>)
 80031a4:	0052      	lsls	r2, r2, #1
 80031a6:	f007 fcad 	bl	800ab04 <siprintf>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80031aa:	480a      	ldr	r0, [pc, #40]	@ (80031d4 <Refresh_Dosage+0x40>)
 80031ac:	f003 fbe6 	bl	800697c <USART1_Tx_HMIdata>

		sprintf(Tx_Buffer,"Main.t0.txt=\"正在注药\"\xff\xff\xff");
 80031b0:	4909      	ldr	r1, [pc, #36]	@ (80031d8 <Refresh_Dosage+0x44>)
 80031b2:	4808      	ldr	r0, [pc, #32]	@ (80031d4 <Refresh_Dosage+0x40>)
 80031b4:	f007 fe15 	bl	800ade2 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80031b8:	4806      	ldr	r0, [pc, #24]	@ (80031d4 <Refresh_Dosage+0x40>)
 80031ba:	f003 fbdf 	bl	800697c <USART1_Tx_HMIdata>

		Refresh_counter();
	}
}
 80031be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Refresh_counter();
 80031c2:	f7ff bfa5 	b.w	8003110 <Refresh_counter>
}
 80031c6:	bd08      	pop	{r3, pc}
 80031c8:	20000934 	.word	0x20000934
 80031cc:	20000a44 	.word	0x20000a44
 80031d0:	0800dadf 	.word	0x0800dadf
 80031d4:	20000b7e 	.word	0x20000b7e
 80031d8:	0800db18 	.word	0x0800db18

080031dc <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 80031dc:	6800      	ldr	r0, [r0, #0]
 80031de:	4770      	bx	lr

080031e0 <st_dword>:
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80031e0:	0a0b      	lsrs	r3, r1, #8
 80031e2:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80031e4:	7043      	strb	r3, [r0, #1]
 80031e6:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80031e8:	0e09      	lsrs	r1, r1, #24
 80031ea:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80031ec:	70c1      	strb	r1, [r0, #3]
}
 80031ee:	4770      	bx	lr

080031f0 <chk_share>:

static FRESULT chk_share (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read mode open, 1:Write mode open, 2:Delete or rename) */
)
{
 80031f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search open object table for the object */
	be = 0;
 80031f2:	2400      	movs	r4, #0
 80031f4:	4b14      	ldr	r3, [pc, #80]	@ (8003248 <chk_share+0x58>)
	for (i = 0; i < FF_FS_LOCK; i++) {
 80031f6:	4622      	mov	r2, r4
 80031f8:	461d      	mov	r5, r3
		if (Files[i].fs) {	/* Existing entry */
 80031fa:	681e      	ldr	r6, [r3, #0]
 80031fc:	b16e      	cbz	r6, 800321a <chk_share+0x2a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 80031fe:	6807      	ldr	r7, [r0, #0]
 8003200:	42be      	cmp	r6, r7
 8003202:	d10b      	bne.n	800321c <chk_share+0x2c>
 8003204:	685f      	ldr	r7, [r3, #4]
 8003206:	6886      	ldr	r6, [r0, #8]
 8003208:	42b7      	cmp	r7, r6
 800320a:	d107      	bne.n	800321c <chk_share+0x2c>
				Files[i].clu == dp->obj.sclust &&
 800320c:	689f      	ldr	r7, [r3, #8]
 800320e:	6946      	ldr	r6, [r0, #20]
 8003210:	42b7      	cmp	r7, r6
 8003212:	d103      	bne.n	800321c <chk_share+0x2c>
	if (i == FF_FS_LOCK) {	/* The object has not been opened */
		return (!be && acc != 2) ? FR_TOO_MANY_OPEN_FILES : FR_OK;	/* Is there a blank entry for new object? */
	}

	/* The object was opened. Reject any open against writing file and all write mode open */
	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003214:	b179      	cbz	r1, 8003236 <chk_share+0x46>
 8003216:	2010      	movs	r0, #16
 8003218:	e00c      	b.n	8003234 <chk_share+0x44>
			be = 1;
 800321a:	2401      	movs	r4, #1
	for (i = 0; i < FF_FS_LOCK; i++) {
 800321c:	3201      	adds	r2, #1
 800321e:	2a04      	cmp	r2, #4
 8003220:	f103 0310 	add.w	r3, r3, #16
 8003224:	d1e9      	bne.n	80031fa <chk_share+0xa>
		return (!be && acc != 2) ? FR_TOO_MANY_OPEN_FILES : FR_OK;	/* Is there a blank entry for new object? */
 8003226:	b10c      	cbz	r4, 800322c <chk_share+0x3c>
 8003228:	2000      	movs	r0, #0
 800322a:	e003      	b.n	8003234 <chk_share+0x44>
 800322c:	2902      	cmp	r1, #2
 800322e:	bf0c      	ite	eq
 8003230:	2000      	moveq	r0, #0
 8003232:	2012      	movne	r0, #18
}
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003236:	eb05 1302 	add.w	r3, r5, r2, lsl #4
 800323a:	68d8      	ldr	r0, [r3, #12]
 800323c:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 8003240:	4258      	negs	r0, r3
 8003242:	4158      	adcs	r0, r3
 8003244:	0100      	lsls	r0, r0, #4
 8003246:	e7f5      	b.n	8003234 <chk_share+0x44>
 8003248:	200008bc 	.word	0x200008bc

0800324c <inc_share>:

static UINT inc_share (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800324c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800324e:	4c1d      	ldr	r4, [pc, #116]	@ (80032c4 <inc_share+0x78>)
	UINT i;


	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 8003250:	2300      	movs	r3, #0
 8003252:	4622      	mov	r2, r4
		if (Files[i].fs == dp->obj.fs
 8003254:	6807      	ldr	r7, [r0, #0]
 8003256:	6825      	ldr	r5, [r4, #0]
 8003258:	42bd      	cmp	r5, r7
 800325a:	d107      	bne.n	800326c <inc_share+0x20>
		 && Files[i].clu == dp->obj.sclust
 800325c:	6866      	ldr	r6, [r4, #4]
 800325e:	6885      	ldr	r5, [r0, #8]
 8003260:	42ae      	cmp	r6, r5
 8003262:	d103      	bne.n	800326c <inc_share+0x20>
		 && Files[i].ofs == dp->dptr) break;
 8003264:	68a6      	ldr	r6, [r4, #8]
 8003266:	6945      	ldr	r5, [r0, #20]
 8003268:	42ae      	cmp	r6, r5
 800326a:	d015      	beq.n	8003298 <inc_share+0x4c>
	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 800326c:	3301      	adds	r3, #1
 800326e:	2b04      	cmp	r3, #4
 8003270:	f104 0410 	add.w	r4, r4, #16
 8003274:	d1ef      	bne.n	8003256 <inc_share+0xa>
 8003276:	2300      	movs	r3, #0
	}

	if (i == FF_FS_LOCK) {			/* Not opened. Register it as new. */
		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 8003278:	011e      	lsls	r6, r3, #4
 800327a:	5995      	ldr	r5, [r2, r6]
 800327c:	eb02 1403 	add.w	r4, r2, r3, lsl #4
 8003280:	b9c5      	cbnz	r5, 80032b4 <inc_share+0x68>
		if (i == FF_FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8003282:	5197      	str	r7, [r2, r6]
		Files[i].clu = dp->obj.sclust;
 8003284:	6886      	ldr	r6, [r0, #8]
		Files[i].ofs = dp->dptr;
 8003286:	6940      	ldr	r0, [r0, #20]
		Files[i].ctr = 0;
	}

	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003288:	2901      	cmp	r1, #1
		Files[i].ctr = 0;
 800328a:	e9c4 0502 	strd	r0, r5, [r4, #8]
		Files[i].clu = dp->obj.sclust;
 800328e:	6066      	str	r6, [r4, #4]
	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003290:	d107      	bne.n	80032a2 <inc_share+0x56>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003292:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003296:	e008      	b.n	80032aa <inc_share+0x5e>
	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003298:	eb02 1003 	add.w	r0, r2, r3, lsl #4
 800329c:	2901      	cmp	r1, #1
 800329e:	68c0      	ldr	r0, [r0, #12]
 80032a0:	d00d      	beq.n	80032be <inc_share+0x72>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80032a2:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 80032a6:	68c9      	ldr	r1, [r1, #12]
 80032a8:	3101      	adds	r1, #1
 80032aa:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80032ae:	60d1      	str	r1, [r2, #12]

	return i + 1;	/* Index number origin from 1 */
 80032b0:	1c58      	adds	r0, r3, #1
}
 80032b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 80032b4:	3301      	adds	r3, #1
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d1de      	bne.n	8003278 <inc_share+0x2c>
		if (i == FF_FS_LOCK) return 0;	/* No free entry to register (int err) */
 80032ba:	2000      	movs	r0, #0
 80032bc:	e7f9      	b.n	80032b2 <inc_share+0x66>
	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 80032be:	2800      	cmp	r0, #0
 80032c0:	d0e7      	beq.n	8003292 <inc_share+0x46>
 80032c2:	e7fa      	b.n	80032ba <inc_share+0x6e>
 80032c4:	200008bc 	.word	0x200008bc

080032c8 <dec_share>:
{
	UINT n;
	FRESULT res;


	if (--i < FF_FS_LOCK) {	/* Index number origin from 0 */
 80032c8:	3801      	subs	r0, #1
 80032ca:	2803      	cmp	r0, #3
 80032cc:	d814      	bhi.n	80032f8 <dec_share+0x30>
		n = Files[i].ctr;
 80032ce:	4a0b      	ldr	r2, [pc, #44]	@ (80032fc <dec_share+0x34>)
 80032d0:	0101      	lsls	r1, r0, #4
 80032d2:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 80032d6:	68c3      	ldr	r3, [r0, #12]
		if (n == 0x100) n = 0;	/* If write mode open, delete the object semaphore */
 80032d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032dc:	d104      	bne.n	80032e8 <dec_share+0x20>
		if (n > 0) n--;			/* Decrement read mode open count */
		Files[i].ctr = n;
 80032de:	2300      	movs	r3, #0
 80032e0:	60c3      	str	r3, [r0, #12]
		if (n == 0) {			/* Delete the object semaphore if open count becomes zero */
			Files[i].fs = 0;	/* Free the entry <<<If this memory write operation is not in atomic, FF_FS_REENTRANT == 1 and FF_VOLUMES > 1, there is a potential error in this process >>> */
 80032e2:	2300      	movs	r3, #0
 80032e4:	5053      	str	r3, [r2, r1]
 80032e6:	e005      	b.n	80032f4 <dec_share+0x2c>
		if (n > 0) n--;			/* Decrement read mode open count */
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0fa      	beq.n	80032e2 <dec_share+0x1a>
 80032ec:	3b01      	subs	r3, #1
		Files[i].ctr = n;
 80032ee:	60c3      	str	r3, [r0, #12]
		if (n == 0) {			/* Delete the object semaphore if open count becomes zero */
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f6      	beq.n	80032e2 <dec_share+0x1a>
		}
		res = FR_OK;
 80032f4:	2000      	movs	r0, #0
 80032f6:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;		/* Invalid index number */
 80032f8:	2002      	movs	r0, #2
	}
	return res;
}
 80032fa:	4770      	bx	lr
 80032fc:	200008bc 	.word	0x200008bc

08003300 <clear_share>:


static void clear_share (	/* Clear all lock entries of the volume */
	FATFS* fs
)
{
 8003300:	2300      	movs	r3, #0
	UINT i;

	for (i = 0; i < FF_FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003302:	4619      	mov	r1, r3
{
 8003304:	b510      	push	{r4, lr}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003306:	4a05      	ldr	r2, [pc, #20]	@ (800331c <clear_share+0x1c>)
 8003308:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800330c:	4284      	cmp	r4, r0
 800330e:	bf08      	it	eq
 8003310:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < FF_FS_LOCK; i++) {
 8003314:	3304      	adds	r3, #4
 8003316:	2b10      	cmp	r3, #16
 8003318:	d1f6      	bne.n	8003308 <clear_share+0x8>
	}
}
 800331a:	bd10      	pop	{r4, pc}
 800331c:	200008bc 	.word	0x200008bc

08003320 <clst2sect>:
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8003320:	6943      	ldr	r3, [r0, #20]
	clst -= 2;		/* Cluster number is origin from 2 */
 8003322:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8003324:	3b02      	subs	r3, #2
 8003326:	428b      	cmp	r3, r1
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8003328:	bf83      	ittte	hi
 800332a:	8943      	ldrhhi	r3, [r0, #10]
 800332c:	6a80      	ldrhi	r0, [r0, #40]	@ 0x28
 800332e:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8003332:	2000      	movls	r0, #0
}
 8003334:	4770      	bx	lr

08003336 <clmt_clust>:
	DWORD *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003336:	6802      	ldr	r2, [r0, #0]
 8003338:	0a49      	lsrs	r1, r1, #9
 800333a:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800333c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800333e:	fbb1 f1f2 	udiv	r1, r1, r2
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003342:	3304      	adds	r3, #4
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003344:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003346:	b130      	cbz	r0, 8003356 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8003348:	4281      	cmp	r1, r0
 800334a:	d302      	bcc.n	8003352 <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 800334c:	1a09      	subs	r1, r1, r0
 800334e:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003350:	e7f8      	b.n	8003344 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8003352:	6858      	ldr	r0, [r3, #4]
 8003354:	4408      	add	r0, r1
}
 8003356:	4770      	bx	lr

08003358 <get_ldnumber>:
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *vsp;
	char vchr;
#endif

	tt = tp = *path;
 8003358:	6802      	ldr	r2, [r0, #0]
{
 800335a:	b510      	push	{r4, lr}
 800335c:	4604      	mov	r4, r0
	if (!tp) return -1;		/* Invalid path name? */
 800335e:	b162      	cbz	r2, 800337a <get_ldnumber+0x22>
 8003360:	4611      	mov	r1, r2
	do {					/* Find a colon in the path */
		chr = *tt++;
 8003362:	f811 3b01 	ldrb.w	r3, [r1], #1
	} while (!IsTerminator(chr) && chr != ':');
 8003366:	2b20      	cmp	r3, #32
 8003368:	d911      	bls.n	800338e <get_ldnumber+0x36>
 800336a:	2b3a      	cmp	r3, #58	@ 0x3a
 800336c:	d1f9      	bne.n	8003362 <get_ldnumber+0xa>

	if (chr == ':') {	/* Is there a DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is it a numeric volume ID + colon? */
 800336e:	7813      	ldrb	r3, [r2, #0]
 8003370:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 8003374:	b2c3      	uxtb	r3, r0
 8003376:	2b09      	cmp	r3, #9
 8003378:	d902      	bls.n	8003380 <get_ldnumber+0x28>
	if (!tp) return -1;		/* Invalid path name? */
 800337a:	f04f 30ff 	mov.w	r0, #4294967295
 800337e:	e005      	b.n	800338c <get_ldnumber+0x34>
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is it a numeric volume ID + colon? */
 8003380:	3202      	adds	r2, #2
 8003382:	4291      	cmp	r1, r2
 8003384:	d1f9      	bne.n	800337a <get_ldnumber+0x22>
					if (IsLower(chr)) chr -= 0x20;
				} while (vchr && (TCHAR)vchr == chr);
			} while ((vchr || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i >= FF_VOLUMES) return -1;	/* Not found or invalid volume ID */
 8003386:	2801      	cmp	r0, #1
 8003388:	dcf7      	bgt.n	800337a <get_ldnumber+0x22>
		*path = tt;		/* Snip the drive prefix off */
 800338a:	6021      	str	r1, [r4, #0]
#if FF_FS_RPATH != 0
	return (int)CurrVol;	/* Default drive is current drive */
#else
	return 0;				/* Default drive is 0 */
#endif
}
 800338c:	bd10      	pop	{r4, pc}
	return 0;				/* Default drive is 0 */
 800338e:	2000      	movs	r0, #0
 8003390:	e7fc      	b.n	800338c <get_ldnumber+0x34>

08003392 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8003392:	b538      	push	{r3, r4, r5, lr}
 8003394:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8003396:	4604      	mov	r4, r0
 8003398:	b918      	cbnz	r0, 80033a2 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 800339a:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800339c:	2300      	movs	r3, #0
 800339e:	602b      	str	r3, [r5, #0]
	return res;
}
 80033a0:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80033a2:	6803      	ldr	r3, [r0, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f8      	beq.n	800339a <validate+0x8>
 80033a8:	781a      	ldrb	r2, [r3, #0]
 80033aa:	2a00      	cmp	r2, #0
 80033ac:	d0f5      	beq.n	800339a <validate+0x8>
 80033ae:	8881      	ldrh	r1, [r0, #4]
 80033b0:	88da      	ldrh	r2, [r3, #6]
 80033b2:	4291      	cmp	r1, r2
 80033b4:	d1f1      	bne.n	800339a <validate+0x8>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
 80033b6:	7858      	ldrb	r0, [r3, #1]
 80033b8:	f7ff fd96 	bl	8002ee8 <disk_status>
 80033bc:	f010 0001 	ands.w	r0, r0, #1
 80033c0:	d1eb      	bne.n	800339a <validate+0x8>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	e7eb      	b.n	800339e <validate+0xc>

080033c6 <sync_window>:
{
 80033c6:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 80033c8:	7903      	ldrb	r3, [r0, #4]
{
 80033ca:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
 80033cc:	b1c3      	cbz	r3, 8003400 <sync_window+0x3a>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 80033ce:	f100 0530 	add.w	r5, r0, #48	@ 0x30
 80033d2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80033d4:	2301      	movs	r3, #1
 80033d6:	4629      	mov	r1, r5
 80033d8:	7840      	ldrb	r0, [r0, #1]
 80033da:	f7ff fda8 	bl	8002f2e <disk_write>
 80033de:	b988      	cbnz	r0, 8003404 <sync_window+0x3e>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 80033e0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80033e2:	6a23      	ldr	r3, [r4, #32]
 80033e4:	69a2      	ldr	r2, [r4, #24]
 80033e6:	1acb      	subs	r3, r1, r3
 80033e8:	4293      	cmp	r3, r2
			fs->wflag = 0;	/* Clear window dirty flag */
 80033ea:	7120      	strb	r0, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 80033ec:	d208      	bcs.n	8003400 <sync_window+0x3a>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 80033ee:	78e3      	ldrb	r3, [r4, #3]
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d105      	bne.n	8003400 <sync_window+0x3a>
 80033f4:	440a      	add	r2, r1
 80033f6:	2301      	movs	r3, #1
 80033f8:	4629      	mov	r1, r5
 80033fa:	7860      	ldrb	r0, [r4, #1]
 80033fc:	f7ff fd97 	bl	8002f2e <disk_write>
	FRESULT res = FR_OK;
 8003400:	2000      	movs	r0, #0
}
 8003402:	bd38      	pop	{r3, r4, r5, pc}
			res = FR_DISK_ERR;
 8003404:	2001      	movs	r0, #1
 8003406:	e7fc      	b.n	8003402 <sync_window+0x3c>

08003408 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 8003408:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800340c:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 800340e:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8003410:	7803      	ldrb	r3, [r0, #0]
 8003412:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003414:	bf01      	itttt	eq
 8003416:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8003418:	750a      	strbeq	r2, [r1, #20]
 800341a:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 800341c:	754a      	strbeq	r2, [r1, #21]
}
 800341e:	4770      	bx	lr

08003420 <move_window>:
{
 8003420:	b538      	push	{r3, r4, r5, lr}
	if (sect != fs->winsect) {	/* Window offset changed? */
 8003422:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 8003424:	4605      	mov	r5, r0
	if (sect != fs->winsect) {	/* Window offset changed? */
 8003426:	428b      	cmp	r3, r1
{
 8003428:	460c      	mov	r4, r1
	if (sect != fs->winsect) {	/* Window offset changed? */
 800342a:	d010      	beq.n	800344e <move_window+0x2e>
		res = sync_window(fs);		/* Flush the window */
 800342c:	f7ff ffcb 	bl	80033c6 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003430:	b960      	cbnz	r0, 800344c <move_window+0x2c>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8003432:	4622      	mov	r2, r4
 8003434:	2301      	movs	r3, #1
 8003436:	7868      	ldrb	r0, [r5, #1]
 8003438:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 800343c:	f7ff fd62 	bl	8002f04 <disk_read>
				res = FR_DISK_ERR;
 8003440:	2800      	cmp	r0, #0
 8003442:	bf1c      	itt	ne
 8003444:	f04f 34ff 	movne.w	r4, #4294967295
 8003448:	2001      	movne	r0, #1
			fs->winsect = sect;
 800344a:	62ec      	str	r4, [r5, #44]	@ 0x2c
}
 800344c:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 800344e:	2000      	movs	r0, #0
 8003450:	e7fc      	b.n	800344c <move_window+0x2c>
	...

08003454 <check_fs>:
{
 8003454:	b538      	push	{r3, r4, r5, lr}
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8003456:	2300      	movs	r3, #0
 8003458:	7103      	strb	r3, [r0, #4]
 800345a:	f04f 33ff 	mov.w	r3, #4294967295
 800345e:	62c3      	str	r3, [r0, #44]	@ 0x2c
{
 8003460:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8003462:	f7ff ffdd 	bl	8003420 <move_window>
 8003466:	2800      	cmp	r0, #0
 8003468:	d13e      	bne.n	80034e8 <check_fs+0x94>
	b = fs->win[BS_JmpBoot];
 800346a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800346e:	f8b4 522e 	ldrh.w	r5, [r4, #558]	@ 0x22e
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 8003472:	2beb      	cmp	r3, #235	@ 0xeb
 8003474:	d003      	beq.n	800347e <check_fs+0x2a>
 8003476:	3318      	adds	r3, #24
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b01      	cmp	r3, #1
 800347c:	d82d      	bhi.n	80034da <check_fs+0x86>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800347e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8003482:	429d      	cmp	r5, r3
 8003484:	d106      	bne.n	8003494 <check_fs+0x40>
 8003486:	2208      	movs	r2, #8
 8003488:	4919      	ldr	r1, [pc, #100]	@ (80034f0 <check_fs+0x9c>)
 800348a:	f104 0082 	add.w	r0, r4, #130	@ 0x82
 800348e:	f007 fb9c 	bl	800abca <memcmp>
 8003492:	b340      	cbz	r0, 80034e6 <check_fs+0x92>
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 8003494:	f8b4 303b 	ldrh.w	r3, [r4, #59]	@ 0x3b
 8003498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800349c:	d11d      	bne.n	80034da <check_fs+0x86>
		b = fs->win[BPB_SecPerClus];
 800349e:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 80034a2:	b1d3      	cbz	r3, 80034da <check_fs+0x86>
 80034a4:	1e5a      	subs	r2, r3, #1
 80034a6:	421a      	tst	r2, r3
 80034a8:	d117      	bne.n	80034da <check_fs+0x86>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of number of reserved sectors (MNBZ) */
 80034aa:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80034ac:	b1ab      	cbz	r3, 80034da <check_fs+0x86>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of number of FATs (1 or 2) */
 80034ae:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80034b2:	3b01      	subs	r3, #1
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d810      	bhi.n	80034da <check_fs+0x86>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir size (MNBZ) */
 80034b8:	f8b4 3041 	ldrh.w	r3, [r4, #65]	@ 0x41
 80034bc:	b16b      	cbz	r3, 80034da <check_fs+0x86>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume size (>=128) */
 80034be:	f8b4 3043 	ldrh.w	r3, [r4, #67]	@ 0x43
 80034c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80034c4:	d806      	bhi.n	80034d4 <check_fs+0x80>
 80034c6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80034ca:	f7ff fe87 	bl	80031dc <ld_dword>
 80034ce:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80034d2:	d302      	bcc.n	80034da <check_fs+0x86>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 80034d4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80034d8:	b943      	cbnz	r3, 80034ec <check_fs+0x98>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (with valid or invalid BS) */
 80034da:	f64a 2055 	movw	r0, #43605	@ 0xaa55
 80034de:	4285      	cmp	r5, r0
 80034e0:	bf14      	ite	ne
 80034e2:	2003      	movne	r0, #3
 80034e4:	2002      	moveq	r0, #2
}
 80034e6:	bd38      	pop	{r3, r4, r5, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 80034e8:	2004      	movs	r0, #4
 80034ea:	e7fc      	b.n	80034e6 <check_fs+0x92>
			return 0;	/* It is an FAT32 VBR */
 80034ec:	2000      	movs	r0, #0
 80034ee:	e7fa      	b.n	80034e6 <check_fs+0x92>
 80034f0:	0800db5c 	.word	0x0800db5c

080034f4 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80034f4:	2901      	cmp	r1, #1
{
 80034f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034fa:	4605      	mov	r5, r0
 80034fc:	460e      	mov	r6, r1
 80034fe:	4614      	mov	r4, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003500:	d96e      	bls.n	80035e0 <put_fat+0xec>
 8003502:	6943      	ldr	r3, [r0, #20]
 8003504:	428b      	cmp	r3, r1
 8003506:	d96b      	bls.n	80035e0 <put_fat+0xec>
		switch (fs->fs_type) {
 8003508:	7803      	ldrb	r3, [r0, #0]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d03d      	beq.n	800358a <put_fat+0x96>
 800350e:	2b03      	cmp	r3, #3
 8003510:	d04d      	beq.n	80035ae <put_fat+0xba>
 8003512:	2b01      	cmp	r3, #1
 8003514:	d164      	bne.n	80035e0 <put_fat+0xec>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8003516:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800351a:	6a01      	ldr	r1, [r0, #32]
 800351c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8003520:	f7ff ff7e 	bl	8003420 <move_window>
			if (res != FR_OK) break;
 8003524:	bb38      	cbnz	r0, 8003576 <put_fat+0x82>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8003526:	f016 0601 	ands.w	r6, r6, #1
			p = fs->win + bc++ % SS(fs);
 800352a:	f105 0730 	add.w	r7, r5, #48	@ 0x30
 800352e:	f108 0901 	add.w	r9, r8, #1
 8003532:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8003536:	bf1f      	itttt	ne
 8003538:	f817 2008 	ldrbne.w	r2, [r7, r8]
 800353c:	0123      	lslne	r3, r4, #4
 800353e:	f003 03f0 	andne.w	r3, r3, #240	@ 0xf0
 8003542:	f002 020f 	andne.w	r2, r2, #15
 8003546:	bf14      	ite	ne
 8003548:	4313      	orrne	r3, r2
 800354a:	b2e3      	uxtbeq	r3, r4
 800354c:	f807 3008 	strb.w	r3, [r7, r8]
			fs->wflag = 1;
 8003550:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003552:	6a29      	ldr	r1, [r5, #32]
 8003554:	4628      	mov	r0, r5
			fs->wflag = 1;
 8003556:	712b      	strb	r3, [r5, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003558:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 800355c:	f7ff ff60 	bl	8003420 <move_window>
			if (res != FR_OK) break;
 8003560:	b948      	cbnz	r0, 8003576 <put_fat+0x82>
			p = fs->win + bc % SS(fs);
 8003562:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8003566:	b146      	cbz	r6, 800357a <put_fat+0x86>
 8003568:	f3c4 1407 	ubfx	r4, r4, #4, #8
 800356c:	f807 4009 	strb.w	r4, [r7, r9]
			fs->wflag = 1;
 8003570:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003572:	2000      	movs	r0, #0
			fs->wflag = 1;
 8003574:	712b      	strb	r3, [r5, #4]
}
 8003576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800357a:	f817 3009 	ldrb.w	r3, [r7, r9]
 800357e:	f3c4 2403 	ubfx	r4, r4, #8, #4
 8003582:	f023 030f 	bic.w	r3, r3, #15
 8003586:	431c      	orrs	r4, r3
 8003588:	e7f0      	b.n	800356c <put_fat+0x78>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800358a:	6a01      	ldr	r1, [r0, #32]
 800358c:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8003590:	f7ff ff46 	bl	8003420 <move_window>
			if (res != FR_OK) break;
 8003594:	2800      	cmp	r0, #0
 8003596:	d1ee      	bne.n	8003576 <put_fat+0x82>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8003598:	0076      	lsls	r6, r6, #1
 800359a:	f105 0330 	add.w	r3, r5, #48	@ 0x30
 800359e:	f406 76ff 	and.w	r6, r6, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 80035a2:	559c      	strb	r4, [r3, r6]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 80035a4:	199a      	adds	r2, r3, r6
	*ptr++ = (BYTE)val; val >>= 8;
 80035a6:	f3c4 2407 	ubfx	r4, r4, #8, #8
	*ptr++ = (BYTE)val;
 80035aa:	7054      	strb	r4, [r2, #1]
			break;
 80035ac:	e7e0      	b.n	8003570 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80035ae:	6a01      	ldr	r1, [r0, #32]
 80035b0:	eb01 11d6 	add.w	r1, r1, r6, lsr #7
 80035b4:	f7ff ff34 	bl	8003420 <move_window>
			if (res != FR_OK) break;
 80035b8:	2800      	cmp	r0, #0
 80035ba:	d1dc      	bne.n	8003576 <put_fat+0x82>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80035bc:	00b6      	lsls	r6, r6, #2
 80035be:	f105 0330 	add.w	r3, r5, #48	@ 0x30
 80035c2:	f406 76fe 	and.w	r6, r6, #508	@ 0x1fc
 80035c6:	4433      	add	r3, r6
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff fe07 	bl	80031dc <ld_dword>
 80035ce:	f024 4470 	bic.w	r4, r4, #4026531840	@ 0xf0000000
 80035d2:	f000 4170 	and.w	r1, r0, #4026531840	@ 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80035d6:	4321      	orrs	r1, r4
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff fe01 	bl	80031e0 <st_dword>
			break;
 80035de:	e7c7      	b.n	8003570 <put_fat+0x7c>
	FRESULT res = FR_INT_ERR;
 80035e0:	2002      	movs	r0, #2
 80035e2:	e7c8      	b.n	8003576 <put_fat+0x82>

080035e4 <dir_clear>:
{
 80035e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e6:	4605      	mov	r5, r0
 80035e8:	460e      	mov	r6, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80035ea:	f7ff feec 	bl	80033c6 <sync_window>
 80035ee:	4604      	mov	r4, r0
 80035f0:	b9f8      	cbnz	r0, 8003632 <dir_clear+0x4e>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80035f2:	4631      	mov	r1, r6
 80035f4:	4628      	mov	r0, r5
 80035f6:	f7ff fe93 	bl	8003320 <clst2sect>
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80035fa:	f105 0730 	add.w	r7, r5, #48	@ 0x30
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80035fe:	4606      	mov	r6, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
 8003600:	62e8      	str	r0, [r5, #44]	@ 0x2c
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8003602:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003606:	4621      	mov	r1, r4
 8003608:	4638      	mov	r0, r7
 800360a:	f007 faee 	bl	800abea <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800360e:	896b      	ldrh	r3, [r5, #10]
 8003610:	429c      	cmp	r4, r3
 8003612:	d304      	bcc.n	800361e <dir_clear+0x3a>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8003614:	8968      	ldrh	r0, [r5, #10]
 8003616:	1b00      	subs	r0, r0, r4
 8003618:	bf18      	it	ne
 800361a:	2001      	movne	r0, #1
}
 800361c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800361e:	2301      	movs	r3, #1
 8003620:	4639      	mov	r1, r7
 8003622:	7868      	ldrb	r0, [r5, #1]
 8003624:	1932      	adds	r2, r6, r4
 8003626:	f7ff fc82 	bl	8002f2e <disk_write>
 800362a:	2800      	cmp	r0, #0
 800362c:	d1f2      	bne.n	8003614 <dir_clear+0x30>
 800362e:	3401      	adds	r4, #1
 8003630:	e7ed      	b.n	800360e <dir_clear+0x2a>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003632:	2001      	movs	r0, #1
 8003634:	e7f2      	b.n	800361c <dir_clear+0x38>

08003636 <sync_fs>:
{
 8003636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003638:	4604      	mov	r4, r0
	res = sync_window(fs);
 800363a:	f7ff fec4 	bl	80033c6 <sync_window>
 800363e:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8003640:	2800      	cmp	r0, #0
 8003642:	d146      	bne.n	80036d2 <sync_fs+0x9c>
		if (fs->fsi_flag == 1) {	/* Allocation changed? */
 8003644:	7967      	ldrb	r7, [r4, #5]
 8003646:	2f01      	cmp	r7, #1
 8003648:	d13b      	bne.n	80036c2 <sync_fs+0x8c>
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
 800364a:	7823      	ldrb	r3, [r4, #0]
			fs->fsi_flag = 0;
 800364c:	7160      	strb	r0, [r4, #5]
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
 800364e:	2b03      	cmp	r3, #3
 8003650:	d137      	bne.n	80036c2 <sync_fs+0x8c>
				memset(fs->win, 0, sizeof fs->win);
 8003652:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8003656:	4601      	mov	r1, r0
 8003658:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800365c:	4630      	mov	r0, r6
 800365e:	f007 fac4 	bl	800abea <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8003662:	2352      	movs	r3, #82	@ 0x52
	*ptr++ = (BYTE)val;
 8003664:	2241      	movs	r2, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8003666:	2172      	movs	r1, #114	@ 0x72
 8003668:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800366c:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 8003670:	2361      	movs	r3, #97	@ 0x61
	*ptr++ = (BYTE)val;
 8003672:	f884 2033 	strb.w	r2, [r4, #51]	@ 0x33
	*ptr++ = (BYTE)val; val >>= 8;
 8003676:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
	*ptr++ = (BYTE)val;
 800367a:	f884 3217 	strb.w	r3, [r4, #535]	@ 0x217
	*ptr++ = (BYTE)val; val >>= 8;
 800367e:	f884 1214 	strb.w	r1, [r4, #532]	@ 0x214
	*ptr++ = (BYTE)val; val >>= 8;
 8003682:	f884 1215 	strb.w	r1, [r4, #533]	@ 0x215
	*ptr++ = (BYTE)val; val >>= 8;
 8003686:	f884 2216 	strb.w	r2, [r4, #534]	@ 0x216
				st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 800368a:	6921      	ldr	r1, [r4, #16]
 800368c:	f504 7006 	add.w	r0, r4, #536	@ 0x218
 8003690:	f7ff fda6 	bl	80031e0 <st_dword>
				st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8003694:	68e1      	ldr	r1, [r4, #12]
 8003696:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 800369a:	f7ff fda1 	bl	80031e0 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800369e:	2355      	movs	r3, #85	@ 0x55
 80036a0:	f884 3224 	strb.w	r3, [r4, #548]	@ 0x224
	*ptr++ = (BYTE)val;
 80036a4:	23aa      	movs	r3, #170	@ 0xaa
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 80036a6:	69e2      	ldr	r2, [r4, #28]
	*ptr++ = (BYTE)val;
 80036a8:	f884 3225 	strb.w	r3, [r4, #549]	@ 0x225
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 80036ac:	3201      	adds	r2, #1
 80036ae:	463b      	mov	r3, r7
 80036b0:	4631      	mov	r1, r6
 80036b2:	7860      	ldrb	r0, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 80036b4:	f884 5222 	strb.w	r5, [r4, #546]	@ 0x222
	*ptr++ = (BYTE)val; val >>= 8;
 80036b8:	f884 5223 	strb.w	r5, [r4, #547]	@ 0x223
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 80036bc:	62e2      	str	r2, [r4, #44]	@ 0x2c
 80036be:	f7ff fc36 	bl	8002f2e <disk_write>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80036c2:	2200      	movs	r2, #0
 80036c4:	7860      	ldrb	r0, [r4, #1]
 80036c6:	4611      	mov	r1, r2
 80036c8:	f7ff fc46 	bl	8002f58 <disk_ioctl>
 80036cc:	3800      	subs	r0, #0
 80036ce:	bf18      	it	ne
 80036d0:	2001      	movne	r0, #1
}
 80036d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080036d4 <mount_volume>:
	*rfs = 0;
 80036d4:	2300      	movs	r3, #0
{
 80036d6:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 80036d8:	600b      	str	r3, [r1, #0]
{
 80036da:	b085      	sub	sp, #20
 80036dc:	460e      	mov	r6, r1
 80036de:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 80036e0:	f7ff fe3a 	bl	8003358 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80036e4:	2800      	cmp	r0, #0
 80036e6:	f2c0 810a 	blt.w	80038fe <mount_volume+0x22a>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 80036ea:	4b88      	ldr	r3, [pc, #544]	@ (800390c <mount_volume+0x238>)
 80036ec:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80036f0:	2c00      	cmp	r4, #0
 80036f2:	f000 8106 	beq.w	8003902 <mount_volume+0x22e>
	*rfs = fs;							/* Return pointer to the filesystem object */
 80036f6:	6034      	str	r4, [r6, #0]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80036f8:	7823      	ldrb	r3, [r4, #0]
		stat = disk_status(fs->pdrv);
 80036fa:	7860      	ldrb	r0, [r4, #1]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80036fc:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8003700:	b15b      	cbz	r3, 800371a <mount_volume+0x46>
		stat = disk_status(fs->pdrv);
 8003702:	f7ff fbf1 	bl	8002ee8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003706:	07c3      	lsls	r3, r0, #31
 8003708:	d407      	bmi.n	800371a <mount_volume+0x46>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800370a:	b10d      	cbz	r5, 8003710 <mount_volume+0x3c>
 800370c:	0747      	lsls	r7, r0, #29
 800370e:	d402      	bmi.n	8003716 <mount_volume+0x42>
			return FR_OK;				/* The filesystem object is already valid */
 8003710:	2000      	movs	r0, #0
}
 8003712:	b005      	add	sp, #20
 8003714:	bdf0      	pop	{r4, r5, r6, r7, pc}
				return FR_WRITE_PROTECTED;
 8003716:	200a      	movs	r0, #10
 8003718:	e7fb      	b.n	8003712 <mount_volume+0x3e>
	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800371a:	2300      	movs	r3, #0
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 800371c:	7860      	ldrb	r0, [r4, #1]
	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800371e:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8003720:	f7ff fbe6 	bl	8002ef0 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003724:	07c6      	lsls	r6, r0, #31
 8003726:	f100 80ee 	bmi.w	8003906 <mount_volume+0x232>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800372a:	b10d      	cbz	r5, 8003730 <mount_volume+0x5c>
 800372c:	0741      	lsls	r1, r0, #29
 800372e:	d4f2      	bmi.n	8003716 <mount_volume+0x42>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 8003730:	2100      	movs	r1, #0
 8003732:	4620      	mov	r0, r4
 8003734:	f7ff fe8e 	bl	8003454 <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 8003738:	2802      	cmp	r0, #2
 800373a:	f040 80c8 	bne.w	80038ce <mount_volume+0x1fa>
 800373e:	466e      	mov	r6, sp
 8003740:	4632      	mov	r2, r6
 8003742:	f504 73fb 	add.w	r3, r4, #502	@ 0x1f6
 8003746:	f204 2136 	addw	r1, r4, #566	@ 0x236
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff fd46 	bl	80031dc <ld_dword>
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8003750:	3310      	adds	r3, #16
 8003752:	428b      	cmp	r3, r1
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8003754:	f842 0b04 	str.w	r0, [r2], #4
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8003758:	d1f7      	bne.n	800374a <mount_volume+0x76>
 800375a:	2500      	movs	r5, #0
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800375c:	f856 1b04 	ldr.w	r1, [r6], #4
 8003760:	2900      	cmp	r1, #0
 8003762:	f000 80ab 	beq.w	80038bc <mount_volume+0x1e8>
 8003766:	4620      	mov	r0, r4
 8003768:	f7ff fe74 	bl	8003454 <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800376c:	2801      	cmp	r0, #1
 800376e:	f200 80a6 	bhi.w	80038be <mount_volume+0x1ea>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003772:	f8b4 303b 	ldrh.w	r3, [r4, #59]	@ 0x3b
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 8003776:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800377c:	f040 80ac 	bne.w	80038d8 <mount_volume+0x204>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8003780:	f8b4 6046 	ldrh.w	r6, [r4, #70]	@ 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003784:	b926      	cbnz	r6, 8003790 <mount_volume+0xbc>
 8003786:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 800378a:	f7ff fd27 	bl	80031dc <ld_dword>
 800378e:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003790:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
		fs->fsize = fasize;
 8003794:	61a6      	str	r6, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003796:	1e5a      	subs	r2, r3, #1
 8003798:	2a01      	cmp	r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800379a:	70e3      	strb	r3, [r4, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800379c:	f200 809c 	bhi.w	80038d8 <mount_volume+0x204>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80037a0:	f894 503d 	ldrb.w	r5, [r4, #61]	@ 0x3d
 80037a4:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80037a6:	2d00      	cmp	r5, #0
 80037a8:	f000 8096 	beq.w	80038d8 <mount_volume+0x204>
 80037ac:	1e6a      	subs	r2, r5, #1
 80037ae:	422a      	tst	r2, r5
 80037b0:	f040 8092 	bne.w	80038d8 <mount_volume+0x204>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80037b4:	f8b4 7041 	ldrh.w	r7, [r4, #65]	@ 0x41
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80037b8:	073a      	lsls	r2, r7, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80037ba:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80037bc:	f040 808c 	bne.w	80038d8 <mount_volume+0x204>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80037c0:	f8b4 0043 	ldrh.w	r0, [r4, #67]	@ 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80037c4:	b918      	cbnz	r0, 80037ce <mount_volume+0xfa>
 80037c6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80037ca:	f7ff fd07 	bl	80031dc <ld_dword>
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80037ce:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80037d0:	2a00      	cmp	r2, #0
 80037d2:	f000 8081 	beq.w	80038d8 <mount_volume+0x204>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80037d6:	fb06 fe03 	mul.w	lr, r6, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80037da:	eb02 1c17 	add.w	ip, r2, r7, lsr #4
 80037de:	44f4      	add	ip, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80037e0:	4560      	cmp	r0, ip
 80037e2:	d379      	bcc.n	80038d8 <mount_volume+0x204>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80037e4:	eba0 000c 	sub.w	r0, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80037e8:	42a8      	cmp	r0, r5
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80037ea:	fbb0 f3f5 	udiv	r3, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80037ee:	d373      	bcc.n	80038d8 <mount_volume+0x204>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 80037f0:	4847      	ldr	r0, [pc, #284]	@ (8003910 <mount_volume+0x23c>)
 80037f2:	4283      	cmp	r3, r0
 80037f4:	d870      	bhi.n	80038d8 <mount_volume+0x204>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80037f6:	f64f 70f5 	movw	r0, #65525	@ 0xfff5
 80037fa:	4283      	cmp	r3, r0
 80037fc:	d86e      	bhi.n	80038dc <mount_volume+0x208>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80037fe:	f640 75f5 	movw	r5, #4085	@ 0xff5
 8003802:	42ab      	cmp	r3, r5
 8003804:	bf8c      	ite	hi
 8003806:	2502      	movhi	r5, #2
 8003808:	2501      	movls	r5, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800380a:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800380c:	440a      	add	r2, r1
		fs->database = bsect + sysect;					/* Data start sector */
 800380e:	eb01 000c 	add.w	r0, r1, ip
		if (fmt == FS_FAT32) {
 8003812:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003814:	6163      	str	r3, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8003816:	61e1      	str	r1, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003818:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800381a:	62a0      	str	r0, [r4, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800381c:	d160      	bne.n	80038e0 <mount_volume+0x20c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800381e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 8003822:	433a      	orrs	r2, r7
 8003824:	d158      	bne.n	80038d8 <mount_volume+0x204>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003826:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 800382a:	f7ff fcd7 	bl	80031dc <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800382e:	009b      	lsls	r3, r3, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003830:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8003834:	ebb6 2f53 	cmp.w	r6, r3, lsr #9
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003838:	6260      	str	r0, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800383a:	d34d      	bcc.n	80038d8 <mount_volume+0x204>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 800383c:	f04f 33ff 	mov.w	r3, #4294967295
 8003840:	e9c4 3303 	strd	r3, r3, [r4, #12]
		fs->fsi_flag = 0x80;	/* Disable FSInfo by default */
 8003844:	2380      	movs	r3, #128	@ 0x80
		if (fmt == FS_FAT32
 8003846:	2d03      	cmp	r5, #3
		fs->fsi_flag = 0x80;	/* Disable FSInfo by default */
 8003848:	7163      	strb	r3, [r4, #5]
		if (fmt == FS_FAT32
 800384a:	d12c      	bne.n	80038a6 <mount_volume+0x1d2>
			&& ld_word(fs->win + BPB_FSInfo32) == 1	/* FAT32: Enable FSInfo feature only if FSInfo sector is next to VBR */
 800384c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
 8003850:	2b01      	cmp	r3, #1
 8003852:	d128      	bne.n	80038a6 <mount_volume+0x1d2>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003854:	4620      	mov	r0, r4
 8003856:	3101      	adds	r1, #1
 8003858:	f7ff fde2 	bl	8003420 <move_window>
 800385c:	bb18      	cbnz	r0, 80038a6 <mount_volume+0x1d2>
			fs->fsi_flag = 0;
 800385e:	7160      	strb	r0, [r4, #5]
			if (   ld_dword(fs->win + FSI_LeadSig) == 0x41615252	/* Load FSInfo data if available */
 8003860:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8003864:	f7ff fcba 	bl	80031dc <ld_dword>
 8003868:	4b2a      	ldr	r3, [pc, #168]	@ (8003914 <mount_volume+0x240>)
 800386a:	4298      	cmp	r0, r3
 800386c:	d11b      	bne.n	80038a6 <mount_volume+0x1d2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272
 800386e:	f504 7005 	add.w	r0, r4, #532	@ 0x214
 8003872:	f7ff fcb3 	bl	80031dc <ld_dword>
 8003876:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
 800387a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800387e:	3320      	adds	r3, #32
 8003880:	4298      	cmp	r0, r3
 8003882:	d110      	bne.n	80038a6 <mount_volume+0x1d2>
				&& ld_dword(fs->win + FSI_TrailSig) == 0xAA550000)
 8003884:	f204 2022 	addw	r0, r4, #546	@ 0x222
 8003888:	f7ff fca8 	bl	80031dc <ld_dword>
 800388c:	4b22      	ldr	r3, [pc, #136]	@ (8003918 <mount_volume+0x244>)
 800388e:	4298      	cmp	r0, r3
 8003890:	d109      	bne.n	80038a6 <mount_volume+0x1d2>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8003892:	f504 7006 	add.w	r0, r4, #536	@ 0x218
 8003896:	f7ff fca1 	bl	80031dc <ld_dword>
 800389a:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800389c:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 80038a0:	f7ff fc9c 	bl	80031dc <ld_dword>
 80038a4:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* Volume mount ID */
 80038a6:	4a1d      	ldr	r2, [pc, #116]	@ (800391c <mount_volume+0x248>)
	clear_share(fs);
 80038a8:	4620      	mov	r0, r4
	fs->id = ++Fsid;		/* Volume mount ID */
 80038aa:	8813      	ldrh	r3, [r2, #0]
	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 80038ac:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80038ae:	3301      	adds	r3, #1
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	80e3      	strh	r3, [r4, #6]
 80038b4:	8013      	strh	r3, [r2, #0]
	clear_share(fs);
 80038b6:	f7ff fd23 	bl	8003300 <clear_share>
	return FR_OK;
 80038ba:	e729      	b.n	8003710 <mount_volume+0x3c>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 80038bc:	2003      	movs	r0, #3
	} while (part == 0 && fmt >= 2 && ++i < 4);
 80038be:	3501      	adds	r5, #1
 80038c0:	2d04      	cmp	r5, #4
 80038c2:	f47f af4b 	bne.w	800375c <mount_volume+0x88>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 80038c6:	2804      	cmp	r0, #4
 80038c8:	d106      	bne.n	80038d8 <mount_volume+0x204>
 80038ca:	2001      	movs	r0, #1
 80038cc:	e721      	b.n	8003712 <mount_volume+0x3e>
 80038ce:	2804      	cmp	r0, #4
 80038d0:	d0fb      	beq.n	80038ca <mount_volume+0x1f6>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80038d2:	2801      	cmp	r0, #1
 80038d4:	f67f af4d 	bls.w	8003772 <mount_volume+0x9e>
 80038d8:	200d      	movs	r0, #13
 80038da:	e71a      	b.n	8003712 <mount_volume+0x3e>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 80038dc:	2503      	movs	r5, #3
 80038de:	e794      	b.n	800380a <mount_volume+0x136>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80038e0:	2f00      	cmp	r7, #0
 80038e2:	d0f9      	beq.n	80038d8 <mount_volume+0x204>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80038e4:	2d02      	cmp	r5, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80038e6:	eb02 000e 	add.w	r0, r2, lr
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80038ea:	ea4f 0243 	mov.w	r2, r3, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80038ee:	bf1b      	ittet	ne
 80038f0:	18d2      	addne	r2, r2, r3
 80038f2:	f003 0301 	andne.w	r3, r3, #1
 80038f6:	4613      	moveq	r3, r2
 80038f8:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 80038fc:	e798      	b.n	8003830 <mount_volume+0x15c>
	if (vol < 0) return FR_INVALID_DRIVE;
 80038fe:	200b      	movs	r0, #11
 8003900:	e707      	b.n	8003712 <mount_volume+0x3e>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8003902:	200c      	movs	r0, #12
 8003904:	e705      	b.n	8003712 <mount_volume+0x3e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003906:	2003      	movs	r0, #3
 8003908:	e703      	b.n	8003712 <mount_volume+0x3e>
 800390a:	bf00      	nop
 800390c:	20000900 	.word	0x20000900
 8003910:	0ffffff5 	.word	0x0ffffff5
 8003914:	41615252 	.word	0x41615252
 8003918:	aa550000 	.word	0xaa550000
 800391c:	200008fc 	.word	0x200008fc

08003920 <get_fileinfo.part.0.constprop.0.isra.0>:
static void get_fileinfo (
 8003920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	si = di = 0;
 8003922:	2300      	movs	r3, #0
static void get_fileinfo (
 8003924:	4602      	mov	r2, r0
	si = di = 0;
 8003926:	461c      	mov	r4, r3
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 8003928:	262e      	movs	r6, #46	@ 0x2e
 800392a:	1e45      	subs	r5, r0, #1
		c = (TCHAR)dp->dir[si++];
 800392c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8003930:	3401      	adds	r4, #1
		if (c == ' ') continue;		/* Skip padding spaces */
 8003932:	2820      	cmp	r0, #32
 8003934:	d00a      	beq.n	800394c <get_fileinfo.part.0.constprop.0.isra.0+0x2c>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
 8003936:	2805      	cmp	r0, #5
 8003938:	bf08      	it	eq
 800393a:	20e5      	moveq	r0, #229	@ 0xe5
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 800393c:	2c09      	cmp	r4, #9
 800393e:	bf02      	ittt	eq
 8003940:	18cf      	addeq	r7, r1, r3
 8003942:	3301      	addeq	r3, #1
 8003944:	727e      	strbeq	r6, [r7, #9]
		fno->fname[di++] = c;
 8003946:	18cf      	adds	r7, r1, r3
 8003948:	7278      	strb	r0, [r7, #9]
 800394a:	3301      	adds	r3, #1
	while (si < 11) {		/* Copy name body and extension */
 800394c:	2c0b      	cmp	r4, #11
 800394e:	d1ed      	bne.n	800392c <get_fileinfo.part.0.constprop.0.isra.0+0xc>
	fno->fname[di] = 0;		/* Terminate the SFN */
 8003950:	2000      	movs	r0, #0
 8003952:	440b      	add	r3, r1
 8003954:	7258      	strb	r0, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 8003956:	7ad3      	ldrb	r3, [r2, #11]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8003958:	f102 001c 	add.w	r0, r2, #28
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 800395c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003960:	720b      	strb	r3, [r1, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8003962:	f7ff fc3b 	bl	80031dc <ld_dword>
 8003966:	6008      	str	r0, [r1, #0]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 8003968:	8ad3      	ldrh	r3, [r2, #22]
 800396a:	80cb      	strh	r3, [r1, #6]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 800396c:	8b13      	ldrh	r3, [r2, #24]
 800396e:	808b      	strh	r3, [r1, #4]
}
 8003970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003972 <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 8003972:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8003974:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003976:	bf04      	itt	eq
 8003978:	8a8a      	ldrheq	r2, [r1, #20]
 800397a:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 800397e:	4618      	mov	r0, r3
 8003980:	4770      	bx	lr

08003982 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003982:	2901      	cmp	r1, #1
static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8003984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003986:	4606      	mov	r6, r0
 8003988:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800398a:	d94e      	bls.n	8003a2a <get_fat.isra.0+0xa8>
 800398c:	6943      	ldr	r3, [r0, #20]
 800398e:	4299      	cmp	r1, r3
 8003990:	d24b      	bcs.n	8003a2a <get_fat.isra.0+0xa8>
		switch (fs->fs_type) {
 8003992:	7803      	ldrb	r3, [r0, #0]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d029      	beq.n	80039ec <get_fat.isra.0+0x6a>
 8003998:	2b03      	cmp	r3, #3
 800399a:	d034      	beq.n	8003a06 <get_fat.isra.0+0x84>
 800399c:	2b01      	cmp	r3, #1
 800399e:	d144      	bne.n	8003a2a <get_fat.isra.0+0xa8>
			bc = (UINT)clst; bc += bc / 2;
 80039a0:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80039a4:	6a01      	ldr	r1, [r0, #32]
 80039a6:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 80039aa:	f7ff fd39 	bl	8003420 <move_window>
 80039ae:	b110      	cbz	r0, 80039b6 <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80039b0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80039b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80039b6:	6a31      	ldr	r1, [r6, #32]
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80039b8:	1c6f      	adds	r7, r5, #1
 80039ba:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80039be:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80039c0:	4630      	mov	r0, r6
 80039c2:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80039c6:	f895 5030 	ldrb.w	r5, [r5, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80039ca:	f7ff fd29 	bl	8003420 <move_window>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	d1ee      	bne.n	80039b0 <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 80039d2:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80039d6:	4437      	add	r7, r6
 80039d8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80039dc:	ea45 2003 	orr.w	r0, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 80039e0:	07e3      	lsls	r3, r4, #31
 80039e2:	bf4c      	ite	mi
 80039e4:	0900      	lsrmi	r0, r0, #4
 80039e6:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80039ea:	e7e3      	b.n	80039b4 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80039ec:	6a01      	ldr	r1, [r0, #32]
 80039ee:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80039f2:	f7ff fd15 	bl	8003420 <move_window>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d1da      	bne.n	80039b0 <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80039fa:	0064      	lsls	r4, r4, #1
 80039fc:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 8003a00:	4434      	add	r4, r6
 8003a02:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
			break;
 8003a04:	e7d6      	b.n	80039b4 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003a06:	6a01      	ldr	r1, [r0, #32]
 8003a08:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8003a0c:	f7ff fd08 	bl	8003420 <move_window>
 8003a10:	2800      	cmp	r0, #0
 8003a12:	d1cd      	bne.n	80039b0 <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8003a14:	00a4      	lsls	r4, r4, #2
 8003a16:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 8003a1a:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 8003a1e:	4420      	add	r0, r4
 8003a20:	f7ff fbdc 	bl	80031dc <ld_dword>
 8003a24:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 8003a28:	e7c4      	b.n	80039b4 <get_fat.isra.0+0x32>
		val = 1;	/* Internal error */
 8003a2a:	2001      	movs	r0, #1
	return val;
 8003a2c:	e7c2      	b.n	80039b4 <get_fat.isra.0+0x32>

08003a2e <dir_sdi.constprop.0>:
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8003a2e:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 8003a30:	2300      	movs	r3, #0
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003a32:	6882      	ldr	r2, [r0, #8]
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8003a34:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8003a36:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8003a38:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003a3a:	b992      	cbnz	r2, 8003a62 <dir_sdi.constprop.0+0x34>
 8003a3c:	7823      	ldrb	r3, [r4, #0]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <dir_sdi.constprop.0+0x18>
		clst = (DWORD)fs->dirbase;
 8003a42:	6a63      	ldr	r3, [r4, #36]	@ 0x24
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8003a44:	b963      	cbnz	r3, 8003a60 <dir_sdi.constprop.0+0x32>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8003a46:	8923      	ldrh	r3, [r4, #8]
 8003a48:	b90b      	cbnz	r3, 8003a4e <dir_sdi.constprop.0+0x20>
		return FR_INT_ERR;
 8003a4a:	2002      	movs	r0, #2
}
 8003a4c:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8003a4e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
	dp->clust = clst;					/* Current cluster# */
 8003a50:	e9c5 2006 	strd	r2, r0, [r5, #24]
	if (dp->sect == 0) return FR_INT_ERR;
 8003a54:	2800      	cmp	r0, #0
 8003a56:	d0f8      	beq.n	8003a4a <dir_sdi.constprop.0+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003a58:	3430      	adds	r4, #48	@ 0x30
	return FR_OK;
 8003a5a:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003a5c:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8003a5e:	e7f5      	b.n	8003a4c <dir_sdi.constprop.0+0x1e>
 8003a60:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003a62:	8963      	ldrh	r3, [r4, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003a64:	b963      	cbnz	r3, 8003a80 <dir_sdi.constprop.0+0x52>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003a66:	4611      	mov	r1, r2
 8003a68:	6828      	ldr	r0, [r5, #0]
 8003a6a:	f7ff ff8a 	bl	8003982 <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003a6e:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003a70:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003a72:	d00a      	beq.n	8003a8a <dir_sdi.constprop.0+0x5c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003a74:	2801      	cmp	r0, #1
 8003a76:	d9e8      	bls.n	8003a4a <dir_sdi.constprop.0+0x1c>
 8003a78:	6963      	ldr	r3, [r4, #20]
 8003a7a:	4298      	cmp	r0, r3
 8003a7c:	d3f3      	bcc.n	8003a66 <dir_sdi.constprop.0+0x38>
 8003a7e:	e7e4      	b.n	8003a4a <dir_sdi.constprop.0+0x1c>
		dp->sect = clst2sect(fs, clst);
 8003a80:	4611      	mov	r1, r2
 8003a82:	4620      	mov	r0, r4
 8003a84:	f7ff fc4c 	bl	8003320 <clst2sect>
 8003a88:	e7e2      	b.n	8003a50 <dir_sdi.constprop.0+0x22>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003a8a:	2001      	movs	r0, #1
 8003a8c:	e7de      	b.n	8003a4c <dir_sdi.constprop.0+0x1e>

08003a8e <remove_chain>:
{
 8003a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a90:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003a92:	2c01      	cmp	r4, #1
{
 8003a94:	4606      	mov	r6, r0
 8003a96:	4611      	mov	r1, r2
	FATFS *fs = obj->fs;
 8003a98:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003a9a:	d92b      	bls.n	8003af4 <remove_chain+0x66>
 8003a9c:	696b      	ldr	r3, [r5, #20]
 8003a9e:	42a3      	cmp	r3, r4
 8003aa0:	d928      	bls.n	8003af4 <remove_chain+0x66>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003aa2:	b12a      	cbz	r2, 8003ab0 <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	f7ff fd23 	bl	80034f4 <put_fat>
		if (res != FR_OK) return res;
 8003aae:	b938      	cbnz	r0, 8003ac0 <remove_chain+0x32>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	6830      	ldr	r0, [r6, #0]
 8003ab4:	f7ff ff65 	bl	8003982 <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003ab8:	4627      	mov	r7, r4
 8003aba:	4604      	mov	r4, r0
 8003abc:	b908      	cbnz	r0, 8003ac2 <remove_chain+0x34>
	return FR_OK;
 8003abe:	2000      	movs	r0, #0
}
 8003ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003ac2:	2801      	cmp	r0, #1
 8003ac4:	d016      	beq.n	8003af4 <remove_chain+0x66>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003ac6:	1c43      	adds	r3, r0, #1
 8003ac8:	d016      	beq.n	8003af8 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003aca:	2200      	movs	r2, #0
 8003acc:	4639      	mov	r1, r7
 8003ace:	4628      	mov	r0, r5
 8003ad0:	f7ff fd10 	bl	80034f4 <put_fat>
			if (res != FR_OK) return res;
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	d1f3      	bne.n	8003ac0 <remove_chain+0x32>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update allocation information if it is valid */
 8003ad8:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 8003adc:	1e91      	subs	r1, r2, #2
 8003ade:	428b      	cmp	r3, r1
 8003ae0:	d205      	bcs.n	8003aee <remove_chain+0x60>
			fs->free_clst++;
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8003ae6:	796b      	ldrb	r3, [r5, #5]
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	716b      	strb	r3, [r5, #5]
	} while (clst < fs->n_fatent);	/* Repeat until the last link */
 8003aee:	42a2      	cmp	r2, r4
 8003af0:	d8de      	bhi.n	8003ab0 <remove_chain+0x22>
 8003af2:	e7e4      	b.n	8003abe <remove_chain+0x30>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003af4:	2002      	movs	r0, #2
 8003af6:	e7e3      	b.n	8003ac0 <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003af8:	2001      	movs	r0, #1
 8003afa:	e7e1      	b.n	8003ac0 <remove_chain+0x32>

08003afc <create_chain>:
{
 8003afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b00:	4681      	mov	r9, r0
	if (clst == 0) {	/* Create a new chain */
 8003b02:	460f      	mov	r7, r1
	FATFS *fs = obj->fs;
 8003b04:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8003b06:	b949      	cbnz	r1, 8003b1c <create_chain+0x20>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8003b08:	68ee      	ldr	r6, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003b0a:	b1c6      	cbz	r6, 8003b3e <create_chain+0x42>
 8003b0c:	696b      	ldr	r3, [r5, #20]
 8003b0e:	42b3      	cmp	r3, r6
 8003b10:	bf98      	it	ls
 8003b12:	2601      	movls	r6, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8003b14:	692b      	ldr	r3, [r5, #16]
 8003b16:	b9a3      	cbnz	r3, 8003b42 <create_chain+0x46>
 8003b18:	2400      	movs	r4, #0
 8003b1a:	e006      	b.n	8003b2a <create_chain+0x2e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	f7ff ff30 	bl	8003982 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Test for insanity */
 8003b22:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003b24:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Test for insanity */
 8003b26:	d803      	bhi.n	8003b30 <create_chain+0x34>
 8003b28:	2401      	movs	r4, #1
}
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8003b30:	1c42      	adds	r2, r0, #1
 8003b32:	d058      	beq.n	8003be6 <create_chain+0xea>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003b34:	696b      	ldr	r3, [r5, #20]
 8003b36:	4283      	cmp	r3, r0
 8003b38:	d8f7      	bhi.n	8003b2a <create_chain+0x2e>
 8003b3a:	463e      	mov	r6, r7
 8003b3c:	e7ea      	b.n	8003b14 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003b3e:	2601      	movs	r6, #1
 8003b40:	e7e8      	b.n	8003b14 <create_chain+0x18>
		if (scl == clst) {						/* Stretching an existing chain? */
 8003b42:	42be      	cmp	r6, r7
			if (ncl >= fs->n_fatent) ncl = 2;
 8003b44:	696b      	ldr	r3, [r5, #20]
		if (scl == clst) {						/* Stretching an existing chain? */
 8003b46:	d115      	bne.n	8003b74 <create_chain+0x78>
			ncl = scl + 1;						/* Test if next cluster is free */
 8003b48:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) ncl = 2;
 8003b4a:	42a3      	cmp	r3, r4
 8003b4c:	bf98      	it	ls
 8003b4e:	2402      	movls	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8003b50:	f8d9 0000 	ldr.w	r0, [r9]
 8003b54:	4621      	mov	r1, r4
 8003b56:	f7ff ff14 	bl	8003982 <get_fat.isra.0>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8003b5a:	2801      	cmp	r0, #1
 8003b5c:	d0e4      	beq.n	8003b28 <create_chain+0x2c>
 8003b5e:	1c43      	adds	r3, r0, #1
 8003b60:	d041      	beq.n	8003be6 <create_chain+0xea>
			if (cs != 0) {						/* Not free? */
 8003b62:	b1f0      	cbz	r0, 8003ba2 <create_chain+0xa6>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8003b64:	f8d5 800c 	ldr.w	r8, [r5, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8003b68:	f1b8 0f01 	cmp.w	r8, #1
 8003b6c:	d902      	bls.n	8003b74 <create_chain+0x78>
 8003b6e:	696b      	ldr	r3, [r5, #20]
 8003b70:	4598      	cmp	r8, r3
 8003b72:	d300      	bcc.n	8003b76 <create_chain+0x7a>
			if (ncl >= fs->n_fatent) ncl = 2;
 8003b74:	46b0      	mov	r8, r6
 8003b76:	4644      	mov	r4, r8
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003b78:	696b      	ldr	r3, [r5, #20]
				ncl++;							/* Next cluster */
 8003b7a:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003b7c:	42a3      	cmp	r3, r4
 8003b7e:	d803      	bhi.n	8003b88 <create_chain+0x8c>
					if (ncl > scl) return 0;	/* No free cluster found? */
 8003b80:	f1b8 0f01 	cmp.w	r8, #1
 8003b84:	d0c8      	beq.n	8003b18 <create_chain+0x1c>
					ncl = 2;
 8003b86:	2402      	movs	r4, #2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003b88:	4621      	mov	r1, r4
 8003b8a:	f8d9 0000 	ldr.w	r0, [r9]
 8003b8e:	f7ff fef8 	bl	8003982 <get_fat.isra.0>
				if (cs == 0) break;				/* Found a free cluster? */
 8003b92:	b140      	cbz	r0, 8003ba6 <create_chain+0xaa>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8003b94:	2801      	cmp	r0, #1
 8003b96:	d0c7      	beq.n	8003b28 <create_chain+0x2c>
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d024      	beq.n	8003be6 <create_chain+0xea>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8003b9c:	4544      	cmp	r4, r8
 8003b9e:	d1eb      	bne.n	8003b78 <create_chain+0x7c>
 8003ba0:	e7ba      	b.n	8003b18 <create_chain+0x1c>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8003ba2:	2c00      	cmp	r4, #0
 8003ba4:	d0e6      	beq.n	8003b74 <create_chain+0x78>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8003ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8003baa:	4621      	mov	r1, r4
 8003bac:	4628      	mov	r0, r5
 8003bae:	f7ff fca1 	bl	80034f4 <put_fat>
		if (res == FR_OK && clst != 0) {
 8003bb2:	b9b0      	cbnz	r0, 8003be2 <create_chain+0xe6>
 8003bb4:	b977      	cbnz	r7, 8003bd4 <create_chain+0xd8>
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
 8003bb6:	692b      	ldr	r3, [r5, #16]
		fs->last_clst = ncl;
 8003bb8:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0b5      	beq.n	8003b2a <create_chain+0x2e>
 8003bbe:	696a      	ldr	r2, [r5, #20]
 8003bc0:	3a02      	subs	r2, #2
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d8b1      	bhi.n	8003b2a <create_chain+0x2e>
			fs->free_clst--;
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8003bca:	796b      	ldrb	r3, [r5, #5]
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	716b      	strb	r3, [r5, #5]
 8003bd2:	e7aa      	b.n	8003b2a <create_chain+0x2e>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8003bd4:	4622      	mov	r2, r4
 8003bd6:	4639      	mov	r1, r7
 8003bd8:	4628      	mov	r0, r5
 8003bda:	f7ff fc8b 	bl	80034f4 <put_fat>
	if (res == FR_OK) {			/* Update allocation information if the function succeeded */
 8003bde:	2800      	cmp	r0, #0
 8003be0:	d0e9      	beq.n	8003bb6 <create_chain+0xba>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003be2:	2801      	cmp	r0, #1
 8003be4:	d1a0      	bne.n	8003b28 <create_chain+0x2c>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8003be6:	f04f 34ff 	mov.w	r4, #4294967295
 8003bea:	e79e      	b.n	8003b2a <create_chain+0x2e>

08003bec <dir_next>:
{
 8003bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003bf0:	6947      	ldr	r7, [r0, #20]
{
 8003bf2:	4604      	mov	r4, r0
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003bf4:	3720      	adds	r7, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8003bf6:	f5b7 1f00 	cmp.w	r7, #2097152	@ 0x200000
 8003bfa:	bf24      	itt	cs
 8003bfc:	2300      	movcs	r3, #0
 8003bfe:	61c3      	strcs	r3, [r0, #28]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8003c00:	69c3      	ldr	r3, [r0, #28]
{
 8003c02:	4689      	mov	r9, r1
	FATFS *fs = dp->obj.fs;
 8003c04:	6806      	ldr	r6, [r0, #0]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8003c06:	b173      	cbz	r3, 8003c26 <dir_next+0x3a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003c08:	f3c7 0808 	ubfx	r8, r7, #0, #9
 8003c0c:	f1b8 0f00 	cmp.w	r8, #0
 8003c10:	d139      	bne.n	8003c86 <dir_next+0x9a>
		if (dp->clust == 0) {	/* Static table */
 8003c12:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8003c14:	3301      	adds	r3, #1
 8003c16:	61c3      	str	r3, [r0, #28]
		if (dp->clust == 0) {	/* Static table */
 8003c18:	b941      	cbnz	r1, 8003c2c <dir_next+0x40>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003c1a:	8933      	ldrh	r3, [r6, #8]
 8003c1c:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 8003c20:	d831      	bhi.n	8003c86 <dir_next+0x9a>
				dp->sect = 0; return FR_NO_FILE;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61e3      	str	r3, [r4, #28]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8003c26:	2004      	movs	r0, #4
}
 8003c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8003c2c:	8973      	ldrh	r3, [r6, #10]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	ea13 2357 	ands.w	r3, r3, r7, lsr #9
 8003c34:	d127      	bne.n	8003c86 <dir_next+0x9a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8003c36:	4630      	mov	r0, r6
 8003c38:	f7ff fea3 	bl	8003982 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8003c3c:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8003c3e:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8003c40:	d801      	bhi.n	8003c46 <dir_next+0x5a>
 8003c42:	2002      	movs	r0, #2
 8003c44:	e7f0      	b.n	8003c28 <dir_next+0x3c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003c46:	1c42      	adds	r2, r0, #1
 8003c48:	d101      	bne.n	8003c4e <dir_next+0x62>
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	e7ec      	b.n	8003c28 <dir_next+0x3c>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8003c4e:	6973      	ldr	r3, [r6, #20]
 8003c50:	4283      	cmp	r3, r0
 8003c52:	d812      	bhi.n	8003c7a <dir_next+0x8e>
					if (!stretch) {								/* If no stretch, report EOT */
 8003c54:	f1b9 0f00 	cmp.w	r9, #0
 8003c58:	d0e3      	beq.n	8003c22 <dir_next+0x36>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	69a1      	ldr	r1, [r4, #24]
 8003c5e:	f7ff ff4d 	bl	8003afc <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003c62:	4605      	mov	r5, r0
 8003c64:	b1a8      	cbz	r0, 8003c92 <dir_next+0xa6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003c66:	2801      	cmp	r0, #1
 8003c68:	d0eb      	beq.n	8003c42 <dir_next+0x56>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003c6a:	1c43      	adds	r3, r0, #1
 8003c6c:	d0ed      	beq.n	8003c4a <dir_next+0x5e>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8003c6e:	4601      	mov	r1, r0
 8003c70:	4630      	mov	r0, r6
 8003c72:	f7ff fcb7 	bl	80035e4 <dir_clear>
 8003c76:	2800      	cmp	r0, #0
 8003c78:	d1e7      	bne.n	8003c4a <dir_next+0x5e>
				dp->sect = clst2sect(fs, clst);
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	4630      	mov	r0, r6
				dp->clust = clst;		/* Initialize data for new cluster */
 8003c7e:	61a5      	str	r5, [r4, #24]
				dp->sect = clst2sect(fs, clst);
 8003c80:	f7ff fb4e 	bl	8003320 <clst2sect>
 8003c84:	61e0      	str	r0, [r4, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003c86:	3630      	adds	r6, #48	@ 0x30
 8003c88:	4446      	add	r6, r8
	return FR_OK;
 8003c8a:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 8003c8c:	6167      	str	r7, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003c8e:	6226      	str	r6, [r4, #32]
	return FR_OK;
 8003c90:	e7ca      	b.n	8003c28 <dir_next+0x3c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003c92:	2007      	movs	r0, #7
 8003c94:	e7c8      	b.n	8003c28 <dir_next+0x3c>
	...

08003c98 <follow_path>:
{
 8003c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c9c:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8003c9e:	f8d0 9000 	ldr.w	r9, [r0]
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8003ca2:	460e      	mov	r6, r1
 8003ca4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ca8:	2b2f      	cmp	r3, #47	@ 0x2f
 8003caa:	d0fa      	beq.n	8003ca2 <follow_path+0xa>
 8003cac:	2b5c      	cmp	r3, #92	@ 0x5c
 8003cae:	d0f8      	beq.n	8003ca2 <follow_path+0xa>
		dp->obj.sclust = 0;					/* Start from the root directory */
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60ab      	str	r3, [r5, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003cb4:	7833      	ldrb	r3, [r6, #0]
 8003cb6:	2b1f      	cmp	r3, #31
 8003cb8:	d96f      	bls.n	8003d9a <follow_path+0x102>
	memset(sfn, ' ', 11);
 8003cba:	f04f 3820 	mov.w	r8, #538976288	@ 0x20202020
	p = *path; sfn = dp->fn;
 8003cbe:	f105 0724 	add.w	r7, r5, #36	@ 0x24
	si = i = 0; ni = 8;
 8003cc2:	2400      	movs	r4, #0
 8003cc4:	f04f 0a08 	mov.w	sl, #8
	memset(sfn, ' ', 11);
 8003cc8:	f8c7 8004 	str.w	r8, [r7, #4]
 8003ccc:	f8c7 8000 	str.w	r8, [r7]
 8003cd0:	f8c7 8007 	str.w	r8, [r7, #7]
	si = i = 0; ni = 8;
 8003cd4:	f106 3bff 	add.w	fp, r6, #4294967295
		c = (BYTE)p[si++];				/* Get a byte */
 8003cd8:	f1c6 0202 	rsb	r2, r6, #2
 8003cdc:	eb02 030b 	add.w	r3, r2, fp
 8003ce0:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003ce4:	2920      	cmp	r1, #32
 8003ce6:	d908      	bls.n	8003cfa <follow_path+0x62>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 8003ce8:	292f      	cmp	r1, #47	@ 0x2f
 8003cea:	d001      	beq.n	8003cf0 <follow_path+0x58>
 8003cec:	295c      	cmp	r1, #92	@ 0x5c
 8003cee:	d15f      	bne.n	8003db0 <follow_path+0x118>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 8003cf0:	5cf2      	ldrb	r2, [r6, r3]
 8003cf2:	2a2f      	cmp	r2, #47	@ 0x2f
 8003cf4:	d05a      	beq.n	8003dac <follow_path+0x114>
 8003cf6:	2a5c      	cmp	r2, #92	@ 0x5c
 8003cf8:	d058      	beq.n	8003dac <follow_path+0x114>
	*path = &p[si];						/* Return pointer to the next segment */
 8003cfa:	441e      	add	r6, r3
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8003cfc:	2c00      	cmp	r4, #0
 8003cfe:	f000 8082 	beq.w	8003e06 <follow_path+0x16e>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003d02:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8003d06:	2be5      	cmp	r3, #229	@ 0xe5
 8003d08:	bf04      	itt	eq
 8003d0a:	2305      	moveq	r3, #5
 8003d0c:	f885 3024 	strbeq.w	r3, [r5, #36]	@ 0x24
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8003d10:	2920      	cmp	r1, #32
 8003d12:	d968      	bls.n	8003de6 <follow_path+0x14e>
 8003d14:	7833      	ldrb	r3, [r6, #0]
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	bf8c      	ite	hi
 8003d1a:	2300      	movhi	r3, #0
 8003d1c:	2301      	movls	r3, #1
 8003d1e:	009b      	lsls	r3, r3, #2
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003d20:	4628      	mov	r0, r5
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8003d22:	f885 302f 	strb.w	r3, [r5, #47]	@ 0x2f
	FATFS *fs = dp->obj.fs;
 8003d26:	f8d5 a000 	ldr.w	sl, [r5]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003d2a:	f7ff fe80 	bl	8003a2e <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 8003d2e:	4604      	mov	r4, r0
 8003d30:	2800      	cmp	r0, #0
 8003d32:	d15a      	bne.n	8003dea <follow_path+0x152>
		res = move_window(fs, dp->sect);
 8003d34:	4650      	mov	r0, sl
 8003d36:	69e9      	ldr	r1, [r5, #28]
 8003d38:	f7ff fb72 	bl	8003420 <move_window>
		if (res != FR_OK) break;
 8003d3c:	4604      	mov	r4, r0
 8003d3e:	b9b8      	cbnz	r0, 8003d70 <follow_path+0xd8>
		c = dp->dir[DIR_Name];
 8003d40:	6a28      	ldr	r0, [r5, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached end of directory table */
 8003d42:	7803      	ldrb	r3, [r0, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d05a      	beq.n	8003dfe <follow_path+0x166>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8003d48:	7ac3      	ldrb	r3, [r0, #11]
 8003d4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d4e:	71ab      	strb	r3, [r5, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003d50:	7ac4      	ldrb	r4, [r0, #11]
 8003d52:	f014 0408 	ands.w	r4, r4, #8
 8003d56:	d104      	bne.n	8003d62 <follow_path+0xca>
 8003d58:	220b      	movs	r2, #11
 8003d5a:	4639      	mov	r1, r7
 8003d5c:	f006 ff35 	bl	800abca <memcmp>
 8003d60:	b130      	cbz	r0, 8003d70 <follow_path+0xd8>
		res = dir_next(dp, 0);	/* Next entry */
 8003d62:	2100      	movs	r1, #0
 8003d64:	4628      	mov	r0, r5
 8003d66:	f7ff ff41 	bl	8003bec <dir_next>
	} while (res == FR_OK);
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	2800      	cmp	r0, #0
 8003d6e:	d0e1      	beq.n	8003d34 <follow_path+0x9c>
			ns = dp->fn[NSFLAG];
 8003d70:	f895 302f 	ldrb.w	r3, [r5, #47]	@ 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8003d74:	2c00      	cmp	r4, #0
 8003d76:	d13a      	bne.n	8003dee <follow_path+0x156>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8003d78:	075a      	lsls	r2, r3, #29
 8003d7a:	d43c      	bmi.n	8003df6 <follow_path+0x15e>
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8003d7c:	79ab      	ldrb	r3, [r5, #6]
 8003d7e:	06db      	lsls	r3, r3, #27
 8003d80:	d53f      	bpl.n	8003e02 <follow_path+0x16a>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003d82:	696b      	ldr	r3, [r5, #20]
 8003d84:	f109 0130 	add.w	r1, r9, #48	@ 0x30
 8003d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8c:	f899 0000 	ldrb.w	r0, [r9]
 8003d90:	4419      	add	r1, r3
 8003d92:	f7ff fdee 	bl	8003972 <ld_clust.isra.0>
 8003d96:	60a8      	str	r0, [r5, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003d98:	e793      	b.n	8003cc2 <follow_path+0x2a>
		dp->fn[NSFLAG] = NS_NONAME;
 8003d9a:	2380      	movs	r3, #128	@ 0x80
		res = dir_sdi(dp, 0);
 8003d9c:	4628      	mov	r0, r5
		dp->fn[NSFLAG] = NS_NONAME;
 8003d9e:	f885 302f 	strb.w	r3, [r5, #47]	@ 0x2f
}
 8003da2:	b003      	add	sp, #12
 8003da4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8003da8:	f7ff be41 	b.w	8003a2e <dir_sdi.constprop.0>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 8003dac:	3301      	adds	r3, #1
 8003dae:	e79f      	b.n	8003cf0 <follow_path+0x58>
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8003db0:	292e      	cmp	r1, #46	@ 0x2e
 8003db2:	d02a      	beq.n	8003e0a <follow_path+0x172>
 8003db4:	45a2      	cmp	sl, r4
 8003db6:	d926      	bls.n	8003e06 <follow_path+0x16e>
		if (c >= 0x80) {				/* Is SBC extended character? */
 8003db8:	0608      	lsls	r0, r1, #24
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 8003dba:	bf42      	ittt	mi
 8003dbc:	4b16      	ldrmi	r3, [pc, #88]	@ (8003e18 <follow_path+0x180>)
 8003dbe:	f001 017f 	andmi.w	r1, r1, #127	@ 0x7f
 8003dc2:	5c59      	ldrbmi	r1, [r3, r1]
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8003dc4:	4815      	ldr	r0, [pc, #84]	@ (8003e1c <follow_path+0x184>)
 8003dc6:	e9cd 1200 	strd	r1, r2, [sp]
 8003dca:	f006 ff25 	bl	800ac18 <strchr>
 8003dce:	b9d0      	cbnz	r0, 8003e06 <follow_path+0x16e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8003dd0:	9900      	ldr	r1, [sp, #0]
 8003dd2:	9a01      	ldr	r2, [sp, #4]
 8003dd4:	f1a1 0361 	sub.w	r3, r1, #97	@ 0x61
 8003dd8:	2b19      	cmp	r3, #25
 8003dda:	bf9c      	itt	ls
 8003ddc:	3920      	subls	r1, #32
 8003dde:	b2c9      	uxtbls	r1, r1
			sfn[i++] = c;
 8003de0:	5539      	strb	r1, [r7, r4]
 8003de2:	3401      	adds	r4, #1
 8003de4:	e77a      	b.n	8003cdc <follow_path+0x44>
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8003de6:	2304      	movs	r3, #4
 8003de8:	e79a      	b.n	8003d20 <follow_path+0x88>
			ns = dp->fn[NSFLAG];
 8003dea:	f895 302f 	ldrb.w	r3, [r5, #47]	@ 0x2f
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003dee:	2c04      	cmp	r4, #4
 8003df0:	d101      	bne.n	8003df6 <follow_path+0x15e>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003df2:	0759      	lsls	r1, r3, #29
 8003df4:	d505      	bpl.n	8003e02 <follow_path+0x16a>
}
 8003df6:	4620      	mov	r0, r4
 8003df8:	b003      	add	sp, #12
 8003dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached end of directory table */
 8003dfe:	2404      	movs	r4, #4
 8003e00:	e7b6      	b.n	8003d70 <follow_path+0xd8>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003e02:	2405      	movs	r4, #5
 8003e04:	e7f7      	b.n	8003df6 <follow_path+0x15e>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8003e06:	2406      	movs	r4, #6
	return res;
 8003e08:	e7f5      	b.n	8003df6 <follow_path+0x15e>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8003e0a:	f1ba 0f0b 	cmp.w	sl, #11
 8003e0e:	d0fa      	beq.n	8003e06 <follow_path+0x16e>
			i = 8; ni = 11;				/* Enter file extension field */
 8003e10:	2408      	movs	r4, #8
 8003e12:	f04f 0a0b 	mov.w	sl, #11
 8003e16:	e761      	b.n	8003cdc <follow_path+0x44>
 8003e18:	0800dba8 	.word	0x0800dba8
 8003e1c:	0800db36 	.word	0x0800db36

08003e20 <dir_read.constprop.0>:
static FRESULT dir_read (
 8003e20:	b538      	push	{r3, r4, r5, lr}
 8003e22:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8003e24:	6805      	ldr	r5, [r0, #0]
	FRESULT res = FR_NO_FILE;
 8003e26:	2004      	movs	r0, #4
	while (dp->sect) {
 8003e28:	69e1      	ldr	r1, [r4, #28]
 8003e2a:	b911      	cbnz	r1, 8003e32 <dir_read.constprop.0+0x12>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8003e2c:	b9f8      	cbnz	r0, 8003e6e <dir_read.constprop.0+0x4e>
 8003e2e:	2000      	movs	r0, #0
}
 8003e30:	bd38      	pop	{r3, r4, r5, pc}
		res = move_window(fs, dp->sect);
 8003e32:	4628      	mov	r0, r5
 8003e34:	f7ff faf4 	bl	8003420 <move_window>
		if (res != FR_OK) break;
 8003e38:	b9b0      	cbnz	r0, 8003e68 <dir_read.constprop.0+0x48>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 8003e3a:	6a23      	ldr	r3, [r4, #32]
 8003e3c:	781a      	ldrb	r2, [r3, #0]
		if (b == 0) {
 8003e3e:	b1b2      	cbz	r2, 8003e6e <dir_read.constprop.0+0x4e>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8003e40:	7adb      	ldrb	r3, [r3, #11]
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8003e42:	2ae5      	cmp	r2, #229	@ 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8003e44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e48:	71a3      	strb	r3, [r4, #6]
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8003e4a:	d007      	beq.n	8003e5c <dir_read.constprop.0+0x3c>
 8003e4c:	2a2e      	cmp	r2, #46	@ 0x2e
 8003e4e:	d005      	beq.n	8003e5c <dir_read.constprop.0+0x3c>
 8003e50:	2b0f      	cmp	r3, #15
 8003e52:	d003      	beq.n	8003e5c <dir_read.constprop.0+0x3c>
 8003e54:	f023 0320 	bic.w	r3, r3, #32
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d1e8      	bne.n	8003e2e <dir_read.constprop.0+0xe>
		res = dir_next(dp, 0);		/* Next entry */
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4620      	mov	r0, r4
 8003e60:	f7ff fec4 	bl	8003bec <dir_next>
		if (res != FR_OK) break;
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d0df      	beq.n	8003e28 <dir_read.constprop.0+0x8>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61e3      	str	r3, [r4, #28]
	return res;
 8003e6c:	e7e0      	b.n	8003e30 <dir_read.constprop.0+0x10>
 8003e6e:	2004      	movs	r0, #4
 8003e70:	e7fa      	b.n	8003e68 <dir_read.constprop.0+0x48>

08003e72 <dir_register>:
{
 8003e72:	b570      	push	{r4, r5, r6, lr}
 8003e74:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8003e76:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8003e78:	f7ff fdd9 	bl	8003a2e <dir_sdi.constprop.0>
	if (res == FR_OK) {
 8003e7c:	4604      	mov	r4, r0
 8003e7e:	b978      	cbnz	r0, 8003ea0 <dir_register+0x2e>
			res = move_window(fs, dp->sect);
 8003e80:	4630      	mov	r0, r6
 8003e82:	69e9      	ldr	r1, [r5, #28]
 8003e84:	f7ff facc 	bl	8003420 <move_window>
			if (res != FR_OK) break;
 8003e88:	4604      	mov	r4, r0
 8003e8a:	b948      	cbnz	r0, 8003ea0 <dir_register+0x2e>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 8003e8c:	6a2b      	ldr	r3, [r5, #32]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2be5      	cmp	r3, #229	@ 0xe5
 8003e92:	d00a      	beq.n	8003eaa <dir_register+0x38>
 8003e94:	b14b      	cbz	r3, 8003eaa <dir_register+0x38>
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8003e96:	2101      	movs	r1, #1
 8003e98:	4628      	mov	r0, r5
 8003e9a:	f7ff fea7 	bl	8003bec <dir_next>
 8003e9e:	e7ed      	b.n	8003e7c <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003ea0:	2c04      	cmp	r4, #4
 8003ea2:	bf08      	it	eq
 8003ea4:	2407      	moveq	r4, #7
}
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(fs, dp->sect);
 8003eaa:	4630      	mov	r0, r6
 8003eac:	69e9      	ldr	r1, [r5, #28]
 8003eae:	f7ff fab7 	bl	8003420 <move_window>
		if (res == FR_OK) {
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d1f6      	bne.n	8003ea6 <dir_register+0x34>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003eb8:	6a28      	ldr	r0, [r5, #32]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	f006 fe94 	bl	800abea <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003ec2:	6a2b      	ldr	r3, [r5, #32]
 8003ec4:	3524      	adds	r5, #36	@ 0x24
 8003ec6:	cd03      	ldmia	r5!, {r0, r1}
 8003ec8:	6018      	str	r0, [r3, #0]
 8003eca:	6059      	str	r1, [r3, #4]
 8003ecc:	8829      	ldrh	r1, [r5, #0]
 8003ece:	78aa      	ldrb	r2, [r5, #2]
 8003ed0:	8119      	strh	r1, [r3, #8]
 8003ed2:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	7133      	strb	r3, [r6, #4]
 8003ed8:	e7e5      	b.n	8003ea6 <dir_register+0x34>
	...

08003edc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8003edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 8003ee4:	a803      	add	r0, sp, #12
{
 8003ee6:	4614      	mov	r4, r2
	const TCHAR *rp = path;
 8003ee8:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8003eea:	f7ff fa35 	bl	8003358 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003eee:	1e05      	subs	r5, r0, #0
 8003ef0:	db1a      	blt.n	8003f28 <f_mount+0x4c>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8003ef2:	4e0e      	ldr	r6, [pc, #56]	@ (8003f2c <f_mount+0x50>)
 8003ef4:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]

	if (cfs) {					/* Unregister current filesystem object if registered */
 8003ef8:	b128      	cbz	r0, 8003f06 <f_mount+0x2a>
		FatFs[vol] = 0;
 8003efa:	2700      	movs	r7, #0
 8003efc:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
#if FF_FS_LOCK
		clear_share(cfs);
 8003f00:	f7ff f9fe 	bl	8003300 <clear_share>
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 8003f04:	7007      	strb	r7, [r0, #0]
	}

	if (fs) {					/* Register new filesystem object */
 8003f06:	9b01      	ldr	r3, [sp, #4]
 8003f08:	b123      	cbz	r3, 8003f14 <f_mount+0x38>
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8003f0a:	2200      	movs	r2, #0
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 8003f0c:	705d      	strb	r5, [r3, #1]
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8003f0e:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 8003f10:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 8003f14:	b12c      	cbz	r4, 8003f22 <f_mount+0x46>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 8003f16:	2200      	movs	r2, #0
 8003f18:	4668      	mov	r0, sp
 8003f1a:	a901      	add	r1, sp, #4
 8003f1c:	f7ff fbda 	bl	80036d4 <mount_volume>
 8003f20:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
}
 8003f22:	4620      	mov	r0, r4
 8003f24:	b005      	add	sp, #20
 8003f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8003f28:	240b      	movs	r4, #11
 8003f2a:	e7fa      	b.n	8003f22 <f_mount+0x46>
 8003f2c:	20000900 	.word	0x20000900

08003f30 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 8003f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f34:	b090      	sub	sp, #64	@ 0x40
 8003f36:	4691      	mov	r9, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8003f38:	4605      	mov	r5, r0
{
 8003f3a:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	f000 80f6 	beq.w	800412e <f_open+0x1fe>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8003f42:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = mount_volume(&path, &fs, mode);
 8003f46:	463a      	mov	r2, r7
 8003f48:	a903      	add	r1, sp, #12
 8003f4a:	a801      	add	r0, sp, #4
 8003f4c:	f7ff fbc2 	bl	80036d4 <mount_volume>
	if (res == FR_OK) {
 8003f50:	4680      	mov	r8, r0
 8003f52:	2800      	cmp	r0, #0
 8003f54:	f040 80e5 	bne.w	8004122 <f_open+0x1f2>
		dj.obj.fs = fs;
 8003f58:	9e03      	ldr	r6, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8003f5a:	9901      	ldr	r1, [sp, #4]
 8003f5c:	a804      	add	r0, sp, #16
		dj.obj.fs = fs;
 8003f5e:	9604      	str	r6, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8003f60:	f7ff fe9a 	bl	8003c98 <follow_path>
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8003f64:	4604      	mov	r4, r0
 8003f66:	b968      	cbnz	r0, 8003f84 <f_open+0x54>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003f68:	f99d 303f 	ldrsb.w	r3, [sp, #63]	@ 0x3f
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f2c0 80ad 	blt.w	80040cc <f_open+0x19c>
				res = FR_INVALID_NAME;
			}
#if FF_FS_LOCK
			else {
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
 8003f72:	f019 0f3e 	tst.w	r9, #62	@ 0x3e
 8003f76:	bf14      	ite	ne
 8003f78:	2101      	movne	r1, #1
 8003f7a:	2100      	moveq	r1, #0
 8003f7c:	a804      	add	r0, sp, #16
 8003f7e:	f7ff f937 	bl	80031f0 <chk_share>
 8003f82:	4604      	mov	r4, r0
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003f84:	f019 0f1c 	tst.w	r9, #28
 8003f88:	f000 80b3 	beq.w	80040f2 <f_open+0x1c2>
			if (res != FR_OK) {					/* No file, create new */
 8003f8c:	2c00      	cmp	r4, #0
 8003f8e:	f000 80a5 	beq.w	80040dc <f_open+0x1ac>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003f92:	2c04      	cmp	r4, #4
 8003f94:	f040 80c1 	bne.w	800411a <f_open+0x1ea>
	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 8003f98:	2300      	movs	r3, #0
 8003f9a:	4966      	ldr	r1, [pc, #408]	@ (8004134 <f_open+0x204>)
 8003f9c:	011a      	lsls	r2, r3, #4
 8003f9e:	588a      	ldr	r2, [r1, r2]
 8003fa0:	2a00      	cmp	r2, #0
 8003fa2:	f040 8095 	bne.w	80040d0 <f_open+0x1a0>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003fa6:	a804      	add	r0, sp, #16
 8003fa8:	f7ff ff63 	bl	8003e72 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8003fac:	4604      	mov	r4, r0
 8003fae:	2800      	cmp	r0, #0
 8003fb0:	f040 80b3 	bne.w	800411a <f_open+0x1ea>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003fb4:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8003fb8:	0738      	lsls	r0, r7, #28
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
					st_dword(dj.dir + DIR_CrtTime, tm);
 8003fba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8003fbc:	d53a      	bpl.n	8004034 <f_open+0x104>
	*ptr++ = (BYTE)val; val >>= 8;
 8003fbe:	2400      	movs	r4, #0
	*ptr++ = (BYTE)val;
 8003fc0:	225b      	movs	r2, #91	@ 0x5b
	*ptr++ = (BYTE)val; val >>= 8;
 8003fc2:	2161      	movs	r1, #97	@ 0x61
	*ptr++ = (BYTE)val;
 8003fc4:	745a      	strb	r2, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8003fc6:	739c      	strb	r4, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8003fc8:	73dc      	strb	r4, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 8003fca:	7419      	strb	r1, [r3, #16]
					st_dword(dj.dir + DIR_ModTime, tm);
 8003fcc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
	*ptr++ = (BYTE)val;
 8003fce:	765a      	strb	r2, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8003fd0:	759c      	strb	r4, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8003fd2:	75dc      	strb	r4, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8003fd4:	7619      	strb	r1, [r3, #24]
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8003fd6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003fd8:	7830      	ldrb	r0, [r6, #0]
 8003fda:	f7ff fcca 	bl	8003972 <ld_clust.isra.0>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003fde:	2320      	movs	r3, #32
 8003fe0:	72cb      	strb	r3, [r1, #11]
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8003fe2:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003fe4:	4622      	mov	r2, r4
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003fea:	f7ff fa0d 	bl	8003408 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8003fee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8003ff0:	771c      	strb	r4, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8003ff2:	775c      	strb	r4, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8003ff4:	779c      	strb	r4, [r3, #30]
	*ptr++ = (BYTE)val;
 8003ff6:	77dc      	strb	r4, [r3, #31]
					fs->wflag = 1;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	7133      	strb	r3, [r6, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8003ffc:	f1b9 0f00 	cmp.w	r9, #0
 8004000:	d014      	beq.n	800402c <f_open+0xfc>
						sc = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 8004002:	4622      	mov	r2, r4
 8004004:	4649      	mov	r1, r9
 8004006:	a804      	add	r0, sp, #16
						sc = fs->winsect;
 8004008:	f8d6 a02c 	ldr.w	sl, [r6, #44]	@ 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 800400c:	f7ff fd3f 	bl	8003a8e <remove_chain>
						if (res == FR_OK) {
 8004010:	4604      	mov	r4, r0
 8004012:	2800      	cmp	r0, #0
 8004014:	f040 8081 	bne.w	800411a <f_open+0x1ea>
							res = move_window(fs, sc);
 8004018:	4651      	mov	r1, sl
 800401a:	4630      	mov	r0, r6
 800401c:	f7ff fa00 	bl	8003420 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004020:	f109 33ff 	add.w	r3, r9, #4294967295
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 8004024:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004026:	60f3      	str	r3, [r6, #12]
		if (res == FR_OK) {
 8004028:	2800      	cmp	r0, #0
 800402a:	d176      	bne.n	800411a <f_open+0x1ea>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800402c:	0738      	lsls	r0, r7, #28
 800402e:	bf48      	it	mi
 8004030:	f047 0740 	orrmi.w	r7, r7, #64	@ 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004034:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
			fp->dir_ptr = dj.dir;
 8004036:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
#if FF_FS_LOCK
			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 8004038:	2f01      	cmp	r7, #1
 800403a:	bf94      	ite	ls
 800403c:	2100      	movls	r1, #0
 800403e:	2101      	movhi	r1, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004040:	626b      	str	r3, [r5, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8004042:	62ac      	str	r4, [r5, #40]	@ 0x28
			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 8004044:	a804      	add	r0, sp, #16
 8004046:	f7ff f901 	bl	800324c <inc_share>
 800404a:	6128      	str	r0, [r5, #16]
			if (fp->obj.lockid == 0) res = FR_INT_ERR;
 800404c:	2800      	cmp	r0, #0
 800404e:	d06c      	beq.n	800412a <f_open+0x1fa>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004050:	7830      	ldrb	r0, [r6, #0]
 8004052:	4621      	mov	r1, r4
 8004054:	f7ff fc8d 	bl	8003972 <ld_clust.isra.0>
 8004058:	60a8      	str	r0, [r5, #8]
 800405a:	4603      	mov	r3, r0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800405c:	f104 001c 	add.w	r0, r4, #28
 8004060:	f7ff f8bc 	bl	80031dc <ld_dword>
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
 8004064:	2400      	movs	r4, #0
#endif
			fp->obj.fs = fs;	/* Validate the file object */
			fp->obj.id = fs->id;
 8004066:	88f2      	ldrh	r2, [r6, #6]
			fp->fptr = 0;		/* Set file pointer top of the file */
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004068:	06b9      	lsls	r1, r7, #26
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800406a:	4681      	mov	r9, r0
 800406c:	60e8      	str	r0, [r5, #12]
			fp->cltbl = 0;		/* Disable fast seek mode */
 800406e:	62ec      	str	r4, [r5, #44]	@ 0x2c
			fp->obj.fs = fs;	/* Validate the file object */
 8004070:	602e      	str	r6, [r5, #0]
			fp->obj.id = fs->id;
 8004072:	80aa      	strh	r2, [r5, #4]
			fp->flag = mode;	/* Set file access mode */
 8004074:	752f      	strb	r7, [r5, #20]
			fp->err = 0;		/* Clear error flag */
 8004076:	756c      	strb	r4, [r5, #21]
			fp->sect = 0;		/* Invalidate current data sector */
 8004078:	622c      	str	r4, [r5, #32]
			fp->fptr = 0;		/* Set file pointer top of the file */
 800407a:	61ac      	str	r4, [r5, #24]
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800407c:	d522      	bpl.n	80040c4 <f_open+0x194>
 800407e:	b308      	cbz	r0, 80040c4 <f_open+0x194>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004080:	8972      	ldrh	r2, [r6, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004082:	61a8      	str	r0, [r5, #24]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004084:	ebb0 2f42 	cmp.w	r0, r2, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004088:	ea4f 2742 	mov.w	r7, r2, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800408c:	d90d      	bls.n	80040aa <f_open+0x17a>
					clst = get_fat(&fp->obj, clst);
 800408e:	4619      	mov	r1, r3
 8004090:	6828      	ldr	r0, [r5, #0]
 8004092:	f7ff fc76 	bl	8003982 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8004096:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8004098:	4603      	mov	r3, r0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800409a:	eba9 0907 	sub.w	r9, r9, r7
					if (clst <= 1) res = FR_INT_ERR;
 800409e:	d934      	bls.n	800410a <f_open+0x1da>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80040a0:	1c42      	adds	r2, r0, #1
 80040a2:	d034      	beq.n	800410e <f_open+0x1de>
 80040a4:	45b9      	cmp	r9, r7
 80040a6:	d8f2      	bhi.n	800408e <f_open+0x15e>
 80040a8:	2400      	movs	r4, #0
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
 80040aa:	61eb      	str	r3, [r5, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80040ac:	bb94      	cbnz	r4, 8004114 <f_open+0x1e4>
 80040ae:	f3c9 0208 	ubfx	r2, r9, #0, #9
 80040b2:	b13a      	cbz	r2, 80040c4 <f_open+0x194>
					sc = clst2sect(fs, clst);
 80040b4:	4619      	mov	r1, r3
 80040b6:	4630      	mov	r0, r6
 80040b8:	f7ff f932 	bl	8003320 <clst2sect>
					if (sc == 0) {
 80040bc:	b348      	cbz	r0, 8004112 <f_open+0x1e2>
						res = FR_INT_ERR;
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80040be:	eb00 2059 	add.w	r0, r0, r9, lsr #9
 80040c2:	6228      	str	r0, [r5, #32]
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */

	LEAVE_FF(fs, res);
}
 80040c4:	4640      	mov	r0, r8
 80040c6:	b010      	add	sp, #64	@ 0x40
 80040c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
 80040cc:	2406      	movs	r4, #6
 80040ce:	e759      	b.n	8003f84 <f_open+0x54>
	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 80040d0:	3301      	adds	r3, #1
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	f47f af62 	bne.w	8003f9c <f_open+0x6c>
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80040d8:	2412      	movs	r4, #18
 80040da:	e01e      	b.n	800411a <f_open+0x1ea>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80040dc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80040e0:	f013 0f11 	tst.w	r3, #17
 80040e4:	d10f      	bne.n	8004106 <f_open+0x1d6>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80040e6:	f019 0f04 	tst.w	r9, #4
 80040ea:	f43f af65 	beq.w	8003fb8 <f_open+0x88>
 80040ee:	2408      	movs	r4, #8
 80040f0:	e013      	b.n	800411a <f_open+0x1ea>
			if (res == FR_OK) {					/* Is the object exsiting? */
 80040f2:	b994      	cbnz	r4, 800411a <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 80040f4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80040f8:	06da      	lsls	r2, r3, #27
 80040fa:	d414      	bmi.n	8004126 <f_open+0x1f6>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 80040fc:	f019 0f02 	tst.w	r9, #2
 8004100:	d094      	beq.n	800402c <f_open+0xfc>
 8004102:	07dc      	lsls	r4, r3, #31
 8004104:	d592      	bpl.n	800402c <f_open+0xfc>
					res = FR_DENIED;
 8004106:	2407      	movs	r4, #7
 8004108:	e007      	b.n	800411a <f_open+0x1ea>
					if (clst <= 1) res = FR_INT_ERR;
 800410a:	2402      	movs	r4, #2
 800410c:	e7cd      	b.n	80040aa <f_open+0x17a>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800410e:	2401      	movs	r4, #1
 8004110:	e7cb      	b.n	80040aa <f_open+0x17a>
						res = FR_INT_ERR;
 8004112:	2402      	movs	r4, #2
				if (res != FR_OK) dec_share(fp->obj.lockid); /* Decrement file open counter if seek failed */
 8004114:	6928      	ldr	r0, [r5, #16]
 8004116:	f7ff f8d7 	bl	80032c8 <dec_share>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800411a:	2300      	movs	r3, #0
 800411c:	46a0      	mov	r8, r4
 800411e:	602b      	str	r3, [r5, #0]
 8004120:	e7d0      	b.n	80040c4 <f_open+0x194>
 8004122:	4604      	mov	r4, r0
 8004124:	e7f9      	b.n	800411a <f_open+0x1ea>
					res = FR_NO_FILE;
 8004126:	2404      	movs	r4, #4
 8004128:	e7f7      	b.n	800411a <f_open+0x1ea>
			if (fp->obj.lockid == 0) res = FR_INT_ERR;
 800412a:	2402      	movs	r4, #2
 800412c:	e7f5      	b.n	800411a <f_open+0x1ea>
	if (!fp) return FR_INVALID_OBJECT;
 800412e:	f04f 0809 	mov.w	r8, #9
 8004132:	e7c7      	b.n	80040c4 <f_open+0x194>
 8004134:	200008bc 	.word	0x200008bc

08004138 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 8004138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800413c:	469a      	mov	sl, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800413e:	2300      	movs	r3, #0
{
 8004140:	b085      	sub	sp, #20
 8004142:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 8004144:	f8ca 3000 	str.w	r3, [sl]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8004148:	a903      	add	r1, sp, #12
{
 800414a:	4604      	mov	r4, r0
 800414c:	4615      	mov	r5, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800414e:	f7ff f920 	bl	8003392 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004152:	4606      	mov	r6, r0
 8004154:	bb10      	cbnz	r0, 800419c <f_read+0x64>
 8004156:	7d66      	ldrb	r6, [r4, #21]
 8004158:	bb06      	cbnz	r6, 800419c <f_read+0x64>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800415a:	f894 b014 	ldrb.w	fp, [r4, #20]
 800415e:	f01b 0301 	ands.w	r3, fp, #1
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	f000 8086 	beq.w	8004274 <f_read+0x13c>
	remain = fp->obj.objsize - fp->fptr;
 8004168:	68e7      	ldr	r7, [r4, #12]
 800416a:	69a3      	ldr	r3, [r4, #24]
 800416c:	1aff      	subs	r7, r7, r3
 800416e:	42af      	cmp	r7, r5
 8004170:	bf28      	it	cs
 8004172:	462f      	movcs	r7, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8004174:	b197      	cbz	r7, 800419c <f_read+0x64>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8004176:	69a1      	ldr	r1, [r4, #24]
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8004178:	f8dd 800c 	ldr.w	r8, [sp, #12]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800417c:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8004180:	2b00      	cmp	r3, #0
 8004182:	d15e      	bne.n	8004242 <f_read+0x10a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8004184:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 8004188:	3d01      	subs	r5, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800418a:	ea15 2551 	ands.w	r5, r5, r1, lsr #9
 800418e:	d11b      	bne.n	80041c8 <f_read+0x90>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004190:	b941      	cbnz	r1, 80041a4 <f_read+0x6c>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8004192:	68a0      	ldr	r0, [r4, #8]
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8004194:	2801      	cmp	r0, #1
 8004196:	d810      	bhi.n	80041ba <f_read+0x82>
 8004198:	2602      	movs	r6, #2
 800419a:	7566      	strb	r6, [r4, #21]
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800419c:	4630      	mov	r0, r6
 800419e:	b005      	add	sp, #20
 80041a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 80041a4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80041a6:	b11b      	cbz	r3, 80041b0 <f_read+0x78>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80041a8:	4620      	mov	r0, r4
 80041aa:	f7ff f8c4 	bl	8003336 <clmt_clust>
 80041ae:	e7f1      	b.n	8004194 <f_read+0x5c>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80041b0:	69e1      	ldr	r1, [r4, #28]
 80041b2:	6820      	ldr	r0, [r4, #0]
 80041b4:	f7ff fbe5 	bl	8003982 <get_fat.isra.0>
 80041b8:	e7ec      	b.n	8004194 <f_read+0x5c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80041ba:	1c43      	adds	r3, r0, #1
 80041bc:	d103      	bne.n	80041c6 <f_read+0x8e>
 80041be:	2301      	movs	r3, #1
 80041c0:	9e00      	ldr	r6, [sp, #0]
 80041c2:	7563      	strb	r3, [r4, #21]
 80041c4:	e7ea      	b.n	800419c <f_read+0x64>
				fp->clust = clst;				/* Update current cluster */
 80041c6:	61e0      	str	r0, [r4, #28]
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 80041c8:	4640      	mov	r0, r8
 80041ca:	69e1      	ldr	r1, [r4, #28]
 80041cc:	f7ff f8a8 	bl	8003320 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d0e1      	beq.n	8004198 <f_read+0x60>
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 80041d4:	f5b7 7f00 	cmp.w	r7, #512	@ 0x200
			sect += csect;
 80041d8:	eb05 0200 	add.w	r2, r5, r0
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 80041dc:	d330      	bcc.n	8004240 <f_read+0x108>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80041de:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 80041e2:	eb05 2057 	add.w	r0, r5, r7, lsr #9
 80041e6:	4288      	cmp	r0, r1
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80041e8:	ea4f 2b57 	mov.w	fp, r7, lsr #9
					cc = fs->csize - csect;
 80041ec:	bf88      	it	hi
 80041ee:	eba1 0b05 	subhi.w	fp, r1, r5
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80041f2:	465b      	mov	r3, fp
 80041f4:	4649      	mov	r1, r9
 80041f6:	f898 0001 	ldrb.w	r0, [r8, #1]
 80041fa:	9201      	str	r2, [sp, #4]
 80041fc:	f7fe fe82 	bl	8002f04 <disk_read>
 8004200:	2800      	cmp	r0, #0
 8004202:	d1dc      	bne.n	80041be <f_read+0x86>
				if (fs->wflag && fs->winsect - sect < cc) {
 8004204:	f898 1004 	ldrb.w	r1, [r8, #4]
 8004208:	b169      	cbz	r1, 8004226 <f_read+0xee>
 800420a:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800420e:	9a01      	ldr	r2, [sp, #4]
 8004210:	1a80      	subs	r0, r0, r2
 8004212:	4558      	cmp	r0, fp
 8004214:	d207      	bcs.n	8004226 <f_read+0xee>
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
 8004216:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800421a:	f108 0130 	add.w	r1, r8, #48	@ 0x30
 800421e:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8004222:	f006 fdf4 	bl	800ae0e <memcpy>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8004226:	ea4f 254b 	mov.w	r5, fp, lsl #9
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800422a:	f8da 3000 	ldr.w	r3, [sl]
 800422e:	1b7f      	subs	r7, r7, r5
 8004230:	442b      	add	r3, r5
 8004232:	f8ca 3000 	str.w	r3, [sl]
 8004236:	69a3      	ldr	r3, [r4, #24]
 8004238:	44a9      	add	r9, r5
 800423a:	442b      	add	r3, r5
 800423c:	61a3      	str	r3, [r4, #24]
 800423e:	e799      	b.n	8004174 <f_read+0x3c>
			fp->sect = sect;
 8004240:	6222      	str	r2, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8004242:	69a5      	ldr	r5, [r4, #24]
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 8004244:	4640      	mov	r0, r8
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8004246:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800424a:	f5c5 7500 	rsb	r5, r5, #512	@ 0x200
 800424e:	42bd      	cmp	r5, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 8004250:	6a21      	ldr	r1, [r4, #32]
 8004252:	bf28      	it	cs
 8004254:	463d      	movcs	r5, r7
 8004256:	f7ff f8e3 	bl	8003420 <move_window>
 800425a:	2800      	cmp	r0, #0
 800425c:	d1af      	bne.n	80041be <f_read+0x86>
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800425e:	69a1      	ldr	r1, [r4, #24]
 8004260:	f108 0830 	add.w	r8, r8, #48	@ 0x30
 8004264:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004268:	462a      	mov	r2, r5
 800426a:	4648      	mov	r0, r9
 800426c:	4441      	add	r1, r8
 800426e:	f006 fdce 	bl	800ae0e <memcpy>
 8004272:	e7da      	b.n	800422a <f_read+0xf2>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8004274:	2607      	movs	r6, #7
 8004276:	e791      	b.n	800419c <f_read+0x64>

08004278 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 8004278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427c:	469a      	mov	sl, r3
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800427e:	2300      	movs	r3, #0
{
 8004280:	b085      	sub	sp, #20
 8004282:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 8004284:	f8ca 3000 	str.w	r3, [sl]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004288:	a903      	add	r1, sp, #12
{
 800428a:	4604      	mov	r4, r0
 800428c:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800428e:	f7ff f880 	bl	8003392 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004292:	4605      	mov	r5, r0
 8004294:	bb50      	cbnz	r0, 80042ec <f_write+0x74>
 8004296:	7d65      	ldrb	r5, [r4, #21]
 8004298:	bb45      	cbnz	r5, 80042ec <f_write+0x74>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800429a:	7d23      	ldrb	r3, [r4, #20]
 800429c:	079a      	lsls	r2, r3, #30
 800429e:	f140 80ab 	bpl.w	80043f8 <f_write+0x180>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80042a2:	69a3      	ldr	r3, [r4, #24]
 80042a4:	42fb      	cmn	r3, r7
 80042a6:	d300      	bcc.n	80042aa <f_write+0x32>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80042a8:	43df      	mvns	r7, r3
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 80042aa:	b1df      	cbz	r7, 80042e4 <f_write+0x6c>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80042ac:	69a1      	ldr	r1, [r4, #24]
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80042ae:	9e03      	ldr	r6, [sp, #12]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80042b0:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f040 8083 	bne.w	80043c0 <f_write+0x148>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80042ba:	f8b6 800a 	ldrh.w	r8, [r6, #10]
 80042be:	f108 38ff 	add.w	r8, r8, #4294967295
			if (csect == 0) {				/* On the cluster boundary? */
 80042c2:	ea18 2851 	ands.w	r8, r8, r1, lsr #9
 80042c6:	d124      	bne.n	8004312 <f_write+0x9a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80042c8:	b931      	cbnz	r1, 80042d8 <f_write+0x60>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80042ca:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80042cc:	b9a0      	cbnz	r0, 80042f8 <f_write+0x80>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80042ce:	4601      	mov	r1, r0
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80042d0:	4620      	mov	r0, r4
 80042d2:	f7ff fc13 	bl	8003afc <create_chain>
 80042d6:	e004      	b.n	80042e2 <f_write+0x6a>
					if (fp->cltbl) {
 80042d8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80042da:	b15b      	cbz	r3, 80042f4 <f_write+0x7c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80042dc:	4620      	mov	r0, r4
 80042de:	f7ff f82a 	bl	8003336 <clmt_clust>
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80042e2:	b948      	cbnz	r0, 80042f8 <f_write+0x80>
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80042e4:	7d23      	ldrb	r3, [r4, #20]
 80042e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042ea:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 80042ec:	4628      	mov	r0, r5
 80042ee:	b005      	add	sp, #20
 80042f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80042f4:	69e1      	ldr	r1, [r4, #28]
 80042f6:	e7eb      	b.n	80042d0 <f_write+0x58>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80042f8:	2801      	cmp	r0, #1
 80042fa:	d102      	bne.n	8004302 <f_write+0x8a>
 80042fc:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80042fe:	7565      	strb	r5, [r4, #21]
 8004300:	e7f4      	b.n	80042ec <f_write+0x74>
 8004302:	1c43      	adds	r3, r0, #1
 8004304:	d101      	bne.n	800430a <f_write+0x92>
 8004306:	2501      	movs	r5, #1
 8004308:	e7f9      	b.n	80042fe <f_write+0x86>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800430a:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 800430c:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800430e:	b903      	cbnz	r3, 8004312 <f_write+0x9a>
 8004310:	60a0      	str	r0, [r4, #8]
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
 8004312:	6af2      	ldr	r2, [r6, #44]	@ 0x2c
 8004314:	6a23      	ldr	r3, [r4, #32]
 8004316:	429a      	cmp	r2, r3
 8004318:	d104      	bne.n	8004324 <f_write+0xac>
 800431a:	4630      	mov	r0, r6
 800431c:	f7ff f853 	bl	80033c6 <sync_window>
 8004320:	2800      	cmp	r0, #0
 8004322:	d1f0      	bne.n	8004306 <f_write+0x8e>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8004324:	4630      	mov	r0, r6
 8004326:	69e1      	ldr	r1, [r4, #28]
 8004328:	f7fe fffa 	bl	8003320 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800432c:	2800      	cmp	r0, #0
 800432e:	d0e5      	beq.n	80042fc <f_write+0x84>
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8004330:	f5b7 7f00 	cmp.w	r7, #512	@ 0x200
			sect += csect;
 8004334:	eb08 0b00 	add.w	fp, r8, r0
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8004338:	d335      	bcc.n	80043a6 <f_write+0x12e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800433a:	8971      	ldrh	r1, [r6, #10]
 800433c:	eb08 2057 	add.w	r0, r8, r7, lsr #9
 8004340:	4288      	cmp	r0, r1
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8004342:	ea4f 2357 	mov.w	r3, r7, lsr #9
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004346:	465a      	mov	r2, fp
					cc = fs->csize - csect;
 8004348:	bf88      	it	hi
 800434a:	eba1 0308 	subhi.w	r3, r1, r8
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800434e:	7870      	ldrb	r0, [r6, #1]
 8004350:	4649      	mov	r1, r9
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	f7fe fdeb 	bl	8002f2e <disk_write>
 8004358:	4680      	mov	r8, r0
 800435a:	2800      	cmp	r0, #0
 800435c:	d1d3      	bne.n	8004306 <f_write+0x8e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 800435e:	6af1      	ldr	r1, [r6, #44]	@ 0x2c
 8004360:	9b01      	ldr	r3, [sp, #4]
 8004362:	eba1 010b 	sub.w	r1, r1, fp
 8004366:	4299      	cmp	r1, r3
 8004368:	d20a      	bcs.n	8004380 <f_write+0x108>
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
 800436a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800436e:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8004372:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 8004376:	f006 fd4a 	bl	800ae0e <memcpy>
					fs->wflag = 0;
 800437a:	9b01      	ldr	r3, [sp, #4]
 800437c:	f886 8004 	strb.w	r8, [r6, #4]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004380:	ea4f 2843 	mov.w	r8, r3, lsl #9
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8004384:	f8da 3000 	ldr.w	r3, [sl]
 8004388:	68e2      	ldr	r2, [r4, #12]
 800438a:	4443      	add	r3, r8
 800438c:	f8ca 3000 	str.w	r3, [sl]
 8004390:	69a3      	ldr	r3, [r4, #24]
 8004392:	eba7 0708 	sub.w	r7, r7, r8
 8004396:	4443      	add	r3, r8
 8004398:	44c1      	add	r9, r8
 800439a:	61a3      	str	r3, [r4, #24]
 800439c:	429a      	cmp	r2, r3
 800439e:	bf2c      	ite	cs
 80043a0:	60e2      	strcs	r2, [r4, #12]
 80043a2:	60e3      	strcc	r3, [r4, #12]
 80043a4:	e781      	b.n	80042aa <f_write+0x32>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
 80043a6:	69a1      	ldr	r1, [r4, #24]
 80043a8:	68e3      	ldr	r3, [r4, #12]
 80043aa:	4299      	cmp	r1, r3
 80043ac:	d306      	bcc.n	80043bc <f_write+0x144>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
 80043ae:	4630      	mov	r0, r6
 80043b0:	f7ff f809 	bl	80033c6 <sync_window>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d1a6      	bne.n	8004306 <f_write+0x8e>
				fs->winsect = sect;
 80043b8:	f8c6 b02c 	str.w	fp, [r6, #44]	@ 0x2c
			fp->sect = sect;
 80043bc:	f8c4 b020 	str.w	fp, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 80043c0:	69a3      	ldr	r3, [r4, #24]
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 80043c2:	4630      	mov	r0, r6
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 80043c4:	f3c3 0808 	ubfx	r8, r3, #0, #9
 80043c8:	f5c8 7800 	rsb	r8, r8, #512	@ 0x200
 80043cc:	45b8      	cmp	r8, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 80043ce:	6a21      	ldr	r1, [r4, #32]
 80043d0:	bf28      	it	cs
 80043d2:	46b8      	movcs	r8, r7
 80043d4:	f7ff f824 	bl	8003420 <move_window>
 80043d8:	2800      	cmp	r0, #0
 80043da:	d194      	bne.n	8004306 <f_write+0x8e>
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80043dc:	69a3      	ldr	r3, [r4, #24]
 80043de:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 80043e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e6:	4418      	add	r0, r3
 80043e8:	4642      	mov	r2, r8
 80043ea:	4649      	mov	r1, r9
 80043ec:	f006 fd0f 	bl	800ae0e <memcpy>
		fs->wflag = 1;
 80043f0:	f04f 0301 	mov.w	r3, #1
 80043f4:	7133      	strb	r3, [r6, #4]
 80043f6:	e7c5      	b.n	8004384 <f_write+0x10c>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80043f8:	2507      	movs	r5, #7
 80043fa:	e777      	b.n	80042ec <f_write+0x74>

080043fc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 80043fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80043fe:	a901      	add	r1, sp, #4
{
 8004400:	4606      	mov	r6, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004402:	f7fe ffc6 	bl	8003392 <validate>
	if (res == FR_OK) {
 8004406:	4604      	mov	r4, r0
 8004408:	bb58      	cbnz	r0, 8004462 <f_sync+0x66>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800440a:	7d34      	ldrb	r4, [r6, #20]
 800440c:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 8004410:	d027      	beq.n	8004462 <f_sync+0x66>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8004412:	9f01      	ldr	r7, [sp, #4]
 8004414:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 8004416:	4638      	mov	r0, r7
 8004418:	f7ff f802 	bl	8003420 <move_window>
				if (res == FR_OK) {
 800441c:	4604      	mov	r4, r0
 800441e:	bb00      	cbnz	r0, 8004462 <f_sync+0x66>
					dir = fp->dir_ptr;
 8004420:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8004422:	7aeb      	ldrb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8004424:	4629      	mov	r1, r5
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8004426:	f043 0320 	orr.w	r3, r3, #32
 800442a:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800442c:	68b2      	ldr	r2, [r6, #8]
 800442e:	6830      	ldr	r0, [r6, #0]
 8004430:	f7fe ffea 	bl	8003408 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8004434:	68f1      	ldr	r1, [r6, #12]
 8004436:	f105 001c 	add.w	r0, r5, #28
 800443a:	f7fe fed1 	bl	80031e0 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800443e:	2361      	movs	r3, #97	@ 0x61
 8004440:	762b      	strb	r3, [r5, #24]
	*ptr++ = (BYTE)val;
 8004442:	235b      	movs	r3, #91	@ 0x5b
 8004444:	766b      	strb	r3, [r5, #25]
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8004446:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8004448:	75ac      	strb	r4, [r5, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 800444a:	75ec      	strb	r4, [r5, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 800444c:	74ac      	strb	r4, [r5, #18]
	*ptr++ = (BYTE)val;
 800444e:	74ec      	strb	r4, [r5, #19]
					res = sync_fs(fs);					/* Restore it to the directory */
 8004450:	4638      	mov	r0, r7
					fs->wflag = 1;
 8004452:	713b      	strb	r3, [r7, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 8004454:	f7ff f8ef 	bl	8003636 <sync_fs>
 8004458:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800445a:	7d33      	ldrb	r3, [r6, #20]
 800445c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004460:	7533      	strb	r3, [r6, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8004462:	4620      	mov	r0, r4
 8004464:	b003      	add	sp, #12
 8004466:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004468 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 8004468:	b513      	push	{r0, r1, r4, lr}
 800446a:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800446c:	f7ff ffc6 	bl	80043fc <f_sync>
	if (res == FR_OK)
 8004470:	b948      	cbnz	r0, 8004486 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8004472:	4620      	mov	r0, r4
 8004474:	a901      	add	r1, sp, #4
 8004476:	f7fe ff8c 	bl	8003392 <validate>
		if (res == FR_OK) {
 800447a:	b920      	cbnz	r0, 8004486 <f_close+0x1e>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
 800447c:	6920      	ldr	r0, [r4, #16]
 800447e:	f7fe ff23 	bl	80032c8 <dec_share>
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
 8004482:	b900      	cbnz	r0, 8004486 <f_close+0x1e>
 8004484:	6020      	str	r0, [r4, #0]
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8004486:	b002      	add	sp, #8
 8004488:	bd10      	pop	{r4, pc}

0800448a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800448a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800448c:	4605      	mov	r5, r0
{
 800448e:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 8004490:	2800      	cmp	r0, #0
 8004492:	d037      	beq.n	8004504 <f_opendir+0x7a>

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
 8004494:	2200      	movs	r2, #0
 8004496:	a903      	add	r1, sp, #12
 8004498:	a801      	add	r0, sp, #4
 800449a:	f7ff f91b 	bl	80036d4 <mount_volume>
	if (res == FR_OK) {
 800449e:	4604      	mov	r4, r0
 80044a0:	b978      	cbnz	r0, 80044c2 <f_opendir+0x38>
		dp->obj.fs = fs;
 80044a2:	9e03      	ldr	r6, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80044a4:	4628      	mov	r0, r5
 80044a6:	9901      	ldr	r1, [sp, #4]
		dp->obj.fs = fs;
 80044a8:	602e      	str	r6, [r5, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80044aa:	f7ff fbf5 	bl	8003c98 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 80044ae:	4604      	mov	r4, r0
 80044b0:	bb18      	cbnz	r0, 80044fa <f_opendir+0x70>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80044b2:	f995 302f 	ldrsb.w	r3, [r5, #47]	@ 0x2f
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	db0b      	blt.n	80044d2 <f_opendir+0x48>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 80044ba:	79ab      	ldrb	r3, [r5, #6]
 80044bc:	06db      	lsls	r3, r3, #27
 80044be:	d403      	bmi.n	80044c8 <f_opendir+0x3e>
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80044c0:	2405      	movs	r4, #5
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function failed */
 80044c2:	2300      	movs	r3, #0
 80044c4:	602b      	str	r3, [r5, #0]
 80044c6:	e013      	b.n	80044f0 <f_opendir+0x66>
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80044c8:	7830      	ldrb	r0, [r6, #0]
 80044ca:	6a29      	ldr	r1, [r5, #32]
 80044cc:	f7ff fa51 	bl	8003972 <ld_clust.isra.0>
 80044d0:	60a8      	str	r0, [r5, #8]
				dp->obj.id = fs->id;
 80044d2:	88f3      	ldrh	r3, [r6, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80044d4:	4628      	mov	r0, r5
				dp->obj.id = fs->id;
 80044d6:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80044d8:	f7ff faa9 	bl	8003a2e <dir_sdi.constprop.0>
				if (res == FR_OK) {
 80044dc:	4604      	mov	r4, r0
 80044de:	b960      	cbnz	r0, 80044fa <f_opendir+0x70>
					if (dp->obj.sclust != 0) {
 80044e0:	68ab      	ldr	r3, [r5, #8]
 80044e2:	b143      	cbz	r3, 80044f6 <f_opendir+0x6c>
						dp->obj.lockid = inc_share(dp, 0);	/* Lock the sub directory */
 80044e4:	4601      	mov	r1, r0
 80044e6:	4628      	mov	r0, r5
 80044e8:	f7fe feb0 	bl	800324c <inc_share>
 80044ec:	6128      	str	r0, [r5, #16]
						if (!dp->obj.lockid) res = FR_TOO_MANY_OPEN_FILES;
 80044ee:	b138      	cbz	r0, 8004500 <f_opendir+0x76>

	LEAVE_FF(fs, res);
}
 80044f0:	4620      	mov	r0, r4
 80044f2:	b004      	add	sp, #16
 80044f4:	bd70      	pop	{r4, r5, r6, pc}
						dp->obj.lockid = 0;	/* Root directory need not to be locked */
 80044f6:	6128      	str	r0, [r5, #16]
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function failed */
 80044f8:	e7fa      	b.n	80044f0 <f_opendir+0x66>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80044fa:	2c04      	cmp	r4, #4
 80044fc:	d0e0      	beq.n	80044c0 <f_opendir+0x36>
 80044fe:	e7e0      	b.n	80044c2 <f_opendir+0x38>
						if (!dp->obj.lockid) res = FR_TOO_MANY_OPEN_FILES;
 8004500:	2412      	movs	r4, #18
 8004502:	e7de      	b.n	80044c2 <f_opendir+0x38>
	if (!dp) return FR_INVALID_OBJECT;
 8004504:	2409      	movs	r4, #9
 8004506:	e7f3      	b.n	80044f0 <f_opendir+0x66>

08004508 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8004508:	b537      	push	{r0, r1, r2, r4, r5, lr}
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 800450a:	a901      	add	r1, sp, #4
{
 800450c:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 800450e:	f7fe ff40 	bl	8003392 <validate>
	if (res == FR_OK) {
 8004512:	4604      	mov	r4, r0
 8004514:	b918      	cbnz	r0, 800451e <f_closedir+0x16>
#if FF_FS_LOCK
		if (dp->obj.lockid) res = dec_share(dp->obj.lockid);	/* Decrement sub-directory open counter */
 8004516:	6928      	ldr	r0, [r5, #16]
 8004518:	b920      	cbnz	r0, 8004524 <f_closedir+0x1c>
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
 800451a:	2300      	movs	r3, #0
 800451c:	602b      	str	r3, [r5, #0]
#if FF_FS_REENTRANT
		unlock_volume(fs, FR_OK);	/* Unlock volume */
#endif
	}
	return res;
}
 800451e:	4620      	mov	r0, r4
 8004520:	b003      	add	sp, #12
 8004522:	bd30      	pop	{r4, r5, pc}
		if (dp->obj.lockid) res = dec_share(dp->obj.lockid);	/* Decrement sub-directory open counter */
 8004524:	f7fe fed0 	bl	80032c8 <dec_share>
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
 8004528:	2800      	cmp	r0, #0
 800452a:	d0f6      	beq.n	800451a <f_closedir+0x12>
 800452c:	4604      	mov	r4, r0
 800452e:	e7f6      	b.n	800451e <f_closedir+0x16>

08004530 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8004530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004532:	460d      	mov	r5, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8004534:	a901      	add	r1, sp, #4
{
 8004536:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8004538:	f7fe ff2b 	bl	8003392 <validate>
	if (res == FR_OK) {
 800453c:	b9c8      	cbnz	r0, 8004572 <f_readdir+0x42>
		if (!fno) {
			res = dir_sdi(dp, 0);		/* Rewind the directory object */
 800453e:	4620      	mov	r0, r4
		if (!fno) {
 8004540:	b925      	cbnz	r5, 800454c <f_readdir+0x1c>
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 8004542:	b003      	add	sp, #12
 8004544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			res = dir_sdi(dp, 0);		/* Rewind the directory object */
 8004548:	f7ff ba71 	b.w	8003a2e <dir_sdi.constprop.0>
			res = DIR_READ_FILE(dp);		/* Read an item */
 800454c:	f7ff fc68 	bl	8003e20 <dir_read.constprop.0>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8004550:	f010 03fb 	ands.w	r3, r0, #251	@ 0xfb
 8004554:	d10d      	bne.n	8004572 <f_readdir+0x42>
	fno->fname[0] = 0;			/* Invaidate file info */
 8004556:	726b      	strb	r3, [r5, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8004558:	69e3      	ldr	r3, [r4, #28]
 800455a:	b11b      	cbz	r3, 8004564 <f_readdir+0x34>
 800455c:	4629      	mov	r1, r5
 800455e:	6a20      	ldr	r0, [r4, #32]
 8004560:	f7ff f9de 	bl	8003920 <get_fileinfo.part.0.constprop.0.isra.0>
				res = dir_next(dp, 0);		/* Increment index for next */
 8004564:	2100      	movs	r1, #0
 8004566:	4620      	mov	r0, r4
 8004568:	f7ff fb40 	bl	8003bec <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800456c:	2804      	cmp	r0, #4
 800456e:	bf08      	it	eq
 8004570:	2000      	moveq	r0, #0
}
 8004572:	b003      	add	sp, #12
 8004574:	bd30      	pop	{r4, r5, pc}

08004576 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8004576:	b530      	push	{r4, r5, lr}
 8004578:	b08f      	sub	sp, #60	@ 0x3c
 800457a:	9001      	str	r0, [sp, #4]
 800457c:	460d      	mov	r5, r1
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &dj.obj.fs, 0);
 800457e:	2200      	movs	r2, #0
 8004580:	a902      	add	r1, sp, #8
 8004582:	a801      	add	r0, sp, #4
 8004584:	f7ff f8a6 	bl	80036d4 <mount_volume>
	if (res == FR_OK) {
 8004588:	4604      	mov	r4, r0
 800458a:	b988      	cbnz	r0, 80045b0 <f_stat+0x3a>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800458c:	9901      	ldr	r1, [sp, #4]
 800458e:	a802      	add	r0, sp, #8
 8004590:	f7ff fb82 	bl	8003c98 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 8004594:	4604      	mov	r4, r0
 8004596:	b958      	cbnz	r0, 80045b0 <f_stat+0x3a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8004598:	f99d 3037 	ldrsb.w	r3, [sp, #55]	@ 0x37
 800459c:	2b00      	cmp	r3, #0
 800459e:	db0a      	blt.n	80045b6 <f_stat+0x40>
				res = FR_INVALID_NAME;
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80045a0:	b135      	cbz	r5, 80045b0 <f_stat+0x3a>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 80045a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	fno->fname[0] = 0;			/* Invaidate file info */
 80045a4:	7268      	strb	r0, [r5, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 80045a6:	b11b      	cbz	r3, 80045b0 <f_stat+0x3a>
 80045a8:	4629      	mov	r1, r5
 80045aa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80045ac:	f7ff f9b8 	bl	8003920 <get_fileinfo.part.0.constprop.0.isra.0>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 80045b0:	4620      	mov	r0, r4
 80045b2:	b00f      	add	sp, #60	@ 0x3c
 80045b4:	bd30      	pop	{r4, r5, pc}
				res = FR_INVALID_NAME;
 80045b6:	2406      	movs	r4, #6
 80045b8:	e7fa      	b.n	80045b0 <f_stat+0x3a>

080045ba <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80045ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045bc:	b09d      	sub	sp, #116	@ 0x74
 80045be:	9001      	str	r0, [sp, #4]
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
 80045c0:	2202      	movs	r2, #2
 80045c2:	a903      	add	r1, sp, #12
 80045c4:	a801      	add	r0, sp, #4
 80045c6:	f7ff f885 	bl	80036d4 <mount_volume>
	if (res == FR_OK) {
 80045ca:	b9a0      	cbnz	r0, 80045f6 <f_unlink+0x3c>
		dj.obj.fs = fs;
 80045cc:	9c03      	ldr	r4, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80045ce:	9901      	ldr	r1, [sp, #4]
 80045d0:	a804      	add	r0, sp, #16
		dj.obj.fs = fs;
 80045d2:	9404      	str	r4, [sp, #16]
		res = follow_path(&dj, path);		/* Follow the file path */
 80045d4:	f7ff fb60 	bl	8003c98 <follow_path>
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if FF_FS_LOCK
		if (res == FR_OK) res = chk_share(&dj, 2);	/* Check if it is an open object */
 80045d8:	b968      	cbnz	r0, 80045f6 <f_unlink+0x3c>
 80045da:	2102      	movs	r1, #2
 80045dc:	a804      	add	r0, sp, #16
 80045de:	f7fe fe07 	bl	80031f0 <chk_share>
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80045e2:	b940      	cbnz	r0, 80045f6 <f_unlink+0x3c>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80045e4:	f99d 303f 	ldrsb.w	r3, [sp, #63]	@ 0x3f
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	db35      	blt.n	8004658 <f_unlink+0x9e>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
 80045ec:	f89d 6016 	ldrb.w	r6, [sp, #22]
 80045f0:	07f2      	lsls	r2, r6, #31
 80045f2:	d502      	bpl.n	80045fa <f_unlink+0x40>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80045f4:	2007      	movs	r0, #7
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 80045f6:	b01d      	add	sp, #116	@ 0x74
 80045f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					dclst = ld_clust(fs, dj.dir);
 80045fa:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80045fc:	7820      	ldrb	r0, [r4, #0]
 80045fe:	4639      	mov	r1, r7
 8004600:	f7ff f9b7 	bl	8003972 <ld_clust.isra.0>
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8004604:	06f3      	lsls	r3, r6, #27
					dclst = ld_clust(fs, dj.dir);
 8004606:	4605      	mov	r5, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8004608:	d40f      	bmi.n	800462a <f_unlink+0x70>
	FATFS *fs = dp->obj.fs;
 800460a:	9e04      	ldr	r6, [sp, #16]
	res = move_window(fs, dp->sect);
 800460c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800460e:	4630      	mov	r0, r6
 8004610:	f7fe ff06 	bl	8003420 <move_window>
	if (res == FR_OK) {
 8004614:	2800      	cmp	r0, #0
 8004616:	d1ee      	bne.n	80045f6 <f_unlink+0x3c>
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
 8004618:	23e5      	movs	r3, #229	@ 0xe5
 800461a:	703b      	strb	r3, [r7, #0]
		fs->wflag = 1;
 800461c:	2301      	movs	r3, #1
 800461e:	7133      	strb	r3, [r6, #4]
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 8004620:	b995      	cbnz	r5, 8004648 <f_unlink+0x8e>
				if (res == FR_OK) res = sync_fs(fs);
 8004622:	4620      	mov	r0, r4
 8004624:	f7ff f807 	bl	8003636 <sync_fs>
 8004628:	e7e5      	b.n	80045f6 <f_unlink+0x3c>
						sdj.obj.sclust = dclst;
 800462a:	9012      	str	r0, [sp, #72]	@ 0x48
						res = dir_sdi(&sdj, 0);
 800462c:	a810      	add	r0, sp, #64	@ 0x40
						sdj.obj.fs = fs;			/* Open the sub-directory */
 800462e:	9410      	str	r4, [sp, #64]	@ 0x40
						res = dir_sdi(&sdj, 0);
 8004630:	f7ff f9fd 	bl	8003a2e <dir_sdi.constprop.0>
						if (res == FR_OK) {
 8004634:	2800      	cmp	r0, #0
 8004636:	d1de      	bne.n	80045f6 <f_unlink+0x3c>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
 8004638:	a810      	add	r0, sp, #64	@ 0x40
 800463a:	f7ff fbf1 	bl	8003e20 <dir_read.constprop.0>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800463e:	2800      	cmp	r0, #0
 8004640:	d0d8      	beq.n	80045f4 <f_unlink+0x3a>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8004642:	2804      	cmp	r0, #4
 8004644:	d1d7      	bne.n	80045f6 <f_unlink+0x3c>
 8004646:	e7e0      	b.n	800460a <f_unlink+0x50>
					res = remove_chain(&dj.obj, dclst, 0);
 8004648:	4602      	mov	r2, r0
 800464a:	4629      	mov	r1, r5
 800464c:	a804      	add	r0, sp, #16
 800464e:	f7ff fa1e 	bl	8003a8e <remove_chain>
				if (res == FR_OK) res = sync_fs(fs);
 8004652:	2800      	cmp	r0, #0
 8004654:	d1cf      	bne.n	80045f6 <f_unlink+0x3c>
 8004656:	e7e4      	b.n	8004622 <f_unlink+0x68>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8004658:	2006      	movs	r0, #6
 800465a:	e7cc      	b.n	80045f6 <f_unlink+0x3c>

0800465c <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 800465c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004660:	b093      	sub	sp, #76	@ 0x4c
 8004662:	900b      	str	r0, [sp, #44]	@ 0x2c
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8004664:	a80b      	add	r0, sp, #44	@ 0x2c
{
 8004666:	460e      	mov	r6, r1
 8004668:	4614      	mov	r4, r2
 800466a:	9307      	str	r3, [sp, #28]
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800466c:	f7fe fe74 	bl	8003358 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004670:	2800      	cmp	r0, #0
 8004672:	f2c0 820b 	blt.w	8004a8c <f_mkfs+0x430>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 8004676:	4bad      	ldr	r3, [pc, #692]	@ (800492c <f_mkfs+0x2d0>)
 8004678:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800467c:	b10b      	cbz	r3, 8004682 <f_mkfs+0x26>
 800467e:	2200      	movs	r2, #0
 8004680:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 8004682:	b2c3      	uxtb	r3, r0
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 8004684:	4618      	mov	r0, r3
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 8004686:	9301      	str	r3, [sp, #4]
	ds = disk_initialize(pdrv);
 8004688:	f7fe fc32 	bl	8002ef0 <disk_initialize>
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800468c:	07c2      	lsls	r2, r0, #31
 800468e:	f100 81ff 	bmi.w	8004a90 <f_mkfs+0x434>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 8004692:	0743      	lsls	r3, r0, #29
 8004694:	f100 81fe 	bmi.w	8004a94 <f_mkfs+0x438>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 8004698:	4ba5      	ldr	r3, [pc, #660]	@ (8004930 <f_mkfs+0x2d4>)
 800469a:	2e00      	cmp	r6, #0
 800469c:	bf08      	it	eq
 800469e:	461e      	moveq	r6, r3
	sz_blk = opt->align;
 80046a0:	6873      	ldr	r3, [r6, #4]
 80046a2:	930d      	str	r3, [sp, #52]	@ 0x34
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the parameter or lower layer */
 80046a4:	b923      	cbnz	r3, 80046b0 <f_mkfs+0x54>
 80046a6:	2103      	movs	r1, #3
 80046a8:	9801      	ldr	r0, [sp, #4]
 80046aa:	aa0d      	add	r2, sp, #52	@ 0x34
 80046ac:	f7fe fc54 	bl	8002f58 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 80046b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80046b2:	1e53      	subs	r3, r2, #1
 80046b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046b8:	d201      	bcs.n	80046be <f_mkfs+0x62>
 80046ba:	421a      	tst	r2, r3
 80046bc:	d001      	beq.n	80046c2 <f_mkfs+0x66>
 80046be:	2301      	movs	r3, #1
 80046c0:	930d      	str	r3, [sp, #52]	@ 0x34
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 80046c2:	f896 b001 	ldrb.w	fp, [r6, #1]
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 80046c6:	f8d6 9008 	ldr.w	r9, [r6, #8]
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 80046ca:	f10b 33ff 	add.w	r3, fp, #4294967295
 80046ce:	2b01      	cmp	r3, #1
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 80046d0:	f109 33ff 	add.w	r3, r9, #4294967295
 80046d4:	bf88      	it	hi
 80046d6:	f04f 0b01 	movhi.w	fp, #1
 80046da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046de:	d22b      	bcs.n	8004738 <f_mkfs+0xdc>
 80046e0:	f019 0f0f 	tst.w	r9, #15
 80046e4:	bf18      	it	ne
 80046e6:	f44f 7900 	movne.w	r9, #512	@ 0x200
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 80046ea:	68f5      	ldr	r5, [r6, #12]
 80046ec:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
 80046f0:	d825      	bhi.n	800473e <f_mkfs+0xe2>
 80046f2:	1e6b      	subs	r3, r5, #1
 80046f4:	422b      	tst	r3, r5
 80046f6:	bf18      	it	ne
 80046f8:	2500      	movne	r5, #0
	sz_au /= ss;	/* Byte --> Sector */

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 80046fa:	9b07      	ldr	r3, [sp, #28]
 80046fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004700:	f0c0 81ca 	bcc.w	8004a98 <f_mkfs+0x43c>
	buf = (BYTE*)work;		/* Working buffer */
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 8004704:	2c00      	cmp	r4, #0
 8004706:	f000 81c7 	beq.w	8004a98 <f_mkfs+0x43c>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 800470a:	2300      	movs	r3, #0
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800470c:	2101      	movs	r1, #1
 800470e:	9801      	ldr	r0, [sp, #4]
 8004710:	aa0e      	add	r2, sp, #56	@ 0x38
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 8004712:	7836      	ldrb	r6, [r6, #0]
	b_vol = sz_vol = 0;
 8004714:	930e      	str	r3, [sp, #56]	@ 0x38
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8004716:	f7fe fc1f 	bl	8002f58 <disk_ioctl>
 800471a:	2800      	cmp	r0, #0
 800471c:	f040 8303 	bne.w	8004d26 <f_mkfs+0x6ca>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 8004720:	f016 0308 	ands.w	r3, r6, #8
 8004724:	9306      	str	r3, [sp, #24]
 8004726:	d10c      	bne.n	8004742 <f_mkfs+0xe6>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 8004728:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800472a:	2b3f      	cmp	r3, #63	@ 0x3f
 800472c:	d977      	bls.n	800481e <f_mkfs+0x1c2>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 800472e:	3b3f      	subs	r3, #63	@ 0x3f
 8004730:	930e      	str	r3, [sp, #56]	@ 0x38
 8004732:	233f      	movs	r3, #63	@ 0x3f
	b_vol = sz_vol = 0;
 8004734:	9302      	str	r3, [sp, #8]
 8004736:	e005      	b.n	8004744 <f_mkfs+0xe8>
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 8004738:	f44f 7900 	mov.w	r9, #512	@ 0x200
 800473c:	e7d5      	b.n	80046ea <f_mkfs+0x8e>
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800473e:	2500      	movs	r5, #0
 8004740:	e7db      	b.n	80046fa <f_mkfs+0x9e>
	b_vol = sz_vol = 0;
 8004742:	9002      	str	r0, [sp, #8]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128 sectors */
 8004744:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 8004748:	f1b8 0f7f 	cmp.w	r8, #127	@ 0x7f
 800474c:	d965      	bls.n	800481a <f_mkfs+0x1be>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800474e:	f5b5 3f81 	cmp.w	r5, #66048	@ 0x10200
 8004752:	bf2c      	ite	cs
 8004754:	2580      	movcs	r5, #128	@ 0x80
	sz_au /= ss;	/* Byte --> Sector */
 8004756:	0a6d      	lsrcc	r5, r5, #9
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 8004758:	f016 0202 	ands.w	r2, r6, #2
 800475c:	f006 0301 	and.w	r3, r6, #1
 8004760:	9208      	str	r2, [sp, #32]
 8004762:	d05e      	beq.n	8004822 <f_mkfs+0x1c6>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 8004764:	f1c3 0303 	rsb	r3, r3, #3
 8004768:	b2db      	uxtb	r3, r3
					fsty = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
				sz_rsv = 1;						/* Number of reserved sectors */
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 800476a:	f3c9 1216 	ubfx	r2, r9, #4, #23
 800476e:	920a      	str	r2, [sp, #40]	@ 0x28
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8004770:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 8004772:	2b03      	cmp	r3, #3
 8004774:	f102 3eff 	add.w	lr, r2, #4294967295
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8004778:	f1c2 0200 	rsb	r2, r2, #0
 800477c:	9209      	str	r2, [sp, #36]	@ 0x24
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 800477e:	d17f      	bne.n	8004880 <f_mkfs+0x224>
				if (pau == 0) {	/* AU auto-selection */
 8004780:	2d00      	cmp	r5, #0
 8004782:	d154      	bne.n	800482e <f_mkfs+0x1d2>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8004784:	2501      	movs	r5, #1
 8004786:	4b6b      	ldr	r3, [pc, #428]	@ (8004934 <f_mkfs+0x2d8>)
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8004788:	ea4f 4158 	mov.w	r1, r8, lsr #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800478c:	f833 2b02 	ldrh.w	r2, [r3], #2
 8004790:	b112      	cbz	r2, 8004798 <f_mkfs+0x13c>
 8004792:	428a      	cmp	r2, r1
 8004794:	d94d      	bls.n	8004832 <f_mkfs+0x1d6>
 8004796:	2200      	movs	r2, #0
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 8004798:	fbb8 f3f5 	udiv	r3, r8, r5
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800479c:	0099      	lsls	r1, r3, #2
 800479e:	f201 2107 	addw	r1, r1, #519	@ 0x207
 80047a2:	0a49      	lsrs	r1, r1, #9
 80047a4:	9103      	str	r1, [sp, #12]
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 80047a6:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 80047aa:	4963      	ldr	r1, [pc, #396]	@ (8004938 <f_mkfs+0x2dc>)
 80047ac:	3bf6      	subs	r3, #246	@ 0xf6
 80047ae:	428b      	cmp	r3, r1
 80047b0:	d833      	bhi.n	800481a <f_mkfs+0x1be>
				sz_dir = 0;		/* No static directory */
 80047b2:	2300      	movs	r3, #0
				sz_rsv = 32;	/* Number of reserved sectors */
 80047b4:	f04f 0a20 	mov.w	sl, #32
 80047b8:	2603      	movs	r6, #3
				sz_dir = 0;		/* No static directory */
 80047ba:	9305      	str	r3, [sp, #20]
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80047bc:	9b02      	ldr	r3, [sp, #8]
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 80047be:	9809      	ldr	r0, [sp, #36]	@ 0x24
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80047c0:	eb0a 0703 	add.w	r7, sl, r3
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 80047c4:	9b03      	ldr	r3, [sp, #12]
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 80047c6:	2e03      	cmp	r6, #3
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 80047c8:	fb0b 7103 	mla	r1, fp, r3, r7
 80047cc:	9b05      	ldr	r3, [sp, #20]
 80047ce:	4419      	add	r1, r3
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 80047d0:	eb01 030e 	add.w	r3, r1, lr
 80047d4:	ea03 0300 	and.w	r3, r3, r0
 80047d8:	eba3 0301 	sub.w	r3, r3, r1
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 80047dc:	d12f      	bne.n	800483e <f_mkfs+0x1e2>
				sz_rsv += n; b_fat += n;
 80047de:	449a      	add	sl, r3
 80047e0:	441f      	add	r7, r3
				}
				sz_fat += n / n_fat;
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 80047e2:	9b02      	ldr	r3, [sp, #8]
 80047e4:	ebc3 1305 	rsb	r3, r3, r5, lsl #4
 80047e8:	440b      	add	r3, r1
 80047ea:	4598      	cmp	r8, r3
 80047ec:	d315      	bcc.n	800481a <f_mkfs+0x1be>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 80047ee:	9b05      	ldr	r3, [sp, #20]
 80047f0:	9903      	ldr	r1, [sp, #12]
 80047f2:	eba8 0303 	sub.w	r3, r8, r3
 80047f6:	eba3 030a 	sub.w	r3, r3, sl
 80047fa:	fb0b 3311 	mls	r3, fp, r1, r3
 80047fe:	fbb3 f3f5 	udiv	r3, r3, r5
			if (fsty == FS_FAT32) {
 8004802:	2e03      	cmp	r6, #3
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 8004804:	9304      	str	r3, [sp, #16]
			if (fsty == FS_FAT32) {
 8004806:	d12b      	bne.n	8004860 <f_mkfs+0x204>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 8004808:	f64f 73f5 	movw	r3, #65525	@ 0xfff5
 800480c:	9904      	ldr	r1, [sp, #16]
 800480e:	4299      	cmp	r1, r3
 8004810:	f200 815f 	bhi.w	8004ad2 <f_mkfs+0x476>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8004814:	b90a      	cbnz	r2, 800481a <f_mkfs+0x1be>
 8004816:	2d01      	cmp	r5, #1
 8004818:	d808      	bhi.n	800482c <f_mkfs+0x1d0>
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128 sectors */
 800481a:	200e      	movs	r0, #14
 800481c:	e284      	b.n	8004d28 <f_mkfs+0x6cc>
	b_vol = sz_vol = 0;
 800481e:	9b06      	ldr	r3, [sp, #24]
 8004820:	e788      	b.n	8004734 <f_mkfs+0xd8>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 813a 	beq.w	8004a9c <f_mkfs+0x440>
		fsty = FS_FAT16;
 8004828:	2302      	movs	r3, #2
 800482a:	e79e      	b.n	800476a <f_mkfs+0x10e>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800482c:	086d      	lsrs	r5, r5, #1
				if (pau == 0) {	/* AU auto-selection */
 800482e:	462a      	mov	r2, r5
 8004830:	e7b2      	b.n	8004798 <f_mkfs+0x13c>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8004832:	006d      	lsls	r5, r5, #1
 8004834:	e7aa      	b.n	800478c <f_mkfs+0x130>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	e028      	b.n	800488c <f_mkfs+0x230>
 800483a:	462b      	mov	r3, r5
 800483c:	e02b      	b.n	8004896 <f_mkfs+0x23a>
				if (n % n_fat) {	/* Adjust fractional error if needed */
 800483e:	fbb3 fcfb 	udiv	ip, r3, fp
 8004842:	fb0b 3c1c 	mls	ip, fp, ip, r3
 8004846:	f1bc 0f00 	cmp.w	ip, #0
 800484a:	d003      	beq.n	8004854 <f_mkfs+0x1f8>
					n--; sz_rsv++; b_fat++;
 800484c:	3b01      	subs	r3, #1
 800484e:	f10a 0a01 	add.w	sl, sl, #1
 8004852:	3701      	adds	r7, #1
				sz_fat += n / n_fat;
 8004854:	fbb3 f3fb 	udiv	r3, r3, fp
 8004858:	9803      	ldr	r0, [sp, #12]
 800485a:	4418      	add	r0, r3
 800485c:	9003      	str	r0, [sp, #12]
 800485e:	e7c0      	b.n	80047e2 <f_mkfs+0x186>
					LEAVE_MKFS(FR_MKFS_ABORTED);
				}
			}
			if (fsty == FS_FAT16) {
 8004860:	2e02      	cmp	r6, #2
 8004862:	f040 812f 	bne.w	8004ac4 <f_mkfs+0x468>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8004866:	f64f 73f5 	movw	r3, #65525	@ 0xfff5
 800486a:	9904      	ldr	r1, [sp, #16]
 800486c:	4299      	cmp	r1, r3
 800486e:	d930      	bls.n	80048d2 <f_mkfs+0x276>
					if (sz_au == 0 && (pau * 2) <= 64) {
 8004870:	2a00      	cmp	r2, #0
 8004872:	f040 8115 	bne.w	8004aa0 <f_mkfs+0x444>
 8004876:	006b      	lsls	r3, r5, #1
 8004878:	2b40      	cmp	r3, #64	@ 0x40
 800487a:	f200 8117 	bhi.w	8004aac <f_mkfs+0x450>
 800487e:	461d      	mov	r5, r3
				if (pau == 0) {	/* au auto-selection */
 8004880:	2d00      	cmp	r5, #0
 8004882:	d1da      	bne.n	800483a <f_mkfs+0x1de>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8004884:	2301      	movs	r3, #1
 8004886:	492d      	ldr	r1, [pc, #180]	@ (800493c <f_mkfs+0x2e0>)
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8004888:	ea4f 3618 	mov.w	r6, r8, lsr #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800488c:	f831 2b02 	ldrh.w	r2, [r1], #2
 8004890:	b10a      	cbz	r2, 8004896 <f_mkfs+0x23a>
 8004892:	42b2      	cmp	r2, r6
 8004894:	d9cf      	bls.n	8004836 <f_mkfs+0x1da>
				n_clst = (DWORD)sz_vol / pau;
 8004896:	fbb8 f2f3 	udiv	r2, r8, r3
				if (n_clst > MAX_FAT12) {
 800489a:	f640 71f5 	movw	r1, #4085	@ 0xff5
 800489e:	428a      	cmp	r2, r1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80048a0:	bf9b      	ittet	ls
 80048a2:	eb02 0242 	addls.w	r2, r2, r2, lsl #1
 80048a6:	3201      	addls	r2, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80048a8:	3202      	addhi	r2, #2
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80048aa:	0852      	lsrls	r2, r2, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80048ac:	bf8c      	ite	hi
 80048ae:	0052      	lslhi	r2, r2, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80048b0:	3203      	addls	r2, #3
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 80048b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80048b4:	f202 12ff 	addw	r2, r2, #511	@ 0x1ff
 80048b8:	ea4f 2252 	mov.w	r2, r2, lsr #9
 80048bc:	9203      	str	r2, [sp, #12]
 80048be:	bf88      	it	hi
 80048c0:	2602      	movhi	r6, #2
 80048c2:	462a      	mov	r2, r5
					fsty = FS_FAT12;
 80048c4:	bf98      	it	ls
 80048c6:	2601      	movls	r6, #1
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80048c8:	461d      	mov	r5, r3
				sz_rsv = 1;						/* Number of reserved sectors */
 80048ca:	f04f 0a01 	mov.w	sl, #1
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 80048ce:	9105      	str	r1, [sp, #20]
 80048d0:	e774      	b.n	80047bc <f_mkfs+0x160>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
					LEAVE_MKFS(FR_MKFS_ABORTED);
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80048d2:	f640 73f5 	movw	r3, #4085	@ 0xff5
 80048d6:	9904      	ldr	r1, [sp, #16]
 80048d8:	4299      	cmp	r1, r3
 80048da:	f200 80fa 	bhi.w	8004ad2 <f_mkfs+0x476>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80048de:	2a00      	cmp	r2, #0
 80048e0:	d19b      	bne.n	800481a <f_mkfs+0x1be>
 80048e2:	006d      	lsls	r5, r5, #1
 80048e4:	2d80      	cmp	r5, #128	@ 0x80
 80048e6:	d9cb      	bls.n	8004880 <f_mkfs+0x224>
 80048e8:	e797      	b.n	800481a <f_mkfs+0x1be>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
		if (sz_vol < 0x10000) {
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 80048ea:	4641      	mov	r1, r8
 80048ec:	f104 0020 	add.w	r0, r4, #32
 80048f0:	f7fe fc76 	bl	80031e0 <st_dword>
 80048f4:	e11a      	b.n	8004b2c <f_mkfs+0x4d0>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 80048f6:	f104 0027 	add.w	r0, r4, #39	@ 0x27
 80048fa:	f7fe fc71 	bl	80031e0 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 80048fe:	9b03      	ldr	r3, [sp, #12]
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8004900:	f104 022b 	add.w	r2, r4, #43	@ 0x2b
	*ptr++ = (BYTE)val; val >>= 8;
 8004904:	75a3      	strb	r3, [r4, #22]
 8004906:	f3c3 2307 	ubfx	r3, r3, #8, #8
	*ptr++ = (BYTE)val;
 800490a:	75e3      	strb	r3, [r4, #23]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800490c:	2380      	movs	r3, #128	@ 0x80
 800490e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8004912:	2329      	movs	r3, #41	@ 0x29
 8004914:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8004918:	4b09      	ldr	r3, [pc, #36]	@ (8004940 <f_mkfs+0x2e4>)
 800491a:	f103 0110 	add.w	r1, r3, #16
 800491e:	f853 0b04 	ldr.w	r0, [r3], #4
 8004922:	428b      	cmp	r3, r1
 8004924:	f842 0b04 	str.w	r0, [r2], #4
 8004928:	d1f9      	bne.n	800491e <f_mkfs+0x2c2>
 800492a:	e135      	b.n	8004b98 <f_mkfs+0x53c>
 800492c:	20000900 	.word	0x20000900
 8004930:	0800db98 	.word	0x0800db98
 8004934:	0800db88 	.word	0x0800db88
 8004938:	0ffeffff 	.word	0x0ffeffff
 800493c:	0800db7a 	.word	0x0800db7a
 8004940:	0800db65 	.word	0x0800db65
			if (fsty == FS_FAT32) {
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory at cluster# 2) */
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 8004944:	4620      	mov	r0, r4
 8004946:	9904      	ldr	r1, [sp, #16]
 8004948:	f7fe fc4a 	bl	80031e0 <st_dword>
 800494c:	e199      	b.n	8004c82 <f_mkfs+0x626>

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
		sys = 0x0C;		/* FAT32X */
 800494e:	f04f 090c 	mov.w	r9, #12
 8004952:	e1d8      	b.n	8004d06 <f_mkfs+0x6aa>
	} else if (sz_vol >= 0x10000) {
		sys = 0x06;		/* FAT12/16 (large) */
 8004954:	f04f 0906 	mov.w	r9, #6
 8004958:	e1d5      	b.n	8004d06 <f_mkfs+0x6aa>
		sz_drv32 = (DWORD)sz_drv;
 800495a:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800495e:	4b58      	ldr	r3, [pc, #352]	@ (8004ac0 <f_mkfs+0x464>)
 8004960:	4598      	cmp	r8, r3
 8004962:	d92f      	bls.n	80049c4 <f_mkfs+0x368>
 8004964:	2305      	movs	r3, #5
 8004966:	2508      	movs	r5, #8
 8004968:	f64f 423e 	movw	r2, #64574	@ 0xfc3e
 800496c:	006d      	lsls	r5, r5, #1
 800496e:	3b01      	subs	r3, #1
 8004970:	b2ed      	uxtb	r5, r5
 8004972:	d029      	beq.n	80049c8 <f_mkfs+0x36c>
 8004974:	fbb8 f1f5 	udiv	r1, r8, r5
 8004978:	4291      	cmp	r1, r2
 800497a:	d8f7      	bhi.n	800496c <f_mkfs+0x310>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 800497c:	2d00      	cmp	r5, #0
 800497e:	bf08      	it	eq
 8004980:	25ff      	moveq	r5, #255	@ 0xff
		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 8004982:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004986:	2100      	movs	r1, #0
 8004988:	4620      	mov	r0, r4
 800498a:	f006 f92e 	bl	800abea <memset>
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800498e:	f1b8 0f3f 	cmp.w	r8, #63	@ 0x3f
 8004992:	d81b      	bhi.n	80049cc <f_mkfs+0x370>
	*ptr++ = (BYTE)val; val >>= 8;
 8004994:	2355      	movs	r3, #85	@ 0x55
 8004996:	f884 31fe 	strb.w	r3, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 800499a:	23aa      	movs	r3, #170	@ 0xaa
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800499c:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val;
 800499e:	f884 31ff 	strb.w	r3, [r4, #511]	@ 0x1ff
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80049a2:	4621      	mov	r1, r4
 80049a4:	2301      	movs	r3, #1
 80049a6:	9801      	ldr	r0, [sp, #4]
 80049a8:	f7fe fac1 	bl	8002f2e <disk_write>
 80049ac:	2800      	cmp	r0, #0
 80049ae:	f040 81ba 	bne.w	8004d26 <f_mkfs+0x6ca>
			res = create_partition(pdrv, lba, sys, buf);
			if (res != FR_OK) LEAVE_MKFS(res);
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80049b2:	2200      	movs	r2, #0
 80049b4:	9801      	ldr	r0, [sp, #4]
 80049b6:	4611      	mov	r1, r2
 80049b8:	f7fe face 	bl	8002f58 <disk_ioctl>
 80049bc:	3800      	subs	r0, #0
 80049be:	bf18      	it	ne
 80049c0:	2001      	movne	r0, #1
 80049c2:	e1b1      	b.n	8004d28 <f_mkfs+0x6cc>
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 80049c4:	2508      	movs	r5, #8
 80049c6:	e7dc      	b.n	8004982 <f_mkfs+0x326>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 80049c8:	25ff      	movs	r5, #255	@ 0xff
 80049ca:	e7da      	b.n	8004982 <f_mkfs+0x326>
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 80049cc:	223f      	movs	r2, #63	@ 0x3f
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Partitio start CHS cylinder */
 80049ce:	4693      	mov	fp, r2
 80049d0:	f10d 0a40 	add.w	sl, sp, #64	@ 0x40
 80049d4:	f504 76e3 	add.w	r6, r4, #454	@ 0x1c6
 80049d8:	f504 73fb 	add.w	r3, r4, #502	@ 0x1f6
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 80049dc:	f85a 7b04 	ldr.w	r7, [sl], #4
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 80049e0:	2f64      	cmp	r7, #100	@ 0x64
 80049e2:	d805      	bhi.n	80049f0 <f_mkfs+0x394>
 80049e4:	bf1b      	ittet	ne
 80049e6:	2164      	movne	r1, #100	@ 0x64
 80049e8:	fbb8 f1f1 	udivne	r1, r8, r1
 80049ec:	4647      	moveq	r7, r8
 80049ee:	434f      	mulne	r7, r1
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 80049f0:	18b8      	adds	r0, r7, r2
 80049f2:	bf2c      	ite	cs
 80049f4:	2101      	movcs	r1, #1
 80049f6:	2100      	movcc	r1, #0
 80049f8:	4580      	cmp	r8, r0
 80049fa:	d301      	bcc.n	8004a00 <f_mkfs+0x3a4>
 80049fc:	2900      	cmp	r1, #0
 80049fe:	d042      	beq.n	8004a86 <f_mkfs+0x42a>
 8004a00:	eba8 0702 	sub.w	r7, r8, r2
			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Partition start LBA sector */
 8004a04:	4611      	mov	r1, r2
 8004a06:	4630      	mov	r0, r6
 8004a08:	9302      	str	r3, [sp, #8]
 8004a0a:	f7fe fbe9 	bl	80031e0 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Size of partition [sector] */
 8004a0e:	4639      	mov	r1, r7
 8004a10:	1d30      	adds	r0, r6, #4
 8004a12:	f7fe fbe5 	bl	80031e0 <st_dword>
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Partitio start CHS cylinder */
 8004a16:	fbb2 f1fb 	udiv	r1, r2, fp
 8004a1a:	fbb1 f0f5 	udiv	r0, r1, r5
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Partition start CHS head */
 8004a1e:	fb05 1c10 	mls	ip, r5, r0, r1
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Partition start CHS sector */
 8004a22:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
 8004a26:	1a51      	subs	r1, r2, r1
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Partition start CHS head */
 8004a28:	f806 cc07 	strb.w	ip, [r6, #-7]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8004a2c:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 8004a30:	f02c 0c3f 	bic.w	ip, ip, #63	@ 0x3f
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Partition start CHS sector */
 8004a34:	3101      	adds	r1, #1
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8004a36:	ea41 010c 	orr.w	r1, r1, ip
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* Partition end CHS cylinder */
 8004a3a:	443a      	add	r2, r7
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8004a3c:	f806 1c06 	strb.w	r1, [r6, #-6]
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* Partition end CHS cylinder */
 8004a40:	1e51      	subs	r1, r2, #1
 8004a42:	fbb1 f7fb 	udiv	r7, r1, fp
			pte[PTE_StCyl] = (BYTE)cy;
 8004a46:	f806 0c05 	strb.w	r0, [r6, #-5]
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* Partition end CHS cylinder */
 8004a4a:	fbb7 f0f5 	udiv	r0, r7, r5
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* Partition end CHS head */
 8004a4e:	fb05 7c10 	mls	ip, r5, r0, r7
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* Partition end CHS sector */
 8004a52:	ebc7 1787 	rsb	r7, r7, r7, lsl #6
 8004a56:	1bc9      	subs	r1, r1, r7
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8004a58:	9b02      	ldr	r3, [sp, #8]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8004a5a:	0887      	lsrs	r7, r0, #2
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* Partition end CHS sector */
 8004a5c:	3101      	adds	r1, #1
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8004a5e:	f027 073f 	bic.w	r7, r7, #63	@ 0x3f
 8004a62:	4339      	orrs	r1, r7
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8004a64:	42b3      	cmp	r3, r6
			pte[PTE_System] = sys;					/* System type */
 8004a66:	f806 9c04 	strb.w	r9, [r6, #-4]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* Partition end CHS head */
 8004a6a:	f806 cc03 	strb.w	ip, [r6, #-3]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8004a6e:	f806 1c02 	strb.w	r1, [r6, #-2]
			pte[PTE_EdCyl] = (BYTE)cy;
 8004a72:	f806 0c01 	strb.w	r0, [r6, #-1]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8004a76:	d08d      	beq.n	8004994 <f_mkfs+0x338>
 8004a78:	2a00      	cmp	r2, #0
 8004a7a:	d08b      	beq.n	8004994 <f_mkfs+0x338>
 8004a7c:	4590      	cmp	r8, r2
 8004a7e:	f106 0610 	add.w	r6, r6, #16
 8004a82:	d8ab      	bhi.n	80049dc <f_mkfs+0x380>
 8004a84:	e786      	b.n	8004994 <f_mkfs+0x338>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 8004a86:	2f00      	cmp	r7, #0
 8004a88:	d1bc      	bne.n	8004a04 <f_mkfs+0x3a8>
 8004a8a:	e783      	b.n	8004994 <f_mkfs+0x338>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004a8c:	200b      	movs	r0, #11
 8004a8e:	e14b      	b.n	8004d28 <f_mkfs+0x6cc>
	if (ds & STA_NOINIT) return FR_NOT_READY;
 8004a90:	2003      	movs	r0, #3
 8004a92:	e149      	b.n	8004d28 <f_mkfs+0x6cc>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 8004a94:	200a      	movs	r0, #10
 8004a96:	e147      	b.n	8004d28 <f_mkfs+0x6cc>
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 8004a98:	2011      	movs	r0, #17
 8004a9a:	e145      	b.n	8004d28 <f_mkfs+0x6cc>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 8004a9c:	2013      	movs	r0, #19
 8004a9e:	e143      	b.n	8004d28 <f_mkfs+0x6cc>
					if ((fsopt & FM_FAT32)) {
 8004aa0:	9b08      	ldr	r3, [sp, #32]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f43f aeb9 	beq.w	800481a <f_mkfs+0x1be>
 8004aa8:	4615      	mov	r5, r2
 8004aaa:	e675      	b.n	8004798 <f_mkfs+0x13c>
 8004aac:	9a08      	ldr	r2, [sp, #32]
 8004aae:	2a00      	cmp	r2, #0
 8004ab0:	f47f ae68 	bne.w	8004784 <f_mkfs+0x128>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8004ab4:	2b80      	cmp	r3, #128	@ 0x80
 8004ab6:	f63f aeb0 	bhi.w	800481a <f_mkfs+0x1be>
 8004aba:	461d      	mov	r5, r3
 8004abc:	e6eb      	b.n	8004896 <f_mkfs+0x23a>
 8004abe:	bf00      	nop
 8004ac0:	0007e1f7 	.word	0x0007e1f7
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 8004ac4:	f640 73f5 	movw	r3, #4085	@ 0xff5
 8004ac8:	9a04      	ldr	r2, [sp, #16]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	f63f aea5 	bhi.w	800481a <f_mkfs+0x1be>
 8004ad0:	2601      	movs	r6, #1
		memset(buf, 0, ss);
 8004ad2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4620      	mov	r0, r4
 8004ada:	f006 f886 	bl	800abea <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8004ade:	4b94      	ldr	r3, [pc, #592]	@ (8004d30 <f_mkfs+0x6d4>)
 8004ae0:	2e03      	cmp	r6, #3
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	bf08      	it	eq
 8004ae6:	f04f 0900 	moveq.w	r9, #0
 8004aea:	6022      	str	r2, [r4, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8004aee:	f884 a00e 	strb.w	sl, [r4, #14]
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8004af2:	6062      	str	r2, [r4, #4]
 8004af4:	891a      	ldrh	r2, [r3, #8]
 8004af6:	7a9b      	ldrb	r3, [r3, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8004af8:	f3ca 2a07 	ubfx	sl, sl, #8, #8
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8004afc:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 8004afe:	2302      	movs	r3, #2
	*ptr++ = (BYTE)val; val >>= 8;
 8004b00:	f884 9011 	strb.w	r9, [r4, #17]
		if (sz_vol < 0x10000) {
 8004b04:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
	*ptr++ = (BYTE)val; val >>= 8;
 8004b08:	f3c9 2907 	ubfx	r9, r9, #8, #8
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8004b0c:	8122      	strh	r2, [r4, #8]
	*ptr++ = (BYTE)val;
 8004b0e:	7323      	strb	r3, [r4, #12]
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8004b10:	7365      	strb	r5, [r4, #13]
	*ptr++ = (BYTE)val;
 8004b12:	f884 a00f 	strb.w	sl, [r4, #15]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 8004b16:	f884 b010 	strb.w	fp, [r4, #16]
	*ptr++ = (BYTE)val;
 8004b1a:	f884 9012 	strb.w	r9, [r4, #18]
		if (sz_vol < 0x10000) {
 8004b1e:	f4bf aee4 	bcs.w	80048ea <f_mkfs+0x28e>
	*ptr++ = (BYTE)val; val >>= 8;
 8004b22:	f3c8 2307 	ubfx	r3, r8, #8, #8
 8004b26:	f884 8013 	strb.w	r8, [r4, #19]
	*ptr++ = (BYTE)val;
 8004b2a:	7523      	strb	r3, [r4, #20]
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8004b2c:	23f8      	movs	r3, #248	@ 0xf8
 8004b2e:	7563      	strb	r3, [r4, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b30:	233f      	movs	r3, #63	@ 0x3f
 8004b32:	7623      	strb	r3, [r4, #24]
 8004b34:	23ff      	movs	r3, #255	@ 0xff
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 8004b36:	9902      	ldr	r1, [sp, #8]
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 8004b38:	f108 48b6 	add.w	r8, r8, #1526726656	@ 0x5b000000
	*ptr++ = (BYTE)val; val >>= 8;
 8004b3c:	76a3      	strb	r3, [r4, #26]
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 8004b3e:	f104 001c 	add.w	r0, r4, #28
 8004b42:	f7fe fb4d 	bl	80031e0 <st_dword>
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 8004b46:	f508 08c2 	add.w	r8, r8, #6356992	@ 0x610000
		if (fsty == FS_FAT32) {
 8004b4a:	2e03      	cmp	r6, #3
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 8004b4c:	4641      	mov	r1, r8
		if (fsty == FS_FAT32) {
 8004b4e:	f47f aed2 	bne.w	80048f6 <f_mkfs+0x29a>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 8004b52:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 8004b56:	f7fe fb43 	bl	80031e0 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8004b5a:	9903      	ldr	r1, [sp, #12]
 8004b5c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004b60:	f7fe fb3e 	bl	80031e0 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 8004b64:	2302      	movs	r3, #2
 8004b66:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8004b70:	2306      	movs	r3, #6
 8004b72:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8004b76:	2380      	movs	r3, #128	@ 0x80
 8004b78:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8004b7c:	2329      	movs	r3, #41	@ 0x29
 8004b7e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8004b82:	4b6c      	ldr	r3, [pc, #432]	@ (8004d34 <f_mkfs+0x6d8>)
 8004b84:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8004b88:	f103 0110 	add.w	r1, r3, #16
 8004b8c:	f853 0b04 	ldr.w	r0, [r3], #4
 8004b90:	428b      	cmp	r3, r1
 8004b92:	f842 0b04 	str.w	r0, [r2], #4
 8004b96:	d1f9      	bne.n	8004b8c <f_mkfs+0x530>
	*ptr++ = (BYTE)val; val >>= 8;
 8004b98:	f04f 0a55 	mov.w	sl, #85	@ 0x55
	*ptr++ = (BYTE)val;
 8004b9c:	f04f 09aa 	mov.w	r9, #170	@ 0xaa
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8004ba0:	8819      	ldrh	r1, [r3, #0]
 8004ba2:	789b      	ldrb	r3, [r3, #2]
 8004ba4:	8011      	strh	r1, [r2, #0]
 8004ba6:	7093      	strb	r3, [r2, #2]
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8004ba8:	4621      	mov	r1, r4
 8004baa:	2301      	movs	r3, #1
 8004bac:	9a02      	ldr	r2, [sp, #8]
 8004bae:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8004bb0:	f884 a1fe 	strb.w	sl, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 8004bb4:	f884 91ff 	strb.w	r9, [r4, #511]	@ 0x1ff
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8004bb8:	f7fe f9b9 	bl	8002f2e <disk_write>
 8004bbc:	4680      	mov	r8, r0
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	f040 80b1 	bne.w	8004d26 <f_mkfs+0x6ca>
		if (fsty == FS_FAT32) {
 8004bc4:	2e03      	cmp	r6, #3
 8004bc6:	d137      	bne.n	8004c38 <f_mkfs+0x5dc>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8004bc8:	9a02      	ldr	r2, [sp, #8]
 8004bca:	2301      	movs	r3, #1
 8004bcc:	4621      	mov	r1, r4
 8004bce:	3206      	adds	r2, #6
 8004bd0:	9801      	ldr	r0, [sp, #4]
 8004bd2:	f7fe f9ac 	bl	8002f2e <disk_write>
			memset(buf, 0, ss);
 8004bd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bda:	4641      	mov	r1, r8
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f006 f804 	bl	800abea <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8004be2:	2352      	movs	r3, #82	@ 0x52
 8004be4:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004be6:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8004be8:	2361      	movs	r3, #97	@ 0x61
	*ptr++ = (BYTE)val;
 8004bea:	2241      	movs	r2, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8004bec:	2172      	movs	r1, #114	@ 0x72
	*ptr++ = (BYTE)val; val >>= 8;
 8004bee:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 8004bf0:	f884 31e7 	strb.w	r3, [r4, #487]	@ 0x1e7
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8004bf4:	9b04      	ldr	r3, [sp, #16]
	*ptr++ = (BYTE)val;
 8004bf6:	70e2      	strb	r2, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 8004bf8:	f884 11e4 	strb.w	r1, [r4, #484]	@ 0x1e4
	*ptr++ = (BYTE)val; val >>= 8;
 8004bfc:	f884 11e5 	strb.w	r1, [r4, #485]	@ 0x1e5
	*ptr++ = (BYTE)val; val >>= 8;
 8004c00:	f884 21e6 	strb.w	r2, [r4, #486]	@ 0x1e6
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8004c04:	1e59      	subs	r1, r3, #1
 8004c06:	f504 70f4 	add.w	r0, r4, #488	@ 0x1e8
 8004c0a:	f7fe fae9 	bl	80031e0 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 8004c0e:	2302      	movs	r3, #2
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8004c10:	9a02      	ldr	r2, [sp, #8]
 8004c12:	4621      	mov	r1, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8004c14:	f884 31ec 	strb.w	r3, [r4, #492]	@ 0x1ec
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8004c18:	3207      	adds	r2, #7
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c1e:	f884 a1fe 	strb.w	sl, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 8004c22:	f884 91ff 	strb.w	r9, [r4, #511]	@ 0x1ff
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8004c26:	f7fe f982 	bl	8002f2e <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	9a02      	ldr	r2, [sp, #8]
 8004c2e:	4621      	mov	r1, r4
 8004c30:	9801      	ldr	r0, [sp, #4]
 8004c32:	441a      	add	r2, r3
 8004c34:	f7fe f97b 	bl	8002f2e <disk_write>
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 8004c38:	9b07      	ldr	r3, [sp, #28]
		memset(buf, 0, sz_buf * ss);
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8004c40:	4620      	mov	r0, r4
 8004c42:	f022 0201 	bic.w	r2, r2, #1
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 8004c46:	ea4f 2a53 	mov.w	sl, r3, lsr #9
		memset(buf, 0, sz_buf * ss);
 8004c4a:	f005 ffce 	bl	800abea <memset>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8004c4e:	2e01      	cmp	r6, #1
 8004c50:	4b39      	ldr	r3, [pc, #228]	@ (8004d38 <f_mkfs+0x6dc>)
 8004c52:	bf18      	it	ne
 8004c54:	f06f 0307 	mvnne.w	r3, #7
 8004c58:	9304      	str	r3, [sp, #16]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	9302      	str	r3, [sp, #8]
			if (fsty == FS_FAT32) {
 8004c5e:	2e03      	cmp	r6, #3
 8004c60:	f47f ae70 	bne.w	8004944 <f_mkfs+0x2e8>
	*ptr++ = (BYTE)val; val >>= 8;
 8004c64:	23f8      	movs	r3, #248	@ 0xf8
 8004c66:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c68:	23ff      	movs	r3, #255	@ 0xff
 8004c6a:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c6c:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 8004c6e:	70e3      	strb	r3, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c70:	7123      	strb	r3, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c72:	7163      	strb	r3, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c74:	71a3      	strb	r3, [r4, #6]
	*ptr++ = (BYTE)val;
 8004c76:	71e3      	strb	r3, [r4, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c78:	7223      	strb	r3, [r4, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c7a:	7263      	strb	r3, [r4, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c7c:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 8004c7e:	230f      	movs	r3, #15
 8004c80:	72e3      	strb	r3, [r4, #11]
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8004c82:	f8dd 800c 	ldr.w	r8, [sp, #12]
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8004c86:	45d0      	cmp	r8, sl
 8004c88:	46c1      	mov	r9, r8
 8004c8a:	bf28      	it	cs
 8004c8c:	46d1      	movcs	r9, sl
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8004c8e:	4621      	mov	r1, r4
 8004c90:	464b      	mov	r3, r9
 8004c92:	463a      	mov	r2, r7
 8004c94:	9801      	ldr	r0, [sp, #4]
 8004c96:	f7fe f94a 	bl	8002f2e <disk_write>
 8004c9a:	4601      	mov	r1, r0
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d142      	bne.n	8004d26 <f_mkfs+0x6ca>
				memset(buf, 0, ss);	/* Rest of FAT area is initially zero */
 8004ca0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f005 ffa0 	bl	800abea <memset>
			} while (nsect);
 8004caa:	ebb8 0809 	subs.w	r8, r8, r9
				sect += n; nsect -= n;
 8004cae:	444f      	add	r7, r9
			} while (nsect);
 8004cb0:	d1e9      	bne.n	8004c86 <f_mkfs+0x62a>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8004cb2:	9b02      	ldr	r3, [sp, #8]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	bf0c      	ite	eq
 8004cba:	2301      	moveq	r3, #1
 8004cbc:	2302      	movne	r3, #2
 8004cbe:	459b      	cmp	fp, r3
 8004cc0:	9202      	str	r2, [sp, #8]
 8004cc2:	d8cc      	bhi.n	8004c5e <f_mkfs+0x602>
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8004cc4:	9b05      	ldr	r3, [sp, #20]
 8004cc6:	2e03      	cmp	r6, #3
 8004cc8:	bf18      	it	ne
 8004cca:	461d      	movne	r5, r3
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8004ccc:	4555      	cmp	r5, sl
 8004cce:	46a8      	mov	r8, r5
 8004cd0:	bf28      	it	cs
 8004cd2:	46d0      	movcs	r8, sl
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8004cd4:	463a      	mov	r2, r7
 8004cd6:	4643      	mov	r3, r8
 8004cd8:	4621      	mov	r1, r4
 8004cda:	9801      	ldr	r0, [sp, #4]
 8004cdc:	f7fe f927 	bl	8002f2e <disk_write>
 8004ce0:	bb08      	cbnz	r0, 8004d26 <f_mkfs+0x6ca>
		} while (nsect);
 8004ce2:	ebb5 0508 	subs.w	r5, r5, r8
			sect += n; nsect -= n;
 8004ce6:	4447      	add	r7, r8
		} while (nsect);
 8004ce8:	d1f0      	bne.n	8004ccc <f_mkfs+0x670>
	} else if (fsty == FS_FAT32) {
 8004cea:	2e03      	cmp	r6, #3
 8004cec:	f43f ae2f 	beq.w	800494e <f_mkfs+0x2f2>
	} else if (sz_vol >= 0x10000) {
 8004cf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004cf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf6:	f4bf ae2d 	bcs.w	8004954 <f_mkfs+0x2f8>
		sys = 0x04;		/* FAT16 */
 8004cfa:	2e02      	cmp	r6, #2
 8004cfc:	bf14      	ite	ne
 8004cfe:	f04f 0901 	movne.w	r9, #1
 8004d02:	f04f 0904 	moveq.w	r9, #4
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 8004d06:	9b06      	ldr	r3, [sp, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f47f ae52 	bne.w	80049b2 <f_mkfs+0x356>
			lba[0] = sz_vol; lba[1] = 0;
 8004d0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8004d10:	2101      	movs	r1, #1
			lba[0] = sz_vol; lba[1] = 0;
 8004d12:	9310      	str	r3, [sp, #64]	@ 0x40
 8004d14:	9b06      	ldr	r3, [sp, #24]
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8004d16:	9801      	ldr	r0, [sp, #4]
 8004d18:	aa0f      	add	r2, sp, #60	@ 0x3c
			lba[0] = sz_vol; lba[1] = 0;
 8004d1a:	9311      	str	r3, [sp, #68]	@ 0x44
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8004d1c:	f7fe f91c 	bl	8002f58 <disk_ioctl>
 8004d20:	2800      	cmp	r0, #0
 8004d22:	f43f ae1a 	beq.w	800495a <f_mkfs+0x2fe>
 8004d26:	2001      	movs	r0, #1

	LEAVE_MKFS(FR_OK);
}
 8004d28:	b013      	add	sp, #76	@ 0x4c
 8004d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d2e:	bf00      	nop
 8004d30:	0800db45 	.word	0x0800db45
 8004d34:	0800db51 	.word	0x0800db51
 8004d38:	00fffff8 	.word	0x00fffff8

08004d3c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the buffer to store read string */
	int len,		/* Size of string buffer (items) */
	FIL* fp			/* Pointer to the file object */
)
{
 8004d3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004d40:	4604      	mov	r4, r0
 8004d42:	4690      	mov	r8, r2
	int nc = 0;
	TCHAR *p = buff;
 8004d44:	4606      	mov	r6, r0
	int nc = 0;
 8004d46:	2500      	movs	r5, #0
		}
#endif
	}

#else			/* Byte-by-byte read without any conversion (ANSI/OEM API) */
	len -= 1;	/* Make a room for the terminator */
 8004d48:	1e4f      	subs	r7, r1, #1
	while (nc < len) {
 8004d4a:	42bd      	cmp	r5, r7
 8004d4c:	da0f      	bge.n	8004d6e <f_gets+0x32>
		f_read(fp, s, 1, &rc);	/* Get a byte */
 8004d4e:	ab01      	add	r3, sp, #4
 8004d50:	2201      	movs	r2, #1
 8004d52:	4669      	mov	r1, sp
 8004d54:	4640      	mov	r0, r8
 8004d56:	f7ff f9ef 	bl	8004138 <f_read>
		if (rc != 1) break;		/* EOF? */
 8004d5a:	9b01      	ldr	r3, [sp, #4]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d106      	bne.n	8004d6e <f_gets+0x32>
		dc = s[0];
 8004d60:	f89d 3000 	ldrb.w	r3, [sp]
		if (FF_USE_STRFUNC == 2 && dc == '\r') continue;
		*p++ = (TCHAR)dc; nc++;
 8004d64:	3501      	adds	r5, #1
		if (dc == '\n') break;
 8004d66:	2b0a      	cmp	r3, #10
		*p++ = (TCHAR)dc; nc++;
 8004d68:	f806 3b01 	strb.w	r3, [r6], #1
		if (dc == '\n') break;
 8004d6c:	d1ed      	bne.n	8004d4a <f_gets+0xe>
	}
#endif

	*p = 0;		/* Terminate the string */
 8004d6e:	2300      	movs	r3, #0
	return nc ? buff : 0;	/* When no data read due to EOF or error, return with error. */
 8004d70:	429d      	cmp	r5, r3
}
 8004d72:	bf14      	ite	ne
 8004d74:	4620      	movne	r0, r4
 8004d76:	4618      	moveq	r0, r3
	*p = 0;		/* Terminate the string */
 8004d78:	7033      	strb	r3, [r6, #0]
}
 8004d7a:	b002      	add	sp, #8
 8004d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d80 <GasPrs_CLC>:
uint8_t gaspres_refreshed = 0;
uint16_t gaspres_adc_val = 0;
uint8_t GasPrs_LOW = 0;
uint8_t GasPrs_HIGH = 0;

float GasPrs_CLC(uint16_t adc_val){
 8004d80:	b508      	push	{r3, lr}
	float GasPrs_val = 0.0;
	GasPrs_val = (float)adc_val/4095.0*VREF*102.0/51.0*2.5;
 8004d82:	f7fb ffb1 	bl	8000ce8 <__aeabi_ui2f>
 8004d86:	f7fb fb59 	bl	800043c <__aeabi_f2d>
 8004d8a:	a30d      	add	r3, pc, #52	@ (adr r3, 8004dc0 <GasPrs_CLC+0x40>)
 8004d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d90:	f7fb fcd6 	bl	8000740 <__aeabi_ddiv>
 8004d94:	a30c      	add	r3, pc, #48	@ (adr r3, 8004dc8 <GasPrs_CLC+0x48>)
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	f7fb fba7 	bl	80004ec <__aeabi_dmul>
 8004d9e:	2200      	movs	r2, #0
 8004da0:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd0 <GasPrs_CLC+0x50>)
 8004da2:	f7fb fba3 	bl	80004ec <__aeabi_dmul>
 8004da6:	2200      	movs	r2, #0
 8004da8:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd4 <GasPrs_CLC+0x54>)
 8004daa:	f7fb fcc9 	bl	8000740 <__aeabi_ddiv>
 8004dae:	2200      	movs	r2, #0
 8004db0:	4b09      	ldr	r3, [pc, #36]	@ (8004dd8 <GasPrs_CLC+0x58>)
 8004db2:	f7fb fb9b 	bl	80004ec <__aeabi_dmul>
 8004db6:	f7fb fe91 	bl	8000adc <__aeabi_d2f>
	return GasPrs_val;
}
 8004dba:	bd08      	pop	{r3, pc}
 8004dbc:	f3af 8000 	nop.w
 8004dc0:	00000000 	.word	0x00000000
 8004dc4:	40affe00 	.word	0x40affe00
 8004dc8:	40000000 	.word	0x40000000
 8004dcc:	400a7ae1 	.word	0x400a7ae1
 8004dd0:	40598000 	.word	0x40598000
 8004dd4:	40498000 	.word	0x40498000
 8004dd8:	40040000 	.word	0x40040000

08004ddc <refresh_gasPrs>:

void refresh_gasPrs(){
	GasPressure = GasPrs_CLC(gaspres_adc_val);
 8004ddc:	4b13      	ldr	r3, [pc, #76]	@ (8004e2c <refresh_gasPrs+0x50>)
void refresh_gasPrs(){
 8004dde:	b510      	push	{r4, lr}
	GasPressure = GasPrs_CLC(gaspres_adc_val);
 8004de0:	8818      	ldrh	r0, [r3, #0]
 8004de2:	f7ff ffcd 	bl	8004d80 <GasPrs_CLC>
 8004de6:	4b12      	ldr	r3, [pc, #72]	@ (8004e30 <refresh_gasPrs+0x54>)

	if(GasPressure < 0.08f){
 8004de8:	4912      	ldr	r1, [pc, #72]	@ (8004e34 <refresh_gasPrs+0x58>)
	GasPressure = GasPrs_CLC(gaspres_adc_val);
 8004dea:	6018      	str	r0, [r3, #0]
 8004dec:	4604      	mov	r4, r0
	if(GasPressure < 0.08f){
 8004dee:	f7fc f821 	bl	8000e34 <__aeabi_fcmplt>
 8004df2:	3800      	subs	r0, #0
 8004df4:	bf18      	it	ne
 8004df6:	2001      	movne	r0, #1
 8004df8:	4b0f      	ldr	r3, [pc, #60]	@ (8004e38 <refresh_gasPrs+0x5c>)
		GasPrs_LOW = 1;
	}else{
		GasPrs_LOW = 0;
	}

	if(GasPressure > 8.0f){
 8004dfa:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8004dfe:	7018      	strb	r0, [r3, #0]
 8004e00:	4620      	mov	r0, r4
 8004e02:	f7fc f835 	bl	8000e70 <__aeabi_fcmpgt>
 8004e06:	3800      	subs	r0, #0
 8004e08:	bf18      	it	ne
 8004e0a:	2001      	movne	r0, #1
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e3c <refresh_gasPrs+0x60>)
 8004e0e:	7018      	strb	r0, [r3, #0]
		GasPrs_HIGH = 1;
	}else{
		GasPrs_HIGH = 0;
	}

	sprintf(Tx_Buffer,"Main.t3.txt=\"%.2f\"\xff\xff\xff",GasPressure);
 8004e10:	4620      	mov	r0, r4
 8004e12:	f7fb fb13 	bl	800043c <__aeabi_f2d>
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4809      	ldr	r0, [pc, #36]	@ (8004e40 <refresh_gasPrs+0x64>)
 8004e1c:	4909      	ldr	r1, [pc, #36]	@ (8004e44 <refresh_gasPrs+0x68>)
 8004e1e:	f005 fe71 	bl	800ab04 <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
}
 8004e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8004e26:	4806      	ldr	r0, [pc, #24]	@ (8004e40 <refresh_gasPrs+0x64>)
 8004e28:	f001 bda8 	b.w	800697c <USART1_Tx_HMIdata>
 8004e2c:	2000090a 	.word	0x2000090a
 8004e30:	2000090c 	.word	0x2000090c
 8004e34:	3da3d70a 	.word	0x3da3d70a
 8004e38:	20000909 	.word	0x20000909
 8004e3c:	20000908 	.word	0x20000908
 8004e40:	20000b7e 	.word	0x20000b7e
 8004e44:	0800dc28 	.word	0x0800dc28

08004e48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e4c:	2410      	movs	r4, #16
{
 8004e4e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e50:	4622      	mov	r2, r4
 8004e52:	eb0d 0004 	add.w	r0, sp, r4
 8004e56:	2100      	movs	r1, #0
 8004e58:	f005 fec7 	bl	800abea <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e5c:	4b5f      	ldr	r3, [pc, #380]	@ (8004fdc <MX_GPIO_Init+0x194>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8004e5e:	f8df a180 	ldr.w	sl, [pc, #384]	@ 8004fe0 <MX_GPIO_Init+0x198>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e62:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8004e64:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 8004fe4 <MX_GPIO_Init+0x19c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e68:	4322      	orrs	r2, r4
 8004e6a:	619a      	str	r2, [r3, #24]
 8004e6c:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TF_CS_GPIO_Port, TF_CS_Pin, GPIO_PIN_SET);
 8004e6e:	f8df 8178 	ldr.w	r8, [pc, #376]	@ 8004fe8 <MX_GPIO_Init+0x1a0>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e72:	4022      	ands	r2, r4
 8004e74:	9200      	str	r2, [sp, #0]
 8004e76:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e78:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8004e7a:	4650      	mov	r0, sl
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e7c:	f042 0220 	orr.w	r2, r2, #32
 8004e80:	619a      	str	r2, [r3, #24]
 8004e82:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8004e84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e88:	f002 0220 	and.w	r2, r2, #32
 8004e8c:	9201      	str	r2, [sp, #4]
 8004e8e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e90:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PH1_Pin|BDC_EN2_Pin|LED_Y_Pin|SCL_Pin
 8004e92:	4f56      	ldr	r7, [pc, #344]	@ (8004fec <MX_GPIO_Init+0x1a4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e94:	f042 0204 	orr.w	r2, r2, #4
 8004e98:	619a      	str	r2, [r3, #24]
 8004e9a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e9c:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e9e:	f002 0204 	and.w	r2, r2, #4
 8004ea2:	9202      	str	r2, [sp, #8]
 8004ea4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ea6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ea8:	2602      	movs	r6, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eaa:	f042 0208 	orr.w	r2, r2, #8
 8004eae:	619a      	str	r2, [r3, #24]
 8004eb0:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8004eb2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	9303      	str	r3, [sp, #12]
 8004eba:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8004ebc:	f002 fc66 	bl	800778c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8004ec0:	4648      	mov	r0, r9
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2102      	movs	r1, #2
 8004ec6:	f002 fc61 	bl	800778c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TF_CS_GPIO_Port, TF_CS_Pin, GPIO_PIN_SET);
 8004eca:	4621      	mov	r1, r4
 8004ecc:	4640      	mov	r0, r8
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f002 fc5c 	bl	800778c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, PH1_Pin|BDC_EN2_Pin|LED_Y_Pin|SCL_Pin
 8004ed4:	4638      	mov	r0, r7
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f24c 21d0 	movw	r1, #49872	@ 0xc2d0
 8004edc:	f002 fc56 	bl	800778c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BDC_EN1_GPIO_Port, BDC_EN1_Pin, GPIO_PIN_RESET);
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	4640      	mov	r0, r8
 8004ee4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004ee8:	f002 fc50 	bl	800778c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004eec:	2400      	movs	r4, #0
 8004eee:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ef2:	4650      	mov	r0, sl
 8004ef4:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ef6:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efa:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004efc:	f002 fb68 	bl	80075d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8004f04:	4650      	mov	r0, sl
 8004f06:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f08:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f0c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f0e:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8004f10:	f002 fb5e 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TF_CD_Pin */
  GPIO_InitStruct.Pin = TF_CD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(TF_CD_GPIO_Port, &GPIO_InitStruct);
 8004f14:	4648      	mov	r0, r9
 8004f16:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f18:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f1c:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(TF_CD_GPIO_Port, &GPIO_InitStruct);
 8004f1e:	f002 fb57 	bl	80075d0 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED_G_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8004f22:	4648      	mov	r0, r9
 8004f24:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f26:	e9cd 6504 	strd	r6, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f2a:	e9cd 5606 	strd	r5, r6, [sp, #24]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8004f2e:	f002 fb4f 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TF_CS_Pin BDC_EN1_Pin */
  GPIO_InitStruct.Pin = TF_CS_Pin|BDC_EN1_Pin;
 8004f32:	f44f 7388 	mov.w	r3, #272	@ 0x110
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f36:	4640      	mov	r0, r8
 8004f38:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f3a:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f3e:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f42:	f002 fb45 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_LED_Pin BDC1_STP_Pin NRESET_Pin INCREASE_Pin
                           EX_GAS_Pin */
  GPIO_InitStruct.Pin = BLE_LED_Pin|BDC1_STP_Pin|NRESET_Pin|INCREASE_Pin
 8004f46:	f243 130c 	movw	r3, #12556	@ 0x310c
                          |EX_GAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f4a:	4638      	mov	r0, r7
 8004f4c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f4e:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f52:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f54:	f002 fb3c 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH1_Pin BDC_EN2_Pin LED_Y_Pin SCL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = PH1_Pin|BDC_EN2_Pin|LED_Y_Pin|SCL_Pin
 8004f58:	f24c 2350 	movw	r3, #49744	@ 0xc250
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f5c:	4638      	mov	r0, r7
 8004f5e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f60:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f64:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f68:	f002 fb32 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_EXTI11_Pin */
  GPIO_InitStruct.Pin = KEY_EXTI11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004f6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f70:	4b1f      	ldr	r3, [pc, #124]	@ (8004ff0 <MX_GPIO_Init+0x1a8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(KEY_EXTI11_GPIO_Port, &GPIO_InitStruct);
 8004f72:	4640      	mov	r0, r8
 8004f74:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004f76:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(KEY_EXTI11_GPIO_Port, &GPIO_InitStruct);
 8004f7c:	f002 fb28 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Q_SET_Pin START_Pin */
  GPIO_InitStruct.Pin = Q_SET_Pin|START_Pin;
 8004f80:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f84:	4640      	mov	r0, r8
 8004f86:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f88:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f8c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f8e:	f002 fb1f 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONFIRM_Pin */
  GPIO_InitStruct.Pin = CONFIRM_Pin;
 8004f92:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(CONFIRM_GPIO_Port, &GPIO_InitStruct);
 8004f94:	4638      	mov	r0, r7
 8004f96:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f98:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f9c:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(CONFIRM_GPIO_Port, &GPIO_InitStruct);
 8004f9e:	f002 fb17 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDA_Pin */
  GPIO_InitStruct.Pin = SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004fa2:	2311      	movs	r3, #17
 8004fa4:	2180      	movs	r1, #128	@ 0x80
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8004fa6:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004fa8:	e9cd 1304 	strd	r1, r3, [sp, #16]
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8004fac:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fae:	e9cd 5606 	strd	r5, r6, [sp, #24]
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8004fb2:	f002 fb0d 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8004fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8004ff4 <MX_GPIO_Init+0x1ac>)

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 8004fb8:	210a      	movs	r1, #10
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8004fba:	6853      	ldr	r3, [r2, #4]
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 8004fbc:	2028      	movs	r0, #40	@ 0x28
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8004fbe:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8004fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fc6:	6053      	str	r3, [r2, #4]
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 8004fc8:	4622      	mov	r2, r4
 8004fca:	f002 f947 	bl	800725c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004fce:	2028      	movs	r0, #40	@ 0x28
 8004fd0:	f002 f974 	bl	80072bc <HAL_NVIC_EnableIRQ>

}
 8004fd4:	b008      	add	sp, #32
 8004fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fda:	bf00      	nop
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	40011000 	.word	0x40011000
 8004fe4:	40011400 	.word	0x40011400
 8004fe8:	40010800 	.word	0x40010800
 8004fec:	40010c00 	.word	0x40010c00
 8004ff0:	10310000 	.word	0x10310000
 8004ff4:	40010000 	.word	0x40010000

08004ff8 <SDA_IN>:

/* USER CODE BEGIN 2 */
void SDA_IN(void) {
 8004ff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pin = SDA_Pin;
 8005000:	2380      	movs	r3, #128	@ 0x80
 8005002:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005004:	2301      	movs	r3, #1
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8005006:	4669      	mov	r1, sp
 8005008:	4803      	ldr	r0, [pc, #12]	@ (8005018 <SDA_IN+0x20>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800500a:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 800500c:	f002 fae0 	bl	80075d0 <HAL_GPIO_Init>
}
 8005010:	b005      	add	sp, #20
 8005012:	f85d fb04 	ldr.w	pc, [sp], #4
 8005016:	bf00      	nop
 8005018:	40010c00 	.word	0x40010c00

0800501c <SDA_OUT>:

void SDA_OUT(void) {
 800501c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  GPIO_InitStruct.Pin = SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800501e:	2280      	movs	r2, #128	@ 0x80
 8005020:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005022:	2101      	movs	r1, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005024:	e9cd 2300 	strd	r2, r3, [sp]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005028:	2302      	movs	r3, #2
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 800502a:	4804      	ldr	r0, [pc, #16]	@ (800503c <SDA_OUT+0x20>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800502c:	e9cd 1302 	strd	r1, r3, [sp, #8]
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8005030:	4669      	mov	r1, sp
 8005032:	f002 facd 	bl	80075d0 <HAL_GPIO_Init>
}
 8005036:	b005      	add	sp, #20
 8005038:	f85d fb04 	ldr.w	pc, [sp], #4
 800503c:	40010c00 	.word	0x40010c00

08005040 <I2C_Start>:
/**
 * @brief  I2C start signal
 * @param  None
 * @retval None
 */
void I2C_Start(void) {
 8005040:	b510      	push	{r4, lr}
  SDA_OUT();
  SDA_H();
 8005042:	4c0c      	ldr	r4, [pc, #48]	@ (8005074 <I2C_Start+0x34>)
  SDA_OUT();
 8005044:	f7ff ffea 	bl	800501c <SDA_OUT>
  SDA_H();
 8005048:	4620      	mov	r0, r4
 800504a:	2201      	movs	r2, #1
 800504c:	2180      	movs	r1, #128	@ 0x80
 800504e:	f002 fb9d 	bl	800778c <HAL_GPIO_WritePin>
  SCL_H();
 8005052:	4620      	mov	r0, r4
 8005054:	2201      	movs	r2, #1
 8005056:	2140      	movs	r1, #64	@ 0x40
 8005058:	f002 fb98 	bl	800778c <HAL_GPIO_WritePin>
  I2C_Delay();
  SDA_L();
 800505c:	4620      	mov	r0, r4
 800505e:	2200      	movs	r2, #0
 8005060:	2180      	movs	r1, #128	@ 0x80
 8005062:	f002 fb93 	bl	800778c <HAL_GPIO_WritePin>
  I2C_Delay();
  SCL_L();
 8005066:	4620      	mov	r0, r4
  I2C_Delay();
}
 8005068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SCL_L();
 800506c:	2200      	movs	r2, #0
 800506e:	2140      	movs	r1, #64	@ 0x40
 8005070:	f002 bb8c 	b.w	800778c <HAL_GPIO_WritePin>
 8005074:	40010c00 	.word	0x40010c00

08005078 <I2C_Stop>:
/**
 * @brief  I2C stop signal
 * @param  None
 * @retval None
 */
void I2C_Stop(void) {
 8005078:	b510      	push	{r4, lr}
  SDA_OUT();
  SCL_L();
 800507a:	4c0c      	ldr	r4, [pc, #48]	@ (80050ac <I2C_Stop+0x34>)
  SDA_OUT();
 800507c:	f7ff ffce 	bl	800501c <SDA_OUT>
  SCL_L();
 8005080:	4620      	mov	r0, r4
 8005082:	2200      	movs	r2, #0
 8005084:	2140      	movs	r1, #64	@ 0x40
 8005086:	f002 fb81 	bl	800778c <HAL_GPIO_WritePin>
  SDA_L();
 800508a:	4620      	mov	r0, r4
 800508c:	2200      	movs	r2, #0
 800508e:	2180      	movs	r1, #128	@ 0x80
 8005090:	f002 fb7c 	bl	800778c <HAL_GPIO_WritePin>
  I2C_Delay();
  SCL_H();
 8005094:	4620      	mov	r0, r4
 8005096:	2201      	movs	r2, #1
 8005098:	2140      	movs	r1, #64	@ 0x40
 800509a:	f002 fb77 	bl	800778c <HAL_GPIO_WritePin>
  SDA_H();
 800509e:	4620      	mov	r0, r4
  I2C_Delay();
}
 80050a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SDA_H();
 80050a4:	2201      	movs	r2, #1
 80050a6:	2180      	movs	r1, #128	@ 0x80
 80050a8:	f002 bb70 	b.w	800778c <HAL_GPIO_WritePin>
 80050ac:	40010c00 	.word	0x40010c00

080050b0 <I2C_Ack>:
/**
 * @brief  I2C send ACK signal
 * @param  None
 * @retval None
 */
void I2C_Ack(void) {
 80050b0:	b510      	push	{r4, lr}
  SCL_L();
 80050b2:	4c0c      	ldr	r4, [pc, #48]	@ (80050e4 <I2C_Ack+0x34>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	4620      	mov	r0, r4
 80050b8:	2140      	movs	r1, #64	@ 0x40
 80050ba:	f002 fb67 	bl	800778c <HAL_GPIO_WritePin>
  SDA_OUT();
 80050be:	f7ff ffad 	bl	800501c <SDA_OUT>
  SDA_L();
 80050c2:	4620      	mov	r0, r4
 80050c4:	2200      	movs	r2, #0
 80050c6:	2180      	movs	r1, #128	@ 0x80
 80050c8:	f002 fb60 	bl	800778c <HAL_GPIO_WritePin>
  I2C_Delay();
  SCL_H();
 80050cc:	4620      	mov	r0, r4
 80050ce:	2201      	movs	r2, #1
 80050d0:	2140      	movs	r1, #64	@ 0x40
 80050d2:	f002 fb5b 	bl	800778c <HAL_GPIO_WritePin>
  I2C_Delay();
  SCL_L();
 80050d6:	4620      	mov	r0, r4
  I2C_Delay();
}
 80050d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SCL_L();
 80050dc:	2200      	movs	r2, #0
 80050de:	2140      	movs	r1, #64	@ 0x40
 80050e0:	f002 bb54 	b.w	800778c <HAL_GPIO_WritePin>
 80050e4:	40010c00 	.word	0x40010c00

080050e8 <I2C_NAck>:
/**
 * @brief  I2C send NACK signal
 * @param  None
 * @retval None
 */
void I2C_NAck(void) {
 80050e8:	b510      	push	{r4, lr}
  SCL_L();
 80050ea:	4c0c      	ldr	r4, [pc, #48]	@ (800511c <I2C_NAck+0x34>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	4620      	mov	r0, r4
 80050f0:	2140      	movs	r1, #64	@ 0x40
 80050f2:	f002 fb4b 	bl	800778c <HAL_GPIO_WritePin>
  SDA_OUT();
 80050f6:	f7ff ff91 	bl	800501c <SDA_OUT>
  SDA_H();
 80050fa:	4620      	mov	r0, r4
 80050fc:	2201      	movs	r2, #1
 80050fe:	2180      	movs	r1, #128	@ 0x80
 8005100:	f002 fb44 	bl	800778c <HAL_GPIO_WritePin>
  I2C_Delay();
  SCL_H();
 8005104:	4620      	mov	r0, r4
 8005106:	2201      	movs	r2, #1
 8005108:	2140      	movs	r1, #64	@ 0x40
 800510a:	f002 fb3f 	bl	800778c <HAL_GPIO_WritePin>
  I2C_Delay();
  SCL_L();
 800510e:	4620      	mov	r0, r4
  I2C_Delay();
}
 8005110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SCL_L();
 8005114:	2200      	movs	r2, #0
 8005116:	2140      	movs	r1, #64	@ 0x40
 8005118:	f002 bb38 	b.w	800778c <HAL_GPIO_WritePin>
 800511c:	40010c00 	.word	0x40010c00

08005120 <I2C_WaitAck>:
/**
 * @brief  I2C wait ACK signal
 * @param  None
 * @retval 1: ACK 0: NACK
 */
uint8_t I2C_WaitAck(void) {
 8005120:	b538      	push	{r3, r4, r5, lr}
  uint8_t ucErrTime = 0;
  SDA_IN();
 8005122:	f7ff ff69 	bl	8004ff8 <SDA_IN>
  SDA_H();
 8005126:	2201      	movs	r2, #1
 8005128:	2180      	movs	r1, #128	@ 0x80
 800512a:	480f      	ldr	r0, [pc, #60]	@ (8005168 <I2C_WaitAck+0x48>)
 800512c:	f002 fb2e 	bl	800778c <HAL_GPIO_WritePin>
  I2C_Delay();
  SCL_H();
 8005130:	2201      	movs	r2, #1
 8005132:	2140      	movs	r1, #64	@ 0x40
 8005134:	480c      	ldr	r0, [pc, #48]	@ (8005168 <I2C_WaitAck+0x48>)
 8005136:	f002 fb29 	bl	800778c <HAL_GPIO_WritePin>
 800513a:	25fb      	movs	r5, #251	@ 0xfb
  I2C_Delay();
  while (SDA_READ()) {
 800513c:	2180      	movs	r1, #128	@ 0x80
 800513e:	480a      	ldr	r0, [pc, #40]	@ (8005168 <I2C_WaitAck+0x48>)
 8005140:	f002 fb1e 	bl	8007780 <HAL_GPIO_ReadPin>
 8005144:	4604      	mov	r4, r0
 8005146:	b928      	cbnz	r0, 8005154 <I2C_WaitAck+0x34>
    if (ucErrTime > 250) {
      I2C_Stop();
      return 1;
    }
  }
  SCL_L();
 8005148:	4602      	mov	r2, r0
 800514a:	2140      	movs	r1, #64	@ 0x40
 800514c:	4806      	ldr	r0, [pc, #24]	@ (8005168 <I2C_WaitAck+0x48>)
 800514e:	f002 fb1d 	bl	800778c <HAL_GPIO_WritePin>
  I2C_Delay();
  return 0;
 8005152:	e006      	b.n	8005162 <I2C_WaitAck+0x42>
    if (ucErrTime > 250) {
 8005154:	3d01      	subs	r5, #1
 8005156:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 800515a:	d1ef      	bne.n	800513c <I2C_WaitAck+0x1c>
      I2C_Stop();
 800515c:	f7ff ff8c 	bl	8005078 <I2C_Stop>
      return 1;
 8005160:	2401      	movs	r4, #1
}
 8005162:	4620      	mov	r0, r4
 8005164:	bd38      	pop	{r3, r4, r5, pc}
 8005166:	bf00      	nop
 8005168:	40010c00 	.word	0x40010c00

0800516c <I2C_SendByte>:
/**
 * @brief  I2C send byte
 * @param  sendbyte: byte to send
 * @retval None
 */
void I2C_SendByte(uint8_t SendByte) {
 800516c:	b570      	push	{r4, r5, r6, lr}
 800516e:	4604      	mov	r4, r0
  uint8_t i = 0;
  SDA_OUT();
 8005170:	f7ff ff54 	bl	800501c <SDA_OUT>
  SCL_L();
 8005174:	2200      	movs	r2, #0
 8005176:	2140      	movs	r1, #64	@ 0x40
 8005178:	480e      	ldr	r0, [pc, #56]	@ (80051b4 <I2C_SendByte+0x48>)
 800517a:	f002 fb07 	bl	800778c <HAL_GPIO_WritePin>
 800517e:	2508      	movs	r5, #8
  for (i = 0; i < 8; i++) {
    if (SendByte & 0x80)
      SDA_H();
    else
      SDA_L();
 8005180:	4e0c      	ldr	r6, [pc, #48]	@ (80051b4 <I2C_SendByte+0x48>)
    if (SendByte & 0x80)
 8005182:	0623      	lsls	r3, r4, #24
      SDA_H();
 8005184:	bf4c      	ite	mi
 8005186:	2201      	movmi	r2, #1
      SDA_L();
 8005188:	2200      	movpl	r2, #0
 800518a:	2180      	movs	r1, #128	@ 0x80
 800518c:	4630      	mov	r0, r6
 800518e:	f002 fafd 	bl	800778c <HAL_GPIO_WritePin>
    SendByte <<= 1;
    I2C_Delay();
    SCL_H();
 8005192:	2201      	movs	r2, #1
 8005194:	2140      	movs	r1, #64	@ 0x40
 8005196:	4630      	mov	r0, r6
 8005198:	f002 faf8 	bl	800778c <HAL_GPIO_WritePin>
  for (i = 0; i < 8; i++) {
 800519c:	3d01      	subs	r5, #1
    I2C_Delay();
    SCL_L();
 800519e:	2200      	movs	r2, #0
 80051a0:	2140      	movs	r1, #64	@ 0x40
 80051a2:	4630      	mov	r0, r6
 80051a4:	f002 faf2 	bl	800778c <HAL_GPIO_WritePin>
    SendByte <<= 1;
 80051a8:	0064      	lsls	r4, r4, #1
  for (i = 0; i < 8; i++) {
 80051aa:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
    SendByte <<= 1;
 80051ae:	b2e4      	uxtb	r4, r4
  for (i = 0; i < 8; i++) {
 80051b0:	d1e7      	bne.n	8005182 <I2C_SendByte+0x16>
    I2C_Delay();
  }
}
 80051b2:	bd70      	pop	{r4, r5, r6, pc}
 80051b4:	40010c00 	.word	0x40010c00

080051b8 <I2C_ReadByte>:
/**
 * @brief  I2C read byte
 * @param  None
 * @retval read byte
 */
uint8_t I2C_ReadByte(void) {
 80051b8:	b570      	push	{r4, r5, r6, lr}
  uint8_t i = 0, ReceiveByte = 0;
  SDA_IN();
 80051ba:	f7ff ff1d 	bl	8004ff8 <SDA_IN>
 80051be:	2508      	movs	r5, #8
  uint8_t i = 0, ReceiveByte = 0;
 80051c0:	2400      	movs	r4, #0
  for (i = 0; i < 8; i++) {
    SCL_L();
 80051c2:	4e0f      	ldr	r6, [pc, #60]	@ (8005200 <I2C_ReadByte+0x48>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	2140      	movs	r1, #64	@ 0x40
 80051c8:	4630      	mov	r0, r6
 80051ca:	f002 fadf 	bl	800778c <HAL_GPIO_WritePin>
    I2C_Delay();
    SCL_H();
 80051ce:	2140      	movs	r1, #64	@ 0x40
 80051d0:	4630      	mov	r0, r6
 80051d2:	2201      	movs	r2, #1
 80051d4:	f002 fada 	bl	800778c <HAL_GPIO_WritePin>
    ReceiveByte <<= 1;
 80051d8:	0064      	lsls	r4, r4, #1
    if (SDA_READ())
 80051da:	2180      	movs	r1, #128	@ 0x80
 80051dc:	4630      	mov	r0, r6
    ReceiveByte <<= 1;
 80051de:	b2e4      	uxtb	r4, r4
    if (SDA_READ())
 80051e0:	f002 face 	bl	8007780 <HAL_GPIO_ReadPin>
 80051e4:	b108      	cbz	r0, 80051ea <I2C_ReadByte+0x32>
      ReceiveByte++;
 80051e6:	3401      	adds	r4, #1
 80051e8:	b2e4      	uxtb	r4, r4
  for (i = 0; i < 8; i++) {
 80051ea:	3d01      	subs	r5, #1
 80051ec:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 80051f0:	d1e8      	bne.n	80051c4 <I2C_ReadByte+0xc>
    I2C_Delay();
  }
  SCL_L();
 80051f2:	462a      	mov	r2, r5
 80051f4:	2140      	movs	r1, #64	@ 0x40
 80051f6:	4802      	ldr	r0, [pc, #8]	@ (8005200 <I2C_ReadByte+0x48>)
 80051f8:	f002 fac8 	bl	800778c <HAL_GPIO_WritePin>
  return ReceiveByte;
}
 80051fc:	4620      	mov	r0, r4
 80051fe:	bd70      	pop	{r4, r5, r6, pc}
 8005200:	40010c00 	.word	0x40010c00

08005204 <I2C_WriteData>:
 * @param  SlaveAddress: slave address
 * @param  Data: data buffer
 * @param  len: data length
 * @retval 0: success 1: fail
 */
uint8_t I2C_WriteData(uint8_t SlaveAddress, uint8_t *Data, uint8_t len) {
 8005204:	b570      	push	{r4, r5, r6, lr}
 8005206:	4605      	mov	r5, r0
 8005208:	460c      	mov	r4, r1
 800520a:	4616      	mov	r6, r2
  uint8_t i = 0;
  I2C_Start();
 800520c:	f7ff ff18 	bl	8005040 <I2C_Start>
  I2C_SendByte(SlaveAddress);
 8005210:	4628      	mov	r0, r5
 8005212:	f7ff ffab 	bl	800516c <I2C_SendByte>
  if (I2C_WaitAck()) {
 8005216:	f7ff ff83 	bl	8005120 <I2C_WaitAck>
 800521a:	4605      	mov	r5, r0
 800521c:	b968      	cbnz	r0, 800523a <I2C_WriteData+0x36>
 800521e:	4426      	add	r6, r4
    I2C_Stop();
    return 1;
  }
  for (i = 0; i < len; i++) {
 8005220:	42b4      	cmp	r4, r6
 8005222:	d102      	bne.n	800522a <I2C_WriteData+0x26>
    if (I2C_WaitAck()) {
      I2C_Stop();
      return 1;
    }
  }
  I2C_Stop();
 8005224:	f7ff ff28 	bl	8005078 <I2C_Stop>
  return 0;
 8005228:	e00a      	b.n	8005240 <I2C_WriteData+0x3c>
    I2C_SendByte(Data[i]);
 800522a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800522e:	f7ff ff9d 	bl	800516c <I2C_SendByte>
    if (I2C_WaitAck()) {
 8005232:	f7ff ff75 	bl	8005120 <I2C_WaitAck>
 8005236:	2800      	cmp	r0, #0
 8005238:	d0f2      	beq.n	8005220 <I2C_WriteData+0x1c>
    I2C_Stop();
 800523a:	f7ff ff1d 	bl	8005078 <I2C_Stop>
    return 1;
 800523e:	2501      	movs	r5, #1
}
 8005240:	4628      	mov	r0, r5
 8005242:	bd70      	pop	{r4, r5, r6, pc}

08005244 <I2C_ReadData>:
 * @param  SlaveAddress: slave address
 * @param  Data: data buffer
 * @param  len: data length
 * @retval 0: success 1: fail
 */
uint8_t I2C_ReadData(uint8_t SlaveAddress, uint8_t *Data, uint8_t len) {
 8005244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005248:	4604      	mov	r4, r0
 800524a:	460f      	mov	r7, r1
 800524c:	4616      	mov	r6, r2
  uint8_t i = 0;
  I2C_Start();
 800524e:	f7ff fef7 	bl	8005040 <I2C_Start>
  I2C_SendByte(SlaveAddress + 1);
 8005252:	1c60      	adds	r0, r4, #1
 8005254:	b2c0      	uxtb	r0, r0
 8005256:	f7ff ff89 	bl	800516c <I2C_SendByte>
  if (I2C_WaitAck()) {
 800525a:	f7ff ff61 	bl	8005120 <I2C_WaitAck>
 800525e:	4604      	mov	r4, r0
 8005260:	b938      	cbnz	r0, 8005272 <I2C_ReadData+0x2e>
 8005262:	4605      	mov	r5, r0
    I2C_Stop();
    return 1;
  }
  for (i = 0; i < len; i++) {
    Data[i] = I2C_ReadByte();
    if (i == (len - 1))
 8005264:	f106 38ff 	add.w	r8, r6, #4294967295
  for (i = 0; i < len; i++) {
 8005268:	42b5      	cmp	r5, r6
 800526a:	d108      	bne.n	800527e <I2C_ReadData+0x3a>
      I2C_NAck();
    else
      I2C_Ack();
  }
  I2C_Stop();
 800526c:	f7ff ff04 	bl	8005078 <I2C_Stop>
  return 0;
 8005270:	e002      	b.n	8005278 <I2C_ReadData+0x34>
    I2C_Stop();
 8005272:	f7ff ff01 	bl	8005078 <I2C_Stop>
    return 1;
 8005276:	2401      	movs	r4, #1
}
 8005278:	4620      	mov	r0, r4
 800527a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Data[i] = I2C_ReadByte();
 800527e:	f7ff ff9b 	bl	80051b8 <I2C_ReadByte>
    if (i == (len - 1))
 8005282:	45a8      	cmp	r8, r5
    Data[i] = I2C_ReadByte();
 8005284:	5578      	strb	r0, [r7, r5]
    if (i == (len - 1))
 8005286:	d103      	bne.n	8005290 <I2C_ReadData+0x4c>
      I2C_NAck();
 8005288:	f7ff ff2e 	bl	80050e8 <I2C_NAck>
  for (i = 0; i < len; i++) {
 800528c:	3501      	adds	r5, #1
 800528e:	e7eb      	b.n	8005268 <I2C_ReadData+0x24>
      I2C_Ack();
 8005290:	f7ff ff0e 	bl	80050b0 <I2C_Ack>
 8005294:	e7fa      	b.n	800528c <I2C_ReadData+0x48>
	...

08005298 <key_scan>:
volatile uint16_t key_press_time = 0;

volatile enum KEY_VAL key_code;

//在按键中断中调用
uint8_t key_scan(){
 8005298:	b508      	push	{r3, lr}

	if(KEY_EXTI11 == GPIO_PIN_RESET){
 800529a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800529e:	4829      	ldr	r0, [pc, #164]	@ (8005344 <key_scan+0xac>)
 80052a0:	f002 fa6e 	bl	8007780 <HAL_GPIO_ReadPin>
 80052a4:	b108      	cbz	r0, 80052aa <key_scan+0x12>
			else if(!START_KEY) 		return START_KEY_PRESS;
			else if(!NRESET_KEY) 		return NRESET_KEY_PRESS;
			else if(!PAUSE_KEY) 		return PAUSE_KEY_PRESS;
		}
	}
	return 0;
 80052a6:	2000      	movs	r0, #0
}
 80052a8:	bd08      	pop	{r3, pc}
		HAL_Delay(20);
 80052aa:	2014      	movs	r0, #20
 80052ac:	f001 fca6 	bl	8006bfc <HAL_Delay>
		if(KEY_EXTI11 == GPIO_PIN_RESET){
 80052b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80052b4:	4823      	ldr	r0, [pc, #140]	@ (8005344 <key_scan+0xac>)
 80052b6:	f002 fa63 	bl	8007780 <HAL_GPIO_ReadPin>
 80052ba:	2800      	cmp	r0, #0
 80052bc:	d1f3      	bne.n	80052a6 <key_scan+0xe>
			if(!DECREASE_KEY) 			return DECREASE_KEY_PRESS;
 80052be:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 80052c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80052c6:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 80052ca:	f002 fa59 	bl	8007780 <HAL_GPIO_ReadPin>
 80052ce:	b358      	cbz	r0, 8005328 <key_scan+0x90>
			else if(!CONFIRM_KEY) 	return CONFIRM_KEY_PRESS;
 80052d0:	2120      	movs	r1, #32
 80052d2:	481d      	ldr	r0, [pc, #116]	@ (8005348 <key_scan+0xb0>)
 80052d4:	f002 fa54 	bl	8007780 <HAL_GPIO_ReadPin>
 80052d8:	b340      	cbz	r0, 800532c <key_scan+0x94>
			else if(!INCREASE_KEY) 	return INCREASE_KEY_PRESS;
 80052da:	2108      	movs	r1, #8
 80052dc:	481a      	ldr	r0, [pc, #104]	@ (8005348 <key_scan+0xb0>)
 80052de:	f002 fa4f 	bl	8007780 <HAL_GPIO_ReadPin>
 80052e2:	b328      	cbz	r0, 8005330 <key_scan+0x98>
			else if(!Q_SET_KEY) 		return Q_SET_KEY_PRESS;
 80052e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80052e8:	4816      	ldr	r0, [pc, #88]	@ (8005344 <key_scan+0xac>)
 80052ea:	f002 fa49 	bl	8007780 <HAL_GPIO_ReadPin>
 80052ee:	b308      	cbz	r0, 8005334 <key_scan+0x9c>
			else if(!EX_GAS_KEY) 		return EX_GAS_KEY_PRESS;
 80052f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80052f4:	4814      	ldr	r0, [pc, #80]	@ (8005348 <key_scan+0xb0>)
 80052f6:	f002 fa43 	bl	8007780 <HAL_GPIO_ReadPin>
 80052fa:	b1e8      	cbz	r0, 8005338 <key_scan+0xa0>
			else if(!START_KEY) 		return START_KEY_PRESS;
 80052fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005300:	4810      	ldr	r0, [pc, #64]	@ (8005344 <key_scan+0xac>)
 8005302:	f002 fa3d 	bl	8007780 <HAL_GPIO_ReadPin>
 8005306:	b1c8      	cbz	r0, 800533c <key_scan+0xa4>
			else if(!NRESET_KEY) 		return NRESET_KEY_PRESS;
 8005308:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800530c:	480e      	ldr	r0, [pc, #56]	@ (8005348 <key_scan+0xb0>)
 800530e:	f002 fa37 	bl	8007780 <HAL_GPIO_ReadPin>
 8005312:	b1a8      	cbz	r0, 8005340 <key_scan+0xa8>
			else if(!PAUSE_KEY) 		return PAUSE_KEY_PRESS;
 8005314:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005318:	480c      	ldr	r0, [pc, #48]	@ (800534c <key_scan+0xb4>)
 800531a:	f002 fa31 	bl	8007780 <HAL_GPIO_ReadPin>
 800531e:	fab0 f080 	clz	r0, r0
 8005322:	0940      	lsrs	r0, r0, #5
 8005324:	00c0      	lsls	r0, r0, #3
 8005326:	e7bf      	b.n	80052a8 <key_scan+0x10>
			if(!DECREASE_KEY) 			return DECREASE_KEY_PRESS;
 8005328:	2001      	movs	r0, #1
 800532a:	e7bd      	b.n	80052a8 <key_scan+0x10>
			else if(!CONFIRM_KEY) 	return CONFIRM_KEY_PRESS;
 800532c:	2002      	movs	r0, #2
 800532e:	e7bb      	b.n	80052a8 <key_scan+0x10>
			else if(!INCREASE_KEY) 	return INCREASE_KEY_PRESS;
 8005330:	2003      	movs	r0, #3
 8005332:	e7b9      	b.n	80052a8 <key_scan+0x10>
			else if(!Q_SET_KEY) 		return Q_SET_KEY_PRESS;
 8005334:	2004      	movs	r0, #4
 8005336:	e7b7      	b.n	80052a8 <key_scan+0x10>
			else if(!EX_GAS_KEY) 		return EX_GAS_KEY_PRESS;
 8005338:	2005      	movs	r0, #5
 800533a:	e7b5      	b.n	80052a8 <key_scan+0x10>
			else if(!START_KEY) 		return START_KEY_PRESS;
 800533c:	2006      	movs	r0, #6
 800533e:	e7b3      	b.n	80052a8 <key_scan+0x10>
			else if(!NRESET_KEY) 		return NRESET_KEY_PRESS;
 8005340:	2007      	movs	r0, #7
 8005342:	e7b1      	b.n	80052a8 <key_scan+0x10>
 8005344:	40010800 	.word	0x40010800
 8005348:	40010c00 	.word	0x40010c00
 800534c:	40011000 	.word	0x40011000

08005350 <deal_key>:

void deal_key(){
		if(key_value && key_press_sigle){
 8005350:	4b79      	ldr	r3, [pc, #484]	@ (8005538 <deal_key+0x1e8>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d045      	beq.n	80053e4 <deal_key+0x94>
 8005358:	4a78      	ldr	r2, [pc, #480]	@ (800553c <deal_key+0x1ec>)
 800535a:	7811      	ldrb	r1, [r2, #0]
 800535c:	2900      	cmp	r1, #0
 800535e:	d041      	beq.n	80053e4 <deal_key+0x94>
		key_press_sigle = 0;//清除单次按标记，防止重复执行
 8005360:	2100      	movs	r1, #0

		switch(key_value){//检测按键值
 8005362:	3b01      	subs	r3, #1
		key_press_sigle = 0;//清除单次按标记，防止重复执行
 8005364:	7011      	strb	r1, [r2, #0]
		switch(key_value){//检测按键值
 8005366:	2b07      	cmp	r3, #7
 8005368:	d83c      	bhi.n	80053e4 <deal_key+0x94>
 800536a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800536e:	0008      	.short	0x0008
 8005370:	0062002e 	.word	0x0062002e
 8005374:	008e0084 	.word	0x008e0084
 8005378:	00c30094 	.word	0x00c30094
 800537c:	00cd      	.short	0x00cd
			case DECREASE_KEY_PRESS://减小
			{
			if(page_location == Main_page){
 800537e:	4b70      	ldr	r3, [pc, #448]	@ (8005540 <deal_key+0x1f0>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	b993      	cbnz	r3, 80053aa <deal_key+0x5a>
				if(!waiting_start && !Injecting){//不处于已按确认等待按开始键状态
 8005384:	4b6f      	ldr	r3, [pc, #444]	@ (8005544 <deal_key+0x1f4>)
 8005386:	4a70      	ldr	r2, [pc, #448]	@ (8005548 <deal_key+0x1f8>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	7812      	ldrb	r2, [r2, #0]
 800538c:	431a      	orrs	r2, r3
 800538e:	d129      	bne.n	80053e4 <deal_key+0x94>
					if(Dosage_set > 1000)
 8005390:	496e      	ldr	r1, [pc, #440]	@ (800554c <deal_key+0x1fc>)
 8005392:	880b      	ldrh	r3, [r1, #0]
 8005394:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005398:	d902      	bls.n	80053a0 <deal_key+0x50>
						Dosage_set = 0;
 800539a:	800a      	strh	r2, [r1, #0]
				if(!waiting_start && !Injecting){
					if(Dosage_set < 1000)
						Dosage_set+=2;
					else if(Dosage_set >= 1000)
						Dosage_set = 1000;
					key_value_Refresh = 1;
 800539c:	4b6c      	ldr	r3, [pc, #432]	@ (8005550 <deal_key+0x200>)
 800539e:	e00f      	b.n	80053c0 <deal_key+0x70>
					else if(Dosage_set > 0)
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0fb      	beq.n	800539c <deal_key+0x4c>
						Dosage_set -= 2;
 80053a4:	3b02      	subs	r3, #2
 80053a6:	800b      	strh	r3, [r1, #0]
					key_value_Refresh = 1;
 80053a8:	e7f8      	b.n	800539c <deal_key+0x4c>
			if(page_location == File_M_page){//光标下移
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d11a      	bne.n	80053e4 <deal_key+0x94>
				last_focus_line = current_focus_line;
 80053ae:	4a69      	ldr	r2, [pc, #420]	@ (8005554 <deal_key+0x204>)
 80053b0:	4969      	ldr	r1, [pc, #420]	@ (8005558 <deal_key+0x208>)
 80053b2:	7813      	ldrb	r3, [r2, #0]
 80053b4:	700b      	strb	r3, [r1, #0]
				if(current_focus_line > 0){
 80053b6:	b133      	cbz	r3, 80053c6 <deal_key+0x76>
					current_focus_line--;
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	7013      	strb	r3, [r2, #0]
				dir_display_refresh = 1;
 80053be:	4b67      	ldr	r3, [pc, #412]	@ (800555c <deal_key+0x20c>)
 80053c0:	2201      	movs	r2, #1
				pause_pressed = 1;
				if(Injecting && !pause_state){
					pause_state = 1;
				}
				else if(Injecting && pause_state && !cheat_flag){
					pause_state = 0;
 80053c2:	701a      	strb	r2, [r3, #0]
			}
			}
			break;
		}
	}
}
 80053c4:	e00e      	b.n	80053e4 <deal_key+0x94>
					current_focus_line = 5;
 80053c6:	2305      	movs	r3, #5
 80053c8:	e7f8      	b.n	80053bc <deal_key+0x6c>
				if(page_location == Main_page){
 80053ca:	4b5d      	ldr	r3, [pc, #372]	@ (8005540 <deal_key+0x1f0>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d128      	bne.n	8005424 <deal_key+0xd4>
					if(!Injecting && (Dosage_set != 0)){
 80053d2:	4b5d      	ldr	r3, [pc, #372]	@ (8005548 <deal_key+0x1f8>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	b133      	cbz	r3, 80053e6 <deal_key+0x96>
					if(Injecting && cheat_flag){
 80053d8:	4b61      	ldr	r3, [pc, #388]	@ (8005560 <deal_key+0x210>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	b99b      	cbnz	r3, 8005406 <deal_key+0xb6>
					if(Injecting && over_pressure){
 80053de:	4b61      	ldr	r3, [pc, #388]	@ (8005564 <deal_key+0x214>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	b933      	cbnz	r3, 80053f2 <deal_key+0xa2>
}
 80053e4:	4770      	bx	lr
					if(!Injecting && (Dosage_set != 0)){
 80053e6:	4b59      	ldr	r3, [pc, #356]	@ (800554c <deal_key+0x1fc>)
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0fa      	beq.n	80053e4 <deal_key+0x94>
						Dosage_load = Dosage_set;
 80053ee:	4a5e      	ldr	r2, [pc, #376]	@ (8005568 <deal_key+0x218>)
 80053f0:	8013      	strh	r3, [r2, #0]
						confirm_time = now_time;
 80053f2:	4b5e      	ldr	r3, [pc, #376]	@ (800556c <deal_key+0x21c>)
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	4b5e      	ldr	r3, [pc, #376]	@ (8005570 <deal_key+0x220>)
 80053f8:	601a      	str	r2, [r3, #0]
						confirm_pressed = 1;
 80053fa:	2301      	movs	r3, #1
 80053fc:	4a5d      	ldr	r2, [pc, #372]	@ (8005574 <deal_key+0x224>)
 80053fe:	7013      	strb	r3, [r2, #0]
						waiting_start = 1;
 8005400:	4a50      	ldr	r2, [pc, #320]	@ (8005544 <deal_key+0x1f4>)
					key_code = KEY_CANCEL;
 8005402:	7013      	strb	r3, [r2, #0]
 8005404:	4770      	bx	lr
						Dosage_load = RemainingTimes*2;
 8005406:	4b5c      	ldr	r3, [pc, #368]	@ (8005578 <deal_key+0x228>)
 8005408:	4a57      	ldr	r2, [pc, #348]	@ (8005568 <deal_key+0x218>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	8013      	strh	r3, [r2, #0]
						confirm_time = now_time;
 8005410:	4b56      	ldr	r3, [pc, #344]	@ (800556c <deal_key+0x21c>)
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	4b56      	ldr	r3, [pc, #344]	@ (8005570 <deal_key+0x220>)
 8005416:	601a      	str	r2, [r3, #0]
						confirm_pressed = 1;
 8005418:	2301      	movs	r3, #1
 800541a:	4a56      	ldr	r2, [pc, #344]	@ (8005574 <deal_key+0x224>)
 800541c:	7013      	strb	r3, [r2, #0]
						waiting_start = 1;
 800541e:	4a49      	ldr	r2, [pc, #292]	@ (8005544 <deal_key+0x1f4>)
 8005420:	7013      	strb	r3, [r2, #0]
					if(Injecting && over_pressure){
 8005422:	e7dc      	b.n	80053de <deal_key+0x8e>
				if(page_location == File_M_page){//确认、翻页
 8005424:	2b01      	cmp	r3, #1
 8005426:	d1dd      	bne.n	80053e4 <deal_key+0x94>
					focus_key_pressed = 1;
 8005428:	4a54      	ldr	r2, [pc, #336]	@ (800557c <deal_key+0x22c>)
 800542a:	7013      	strb	r3, [r2, #0]
					key_code = KEY_CONFIRM;
 800542c:	2202      	movs	r2, #2
 800542e:	4b54      	ldr	r3, [pc, #336]	@ (8005580 <deal_key+0x230>)
 8005430:	e7c7      	b.n	80053c2 <deal_key+0x72>
			if(page_location == Main_page){
 8005432:	4b43      	ldr	r3, [pc, #268]	@ (8005540 <deal_key+0x1f0>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	b983      	cbnz	r3, 800545a <deal_key+0x10a>
				if(!waiting_start && !Injecting){
 8005438:	4b42      	ldr	r3, [pc, #264]	@ (8005544 <deal_key+0x1f4>)
 800543a:	4a43      	ldr	r2, [pc, #268]	@ (8005548 <deal_key+0x1f8>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	7812      	ldrb	r2, [r2, #0]
 8005440:	4313      	orrs	r3, r2
 8005442:	d1cf      	bne.n	80053e4 <deal_key+0x94>
					if(Dosage_set < 1000)
 8005444:	4a41      	ldr	r2, [pc, #260]	@ (800554c <deal_key+0x1fc>)
 8005446:	8813      	ldrh	r3, [r2, #0]
 8005448:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
						Dosage_set = 1000;
 800544c:	bf2e      	itee	cs
 800544e:	f44f 737a 	movcs.w	r3, #1000	@ 0x3e8
						Dosage_set+=2;
 8005452:	3302      	addcc	r3, #2
 8005454:	b29b      	uxthcc	r3, r3
 8005456:	8013      	strh	r3, [r2, #0]
 8005458:	e7a0      	b.n	800539c <deal_key+0x4c>
			if(page_location == File_M_page){//光标上移
 800545a:	2b01      	cmp	r3, #1
 800545c:	d1c2      	bne.n	80053e4 <deal_key+0x94>
				last_focus_line = current_focus_line;
 800545e:	4a3d      	ldr	r2, [pc, #244]	@ (8005554 <deal_key+0x204>)
 8005460:	493d      	ldr	r1, [pc, #244]	@ (8005558 <deal_key+0x208>)
 8005462:	7813      	ldrb	r3, [r2, #0]
				if(current_focus_line < 5){
 8005464:	2b04      	cmp	r3, #4
				last_focus_line = current_focus_line;
 8005466:	700b      	strb	r3, [r1, #0]
				if(current_focus_line < 5){
 8005468:	d801      	bhi.n	800546e <deal_key+0x11e>
					current_focus_line++;
 800546a:	3301      	adds	r3, #1
 800546c:	e7a6      	b.n	80053bc <deal_key+0x6c>
				}else if(current_focus_line == 5){
 800546e:	2b05      	cmp	r3, #5
 8005470:	d1a5      	bne.n	80053be <deal_key+0x6e>
					current_focus_line = 0;
 8005472:	2300      	movs	r3, #0
 8005474:	e7a2      	b.n	80053bc <deal_key+0x6c>
			if(page_location == Main_page){
 8005476:	4b32      	ldr	r3, [pc, #200]	@ (8005540 <deal_key+0x1f0>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	b90b      	cbnz	r3, 8005480 <deal_key+0x130>
				read_i2c = 1;
 800547c:	4b41      	ldr	r3, [pc, #260]	@ (8005584 <deal_key+0x234>)
 800547e:	e79f      	b.n	80053c0 <deal_key+0x70>
			if(page_location == File_M_page){//删除文件
 8005480:	2b01      	cmp	r3, #1
 8005482:	d1af      	bne.n	80053e4 <deal_key+0x94>
				key_code = KEY_DELETE;
 8005484:	2203      	movs	r2, #3
 8005486:	4b3e      	ldr	r3, [pc, #248]	@ (8005580 <deal_key+0x230>)
 8005488:	e79b      	b.n	80053c2 <deal_key+0x72>
			if(page_location == Main_page){
 800548a:	4b2d      	ldr	r3, [pc, #180]	@ (8005540 <deal_key+0x1f0>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d12a      	bne.n	80054e8 <deal_key+0x198>
				EX_GAS_pressed = 1;
 8005492:	4b3d      	ldr	r3, [pc, #244]	@ (8005588 <deal_key+0x238>)
 8005494:	e794      	b.n	80053c0 <deal_key+0x70>
			if(page_location == Main_page){
 8005496:	4b2a      	ldr	r3, [pc, #168]	@ (8005540 <deal_key+0x1f0>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	bb2b      	cbnz	r3, 80054e8 <deal_key+0x198>
				if(waiting_start && (Dosage_load > 0) && !Injecting){
 800549c:	4b29      	ldr	r3, [pc, #164]	@ (8005544 <deal_key+0x1f4>)
 800549e:	781a      	ldrb	r2, [r3, #0]
 80054a0:	4b3a      	ldr	r3, [pc, #232]	@ (800558c <deal_key+0x23c>)
 80054a2:	b1f2      	cbz	r2, 80054e2 <deal_key+0x192>
 80054a4:	4a30      	ldr	r2, [pc, #192]	@ (8005568 <deal_key+0x218>)
 80054a6:	8812      	ldrh	r2, [r2, #0]
 80054a8:	b1da      	cbz	r2, 80054e2 <deal_key+0x192>
 80054aa:	4a27      	ldr	r2, [pc, #156]	@ (8005548 <deal_key+0x1f8>)
 80054ac:	7812      	ldrb	r2, [r2, #0]
 80054ae:	b9c2      	cbnz	r2, 80054e2 <deal_key+0x192>
					start_pressed = 1;
 80054b0:	2101      	movs	r1, #1
 80054b2:	7019      	strb	r1, [r3, #0]
					Dosage_set = 0;
 80054b4:	4b25      	ldr	r3, [pc, #148]	@ (800554c <deal_key+0x1fc>)
 80054b6:	801a      	strh	r2, [r3, #0]
				if(cheat_flag){
 80054b8:	4a29      	ldr	r2, [pc, #164]	@ (8005560 <deal_key+0x210>)
 80054ba:	7813      	ldrb	r3, [r2, #0]
 80054bc:	b13b      	cbz	r3, 80054ce <deal_key+0x17e>
					cheat_flag = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	7013      	strb	r3, [r2, #0]
					GasPrs_LOW_time = 0;
 80054c2:	4a33      	ldr	r2, [pc, #204]	@ (8005590 <deal_key+0x240>)
 80054c4:	8013      	strh	r3, [r2, #0]
					GasPrs_LOW = 0;
 80054c6:	4a33      	ldr	r2, [pc, #204]	@ (8005594 <deal_key+0x244>)
 80054c8:	7013      	strb	r3, [r2, #0]
					pause_state = 0;
 80054ca:	4a33      	ldr	r2, [pc, #204]	@ (8005598 <deal_key+0x248>)
 80054cc:	7013      	strb	r3, [r2, #0]
				if(over_pressure){
 80054ce:	4a25      	ldr	r2, [pc, #148]	@ (8005564 <deal_key+0x214>)
 80054d0:	7813      	ldrb	r3, [r2, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d086      	beq.n	80053e4 <deal_key+0x94>
					over_pressure = 0;
 80054d6:	2300      	movs	r3, #0
 80054d8:	7013      	strb	r3, [r2, #0]
					GasPrs_HIGH = 0;
 80054da:	4a30      	ldr	r2, [pc, #192]	@ (800559c <deal_key+0x24c>)
 80054dc:	7013      	strb	r3, [r2, #0]
					pause_state = 0;
 80054de:	4a2e      	ldr	r2, [pc, #184]	@ (8005598 <deal_key+0x248>)
 80054e0:	e78f      	b.n	8005402 <deal_key+0xb2>
					start_pressed = 0;
 80054e2:	2200      	movs	r2, #0
 80054e4:	701a      	strb	r2, [r3, #0]
 80054e6:	e7e7      	b.n	80054b8 <deal_key+0x168>
			if(page_location == File_M_page){
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	f47f af7b 	bne.w	80053e4 <deal_key+0x94>
				key_code = KEY_SENDFILE;
 80054ee:	2204      	movs	r2, #4
 80054f0:	4b23      	ldr	r3, [pc, #140]	@ (8005580 <deal_key+0x230>)
 80054f2:	e766      	b.n	80053c2 <deal_key+0x72>
				if(page_location == Main_page){
 80054f4:	4b12      	ldr	r3, [pc, #72]	@ (8005540 <deal_key+0x1f0>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	b90b      	cbnz	r3, 80054fe <deal_key+0x1ae>
					nReset_pressed = 1;
 80054fa:	4b29      	ldr	r3, [pc, #164]	@ (80055a0 <deal_key+0x250>)
 80054fc:	e760      	b.n	80053c0 <deal_key+0x70>
				if(page_location == File_M_page){
 80054fe:	2b01      	cmp	r3, #1
 8005500:	f47f af70 	bne.w	80053e4 <deal_key+0x94>
					key_code = KEY_CANCEL;
 8005504:	4a1e      	ldr	r2, [pc, #120]	@ (8005580 <deal_key+0x230>)
 8005506:	e77c      	b.n	8005402 <deal_key+0xb2>
			if(page_location == Main_page){
 8005508:	4b0d      	ldr	r3, [pc, #52]	@ (8005540 <deal_key+0x1f0>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	f47f af69 	bne.w	80053e4 <deal_key+0x94>
				pause_pressed = 1;
 8005512:	2201      	movs	r2, #1
 8005514:	4b23      	ldr	r3, [pc, #140]	@ (80055a4 <deal_key+0x254>)
 8005516:	701a      	strb	r2, [r3, #0]
				if(Injecting && !pause_state){
 8005518:	4b0b      	ldr	r3, [pc, #44]	@ (8005548 <deal_key+0x1f8>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f43f af61 	beq.w	80053e4 <deal_key+0x94>
 8005522:	4b1d      	ldr	r3, [pc, #116]	@ (8005598 <deal_key+0x248>)
 8005524:	7819      	ldrb	r1, [r3, #0]
 8005526:	2900      	cmp	r1, #0
 8005528:	f43f af4b 	beq.w	80053c2 <deal_key+0x72>
				else if(Injecting && pause_state && !cheat_flag){
 800552c:	4a0c      	ldr	r2, [pc, #48]	@ (8005560 <deal_key+0x210>)
 800552e:	7812      	ldrb	r2, [r2, #0]
 8005530:	2a00      	cmp	r2, #0
 8005532:	f47f af57 	bne.w	80053e4 <deal_key+0x94>
 8005536:	e744      	b.n	80053c2 <deal_key+0x72>
 8005538:	20000918 	.word	0x20000918
 800553c:	20000915 	.word	0x20000915
 8005540:	20000370 	.word	0x20000370
 8005544:	20000920 	.word	0x20000920
 8005548:	20000934 	.word	0x20000934
 800554c:	200008b6 	.word	0x200008b6
 8005550:	20000917 	.word	0x20000917
 8005554:	20000385 	.word	0x20000385
 8005558:	20000384 	.word	0x20000384
 800555c:	20000387 	.word	0x20000387
 8005560:	20000a4d 	.word	0x20000a4d
 8005564:	20000a4e 	.word	0x20000a4e
 8005568:	200008b4 	.word	0x200008b4
 800556c:	20000a30 	.word	0x20000a30
 8005570:	20000a48 	.word	0x20000a48
 8005574:	2000091f 	.word	0x2000091f
 8005578:	20000a44 	.word	0x20000a44
 800557c:	20000371 	.word	0x20000371
 8005580:	20000910 	.word	0x20000910
 8005584:	200008b8 	.word	0x200008b8
 8005588:	20000919 	.word	0x20000919
 800558c:	2000091e 	.word	0x2000091e
 8005590:	20000a52 	.word	0x20000a52
 8005594:	20000909 	.word	0x20000909
 8005598:	20000932 	.word	0x20000932
 800559c:	20000908 	.word	0x20000908
 80055a0:	2000091d 	.word	0x2000091d
 80055a4:	2000091c 	.word	0x2000091c

080055a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (HAL_GPIO_ReadPin(KEY_EXTI11_GPIO_Port, KEY_EXTI11_Pin) == GPIO_PIN_SET) {
 80055a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80055ac:	b538      	push	{r3, r4, r5, lr}
	if (HAL_GPIO_ReadPin(KEY_EXTI11_GPIO_Port, KEY_EXTI11_Pin) == GPIO_PIN_SET) {
 80055ae:	4833      	ldr	r0, [pc, #204]	@ (800567c <HAL_GPIO_EXTI_Callback+0xd4>)
 80055b0:	f002 f8e6 	bl	8007780 <HAL_GPIO_ReadPin>
 80055b4:	2801      	cmp	r0, #1
 80055b6:	d134      	bne.n	8005622 <HAL_GPIO_EXTI_Callback+0x7a>
	// 处理上升沿中断
		HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_RESET);
		key_pressed = 0;
 80055b8:	2400      	movs	r4, #0
		HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_RESET);
 80055ba:	2200      	movs	r2, #0
 80055bc:	2110      	movs	r1, #16
 80055be:	4830      	ldr	r0, [pc, #192]	@ (8005680 <HAL_GPIO_EXTI_Callback+0xd8>)
 80055c0:	f002 f8e4 	bl	800778c <HAL_GPIO_WritePin>
		key_pressed = 0;
 80055c4:	4b2f      	ldr	r3, [pc, #188]	@ (8005684 <HAL_GPIO_EXTI_Callback+0xdc>)
		key_now_time = 0;
		key_value_Refresh = 0;
		key_press_time = 0;
		key_press_long = 0;

		if(HAL_GPIO_ReadPin(NRESET_GPIO_Port,NRESET_Pin) == GPIO_PIN_SET){
 80055c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
		key_pressed = 0;
 80055ca:	701c      	strb	r4, [r3, #0]
		key_value = 0;
 80055cc:	4b2e      	ldr	r3, [pc, #184]	@ (8005688 <HAL_GPIO_EXTI_Callback+0xe0>)
		if(HAL_GPIO_ReadPin(NRESET_GPIO_Port,NRESET_Pin) == GPIO_PIN_SET){
 80055ce:	482c      	ldr	r0, [pc, #176]	@ (8005680 <HAL_GPIO_EXTI_Callback+0xd8>)
		key_value = 0;
 80055d0:	701c      	strb	r4, [r3, #0]
		key_last_time = 0;
 80055d2:	4b2e      	ldr	r3, [pc, #184]	@ (800568c <HAL_GPIO_EXTI_Callback+0xe4>)
 80055d4:	601c      	str	r4, [r3, #0]
		key_now_time = 0;
 80055d6:	4b2e      	ldr	r3, [pc, #184]	@ (8005690 <HAL_GPIO_EXTI_Callback+0xe8>)
 80055d8:	601c      	str	r4, [r3, #0]
		key_value_Refresh = 0;
 80055da:	4b2e      	ldr	r3, [pc, #184]	@ (8005694 <HAL_GPIO_EXTI_Callback+0xec>)
 80055dc:	701c      	strb	r4, [r3, #0]
		key_press_time = 0;
 80055de:	4b2e      	ldr	r3, [pc, #184]	@ (8005698 <HAL_GPIO_EXTI_Callback+0xf0>)
 80055e0:	801c      	strh	r4, [r3, #0]
		key_press_long = 0;
 80055e2:	4b2e      	ldr	r3, [pc, #184]	@ (800569c <HAL_GPIO_EXTI_Callback+0xf4>)
 80055e4:	701c      	strb	r4, [r3, #0]
		if(HAL_GPIO_ReadPin(NRESET_GPIO_Port,NRESET_Pin) == GPIO_PIN_SET){
 80055e6:	f002 f8cb 	bl	8007780 <HAL_GPIO_ReadPin>
 80055ea:	2801      	cmp	r0, #1
			nReset_pressed = 0;
 80055ec:	bf08      	it	eq
 80055ee:	4b2c      	ldreq	r3, [pc, #176]	@ (80056a0 <HAL_GPIO_EXTI_Callback+0xf8>)
		}

		if(HAL_GPIO_ReadPin(PAUSE_GPIO_Port,PAUSE_Pin) == GPIO_PIN_SET){
 80055f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80055f4:	482b      	ldr	r0, [pc, #172]	@ (80056a4 <HAL_GPIO_EXTI_Callback+0xfc>)
			nReset_pressed = 0;
 80055f6:	bf08      	it	eq
 80055f8:	701c      	strbeq	r4, [r3, #0]
		if(HAL_GPIO_ReadPin(PAUSE_GPIO_Port,PAUSE_Pin) == GPIO_PIN_SET){
 80055fa:	f002 f8c1 	bl	8007780 <HAL_GPIO_ReadPin>
 80055fe:	2801      	cmp	r0, #1
			pause_pressed = 0;
 8005600:	bf04      	itt	eq
 8005602:	2200      	moveq	r2, #0
 8005604:	4b28      	ldreq	r3, [pc, #160]	@ (80056a8 <HAL_GPIO_EXTI_Callback+0x100>)
		}

		if(HAL_GPIO_ReadPin(EX_GAS_GPIO_Port,EX_GAS_Pin) == GPIO_PIN_SET){
 8005606:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800560a:	481d      	ldr	r0, [pc, #116]	@ (8005680 <HAL_GPIO_EXTI_Callback+0xd8>)
			pause_pressed = 0;
 800560c:	bf08      	it	eq
 800560e:	701a      	strbeq	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(EX_GAS_GPIO_Port,EX_GAS_Pin) == GPIO_PIN_SET){
 8005610:	f002 f8b6 	bl	8007780 <HAL_GPIO_ReadPin>
 8005614:	2801      	cmp	r0, #1
 8005616:	d104      	bne.n	8005622 <HAL_GPIO_EXTI_Callback+0x7a>
			EX_GAS_start = 0;
 8005618:	2300      	movs	r3, #0
 800561a:	4a24      	ldr	r2, [pc, #144]	@ (80056ac <HAL_GPIO_EXTI_Callback+0x104>)
 800561c:	7013      	strb	r3, [r2, #0]
			EX_GAS_pressed = 0;
 800561e:	4a24      	ldr	r2, [pc, #144]	@ (80056b0 <HAL_GPIO_EXTI_Callback+0x108>)
 8005620:	7013      	strb	r3, [r2, #0]
		}
	}

	if (HAL_GPIO_ReadPin(KEY_EXTI11_GPIO_Port, KEY_EXTI11_Pin) == GPIO_PIN_RESET) {
 8005622:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005626:	4815      	ldr	r0, [pc, #84]	@ (800567c <HAL_GPIO_EXTI_Callback+0xd4>)
 8005628:	f002 f8aa 	bl	8007780 <HAL_GPIO_ReadPin>
	// 处理下降沿中断
		if(!key_scan_lock){
 800562c:	4b21      	ldr	r3, [pc, #132]	@ (80056b4 <HAL_GPIO_EXTI_Callback+0x10c>)
 800562e:	781a      	ldrb	r2, [r3, #0]
 8005630:	4310      	orrs	r0, r2
 8005632:	f010 05ff 	ands.w	r5, r0, #255	@ 0xff
 8005636:	d11f      	bne.n	8005678 <HAL_GPIO_EXTI_Callback+0xd0>
			key_scan_lock = 1;//防止多次执行下降沿中断函数
 8005638:	2401      	movs	r4, #1
 800563a:	701c      	strb	r4, [r3, #0]
			key_lock_time = now_time;
 800563c:	4b1e      	ldr	r3, [pc, #120]	@ (80056b8 <HAL_GPIO_EXTI_Callback+0x110>)

			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_SET);
 800563e:	2110      	movs	r1, #16
			key_lock_time = now_time;
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	4b1e      	ldr	r3, [pc, #120]	@ (80056bc <HAL_GPIO_EXTI_Callback+0x114>)
			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_SET);
 8005644:	480e      	ldr	r0, [pc, #56]	@ (8005680 <HAL_GPIO_EXTI_Callback+0xd8>)
			key_lock_time = now_time;
 8005646:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_SET);
 8005648:	4622      	mov	r2, r4
 800564a:	f002 f89f 	bl	800778c <HAL_GPIO_WritePin>
			key_pressed = 1;
 800564e:	4b0d      	ldr	r3, [pc, #52]	@ (8005684 <HAL_GPIO_EXTI_Callback+0xdc>)
 8005650:	701c      	strb	r4, [r3, #0]
			key_value = key_scan();
 8005652:	f7ff fe21 	bl	8005298 <key_scan>
 8005656:	4b0c      	ldr	r3, [pc, #48]	@ (8005688 <HAL_GPIO_EXTI_Callback+0xe0>)
 8005658:	7018      	strb	r0, [r3, #0]
			key_last_time = key_now_time;
 800565a:	4b0d      	ldr	r3, [pc, #52]	@ (8005690 <HAL_GPIO_EXTI_Callback+0xe8>)
			key_press_sigle = 1;

			deal_key();
			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_RESET);
 800565c:	4808      	ldr	r0, [pc, #32]	@ (8005680 <HAL_GPIO_EXTI_Callback+0xd8>)
			key_last_time = key_now_time;
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	4b0a      	ldr	r3, [pc, #40]	@ (800568c <HAL_GPIO_EXTI_Callback+0xe4>)
 8005662:	601a      	str	r2, [r3, #0]
			key_press_sigle = 1;
 8005664:	4b16      	ldr	r3, [pc, #88]	@ (80056c0 <HAL_GPIO_EXTI_Callback+0x118>)
 8005666:	701c      	strb	r4, [r3, #0]
			deal_key();
 8005668:	f7ff fe72 	bl	8005350 <deal_key>
			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_RESET);
 800566c:	462a      	mov	r2, r5
		}
	}
}
 800566e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_RESET);
 8005672:	2110      	movs	r1, #16
 8005674:	f002 b88a 	b.w	800778c <HAL_GPIO_WritePin>
}
 8005678:	bd38      	pop	{r3, r4, r5, pc}
 800567a:	bf00      	nop
 800567c:	40010800 	.word	0x40010800
 8005680:	40010c00 	.word	0x40010c00
 8005684:	20000914 	.word	0x20000914
 8005688:	20000918 	.word	0x20000918
 800568c:	20000a38 	.word	0x20000a38
 8005690:	20000a34 	.word	0x20000a34
 8005694:	20000917 	.word	0x20000917
 8005698:	20000912 	.word	0x20000912
 800569c:	20000916 	.word	0x20000916
 80056a0:	2000091d 	.word	0x2000091d
 80056a4:	40011000 	.word	0x40011000
 80056a8:	2000091c 	.word	0x2000091c
 80056ac:	20000a3c 	.word	0x20000a3c
 80056b0:	20000919 	.word	0x20000919
 80056b4:	20000928 	.word	0x20000928
 80056b8:	20000a30 	.word	0x20000a30
 80056bc:	20000924 	.word	0x20000924
 80056c0:	20000915 	.word	0x20000915

080056c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80056c4:	b530      	push	{r4, r5, lr}
 80056c6:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80056c8:	2220      	movs	r2, #32
 80056ca:	2100      	movs	r1, #0
 80056cc:	a80b      	add	r0, sp, #44	@ 0x2c
 80056ce:	f005 fa8c 	bl	800abea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80056d2:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80056d4:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80056d6:	2100      	movs	r1, #0
 80056d8:	eb0d 0002 	add.w	r0, sp, r2
 80056dc:	f005 fa85 	bl	800abea <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80056e0:	462a      	mov	r2, r5
 80056e2:	2100      	movs	r1, #0
 80056e4:	a801      	add	r0, sp, #4
 80056e6:	f005 fa80 	bl	800abea <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80056ea:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80056ec:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80056ee:	e9cd 350e 	strd	r3, r5, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80056f2:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80056f6:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80056f8:	940a      	str	r4, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80056fa:	9411      	str	r4, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80056fc:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80056fe:	f002 f85f 	bl	80077c0 <HAL_RCC_OscConfig>
 8005702:	b108      	cbz	r0, 8005708 <SystemClock_Config+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005704:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005706:	e7fe      	b.n	8005706 <SystemClock_Config+0x42>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005708:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800570a:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800570e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005712:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005714:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005718:	4621      	mov	r1, r4
 800571a:	a805      	add	r0, sp, #20
 800571c:	f002 fa12 	bl	8007b44 <HAL_RCC_ClockConfig>
 8005720:	b108      	cbz	r0, 8005726 <SystemClock_Config+0x62>
 8005722:	b672      	cpsid	i
  while (1)
 8005724:	e7fe      	b.n	8005724 <SystemClock_Config+0x60>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8005726:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800572a:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800572c:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800572e:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005730:	f002 fac4 	bl	8007cbc <HAL_RCCEx_PeriphCLKConfig>
 8005734:	b108      	cbz	r0, 800573a <SystemClock_Config+0x76>
 8005736:	b672      	cpsid	i
  while (1)
 8005738:	e7fe      	b.n	8005738 <SystemClock_Config+0x74>
}
 800573a:	b015      	add	sp, #84	@ 0x54
 800573c:	bd30      	pop	{r4, r5, pc}
	...

08005740 <main>:
  first_run_clcDos = 1;
 8005740:	2401      	movs	r4, #1
{
 8005742:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
  HAL_Init();
 8005746:	f001 fa35 	bl	8006bb4 <HAL_Init>
  SystemClock_Config();
 800574a:	f7ff ffbb 	bl	80056c4 <SystemClock_Config>
  MX_GPIO_Init();
 800574e:	f7ff fb7b 	bl	8004e48 <MX_GPIO_Init>
  MX_DMA_Init();
 8005752:	f7fd fc21 	bl	8002f98 <MX_DMA_Init>
  MX_ADC1_Init();
 8005756:	f7fd fa11 	bl	8002b7c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800575a:	f000 fffd 	bl	8006758 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800575e:	f000 fc43 	bl	8005fe8 <MX_TIM4_Init>
  MX_TIM3_Init();
 8005762:	f000 fc0b 	bl	8005f7c <MX_TIM3_Init>
  MX_SPI1_Init();
 8005766:	f000 faf9 	bl	8005d5c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800576a:	f001 f811 	bl	8006790 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800576e:	f001 f82b 	bl	80067c8 <MX_USART3_UART_Init>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8005772:	4872      	ldr	r0, [pc, #456]	@ (800593c <main+0x1fc>)
 8005774:	f001 fcee 	bl	8007154 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_rslt, 4);
 8005778:	4971      	ldr	r1, [pc, #452]	@ (8005940 <main+0x200>)
 800577a:	2204      	movs	r2, #4
 800577c:	486f      	ldr	r0, [pc, #444]	@ (800593c <main+0x1fc>)
 800577e:	f001 fbb7 	bl	8006ef0 <HAL_ADC_Start_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 8005782:	4b70      	ldr	r3, [pc, #448]	@ (8005944 <main+0x204>)
  HAL_Delay(10);
 8005784:	200a      	movs	r0, #10
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 8005786:	681a      	ldr	r2, [r3, #0]
  first_run_clcDos = 1;
 8005788:	4e6f      	ldr	r6, [pc, #444]	@ (8005948 <main+0x208>)
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 800578a:	6813      	ldr	r3, [r2, #0]
	page_location = Main_page;
 800578c:	4f6f      	ldr	r7, [pc, #444]	@ (800594c <main+0x20c>)
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 800578e:	f023 0304 	bic.w	r3, r3, #4
 8005792:	6013      	str	r3, [r2, #0]
  HAL_Delay(10);
 8005794:	f001 fa32 	bl	8006bfc <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim3);
 8005798:	486d      	ldr	r0, [pc, #436]	@ (8005950 <main+0x210>)
 800579a:	f002 fd33 	bl	8008204 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800579e:	486d      	ldr	r0, [pc, #436]	@ (8005954 <main+0x214>)
 80057a0:	f002 fd30 	bl	8008204 <HAL_TIM_Base_Start_IT>
  HAL_Delay(10);
 80057a4:	200a      	movs	r0, #10
 80057a6:	f001 fa29 	bl	8006bfc <HAL_Delay>
  HMI_init();
 80057aa:	f7fc f8cb 	bl	8001944 <HMI_init>
	HAL_Delay(100);
 80057ae:	2064      	movs	r0, #100	@ 0x64
 80057b0:	f001 fa24 	bl	8006bfc <HAL_Delay>
  Motor_init();
 80057b4:	f000 f940 	bl	8005a38 <Motor_init>
  first_run = 1;
 80057b8:	4b67      	ldr	r3, [pc, #412]	@ (8005958 <main+0x218>)
  first_run_clcDos = 1;
 80057ba:	7034      	strb	r4, [r6, #0]
  first_run = 1;
 80057bc:	701c      	strb	r4, [r3, #0]
	READOUT_SAVE_DATA();
 80057be:	f7fb fd2f 	bl	8001220 <READOUT_SAVE_DATA>
	AD24C02_DataCheck();
 80057c2:	f7fb fd6f 	bl	80012a4 <AD24C02_DataCheck>
	HAL_Delay(10);
 80057c6:	200a      	movs	r0, #10
 80057c8:	f001 fa18 	bl	8006bfc <HAL_Delay>
	page_location = Main_page;
 80057cc:	2300      	movs	r3, #0
  HAL_UART_Receive_DMA(&huart3, &gps_rx_buffer[0], 1); // 启动接收
 80057ce:	4622      	mov	r2, r4
 80057d0:	4962      	ldr	r1, [pc, #392]	@ (800595c <main+0x21c>)
 80057d2:	4863      	ldr	r0, [pc, #396]	@ (8005960 <main+0x220>)
	page_location = Main_page;
 80057d4:	703b      	strb	r3, [r7, #0]
  HAL_UART_Receive_DMA(&huart3, &gps_rx_buffer[0], 1); // 启动接收
 80057d6:	f003 facb 	bl	8008d70 <HAL_UART_Receive_DMA>
  SDCard_states = SDCard_InsertCheck();
 80057da:	f7fc fbff 	bl	8001fdc <SDCard_InsertCheck>
 80057de:	4d61      	ldr	r5, [pc, #388]	@ (8005964 <main+0x224>)
 80057e0:	6028      	str	r0, [r5, #0]
  if(SDCard_states == 0){
 80057e2:	b908      	cbnz	r0, 80057e8 <main+0xa8>
    CSV_sheet_Init();
 80057e4:	f7fc fc14 	bl	8002010 <CSV_sheet_Init>
  AD24C02_Read2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);//读取最后一次保存的行号
 80057e8:	2050      	movs	r0, #80	@ 0x50
 80057ea:	495f      	ldr	r1, [pc, #380]	@ (8005968 <main+0x228>)
 80057ec:	f7fb fd07 	bl	80011fe <AD24C02_Read2Byte>
  	if(i++ >=10000){
 80057f0:	f8df 8178 	ldr.w	r8, [pc, #376]	@ 800596c <main+0x22c>
			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin,GPIO_PIN_SET);
 80057f4:	f8df 9178 	ldr.w	r9, [pc, #376]	@ 8005970 <main+0x230>
  	if(i++ >=10000){
 80057f8:	f8b8 3000 	ldrh.w	r3, [r8]
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	f8a8 2000 	strh.w	r2, [r8]
 8005802:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005806:	4293      	cmp	r3, r2
 8005808:	d916      	bls.n	8005838 <main+0xf8>
			if(SDCard_states != 0 || !SD_INSERT){
 800580a:	682b      	ldr	r3, [r5, #0]
 800580c:	b143      	cbz	r3, 8005820 <main+0xe0>
				SDCard_states = SDCard_InsertCheck();
 800580e:	f7fc fbe5 	bl	8001fdc <SDCard_InsertCheck>
				HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_SET);
 8005812:	2201      	movs	r2, #1
				SDCard_states = SDCard_InsertCheck();
 8005814:	6028      	str	r0, [r5, #0]
				HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_RESET);
 8005816:	2110      	movs	r1, #16
 8005818:	4856      	ldr	r0, [pc, #344]	@ (8005974 <main+0x234>)
 800581a:	f001 ffb7 	bl	800778c <HAL_GPIO_WritePin>
 800581e:	e008      	b.n	8005832 <main+0xf2>
			if(SDCard_states != 0 || !SD_INSERT){
 8005820:	2101      	movs	r1, #1
 8005822:	4855      	ldr	r0, [pc, #340]	@ (8005978 <main+0x238>)
 8005824:	f001 ffac 	bl	8007780 <HAL_GPIO_ReadPin>
 8005828:	2800      	cmp	r0, #0
 800582a:	d1f0      	bne.n	800580e <main+0xce>
			else if(SDCard_states == 0){
 800582c:	682a      	ldr	r2, [r5, #0]
 800582e:	2a00      	cmp	r2, #0
 8005830:	d0f1      	beq.n	8005816 <main+0xd6>
			i = 0;
 8005832:	2300      	movs	r3, #0
 8005834:	f8a8 3000 	strh.w	r3, [r8]
  	if(Injecting && (page_location == Main_page)){
 8005838:	f8df b140 	ldr.w	fp, [pc, #320]	@ 800597c <main+0x23c>
 800583c:	783c      	ldrb	r4, [r7, #0]
 800583e:	f89b 3000 	ldrb.w	r3, [fp]
 8005842:	b363      	cbz	r3, 800589e <main+0x15e>
 8005844:	b984      	cbnz	r4, 8005868 <main+0x128>
			sprintf(Tx_Buffer,"Main.t0.txt=\"正在注药\"\xff\xff\xff");
 8005846:	494e      	ldr	r1, [pc, #312]	@ (8005980 <main+0x240>)
 8005848:	484e      	ldr	r0, [pc, #312]	@ (8005984 <main+0x244>)
 800584a:	f005 faca 	bl	800ade2 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800584e:	484d      	ldr	r0, [pc, #308]	@ (8005984 <main+0x244>)
 8005850:	f001 f894 	bl	800697c <USART1_Tx_HMIdata>
			if(first_run_clcDos == 1){
 8005854:	7833      	ldrb	r3, [r6, #0]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d104      	bne.n	8005864 <main+0x124>
				Inject_times(Dosage_load);
 800585a:	4b4b      	ldr	r3, [pc, #300]	@ (8005988 <main+0x248>)
 800585c:	8818      	ldrh	r0, [r3, #0]
 800585e:	f000 f9a7 	bl	8005bb0 <Inject_times>
				first_run_clcDos = 0;
 8005862:	7034      	strb	r4, [r6, #0]
			Inject_working();
 8005864:	f000 f9d2 	bl	8005c0c <Inject_working>
		if(clear_counter && (page_location == Main_page)){
 8005868:	4b48      	ldr	r3, [pc, #288]	@ (800598c <main+0x24c>)
 800586a:	781a      	ldrb	r2, [r3, #0]
 800586c:	2a00      	cmp	r2, #0
 800586e:	d0c3      	beq.n	80057f8 <main+0xb8>
 8005870:	783c      	ldrb	r4, [r7, #0]
 8005872:	2c00      	cmp	r4, #0
 8005874:	d1c0      	bne.n	80057f8 <main+0xb8>
			clear_counter = 0;
 8005876:	701c      	strb	r4, [r3, #0]
			Refresh_Dosage();
 8005878:	f7fd fc8c 	bl	8003194 <Refresh_Dosage>
			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin,GPIO_PIN_SET);
 800587c:	2201      	movs	r2, #1
 800587e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005882:	4648      	mov	r0, r9
 8005884:	f001 ff82 	bl	800778c <HAL_GPIO_WritePin>
			HAL_Delay(300);
 8005888:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800588c:	f001 f9b6 	bl	8006bfc <HAL_Delay>
			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin,GPIO_PIN_RESET);
 8005890:	4622      	mov	r2, r4
 8005892:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005896:	4648      	mov	r0, r9
 8005898:	f001 ff78 	bl	800778c <HAL_GPIO_WritePin>
 800589c:	e7ac      	b.n	80057f8 <main+0xb8>
		if(!Injecting && EX_GAS_start && (page_location == Main_page)){
 800589e:	f8df a0f0 	ldr.w	sl, [pc, #240]	@ 8005990 <main+0x250>
 80058a2:	f89a 3000 	ldrb.w	r3, [sl]
 80058a6:	b163      	cbz	r3, 80058c2 <main+0x182>
 80058a8:	2c00      	cmp	r4, #0
 80058aa:	d144      	bne.n	8005936 <main+0x1f6>
				while(!Injecting && EX_GAS_start)
 80058ac:	f89b 3000 	ldrb.w	r3, [fp]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1d9      	bne.n	8005868 <main+0x128>
 80058b4:	f89a 3000 	ldrb.w	r3, [sl]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0d5      	beq.n	8005868 <main+0x128>
					Ex_GAS_Cycle();
 80058bc:	f000 f95c 	bl	8005b78 <Ex_GAS_Cycle>
 80058c0:	e7f4      	b.n	80058ac <main+0x16c>
		if(!Injecting && (page_location == File_M_page)){
 80058c2:	2c01      	cmp	r4, #1
 80058c4:	d132      	bne.n	800592c <main+0x1ec>
			if(refresh_dir || first_display_dir){
 80058c6:	4c33      	ldr	r4, [pc, #204]	@ (8005994 <main+0x254>)
 80058c8:	f8df a0cc 	ldr.w	sl, [pc, #204]	@ 8005998 <main+0x258>
 80058cc:	7823      	ldrb	r3, [r4, #0]
 80058ce:	f89a 2000 	ldrb.w	r2, [sl]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	d009      	beq.n	80058ea <main+0x1aa>
				Cache_File_List();
 80058d6:	f7fc f91f 	bl	8001b18 <Cache_File_List>
				Refresh_Display();
 80058da:	f7fc f8db 	bl	8001a94 <Refresh_Display>
				scroll_focus_line();
 80058de:	f7fc fb05 	bl	8001eec <scroll_focus_line>
				first_display_dir = 0;
 80058e2:	2300      	movs	r3, #0
 80058e4:	f88a 3000 	strb.w	r3, [sl]
				refresh_dir = 0;
 80058e8:	7023      	strb	r3, [r4, #0]
			switch(key_code){
 80058ea:	4c2c      	ldr	r4, [pc, #176]	@ (800599c <main+0x25c>)
 80058ec:	7823      	ldrb	r3, [r4, #0]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	d805      	bhi.n	8005900 <main+0x1c0>
 80058f4:	e8df f003 	tbb	[pc, r3]
 80058f8:	17141102 	.word	0x17141102
					Back_to_MainPage();
 80058fc:	f7fc f88e 	bl	8001a1c <Back_to_MainPage>
			key_code = KEY_NULL;
 8005900:	f04f 0a00 	mov.w	sl, #0
 8005904:	f884 a000 	strb.w	sl, [r4]
			if(dir_display_refresh){
 8005908:	4c25      	ldr	r4, [pc, #148]	@ (80059a0 <main+0x260>)
 800590a:	7823      	ldrb	r3, [r4, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0ab      	beq.n	8005868 <main+0x128>
				scroll_focus_line();
 8005910:	f7fc faec 	bl	8001eec <scroll_focus_line>
				dir_display_refresh = 0;
 8005914:	f884 a000 	strb.w	sl, [r4]
 8005918:	e7a6      	b.n	8005868 <main+0x128>
					page_turning();
 800591a:	f7fc f96f 	bl	8001bfc <page_turning>
					break;
 800591e:	e7ef      	b.n	8005900 <main+0x1c0>
					On_Delete_Key_Pressed();
 8005920:	f7fc f996 	bl	8001c50 <On_Delete_Key_Pressed>
					break;
 8005924:	e7ec      	b.n	8005900 <main+0x1c0>
					sendFile_key_pressed();
 8005926:	f7fc fa27 	bl	8001d78 <sendFile_key_pressed>
					break;
 800592a:	e7e9      	b.n	8005900 <main+0x1c0>
		if(page_location == Main_page)
 800592c:	2c00      	cmp	r4, #0
 800592e:	d19b      	bne.n	8005868 <main+0x128>
			Set_Dosage();
 8005930:	f7fd fb52 	bl	8002fd8 <Set_Dosage>
 8005934:	e798      	b.n	8005868 <main+0x128>
		if(!Injecting && (page_location == File_M_page)){
 8005936:	2c01      	cmp	r4, #1
 8005938:	d196      	bne.n	8005868 <main+0x128>
 800593a:	e7c4      	b.n	80058c6 <main+0x186>
 800593c:	20000874 	.word	0x20000874
 8005940:	200008a6 	.word	0x200008a6
 8005944:	20000830 	.word	0x20000830
 8005948:	200008b9 	.word	0x200008b9
 800594c:	20000370 	.word	0x20000370
 8005950:	200009dc 	.word	0x200009dc
 8005954:	20000994 	.word	0x20000994
 8005958:	20000003 	.word	0x20000003
 800595c:	20000270 	.word	0x20000270
 8005960:	20000aa4 	.word	0x20000aa4
 8005964:	200007bc 	.word	0x200007bc
 8005968:	200007b8 	.word	0x200007b8
 800596c:	2000092a 	.word	0x2000092a
 8005970:	40011000 	.word	0x40011000
 8005974:	40010c00 	.word	0x40010c00
 8005978:	40011400 	.word	0x40011400
 800597c:	20000934 	.word	0x20000934
 8005980:	0800db18 	.word	0x0800db18
 8005984:	20000b7e 	.word	0x20000b7e
 8005988:	200008b4 	.word	0x200008b4
 800598c:	2000091b 	.word	0x2000091b
 8005990:	20000a3c 	.word	0x20000a3c
 8005994:	20000386 	.word	0x20000386
 8005998:	20000002 	.word	0x20000002
 800599c:	20000910 	.word	0x20000910
 80059a0:	20000387 	.word	0x20000387

080059a4 <Error_Handler>:
 80059a4:	b672      	cpsid	i
  while (1)
 80059a6:	e7fe      	b.n	80059a6 <Error_Handler+0x2>

080059a8 <Motor_Forward>:
	Motor_Reverse();
	HAL_Delay(1800);
	Motor_Brake();
}

void Motor_Forward(){
 80059a8:	b510      	push	{r4, lr}
	motor_direction = FORWARD;
 80059aa:	2401      	movs	r4, #1
 80059ac:	4b07      	ldr	r3, [pc, #28]	@ (80059cc <Motor_Forward+0x24>)

	Motor_1_PH_SET;
 80059ae:	4622      	mov	r2, r4
 80059b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80059b4:	4806      	ldr	r0, [pc, #24]	@ (80059d0 <Motor_Forward+0x28>)
	motor_direction = FORWARD;
 80059b6:	701c      	strb	r4, [r3, #0]
	Motor_1_PH_SET;
 80059b8:	f001 fee8 	bl	800778c <HAL_GPIO_WritePin>
	Motor_1_EN_SET;
 80059bc:	4622      	mov	r2, r4
}
 80059be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Motor_1_EN_SET;
 80059c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80059c6:	4803      	ldr	r0, [pc, #12]	@ (80059d4 <Motor_Forward+0x2c>)
 80059c8:	f001 bee0 	b.w	800778c <HAL_GPIO_WritePin>
 80059cc:	20000936 	.word	0x20000936
 80059d0:	40010c00 	.word	0x40010c00
 80059d4:	40010800 	.word	0x40010800

080059d8 <Motor_Reverse>:

void Motor_Reverse(){
	motor_direction = REVERSE;
 80059d8:	22ff      	movs	r2, #255	@ 0xff
void Motor_Reverse(){
 80059da:	b508      	push	{r3, lr}
	motor_direction = REVERSE;
 80059dc:	4b07      	ldr	r3, [pc, #28]	@ (80059fc <Motor_Reverse+0x24>)

	Motor_1_EN_SET;
 80059de:	f44f 7180 	mov.w	r1, #256	@ 0x100
	motor_direction = REVERSE;
 80059e2:	701a      	strb	r2, [r3, #0]
	Motor_1_EN_SET;
 80059e4:	4806      	ldr	r0, [pc, #24]	@ (8005a00 <Motor_Reverse+0x28>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	f001 fed0 	bl	800778c <HAL_GPIO_WritePin>
	Motor_1_PH_RESET;
}
 80059ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Motor_1_PH_RESET;
 80059f0:	2200      	movs	r2, #0
 80059f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80059f6:	4803      	ldr	r0, [pc, #12]	@ (8005a04 <Motor_Reverse+0x2c>)
 80059f8:	f001 bec8 	b.w	800778c <HAL_GPIO_WritePin>
 80059fc:	20000936 	.word	0x20000936
 8005a00:	40010800 	.word	0x40010800
 8005a04:	40010c00 	.word	0x40010c00

08005a08 <Motor_Brake>:

void Motor_Brake(){
 8005a08:	b510      	push	{r4, lr}
	motor_direction = 0;
 8005a0a:	2400      	movs	r4, #0
 8005a0c:	4b07      	ldr	r3, [pc, #28]	@ (8005a2c <Motor_Brake+0x24>)

	Motor_1_EN_RESET;
 8005a0e:	4622      	mov	r2, r4
 8005a10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a14:	4806      	ldr	r0, [pc, #24]	@ (8005a30 <Motor_Brake+0x28>)
	motor_direction = 0;
 8005a16:	701c      	strb	r4, [r3, #0]
	Motor_1_EN_RESET;
 8005a18:	f001 feb8 	bl	800778c <HAL_GPIO_WritePin>
	Motor_1_PH_RESET;
 8005a1c:	4622      	mov	r2, r4
}
 8005a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Motor_1_PH_RESET;
 8005a22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005a26:	4803      	ldr	r0, [pc, #12]	@ (8005a34 <Motor_Brake+0x2c>)
 8005a28:	f001 beb0 	b.w	800778c <HAL_GPIO_WritePin>
 8005a2c:	20000936 	.word	0x20000936
 8005a30:	40010800 	.word	0x40010800
 8005a34:	40010c00 	.word	0x40010c00

08005a38 <Motor_init>:
void Motor_init(){
 8005a38:	b508      	push	{r3, lr}
	Motor_Reverse();
 8005a3a:	f7ff ffcd 	bl	80059d8 <Motor_Reverse>
	HAL_Delay(1800);
 8005a3e:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 8005a42:	f001 f8db 	bl	8006bfc <HAL_Delay>
}
 8005a46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Motor_Brake();
 8005a4a:	f7ff bfdd 	b.w	8005a08 <Motor_Brake>
	...

08005a50 <PAUSE_chk>:
	}
	Motor_2_EN_RESET;
	motor_Reverse_Cycle();
}

void PAUSE_chk(){
 8005a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t pause_show = 0;
 8005a52:	2400      	movs	r4, #0
	static uint8_t enter_pause = 0;
	while(Injecting && pause_state){
 8005a54:	4f26      	ldr	r7, [pc, #152]	@ (8005af0 <PAUSE_chk+0xa0>)
		enter_pause = 1;
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
		if((now_time_inject % 5 == 0) && !pause_show){
 8005a56:	4e27      	ldr	r6, [pc, #156]	@ (8005af4 <PAUSE_chk+0xa4>)
	while(Injecting && pause_state){
 8005a58:	783b      	ldrb	r3, [r7, #0]
 8005a5a:	4d27      	ldr	r5, [pc, #156]	@ (8005af8 <PAUSE_chk+0xa8>)
 8005a5c:	b113      	cbz	r3, 8005a64 <PAUSE_chk+0x14>
 8005a5e:	4b27      	ldr	r3, [pc, #156]	@ (8005afc <PAUSE_chk+0xac>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	b95b      	cbnz	r3, 8005a7c <PAUSE_chk+0x2c>
			clear_counter = 0;
			Refresh_counter();
		}
	}

	if(enter_pause){
 8005a64:	782b      	ldrb	r3, [r5, #0]
 8005a66:	b143      	cbz	r3, 8005a7a <PAUSE_chk+0x2a>
			sprintf(Tx_Buffer,"Main.t0.txt=\"\"\xff\xff\xff");
 8005a68:	4925      	ldr	r1, [pc, #148]	@ (8005b00 <PAUSE_chk+0xb0>)
 8005a6a:	4826      	ldr	r0, [pc, #152]	@ (8005b04 <PAUSE_chk+0xb4>)
 8005a6c:	f005 f9b9 	bl	800ade2 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8005a70:	4824      	ldr	r0, [pc, #144]	@ (8005b04 <PAUSE_chk+0xb4>)
 8005a72:	f000 ff83 	bl	800697c <USART1_Tx_HMIdata>
			enter_pause = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	702b      	strb	r3, [r5, #0]
	}
}
 8005a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		enter_pause = 1;
 8005a7c:	2301      	movs	r3, #1
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8005a7e:	2200      	movs	r2, #0
 8005a80:	2102      	movs	r1, #2
 8005a82:	4821      	ldr	r0, [pc, #132]	@ (8005b08 <PAUSE_chk+0xb8>)
		enter_pause = 1;
 8005a84:	702b      	strb	r3, [r5, #0]
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8005a86:	f001 fe81 	bl	800778c <HAL_GPIO_WritePin>
		if((now_time_inject % 5 == 0) && !pause_show){
 8005a8a:	6833      	ldr	r3, [r6, #0]
 8005a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8005b0c <PAUSE_chk+0xbc>)
 8005a8e:	4353      	muls	r3, r2
 8005a90:	f1b3 3f33 	cmp.w	r3, #858993459	@ 0x33333333
 8005a94:	d814      	bhi.n	8005ac0 <PAUSE_chk+0x70>
 8005a96:	b99c      	cbnz	r4, 8005ac0 <PAUSE_chk+0x70>
			if(cheat_flag == 1){
 8005a98:	4b1d      	ldr	r3, [pc, #116]	@ (8005b10 <PAUSE_chk+0xc0>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d108      	bne.n	8005ab2 <PAUSE_chk+0x62>
				sprintf(Tx_Buffer,"Main.t0.txt=\"请按规\r\n范操作\"\xff\xff\xff");
 8005aa0:	491c      	ldr	r1, [pc, #112]	@ (8005b14 <PAUSE_chk+0xc4>)
 8005aa2:	4818      	ldr	r0, [pc, #96]	@ (8005b04 <PAUSE_chk+0xb4>)
 8005aa4:	f005 f99d 	bl	800ade2 <strcpy>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8005aa8:	4816      	ldr	r0, [pc, #88]	@ (8005b04 <PAUSE_chk+0xb4>)
 8005aaa:	f000 ff67 	bl	800697c <USART1_Tx_HMIdata>
			pause_show = !pause_show;
 8005aae:	2401      	movs	r4, #1
 8005ab0:	e7d2      	b.n	8005a58 <PAUSE_chk+0x8>
			else if(over_pressure == 1){
 8005ab2:	4b19      	ldr	r3, [pc, #100]	@ (8005b18 <PAUSE_chk+0xc8>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b01      	cmp	r3, #1
				sprintf(Tx_Buffer,"Main.t0.txt=\"注射压\r\n力超压\"\xff\xff\xff");
 8005ab8:	bf0c      	ite	eq
 8005aba:	4918      	ldreq	r1, [pc, #96]	@ (8005b1c <PAUSE_chk+0xcc>)
				sprintf(Tx_Buffer,"Main.t0.txt=\"已暂停\"\xff\xff\xff");
 8005abc:	4918      	ldrne	r1, [pc, #96]	@ (8005b20 <PAUSE_chk+0xd0>)
 8005abe:	e7f0      	b.n	8005aa2 <PAUSE_chk+0x52>
		else if((now_time_inject % 5 == 0) && pause_show){
 8005ac0:	6833      	ldr	r3, [r6, #0]
 8005ac2:	4353      	muls	r3, r2
 8005ac4:	f1b3 3f33 	cmp.w	r3, #858993459	@ 0x33333333
 8005ac8:	d809      	bhi.n	8005ade <PAUSE_chk+0x8e>
 8005aca:	b144      	cbz	r4, 8005ade <PAUSE_chk+0x8e>
			sprintf(Tx_Buffer,"Main.t0.txt=\"\"\xff\xff\xff");
 8005acc:	490c      	ldr	r1, [pc, #48]	@ (8005b00 <PAUSE_chk+0xb0>)
 8005ace:	480d      	ldr	r0, [pc, #52]	@ (8005b04 <PAUSE_chk+0xb4>)
 8005ad0:	f005 f987 	bl	800ade2 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8005ad4:	480b      	ldr	r0, [pc, #44]	@ (8005b04 <PAUSE_chk+0xb4>)
 8005ad6:	f000 ff51 	bl	800697c <USART1_Tx_HMIdata>
			pause_show = !pause_show;
 8005ada:	2400      	movs	r4, #0
 8005adc:	e7bc      	b.n	8005a58 <PAUSE_chk+0x8>
		else if(clear_counter){
 8005ade:	4b11      	ldr	r3, [pc, #68]	@ (8005b24 <PAUSE_chk+0xd4>)
 8005ae0:	781a      	ldrb	r2, [r3, #0]
 8005ae2:	2a00      	cmp	r2, #0
 8005ae4:	d0b8      	beq.n	8005a58 <PAUSE_chk+0x8>
			clear_counter = 0;
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	701a      	strb	r2, [r3, #0]
			Refresh_counter();
 8005aea:	f7fd fb11 	bl	8003110 <Refresh_counter>
 8005aee:	e7b3      	b.n	8005a58 <PAUSE_chk+0x8>
 8005af0:	20000934 	.word	0x20000934
 8005af4:	20000a58 	.word	0x20000a58
 8005af8:	2000092c 	.word	0x2000092c
 8005afc:	20000932 	.word	0x20000932
 8005b00:	0800daf1 	.word	0x0800daf1
 8005b04:	20000b7e 	.word	0x20000b7e
 8005b08:	40011400 	.word	0x40011400
 8005b0c:	cccccccd 	.word	0xcccccccd
 8005b10:	20000a4d 	.word	0x20000a4d
 8005b14:	0800dc3e 	.word	0x0800dc3e
 8005b18:	20000a4e 	.word	0x20000a4e
 8005b1c:	0800dc64 	.word	0x0800dc64
 8005b20:	0800dc8a 	.word	0x0800dc8a
 8005b24:	2000091b 	.word	0x2000091b

08005b28 <motor_Forward_Cycle>:

void motor_Forward_Cycle(){
 8005b28:	b508      	push	{r3, lr}
	Motor_Forward();
 8005b2a:	f7ff ff3d 	bl	80059a8 <Motor_Forward>
	last_time_inject = now_time_inject;
 8005b2e:	4906      	ldr	r1, [pc, #24]	@ (8005b48 <motor_Forward_Cycle+0x20>)
 8005b30:	4a06      	ldr	r2, [pc, #24]	@ (8005b4c <motor_Forward_Cycle+0x24>)
 8005b32:	680b      	ldr	r3, [r1, #0]
 8005b34:	6013      	str	r3, [r2, #0]
//				Motor_Brake();
//				break;
//		}
//	}
	//调试用
	while(now_time_inject - last_time_inject <= 15);//推杆泵前推1.5s
 8005b36:	680b      	ldr	r3, [r1, #0]
 8005b38:	6810      	ldr	r0, [r2, #0]
 8005b3a:	1a1b      	subs	r3, r3, r0
 8005b3c:	2b0f      	cmp	r3, #15
 8005b3e:	d9fa      	bls.n	8005b36 <motor_Forward_Cycle+0xe>
//	HAL_Delay(1500);
				Motor_Brake();
}
 8005b40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				Motor_Brake();
 8005b44:	f7ff bf60 	b.w	8005a08 <Motor_Brake>
 8005b48:	20000a58 	.word	0x20000a58
 8005b4c:	20000a54 	.word	0x20000a54

08005b50 <motor_Reverse_Cycle>:

void motor_Reverse_Cycle(){
 8005b50:	b508      	push	{r3, lr}
	Motor_Reverse();
 8005b52:	f7ff ff41 	bl	80059d8 <Motor_Reverse>
	last_time_inject = now_time_inject;
 8005b56:	4906      	ldr	r1, [pc, #24]	@ (8005b70 <motor_Reverse_Cycle+0x20>)
 8005b58:	4a06      	ldr	r2, [pc, #24]	@ (8005b74 <motor_Reverse_Cycle+0x24>)
 8005b5a:	680b      	ldr	r3, [r1, #0]
 8005b5c:	6013      	str	r3, [r2, #0]
	while(now_time_inject - last_time_inject <= 15);//推杆泵收缩1.5s
 8005b5e:	680b      	ldr	r3, [r1, #0]
 8005b60:	6810      	ldr	r0, [r2, #0]
 8005b62:	1a1b      	subs	r3, r3, r0
 8005b64:	2b0f      	cmp	r3, #15
 8005b66:	d9fa      	bls.n	8005b5e <motor_Reverse_Cycle+0xe>
//	HAL_Delay(1500);
	Motor_Brake();
}
 8005b68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Motor_Brake();
 8005b6c:	f7ff bf4c 	b.w	8005a08 <Motor_Brake>
 8005b70:	20000a58 	.word	0x20000a58
 8005b74:	20000a54 	.word	0x20000a54

08005b78 <Ex_GAS_Cycle>:
void Ex_GAS_Cycle(){
 8005b78:	b538      	push	{r3, r4, r5, lr}
	motor_Forward_Cycle();
 8005b7a:	f7ff ffd5 	bl	8005b28 <motor_Forward_Cycle>
	while(EX_GAS_start){
 8005b7e:	4c0a      	ldr	r4, [pc, #40]	@ (8005ba8 <Ex_GAS_Cycle+0x30>)
		Motor_2_EN_SET;
 8005b80:	4d0a      	ldr	r5, [pc, #40]	@ (8005bac <Ex_GAS_Cycle+0x34>)
	while(EX_GAS_start){
 8005b82:	7822      	ldrb	r2, [r4, #0]
 8005b84:	b942      	cbnz	r2, 8005b98 <Ex_GAS_Cycle+0x20>
	Motor_2_EN_RESET;
 8005b86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b8a:	4808      	ldr	r0, [pc, #32]	@ (8005bac <Ex_GAS_Cycle+0x34>)
 8005b8c:	f001 fdfe 	bl	800778c <HAL_GPIO_WritePin>
}
 8005b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	motor_Reverse_Cycle();
 8005b94:	f7ff bfdc 	b.w	8005b50 <motor_Reverse_Cycle>
		Motor_2_EN_SET;
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f001 fdf4 	bl	800778c <HAL_GPIO_WritePin>
 8005ba4:	e7ed      	b.n	8005b82 <Ex_GAS_Cycle+0xa>
 8005ba6:	bf00      	nop
 8005ba8:	20000a3c 	.word	0x20000a3c
 8005bac:	40010c00 	.word	0x40010c00

08005bb0 <Inject_times>:

void Inject_times(uint16_t Dosage_load){
	totalCycles = Dosage_load / 2;
 8005bb0:	4b04      	ldr	r3, [pc, #16]	@ (8005bc4 <Inject_times+0x14>)
 8005bb2:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8005bb6:	7018      	strb	r0, [r3, #0]
	Dosage_load = 0;
	RemainingTimes = totalCycles;
 8005bb8:	4b03      	ldr	r3, [pc, #12]	@ (8005bc8 <Inject_times+0x18>)
 8005bba:	7018      	strb	r0, [r3, #0]
	InjectTimes = totalCycles;
 8005bbc:	4b03      	ldr	r3, [pc, #12]	@ (8005bcc <Inject_times+0x1c>)
 8005bbe:	7018      	strb	r0, [r3, #0]
}
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	20000933 	.word	0x20000933
 8005bc8:	20000a44 	.word	0x20000a44
 8005bcc:	20000935 	.word	0x20000935

08005bd0 <Pump_work>:

void Pump_work(){
	Motor_2_EN_SET;
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
void Pump_work(){
 8005bd6:	b508      	push	{r3, lr}
	Motor_2_EN_SET;
 8005bd8:	4809      	ldr	r0, [pc, #36]	@ (8005c00 <Pump_work+0x30>)
 8005bda:	f001 fdd7 	bl	800778c <HAL_GPIO_WritePin>
	last_time_inject = now_time_inject;
 8005bde:	4909      	ldr	r1, [pc, #36]	@ (8005c04 <Pump_work+0x34>)
 8005be0:	4a09      	ldr	r2, [pc, #36]	@ (8005c08 <Pump_work+0x38>)
 8005be2:	680b      	ldr	r3, [r1, #0]
 8005be4:	6013      	str	r3, [r2, #0]
	while(now_time_inject - last_time_inject <= 6);
 8005be6:	680b      	ldr	r3, [r1, #0]
 8005be8:	6810      	ldr	r0, [r2, #0]
 8005bea:	1a1b      	subs	r3, r3, r0
 8005bec:	2b06      	cmp	r3, #6
 8005bee:	d9fa      	bls.n	8005be6 <Pump_work+0x16>
//	HAL_Delay(800);
	Motor_2_EN_RESET;
}
 8005bf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Motor_2_EN_RESET;
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005bfa:	4801      	ldr	r0, [pc, #4]	@ (8005c00 <Pump_work+0x30>)
 8005bfc:	f001 bdc6 	b.w	800778c <HAL_GPIO_WritePin>
 8005c00:	40010c00 	.word	0x40010c00
 8005c04:	20000a58 	.word	0x20000a58
 8005c08:	20000a54 	.word	0x20000a54

08005c0c <Inject_working>:

void Inject_working(void){
 8005c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t i =0;
	Invalid_action_times = 0;
 8005c10:	2400      	movs	r4, #0
 8005c12:	4d3f      	ldr	r5, [pc, #252]	@ (8005d10 <Inject_working+0x104>)
	GasPrs_LOW_time = 0;
 8005c14:	4b3f      	ldr	r3, [pc, #252]	@ (8005d14 <Inject_working+0x108>)
	for(i = 0;i < InjectTimes;i++){
 8005c16:	f8df 8100 	ldr.w	r8, [pc, #256]	@ 8005d18 <Inject_working+0x10c>
		motor_Forward_Cycle();				//推杆泵前推1.5s

		RemainingTimes--;
 8005c1a:	4e40      	ldr	r6, [pc, #256]	@ (8005d1c <Inject_working+0x110>)

		total_inject_Times++;
 8005c1c:	4f40      	ldr	r7, [pc, #256]	@ (8005d20 <Inject_working+0x114>)
void Inject_working(void){
 8005c1e:	b09a      	sub	sp, #104	@ 0x68
	Invalid_action_times = 0;
 8005c20:	702c      	strb	r4, [r5, #0]
	GasPrs_LOW_time = 0;
 8005c22:	801c      	strh	r4, [r3, #0]
	for(i = 0;i < InjectTimes;i++){
 8005c24:	f898 2000 	ldrb.w	r2, [r8]
 8005c28:	b2e3      	uxtb	r3, r4
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d849      	bhi.n	8005cc2 <Inject_working+0xb6>
		Pump_work();								 //泵工作0.8s

		PAUSE_chk();
	}

	if(clear_counter){
 8005c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8005d24 <Inject_working+0x118>)
 8005c30:	781a      	ldrb	r2, [r3, #0]
 8005c32:	b10a      	cbz	r2, 8005c38 <Inject_working+0x2c>
			clear_counter = 0;
 8005c34:	2200      	movs	r2, #0
 8005c36:	701a      	strb	r2, [r3, #0]
		}

	if(cancel_break){
 8005c38:	4b3b      	ldr	r3, [pc, #236]	@ (8005d28 <Inject_working+0x11c>)
 8005c3a:	781a      	ldrb	r2, [r3, #0]
 8005c3c:	2a00      	cmp	r2, #0
 8005c3e:	d061      	beq.n	8005d04 <Inject_working+0xf8>
			cancel_break = 0;
 8005c40:	2200      	movs	r2, #0
 8005c42:	701a      	strb	r2, [r3, #0]
		}
	else{
			total_Times++;
		}

	sprintf(Tx_Buffer,"Main.t0.txt=\"注药结束\"\xff\xff\xff");
 8005c44:	4939      	ldr	r1, [pc, #228]	@ (8005d2c <Inject_working+0x120>)
 8005c46:	483a      	ldr	r0, [pc, #232]	@ (8005d30 <Inject_working+0x124>)
 8005c48:	f005 f8cb 	bl	800ade2 <strcpy>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8005c4c:	4838      	ldr	r0, [pc, #224]	@ (8005d30 <Inject_working+0x124>)
 8005c4e:	f000 fe95 	bl	800697c <USART1_Tx_HMIdata>
	sprintf(Tx_Buffer,"Main.t8.txt=\"\"\xff\xff\xff");
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);

	Refresh_counter();

	SDCard_Write_log(GPS_GGA_Data,GPS_RMC_Data);
 8005c52:	4d38      	ldr	r5, [pc, #224]	@ (8005d34 <Inject_working+0x128>)
	sprintf(Tx_Buffer,"Main.t8.txt=\"\"\xff\xff\xff");
 8005c54:	4938      	ldr	r1, [pc, #224]	@ (8005d38 <Inject_working+0x12c>)
 8005c56:	4836      	ldr	r0, [pc, #216]	@ (8005d30 <Inject_working+0x124>)
 8005c58:	f005 f8c3 	bl	800ade2 <strcpy>
	SDCard_Write_log(GPS_GGA_Data,GPS_RMC_Data);
 8005c5c:	ac0b      	add	r4, sp, #44	@ 0x2c
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8005c5e:	4834      	ldr	r0, [pc, #208]	@ (8005d30 <Inject_working+0x124>)
 8005c60:	f000 fe8c 	bl	800697c <USART1_Tx_HMIdata>
	Refresh_counter();
 8005c64:	f7fd fa54 	bl	8003110 <Refresh_counter>
	SDCard_Write_log(GPS_GGA_Data,GPS_RMC_Data);
 8005c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005c78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005c7c:	466c      	mov	r4, sp
 8005c7e:	4e2f      	ldr	r6, [pc, #188]	@ (8005d3c <Inject_working+0x130>)
 8005c80:	f106 0510 	add.w	r5, r6, #16
 8005c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005c90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	refresh_dir = 1;
 8005c94:	2401      	movs	r4, #1
	SDCard_Write_log(GPS_GGA_Data,GPS_RMC_Data);
 8005c96:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005c9a:	f7fc fa29 	bl	80020f0 <SDCard_Write_log>
	refresh_dir = 1;
 8005c9e:	4b28      	ldr	r3, [pc, #160]	@ (8005d40 <Inject_working+0x134>)

	Buzzer(1000);
 8005ca0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
	refresh_dir = 1;
 8005ca4:	701c      	strb	r4, [r3, #0]
	Buzzer(1000);
 8005ca6:	f7fd f909 	bl	8002ebc <Buzzer>

	Injecting = 0;
 8005caa:	2200      	movs	r2, #0
	first_run = 1;
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8005cac:	2102      	movs	r1, #2
	Injecting = 0;
 8005cae:	4b25      	ldr	r3, [pc, #148]	@ (8005d44 <Inject_working+0x138>)
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8005cb0:	4825      	ldr	r0, [pc, #148]	@ (8005d48 <Inject_working+0x13c>)
	Injecting = 0;
 8005cb2:	701a      	strb	r2, [r3, #0]
	first_run = 1;
 8005cb4:	4b25      	ldr	r3, [pc, #148]	@ (8005d4c <Inject_working+0x140>)
 8005cb6:	701c      	strb	r4, [r3, #0]
}
 8005cb8:	b01a      	add	sp, #104	@ 0x68
 8005cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8005cbe:	f001 bd65 	b.w	800778c <HAL_GPIO_WritePin>
		motor_Forward_Cycle();				//推杆泵前推1.5s
 8005cc2:	f7ff ff31 	bl	8005b28 <motor_Forward_Cycle>
		RemainingTimes--;
 8005cc6:	7833      	ldrb	r3, [r6, #0]
		total_inject_Dosage += 2;
 8005cc8:	4a21      	ldr	r2, [pc, #132]	@ (8005d50 <Inject_working+0x144>)
		RemainingTimes--;
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	7033      	strb	r3, [r6, #0]
		total_inject_Times++;
 8005cce:	883b      	ldrh	r3, [r7, #0]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	803b      	strh	r3, [r7, #0]
		total_inject_Dosage += 2;
 8005cd4:	8813      	ldrh	r3, [r2, #0]
 8005cd6:	3302      	adds	r3, #2
 8005cd8:	8013      	strh	r3, [r2, #0]
		Refresh_Dosage();
 8005cda:	f7fd fa5b 	bl	8003194 <Refresh_Dosage>
		if(GasPrs_LOW){
 8005cde:	4b1d      	ldr	r3, [pc, #116]	@ (8005d54 <Inject_working+0x148>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	b113      	cbz	r3, 8005cea <Inject_working+0xde>
			Invalid_action_times++;
 8005ce4:	782b      	ldrb	r3, [r5, #0]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	702b      	strb	r3, [r5, #0]
		motor_Reverse_Cycle();       //推杆泵收缩1.5s
 8005cec:	f7ff ff30 	bl	8005b50 <motor_Reverse_Cycle>
		HAL_Delay(1000);//停顿1s			 //停顿1s
 8005cf0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005cf4:	f000 ff82 	bl	8006bfc <HAL_Delay>
		Pump_work();								 //泵工作0.8s
 8005cf8:	3401      	adds	r4, #1
 8005cfa:	f7ff ff69 	bl	8005bd0 <Pump_work>
		PAUSE_chk();
 8005cfe:	f7ff fea7 	bl	8005a50 <PAUSE_chk>
	for(i = 0;i < InjectTimes;i++){
 8005d02:	e78f      	b.n	8005c24 <Inject_working+0x18>
			total_Times++;
 8005d04:	4a14      	ldr	r2, [pc, #80]	@ (8005d58 <Inject_working+0x14c>)
 8005d06:	8813      	ldrh	r3, [r2, #0]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	8013      	strh	r3, [r2, #0]
 8005d0c:	e79a      	b.n	8005c44 <Inject_working+0x38>
 8005d0e:	bf00      	nop
 8005d10:	20000a4c 	.word	0x20000a4c
 8005d14:	20000a52 	.word	0x20000a52
 8005d18:	20000935 	.word	0x20000935
 8005d1c:	20000a44 	.word	0x20000a44
 8005d20:	20000a42 	.word	0x20000a42
 8005d24:	2000091b 	.word	0x2000091b
 8005d28:	2000091a 	.word	0x2000091a
 8005d2c:	0800dca5 	.word	0x0800dca5
 8005d30:	20000b7e 	.word	0x20000b7e
 8005d34:	200001f4 	.word	0x200001f4
 8005d38:	0800d78d 	.word	0x0800d78d
 8005d3c:	20000230 	.word	0x20000230
 8005d40:	20000386 	.word	0x20000386
 8005d44:	20000934 	.word	0x20000934
 8005d48:	40011400 	.word	0x40011400
 8005d4c:	20000003 	.word	0x20000003
 8005d50:	20000a40 	.word	0x20000a40
 8005d54:	20000909 	.word	0x20000909
 8005d58:	20000a3e 	.word	0x20000a3e

08005d5c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005d5c:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005d5e:	f44f 7382 	mov.w	r3, #260	@ 0x104
  hspi1.Instance = SPI1;
 8005d62:	480d      	ldr	r0, [pc, #52]	@ (8005d98 <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005d64:	4a0d      	ldr	r2, [pc, #52]	@ (8005d9c <MX_SPI1_Init+0x40>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005d66:	f44f 7100 	mov.w	r1, #512	@ 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005d6a:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005d6e:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005d70:	2238      	movs	r2, #56	@ 0x38
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005d72:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005d76:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005d7a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d7e:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005d80:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005d82:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8005d86:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005d88:	f002 f8e8 	bl	8007f5c <HAL_SPI_Init>
 8005d8c:	b118      	cbz	r0, 8005d96 <MX_SPI1_Init+0x3a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005d8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005d92:	f7ff be07 	b.w	80059a4 <Error_Handler>
}
 8005d96:	bd08      	pop	{r3, pc}
 8005d98:	20000938 	.word	0x20000938
 8005d9c:	40013000 	.word	0x40013000

08005da0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005da0:	b510      	push	{r4, lr}
 8005da2:	4604      	mov	r4, r0
 8005da4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005da6:	2210      	movs	r2, #16
 8005da8:	2100      	movs	r1, #0
 8005daa:	a802      	add	r0, sp, #8
 8005dac:	f004 ff1d 	bl	800abea <memset>
  if(spiHandle->Instance==SPI1)
 8005db0:	6822      	ldr	r2, [r4, #0]
 8005db2:	4b16      	ldr	r3, [pc, #88]	@ (8005e0c <HAL_SPI_MspInit+0x6c>)
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d126      	bne.n	8005e06 <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005db8:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8005dbc:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dbe:	4814      	ldr	r0, [pc, #80]	@ (8005e10 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005dc0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005dc4:	619a      	str	r2, [r3, #24]
 8005dc6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dc8:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005dca:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005dce:	9200      	str	r2, [sp, #0]
 8005dd0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dd2:	699a      	ldr	r2, [r3, #24]
 8005dd4:	f042 0204 	orr.w	r2, r2, #4
 8005dd8:	619a      	str	r2, [r3, #24]
 8005dda:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ddc:	22a0      	movs	r2, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dde:	f003 0304 	and.w	r3, r3, #4
 8005de2:	9301      	str	r3, [sp, #4]
 8005de4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005de6:	2302      	movs	r3, #2
 8005de8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005dec:	2303      	movs	r3, #3
 8005dee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005df0:	f001 fbee 	bl	80075d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005df4:	2140      	movs	r1, #64	@ 0x40
 8005df6:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005df8:	4805      	ldr	r0, [pc, #20]	@ (8005e10 <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005dfa:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dfe:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e00:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e02:	f001 fbe5 	bl	80075d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005e06:	b006      	add	sp, #24
 8005e08:	bd10      	pop	{r4, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40013000 	.word	0x40013000
 8005e10:	40010800 	.word	0x40010800

08005e14 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005e14:	4b0e      	ldr	r3, [pc, #56]	@ (8005e50 <HAL_MspInit+0x3c>)
{
 8005e16:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005e18:	699a      	ldr	r2, [r3, #24]
 8005e1a:	f042 0201 	orr.w	r2, r2, #1
 8005e1e:	619a      	str	r2, [r3, #24]
 8005e20:	699a      	ldr	r2, [r3, #24]
 8005e22:	f002 0201 	and.w	r2, r2, #1
 8005e26:	9200      	str	r2, [sp, #0]
 8005e28:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e2a:	69da      	ldr	r2, [r3, #28]
 8005e2c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005e30:	61da      	str	r2, [r3, #28]
 8005e32:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005e34:	4a07      	ldr	r2, [pc, #28]	@ (8005e54 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e3a:	9301      	str	r3, [sp, #4]
 8005e3c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005e3e:	6853      	ldr	r3, [r2, #4]
 8005e40:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005e44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005e48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e4a:	b002      	add	sp, #8
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	40021000 	.word	0x40021000
 8005e54:	40010000 	.word	0x40010000

08005e58 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005e58:	e7fe      	b.n	8005e58 <NMI_Handler>

08005e5a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e5a:	e7fe      	b.n	8005e5a <HardFault_Handler>

08005e5c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e5c:	e7fe      	b.n	8005e5c <MemManage_Handler>

08005e5e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e5e:	e7fe      	b.n	8005e5e <BusFault_Handler>

08005e60 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e60:	e7fe      	b.n	8005e60 <UsageFault_Handler>

08005e62 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005e62:	4770      	bx	lr

08005e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8005e64:	4770      	bx	lr

08005e66 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8005e66:	4770      	bx	lr

08005e68 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e68:	f000 beb6 	b.w	8006bd8 <HAL_IncTick>

08005e6c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005e6c:	4801      	ldr	r0, [pc, #4]	@ (8005e74 <DMA1_Channel1_IRQHandler+0x8>)
 8005e6e:	f001 bb1b 	b.w	80074a8 <HAL_DMA_IRQHandler>
 8005e72:	bf00      	nop
 8005e74:	20000830 	.word	0x20000830

08005e78 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005e78:	4801      	ldr	r0, [pc, #4]	@ (8005e80 <DMA1_Channel3_IRQHandler+0x8>)
 8005e7a:	f001 bb15 	b.w	80074a8 <HAL_DMA_IRQHandler>
 8005e7e:	bf00      	nop
 8005e80:	20000a60 	.word	0x20000a60

08005e84 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005e84:	4801      	ldr	r0, [pc, #4]	@ (8005e8c <ADC1_2_IRQHandler+0x8>)
 8005e86:	f000 bef9 	b.w	8006c7c <HAL_ADC_IRQHandler>
 8005e8a:	bf00      	nop
 8005e8c:	20000874 	.word	0x20000874

08005e90 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005e90:	4801      	ldr	r0, [pc, #4]	@ (8005e98 <TIM3_IRQHandler+0x8>)
 8005e92:	f002 b9e5 	b.w	8008260 <HAL_TIM_IRQHandler>
 8005e96:	bf00      	nop
 8005e98:	200009dc 	.word	0x200009dc

08005e9c <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005e9c:	4801      	ldr	r0, [pc, #4]	@ (8005ea4 <TIM4_IRQHandler+0x8>)
 8005e9e:	f002 b9df 	b.w	8008260 <HAL_TIM_IRQHandler>
 8005ea2:	bf00      	nop
 8005ea4:	20000994 	.word	0x20000994

08005ea8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005ea8:	4801      	ldr	r0, [pc, #4]	@ (8005eb0 <USART2_IRQHandler+0x8>)
 8005eaa:	f002 bdcb 	b.w	8008a44 <HAL_UART_IRQHandler>
 8005eae:	bf00      	nop
 8005eb0:	20000aec 	.word	0x20000aec

08005eb4 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005eb4:	4801      	ldr	r0, [pc, #4]	@ (8005ebc <USART3_IRQHandler+0x8>)
 8005eb6:	f002 bdc5 	b.w	8008a44 <HAL_UART_IRQHandler>
 8005eba:	bf00      	nop
 8005ebc:	20000aa4 	.word	0x20000aa4

08005ec0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_EXTI11_Pin);
 8005ec0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005ec4:	f001 bc70 	b.w	80077a8 <HAL_GPIO_EXTI_IRQHandler>

08005ec8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8005ec8:	2001      	movs	r0, #1
 8005eca:	4770      	bx	lr

08005ecc <_kill>:

int _kill(int pid, int sig)
{
 8005ecc:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005ece:	f004 ff5b 	bl	800ad88 <__errno>
 8005ed2:	2316      	movs	r3, #22
 8005ed4:	6003      	str	r3, [r0, #0]
  return -1;
}
 8005ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eda:	bd08      	pop	{r3, pc}

08005edc <_exit>:

void _exit (int status)
{
 8005edc:	b508      	push	{r3, lr}
  errno = EINVAL;
 8005ede:	f004 ff53 	bl	800ad88 <__errno>
 8005ee2:	2316      	movs	r3, #22
 8005ee4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8005ee6:	e7fe      	b.n	8005ee6 <_exit+0xa>

08005ee8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005ee8:	b570      	push	{r4, r5, r6, lr}
 8005eea:	460d      	mov	r5, r1
 8005eec:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005eee:	460e      	mov	r6, r1
 8005ef0:	1b73      	subs	r3, r6, r5
 8005ef2:	429c      	cmp	r4, r3
 8005ef4:	dc01      	bgt.n	8005efa <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8005efa:	f3af 8000 	nop.w
 8005efe:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f02:	e7f5      	b.n	8005ef0 <_read+0x8>

08005f04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005f04:	b570      	push	{r4, r5, r6, lr}
 8005f06:	460d      	mov	r5, r1
 8005f08:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f0a:	460e      	mov	r6, r1
 8005f0c:	1b73      	subs	r3, r6, r5
 8005f0e:	429c      	cmp	r4, r3
 8005f10:	dc01      	bgt.n	8005f16 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8005f12:	4620      	mov	r0, r4
 8005f14:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8005f16:	f816 0b01 	ldrb.w	r0, [r6], #1
 8005f1a:	f7fb f9ef 	bl	80012fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f1e:	e7f5      	b.n	8005f0c <_write+0x8>

08005f20 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8005f20:	f04f 30ff 	mov.w	r0, #4294967295
 8005f24:	4770      	bx	lr

08005f26 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8005f26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8005f2a:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8005f2c:	604b      	str	r3, [r1, #4]
}
 8005f2e:	4770      	bx	lr

08005f30 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8005f30:	2001      	movs	r0, #1
 8005f32:	4770      	bx	lr

08005f34 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8005f34:	2000      	movs	r0, #0
 8005f36:	4770      	bx	lr

08005f38 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f38:	4a0b      	ldr	r2, [pc, #44]	@ (8005f68 <_sbrk+0x30>)
{
 8005f3a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8005f3c:	6811      	ldr	r1, [r2, #0]
{
 8005f3e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8005f40:	b909      	cbnz	r1, 8005f46 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8005f42:	490a      	ldr	r1, [pc, #40]	@ (8005f6c <_sbrk+0x34>)
 8005f44:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f46:	6810      	ldr	r0, [r2, #0]
 8005f48:	4909      	ldr	r1, [pc, #36]	@ (8005f70 <_sbrk+0x38>)
 8005f4a:	4c0a      	ldr	r4, [pc, #40]	@ (8005f74 <_sbrk+0x3c>)
 8005f4c:	4403      	add	r3, r0
 8005f4e:	1b09      	subs	r1, r1, r4
 8005f50:	428b      	cmp	r3, r1
 8005f52:	d906      	bls.n	8005f62 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8005f54:	f004 ff18 	bl	800ad88 <__errno>
 8005f58:	230c      	movs	r3, #12
 8005f5a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8005f5c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8005f60:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8005f62:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8005f64:	e7fc      	b.n	8005f60 <_sbrk+0x28>
 8005f66:	bf00      	nop
 8005f68:	20000990 	.word	0x20000990
 8005f6c:	20000d00 	.word	0x20000d00
 8005f70:	20005000 	.word	0x20005000
 8005f74:	00000400 	.word	0x00000400

08005f78 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f78:	4770      	bx	lr
	...

08005f7c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005f7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f7e:	2210      	movs	r2, #16
 8005f80:	2100      	movs	r1, #0
 8005f82:	a802      	add	r0, sp, #8
 8005f84:	f004 fe31 	bl	800abea <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 6400-1;
 8005f88:	f641 02ff 	movw	r2, #6399	@ 0x18ff
  htim3.Instance = TIM3;
 8005f8c:	4814      	ldr	r0, [pc, #80]	@ (8005fe0 <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 6400-1;
 8005f8e:	4915      	ldr	r1, [pc, #84]	@ (8005fe4 <MX_TIM3_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f90:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 6400-1;
 8005f92:	e9c0 1200 	strd	r1, r2, [r0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1000-1;
 8005f96:	f240 32e7 	movw	r2, #999	@ 0x3e7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f9a:	e9cd 3300 	strd	r3, r3, [sp]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f9e:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fa2:	6083      	str	r3, [r0, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005fa4:	2380      	movs	r3, #128	@ 0x80
 8005fa6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005fa8:	f002 fa2e 	bl	8008408 <HAL_TIM_Base_Init>
 8005fac:	b108      	cbz	r0, 8005fb2 <MX_TIM3_Init+0x36>
  {
    Error_Handler();
 8005fae:	f7ff fcf9 	bl	80059a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005fb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005fb6:	480a      	ldr	r0, [pc, #40]	@ (8005fe0 <MX_TIM3_Init+0x64>)
 8005fb8:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005fba:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005fbc:	f002 fa5a 	bl	8008474 <HAL_TIM_ConfigClockSource>
 8005fc0:	b108      	cbz	r0, 8005fc6 <MX_TIM3_Init+0x4a>
  {
    Error_Handler();
 8005fc2:	f7ff fcef 	bl	80059a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fc6:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005fc8:	4669      	mov	r1, sp
 8005fca:	4805      	ldr	r0, [pc, #20]	@ (8005fe0 <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fcc:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005fd0:	f002 faea 	bl	80085a8 <HAL_TIMEx_MasterConfigSynchronization>
 8005fd4:	b108      	cbz	r0, 8005fda <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
 8005fd6:	f7ff fce5 	bl	80059a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005fda:	b007      	add	sp, #28
 8005fdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fe0:	200009dc 	.word	0x200009dc
 8005fe4:	40000400 	.word	0x40000400

08005fe8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005fe8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005fea:	2210      	movs	r2, #16
 8005fec:	2100      	movs	r1, #0
 8005fee:	a802      	add	r0, sp, #8
 8005ff0:	f004 fdfb 	bl	800abea <memset>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 64-1;
 8005ff4:	223f      	movs	r2, #63	@ 0x3f
  htim4.Instance = TIM4;
 8005ff6:	4815      	ldr	r0, [pc, #84]	@ (800604c <MX_TIM4_Init+0x64>)
  htim4.Init.Prescaler = 64-1;
 8005ff8:	4915      	ldr	r1, [pc, #84]	@ (8006050 <MX_TIM4_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ffa:	2300      	movs	r3, #0
  htim4.Init.Prescaler = 64-1;
 8005ffc:	e9c0 1200 	strd	r1, r2, [r0]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 1000-1;
 8006000:	f240 32e7 	movw	r2, #999	@ 0x3e7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006004:	e9cd 3300 	strd	r3, r3, [sp]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006008:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800600c:	6083      	str	r3, [r0, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800600e:	2380      	movs	r3, #128	@ 0x80
 8006010:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006012:	f002 f9f9 	bl	8008408 <HAL_TIM_Base_Init>
 8006016:	b108      	cbz	r0, 800601c <MX_TIM4_Init+0x34>
  {
    Error_Handler();
 8006018:	f7ff fcc4 	bl	80059a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800601c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8006020:	480a      	ldr	r0, [pc, #40]	@ (800604c <MX_TIM4_Init+0x64>)
 8006022:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006024:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8006026:	f002 fa25 	bl	8008474 <HAL_TIM_ConfigClockSource>
 800602a:	b108      	cbz	r0, 8006030 <MX_TIM4_Init+0x48>
  {
    Error_Handler();
 800602c:	f7ff fcba 	bl	80059a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006030:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006032:	4669      	mov	r1, sp
 8006034:	4805      	ldr	r0, [pc, #20]	@ (800604c <MX_TIM4_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006036:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800603a:	f002 fab5 	bl	80085a8 <HAL_TIMEx_MasterConfigSynchronization>
 800603e:	b108      	cbz	r0, 8006044 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8006040:	f7ff fcb0 	bl	80059a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8006044:	b007      	add	sp, #28
 8006046:	f85d fb04 	ldr.w	pc, [sp], #4
 800604a:	bf00      	nop
 800604c:	20000994 	.word	0x20000994
 8006050:	40000800 	.word	0x40000800

08006054 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006054:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM3)
 8006056:	6803      	ldr	r3, [r0, #0]
 8006058:	4a17      	ldr	r2, [pc, #92]	@ (80060b8 <HAL_TIM_Base_MspInit+0x64>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d114      	bne.n	8006088 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800605e:	4b17      	ldr	r3, [pc, #92]	@ (80060bc <HAL_TIM_Base_MspInit+0x68>)

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 13, 0);
 8006060:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006062:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 13, 0);
 8006064:	210d      	movs	r1, #13
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006066:	f042 0202 	orr.w	r2, r2, #2
 800606a:	61da      	str	r2, [r3, #28]
 800606c:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 13, 0);
 800606e:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 13, 0);
 8006078:	f001 f8f0 	bl	800725c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800607c:	201d      	movs	r0, #29
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800607e:	b003      	add	sp, #12
 8006080:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006084:	f001 b91a 	b.w	80072bc <HAL_NVIC_EnableIRQ>
  else if(tim_baseHandle->Instance==TIM4)
 8006088:	4a0d      	ldr	r2, [pc, #52]	@ (80060c0 <HAL_TIM_Base_MspInit+0x6c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d110      	bne.n	80060b0 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800608e:	4b0b      	ldr	r3, [pc, #44]	@ (80060bc <HAL_TIM_Base_MspInit+0x68>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 13, 0);
 8006090:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006092:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 13, 0);
 8006094:	210d      	movs	r1, #13
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006096:	f042 0204 	orr.w	r2, r2, #4
 800609a:	61da      	str	r2, [r3, #28]
 800609c:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 13, 0);
 800609e:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	9301      	str	r3, [sp, #4]
 80060a6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 13, 0);
 80060a8:	f001 f8d8 	bl	800725c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80060ac:	201e      	movs	r0, #30
 80060ae:	e7e6      	b.n	800607e <HAL_TIM_Base_MspInit+0x2a>
}
 80060b0:	b003      	add	sp, #12
 80060b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80060b6:	bf00      	nop
 80060b8:	40000400 	.word	0x40000400
 80060bc:	40021000 	.word	0x40021000
 80060c0:	40000800 	.word	0x40000800

080060c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
//Timer3 重装载中断间�???100ms
//Timer4 重装载中断间�???1ms
//Timer3、Timer4 共用同一回调函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80060c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(htim == &htim3){
 80060c6:	4b56      	ldr	r3, [pc, #344]	@ (8006220 <HAL_TIM_PeriodElapsedCallback+0x15c>)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80060c8:	b09b      	sub	sp, #108	@ 0x6c
	if(htim == &htim3){
 80060ca:	4298      	cmp	r0, r3
 80060cc:	f040 818d 	bne.w	80063ea <HAL_TIM_PeriodElapsedCallback+0x326>
		now_time_inject++;

		if((now_time_inject % 10 == 0) && ADC_CONV_cplt){
 80060d0:	220a      	movs	r2, #10
		now_time_inject++;
 80060d2:	4e54      	ldr	r6, [pc, #336]	@ (8006224 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80060d4:	6833      	ldr	r3, [r6, #0]
 80060d6:	3301      	adds	r3, #1
 80060d8:	6033      	str	r3, [r6, #0]
		if((now_time_inject % 10 == 0) && ADC_CONV_cplt){
 80060da:	6833      	ldr	r3, [r6, #0]
 80060dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80060e0:	fb02 3311 	mls	r3, r2, r1, r3
 80060e4:	bb33      	cbnz	r3, 8006134 <HAL_TIM_PeriodElapsedCallback+0x70>
 80060e6:	4a50      	ldr	r2, [pc, #320]	@ (8006228 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80060e8:	7811      	ldrb	r1, [r2, #0]
 80060ea:	b319      	cbz	r1, 8006134 <HAL_TIM_PeriodElapsedCallback+0x70>
			ADC_CONV_cplt = 0;
 80060ec:	7013      	strb	r3, [r2, #0]
			if(page_location == Main_page){
 80060ee:	4b4f      	ldr	r3, [pc, #316]	@ (800622c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	b9fb      	cbnz	r3, 8006134 <HAL_TIM_PeriodElapsedCallback+0x70>
				refresh_bat_vlt();
				refresh_gasPrs();
				HMI_GPSDataRefresh(GPS_GGA_Data,GPS_RMC_Data);
 80060f4:	4d4e      	ldr	r5, [pc, #312]	@ (8006230 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80060f6:	ac0b      	add	r4, sp, #44	@ 0x2c
				refresh_bat_vlt();
 80060f8:	f7fc fe42 	bl	8002d80 <refresh_bat_vlt>
				refresh_gasPrs();
 80060fc:	f7fe fe6e 	bl	8004ddc <refresh_gasPrs>
				HMI_GPSDataRefresh(GPS_GGA_Data,GPS_RMC_Data);
 8006100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800610a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800610c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006110:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006114:	466c      	mov	r4, sp
 8006116:	4f47      	ldr	r7, [pc, #284]	@ (8006234 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006118:	f107 0510 	add.w	r5, r7, #16
 800611c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800611e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006124:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006128:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800612c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8006130:	f7fb fb3a 	bl	80017a8 <HMI_GPSDataRefresh>
			}
		}

		if(Injecting){
 8006134:	4c40      	ldr	r4, [pc, #256]	@ (8006238 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8006136:	7823      	ldrb	r3, [r4, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d04b      	beq.n	80061d4 <HAL_TIM_PeriodElapsedCallback+0x110>
			if(cheat_flag == 1){
 800613c:	4b3f      	ldr	r3, [pc, #252]	@ (800623c <HAL_TIM_PeriodElapsedCallback+0x178>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d13f      	bne.n	80061c4 <HAL_TIM_PeriodElapsedCallback+0x100>
				sprintf(Tx_Buffer,"Main.t0.txt=\"请按规\r\n范操作\"\xff\xff\xff");
 8006144:	493e      	ldr	r1, [pc, #248]	@ (8006240 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8006146:	483f      	ldr	r0, [pc, #252]	@ (8006244 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8006148:	f004 fe4b 	bl	800ade2 <strcpy>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800614c:	483d      	ldr	r0, [pc, #244]	@ (8006244 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800614e:	f000 fc15 	bl	800697c <USART1_Tx_HMIdata>

				if(now_time_inject % 5 == 0){
 8006152:	6833      	ldr	r3, [r6, #0]
 8006154:	4a3c      	ldr	r2, [pc, #240]	@ (8006248 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8006156:	4353      	muls	r3, r2
 8006158:	f1b3 3f33 	cmp.w	r3, #858993459	@ 0x33333333
 800615c:	d803      	bhi.n	8006166 <HAL_TIM_PeriodElapsedCallback+0xa2>
					HAL_GPIO_TogglePin(LED_Y_GPIO_Port, LED_Y_Pin);
 800615e:	2110      	movs	r1, #16
 8006160:	483a      	ldr	r0, [pc, #232]	@ (800624c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8006162:	f001 fb18 	bl	8007796 <HAL_GPIO_TogglePin>
				}

				pause_state = 1;
 8006166:	2201      	movs	r2, #1
 8006168:	4b39      	ldr	r3, [pc, #228]	@ (8006250 <HAL_TIM_PeriodElapsedCallback+0x18c>)

				InjectTimes += Invalid_action_times;
 800616a:	483a      	ldr	r0, [pc, #232]	@ (8006254 <HAL_TIM_PeriodElapsedCallback+0x190>)
				pause_state = 1;
 800616c:	701a      	strb	r2, [r3, #0]
				InjectTimes += Invalid_action_times;
 800616e:	4a3a      	ldr	r2, [pc, #232]	@ (8006258 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8006170:	7801      	ldrb	r1, [r0, #0]
 8006172:	7813      	ldrb	r3, [r2, #0]
				RemainingTimes += Invalid_action_times;

				if(total_inject_Times > Invalid_action_times){
 8006174:	4d39      	ldr	r5, [pc, #228]	@ (800625c <HAL_TIM_PeriodElapsedCallback+0x198>)
				InjectTimes += Invalid_action_times;
 8006176:	440b      	add	r3, r1
 8006178:	7013      	strb	r3, [r2, #0]
				RemainingTimes += Invalid_action_times;
 800617a:	4b39      	ldr	r3, [pc, #228]	@ (8006260 <HAL_TIM_PeriodElapsedCallback+0x19c>)
				}
				else{
					total_inject_Times = 0;
				}

				if(total_inject_Dosage > (Invalid_action_times)*2){
 800617c:	004f      	lsls	r7, r1, #1
				RemainingTimes += Invalid_action_times;
 800617e:	781a      	ldrb	r2, [r3, #0]
 8006180:	440a      	add	r2, r1
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	701a      	strb	r2, [r3, #0]
				if(total_inject_Times > Invalid_action_times){
 8006186:	882b      	ldrh	r3, [r5, #0]
				else {
					total_inject_Dosage = 0;
				}
				Invalid_action_times  = 0;

				sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",RemainingTimes*2);//RemainingDosage
 8006188:	0052      	lsls	r2, r2, #1
				if(total_inject_Times > Invalid_action_times){
 800618a:	4299      	cmp	r1, r3
					total_inject_Times = 0;
 800618c:	bf2e      	itee	cs
 800618e:	2300      	movcs	r3, #0
					total_inject_Times -= Invalid_action_times;
 8006190:	1a5b      	subcc	r3, r3, r1
 8006192:	b29b      	uxthcc	r3, r3
 8006194:	802b      	strh	r3, [r5, #0]
				if(total_inject_Dosage > (Invalid_action_times)*2){
 8006196:	4d33      	ldr	r5, [pc, #204]	@ (8006264 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8006198:	882b      	ldrh	r3, [r5, #0]
 800619a:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
					total_inject_Dosage = 0;
 800619e:	bfd2      	itee	le
 80061a0:	2300      	movle	r3, #0
					total_inject_Dosage =total_inject_Dosage - (Invalid_action_times)*2 ;
 80061a2:	1bdb      	subgt	r3, r3, r7
 80061a4:	b29b      	uxthgt	r3, r3
 80061a6:	802b      	strh	r3, [r5, #0]
				Invalid_action_times  = 0;
 80061a8:	2300      	movs	r3, #0
				sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",RemainingTimes*2);//RemainingDosage
 80061aa:	492f      	ldr	r1, [pc, #188]	@ (8006268 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
				Invalid_action_times  = 0;
 80061ac:	7003      	strb	r3, [r0, #0]
				sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",RemainingTimes*2);//RemainingDosage
 80061ae:	4825      	ldr	r0, [pc, #148]	@ (8006244 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80061b0:	f004 fca8 	bl	800ab04 <siprintf>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80061b4:	4823      	ldr	r0, [pc, #140]	@ (8006244 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80061b6:	f000 fbe1 	bl	800697c <USART1_Tx_HMIdata>

				Refresh_counter();
 80061ba:	f7fc ffa9 	bl	8003110 <Refresh_counter>

				HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_RESET);
			}
		}

		if(Injecting && !pause_state){
 80061be:	7823      	ldrb	r3, [r4, #0]
 80061c0:	b923      	cbnz	r3, 80061cc <HAL_TIM_PeriodElapsedCallback+0x108>
 80061c2:	e007      	b.n	80061d4 <HAL_TIM_PeriodElapsedCallback+0x110>
			}else if(cheat_flag == 0 || cancel_break){
 80061c4:	b333      	cbz	r3, 8006214 <HAL_TIM_PeriodElapsedCallback+0x150>
 80061c6:	4b29      	ldr	r3, [pc, #164]	@ (800626c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	bb1b      	cbnz	r3, 8006214 <HAL_TIM_PeriodElapsedCallback+0x150>
		if(Injecting && !pause_state){
 80061cc:	4b20      	ldr	r3, [pc, #128]	@ (8006250 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d057      	beq.n	8006284 <HAL_TIM_PeriodElapsedCallback+0x1c0>
			if(now_time_inject % 5 == 0)
				HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
			}
			else
			{
				if(clear_delay_time >= 3000){
 80061d4:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80061d8:	4b25      	ldr	r3, [pc, #148]	@ (8006270 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80061da:	6819      	ldr	r1, [r3, #0]
 80061dc:	4291      	cmp	r1, r2
 80061de:	d95b      	bls.n	8006298 <HAL_TIM_PeriodElapsedCallback+0x1d4>
					total_inject_Times = 0;
 80061e0:	2500      	movs	r5, #0
					total_Times = 0;
					total_inject_Dosage = 0;
					current_TreeNo = 0;
					clear_counter = 1;
 80061e2:	2101      	movs	r1, #1
					total_inject_Times = 0;
 80061e4:	4a1d      	ldr	r2, [pc, #116]	@ (800625c <HAL_TIM_PeriodElapsedCallback+0x198>)
					clear_delay_time = 0;

					Buzzer(1000);
 80061e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
					total_inject_Times = 0;
 80061ea:	8015      	strh	r5, [r2, #0]
					total_Times = 0;
 80061ec:	4a21      	ldr	r2, [pc, #132]	@ (8006274 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
					clear_delay_time = 0;
 80061ee:	601d      	str	r5, [r3, #0]
					total_Times = 0;
 80061f0:	8015      	strh	r5, [r2, #0]
					total_inject_Dosage = 0;
 80061f2:	4a1c      	ldr	r2, [pc, #112]	@ (8006264 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80061f4:	8015      	strh	r5, [r2, #0]
					current_TreeNo = 0;
 80061f6:	4a20      	ldr	r2, [pc, #128]	@ (8006278 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80061f8:	8015      	strh	r5, [r2, #0]
					clear_counter = 1;
 80061fa:	4a20      	ldr	r2, [pc, #128]	@ (800627c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80061fc:	7011      	strb	r1, [r2, #0]
					Buzzer(1000);
 80061fe:	f7fc fe5d 	bl	8002ebc <Buzzer>
					Refresh_counter();
 8006202:	f7fc ff85 	bl	8003110 <Refresh_counter>

					HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin,GPIO_PIN_RESET);
 8006206:	462a      	mov	r2, r5
 8006208:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800620c:	481c      	ldr	r0, [pc, #112]	@ (8006280 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800620e:	f001 fabd 	bl	800778c <HAL_GPIO_WritePin>
 8006212:	e041      	b.n	8006298 <HAL_TIM_PeriodElapsedCallback+0x1d4>
				HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_RESET);
 8006214:	2200      	movs	r2, #0
 8006216:	2110      	movs	r1, #16
 8006218:	480c      	ldr	r0, [pc, #48]	@ (800624c <HAL_TIM_PeriodElapsedCallback+0x188>)
 800621a:	f001 fab7 	bl	800778c <HAL_GPIO_WritePin>
 800621e:	e7ce      	b.n	80061be <HAL_TIM_PeriodElapsedCallback+0xfa>
 8006220:	200009dc 	.word	0x200009dc
 8006224:	20000a58 	.word	0x20000a58
 8006228:	200008a4 	.word	0x200008a4
 800622c:	20000370 	.word	0x20000370
 8006230:	200001f4 	.word	0x200001f4
 8006234:	20000230 	.word	0x20000230
 8006238:	20000934 	.word	0x20000934
 800623c:	20000a4d 	.word	0x20000a4d
 8006240:	0800dc3e 	.word	0x0800dc3e
 8006244:	20000b7e 	.word	0x20000b7e
 8006248:	cccccccd 	.word	0xcccccccd
 800624c:	40010c00 	.word	0x40010c00
 8006250:	20000932 	.word	0x20000932
 8006254:	20000a4c 	.word	0x20000a4c
 8006258:	20000935 	.word	0x20000935
 800625c:	20000a42 	.word	0x20000a42
 8006260:	20000a44 	.word	0x20000a44
 8006264:	20000a40 	.word	0x20000a40
 8006268:	0800dadf 	.word	0x0800dadf
 800626c:	2000091a 	.word	0x2000091a
 8006270:	20000a2c 	.word	0x20000a2c
 8006274:	20000a3e 	.word	0x20000a3e
 8006278:	200008b2 	.word	0x200008b2
 800627c:	2000091b 	.word	0x2000091b
 8006280:	40011000 	.word	0x40011000
			if(now_time_inject % 5 == 0)
 8006284:	6833      	ldr	r3, [r6, #0]
 8006286:	4a6d      	ldr	r2, [pc, #436]	@ (800643c <HAL_TIM_PeriodElapsedCallback+0x378>)
 8006288:	4353      	muls	r3, r2
 800628a:	f1b3 3f33 	cmp.w	r3, #858993459	@ 0x33333333
 800628e:	d803      	bhi.n	8006298 <HAL_TIM_PeriodElapsedCallback+0x1d4>
				HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8006290:	2102      	movs	r1, #2
 8006292:	486b      	ldr	r0, [pc, #428]	@ (8006440 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8006294:	f001 fa7f 	bl	8007796 <HAL_GPIO_TogglePin>
				}
			}

		if(cancel_delay_time >= 3000 && (page_location == Main_page)){
 8006298:	f640 33b7 	movw	r3, #2999	@ 0xbb7
 800629c:	4969      	ldr	r1, [pc, #420]	@ (8006444 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800629e:	680a      	ldr	r2, [r1, #0]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d93c      	bls.n	800631e <HAL_TIM_PeriodElapsedCallback+0x25a>
 80062a4:	4b68      	ldr	r3, [pc, #416]	@ (8006448 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d138      	bne.n	800631e <HAL_TIM_PeriodElapsedCallback+0x25a>
			if(Injecting && pause_state){
 80062ac:	7822      	ldrb	r2, [r4, #0]
 80062ae:	4d67      	ldr	r5, [pc, #412]	@ (800644c <HAL_TIM_PeriodElapsedCallback+0x388>)
 80062b0:	2a00      	cmp	r2, #0
 80062b2:	d074      	beq.n	800639e <HAL_TIM_PeriodElapsedCallback+0x2da>
 80062b4:	4a66      	ldr	r2, [pc, #408]	@ (8006450 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80062b6:	7812      	ldrb	r2, [r2, #0]
 80062b8:	2a00      	cmp	r2, #0
 80062ba:	d070      	beq.n	800639e <HAL_TIM_PeriodElapsedCallback+0x2da>
				cancel_delay_time = 0;
 80062bc:	600b      	str	r3, [r1, #0]
				Injecting = 0;
				totalCycles = 0;
				InjectTimes = 0;
				RemainingTimes = 0;
				cancel_break = 1;
 80062be:	2101      	movs	r1, #1
				totalCycles = 0;
 80062c0:	4a64      	ldr	r2, [pc, #400]	@ (8006454 <HAL_TIM_PeriodElapsedCallback+0x390>)
				Injecting = 0;
 80062c2:	7023      	strb	r3, [r4, #0]
				totalCycles = 0;
 80062c4:	7013      	strb	r3, [r2, #0]
				InjectTimes = 0;
 80062c6:	4a64      	ldr	r2, [pc, #400]	@ (8006458 <HAL_TIM_PeriodElapsedCallback+0x394>)
				cheat_flag = 0;
				current_TreeNo--;

				sprintf(Tx_Buffer,"Main.t0.txt=\"取消中...\"\xff\xff\xff");
 80062c8:	4864      	ldr	r0, [pc, #400]	@ (800645c <HAL_TIM_PeriodElapsedCallback+0x398>)
				InjectTimes = 0;
 80062ca:	7013      	strb	r3, [r2, #0]
				RemainingTimes = 0;
 80062cc:	4a64      	ldr	r2, [pc, #400]	@ (8006460 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80062ce:	7013      	strb	r3, [r2, #0]
				cancel_break = 1;
 80062d0:	4a64      	ldr	r2, [pc, #400]	@ (8006464 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80062d2:	7011      	strb	r1, [r2, #0]
				cheat_flag = 0;
 80062d4:	4a64      	ldr	r2, [pc, #400]	@ (8006468 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
				sprintf(Tx_Buffer,"Main.t0.txt=\"取消中...\"\xff\xff\xff");
 80062d6:	4965      	ldr	r1, [pc, #404]	@ (800646c <HAL_TIM_PeriodElapsedCallback+0x3a8>)
				cheat_flag = 0;
 80062d8:	7013      	strb	r3, [r2, #0]
				current_TreeNo--;
 80062da:	4a65      	ldr	r2, [pc, #404]	@ (8006470 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80062dc:	8813      	ldrh	r3, [r2, #0]
 80062de:	3b01      	subs	r3, #1
 80062e0:	8013      	strh	r3, [r2, #0]
				sprintf(Tx_Buffer,"Main.t0.txt=\"取消中...\"\xff\xff\xff");
 80062e2:	f004 fd7e 	bl	800ade2 <strcpy>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80062e6:	485d      	ldr	r0, [pc, #372]	@ (800645c <HAL_TIM_PeriodElapsedCallback+0x398>)
 80062e8:	f000 fb48 	bl	800697c <USART1_Tx_HMIdata>

				sprintf(Tx_Buffer,"Main.n0.val=0\xff\xff\xff");
 80062ec:	4961      	ldr	r1, [pc, #388]	@ (8006474 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80062ee:	485b      	ldr	r0, [pc, #364]	@ (800645c <HAL_TIM_PeriodElapsedCallback+0x398>)
 80062f0:	f004 fd77 	bl	800ade2 <strcpy>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80062f4:	4859      	ldr	r0, [pc, #356]	@ (800645c <HAL_TIM_PeriodElapsedCallback+0x398>)
 80062f6:	f000 fb41 	bl	800697c <USART1_Tx_HMIdata>

				sprintf(Tx_Buffer,"Main.t8.txt=\"\"\xff\xff\xff");
 80062fa:	495f      	ldr	r1, [pc, #380]	@ (8006478 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80062fc:	4857      	ldr	r0, [pc, #348]	@ (800645c <HAL_TIM_PeriodElapsedCallback+0x398>)
 80062fe:	f004 fd70 	bl	800ade2 <strcpy>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8006302:	4856      	ldr	r0, [pc, #344]	@ (800645c <HAL_TIM_PeriodElapsedCallback+0x398>)
 8006304:	f000 fb3a 	bl	800697c <USART1_Tx_HMIdata>

				Motor_Reverse();
 8006308:	f7ff fb66 	bl	80059d8 <Motor_Reverse>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);

				sprintf(Tx_Buffer,"Main.t8.txt=\"\"\xff\xff\xff");
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
			}
			Dosage_set = 0;
 800630c:	2300      	movs	r3, #0
			sprintf(Tx_Buffer,"Main.t0.txt=\"\"\xff\xff\xff");
 800630e:	495b      	ldr	r1, [pc, #364]	@ (800647c <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8006310:	4852      	ldr	r0, [pc, #328]	@ (800645c <HAL_TIM_PeriodElapsedCallback+0x398>)
			Dosage_set = 0;
 8006312:	802b      	strh	r3, [r5, #0]
			sprintf(Tx_Buffer,"Main.t0.txt=\"\"\xff\xff\xff");
 8006314:	f004 fd65 	bl	800ade2 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8006318:	4850      	ldr	r0, [pc, #320]	@ (800645c <HAL_TIM_PeriodElapsedCallback+0x398>)
 800631a:	f000 fb2f 	bl	800697c <USART1_Tx_HMIdata>
		}

		if(ExGas_delay_time >= 3500 && (page_location == Main_page)){
 800631e:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8006322:	4b57      	ldr	r3, [pc, #348]	@ (8006480 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8006324:	6819      	ldr	r1, [r3, #0]
 8006326:	4291      	cmp	r1, r2
 8006328:	d952      	bls.n	80063d0 <HAL_TIM_PeriodElapsedCallback+0x30c>
 800632a:	4a47      	ldr	r2, [pc, #284]	@ (8006448 <HAL_TIM_PeriodElapsedCallback+0x384>)
 800632c:	7812      	ldrb	r2, [r2, #0]
 800632e:	2a00      	cmp	r2, #0
 8006330:	d14e      	bne.n	80063d0 <HAL_TIM_PeriodElapsedCallback+0x30c>
			EX_GAS_start = 1;
 8006332:	2201      	movs	r2, #1
 8006334:	4b53      	ldr	r3, [pc, #332]	@ (8006484 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
		}
		else
		if(ExGas_delay_time >= 3500 && (page_location == File_M_page)){
				ExGas_delay_time = 0;
				EX_GAS_start = 0;
 8006336:	701a      	strb	r2, [r3, #0]
			}

		if(Injecting && over_pressure){
 8006338:	7823      	ldrb	r3, [r4, #0]
 800633a:	b1b3      	cbz	r3, 800636a <HAL_TIM_PeriodElapsedCallback+0x2a6>
 800633c:	4b52      	ldr	r3, [pc, #328]	@ (8006488 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	b19b      	cbz	r3, 800636a <HAL_TIM_PeriodElapsedCallback+0x2a6>
			sprintf(Tx_Buffer,"Main.t0.txt=\"注射压\r\n力超压\"\xff\xff\xff");
 8006342:	4952      	ldr	r1, [pc, #328]	@ (800648c <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8006344:	4845      	ldr	r0, [pc, #276]	@ (800645c <HAL_TIM_PeriodElapsedCallback+0x398>)
 8006346:	f004 fd4c 	bl	800ade2 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800634a:	4844      	ldr	r0, [pc, #272]	@ (800645c <HAL_TIM_PeriodElapsedCallback+0x398>)
 800634c:	f000 fb16 	bl	800697c <USART1_Tx_HMIdata>

			if(now_time_inject % 5 == 0){
 8006350:	6833      	ldr	r3, [r6, #0]
 8006352:	4a3a      	ldr	r2, [pc, #232]	@ (800643c <HAL_TIM_PeriodElapsedCallback+0x378>)
 8006354:	4353      	muls	r3, r2
 8006356:	f1b3 3f33 	cmp.w	r3, #858993459	@ 0x33333333
 800635a:	d803      	bhi.n	8006364 <HAL_TIM_PeriodElapsedCallback+0x2a0>
				HAL_GPIO_TogglePin(LED_Y_GPIO_Port, LED_Y_Pin);
 800635c:	2110      	movs	r1, #16
 800635e:	484c      	ldr	r0, [pc, #304]	@ (8006490 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8006360:	f001 fa19 	bl	8007796 <HAL_GPIO_TogglePin>
			}
			pause_state = 1;
 8006364:	2201      	movs	r2, #1
 8006366:	4b3a      	ldr	r3, [pc, #232]	@ (8006450 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8006368:	701a      	strb	r2, [r3, #0]
		}

		if(confirm_press_time >= 3000 && (page_location == Main_page)){
 800636a:	f640 33b7 	movw	r3, #2999	@ 0xbb7
 800636e:	4a49      	ldr	r2, [pc, #292]	@ (8006494 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8006370:	8811      	ldrh	r1, [r2, #0]
 8006372:	4299      	cmp	r1, r3
 8006374:	d911      	bls.n	800639a <HAL_TIM_PeriodElapsedCallback+0x2d6>
 8006376:	4b34      	ldr	r3, [pc, #208]	@ (8006448 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8006378:	7819      	ldrb	r1, [r3, #0]
 800637a:	b971      	cbnz	r1, 800639a <HAL_TIM_PeriodElapsedCallback+0x2d6>
			confirm_press_time = 0;
			page_location = File_M_page;
 800637c:	2401      	movs	r4, #1
			confirm_press_time = 0;
 800637e:	8011      	strh	r1, [r2, #0]
			sprintf(Tx_Buffer,"page File_M\xff\xff\xff");
 8006380:	4836      	ldr	r0, [pc, #216]	@ (800645c <HAL_TIM_PeriodElapsedCallback+0x398>)
 8006382:	4945      	ldr	r1, [pc, #276]	@ (8006498 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
			page_location = File_M_page;
 8006384:	701c      	strb	r4, [r3, #0]
			sprintf(Tx_Buffer,"page File_M\xff\xff\xff");
 8006386:	f004 fd2c 	bl	800ade2 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800638a:	4834      	ldr	r0, [pc, #208]	@ (800645c <HAL_TIM_PeriodElapsedCallback+0x398>)
 800638c:	f000 faf6 	bl	800697c <USART1_Tx_HMIdata>
			HAL_Delay(20);
 8006390:	2014      	movs	r0, #20
 8006392:	f000 fc33 	bl	8006bfc <HAL_Delay>
			refresh_dir = 1;
 8006396:	4b41      	ldr	r3, [pc, #260]	@ (800649c <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8006398:	701c      	strb	r4, [r3, #0]
				waiting_start_timeout = 1;
			}
		}

	}//&htim4
}
 800639a:	b01b      	add	sp, #108	@ 0x6c
 800639c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if(waiting_start){
 800639e:	4b40      	ldr	r3, [pc, #256]	@ (80064a0 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 80063a0:	781a      	ldrb	r2, [r3, #0]
 80063a2:	2a00      	cmp	r2, #0
 80063a4:	d0b2      	beq.n	800630c <HAL_TIM_PeriodElapsedCallback+0x248>
				waiting_start = 0;
 80063a6:	2200      	movs	r2, #0
 80063a8:	701a      	strb	r2, [r3, #0]
				Dosage_load = 0;
 80063aa:	4b3e      	ldr	r3, [pc, #248]	@ (80064a4 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
				cancel_delay_time = 0;
 80063ac:	600a      	str	r2, [r1, #0]
				sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",Dosage_set);
 80063ae:	482b      	ldr	r0, [pc, #172]	@ (800645c <HAL_TIM_PeriodElapsedCallback+0x398>)
 80063b0:	493d      	ldr	r1, [pc, #244]	@ (80064a8 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
				Dosage_load = 0;
 80063b2:	801a      	strh	r2, [r3, #0]
				Dosage_set = 0;
 80063b4:	802a      	strh	r2, [r5, #0]
				sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",Dosage_set);
 80063b6:	f004 fba5 	bl	800ab04 <siprintf>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80063ba:	4828      	ldr	r0, [pc, #160]	@ (800645c <HAL_TIM_PeriodElapsedCallback+0x398>)
 80063bc:	f000 fade 	bl	800697c <USART1_Tx_HMIdata>
				sprintf(Tx_Buffer,"Main.t8.txt=\"\"\xff\xff\xff");
 80063c0:	492d      	ldr	r1, [pc, #180]	@ (8006478 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80063c2:	4826      	ldr	r0, [pc, #152]	@ (800645c <HAL_TIM_PeriodElapsedCallback+0x398>)
 80063c4:	f004 fd0d 	bl	800ade2 <strcpy>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80063c8:	4824      	ldr	r0, [pc, #144]	@ (800645c <HAL_TIM_PeriodElapsedCallback+0x398>)
 80063ca:	f000 fad7 	bl	800697c <USART1_Tx_HMIdata>
 80063ce:	e79d      	b.n	800630c <HAL_TIM_PeriodElapsedCallback+0x248>
		if(ExGas_delay_time >= 3500 && (page_location == File_M_page)){
 80063d0:	f640 52ab 	movw	r2, #3499	@ 0xdab
 80063d4:	6819      	ldr	r1, [r3, #0]
 80063d6:	4291      	cmp	r1, r2
 80063d8:	d9ae      	bls.n	8006338 <HAL_TIM_PeriodElapsedCallback+0x274>
 80063da:	4a1b      	ldr	r2, [pc, #108]	@ (8006448 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80063dc:	7812      	ldrb	r2, [r2, #0]
 80063de:	2a01      	cmp	r2, #1
 80063e0:	d1aa      	bne.n	8006338 <HAL_TIM_PeriodElapsedCallback+0x274>
				ExGas_delay_time = 0;
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]
				EX_GAS_start = 0;
 80063e6:	4b27      	ldr	r3, [pc, #156]	@ (8006484 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 80063e8:	e7a5      	b.n	8006336 <HAL_TIM_PeriodElapsedCallback+0x272>
	if(htim == &htim4){
 80063ea:	4b30      	ldr	r3, [pc, #192]	@ (80064ac <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 80063ec:	4298      	cmp	r0, r3
 80063ee:	d1d4      	bne.n	800639a <HAL_TIM_PeriodElapsedCallback+0x2d6>
		now_time++;
 80063f0:	4c2f      	ldr	r4, [pc, #188]	@ (80064b0 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
		if((key_lock_time - now_time >= 50) && key_scan_lock){//下降沿中断触发后50ms内锁止，防止反复触发
 80063f2:	4a30      	ldr	r2, [pc, #192]	@ (80064b4 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
		now_time++;
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	3301      	adds	r3, #1
 80063f8:	6023      	str	r3, [r4, #0]
		if((key_lock_time - now_time >= 50) && key_scan_lock){//下降沿中断触发后50ms内锁止，防止反复触发
 80063fa:	6821      	ldr	r1, [r4, #0]
 80063fc:	6813      	ldr	r3, [r2, #0]
 80063fe:	1a5b      	subs	r3, r3, r1
 8006400:	2b31      	cmp	r3, #49	@ 0x31
 8006402:	d905      	bls.n	8006410 <HAL_TIM_PeriodElapsedCallback+0x34c>
 8006404:	492c      	ldr	r1, [pc, #176]	@ (80064b8 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8006406:	780b      	ldrb	r3, [r1, #0]
 8006408:	b113      	cbz	r3, 8006410 <HAL_TIM_PeriodElapsedCallback+0x34c>
			key_scan_lock = 0;
 800640a:	2300      	movs	r3, #0
 800640c:	700b      	strb	r3, [r1, #0]
			key_lock_time = 0;
 800640e:	6013      	str	r3, [r2, #0]
		if(key_pressed)
 8006410:	4d2a      	ldr	r5, [pc, #168]	@ (80064bc <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8006412:	782b      	ldrb	r3, [r5, #0]
 8006414:	b11b      	cbz	r3, 800641e <HAL_TIM_PeriodElapsedCallback+0x35a>
			key_now_time++;
 8006416:	4a2a      	ldr	r2, [pc, #168]	@ (80064c0 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8006418:	6813      	ldr	r3, [r2, #0]
 800641a:	3301      	adds	r3, #1
 800641c:	6013      	str	r3, [r2, #0]
		if(GasPrs_LOW == 1){
 800641e:	4b29      	ldr	r3, [pc, #164]	@ (80064c4 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8006420:	781a      	ldrb	r2, [r3, #0]
 8006422:	4b29      	ldr	r3, [pc, #164]	@ (80064c8 <HAL_TIM_PeriodElapsedCallback+0x404>)
 8006424:	2a01      	cmp	r2, #1
 8006426:	d153      	bne.n	80064d0 <HAL_TIM_PeriodElapsedCallback+0x40c>
			if(motor_direction == FORWARD){
 8006428:	4a28      	ldr	r2, [pc, #160]	@ (80064cc <HAL_TIM_PeriodElapsedCallback+0x408>)
 800642a:	f992 2000 	ldrsb.w	r2, [r2]
 800642e:	2a01      	cmp	r2, #1
 8006430:	d150      	bne.n	80064d4 <HAL_TIM_PeriodElapsedCallback+0x410>
				GasPrs_LOW_time++;
 8006432:	881a      	ldrh	r2, [r3, #0]
 8006434:	3201      	adds	r2, #1
 8006436:	b292      	uxth	r2, r2
			GasPrs_LOW_time = 0;
 8006438:	801a      	strh	r2, [r3, #0]
 800643a:	e04b      	b.n	80064d4 <HAL_TIM_PeriodElapsedCallback+0x410>
 800643c:	cccccccd 	.word	0xcccccccd
 8006440:	40011400 	.word	0x40011400
 8006444:	20000a28 	.word	0x20000a28
 8006448:	20000370 	.word	0x20000370
 800644c:	200008b6 	.word	0x200008b6
 8006450:	20000932 	.word	0x20000932
 8006454:	20000933 	.word	0x20000933
 8006458:	20000935 	.word	0x20000935
 800645c:	20000b7e 	.word	0x20000b7e
 8006460:	20000a44 	.word	0x20000a44
 8006464:	2000091a 	.word	0x2000091a
 8006468:	20000a4d 	.word	0x20000a4d
 800646c:	0800dcdb 	.word	0x0800dcdb
 8006470:	200008b2 	.word	0x200008b2
 8006474:	0800d749 	.word	0x0800d749
 8006478:	0800d78d 	.word	0x0800d78d
 800647c:	0800daf1 	.word	0x0800daf1
 8006480:	20000a24 	.word	0x20000a24
 8006484:	20000a3c 	.word	0x20000a3c
 8006488:	20000a4e 	.word	0x20000a4e
 800648c:	0800dc64 	.word	0x0800dc64
 8006490:	40010c00 	.word	0x40010c00
 8006494:	20000a50 	.word	0x20000a50
 8006498:	0800dcf9 	.word	0x0800dcf9
 800649c:	20000386 	.word	0x20000386
 80064a0:	20000920 	.word	0x20000920
 80064a4:	200008b4 	.word	0x200008b4
 80064a8:	0800dadf 	.word	0x0800dadf
 80064ac:	20000994 	.word	0x20000994
 80064b0:	20000a30 	.word	0x20000a30
 80064b4:	20000924 	.word	0x20000924
 80064b8:	20000928 	.word	0x20000928
 80064bc:	20000914 	.word	0x20000914
 80064c0:	20000a34 	.word	0x20000a34
 80064c4:	20000909 	.word	0x20000909
 80064c8:	20000a52 	.word	0x20000a52
 80064cc:	20000936 	.word	0x20000936
		}else if(GasPrs_LOW == 0)
 80064d0:	2a00      	cmp	r2, #0
 80064d2:	d0b1      	beq.n	8006438 <HAL_TIM_PeriodElapsedCallback+0x374>
		if(GasPrs_LOW_time >= 4500){
 80064d4:	f241 1193 	movw	r1, #4499	@ 0x1193
 80064d8:	881a      	ldrh	r2, [r3, #0]
 80064da:	b292      	uxth	r2, r2
 80064dc:	428a      	cmp	r2, r1
 80064de:	d96e      	bls.n	80065be <HAL_TIM_PeriodElapsedCallback+0x4fa>
			cheat_flag = 1;
 80064e0:	2201      	movs	r2, #1
 80064e2:	4b85      	ldr	r3, [pc, #532]	@ (80066f8 <HAL_TIM_PeriodElapsedCallback+0x634>)
 80064e4:	701a      	strb	r2, [r3, #0]
		if(GasPrs_HIGH == 1){
 80064e6:	4b85      	ldr	r3, [pc, #532]	@ (80066fc <HAL_TIM_PeriodElapsedCallback+0x638>)
		if((PAUSE_KEY == GPIO_PIN_SET) || (NRESET_KEY == GPIO_PIN_SET)){
 80064e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
		if(GasPrs_HIGH == 1){
 80064ec:	781b      	ldrb	r3, [r3, #0]
		if((PAUSE_KEY == GPIO_PIN_SET) || (NRESET_KEY == GPIO_PIN_SET)){
 80064ee:	4884      	ldr	r0, [pc, #528]	@ (8006700 <HAL_TIM_PeriodElapsedCallback+0x63c>)
		if(GasPrs_HIGH == 1){
 80064f0:	2b01      	cmp	r3, #1
			over_pressure = 1;
 80064f2:	bf04      	itt	eq
 80064f4:	4a83      	ldreq	r2, [pc, #524]	@ (8006704 <HAL_TIM_PeriodElapsedCallback+0x640>)
 80064f6:	7013      	strbeq	r3, [r2, #0]
		if((PAUSE_KEY == GPIO_PIN_SET) || (NRESET_KEY == GPIO_PIN_SET)){
 80064f8:	f001 f942 	bl	8007780 <HAL_GPIO_ReadPin>
 80064fc:	2801      	cmp	r0, #1
 80064fe:	d165      	bne.n	80065cc <HAL_TIM_PeriodElapsedCallback+0x508>
    	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin,GPIO_PIN_RESET);
 8006500:	2200      	movs	r2, #0
 8006502:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006506:	487e      	ldr	r0, [pc, #504]	@ (8006700 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8006508:	f001 f940 	bl	800778c <HAL_GPIO_WritePin>
    	clear_delay_time = 0;
 800650c:	2200      	movs	r2, #0
 800650e:	4b7e      	ldr	r3, [pc, #504]	@ (8006708 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8006510:	601a      	str	r2, [r3, #0]
		if(PAUSE_KEY == GPIO_PIN_SET){
 8006512:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006516:	487a      	ldr	r0, [pc, #488]	@ (8006700 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8006518:	f001 f932 	bl	8007780 <HAL_GPIO_ReadPin>
 800651c:	2801      	cmp	r0, #1
 800651e:	d17c      	bne.n	800661a <HAL_TIM_PeriodElapsedCallback+0x556>
			cancel_delay_time = 0;
 8006520:	2200      	movs	r2, #0
 8006522:	4b7a      	ldr	r3, [pc, #488]	@ (800670c <HAL_TIM_PeriodElapsedCallback+0x648>)
 8006524:	601a      	str	r2, [r3, #0]
		if(EX_GAS_KEY == GPIO_PIN_SET){
 8006526:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800652a:	4879      	ldr	r0, [pc, #484]	@ (8006710 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800652c:	f001 f928 	bl	8007780 <HAL_GPIO_ReadPin>
 8006530:	2801      	cmp	r0, #1
 8006532:	d17f      	bne.n	8006634 <HAL_TIM_PeriodElapsedCallback+0x570>
			ExGas_delay_time = 0;
 8006534:	2200      	movs	r2, #0
 8006536:	4b77      	ldr	r3, [pc, #476]	@ (8006714 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8006538:	601a      	str	r2, [r3, #0]
		if(CONFIRM_KEY == GPIO_PIN_SET){
 800653a:	2120      	movs	r1, #32
 800653c:	4874      	ldr	r0, [pc, #464]	@ (8006710 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800653e:	f001 f91f 	bl	8007780 <HAL_GPIO_ReadPin>
 8006542:	2801      	cmp	r0, #1
 8006544:	f040 8088 	bne.w	8006658 <HAL_TIM_PeriodElapsedCallback+0x594>
			confirm_press_time = 0;
 8006548:	2200      	movs	r2, #0
 800654a:	4b73      	ldr	r3, [pc, #460]	@ (8006718 <HAL_TIM_PeriodElapsedCallback+0x654>)
 800654c:	801a      	strh	r2, [r3, #0]
			if(key_pressed && key_value && (key_now_time - key_last_time > 1200) && !key_press_long){
 800654e:	4973      	ldr	r1, [pc, #460]	@ (800671c <HAL_TIM_PeriodElapsedCallback+0x658>)
 8006550:	782a      	ldrb	r2, [r5, #0]
 8006552:	780b      	ldrb	r3, [r1, #0]
 8006554:	2a00      	cmp	r2, #0
 8006556:	f000 8090 	beq.w	800667a <HAL_TIM_PeriodElapsedCallback+0x5b6>
 800655a:	4a71      	ldr	r2, [pc, #452]	@ (8006720 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800655c:	7812      	ldrb	r2, [r2, #0]
 800655e:	2a00      	cmp	r2, #0
 8006560:	f000 808b 	beq.w	800667a <HAL_TIM_PeriodElapsedCallback+0x5b6>
 8006564:	4d6f      	ldr	r5, [pc, #444]	@ (8006724 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8006566:	4870      	ldr	r0, [pc, #448]	@ (8006728 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8006568:	682a      	ldr	r2, [r5, #0]
 800656a:	6806      	ldr	r6, [r0, #0]
 800656c:	1b92      	subs	r2, r2, r6
 800656e:	f5b2 6f96 	cmp.w	r2, #1200	@ 0x4b0
 8006572:	f240 8082 	bls.w	800667a <HAL_TIM_PeriodElapsedCallback+0x5b6>
 8006576:	b91b      	cbnz	r3, 8006580 <HAL_TIM_PeriodElapsedCallback+0x4bc>
				key_now_time = 0;
 8006578:	602b      	str	r3, [r5, #0]
				key_last_time = 0;
 800657a:	6003      	str	r3, [r0, #0]
				key_press_long = 1;
 800657c:	2301      	movs	r3, #1
 800657e:	700b      	strb	r3, [r1, #0]
		if(key_press_long && (page_location == Main_page)){
 8006580:	4b6a      	ldr	r3, [pc, #424]	@ (800672c <HAL_TIM_PeriodElapsedCallback+0x668>)
 8006582:	7818      	ldrb	r0, [r3, #0]
 8006584:	2800      	cmp	r0, #0
 8006586:	d17a      	bne.n	800667e <HAL_TIM_PeriodElapsedCallback+0x5ba>
			key_press_time++;
 8006588:	4969      	ldr	r1, [pc, #420]	@ (8006730 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800658a:	880b      	ldrh	r3, [r1, #0]
 800658c:	3301      	adds	r3, #1
 800658e:	b29b      	uxth	r3, r3
 8006590:	800b      	strh	r3, [r1, #0]
			if(key_press_time >= 500){
 8006592:	880b      	ldrh	r3, [r1, #0]
 8006594:	b29b      	uxth	r3, r3
 8006596:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800659a:	d370      	bcc.n	800667e <HAL_TIM_PeriodElapsedCallback+0x5ba>
				if(key_value == DECREASE_KEY_PRESS){
 800659c:	4b60      	ldr	r3, [pc, #384]	@ (8006720 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	f040 808b 	bne.w	80066bc <HAL_TIM_PeriodElapsedCallback+0x5f8>
				  if(Dosage_set > 1000)
 80065a6:	4a63      	ldr	r2, [pc, #396]	@ (8006734 <HAL_TIM_PeriodElapsedCallback+0x670>)
 80065a8:	8813      	ldrh	r3, [r2, #0]
 80065aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80065ae:	d97f      	bls.n	80066b0 <HAL_TIM_PeriodElapsedCallback+0x5ec>
					  Dosage_set = 0;
 80065b0:	8010      	strh	r0, [r2, #0]
					key_value_Refresh = 1;
 80065b2:	2201      	movs	r2, #1
 80065b4:	4b60      	ldr	r3, [pc, #384]	@ (8006738 <HAL_TIM_PeriodElapsedCallback+0x674>)
 80065b6:	701a      	strb	r2, [r3, #0]
				key_press_time = 0;
 80065b8:	2300      	movs	r3, #0
 80065ba:	800b      	strh	r3, [r1, #0]
 80065bc:	e05f      	b.n	800667e <HAL_TIM_PeriodElapsedCallback+0x5ba>
		else if(GasPrs_LOW_time == 0){
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d18f      	bne.n	80064e6 <HAL_TIM_PeriodElapsedCallback+0x422>
			cheat_flag = 0;
 80065c6:	4a4c      	ldr	r2, [pc, #304]	@ (80066f8 <HAL_TIM_PeriodElapsedCallback+0x634>)
 80065c8:	7013      	strb	r3, [r2, #0]
 80065ca:	e78c      	b.n	80064e6 <HAL_TIM_PeriodElapsedCallback+0x422>
		if((PAUSE_KEY == GPIO_PIN_SET) || (NRESET_KEY == GPIO_PIN_SET)){
 80065cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80065d0:	484f      	ldr	r0, [pc, #316]	@ (8006710 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 80065d2:	f001 f8d5 	bl	8007780 <HAL_GPIO_ReadPin>
 80065d6:	2801      	cmp	r0, #1
 80065d8:	d092      	beq.n	8006500 <HAL_TIM_PeriodElapsedCallback+0x43c>
		else if((clear_counter == 0) && (PAUSE_KEY == GPIO_PIN_RESET) && (NRESET_KEY == GPIO_PIN_RESET)){
 80065da:	4b58      	ldr	r3, [pc, #352]	@ (800673c <HAL_TIM_PeriodElapsedCallback+0x678>)
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d197      	bne.n	8006512 <HAL_TIM_PeriodElapsedCallback+0x44e>
 80065e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80065e6:	4846      	ldr	r0, [pc, #280]	@ (8006700 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 80065e8:	f001 f8ca 	bl	8007780 <HAL_GPIO_ReadPin>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d190      	bne.n	8006512 <HAL_TIM_PeriodElapsedCallback+0x44e>
 80065f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80065f4:	4846      	ldr	r0, [pc, #280]	@ (8006710 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 80065f6:	f001 f8c3 	bl	8007780 <HAL_GPIO_ReadPin>
 80065fa:	2800      	cmp	r0, #0
 80065fc:	d189      	bne.n	8006512 <HAL_TIM_PeriodElapsedCallback+0x44e>
    	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin,GPIO_PIN_SET);
 80065fe:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 8006602:	2201      	movs	r2, #1
 8006604:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006608:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 800660c:	f001 f8be 	bl	800778c <HAL_GPIO_WritePin>
    	clear_delay_time++;
 8006610:	4a3d      	ldr	r2, [pc, #244]	@ (8006708 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8006612:	6813      	ldr	r3, [r2, #0]
 8006614:	3301      	adds	r3, #1
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	e77b      	b.n	8006512 <HAL_TIM_PeriodElapsedCallback+0x44e>
		else if(PAUSE_KEY == GPIO_PIN_RESET){
 800661a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800661e:	4838      	ldr	r0, [pc, #224]	@ (8006700 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8006620:	f001 f8ae 	bl	8007780 <HAL_GPIO_ReadPin>
 8006624:	2800      	cmp	r0, #0
 8006626:	f47f af7e 	bne.w	8006526 <HAL_TIM_PeriodElapsedCallback+0x462>
			cancel_delay_time++;
 800662a:	4a38      	ldr	r2, [pc, #224]	@ (800670c <HAL_TIM_PeriodElapsedCallback+0x648>)
 800662c:	6813      	ldr	r3, [r2, #0]
 800662e:	3301      	adds	r3, #1
 8006630:	6013      	str	r3, [r2, #0]
 8006632:	e778      	b.n	8006526 <HAL_TIM_PeriodElapsedCallback+0x462>
		else if(EX_GAS_start != 1 && EX_GAS_KEY == GPIO_PIN_RESET){
 8006634:	4b42      	ldr	r3, [pc, #264]	@ (8006740 <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b01      	cmp	r3, #1
 800663a:	f43f af7e 	beq.w	800653a <HAL_TIM_PeriodElapsedCallback+0x476>
 800663e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006642:	4833      	ldr	r0, [pc, #204]	@ (8006710 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8006644:	f001 f89c 	bl	8007780 <HAL_GPIO_ReadPin>
 8006648:	2800      	cmp	r0, #0
 800664a:	f47f af76 	bne.w	800653a <HAL_TIM_PeriodElapsedCallback+0x476>
			ExGas_delay_time++;
 800664e:	4a31      	ldr	r2, [pc, #196]	@ (8006714 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8006650:	6813      	ldr	r3, [r2, #0]
 8006652:	3301      	adds	r3, #1
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	e770      	b.n	800653a <HAL_TIM_PeriodElapsedCallback+0x476>
		else if(Injecting != 1 && CONFIRM_KEY == GPIO_PIN_RESET){
 8006658:	4b3a      	ldr	r3, [pc, #232]	@ (8006744 <HAL_TIM_PeriodElapsedCallback+0x680>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2b01      	cmp	r3, #1
 800665e:	f43f af76 	beq.w	800654e <HAL_TIM_PeriodElapsedCallback+0x48a>
 8006662:	2120      	movs	r1, #32
 8006664:	482a      	ldr	r0, [pc, #168]	@ (8006710 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8006666:	f001 f88b 	bl	8007780 <HAL_GPIO_ReadPin>
 800666a:	2800      	cmp	r0, #0
 800666c:	f47f af6f 	bne.w	800654e <HAL_TIM_PeriodElapsedCallback+0x48a>
			confirm_press_time++;
 8006670:	4a29      	ldr	r2, [pc, #164]	@ (8006718 <HAL_TIM_PeriodElapsedCallback+0x654>)
 8006672:	8813      	ldrh	r3, [r2, #0]
 8006674:	3301      	adds	r3, #1
 8006676:	8013      	strh	r3, [r2, #0]
 8006678:	e769      	b.n	800654e <HAL_TIM_PeriodElapsedCallback+0x48a>
		if(key_press_long && (page_location == Main_page)){
 800667a:	2b00      	cmp	r3, #0
 800667c:	d180      	bne.n	8006580 <HAL_TIM_PeriodElapsedCallback+0x4bc>
		if(waiting_start){
 800667e:	4932      	ldr	r1, [pc, #200]	@ (8006748 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8006680:	780b      	ldrb	r3, [r1, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	f43f ae89 	beq.w	800639a <HAL_TIM_PeriodElapsedCallback+0x2d6>
			if((now_time > confirm_time) && (now_time - confirm_time > 5000)){
 8006688:	4a30      	ldr	r2, [pc, #192]	@ (800674c <HAL_TIM_PeriodElapsedCallback+0x688>)
 800668a:	6820      	ldr	r0, [r4, #0]
 800668c:	6813      	ldr	r3, [r2, #0]
 800668e:	4298      	cmp	r0, r3
 8006690:	d921      	bls.n	80066d6 <HAL_TIM_PeriodElapsedCallback+0x612>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	6810      	ldr	r0, [r2, #0]
 8006696:	1a1b      	subs	r3, r3, r0
 8006698:	f241 3088 	movw	r0, #5000	@ 0x1388
 800669c:	4283      	cmp	r3, r0
 800669e:	d91a      	bls.n	80066d6 <HAL_TIM_PeriodElapsedCallback+0x612>
				waiting_start = 0;
 80066a0:	2300      	movs	r3, #0
				Dosage_load = 0;
 80066a2:	4a2b      	ldr	r2, [pc, #172]	@ (8006750 <HAL_TIM_PeriodElapsedCallback+0x68c>)
				waiting_start = 0;
 80066a4:	700b      	strb	r3, [r1, #0]
				Dosage_load = 0;
 80066a6:	8013      	strh	r3, [r2, #0]
				waiting_start_timeout = 1;
 80066a8:	2201      	movs	r2, #1
 80066aa:	4b2a      	ldr	r3, [pc, #168]	@ (8006754 <HAL_TIM_PeriodElapsedCallback+0x690>)
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	e674      	b.n	800639a <HAL_TIM_PeriodElapsedCallback+0x2d6>
				  else if(Dosage_set >= 2)
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	f67f af7e 	bls.w	80065b2 <HAL_TIM_PeriodElapsedCallback+0x4ee>
					  Dosage_set-=2;
 80066b6:	3b02      	subs	r3, #2
 80066b8:	8013      	strh	r3, [r2, #0]
 80066ba:	e77a      	b.n	80065b2 <HAL_TIM_PeriodElapsedCallback+0x4ee>
				else if(key_value == INCREASE_KEY_PRESS)
 80066bc:	2b03      	cmp	r3, #3
 80066be:	f47f af7b 	bne.w	80065b8 <HAL_TIM_PeriodElapsedCallback+0x4f4>
				  if(Dosage_set < 1000)
 80066c2:	4a1c      	ldr	r2, [pc, #112]	@ (8006734 <HAL_TIM_PeriodElapsedCallback+0x670>)
 80066c4:	8813      	ldrh	r3, [r2, #0]
 80066c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
					  Dosage_set+=2;
 80066ca:	bf36      	itet	cc
 80066cc:	3302      	addcc	r3, #2
					  Dosage_set = 1000;
 80066ce:	f44f 737a 	movcs.w	r3, #1000	@ 0x3e8
					  Dosage_set+=2;
 80066d2:	b29b      	uxthcc	r3, r3
 80066d4:	e7f0      	b.n	80066b8 <HAL_TIM_PeriodElapsedCallback+0x5f4>
			else if((now_time <= confirm_time) && (0xffff - confirm_time + now_time> 5000)){
 80066d6:	6820      	ldr	r0, [r4, #0]
 80066d8:	6813      	ldr	r3, [r2, #0]
 80066da:	4298      	cmp	r0, r3
 80066dc:	f63f ae5d 	bhi.w	800639a <HAL_TIM_PeriodElapsedCallback+0x2d6>
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80066e8:	33ff      	adds	r3, #255	@ 0xff
 80066ea:	1a9b      	subs	r3, r3, r2
 80066ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d8d5      	bhi.n	80066a0 <HAL_TIM_PeriodElapsedCallback+0x5dc>
 80066f4:	e651      	b.n	800639a <HAL_TIM_PeriodElapsedCallback+0x2d6>
 80066f6:	bf00      	nop
 80066f8:	20000a4d 	.word	0x20000a4d
 80066fc:	20000908 	.word	0x20000908
 8006700:	40011000 	.word	0x40011000
 8006704:	20000a4e 	.word	0x20000a4e
 8006708:	20000a2c 	.word	0x20000a2c
 800670c:	20000a28 	.word	0x20000a28
 8006710:	40010c00 	.word	0x40010c00
 8006714:	20000a24 	.word	0x20000a24
 8006718:	20000a50 	.word	0x20000a50
 800671c:	20000916 	.word	0x20000916
 8006720:	20000918 	.word	0x20000918
 8006724:	20000a34 	.word	0x20000a34
 8006728:	20000a38 	.word	0x20000a38
 800672c:	20000370 	.word	0x20000370
 8006730:	20000912 	.word	0x20000912
 8006734:	200008b6 	.word	0x200008b6
 8006738:	20000917 	.word	0x20000917
 800673c:	2000091b 	.word	0x2000091b
 8006740:	20000a3c 	.word	0x20000a3c
 8006744:	20000934 	.word	0x20000934
 8006748:	20000920 	.word	0x20000920
 800674c:	20000a48 	.word	0x20000a48
 8006750:	200008b4 	.word	0x200008b4
 8006754:	20000a3d 	.word	0x20000a3d

08006758 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006758:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 800675a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart1.Instance = USART1;
 800675e:	480a      	ldr	r0, [pc, #40]	@ (8006788 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8006760:	4a0a      	ldr	r2, [pc, #40]	@ (800678c <MX_USART1_UART_Init+0x34>)
 8006762:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006766:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006768:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800676a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800676e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006772:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006774:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006776:	f001 ffe1 	bl	800873c <HAL_UART_Init>
 800677a:	b118      	cbz	r0, 8006784 <MX_USART1_UART_Init+0x2c>
  /* USER CODE BEGIN USART1_Init 2 */
//  // 手动添加：启用空闲中断
//  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
  /* USER CODE END USART1_Init 2 */

}
 800677c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006780:	f7ff b910 	b.w	80059a4 <Error_Handler>
}
 8006784:	bd08      	pop	{r3, pc}
 8006786:	bf00      	nop
 8006788:	20000b34 	.word	0x20000b34
 800678c:	40013800 	.word	0x40013800

08006790 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006790:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8006792:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart2.Instance = USART2;
 8006796:	480a      	ldr	r0, [pc, #40]	@ (80067c0 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8006798:	4a0a      	ldr	r2, [pc, #40]	@ (80067c4 <MX_USART2_UART_Init+0x34>)
 800679a:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800679e:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80067a0:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80067a2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067a6:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 80067aa:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80067ac:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80067ae:	f001 ffc5 	bl	800873c <HAL_UART_Init>
 80067b2:	b118      	cbz	r0, 80067bc <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80067b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80067b8:	f7ff b8f4 	b.w	80059a4 <Error_Handler>
}
 80067bc:	bd08      	pop	{r3, pc}
 80067be:	bf00      	nop
 80067c0:	20000aec 	.word	0x20000aec
 80067c4:	40004400 	.word	0x40004400

080067c8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80067c8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 9600;
 80067ca:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
  huart3.Instance = USART3;
 80067ce:	480a      	ldr	r0, [pc, #40]	@ (80067f8 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 9600;
 80067d0:	4a0a      	ldr	r2, [pc, #40]	@ (80067fc <MX_USART3_UART_Init+0x34>)
 80067d2:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80067d6:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80067d8:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 80067da:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067de:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 80067e2:	6103      	str	r3, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80067e4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80067e6:	f001 ffa9 	bl	800873c <HAL_UART_Init>
 80067ea:	b118      	cbz	r0, 80067f4 <MX_USART3_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80067ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80067f0:	f7ff b8d8 	b.w	80059a4 <Error_Handler>
}
 80067f4:	bd08      	pop	{r3, pc}
 80067f6:	bf00      	nop
 80067f8:	20000aa4 	.word	0x20000aa4
 80067fc:	40004800 	.word	0x40004800

08006800 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006800:	b570      	push	{r4, r5, r6, lr}
 8006802:	4606      	mov	r6, r0
 8006804:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006806:	2210      	movs	r2, #16
 8006808:	2100      	movs	r1, #0
 800680a:	a806      	add	r0, sp, #24
 800680c:	f004 f9ed 	bl	800abea <memset>
  if(uartHandle->Instance==USART1)
 8006810:	6833      	ldr	r3, [r6, #0]
 8006812:	4a52      	ldr	r2, [pc, #328]	@ (800695c <HAL_UART_MspInit+0x15c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d129      	bne.n	800686c <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006818:	4b51      	ldr	r3, [pc, #324]	@ (8006960 <HAL_UART_MspInit+0x160>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800681a:	f44f 7000 	mov.w	r0, #512	@ 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 800681e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006820:	a906      	add	r1, sp, #24
    __HAL_RCC_USART1_CLK_ENABLE();
 8006822:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006826:	619a      	str	r2, [r3, #24]
 8006828:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800682a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
    __HAL_RCC_USART1_CLK_ENABLE();
 800682e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8006832:	9200      	str	r2, [sp, #0]
 8006834:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006836:	699a      	ldr	r2, [r3, #24]
 8006838:	f042 0204 	orr.w	r2, r2, #4
 800683c:	619a      	str	r2, [r3, #24]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	f003 0304 	and.w	r3, r3, #4
 8006844:	9301      	str	r3, [sp, #4]
 8006846:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006848:	2302      	movs	r3, #2
 800684a:	e9cd 0306 	strd	r0, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800684e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006850:	4844      	ldr	r0, [pc, #272]	@ (8006964 <HAL_UART_MspInit+0x164>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006852:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006854:	f000 febc 	bl	80075d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006858:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800685a:	4842      	ldr	r0, [pc, #264]	@ (8006964 <HAL_UART_MspInit+0x164>)
 800685c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800685e:	e9cd 4306 	strd	r4, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006862:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006864:	f000 feb4 	bl	80075d0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006868:	b00a      	add	sp, #40	@ 0x28
 800686a:	bd70      	pop	{r4, r5, r6, pc}
  else if(uartHandle->Instance==USART2)
 800686c:	4a3e      	ldr	r2, [pc, #248]	@ (8006968 <HAL_UART_MspInit+0x168>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d12e      	bne.n	80068d0 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006872:	4b3b      	ldr	r3, [pc, #236]	@ (8006960 <HAL_UART_MspInit+0x160>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006874:	2104      	movs	r1, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8006876:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006878:	483a      	ldr	r0, [pc, #232]	@ (8006964 <HAL_UART_MspInit+0x164>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800687a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800687e:	61da      	str	r2, [r3, #28]
 8006880:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006882:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8006884:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8006888:	9202      	str	r2, [sp, #8]
 800688a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800688c:	699a      	ldr	r2, [r3, #24]
 800688e:	f042 0204 	orr.w	r2, r2, #4
 8006892:	619a      	str	r2, [r3, #24]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	f003 0304 	and.w	r3, r3, #4
 800689a:	9303      	str	r3, [sp, #12]
 800689c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800689e:	2302      	movs	r3, #2
 80068a0:	e9cd 1306 	strd	r1, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80068a4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068a6:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80068a8:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068aa:	f000 fe91 	bl	80075d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068ae:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068b0:	482c      	ldr	r0, [pc, #176]	@ (8006964 <HAL_UART_MspInit+0x164>)
 80068b2:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068b4:	e9cd 3406 	strd	r3, r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068b8:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068ba:	f000 fe89 	bl	80075d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80068be:	2026      	movs	r0, #38	@ 0x26
 80068c0:	4622      	mov	r2, r4
 80068c2:	4621      	mov	r1, r4
 80068c4:	f000 fcca 	bl	800725c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80068c8:	2026      	movs	r0, #38	@ 0x26
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80068ca:	f000 fcf7 	bl	80072bc <HAL_NVIC_EnableIRQ>
}
 80068ce:	e7cb      	b.n	8006868 <HAL_UART_MspInit+0x68>
  else if(uartHandle->Instance==USART3)
 80068d0:	4a26      	ldr	r2, [pc, #152]	@ (800696c <HAL_UART_MspInit+0x16c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d1c8      	bne.n	8006868 <HAL_UART_MspInit+0x68>
    __HAL_RCC_USART3_CLK_ENABLE();
 80068d6:	4b22      	ldr	r3, [pc, #136]	@ (8006960 <HAL_UART_MspInit+0x160>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068d8:	4825      	ldr	r0, [pc, #148]	@ (8006970 <HAL_UART_MspInit+0x170>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80068da:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068dc:	a906      	add	r1, sp, #24
    __HAL_RCC_USART3_CLK_ENABLE();
 80068de:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80068e2:	61da      	str	r2, [r3, #28]
 80068e4:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068e6:	2500      	movs	r5, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 80068e8:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80068ec:	9204      	str	r2, [sp, #16]
 80068ee:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068f0:	699a      	ldr	r2, [r3, #24]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80068f2:	4c20      	ldr	r4, [pc, #128]	@ (8006974 <HAL_UART_MspInit+0x174>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068f4:	f042 0208 	orr.w	r2, r2, #8
 80068f8:	619a      	str	r2, [r3, #24]
 80068fa:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006900:	f003 0308 	and.w	r3, r3, #8
 8006904:	9305      	str	r3, [sp, #20]
 8006906:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006908:	2302      	movs	r3, #2
 800690a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800690e:	2303      	movs	r3, #3
 8006910:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006912:	f000 fe5d 	bl	80075d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006916:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800691a:	4815      	ldr	r0, [pc, #84]	@ (8006970 <HAL_UART_MspInit+0x170>)
 800691c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800691e:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006922:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006924:	f000 fe54 	bl	80075d0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8006928:	4b13      	ldr	r3, [pc, #76]	@ (8006978 <HAL_UART_MspInit+0x178>)
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800692a:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800692c:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006930:	2380      	movs	r3, #128	@ 0x80
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8006932:	e9c4 5505 	strd	r5, r5, [r4, #20]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006936:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800693a:	60a5      	str	r5, [r4, #8]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800693c:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800693e:	f000 fcdf 	bl	8007300 <HAL_DMA_Init>
 8006942:	b108      	cbz	r0, 8006948 <HAL_UART_MspInit+0x148>
      Error_Handler();
 8006944:	f7ff f82e 	bl	80059a4 <Error_Handler>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006948:	2200      	movs	r2, #0
 800694a:	2027      	movs	r0, #39	@ 0x27
 800694c:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800694e:	63f4      	str	r4, [r6, #60]	@ 0x3c
 8006950:	6266      	str	r6, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006952:	f000 fc83 	bl	800725c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006956:	2027      	movs	r0, #39	@ 0x27
 8006958:	e7b7      	b.n	80068ca <HAL_UART_MspInit+0xca>
 800695a:	bf00      	nop
 800695c:	40013800 	.word	0x40013800
 8006960:	40021000 	.word	0x40021000
 8006964:	40010800 	.word	0x40010800
 8006968:	40004400 	.word	0x40004400
 800696c:	40004800 	.word	0x40004800
 8006970:	40010c00 	.word	0x40010c00
 8006974:	20000a60 	.word	0x20000a60
 8006978:	40020030 	.word	0x40020030

0800697c <USART1_Tx_HMIdata>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void USART1_Tx_HMIdata(uint8_t *Tx_Buffer){
 800697c:	b510      	push	{r4, lr}
 800697e:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart1, (uint8_t*)Tx_Buffer, strlen(Tx_Buffer),HAL_MAX_DELAY);
 8006980:	f7f9 fbf0 	bl	8000164 <strlen>
 8006984:	4621      	mov	r1, r4
}
 8006986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*)Tx_Buffer, strlen(Tx_Buffer),HAL_MAX_DELAY);
 800698a:	b282      	uxth	r2, r0
 800698c:	f04f 33ff 	mov.w	r3, #4294967295
 8006990:	4801      	ldr	r0, [pc, #4]	@ (8006998 <USART1_Tx_HMIdata+0x1c>)
 8006992:	f001 bf02 	b.w	800879a <HAL_UART_Transmit>
 8006996:	bf00      	nop
 8006998:	20000b34 	.word	0x20000b34

0800699c <USART2_Tx_BLEdata>:

void USART1_Tx_data(uint8_t *Tx_Buffer){
	HAL_UART_Transmit(&huart1, (uint8_t*)Tx_Buffer, strlen(Tx_Buffer),HAL_MAX_DELAY);
}

void USART2_Tx_BLEdata(uint8_t *Tx_Buffer){
 800699c:	b538      	push	{r3, r4, r5, lr}
	Tx2_cplt_flag = 0;
 800699e:	2300      	movs	r3, #0
 80069a0:	4d06      	ldr	r5, [pc, #24]	@ (80069bc <USART2_Tx_BLEdata+0x20>)
void USART2_Tx_BLEdata(uint8_t *Tx_Buffer){
 80069a2:	4604      	mov	r4, r0
	Tx2_cplt_flag = 0;
 80069a4:	702b      	strb	r3, [r5, #0]
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)Tx_Buffer, strlen(Tx_Buffer));
 80069a6:	f7f9 fbdd 	bl	8000164 <strlen>
 80069aa:	4621      	mov	r1, r4
 80069ac:	b282      	uxth	r2, r0
 80069ae:	4804      	ldr	r0, [pc, #16]	@ (80069c0 <USART2_Tx_BLEdata+0x24>)
 80069b0:	f001 ff41 	bl	8008836 <HAL_UART_Transmit_IT>
	while(!Tx2_cplt_flag);
 80069b4:	782b      	ldrb	r3, [r5, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0fc      	beq.n	80069b4 <USART2_Tx_BLEdata+0x18>
}
 80069ba:	bd38      	pop	{r3, r4, r5, pc}
 80069bc:	20000b7d 	.word	0x20000b7d
 80069c0:	20000aec 	.word	0x20000aec

080069c4 <HAL_UART_TxCpltCallback>:
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)Tx_Buffer, strlen(Tx_Buffer));
	while(!Tx3_cplt_flag);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
	if(huart == &huart2){
 80069c4:	4b05      	ldr	r3, [pc, #20]	@ (80069dc <HAL_UART_TxCpltCallback+0x18>)
 80069c6:	4298      	cmp	r0, r3
 80069c8:	d103      	bne.n	80069d2 <HAL_UART_TxCpltCallback+0xe>
		Tx2_cplt_flag = 1;
 80069ca:	4b05      	ldr	r3, [pc, #20]	@ (80069e0 <HAL_UART_TxCpltCallback+0x1c>)
	}
	if(huart == &huart3){
		Tx3_cplt_flag = 1;
 80069cc:	2201      	movs	r2, #1
 80069ce:	701a      	strb	r2, [r3, #0]
	}
}
 80069d0:	4770      	bx	lr
	if(huart == &huart3){
 80069d2:	4b04      	ldr	r3, [pc, #16]	@ (80069e4 <HAL_UART_TxCpltCallback+0x20>)
 80069d4:	4298      	cmp	r0, r3
 80069d6:	d1fb      	bne.n	80069d0 <HAL_UART_TxCpltCallback+0xc>
		Tx3_cplt_flag = 1;
 80069d8:	4b03      	ldr	r3, [pc, #12]	@ (80069e8 <HAL_UART_TxCpltCallback+0x24>)
 80069da:	e7f7      	b.n	80069cc <HAL_UART_TxCpltCallback+0x8>
 80069dc:	20000aec 	.word	0x20000aec
 80069e0:	20000b7d 	.word	0x20000b7d
 80069e4:	20000aa4 	.word	0x20000aa4
 80069e8:	20000b7c 	.word	0x20000b7c

080069ec <HAL_UART_RxCpltCallback>:

// UART接收完成回调
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80069ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    static uint8_t prev_char = 0;
    static int ret = 0;
    static uint8_t frame_header_valid = 0;
    GPS_Data gps_rsltBuf;

    if (huart == &huart3) {//GPS接收
 80069f0:	4b3d      	ldr	r3, [pc, #244]	@ (8006ae8 <HAL_UART_RxCpltCallback+0xfc>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80069f2:	b091      	sub	sp, #68	@ 0x44
    if (huart == &huart3) {//GPS接收
 80069f4:	4283      	cmp	r3, r0
 80069f6:	d14c      	bne.n	8006a92 <HAL_UART_RxCpltCallback+0xa6>
        uint8_t ch = gps_rx_buffer[gps_rx_index];
 80069f8:	4e3c      	ldr	r6, [pc, #240]	@ (8006aec <HAL_UART_RxCpltCallback+0x100>)
 80069fa:	4f3d      	ldr	r7, [pc, #244]	@ (8006af0 <HAL_UART_RxCpltCallback+0x104>)
 80069fc:	8833      	ldrh	r3, [r6, #0]
 80069fe:	483d      	ldr	r0, [pc, #244]	@ (8006af4 <HAL_UART_RxCpltCallback+0x108>)
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	5cf9      	ldrb	r1, [r7, r3]

        if(ch == '$' || frame_header_valid){
 8006a04:	4c3c      	ldr	r4, [pc, #240]	@ (8006af8 <HAL_UART_RxCpltCallback+0x10c>)
 8006a06:	2924      	cmp	r1, #36	@ 0x24
 8006a08:	4a3c      	ldr	r2, [pc, #240]	@ (8006afc <HAL_UART_RxCpltCallback+0x110>)
 8006a0a:	d001      	beq.n	8006a10 <HAL_UART_RxCpltCallback+0x24>
 8006a0c:	7803      	ldrb	r3, [r0, #0]
 8006a0e:	b193      	cbz	r3, 8006a36 <HAL_UART_RxCpltCallback+0x4a>
						frame_header_valid = 1;
 8006a10:	f04f 0c01 	mov.w	ip, #1
					// 检测帧尾
					if (prev_char == '\r' && ch == '\n') {
 8006a14:	7823      	ldrb	r3, [r4, #0]
						frame_header_valid = 1;
 8006a16:	f880 c000 	strb.w	ip, [r0]
					if (prev_char == '\r' && ch == '\n') {
 8006a1a:	2b0d      	cmp	r3, #13
							gps_rx_buffer[gps_rx_index-1] = '\0'; // 终止字符串
 8006a1c:	8833      	ldrh	r3, [r6, #0]
 8006a1e:	b29b      	uxth	r3, r3
					if (prev_char == '\r' && ch == '\n') {
 8006a20:	d13a      	bne.n	8006a98 <HAL_UART_RxCpltCallback+0xac>
 8006a22:	290a      	cmp	r1, #10
 8006a24:	d138      	bne.n	8006a98 <HAL_UART_RxCpltCallback+0xac>
							gps_rx_buffer[gps_rx_index-1] = '\0'; // 终止字符串
 8006a26:	2500      	movs	r5, #0
 8006a28:	443b      	add	r3, r7
							gps_data_ready = true;
 8006a2a:	f882 c000 	strb.w	ip, [r2]
							gps_rx_buffer[gps_rx_index-1] = '\0'; // 终止字符串
 8006a2e:	f803 5c01 	strb.w	r5, [r3, #-1]
							gps_rx_index = 0;
 8006a32:	8035      	strh	r5, [r6, #0]
							frame_header_valid = 0;
 8006a34:	7005      	strb	r5, [r0, #0]
        }
        else{
        	frame_header_valid = 0;
        }
        prev_char = ch;
        if(gps_data_ready){
 8006a36:	7813      	ldrb	r3, [r2, #0]
        prev_char = ch;
 8006a38:	7021      	strb	r1, [r4, #0]
        if(gps_data_ready){
 8006a3a:	b31b      	cbz	r3, 8006a84 <HAL_UART_RxCpltCallback+0x98>
        	gps_data_ready = 0;
 8006a3c:	2300      	movs	r3, #0
//        	printf("%s\r\n",gps_rx_buffer);
        	ret = process_gps_data(gps_rx_buffer, &gps_rsltBuf);
 8006a3e:	482c      	ldr	r0, [pc, #176]	@ (8006af0 <HAL_UART_RxCpltCallback+0x104>)
 8006a40:	a901      	add	r1, sp, #4
        	gps_data_ready = 0;
 8006a42:	7013      	strb	r3, [r2, #0]
        	ret = process_gps_data(gps_rx_buffer, &gps_rsltBuf);
 8006a44:	f7fa fc6a 	bl	800131c <process_gps_data>

        	if(ret == 0 && strcmp(gps_rsltBuf.header,"GNGGA") == 0 && GGA_data_used){
 8006a48:	b9e0      	cbnz	r0, 8006a84 <HAL_UART_RxCpltCallback+0x98>
 8006a4a:	492d      	ldr	r1, [pc, #180]	@ (8006b00 <HAL_UART_RxCpltCallback+0x114>)
 8006a4c:	a801      	add	r0, sp, #4
 8006a4e:	f7f9 fb7f 	bl	8000150 <strcmp>
 8006a52:	4680      	mov	r8, r0
 8006a54:	bb40      	cbnz	r0, 8006aa8 <HAL_UART_RxCpltCallback+0xbc>
 8006a56:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8006b04 <HAL_UART_RxCpltCallback+0x118>
 8006a5a:	f899 3000 	ldrb.w	r3, [r9]
 8006a5e:	b31b      	cbz	r3, 8006aa8 <HAL_UART_RxCpltCallback+0xbc>
            HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
            GPS_GGA_Data = gps_rsltBuf;
 8006a60:	4c29      	ldr	r4, [pc, #164]	@ (8006b08 <HAL_UART_RxCpltCallback+0x11c>)
            HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8006a62:	2102      	movs	r1, #2
 8006a64:	4829      	ldr	r0, [pc, #164]	@ (8006b0c <HAL_UART_RxCpltCallback+0x120>)
            GPS_GGA_Data = gps_rsltBuf;
 8006a66:	ad01      	add	r5, sp, #4
            HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8006a68:	f000 fe95 	bl	8007796 <HAL_GPIO_TogglePin>
            GPS_GGA_Data = gps_rsltBuf;
 8006a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006a7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        		GGA_data_used = 0;
        	}else if(ret == 0 && strcmp(gps_rsltBuf.header,"GNRMC") == 0 && RMC_data_used){
            HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
            GPS_RMC_Data = gps_rsltBuf;
        		RMC_data_used = 0;
 8006a80:	f889 8000 	strb.w	r8, [r9]
        	}
        }

        HAL_UART_Receive_DMA(&huart3, &gps_rx_buffer[gps_rx_index], 1);
 8006a84:	8831      	ldrh	r1, [r6, #0]
 8006a86:	2201      	movs	r2, #1
 8006a88:	b289      	uxth	r1, r1
 8006a8a:	4817      	ldr	r0, [pc, #92]	@ (8006ae8 <HAL_UART_RxCpltCallback+0xfc>)
 8006a8c:	4439      	add	r1, r7
 8006a8e:	f002 f96f 	bl	8008d70 <HAL_UART_Receive_DMA>
    }
}
 8006a92:	b011      	add	sp, #68	@ 0x44
 8006a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
							if (gps_rx_index < GPS_RX_BUFFER_SIZE-1) {
 8006a98:	2bfe      	cmp	r3, #254	@ 0xfe
									gps_rx_index = 0;
 8006a9a:	bf8f      	iteee	hi
 8006a9c:	2300      	movhi	r3, #0
									gps_rx_index++;
 8006a9e:	8833      	ldrhls	r3, [r6, #0]
 8006aa0:	3301      	addls	r3, #1
 8006aa2:	b29b      	uxthls	r3, r3
									gps_rx_index = 0;
 8006aa4:	8033      	strh	r3, [r6, #0]
 8006aa6:	e7c6      	b.n	8006a36 <HAL_UART_RxCpltCallback+0x4a>
        	}else if(ret == 0 && strcmp(gps_rsltBuf.header,"GNRMC") == 0 && RMC_data_used){
 8006aa8:	4919      	ldr	r1, [pc, #100]	@ (8006b10 <HAL_UART_RxCpltCallback+0x124>)
 8006aaa:	a801      	add	r0, sp, #4
 8006aac:	f7f9 fb50 	bl	8000150 <strcmp>
 8006ab0:	4680      	mov	r8, r0
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d1e6      	bne.n	8006a84 <HAL_UART_RxCpltCallback+0x98>
 8006ab6:	f8df 905c 	ldr.w	r9, [pc, #92]	@ 8006b14 <HAL_UART_RxCpltCallback+0x128>
 8006aba:	f899 3000 	ldrb.w	r3, [r9]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d0e0      	beq.n	8006a84 <HAL_UART_RxCpltCallback+0x98>
            GPS_RMC_Data = gps_rsltBuf;
 8006ac2:	4d15      	ldr	r5, [pc, #84]	@ (8006b18 <HAL_UART_RxCpltCallback+0x12c>)
            HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8006ac4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ac8:	4814      	ldr	r0, [pc, #80]	@ (8006b1c <HAL_UART_RxCpltCallback+0x130>)
            GPS_RMC_Data = gps_rsltBuf;
 8006aca:	ac01      	add	r4, sp, #4
            HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8006acc:	f000 fe63 	bl	8007796 <HAL_GPIO_TogglePin>
            GPS_RMC_Data = gps_rsltBuf;
 8006ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ad2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ad6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006adc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006ae0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006ae4:	e7cc      	b.n	8006a80 <HAL_UART_RxCpltCallback+0x94>
 8006ae6:	bf00      	nop
 8006ae8:	20000aa4 	.word	0x20000aa4
 8006aec:	2000026e 	.word	0x2000026e
 8006af0:	20000270 	.word	0x20000270
 8006af4:	20000a5d 	.word	0x20000a5d
 8006af8:	20000a5c 	.word	0x20000a5c
 8006afc:	2000026c 	.word	0x2000026c
 8006b00:	0800d636 	.word	0x0800d636
 8006b04:	20000001 	.word	0x20000001
 8006b08:	20000230 	.word	0x20000230
 8006b0c:	40011400 	.word	0x40011400
 8006b10:	0800d63c 	.word	0x0800d63c
 8006b14:	20000000 	.word	0x20000000
 8006b18:	200001f4 	.word	0x200001f4
 8006b1c:	40011000 	.word	0x40011000

08006b20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006b20:	f7ff fa2a 	bl	8005f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006b24:	480b      	ldr	r0, [pc, #44]	@ (8006b54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8006b26:	490c      	ldr	r1, [pc, #48]	@ (8006b58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006b28:	4a0c      	ldr	r2, [pc, #48]	@ (8006b5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8006b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b2c:	e002      	b.n	8006b34 <LoopCopyDataInit>

08006b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b32:	3304      	adds	r3, #4

08006b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b38:	d3f9      	bcc.n	8006b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b3a:	4a09      	ldr	r2, [pc, #36]	@ (8006b60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006b3c:	4c09      	ldr	r4, [pc, #36]	@ (8006b64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b40:	e001      	b.n	8006b46 <LoopFillZerobss>

08006b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b44:	3204      	adds	r2, #4

08006b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b48:	d3fb      	bcc.n	8006b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006b4a:	f004 f923 	bl	800ad94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006b4e:	f7fe fdf7 	bl	8005740 <main>
  bx lr
 8006b52:	4770      	bx	lr
  ldr r0, =_sdata
 8006b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006b58:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8006b5c:	0800e160 	.word	0x0800e160
  ldr r2, =_sbss
 8006b60:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8006b64:	20000d00 	.word	0x20000d00

08006b68 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006b68:	e7fe      	b.n	8006b68 <CAN1_RX1_IRQHandler>
	...

08006b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b6c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8006ba8 <HAL_InitTick+0x3c>)
{
 8006b70:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006b72:	781a      	ldrb	r2, [r3, #0]
 8006b74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006b78:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b7c:	4a0b      	ldr	r2, [pc, #44]	@ (8006bac <HAL_InitTick+0x40>)
 8006b7e:	6810      	ldr	r0, [r2, #0]
 8006b80:	fbb0 f0f3 	udiv	r0, r0, r3
 8006b84:	f000 fba8 	bl	80072d8 <HAL_SYSTICK_Config>
 8006b88:	4604      	mov	r4, r0
 8006b8a:	b958      	cbnz	r0, 8006ba4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b8c:	2d0f      	cmp	r5, #15
 8006b8e:	d809      	bhi.n	8006ba4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b90:	4602      	mov	r2, r0
 8006b92:	4629      	mov	r1, r5
 8006b94:	f04f 30ff 	mov.w	r0, #4294967295
 8006b98:	f000 fb60 	bl	800725c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	4b04      	ldr	r3, [pc, #16]	@ (8006bb0 <HAL_InitTick+0x44>)
 8006ba0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8006ba2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006ba4:	2001      	movs	r0, #1
 8006ba6:	e7fc      	b.n	8006ba2 <HAL_InitTick+0x36>
 8006ba8:	20000008 	.word	0x20000008
 8006bac:	20000004 	.word	0x20000004
 8006bb0:	2000000c 	.word	0x2000000c

08006bb4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006bb4:	4a07      	ldr	r2, [pc, #28]	@ (8006bd4 <HAL_Init+0x20>)
{
 8006bb6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006bb8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006bba:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006bbc:	f043 0310 	orr.w	r3, r3, #16
 8006bc0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006bc2:	f000 fb39 	bl	8007238 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8006bc6:	2005      	movs	r0, #5
 8006bc8:	f7ff ffd0 	bl	8006b6c <HAL_InitTick>
  HAL_MspInit();
 8006bcc:	f7ff f922 	bl	8005e14 <HAL_MspInit>
}
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	bd08      	pop	{r3, pc}
 8006bd4:	40022000 	.word	0x40022000

08006bd8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8006bd8:	4a03      	ldr	r2, [pc, #12]	@ (8006be8 <HAL_IncTick+0x10>)
 8006bda:	4b04      	ldr	r3, [pc, #16]	@ (8006bec <HAL_IncTick+0x14>)
 8006bdc:	6811      	ldr	r1, [r2, #0]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	440b      	add	r3, r1
 8006be2:	6013      	str	r3, [r2, #0]
}
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	20000bb0 	.word	0x20000bb0
 8006bec:	20000008 	.word	0x20000008

08006bf0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006bf0:	4b01      	ldr	r3, [pc, #4]	@ (8006bf8 <HAL_GetTick+0x8>)
 8006bf2:	6818      	ldr	r0, [r3, #0]
}
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	20000bb0 	.word	0x20000bb0

08006bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006c00:	f7ff fff6 	bl	8006bf0 <HAL_GetTick>
 8006c04:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c06:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006c08:	bf1e      	ittt	ne
 8006c0a:	4b04      	ldrne	r3, [pc, #16]	@ (8006c1c <HAL_Delay+0x20>)
 8006c0c:	781b      	ldrbne	r3, [r3, #0]
 8006c0e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006c10:	f7ff ffee 	bl	8006bf0 <HAL_GetTick>
 8006c14:	1b43      	subs	r3, r0, r5
 8006c16:	42a3      	cmp	r3, r4
 8006c18:	d3fa      	bcc.n	8006c10 <HAL_Delay+0x14>
  {
  }
}
 8006c1a:	bd38      	pop	{r3, r4, r5, pc}
 8006c1c:	20000008 	.word	0x20000008

08006c20 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006c20:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8006c22:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006c24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c26:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8006c2a:	d11b      	bne.n	8006c64 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006c2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c32:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	6892      	ldr	r2, [r2, #8]
 8006c38:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8006c3c:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8006c40:	d10c      	bne.n	8006c5c <ADC_DMAConvCplt+0x3c>
 8006c42:	7b1a      	ldrb	r2, [r3, #12]
 8006c44:	b952      	cbnz	r2, 8006c5c <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006c46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c4c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006c4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c50:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c52:	bf5e      	ittt	pl
 8006c54:	6a9a      	ldrpl	r2, [r3, #40]	@ 0x28
 8006c56:	f042 0201 	orrpl.w	r2, r2, #1
 8006c5a:	629a      	strpl	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fc f83d 	bl	8002cdc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8006c62:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006c64:	6a1b      	ldr	r3, [r3, #32]
}
 8006c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c6c:	4718      	bx	r3

08006c6e <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
 8006c6e:	4770      	bx	lr

08006c70 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006c70:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006c72:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8006c74:	f7ff fffb 	bl	8006c6e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c78:	bd08      	pop	{r3, pc}

08006c7a <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 8006c7a:	4770      	bx	lr

08006c7c <HAL_ADC_IRQHandler>:
  uint32_t tmp_sr = hadc->Instance->SR;
 8006c7c:	6803      	ldr	r3, [r0, #0]
{
 8006c7e:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 8006c80:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8006c82:	685e      	ldr	r6, [r3, #4]
{
 8006c84:	4604      	mov	r4, r0
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8006c86:	06b0      	lsls	r0, r6, #26
 8006c88:	d526      	bpl.n	8006cd8 <HAL_ADC_IRQHandler+0x5c>
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8006c8a:	07a9      	lsls	r1, r5, #30
 8006c8c:	d524      	bpl.n	8006cd8 <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006c8e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8006c90:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006c92:	bf5e      	ittt	pl
 8006c94:	6aa2      	ldrpl	r2, [r4, #40]	@ 0x28
 8006c96:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 8006c9a:	62a2      	strpl	r2, [r4, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8006ca2:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8006ca6:	d110      	bne.n	8006cca <HAL_ADC_IRQHandler+0x4e>
 8006ca8:	7b22      	ldrb	r2, [r4, #12]
 8006caa:	b972      	cbnz	r2, 8006cca <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	f022 0220 	bic.w	r2, r2, #32
 8006cb2:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006cb4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006cb6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cba:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006cbc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006cbe:	04d8      	lsls	r0, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006cc0:	bf5e      	ittt	pl
 8006cc2:	6aa3      	ldrpl	r3, [r4, #40]	@ 0x28
 8006cc4:	f043 0301 	orrpl.w	r3, r3, #1
 8006cc8:	62a3      	strpl	r3, [r4, #40]	@ 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f7fc f806 	bl	8002cdc <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006cd0:	f06f 0212 	mvn.w	r2, #18
 8006cd4:	6823      	ldr	r3, [r4, #0]
 8006cd6:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8006cd8:	0631      	lsls	r1, r6, #24
 8006cda:	d530      	bpl.n	8006d3e <HAL_ADC_IRQHandler+0xc2>
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8006cdc:	076a      	lsls	r2, r5, #29
 8006cde:	d52e      	bpl.n	8006d3e <HAL_ADC_IRQHandler+0xc2>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006ce0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006ce2:	06db      	lsls	r3, r3, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006ce4:	bf5e      	ittt	pl
 8006ce6:	6aa3      	ldrpl	r3, [r4, #40]	@ 0x28
 8006ce8:	f443 5300 	orrpl.w	r3, r3, #8192	@ 0x2000
 8006cec:	62a3      	strpl	r3, [r4, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8006cee:	6823      	ldr	r3, [r4, #0]
 8006cf0:	689a      	ldr	r2, [r3, #8]
 8006cf2:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
 8006cf6:	f5b2 4fe0 	cmp.w	r2, #28672	@ 0x7000
 8006cfa:	d00a      	beq.n	8006d12 <HAL_ADC_IRQHandler+0x96>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8006cfc:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8006cfe:	0550      	lsls	r0, r2, #21
 8006d00:	d416      	bmi.n	8006d30 <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8006d08:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8006d0c:	d110      	bne.n	8006d30 <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8006d0e:	7b22      	ldrb	r2, [r4, #12]
 8006d10:	b972      	cbnz	r2, 8006d30 <HAL_ADC_IRQHandler+0xb4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d18:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006d1a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006d1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d20:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006d22:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006d24:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d26:	bf5e      	ittt	pl
 8006d28:	6aa3      	ldrpl	r3, [r4, #40]	@ 0x28
 8006d2a:	f043 0301 	orrpl.w	r3, r3, #1
 8006d2e:	62a3      	strpl	r3, [r4, #40]	@ 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006d30:	4620      	mov	r0, r4
 8006d32:	f000 fa7f 	bl	8007234 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006d36:	f06f 020c 	mvn.w	r2, #12
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8006d3e:	0672      	lsls	r2, r6, #25
 8006d40:	d50c      	bpl.n	8006d5c <HAL_ADC_IRQHandler+0xe0>
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8006d42:	07eb      	lsls	r3, r5, #31
 8006d44:	d50a      	bpl.n	8006d5c <HAL_ADC_IRQHandler+0xe0>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006d46:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006d48:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006d4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d4e:	62a3      	str	r3, [r4, #40]	@ 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006d50:	f7ff ff93 	bl	8006c7a <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006d54:	f06f 0201 	mvn.w	r2, #1
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	601a      	str	r2, [r3, #0]
}
 8006d5c:	bd70      	pop	{r4, r5, r6, pc}

08006d5e <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8006d5e:	4770      	bx	lr

08006d60 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d60:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 8006d62:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006d64:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d6a:	6283      	str	r3, [r0, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006d6c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8006d6e:	f043 0304 	orr.w	r3, r3, #4
 8006d72:	62c3      	str	r3, [r0, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006d74:	f7ff fff3 	bl	8006d5e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d78:	bd08      	pop	{r3, pc}
	...

08006d7c <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8006d7c:	2300      	movs	r3, #0
{ 
 8006d7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8006d80:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8006d82:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{ 
 8006d86:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d06c      	beq.n	8006e66 <HAL_ADC_ConfigChannel+0xea>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 8006d92:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006d94:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8006d96:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006d98:	6808      	ldr	r0, [r1, #0]
 8006d9a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8006d9e:	d822      	bhi.n	8006de6 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006da0:	261f      	movs	r6, #31
 8006da2:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8006da4:	3b05      	subs	r3, #5
 8006da6:	409e      	lsls	r6, r3
 8006da8:	ea25 0506 	bic.w	r5, r5, r6
 8006dac:	fa00 f303 	lsl.w	r3, r0, r3
 8006db0:	432b      	orrs	r3, r5
 8006db2:	6353      	str	r3, [r2, #52]	@ 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006db4:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006db6:	688b      	ldr	r3, [r1, #8]
 8006db8:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8006dbc:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006dc0:	d929      	bls.n	8006e16 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006dc2:	68d6      	ldr	r6, [r2, #12]
 8006dc4:	3d1e      	subs	r5, #30
 8006dc6:	40a9      	lsls	r1, r5
 8006dc8:	ea26 0101 	bic.w	r1, r6, r1
 8006dcc:	40ab      	lsls	r3, r5
 8006dce:	430b      	orrs	r3, r1
 8006dd0:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006dd2:	f1a0 0310 	sub.w	r3, r0, #16
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d925      	bls.n	8006e26 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006dda:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8006de2:	b002      	add	sp, #8
 8006de4:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8006de6:	2d0c      	cmp	r5, #12
 8006de8:	f04f 051f 	mov.w	r5, #31
 8006dec:	d809      	bhi.n	8006e02 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8006dee:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 8006df0:	3b23      	subs	r3, #35	@ 0x23
 8006df2:	409d      	lsls	r5, r3
 8006df4:	ea26 0505 	bic.w	r5, r6, r5
 8006df8:	fa00 f303 	lsl.w	r3, r0, r3
 8006dfc:	432b      	orrs	r3, r5
 8006dfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8006e00:	e7d8      	b.n	8006db4 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8006e02:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
 8006e04:	3b41      	subs	r3, #65	@ 0x41
 8006e06:	409d      	lsls	r5, r3
 8006e08:	ea26 0505 	bic.w	r5, r6, r5
 8006e0c:	fa00 f303 	lsl.w	r3, r0, r3
 8006e10:	432b      	orrs	r3, r5
 8006e12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e14:	e7ce      	b.n	8006db4 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006e16:	6910      	ldr	r0, [r2, #16]
 8006e18:	40a9      	lsls	r1, r5
 8006e1a:	ea20 0101 	bic.w	r1, r0, r1
 8006e1e:	40ab      	lsls	r3, r5
 8006e20:	430b      	orrs	r3, r1
 8006e22:	6113      	str	r3, [r2, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006e24:	e7d9      	b.n	8006dda <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8006e26:	4b11      	ldr	r3, [pc, #68]	@ (8006e6c <HAL_ADC_ConfigChannel+0xf0>)
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d116      	bne.n	8006e5a <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006e2c:	6893      	ldr	r3, [r2, #8]
 8006e2e:	021b      	lsls	r3, r3, #8
 8006e30:	d4d3      	bmi.n	8006dda <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8006e32:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006e34:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8006e36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e3a:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006e3c:	d1cd      	bne.n	8006dda <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e70 <HAL_ADC_ConfigChannel+0xf4>)
 8006e40:	4a0c      	ldr	r2, [pc, #48]	@ (8006e74 <HAL_ADC_ConfigChannel+0xf8>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e48:	220a      	movs	r2, #10
 8006e4a:	4353      	muls	r3, r2
            wait_loop_index--;
 8006e4c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8006e4e:	9b01      	ldr	r3, [sp, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d0c2      	beq.n	8006dda <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8006e54:	9b01      	ldr	r3, [sp, #4]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	e7f8      	b.n	8006e4c <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e5a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8006e5c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e5e:	f043 0320 	orr.w	r3, r3, #32
 8006e62:	62a3      	str	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8006e64:	e7ba      	b.n	8006ddc <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8006e66:	2002      	movs	r0, #2
 8006e68:	e7bb      	b.n	8006de2 <HAL_ADC_ConfigChannel+0x66>
 8006e6a:	bf00      	nop
 8006e6c:	40012400 	.word	0x40012400
 8006e70:	20000004 	.word	0x20000004
 8006e74:	000f4240 	.word	0x000f4240

08006e78 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8006e78:	2300      	movs	r3, #0
{
 8006e7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8006e7c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006e7e:	6803      	ldr	r3, [r0, #0]
{
 8006e80:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	07d2      	lsls	r2, r2, #31
 8006e86:	d502      	bpl.n	8006e8e <ADC_Enable+0x16>
  return HAL_OK;
 8006e88:	2000      	movs	r0, #0
}
 8006e8a:	b003      	add	sp, #12
 8006e8c:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8006e8e:	689a      	ldr	r2, [r3, #8]
 8006e90:	f042 0201 	orr.w	r2, r2, #1
 8006e94:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006e96:	4b14      	ldr	r3, [pc, #80]	@ (8006ee8 <ADC_Enable+0x70>)
 8006e98:	4a14      	ldr	r2, [pc, #80]	@ (8006eec <ADC_Enable+0x74>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8006ea0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8006ea2:	9b01      	ldr	r3, [sp, #4]
 8006ea4:	b9e3      	cbnz	r3, 8006ee0 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8006ea6:	f7ff fea3 	bl	8006bf0 <HAL_GetTick>
 8006eaa:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	07db      	lsls	r3, r3, #31
 8006eb2:	d4e9      	bmi.n	8006e88 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006eb4:	f7ff fe9c 	bl	8006bf0 <HAL_GetTick>
 8006eb8:	1b40      	subs	r0, r0, r5
 8006eba:	2802      	cmp	r0, #2
 8006ebc:	d9f6      	bls.n	8006eac <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f013 0301 	ands.w	r3, r3, #1
 8006ec6:	d1f1      	bne.n	8006eac <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ec8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          return HAL_ERROR;
 8006eca:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ecc:	f042 0210 	orr.w	r2, r2, #16
 8006ed0:	62a2      	str	r2, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ed2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 8006ed4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ed8:	f042 0201 	orr.w	r2, r2, #1
 8006edc:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8006ede:	e7d4      	b.n	8006e8a <ADC_Enable+0x12>
      wait_loop_index--;
 8006ee0:	9b01      	ldr	r3, [sp, #4]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	e7dc      	b.n	8006ea0 <ADC_Enable+0x28>
 8006ee6:	bf00      	nop
 8006ee8:	20000004 	.word	0x20000004
 8006eec:	000f4240 	.word	0x000f4240

08006ef0 <HAL_ADC_Start_DMA>:
{
 8006ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8006ef4:	4b40      	ldr	r3, [pc, #256]	@ (8006ff8 <HAL_ADC_Start_DMA+0x108>)
{
 8006ef6:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8006ef8:	6802      	ldr	r2, [r0, #0]
{
 8006efa:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8006efc:	429a      	cmp	r2, r3
{
 8006efe:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8006f00:	d002      	beq.n	8006f08 <HAL_ADC_Start_DMA+0x18>
 8006f02:	493e      	ldr	r1, [pc, #248]	@ (8006ffc <HAL_ADC_Start_DMA+0x10c>)
 8006f04:	428a      	cmp	r2, r1
 8006f06:	d103      	bne.n	8006f10 <HAL_ADC_Start_DMA+0x20>
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8006f0e:	d16e      	bne.n	8006fee <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8006f10:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d06c      	beq.n	8006ff2 <HAL_ADC_Start_DMA+0x102>
 8006f18:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8006f1a:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8006f1c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8006f20:	f7ff ffaa 	bl	8006e78 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8006f24:	4606      	mov	r6, r0
 8006f26:	2800      	cmp	r0, #0
 8006f28:	d15d      	bne.n	8006fe6 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8006f2a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006f2c:	6821      	ldr	r1, [r4, #0]
 8006f2e:	4b33      	ldr	r3, [pc, #204]	@ (8006ffc <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8006f30:	f425 6570 	bic.w	r5, r5, #3840	@ 0xf00
 8006f34:	f025 0501 	bic.w	r5, r5, #1
 8006f38:	f445 7580 	orr.w	r5, r5, #256	@ 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006f3c:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8006f3e:	62a5      	str	r5, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006f40:	d104      	bne.n	8006f4c <HAL_ADC_Start_DMA+0x5c>
 8006f42:	4a2d      	ldr	r2, [pc, #180]	@ (8006ff8 <HAL_ADC_Start_DMA+0x108>)
 8006f44:	6853      	ldr	r3, [r2, #4]
 8006f46:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8006f4a:	d13e      	bne.n	8006fca <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006f4c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006f4e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f52:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006f54:	684b      	ldr	r3, [r1, #4]
 8006f56:	055a      	lsls	r2, r3, #21
 8006f58:	d505      	bpl.n	8006f66 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006f5a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006f5c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006f60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006f64:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006f66:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006f68:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006f6a:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006f6e:	bf18      	it	ne
 8006f70:	6ae3      	ldrne	r3, [r4, #44]	@ 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006f72:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006f74:	bf18      	it	ne
 8006f76:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8006f7a:	62e3      	str	r3, [r4, #44]	@ 0x2c
      __HAL_UNLOCK(hadc);
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006f82:	4b1f      	ldr	r3, [pc, #124]	@ (8007000 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006f84:	314c      	adds	r1, #76	@ 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006f86:	6283      	str	r3, [r0, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006f88:	4b1e      	ldr	r3, [pc, #120]	@ (8007004 <HAL_ADC_Start_DMA+0x114>)
 8006f8a:	62c3      	str	r3, [r0, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8007008 <HAL_ADC_Start_DMA+0x118>)
 8006f8e:	6303      	str	r3, [r0, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8006f90:	f06f 0302 	mvn.w	r3, #2
 8006f94:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006f98:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8006f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fa0:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006fa4:	4643      	mov	r3, r8
 8006fa6:	f000 f9dd 	bl	8007364 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	689a      	ldr	r2, [r3, #8]
 8006fae:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8006fb2:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8006fb6:	689a      	ldr	r2, [r3, #8]
 8006fb8:	bf0c      	ite	eq
 8006fba:	f442 02a0 	orreq.w	r2, r2, #5242880	@ 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8006fbe:	f442 1280 	orrne.w	r2, r2, #1048576	@ 0x100000
 8006fc2:	609a      	str	r2, [r3, #8]
}
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006fca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006fcc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fd0:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8006fd2:	6853      	ldr	r3, [r2, #4]
 8006fd4:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006fd6:	bf41      	itttt	mi
 8006fd8:	6aa0      	ldrmi	r0, [r4, #40]	@ 0x28
 8006fda:	f420 5040 	bicmi.w	r0, r0, #12288	@ 0x3000
 8006fde:	f440 5080 	orrmi.w	r0, r0, #4096	@ 0x1000
 8006fe2:	62a0      	strmi	r0, [r4, #40]	@ 0x28
 8006fe4:	e7bf      	b.n	8006f66 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8006fec:	e7ea      	b.n	8006fc4 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8006fee:	2601      	movs	r6, #1
 8006ff0:	e7e8      	b.n	8006fc4 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8006ff2:	2602      	movs	r6, #2
 8006ff4:	e7e6      	b.n	8006fc4 <HAL_ADC_Start_DMA+0xd4>
 8006ff6:	bf00      	nop
 8006ff8:	40012400 	.word	0x40012400
 8006ffc:	40012800 	.word	0x40012800
 8007000:	08006c21 	.word	0x08006c21
 8007004:	08006c71 	.word	0x08006c71
 8007008:	08006d61 	.word	0x08006d61

0800700c <ADC_ConversionStop_Disable>:
{
 800700c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800700e:	6803      	ldr	r3, [r0, #0]
{
 8007010:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	07d1      	lsls	r1, r2, #31
 8007016:	d401      	bmi.n	800701c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8007018:	2000      	movs	r0, #0
}
 800701a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	f022 0201 	bic.w	r2, r2, #1
 8007022:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8007024:	f7ff fde4 	bl	8006bf0 <HAL_GetTick>
 8007028:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	07db      	lsls	r3, r3, #31
 8007030:	d5f2      	bpl.n	8007018 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007032:	f7ff fddd 	bl	8006bf0 <HAL_GetTick>
 8007036:	1b40      	subs	r0, r0, r5
 8007038:	2802      	cmp	r0, #2
 800703a:	d9f6      	bls.n	800702a <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	07da      	lsls	r2, r3, #31
 8007042:	d5f2      	bpl.n	800702a <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007044:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          return HAL_ERROR;
 8007046:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007048:	f043 0310 	orr.w	r3, r3, #16
 800704c:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800704e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007050:	f043 0301 	orr.w	r3, r3, #1
 8007054:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8007056:	e7e0      	b.n	800701a <ADC_ConversionStop_Disable+0xe>

08007058 <HAL_ADC_Init>:
{
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 800705a:	4604      	mov	r4, r0
 800705c:	2800      	cmp	r0, #0
 800705e:	d06d      	beq.n	800713c <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007060:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007062:	b923      	cbnz	r3, 800706e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8007064:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8007066:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 800706a:	f7fb fdd3 	bl	8002c14 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800706e:	4620      	mov	r0, r4
 8007070:	f7ff ffcc 	bl	800700c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007074:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007076:	f013 0310 	ands.w	r3, r3, #16
 800707a:	d161      	bne.n	8007140 <HAL_ADC_Init+0xe8>
 800707c:	2800      	cmp	r0, #0
 800707e:	d15f      	bne.n	8007140 <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 8007080:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007082:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8007084:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8007088:	f022 0202 	bic.w	r2, r2, #2
 800708c:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007090:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007092:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8007094:	62a2      	str	r2, [r4, #40]	@ 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8007096:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007098:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800709a:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800709e:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80070a2:	d036      	beq.n	8007112 <HAL_ADC_Init+0xba>
 80070a4:	1e77      	subs	r7, r6, #1
 80070a6:	427d      	negs	r5, r7
 80070a8:	417d      	adcs	r5, r7
 80070aa:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80070ac:	7d27      	ldrb	r7, [r4, #20]
 80070ae:	2f01      	cmp	r7, #1
 80070b0:	d106      	bne.n	80070c0 <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80070b2:	bb82      	cbnz	r2, 8007116 <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80070b4:	69a2      	ldr	r2, [r4, #24]
 80070b6:	3a01      	subs	r2, #1
 80070b8:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 80070bc:	f442 6500 	orr.w	r5, r2, #2048	@ 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80070c0:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80070c2:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80070c6:	6857      	ldr	r7, [r2, #4]
 80070c8:	f427 4769 	bic.w	r7, r7, #59648	@ 0xe900
 80070cc:	ea45 0507 	orr.w	r5, r5, r7
 80070d0:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80070d2:	6897      	ldr	r7, [r2, #8]
 80070d4:	4d1d      	ldr	r5, [pc, #116]	@ (800714c <HAL_ADC_Init+0xf4>)
 80070d6:	ea05 0507 	and.w	r5, r5, r7
 80070da:	ea45 0501 	orr.w	r5, r5, r1
 80070de:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80070e0:	d001      	beq.n	80070e6 <HAL_ADC_Init+0x8e>
 80070e2:	2e01      	cmp	r6, #1
 80070e4:	d102      	bne.n	80070ec <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80070e6:	6923      	ldr	r3, [r4, #16]
 80070e8:	3b01      	subs	r3, #1
 80070ea:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80070ec:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 80070ee:	f425 0570 	bic.w	r5, r5, #15728640	@ 0xf00000
 80070f2:	432b      	orrs	r3, r5
 80070f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80070f6:	6892      	ldr	r2, [r2, #8]
 80070f8:	4b15      	ldr	r3, [pc, #84]	@ (8007150 <HAL_ADC_Init+0xf8>)
 80070fa:	4013      	ands	r3, r2
 80070fc:	4299      	cmp	r1, r3
 80070fe:	d113      	bne.n	8007128 <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 8007100:	2300      	movs	r3, #0
 8007102:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8007104:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007106:	f023 0303 	bic.w	r3, r3, #3
 800710a:	f043 0301 	orr.w	r3, r3, #1
 800710e:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8007110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007112:	4635      	mov	r5, r6
 8007114:	e7ca      	b.n	80070ac <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007116:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007118:	f042 0220 	orr.w	r2, r2, #32
 800711c:	62a2      	str	r2, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800711e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007120:	f042 0201 	orr.w	r2, r2, #1
 8007124:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8007126:	e7cb      	b.n	80070c0 <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 8007128:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800712a:	f023 0312 	bic.w	r3, r3, #18
 800712e:	f043 0310 	orr.w	r3, r3, #16
 8007132:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007134:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007136:	f043 0301 	orr.w	r3, r3, #1
 800713a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    return HAL_ERROR;
 800713c:	2001      	movs	r0, #1
 800713e:	e7e7      	b.n	8007110 <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007140:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007142:	f043 0310 	orr.w	r3, r3, #16
 8007146:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8007148:	e7f8      	b.n	800713c <HAL_ADC_Init+0xe4>
 800714a:	bf00      	nop
 800714c:	ffe1f7fd 	.word	0xffe1f7fd
 8007150:	ff1f0efe 	.word	0xff1f0efe

08007154 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8007154:	2300      	movs	r3, #0
{
 8007156:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8007158:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800715a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 800715e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8007160:	2b01      	cmp	r3, #1
 8007162:	d062      	beq.n	800722a <HAL_ADCEx_Calibration_Start+0xd6>
 8007164:	2301      	movs	r3, #1
 8007166:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800716a:	f7ff ff4f 	bl	800700c <ADC_ConversionStop_Disable>
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800716e:	4620      	mov	r0, r4
 8007170:	f7ff fe82 	bl	8006e78 <ADC_Enable>

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8007174:	4605      	mov	r5, r0
 8007176:	2800      	cmp	r0, #0
 8007178:	d12f      	bne.n	80071da <HAL_ADCEx_Calibration_Start+0x86>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800717a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800717c:	2002      	movs	r0, #2
     ADC_STATE_CLR_SET(hadc->State,
 800717e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007182:	f023 0302 	bic.w	r3, r3, #2
 8007186:	f043 0302 	orr.w	r3, r3, #2
 800718a:	62a3      	str	r3, [r4, #40]	@ 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800718c:	4b28      	ldr	r3, [pc, #160]	@ (8007230 <HAL_ADCEx_Calibration_Start+0xdc>)
 800718e:	681e      	ldr	r6, [r3, #0]
 8007190:	f000 fe0e 	bl	8007db0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007194:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8007198:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 800719a:	9601      	str	r6, [sp, #4]

    while(wait_loop_index != 0U)
 800719c:	9b01      	ldr	r3, [sp, #4]
 800719e:	bb03      	cbnz	r3, 80071e2 <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80071a0:	6822      	ldr	r2, [r4, #0]
 80071a2:	6893      	ldr	r3, [r2, #8]
 80071a4:	f043 0308 	orr.w	r3, r3, #8
 80071a8:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 80071aa:	f7ff fd21 	bl	8006bf0 <HAL_GetTick>
 80071ae:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	689a      	ldr	r2, [r3, #8]
 80071b4:	0711      	lsls	r1, r2, #28
 80071b6:	d418      	bmi.n	80071ea <HAL_ADCEx_Calibration_Start+0x96>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80071b8:	689a      	ldr	r2, [r3, #8]
 80071ba:	f042 0204 	orr.w	r2, r2, #4
 80071be:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80071c0:	f7ff fd16 	bl	8006bf0 <HAL_GetTick>
 80071c4:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	075b      	lsls	r3, r3, #29
 80071cc:	d423      	bmi.n	8007216 <HAL_ADCEx_Calibration_Start+0xc2>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80071ce:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80071d0:	f023 0303 	bic.w	r3, r3, #3
 80071d4:	f043 0301 	orr.w	r3, r3, #1
 80071d8:	62a3      	str	r3, [r4, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80071da:	2300      	movs	r3, #0
 80071dc:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80071e0:	e016      	b.n	8007210 <HAL_ADCEx_Calibration_Start+0xbc>
      wait_loop_index--;
 80071e2:	9b01      	ldr	r3, [sp, #4]
 80071e4:	3b01      	subs	r3, #1
 80071e6:	9301      	str	r3, [sp, #4]
 80071e8:	e7d8      	b.n	800719c <HAL_ADCEx_Calibration_Start+0x48>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80071ea:	f7ff fd01 	bl	8006bf0 <HAL_GetTick>
 80071ee:	1b80      	subs	r0, r0, r6
 80071f0:	280a      	cmp	r0, #10
 80071f2:	d9dd      	bls.n	80071b0 <HAL_ADCEx_Calibration_Start+0x5c>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80071f4:	6823      	ldr	r3, [r4, #0]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	0718      	lsls	r0, r3, #28
 80071fa:	d5d9      	bpl.n	80071b0 <HAL_ADCEx_Calibration_Start+0x5c>
          ADC_STATE_CLR_SET(hadc->State,
 80071fc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          return HAL_ERROR;
 80071fe:	2501      	movs	r5, #1
          ADC_STATE_CLR_SET(hadc->State,
 8007200:	f023 0312 	bic.w	r3, r3, #18
 8007204:	f043 0310 	orr.w	r3, r3, #16
 8007208:	62a3      	str	r3, [r4, #40]	@ 0x28
          __HAL_UNLOCK(hadc);
 800720a:	2300      	movs	r3, #0
 800720c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8007210:	4628      	mov	r0, r5
 8007212:	b002      	add	sp, #8
 8007214:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8007216:	f7ff fceb 	bl	8006bf0 <HAL_GetTick>
 800721a:	1b80      	subs	r0, r0, r6
 800721c:	280a      	cmp	r0, #10
 800721e:	d9d2      	bls.n	80071c6 <HAL_ADCEx_Calibration_Start+0x72>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	075a      	lsls	r2, r3, #29
 8007226:	d5ce      	bpl.n	80071c6 <HAL_ADCEx_Calibration_Start+0x72>
 8007228:	e7e8      	b.n	80071fc <HAL_ADCEx_Calibration_Start+0xa8>
  __HAL_LOCK(hadc);
 800722a:	2502      	movs	r5, #2
 800722c:	e7f0      	b.n	8007210 <HAL_ADCEx_Calibration_Start+0xbc>
 800722e:	bf00      	nop
 8007230:	20000004 	.word	0x20000004

08007234 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8007234:	4770      	bx	lr
	...

08007238 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007238:	4907      	ldr	r1, [pc, #28]	@ (8007258 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800723a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800723c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800723e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007242:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007246:	0412      	lsls	r2, r2, #16
 8007248:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800724a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800724c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007250:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8007254:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007256:	4770      	bx	lr
 8007258:	e000ed00 	.word	0xe000ed00

0800725c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800725c:	4b15      	ldr	r3, [pc, #84]	@ (80072b4 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800725e:	b530      	push	{r4, r5, lr}
 8007260:	68dc      	ldr	r4, [r3, #12]
 8007262:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007266:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800726a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800726c:	2b04      	cmp	r3, #4
 800726e:	bf28      	it	cs
 8007270:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007272:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007274:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007278:	bf94      	ite	ls
 800727a:	2400      	movls	r4, #0
 800727c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800727e:	fa05 f303 	lsl.w	r3, r5, r3
 8007282:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007286:	40a5      	lsls	r5, r4
 8007288:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800728c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800728e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007290:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007294:	bfac      	ite	ge
 8007296:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800729a:	4a07      	ldrlt	r2, [pc, #28]	@ (80072b8 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800729c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	bfab      	itete	ge
 80072a4:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072a8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072ac:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072b0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80072b2:	bd30      	pop	{r4, r5, pc}
 80072b4:	e000ed00 	.word	0xe000ed00
 80072b8:	e000ed14 	.word	0xe000ed14

080072bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80072bc:	2800      	cmp	r0, #0
 80072be:	db07      	blt.n	80072d0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072c0:	2301      	movs	r3, #1
 80072c2:	0941      	lsrs	r1, r0, #5
 80072c4:	4a03      	ldr	r2, [pc, #12]	@ (80072d4 <HAL_NVIC_EnableIRQ+0x18>)
 80072c6:	f000 001f 	and.w	r0, r0, #31
 80072ca:	4083      	lsls	r3, r0
 80072cc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	e000e100 	.word	0xe000e100

080072d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80072d8:	3801      	subs	r0, #1
 80072da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80072de:	d20b      	bcs.n	80072f8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072e4:	21f0      	movs	r1, #240	@ 0xf0
 80072e6:	4a05      	ldr	r2, [pc, #20]	@ (80072fc <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072e8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072ea:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072ee:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072f0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072f2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072f4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072f6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80072f8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80072fa:	4770      	bx	lr
 80072fc:	e000ed00 	.word	0xe000ed00

08007300 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007300:	4603      	mov	r3, r0
{
 8007302:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8007304:	b340      	cbz	r0, 8007358 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007306:	2114      	movs	r1, #20
 8007308:	6800      	ldr	r0, [r0, #0]
 800730a:	4a14      	ldr	r2, [pc, #80]	@ (800735c <HAL_DMA_Init+0x5c>)
 800730c:	4402      	add	r2, r0
 800730e:	fbb2 f2f1 	udiv	r2, r2, r1
 8007312:	0092      	lsls	r2, r2, #2
 8007314:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8007316:	4a12      	ldr	r2, [pc, #72]	@ (8007360 <HAL_DMA_Init+0x60>)
 8007318:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800731a:	2202      	movs	r2, #2
 800731c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007320:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 8007324:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007326:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 8007328:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800732a:	4322      	orrs	r2, r4
 800732c:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800732e:	f421 517f 	bic.w	r1, r1, #16320	@ 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007332:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007334:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007336:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800733a:	4322      	orrs	r2, r4
 800733c:	699c      	ldr	r4, [r3, #24]
 800733e:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8007340:	69dc      	ldr	r4, [r3, #28]
 8007342:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8007344:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007346:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007348:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800734a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800734c:	6398      	str	r0, [r3, #56]	@ 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800734e:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8007352:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
}
 8007356:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007358:	2001      	movs	r0, #1
 800735a:	e7fc      	b.n	8007356 <HAL_DMA_Init+0x56>
 800735c:	bffdfff8 	.word	0xbffdfff8
 8007360:	40020000 	.word	0x40020000

08007364 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007364:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007366:	f890 4020 	ldrb.w	r4, [r0, #32]
 800736a:	2c01      	cmp	r4, #1
 800736c:	d034      	beq.n	80073d8 <HAL_DMA_Start_IT+0x74>
 800736e:	2401      	movs	r4, #1
 8007370:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007374:	f890 4021 	ldrb.w	r4, [r0, #33]	@ 0x21
 8007378:	2c01      	cmp	r4, #1
 800737a:	b2e5      	uxtb	r5, r4
 800737c:	f04f 0400 	mov.w	r4, #0
 8007380:	d128      	bne.n	80073d4 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007382:	2602      	movs	r6, #2
 8007384:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007388:	6384      	str	r4, [r0, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800738a:	6804      	ldr	r4, [r0, #0]
 800738c:	6826      	ldr	r6, [r4, #0]
 800738e:	f026 0601 	bic.w	r6, r6, #1
 8007392:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007394:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 8007398:	40bd      	lsls	r5, r7
 800739a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800739c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800739e:	6843      	ldr	r3, [r0, #4]
 80073a0:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80073a2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80073a4:	bf0b      	itete	eq
 80073a6:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80073a8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80073aa:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80073ac:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80073ae:	b14b      	cbz	r3, 80073c4 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 80073b6:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80073b8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	f043 0301 	orr.w	r3, r3, #1
 80073c0:	6023      	str	r3, [r4, #0]
}
 80073c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	f023 0304 	bic.w	r3, r3, #4
 80073ca:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	f043 030a 	orr.w	r3, r3, #10
 80073d2:	e7f0      	b.n	80073b6 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 80073d4:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 80073d8:	2002      	movs	r0, #2
 80073da:	e7f2      	b.n	80073c2 <HAL_DMA_Start_IT+0x5e>

080073dc <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80073dc:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{
 80073e0:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80073e2:	2a02      	cmp	r2, #2
 80073e4:	d006      	beq.n	80073f4 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073e6:	2204      	movs	r2, #4
 80073e8:	6382      	str	r2, [r0, #56]	@ 0x38
    return HAL_ERROR;
 80073ea:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2020 	strb.w	r2, [r3, #32]
}
 80073f2:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073f4:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80073f6:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073f8:	6811      	ldr	r1, [r2, #0]
 80073fa:	f021 010e 	bic.w	r1, r1, #14
 80073fe:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8007400:	6811      	ldr	r1, [r2, #0]
 8007402:	f021 0101 	bic.w	r1, r1, #1
 8007406:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007408:	2101      	movs	r1, #1
 800740a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800740c:	fa01 f202 	lsl.w	r2, r1, r2
 8007410:	6042      	str	r2, [r0, #4]
  return status; 
 8007412:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8007414:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  return status; 
 8007418:	e7e8      	b.n	80073ec <HAL_DMA_Abort+0x10>
	...

0800741c <HAL_DMA_Abort_IT>:
{  
 800741c:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800741e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8007422:	2b02      	cmp	r3, #2
 8007424:	d003      	beq.n	800742e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007426:	2304      	movs	r3, #4
 8007428:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 800742a:	2001      	movs	r0, #1
}
 800742c:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800742e:	6803      	ldr	r3, [r0, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	f022 020e 	bic.w	r2, r2, #14
 8007436:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	f022 0201 	bic.w	r2, r2, #1
 800743e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007440:	4a17      	ldr	r2, [pc, #92]	@ (80074a0 <HAL_DMA_Abort_IT+0x84>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d01f      	beq.n	8007486 <HAL_DMA_Abort_IT+0x6a>
 8007446:	3214      	adds	r2, #20
 8007448:	4293      	cmp	r3, r2
 800744a:	d01e      	beq.n	800748a <HAL_DMA_Abort_IT+0x6e>
 800744c:	3214      	adds	r2, #20
 800744e:	4293      	cmp	r3, r2
 8007450:	d01d      	beq.n	800748e <HAL_DMA_Abort_IT+0x72>
 8007452:	3214      	adds	r2, #20
 8007454:	4293      	cmp	r3, r2
 8007456:	d01d      	beq.n	8007494 <HAL_DMA_Abort_IT+0x78>
 8007458:	3214      	adds	r2, #20
 800745a:	4293      	cmp	r3, r2
 800745c:	d01d      	beq.n	800749a <HAL_DMA_Abort_IT+0x7e>
 800745e:	3214      	adds	r2, #20
 8007460:	4293      	cmp	r3, r2
 8007462:	bf14      	ite	ne
 8007464:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8007468:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 800746c:	4a0d      	ldr	r2, [pc, #52]	@ (80074a4 <HAL_DMA_Abort_IT+0x88>)
 800746e:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8007470:	2301      	movs	r3, #1
 8007472:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8007476:	2300      	movs	r3, #0
 8007478:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800747c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800747e:	b103      	cbz	r3, 8007482 <HAL_DMA_Abort_IT+0x66>
      hdma->XferAbortCallback(hdma);
 8007480:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8007482:	2000      	movs	r0, #0
 8007484:	e7d2      	b.n	800742c <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007486:	2301      	movs	r3, #1
 8007488:	e7f0      	b.n	800746c <HAL_DMA_Abort_IT+0x50>
 800748a:	2310      	movs	r3, #16
 800748c:	e7ee      	b.n	800746c <HAL_DMA_Abort_IT+0x50>
 800748e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007492:	e7eb      	b.n	800746c <HAL_DMA_Abort_IT+0x50>
 8007494:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007498:	e7e8      	b.n	800746c <HAL_DMA_Abort_IT+0x50>
 800749a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800749e:	e7e5      	b.n	800746c <HAL_DMA_Abort_IT+0x50>
 80074a0:	40020008 	.word	0x40020008
 80074a4:	40020000 	.word	0x40020000

080074a8 <HAL_DMA_IRQHandler>:
{
 80074a8:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80074aa:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80074ac:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80074ae:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80074b0:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80074b2:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80074b4:	4095      	lsls	r5, r2
 80074b6:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80074b8:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80074ba:	d032      	beq.n	8007522 <HAL_DMA_IRQHandler+0x7a>
 80074bc:	074d      	lsls	r5, r1, #29
 80074be:	d530      	bpl.n	8007522 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80074c4:	bf5e      	ittt	pl
 80074c6:	681a      	ldrpl	r2, [r3, #0]
 80074c8:	f022 0204 	bicpl.w	r2, r2, #4
 80074cc:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80074ce:	4a3e      	ldr	r2, [pc, #248]	@ (80075c8 <HAL_DMA_IRQHandler+0x120>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d019      	beq.n	8007508 <HAL_DMA_IRQHandler+0x60>
 80074d4:	3214      	adds	r2, #20
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d018      	beq.n	800750c <HAL_DMA_IRQHandler+0x64>
 80074da:	3214      	adds	r2, #20
 80074dc:	4293      	cmp	r3, r2
 80074de:	d017      	beq.n	8007510 <HAL_DMA_IRQHandler+0x68>
 80074e0:	3214      	adds	r2, #20
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d017      	beq.n	8007516 <HAL_DMA_IRQHandler+0x6e>
 80074e6:	3214      	adds	r2, #20
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d017      	beq.n	800751c <HAL_DMA_IRQHandler+0x74>
 80074ec:	3214      	adds	r2, #20
 80074ee:	4293      	cmp	r3, r2
 80074f0:	bf14      	ite	ne
 80074f2:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 80074f6:	f44f 0380 	moveq.w	r3, #4194304	@ 0x400000
 80074fa:	4a34      	ldr	r2, [pc, #208]	@ (80075cc <HAL_DMA_IRQHandler+0x124>)
 80074fc:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80074fe:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 8007500:	2b00      	cmp	r3, #0
 8007502:	d05e      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x11a>
}
 8007504:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8007506:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007508:	2304      	movs	r3, #4
 800750a:	e7f6      	b.n	80074fa <HAL_DMA_IRQHandler+0x52>
 800750c:	2340      	movs	r3, #64	@ 0x40
 800750e:	e7f4      	b.n	80074fa <HAL_DMA_IRQHandler+0x52>
 8007510:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007514:	e7f1      	b.n	80074fa <HAL_DMA_IRQHandler+0x52>
 8007516:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800751a:	e7ee      	b.n	80074fa <HAL_DMA_IRQHandler+0x52>
 800751c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007520:	e7eb      	b.n	80074fa <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8007522:	2502      	movs	r5, #2
 8007524:	4095      	lsls	r5, r2
 8007526:	4225      	tst	r5, r4
 8007528:	d035      	beq.n	8007596 <HAL_DMA_IRQHandler+0xee>
 800752a:	078d      	lsls	r5, r1, #30
 800752c:	d533      	bpl.n	8007596 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	0694      	lsls	r4, r2, #26
 8007532:	d406      	bmi.n	8007542 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	f022 020a 	bic.w	r2, r2, #10
 800753a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800753c:	2201      	movs	r2, #1
 800753e:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007542:	4a21      	ldr	r2, [pc, #132]	@ (80075c8 <HAL_DMA_IRQHandler+0x120>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d019      	beq.n	800757c <HAL_DMA_IRQHandler+0xd4>
 8007548:	3214      	adds	r2, #20
 800754a:	4293      	cmp	r3, r2
 800754c:	d018      	beq.n	8007580 <HAL_DMA_IRQHandler+0xd8>
 800754e:	3214      	adds	r2, #20
 8007550:	4293      	cmp	r3, r2
 8007552:	d017      	beq.n	8007584 <HAL_DMA_IRQHandler+0xdc>
 8007554:	3214      	adds	r2, #20
 8007556:	4293      	cmp	r3, r2
 8007558:	d017      	beq.n	800758a <HAL_DMA_IRQHandler+0xe2>
 800755a:	3214      	adds	r2, #20
 800755c:	4293      	cmp	r3, r2
 800755e:	d017      	beq.n	8007590 <HAL_DMA_IRQHandler+0xe8>
 8007560:	3214      	adds	r2, #20
 8007562:	4293      	cmp	r3, r2
 8007564:	bf14      	ite	ne
 8007566:	f04f 7300 	movne.w	r3, #33554432	@ 0x2000000
 800756a:	f44f 1300 	moveq.w	r3, #2097152	@ 0x200000
 800756e:	4a17      	ldr	r2, [pc, #92]	@ (80075cc <HAL_DMA_IRQHandler+0x124>)
 8007570:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8007572:	2300      	movs	r3, #0
 8007574:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8007578:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800757a:	e7c1      	b.n	8007500 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800757c:	2302      	movs	r3, #2
 800757e:	e7f6      	b.n	800756e <HAL_DMA_IRQHandler+0xc6>
 8007580:	2320      	movs	r3, #32
 8007582:	e7f4      	b.n	800756e <HAL_DMA_IRQHandler+0xc6>
 8007584:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007588:	e7f1      	b.n	800756e <HAL_DMA_IRQHandler+0xc6>
 800758a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800758e:	e7ee      	b.n	800756e <HAL_DMA_IRQHandler+0xc6>
 8007590:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007594:	e7eb      	b.n	800756e <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007596:	2508      	movs	r5, #8
 8007598:	4095      	lsls	r5, r2
 800759a:	4225      	tst	r5, r4
 800759c:	d011      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x11a>
 800759e:	0709      	lsls	r1, r1, #28
 80075a0:	d50f      	bpl.n	80075c2 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075a2:	6819      	ldr	r1, [r3, #0]
 80075a4:	f021 010e 	bic.w	r1, r1, #14
 80075a8:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80075aa:	2301      	movs	r3, #1
 80075ac:	fa03 f202 	lsl.w	r2, r3, r2
 80075b0:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80075b2:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80075b4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 80075b8:	2300      	movs	r3, #0
 80075ba:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80075be:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80075c0:	e79e      	b.n	8007500 <HAL_DMA_IRQHandler+0x58>
}
 80075c2:	bc70      	pop	{r4, r5, r6}
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	40020008 	.word	0x40020008
 80075cc:	40020000 	.word	0x40020000

080075d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80075d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80075d4:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80075d6:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80075d8:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8007764 <HAL_GPIO_Init+0x194>
 80075dc:	4b62      	ldr	r3, [pc, #392]	@ (8007768 <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 80075de:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 800776c <HAL_GPIO_Init+0x19c>
 80075e2:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8007770 <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80075e6:	680a      	ldr	r2, [r1, #0]
 80075e8:	fa32 f506 	lsrs.w	r5, r2, r6
 80075ec:	d102      	bne.n	80075f4 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 80075ee:	b003      	add	sp, #12
 80075f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80075f4:	2701      	movs	r7, #1
 80075f6:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80075f8:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 80075fc:	ea37 0202 	bics.w	r2, r7, r2
 8007600:	d17a      	bne.n	80076f8 <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 8007602:	684a      	ldr	r2, [r1, #4]
 8007604:	2a03      	cmp	r2, #3
 8007606:	d807      	bhi.n	8007618 <HAL_GPIO_Init+0x48>
 8007608:	3a01      	subs	r2, #1
 800760a:	2a02      	cmp	r2, #2
 800760c:	f200 8083 	bhi.w	8007716 <HAL_GPIO_Init+0x146>
 8007610:	e8df f002 	tbb	[pc, r2]
 8007614:	9792      	.short	0x9792
 8007616:	9d          	.byte	0x9d
 8007617:	00          	.byte	0x00
 8007618:	2a12      	cmp	r2, #18
 800761a:	f000 8095 	beq.w	8007748 <HAL_GPIO_Init+0x178>
 800761e:	d86d      	bhi.n	80076fc <HAL_GPIO_Init+0x12c>
 8007620:	2a11      	cmp	r2, #17
 8007622:	f000 808b 	beq.w	800773c <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007626:	2dff      	cmp	r5, #255	@ 0xff
 8007628:	bf98      	it	ls
 800762a:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800762c:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007630:	bf88      	it	hi
 8007632:	f100 0904 	addhi.w	r9, r0, #4
 8007636:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800763a:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800763e:	bf88      	it	hi
 8007640:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007642:	fa0b fa02 	lsl.w	sl, fp, r2
 8007646:	ea27 070a 	bic.w	r7, r7, sl
 800764a:	fa04 f202 	lsl.w	r2, r4, r2
 800764e:	4317      	orrs	r7, r2
 8007650:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007654:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8007658:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 800765c:	d04c      	beq.n	80076f8 <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800765e:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8007662:	f026 0703 	bic.w	r7, r6, #3
 8007666:	f042 0201 	orr.w	r2, r2, #1
 800766a:	f8cc 2018 	str.w	r2, [ip, #24]
 800766e:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8007672:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8007676:	f002 0201 	and.w	r2, r2, #1
 800767a:	9201      	str	r2, [sp, #4]
 800767c:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007680:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007684:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007686:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800768a:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800768c:	fa0b fb0a 	lsl.w	fp, fp, sl
 8007690:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007694:	4a37      	ldr	r2, [pc, #220]	@ (8007774 <HAL_GPIO_Init+0x1a4>)
 8007696:	4290      	cmp	r0, r2
 8007698:	d05d      	beq.n	8007756 <HAL_GPIO_Init+0x186>
 800769a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800769e:	4290      	cmp	r0, r2
 80076a0:	d05b      	beq.n	800775a <HAL_GPIO_Init+0x18a>
 80076a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80076a6:	4290      	cmp	r0, r2
 80076a8:	d059      	beq.n	800775e <HAL_GPIO_Init+0x18e>
 80076aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80076ae:	4290      	cmp	r0, r2
 80076b0:	bf14      	ite	ne
 80076b2:	2204      	movne	r2, #4
 80076b4:	2203      	moveq	r2, #3
 80076b6:	fa02 f20a 	lsl.w	r2, r2, sl
 80076ba:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 80076be:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80076c0:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80076c2:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80076c6:	bf14      	ite	ne
 80076c8:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80076ca:	43aa      	biceq	r2, r5
 80076cc:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80076ce:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80076d0:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80076d4:	bf14      	ite	ne
 80076d6:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80076d8:	43aa      	biceq	r2, r5
 80076da:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80076dc:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80076de:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80076e2:	bf14      	ite	ne
 80076e4:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80076e6:	43aa      	biceq	r2, r5
 80076e8:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80076ea:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80076ec:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80076f0:	bf14      	ite	ne
 80076f2:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80076f4:	43aa      	biceq	r2, r5
 80076f6:	601a      	str	r2, [r3, #0]
	position++;
 80076f8:	3601      	adds	r6, #1
 80076fa:	e774      	b.n	80075e6 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 80076fc:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8007778 <HAL_GPIO_Init+0x1a8>
 8007700:	454a      	cmp	r2, r9
 8007702:	d008      	beq.n	8007716 <HAL_GPIO_Init+0x146>
 8007704:	d810      	bhi.n	8007728 <HAL_GPIO_Init+0x158>
 8007706:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 800770a:	454a      	cmp	r2, r9
 800770c:	d003      	beq.n	8007716 <HAL_GPIO_Init+0x146>
 800770e:	4572      	cmp	r2, lr
 8007710:	d001      	beq.n	8007716 <HAL_GPIO_Init+0x146>
 8007712:	4542      	cmp	r2, r8
 8007714:	d187      	bne.n	8007626 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007716:	688a      	ldr	r2, [r1, #8]
 8007718:	b1da      	cbz	r2, 8007752 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800771a:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800771c:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8007720:	bf0c      	ite	eq
 8007722:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8007724:	6147      	strne	r7, [r0, #20]
 8007726:	e77e      	b.n	8007626 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8007728:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 800777c <HAL_GPIO_Init+0x1ac>
 800772c:	454a      	cmp	r2, r9
 800772e:	d0f2      	beq.n	8007716 <HAL_GPIO_Init+0x146>
 8007730:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8007734:	454a      	cmp	r2, r9
 8007736:	e7ed      	b.n	8007714 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007738:	68cc      	ldr	r4, [r1, #12]
          break;
 800773a:	e774      	b.n	8007626 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800773c:	68cc      	ldr	r4, [r1, #12]
 800773e:	3404      	adds	r4, #4
          break;
 8007740:	e771      	b.n	8007626 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007742:	68cc      	ldr	r4, [r1, #12]
 8007744:	3408      	adds	r4, #8
          break;
 8007746:	e76e      	b.n	8007626 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007748:	68cc      	ldr	r4, [r1, #12]
 800774a:	340c      	adds	r4, #12
          break;
 800774c:	e76b      	b.n	8007626 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 800774e:	2400      	movs	r4, #0
 8007750:	e769      	b.n	8007626 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007752:	2404      	movs	r4, #4
 8007754:	e767      	b.n	8007626 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007756:	2200      	movs	r2, #0
 8007758:	e7ad      	b.n	80076b6 <HAL_GPIO_Init+0xe6>
 800775a:	2201      	movs	r2, #1
 800775c:	e7ab      	b.n	80076b6 <HAL_GPIO_Init+0xe6>
 800775e:	2202      	movs	r2, #2
 8007760:	e7a9      	b.n	80076b6 <HAL_GPIO_Init+0xe6>
 8007762:	bf00      	nop
 8007764:	40021000 	.word	0x40021000
 8007768:	40010400 	.word	0x40010400
 800776c:	10210000 	.word	0x10210000
 8007770:	10110000 	.word	0x10110000
 8007774:	40010800 	.word	0x40010800
 8007778:	10220000 	.word	0x10220000
 800777c:	10310000 	.word	0x10310000

08007780 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007780:	6883      	ldr	r3, [r0, #8]
 8007782:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007784:	bf14      	ite	ne
 8007786:	2001      	movne	r0, #1
 8007788:	2000      	moveq	r0, #0
 800778a:	4770      	bx	lr

0800778c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800778c:	b10a      	cbz	r2, 8007792 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800778e:	6101      	str	r1, [r0, #16]
  }
}
 8007790:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007792:	0409      	lsls	r1, r1, #16
 8007794:	e7fb      	b.n	800778e <HAL_GPIO_WritePin+0x2>

08007796 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007796:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007798:	ea01 0203 	and.w	r2, r1, r3
 800779c:	ea21 0103 	bic.w	r1, r1, r3
 80077a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80077a4:	6101      	str	r1, [r0, #16]
}
 80077a6:	4770      	bx	lr

080077a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80077a8:	4a04      	ldr	r2, [pc, #16]	@ (80077bc <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80077aa:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80077ac:	6951      	ldr	r1, [r2, #20]
 80077ae:	4201      	tst	r1, r0
 80077b0:	d002      	beq.n	80077b8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80077b2:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80077b4:	f7fd fef8 	bl	80055a8 <HAL_GPIO_EXTI_Callback>
  }
}
 80077b8:	bd08      	pop	{r3, pc}
 80077ba:	bf00      	nop
 80077bc:	40010400 	.word	0x40010400

080077c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80077c4:	4605      	mov	r5, r0
 80077c6:	b338      	cbz	r0, 8007818 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077c8:	6803      	ldr	r3, [r0, #0]
 80077ca:	07db      	lsls	r3, r3, #31
 80077cc:	d410      	bmi.n	80077f0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077ce:	682b      	ldr	r3, [r5, #0]
 80077d0:	079f      	lsls	r7, r3, #30
 80077d2:	d45e      	bmi.n	8007892 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077d4:	682b      	ldr	r3, [r5, #0]
 80077d6:	0719      	lsls	r1, r3, #28
 80077d8:	f100 8095 	bmi.w	8007906 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077dc:	682b      	ldr	r3, [r5, #0]
 80077de:	075a      	lsls	r2, r3, #29
 80077e0:	f100 80c1 	bmi.w	8007966 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077e4:	69eb      	ldr	r3, [r5, #28]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f040 812c 	bne.w	8007a44 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80077ec:	2000      	movs	r0, #0
 80077ee:	e029      	b.n	8007844 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80077f0:	4c90      	ldr	r4, [pc, #576]	@ (8007a34 <HAL_RCC_OscConfig+0x274>)
 80077f2:	6863      	ldr	r3, [r4, #4]
 80077f4:	f003 030c 	and.w	r3, r3, #12
 80077f8:	2b04      	cmp	r3, #4
 80077fa:	d007      	beq.n	800780c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80077fc:	6863      	ldr	r3, [r4, #4]
 80077fe:	f003 030c 	and.w	r3, r3, #12
 8007802:	2b08      	cmp	r3, #8
 8007804:	d10a      	bne.n	800781c <HAL_RCC_OscConfig+0x5c>
 8007806:	6863      	ldr	r3, [r4, #4]
 8007808:	03de      	lsls	r6, r3, #15
 800780a:	d507      	bpl.n	800781c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	039c      	lsls	r4, r3, #14
 8007810:	d5dd      	bpl.n	80077ce <HAL_RCC_OscConfig+0xe>
 8007812:	686b      	ldr	r3, [r5, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1da      	bne.n	80077ce <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8007818:	2001      	movs	r0, #1
 800781a:	e013      	b.n	8007844 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800781c:	686b      	ldr	r3, [r5, #4]
 800781e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007822:	d112      	bne.n	800784a <HAL_RCC_OscConfig+0x8a>
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800782a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800782c:	f7ff f9e0 	bl	8006bf0 <HAL_GetTick>
 8007830:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007832:	6823      	ldr	r3, [r4, #0]
 8007834:	0398      	lsls	r0, r3, #14
 8007836:	d4ca      	bmi.n	80077ce <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007838:	f7ff f9da 	bl	8006bf0 <HAL_GetTick>
 800783c:	1b80      	subs	r0, r0, r6
 800783e:	2864      	cmp	r0, #100	@ 0x64
 8007840:	d9f7      	bls.n	8007832 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8007842:	2003      	movs	r0, #3
}
 8007844:	b002      	add	sp, #8
 8007846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800784a:	b99b      	cbnz	r3, 8007874 <HAL_RCC_OscConfig+0xb4>
 800784c:	6823      	ldr	r3, [r4, #0]
 800784e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007852:	6023      	str	r3, [r4, #0]
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800785a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800785c:	f7ff f9c8 	bl	8006bf0 <HAL_GetTick>
 8007860:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	0399      	lsls	r1, r3, #14
 8007866:	d5b2      	bpl.n	80077ce <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007868:	f7ff f9c2 	bl	8006bf0 <HAL_GetTick>
 800786c:	1b80      	subs	r0, r0, r6
 800786e:	2864      	cmp	r0, #100	@ 0x64
 8007870:	d9f7      	bls.n	8007862 <HAL_RCC_OscConfig+0xa2>
 8007872:	e7e6      	b.n	8007842 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007874:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	d103      	bne.n	8007884 <HAL_RCC_OscConfig+0xc4>
 800787c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	e7cf      	b.n	8007824 <HAL_RCC_OscConfig+0x64>
 8007884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007888:	6023      	str	r3, [r4, #0]
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007890:	e7cb      	b.n	800782a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007892:	4c68      	ldr	r4, [pc, #416]	@ (8007a34 <HAL_RCC_OscConfig+0x274>)
 8007894:	6863      	ldr	r3, [r4, #4]
 8007896:	f013 0f0c 	tst.w	r3, #12
 800789a:	d007      	beq.n	80078ac <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800789c:	6863      	ldr	r3, [r4, #4]
 800789e:	f003 030c 	and.w	r3, r3, #12
 80078a2:	2b08      	cmp	r3, #8
 80078a4:	d110      	bne.n	80078c8 <HAL_RCC_OscConfig+0x108>
 80078a6:	6863      	ldr	r3, [r4, #4]
 80078a8:	03da      	lsls	r2, r3, #15
 80078aa:	d40d      	bmi.n	80078c8 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	079b      	lsls	r3, r3, #30
 80078b0:	d502      	bpl.n	80078b8 <HAL_RCC_OscConfig+0xf8>
 80078b2:	692b      	ldr	r3, [r5, #16]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d1af      	bne.n	8007818 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	696a      	ldr	r2, [r5, #20]
 80078bc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80078c0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	e785      	b.n	80077d4 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80078c8:	692a      	ldr	r2, [r5, #16]
 80078ca:	4b5b      	ldr	r3, [pc, #364]	@ (8007a38 <HAL_RCC_OscConfig+0x278>)
 80078cc:	b16a      	cbz	r2, 80078ea <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80078ce:	2201      	movs	r2, #1
 80078d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80078d2:	f7ff f98d 	bl	8006bf0 <HAL_GetTick>
 80078d6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	079f      	lsls	r7, r3, #30
 80078dc:	d4ec      	bmi.n	80078b8 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078de:	f7ff f987 	bl	8006bf0 <HAL_GetTick>
 80078e2:	1b80      	subs	r0, r0, r6
 80078e4:	2802      	cmp	r0, #2
 80078e6:	d9f7      	bls.n	80078d8 <HAL_RCC_OscConfig+0x118>
 80078e8:	e7ab      	b.n	8007842 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80078ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80078ec:	f7ff f980 	bl	8006bf0 <HAL_GetTick>
 80078f0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	0798      	lsls	r0, r3, #30
 80078f6:	f57f af6d 	bpl.w	80077d4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078fa:	f7ff f979 	bl	8006bf0 <HAL_GetTick>
 80078fe:	1b80      	subs	r0, r0, r6
 8007900:	2802      	cmp	r0, #2
 8007902:	d9f6      	bls.n	80078f2 <HAL_RCC_OscConfig+0x132>
 8007904:	e79d      	b.n	8007842 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007906:	69aa      	ldr	r2, [r5, #24]
 8007908:	4e4a      	ldr	r6, [pc, #296]	@ (8007a34 <HAL_RCC_OscConfig+0x274>)
 800790a:	4b4b      	ldr	r3, [pc, #300]	@ (8007a38 <HAL_RCC_OscConfig+0x278>)
 800790c:	b1e2      	cbz	r2, 8007948 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800790e:	2201      	movs	r2, #1
 8007910:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8007914:	f7ff f96c 	bl	8006bf0 <HAL_GetTick>
 8007918:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800791a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800791c:	079b      	lsls	r3, r3, #30
 800791e:	d50d      	bpl.n	800793c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007920:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8007924:	4b45      	ldr	r3, [pc, #276]	@ (8007a3c <HAL_RCC_OscConfig+0x27c>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	fbb3 f3f2 	udiv	r3, r3, r2
 800792c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800792e:	bf00      	nop
  }
  while (Delay --);
 8007930:	9b01      	ldr	r3, [sp, #4]
 8007932:	1e5a      	subs	r2, r3, #1
 8007934:	9201      	str	r2, [sp, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1f9      	bne.n	800792e <HAL_RCC_OscConfig+0x16e>
 800793a:	e74f      	b.n	80077dc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800793c:	f7ff f958 	bl	8006bf0 <HAL_GetTick>
 8007940:	1b00      	subs	r0, r0, r4
 8007942:	2802      	cmp	r0, #2
 8007944:	d9e9      	bls.n	800791a <HAL_RCC_OscConfig+0x15a>
 8007946:	e77c      	b.n	8007842 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8007948:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800794c:	f7ff f950 	bl	8006bf0 <HAL_GetTick>
 8007950:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007952:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8007954:	079f      	lsls	r7, r3, #30
 8007956:	f57f af41 	bpl.w	80077dc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800795a:	f7ff f949 	bl	8006bf0 <HAL_GetTick>
 800795e:	1b00      	subs	r0, r0, r4
 8007960:	2802      	cmp	r0, #2
 8007962:	d9f6      	bls.n	8007952 <HAL_RCC_OscConfig+0x192>
 8007964:	e76d      	b.n	8007842 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007966:	4c33      	ldr	r4, [pc, #204]	@ (8007a34 <HAL_RCC_OscConfig+0x274>)
 8007968:	69e3      	ldr	r3, [r4, #28]
 800796a:	00d8      	lsls	r0, r3, #3
 800796c:	d424      	bmi.n	80079b8 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800796e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8007970:	69e3      	ldr	r3, [r4, #28]
 8007972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007976:	61e3      	str	r3, [r4, #28]
 8007978:	69e3      	ldr	r3, [r4, #28]
 800797a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007982:	4e2f      	ldr	r6, [pc, #188]	@ (8007a40 <HAL_RCC_OscConfig+0x280>)
 8007984:	6833      	ldr	r3, [r6, #0]
 8007986:	05d9      	lsls	r1, r3, #23
 8007988:	d518      	bpl.n	80079bc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800798a:	68eb      	ldr	r3, [r5, #12]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d126      	bne.n	80079de <HAL_RCC_OscConfig+0x21e>
 8007990:	6a23      	ldr	r3, [r4, #32]
 8007992:	f043 0301 	orr.w	r3, r3, #1
 8007996:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8007998:	f7ff f92a 	bl	8006bf0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800799c:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80079a0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079a2:	6a23      	ldr	r3, [r4, #32]
 80079a4:	079b      	lsls	r3, r3, #30
 80079a6:	d53f      	bpl.n	8007a28 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80079a8:	2f00      	cmp	r7, #0
 80079aa:	f43f af1b 	beq.w	80077e4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80079ae:	69e3      	ldr	r3, [r4, #28]
 80079b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079b4:	61e3      	str	r3, [r4, #28]
 80079b6:	e715      	b.n	80077e4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80079b8:	2700      	movs	r7, #0
 80079ba:	e7e2      	b.n	8007982 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079bc:	6833      	ldr	r3, [r6, #0]
 80079be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079c2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80079c4:	f7ff f914 	bl	8006bf0 <HAL_GetTick>
 80079c8:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079ca:	6833      	ldr	r3, [r6, #0]
 80079cc:	05da      	lsls	r2, r3, #23
 80079ce:	d4dc      	bmi.n	800798a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079d0:	f7ff f90e 	bl	8006bf0 <HAL_GetTick>
 80079d4:	eba0 0008 	sub.w	r0, r0, r8
 80079d8:	2864      	cmp	r0, #100	@ 0x64
 80079da:	d9f6      	bls.n	80079ca <HAL_RCC_OscConfig+0x20a>
 80079dc:	e731      	b.n	8007842 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079de:	b9ab      	cbnz	r3, 8007a0c <HAL_RCC_OscConfig+0x24c>
 80079e0:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079e2:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079e6:	f023 0301 	bic.w	r3, r3, #1
 80079ea:	6223      	str	r3, [r4, #32]
 80079ec:	6a23      	ldr	r3, [r4, #32]
 80079ee:	f023 0304 	bic.w	r3, r3, #4
 80079f2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80079f4:	f7ff f8fc 	bl	8006bf0 <HAL_GetTick>
 80079f8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079fa:	6a23      	ldr	r3, [r4, #32]
 80079fc:	0798      	lsls	r0, r3, #30
 80079fe:	d5d3      	bpl.n	80079a8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a00:	f7ff f8f6 	bl	8006bf0 <HAL_GetTick>
 8007a04:	1b80      	subs	r0, r0, r6
 8007a06:	4540      	cmp	r0, r8
 8007a08:	d9f7      	bls.n	80079fa <HAL_RCC_OscConfig+0x23a>
 8007a0a:	e71a      	b.n	8007842 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a0c:	2b05      	cmp	r3, #5
 8007a0e:	6a23      	ldr	r3, [r4, #32]
 8007a10:	d103      	bne.n	8007a1a <HAL_RCC_OscConfig+0x25a>
 8007a12:	f043 0304 	orr.w	r3, r3, #4
 8007a16:	6223      	str	r3, [r4, #32]
 8007a18:	e7ba      	b.n	8007990 <HAL_RCC_OscConfig+0x1d0>
 8007a1a:	f023 0301 	bic.w	r3, r3, #1
 8007a1e:	6223      	str	r3, [r4, #32]
 8007a20:	6a23      	ldr	r3, [r4, #32]
 8007a22:	f023 0304 	bic.w	r3, r3, #4
 8007a26:	e7b6      	b.n	8007996 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a28:	f7ff f8e2 	bl	8006bf0 <HAL_GetTick>
 8007a2c:	1b80      	subs	r0, r0, r6
 8007a2e:	4540      	cmp	r0, r8
 8007a30:	d9b7      	bls.n	80079a2 <HAL_RCC_OscConfig+0x1e2>
 8007a32:	e706      	b.n	8007842 <HAL_RCC_OscConfig+0x82>
 8007a34:	40021000 	.word	0x40021000
 8007a38:	42420000 	.word	0x42420000
 8007a3c:	20000004 	.word	0x20000004
 8007a40:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a44:	4c2a      	ldr	r4, [pc, #168]	@ (8007af0 <HAL_RCC_OscConfig+0x330>)
 8007a46:	6862      	ldr	r2, [r4, #4]
 8007a48:	f002 020c 	and.w	r2, r2, #12
 8007a4c:	2a08      	cmp	r2, #8
 8007a4e:	d03e      	beq.n	8007ace <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a50:	2200      	movs	r2, #0
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	4b27      	ldr	r3, [pc, #156]	@ (8007af4 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8007a56:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a58:	d12c      	bne.n	8007ab4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8007a5a:	f7ff f8c9 	bl	8006bf0 <HAL_GetTick>
 8007a5e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	0199      	lsls	r1, r3, #6
 8007a64:	d420      	bmi.n	8007aa8 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007a66:	6a2b      	ldr	r3, [r5, #32]
 8007a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a6c:	d105      	bne.n	8007a7a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007a6e:	6862      	ldr	r2, [r4, #4]
 8007a70:	68a9      	ldr	r1, [r5, #8]
 8007a72:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007a76:	430a      	orrs	r2, r1
 8007a78:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a7a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8007a7c:	6862      	ldr	r2, [r4, #4]
 8007a7e:	430b      	orrs	r3, r1
 8007a80:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8007a84:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8007a86:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a88:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8007a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8007af4 <HAL_RCC_OscConfig+0x334>)
 8007a8c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8007a8e:	f7ff f8af 	bl	8006bf0 <HAL_GetTick>
 8007a92:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	019a      	lsls	r2, r3, #6
 8007a98:	f53f aea8 	bmi.w	80077ec <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a9c:	f7ff f8a8 	bl	8006bf0 <HAL_GetTick>
 8007aa0:	1b40      	subs	r0, r0, r5
 8007aa2:	2802      	cmp	r0, #2
 8007aa4:	d9f6      	bls.n	8007a94 <HAL_RCC_OscConfig+0x2d4>
 8007aa6:	e6cc      	b.n	8007842 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aa8:	f7ff f8a2 	bl	8006bf0 <HAL_GetTick>
 8007aac:	1b80      	subs	r0, r0, r6
 8007aae:	2802      	cmp	r0, #2
 8007ab0:	d9d6      	bls.n	8007a60 <HAL_RCC_OscConfig+0x2a0>
 8007ab2:	e6c6      	b.n	8007842 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8007ab4:	f7ff f89c 	bl	8006bf0 <HAL_GetTick>
 8007ab8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	019b      	lsls	r3, r3, #6
 8007abe:	f57f ae95 	bpl.w	80077ec <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ac2:	f7ff f895 	bl	8006bf0 <HAL_GetTick>
 8007ac6:	1b40      	subs	r0, r0, r5
 8007ac8:	2802      	cmp	r0, #2
 8007aca:	d9f6      	bls.n	8007aba <HAL_RCC_OscConfig+0x2fa>
 8007acc:	e6b9      	b.n	8007842 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	f43f aea2 	beq.w	8007818 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8007ad4:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ad6:	6a2b      	ldr	r3, [r5, #32]
 8007ad8:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8007adc:	429a      	cmp	r2, r3
 8007ade:	f47f ae9b 	bne.w	8007818 <HAL_RCC_OscConfig+0x58>
 8007ae2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007ae4:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ae8:	1ac0      	subs	r0, r0, r3
 8007aea:	bf18      	it	ne
 8007aec:	2001      	movne	r0, #1
 8007aee:	e6a9      	b.n	8007844 <HAL_RCC_OscConfig+0x84>
 8007af0:	40021000 	.word	0x40021000
 8007af4:	42420000 	.word	0x42420000

08007af8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8007af8:	4a0d      	ldr	r2, [pc, #52]	@ (8007b30 <HAL_RCC_GetSysClockFreq+0x38>)
 8007afa:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8007afc:	f003 010c 	and.w	r1, r3, #12
 8007b00:	2908      	cmp	r1, #8
 8007b02:	d112      	bne.n	8007b2a <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007b04:	480b      	ldr	r0, [pc, #44]	@ (8007b34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007b06:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007b0a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007b0c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007b0e:	d509      	bpl.n	8007b24 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007b10:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007b12:	4a09      	ldr	r2, [pc, #36]	@ (8007b38 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007b14:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007b18:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007b1a:	4a08      	ldr	r2, [pc, #32]	@ (8007b3c <HAL_RCC_GetSysClockFreq+0x44>)
 8007b1c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007b1e:	fbb0 f0f3 	udiv	r0, r0, r3
 8007b22:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007b24:	4b06      	ldr	r3, [pc, #24]	@ (8007b40 <HAL_RCC_GetSysClockFreq+0x48>)
 8007b26:	4358      	muls	r0, r3
 8007b28:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8007b2a:	4803      	ldr	r0, [pc, #12]	@ (8007b38 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	40021000 	.word	0x40021000
 8007b34:	0800dd0a 	.word	0x0800dd0a
 8007b38:	007a1200 	.word	0x007a1200
 8007b3c:	0800dd08 	.word	0x0800dd08
 8007b40:	003d0900 	.word	0x003d0900

08007b44 <HAL_RCC_ClockConfig>:
{
 8007b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b48:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	b910      	cbnz	r0, 8007b54 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8007b4e:	2001      	movs	r0, #1
}
 8007b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b54:	4a44      	ldr	r2, [pc, #272]	@ (8007c68 <HAL_RCC_ClockConfig+0x124>)
 8007b56:	6813      	ldr	r3, [r2, #0]
 8007b58:	f003 0307 	and.w	r3, r3, #7
 8007b5c:	428b      	cmp	r3, r1
 8007b5e:	d328      	bcc.n	8007bb2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b60:	6821      	ldr	r1, [r4, #0]
 8007b62:	078e      	lsls	r6, r1, #30
 8007b64:	d430      	bmi.n	8007bc8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b66:	07ca      	lsls	r2, r1, #31
 8007b68:	d443      	bmi.n	8007bf2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b6a:	4a3f      	ldr	r2, [pc, #252]	@ (8007c68 <HAL_RCC_ClockConfig+0x124>)
 8007b6c:	6813      	ldr	r3, [r2, #0]
 8007b6e:	f003 0307 	and.w	r3, r3, #7
 8007b72:	42ab      	cmp	r3, r5
 8007b74:	d865      	bhi.n	8007c42 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b76:	6822      	ldr	r2, [r4, #0]
 8007b78:	4d3c      	ldr	r5, [pc, #240]	@ (8007c6c <HAL_RCC_ClockConfig+0x128>)
 8007b7a:	f012 0f04 	tst.w	r2, #4
 8007b7e:	d16c      	bne.n	8007c5a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b80:	0713      	lsls	r3, r2, #28
 8007b82:	d506      	bpl.n	8007b92 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007b84:	686b      	ldr	r3, [r5, #4]
 8007b86:	6922      	ldr	r2, [r4, #16]
 8007b88:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8007b8c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007b90:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007b92:	f7ff ffb1 	bl	8007af8 <HAL_RCC_GetSysClockFreq>
 8007b96:	686b      	ldr	r3, [r5, #4]
 8007b98:	4a35      	ldr	r2, [pc, #212]	@ (8007c70 <HAL_RCC_ClockConfig+0x12c>)
 8007b9a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007b9e:	5cd3      	ldrb	r3, [r2, r3]
 8007ba0:	40d8      	lsrs	r0, r3
 8007ba2:	4b34      	ldr	r3, [pc, #208]	@ (8007c74 <HAL_RCC_ClockConfig+0x130>)
 8007ba4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8007ba6:	4b34      	ldr	r3, [pc, #208]	@ (8007c78 <HAL_RCC_ClockConfig+0x134>)
 8007ba8:	6818      	ldr	r0, [r3, #0]
 8007baa:	f7fe ffdf 	bl	8006b6c <HAL_InitTick>
  return HAL_OK;
 8007bae:	2000      	movs	r0, #0
 8007bb0:	e7ce      	b.n	8007b50 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bb2:	6813      	ldr	r3, [r2, #0]
 8007bb4:	f023 0307 	bic.w	r3, r3, #7
 8007bb8:	430b      	orrs	r3, r1
 8007bba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bbc:	6813      	ldr	r3, [r2, #0]
 8007bbe:	f003 0307 	and.w	r3, r3, #7
 8007bc2:	428b      	cmp	r3, r1
 8007bc4:	d1c3      	bne.n	8007b4e <HAL_RCC_ClockConfig+0xa>
 8007bc6:	e7cb      	b.n	8007b60 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bc8:	4b28      	ldr	r3, [pc, #160]	@ (8007c6c <HAL_RCC_ClockConfig+0x128>)
 8007bca:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bce:	bf1e      	ittt	ne
 8007bd0:	685a      	ldrne	r2, [r3, #4]
 8007bd2:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8007bd6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bd8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bda:	bf42      	ittt	mi
 8007bdc:	685a      	ldrmi	r2, [r3, #4]
 8007bde:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8007be2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	68a0      	ldr	r0, [r4, #8]
 8007be8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8007bec:	4302      	orrs	r2, r0
 8007bee:	605a      	str	r2, [r3, #4]
 8007bf0:	e7b9      	b.n	8007b66 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bf2:	6862      	ldr	r2, [r4, #4]
 8007bf4:	4e1d      	ldr	r6, [pc, #116]	@ (8007c6c <HAL_RCC_ClockConfig+0x128>)
 8007bf6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bf8:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bfa:	d11a      	bne.n	8007c32 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bfc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c00:	d0a5      	beq.n	8007b4e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c02:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c04:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c08:	f023 0303 	bic.w	r3, r3, #3
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8007c10:	f7fe ffee 	bl	8006bf0 <HAL_GetTick>
 8007c14:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c16:	6873      	ldr	r3, [r6, #4]
 8007c18:	6862      	ldr	r2, [r4, #4]
 8007c1a:	f003 030c 	and.w	r3, r3, #12
 8007c1e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007c22:	d0a2      	beq.n	8007b6a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c24:	f7fe ffe4 	bl	8006bf0 <HAL_GetTick>
 8007c28:	1bc0      	subs	r0, r0, r7
 8007c2a:	4540      	cmp	r0, r8
 8007c2c:	d9f3      	bls.n	8007c16 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8007c2e:	2003      	movs	r0, #3
 8007c30:	e78e      	b.n	8007b50 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c32:	2a02      	cmp	r2, #2
 8007c34:	d102      	bne.n	8007c3c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c36:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8007c3a:	e7e1      	b.n	8007c00 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c3c:	f013 0f02 	tst.w	r3, #2
 8007c40:	e7de      	b.n	8007c00 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c42:	6813      	ldr	r3, [r2, #0]
 8007c44:	f023 0307 	bic.w	r3, r3, #7
 8007c48:	432b      	orrs	r3, r5
 8007c4a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c4c:	6813      	ldr	r3, [r2, #0]
 8007c4e:	f003 0307 	and.w	r3, r3, #7
 8007c52:	42ab      	cmp	r3, r5
 8007c54:	f47f af7b 	bne.w	8007b4e <HAL_RCC_ClockConfig+0xa>
 8007c58:	e78d      	b.n	8007b76 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c5a:	686b      	ldr	r3, [r5, #4]
 8007c5c:	68e1      	ldr	r1, [r4, #12]
 8007c5e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007c62:	430b      	orrs	r3, r1
 8007c64:	606b      	str	r3, [r5, #4]
 8007c66:	e78b      	b.n	8007b80 <HAL_RCC_ClockConfig+0x3c>
 8007c68:	40022000 	.word	0x40022000
 8007c6c:	40021000 	.word	0x40021000
 8007c70:	0800dccb 	.word	0x0800dccb
 8007c74:	20000004 	.word	0x20000004
 8007c78:	2000000c 	.word	0x2000000c

08007c7c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007c7c:	4b04      	ldr	r3, [pc, #16]	@ (8007c90 <HAL_RCC_GetPCLK1Freq+0x14>)
 8007c7e:	4a05      	ldr	r2, [pc, #20]	@ (8007c94 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007c86:	5cd3      	ldrb	r3, [r2, r3]
 8007c88:	4a03      	ldr	r2, [pc, #12]	@ (8007c98 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007c8a:	6810      	ldr	r0, [r2, #0]
}
 8007c8c:	40d8      	lsrs	r0, r3
 8007c8e:	4770      	bx	lr
 8007c90:	40021000 	.word	0x40021000
 8007c94:	0800dcc3 	.word	0x0800dcc3
 8007c98:	20000004 	.word	0x20000004

08007c9c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007c9c:	4b04      	ldr	r3, [pc, #16]	@ (8007cb0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8007c9e:	4a05      	ldr	r2, [pc, #20]	@ (8007cb4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007ca6:	5cd3      	ldrb	r3, [r2, r3]
 8007ca8:	4a03      	ldr	r2, [pc, #12]	@ (8007cb8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007caa:	6810      	ldr	r0, [r2, #0]
}
 8007cac:	40d8      	lsrs	r0, r3
 8007cae:	4770      	bx	lr
 8007cb0:	40021000 	.word	0x40021000
 8007cb4:	0800dcc3 	.word	0x0800dcc3
 8007cb8:	20000004 	.word	0x20000004

08007cbc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007cbc:	6803      	ldr	r3, [r0, #0]
{
 8007cbe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007cc2:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007cc4:	07d8      	lsls	r0, r3, #31
 8007cc6:	d521      	bpl.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cc8:	4c36      	ldr	r4, [pc, #216]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007cca:	69e3      	ldr	r3, [r4, #28]
 8007ccc:	00d9      	lsls	r1, r3, #3
 8007cce:	d42b      	bmi.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8007cd0:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cd2:	69e3      	ldr	r3, [r4, #28]
 8007cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cd8:	61e3      	str	r3, [r4, #28]
 8007cda:	69e3      	ldr	r3, [r4, #28]
 8007cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ce0:	9301      	str	r3, [sp, #4]
 8007ce2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ce4:	4f30      	ldr	r7, [pc, #192]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	05da      	lsls	r2, r3, #23
 8007cea:	d51f      	bpl.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007cec:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007cee:	686a      	ldr	r2, [r5, #4]
 8007cf0:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8007cf4:	d12e      	bne.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cf6:	6a23      	ldr	r3, [r4, #32]
 8007cf8:	686a      	ldr	r2, [r5, #4]
 8007cfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007d02:	b11e      	cbz	r6, 8007d0c <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d04:	69e3      	ldr	r3, [r4, #28]
 8007d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d0a:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d0c:	682a      	ldr	r2, [r5, #0]
 8007d0e:	0791      	lsls	r1, r2, #30
 8007d10:	d506      	bpl.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d12:	4924      	ldr	r1, [pc, #144]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007d14:	68a8      	ldr	r0, [r5, #8]
 8007d16:	684b      	ldr	r3, [r1, #4]
 8007d18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8007d1c:	4303      	orrs	r3, r0
 8007d1e:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d20:	06d3      	lsls	r3, r2, #27
 8007d22:	d436      	bmi.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007d24:	2000      	movs	r0, #0
 8007d26:	e012      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8007d28:	2600      	movs	r6, #0
 8007d2a:	e7db      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d32:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8007d34:	f7fe ff5c 	bl	8006bf0 <HAL_GetTick>
 8007d38:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	05db      	lsls	r3, r3, #23
 8007d3e:	d4d5      	bmi.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d40:	f7fe ff56 	bl	8006bf0 <HAL_GetTick>
 8007d44:	eba0 0008 	sub.w	r0, r0, r8
 8007d48:	2864      	cmp	r0, #100	@ 0x64
 8007d4a:	d9f6      	bls.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 8007d4c:	2003      	movs	r0, #3
}
 8007d4e:	b002      	add	sp, #8
 8007d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d54:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d0cc      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d5c:	2001      	movs	r0, #1
 8007d5e:	4a13      	ldr	r2, [pc, #76]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d60:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d62:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d66:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d68:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007d6c:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d6e:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 8007d72:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007d74:	d5bf      	bpl.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8007d76:	f7fe ff3b 	bl	8006bf0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d7a:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8007d7e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d80:	6a23      	ldr	r3, [r4, #32]
 8007d82:	0798      	lsls	r0, r3, #30
 8007d84:	d4b7      	bmi.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d86:	f7fe ff33 	bl	8006bf0 <HAL_GetTick>
 8007d8a:	1bc0      	subs	r0, r0, r7
 8007d8c:	4540      	cmp	r0, r8
 8007d8e:	d9f7      	bls.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8007d90:	e7dc      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d92:	4a04      	ldr	r2, [pc, #16]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007d94:	68e9      	ldr	r1, [r5, #12]
 8007d96:	6853      	ldr	r3, [r2, #4]
 8007d98:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8007d9c:	430b      	orrs	r3, r1
 8007d9e:	6053      	str	r3, [r2, #4]
 8007da0:	e7c0      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8007da2:	bf00      	nop
 8007da4:	40021000 	.word	0x40021000
 8007da8:	40007000 	.word	0x40007000
 8007dac:	42420000 	.word	0x42420000

08007db0 <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007db0:	2802      	cmp	r0, #2
{
 8007db2:	b508      	push	{r3, lr}
  switch (PeriphClk)
 8007db4:	d044      	beq.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8007db6:	2810      	cmp	r0, #16
 8007db8:	d003      	beq.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8007dba:	2801      	cmp	r0, #1
 8007dbc:	d022      	beq.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 8007dbe:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8007dc0:	e034      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      temp_reg = RCC->CFGR;
 8007dc2:	4b25      	ldr	r3, [pc, #148]	@ (8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8007dc4:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007dc6:	6818      	ldr	r0, [r3, #0]
 8007dc8:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 8007dcc:	d02e      	beq.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007dce:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8007dd2:	4822      	ldr	r0, [pc, #136]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007dd4:	03d2      	lsls	r2, r2, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007dd6:	bf48      	it	mi
 8007dd8:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007dda:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007ddc:	bf41      	itttt	mi
 8007dde:	4920      	ldrmi	r1, [pc, #128]	@ (8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007de0:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8007de4:	5c89      	ldrbmi	r1, [r1, r2]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007de6:	4a1f      	ldrmi	r2, [pc, #124]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007de8:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007dea:	bf4c      	ite	mi
 8007dec:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007df0:	4a1d      	ldrpl	r2, [pc, #116]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007df2:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007df4:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007df8:	d418      	bmi.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = (pllclk * 2) / 3;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007dfe:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8007e02:	e013      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007e04:	f240 3102 	movw	r1, #770	@ 0x302
      temp_reg = RCC->BDCR;
 8007e08:	4a13      	ldr	r2, [pc, #76]	@ (8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8007e0a:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007e0c:	4019      	ands	r1, r3
 8007e0e:	f5b1 7f81 	cmp.w	r1, #258	@ 0x102
 8007e12:	d01e      	beq.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007e14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e1c:	d107      	bne.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSI_VALUE;
 8007e1e:	f649 4340 	movw	r3, #40000	@ 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007e22:	6a50      	ldr	r0, [r2, #36]	@ 0x24
        frequency = LSI_VALUE;
 8007e24:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8007e28:	bf18      	it	ne
 8007e2a:	4618      	movne	r0, r3
}
 8007e2c:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007e2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e32:	d1c4      	bne.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 8007e34:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8007e36:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8007e3a:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8007e3e:	e7f3      	b.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007e40:	f7ff ff2c 	bl	8007c9c <HAL_RCC_GetPCLK2Freq>
 8007e44:	4b04      	ldr	r3, [pc, #16]	@ (8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	005b      	lsls	r3, r3, #1
 8007e50:	e7d5      	b.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 8007e52:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007e56:	e7e9      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8007e58:	40021000 	.word	0x40021000
 8007e5c:	0800dd1c 	.word	0x0800dd1c
 8007e60:	0800dd1a 	.word	0x0800dd1a
 8007e64:	007a1200 	.word	0x007a1200
 8007e68:	003d0900 	.word	0x003d0900

08007e6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e6c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e70:	461f      	mov	r7, r3
 8007e72:	4689      	mov	r9, r1
 8007e74:	4690      	mov	r8, r2
 8007e76:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e78:	f7fe feba 	bl	8006bf0 <HAL_GetTick>
 8007e7c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8007e7e:	443d      	add	r5, r7
 8007e80:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8007e82:	f7fe feb5 	bl	8006bf0 <HAL_GetTick>
 8007e86:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e88:	4b25      	ldr	r3, [pc, #148]	@ (8007f20 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8007e8a:	681e      	ldr	r6, [r3, #0]
 8007e8c:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8007e90:	436e      	muls	r6, r5
 8007e92:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e94:	6822      	ldr	r2, [r4, #0]
 8007e96:	6893      	ldr	r3, [r2, #8]
 8007e98:	ea39 0303 	bics.w	r3, r9, r3
 8007e9c:	bf0c      	ite	eq
 8007e9e:	2301      	moveq	r3, #1
 8007ea0:	2300      	movne	r3, #0
 8007ea2:	4543      	cmp	r3, r8
 8007ea4:	d101      	bne.n	8007eaa <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	e02e      	b.n	8007f08 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8007eaa:	1c7b      	adds	r3, r7, #1
 8007eac:	d0f3      	beq.n	8007e96 <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007eae:	f7fe fe9f 	bl	8006bf0 <HAL_GetTick>
 8007eb2:	eba0 000a 	sub.w	r0, r0, sl
 8007eb6:	42a8      	cmp	r0, r5
 8007eb8:	d329      	bcc.n	8007f0e <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ec2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ec4:	6862      	ldr	r2, [r4, #4]
 8007ec6:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8007eca:	d10a      	bne.n	8007ee2 <SPI_WaitFlagStateUntilTimeout+0x76>
 8007ecc:	68a2      	ldr	r2, [r4, #8]
 8007ece:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8007ed2:	d002      	beq.n	8007eda <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ed4:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8007ed8:	d103      	bne.n	8007ee2 <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ee0:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ee2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007ee4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8007ee8:	d107      	bne.n	8007efa <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ef0:	601a      	str	r2, [r3, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ef8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007efa:	2301      	movs	r3, #1
 8007efc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007f00:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8007f02:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8007f04:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8007f08:	b002      	add	sp, #8
 8007f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 8007f0e:	9a01      	ldr	r2, [sp, #4]
      count--;
 8007f10:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8007f12:	2a00      	cmp	r2, #0
      count--;
 8007f14:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f18:	bf08      	it	eq
 8007f1a:	4615      	moveq	r5, r2
 8007f1c:	9301      	str	r3, [sp, #4]
 8007f1e:	e7b9      	b.n	8007e94 <SPI_WaitFlagStateUntilTimeout+0x28>
 8007f20:	20000004 	.word	0x20000004

08007f24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f24:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007f26:	460b      	mov	r3, r1
 8007f28:	9200      	str	r2, [sp, #0]
{
 8007f2a:	460d      	mov	r5, r1
 8007f2c:	4616      	mov	r6, r2
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007f2e:	2102      	movs	r1, #2
 8007f30:	2201      	movs	r2, #1
{
 8007f32:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007f34:	f7ff ff9a 	bl	8007e6c <SPI_WaitFlagStateUntilTimeout>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	b128      	cbz	r0, 8007f48 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f3c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007f3e:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f40:	f043 0320 	orr.w	r3, r3, #32
 8007f44:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007f46:	e007      	b.n	8007f58 <SPI_EndRxTxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f48:	462b      	mov	r3, r5
 8007f4a:	2180      	movs	r1, #128	@ 0x80
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	9600      	str	r6, [sp, #0]
 8007f50:	f7ff ff8c 	bl	8007e6c <SPI_WaitFlagStateUntilTimeout>
 8007f54:	2800      	cmp	r0, #0
 8007f56:	d1f1      	bne.n	8007f3c <SPI_EndRxTxTransaction+0x18>
  }
  return HAL_OK;
}
 8007f58:	b002      	add	sp, #8
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}

08007f5c <HAL_SPI_Init>:
{
 8007f5c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8007f5e:	4604      	mov	r4, r0
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d051      	beq.n	8008008 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f64:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d14a      	bne.n	8008000 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f6a:	6842      	ldr	r2, [r0, #4]
 8007f6c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8007f70:	d000      	beq.n	8007f74 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f72:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f74:	2300      	movs	r3, #0
 8007f76:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f78:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8007f7c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007f80:	b923      	cbnz	r3, 8007f8c <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 8007f82:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8007f84:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8007f88:	f7fd ff0a 	bl	8005da0 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8007f8c:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8007f8e:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007f90:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8007f94:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f96:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8007f98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f9c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f9e:	6863      	ldr	r3, [r4, #4]
 8007fa0:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 8007fa4:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8007fa8:	4303      	orrs	r3, r0
 8007faa:	68e0      	ldr	r0, [r4, #12]
 8007fac:	69a1      	ldr	r1, [r4, #24]
 8007fae:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 8007fb2:	4303      	orrs	r3, r0
 8007fb4:	6920      	ldr	r0, [r4, #16]
 8007fb6:	f000 0002 	and.w	r0, r0, #2
 8007fba:	4303      	orrs	r3, r0
 8007fbc:	6960      	ldr	r0, [r4, #20]
 8007fbe:	f000 0001 	and.w	r0, r0, #1
 8007fc2:	4303      	orrs	r3, r0
 8007fc4:	f401 7000 	and.w	r0, r1, #512	@ 0x200
 8007fc8:	4303      	orrs	r3, r0
 8007fca:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007fcc:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007fce:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8007fd2:	4303      	orrs	r3, r0
 8007fd4:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007fd6:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007fda:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 8007fde:	4303      	orrs	r3, r0
 8007fe0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8007fe2:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 8007fe6:	4303      	orrs	r3, r0
 8007fe8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007fea:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007fec:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fee:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ff0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ff4:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8007ff6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ff8:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ffa:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8007ffe:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008000:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008002:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008006:	e7b5      	b.n	8007f74 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8008008:	2001      	movs	r0, #1
 800800a:	e7f8      	b.n	8007ffe <HAL_SPI_Init+0xa2>

0800800c <HAL_SPI_TransmitReceive>:
{
 800800c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008010:	4604      	mov	r4, r0
 8008012:	460d      	mov	r5, r1
 8008014:	4691      	mov	r9, r2
 8008016:	461e      	mov	r6, r3
 8008018:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 800801c:	f7fe fde8 	bl	8006bf0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8008020:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 8008024:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008026:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8008028:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 800802a:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800802c:	d00a      	beq.n	8008044 <HAL_SPI_TransmitReceive+0x38>
 800802e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8008032:	f040 80e5 	bne.w	8008200 <HAL_SPI_TransmitReceive+0x1f4>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008036:	68a3      	ldr	r3, [r4, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	f040 80e1 	bne.w	8008200 <HAL_SPI_TransmitReceive+0x1f4>
 800803e:	2904      	cmp	r1, #4
 8008040:	f040 80de 	bne.w	8008200 <HAL_SPI_TransmitReceive+0x1f4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008044:	2d00      	cmp	r5, #0
 8008046:	d04b      	beq.n	80080e0 <HAL_SPI_TransmitReceive+0xd4>
 8008048:	f1b9 0f00 	cmp.w	r9, #0
 800804c:	d048      	beq.n	80080e0 <HAL_SPI_TransmitReceive+0xd4>
 800804e:	2e00      	cmp	r6, #0
 8008050:	d046      	beq.n	80080e0 <HAL_SPI_TransmitReceive+0xd4>
  __HAL_LOCK(hspi);
 8008052:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8008056:	2b01      	cmp	r3, #1
 8008058:	f000 80d2 	beq.w	8008200 <HAL_SPI_TransmitReceive+0x1f4>
 800805c:	2301      	movs	r3, #1
 800805e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008062:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008066:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800806a:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800806c:	bf1c      	itt	ne
 800806e:	2305      	movne	r3, #5
 8008070:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008074:	2300      	movs	r3, #0
 8008076:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 8008078:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800807c:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800807e:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8008080:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008082:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8008084:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008086:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8008088:	bf58      	it	pl
 800808a:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800808c:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 800808e:	bf58      	it	pl
 8008090:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 8008094:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 8008096:	bf58      	it	pl
 8008098:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800809a:	68e1      	ldr	r1, [r4, #12]
 800809c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80080a0:	d155      	bne.n	800814e <HAL_SPI_TransmitReceive+0x142>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080a2:	b10a      	cbz	r2, 80080a8 <HAL_SPI_TransmitReceive+0x9c>
 80080a4:	2e01      	cmp	r6, #1
 80080a6:	d107      	bne.n	80080b8 <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80080a8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80080ac:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80080ae:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80080b0:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80080b2:	3b01      	subs	r3, #1
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80080b8:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080ba:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80080bc:	b29b      	uxth	r3, r3
 80080be:	b98b      	cbnz	r3, 80080e4 <HAL_SPI_TransmitReceive+0xd8>
 80080c0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	b973      	cbnz	r3, 80080e4 <HAL_SPI_TransmitReceive+0xd8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080c6:	463a      	mov	r2, r7
 80080c8:	4641      	mov	r1, r8
 80080ca:	4620      	mov	r0, r4
 80080cc:	f7ff ff2a 	bl	8007f24 <SPI_EndRxTxTransaction>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	f000 8081 	beq.w	80081d8 <HAL_SPI_TransmitReceive+0x1cc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080d6:	2320      	movs	r3, #32
 80080d8:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80080da:	2300      	movs	r3, #0
 80080dc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80080e0:	2001      	movs	r0, #1
 80080e2:	e031      	b.n	8008148 <HAL_SPI_TransmitReceive+0x13c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080e4:	6821      	ldr	r1, [r4, #0]
 80080e6:	688b      	ldr	r3, [r1, #8]
 80080e8:	079a      	lsls	r2, r3, #30
 80080ea:	d50d      	bpl.n	8008108 <HAL_SPI_TransmitReceive+0xfc>
 80080ec:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	b153      	cbz	r3, 8008108 <HAL_SPI_TransmitReceive+0xfc>
 80080f2:	b145      	cbz	r5, 8008106 <HAL_SPI_TransmitReceive+0xfa>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80080f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80080f6:	f833 2b02 	ldrh.w	r2, [r3], #2
 80080fa:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080fc:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80080fe:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8008100:	3b01      	subs	r3, #1
 8008102:	b29b      	uxth	r3, r3
 8008104:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8008106:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008108:	688a      	ldr	r2, [r1, #8]
 800810a:	f012 0201 	ands.w	r2, r2, #1
 800810e:	d00c      	beq.n	800812a <HAL_SPI_TransmitReceive+0x11e>
 8008110:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008112:	b29b      	uxth	r3, r3
 8008114:	b14b      	cbz	r3, 800812a <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 8008116:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008118:	68c9      	ldr	r1, [r1, #12]
 800811a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800811c:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008120:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8008122:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008124:	3b01      	subs	r3, #1
 8008126:	b29b      	uxth	r3, r3
 8008128:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800812a:	f7fe fd61 	bl	8006bf0 <HAL_GetTick>
 800812e:	1bc0      	subs	r0, r0, r7
 8008130:	4540      	cmp	r0, r8
 8008132:	d3c2      	bcc.n	80080ba <HAL_SPI_TransmitReceive+0xae>
 8008134:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008138:	d0bf      	beq.n	80080ba <HAL_SPI_TransmitReceive+0xae>
        hspi->State = HAL_SPI_STATE_READY;
 800813a:	2301      	movs	r3, #1
 800813c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008140:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8008142:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8008144:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8008148:	b003      	add	sp, #12
 800814a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800814e:	b10a      	cbz	r2, 8008154 <HAL_SPI_TransmitReceive+0x148>
 8008150:	2e01      	cmp	r6, #1
 8008152:	d108      	bne.n	8008166 <HAL_SPI_TransmitReceive+0x15a>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008154:	782a      	ldrb	r2, [r5, #0]
 8008156:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008158:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800815a:	3301      	adds	r3, #1
 800815c:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800815e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8008160:	3b01      	subs	r3, #1
 8008162:	b29b      	uxth	r3, r3
 8008164:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8008166:	2501      	movs	r5, #1
 8008168:	e02d      	b.n	80081c6 <HAL_SPI_TransmitReceive+0x1ba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800816a:	6822      	ldr	r2, [r4, #0]
 800816c:	6893      	ldr	r3, [r2, #8]
 800816e:	079b      	lsls	r3, r3, #30
 8008170:	d50e      	bpl.n	8008190 <HAL_SPI_TransmitReceive+0x184>
 8008172:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8008174:	b29b      	uxth	r3, r3
 8008176:	b15b      	cbz	r3, 8008190 <HAL_SPI_TransmitReceive+0x184>
 8008178:	b14d      	cbz	r5, 800818e <HAL_SPI_TransmitReceive+0x182>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800817a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8008180:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008182:	3301      	adds	r3, #1
 8008184:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8008186:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8008188:	3b01      	subs	r3, #1
 800818a:	b29b      	uxth	r3, r3
 800818c:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 800818e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008190:	6822      	ldr	r2, [r4, #0]
 8008192:	6891      	ldr	r1, [r2, #8]
 8008194:	f011 0101 	ands.w	r1, r1, #1
 8008198:	d00d      	beq.n	80081b6 <HAL_SPI_TransmitReceive+0x1aa>
 800819a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800819c:	b29b      	uxth	r3, r3
 800819e:	b153      	cbz	r3, 80081b6 <HAL_SPI_TransmitReceive+0x1aa>
        txallowed = 1U;
 80081a0:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80081a2:	68d2      	ldr	r2, [r2, #12]
 80081a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80081a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80081a8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80081aa:	3301      	adds	r3, #1
 80081ac:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80081ae:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80081b0:	3b01      	subs	r3, #1
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80081b6:	f7fe fd1b 	bl	8006bf0 <HAL_GetTick>
 80081ba:	1bc0      	subs	r0, r0, r7
 80081bc:	4540      	cmp	r0, r8
 80081be:	d302      	bcc.n	80081c6 <HAL_SPI_TransmitReceive+0x1ba>
 80081c0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80081c4:	d1b9      	bne.n	800813a <HAL_SPI_TransmitReceive+0x12e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081c6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1cd      	bne.n	800816a <HAL_SPI_TransmitReceive+0x15e>
 80081ce:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1c9      	bne.n	800816a <HAL_SPI_TransmitReceive+0x15e>
 80081d6:	e776      	b.n	80080c6 <HAL_SPI_TransmitReceive+0xba>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80081d8:	68a3      	ldr	r3, [r4, #8]
 80081da:	b933      	cbnz	r3, 80081ea <HAL_SPI_TransmitReceive+0x1de>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081dc:	9301      	str	r3, [sp, #4]
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	68da      	ldr	r2, [r3, #12]
 80081e2:	9201      	str	r2, [sp, #4]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	9301      	str	r3, [sp, #4]
 80081e8:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80081ea:	2301      	movs	r3, #1
 80081ec:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80081f0:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081f2:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 80081f4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081f8:	1ac0      	subs	r0, r0, r3
 80081fa:	bf18      	it	ne
 80081fc:	2001      	movne	r0, #1
 80081fe:	e7a3      	b.n	8008148 <HAL_SPI_TransmitReceive+0x13c>
    return HAL_BUSY;
 8008200:	2002      	movs	r0, #2
 8008202:	e7a1      	b.n	8008148 <HAL_SPI_TransmitReceive+0x13c>

08008204 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008204:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008208:	2b01      	cmp	r3, #1
 800820a:	d120      	bne.n	800824e <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800820c:	2302      	movs	r3, #2
 800820e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008212:	6803      	ldr	r3, [r0, #0]
 8008214:	68da      	ldr	r2, [r3, #12]
 8008216:	f042 0201 	orr.w	r2, r2, #1
 800821a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800821c:	4a0d      	ldr	r2, [pc, #52]	@ (8008254 <HAL_TIM_Base_Start_IT+0x50>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d00a      	beq.n	8008238 <HAL_TIM_Base_Start_IT+0x34>
 8008222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008226:	d007      	beq.n	8008238 <HAL_TIM_Base_Start_IT+0x34>
 8008228:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800822c:	4293      	cmp	r3, r2
 800822e:	d003      	beq.n	8008238 <HAL_TIM_Base_Start_IT+0x34>
 8008230:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008234:	4293      	cmp	r3, r2
 8008236:	d104      	bne.n	8008242 <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008238:	689a      	ldr	r2, [r3, #8]
 800823a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800823e:	2a06      	cmp	r2, #6
 8008240:	d003      	beq.n	800824a <HAL_TIM_Base_Start_IT+0x46>
    {
      __HAL_TIM_ENABLE(htim);
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	f042 0201 	orr.w	r2, r2, #1
 8008248:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800824a:	2000      	movs	r0, #0
 800824c:	4770      	bx	lr
    return HAL_ERROR;
 800824e:	2001      	movs	r0, #1
}
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	40012c00 	.word	0x40012c00

08008258 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8008258:	4770      	bx	lr

0800825a <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800825a:	4770      	bx	lr

0800825c <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800825c:	4770      	bx	lr

0800825e <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800825e:	4770      	bx	lr

08008260 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8008260:	6803      	ldr	r3, [r0, #0]
{
 8008262:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8008264:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008266:	691e      	ldr	r6, [r3, #16]
{
 8008268:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800826a:	07b1      	lsls	r1, r6, #30
 800826c:	d50d      	bpl.n	800828a <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800826e:	07aa      	lsls	r2, r5, #30
 8008270:	d50b      	bpl.n	800828a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008272:	f06f 0202 	mvn.w	r2, #2
 8008276:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008278:	2201      	movs	r2, #1
 800827a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	079b      	lsls	r3, r3, #30
 8008280:	d069      	beq.n	8008356 <HAL_TIM_IRQHandler+0xf6>
          HAL_TIM_IC_CaptureCallback(htim);
 8008282:	f7ff ffea 	bl	800825a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008286:	2300      	movs	r3, #0
 8008288:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800828a:	0771      	lsls	r1, r6, #29
 800828c:	d510      	bpl.n	80082b0 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800828e:	076a      	lsls	r2, r5, #29
 8008290:	d50e      	bpl.n	80082b0 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008292:	f06f 0204 	mvn.w	r2, #4
 8008296:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8008298:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800829a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800829c:	2202      	movs	r2, #2
 800829e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80082a6:	d05c      	beq.n	8008362 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80082a8:	f7ff ffd7 	bl	800825a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ac:	2300      	movs	r3, #0
 80082ae:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80082b0:	0733      	lsls	r3, r6, #28
 80082b2:	d50f      	bpl.n	80082d4 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80082b4:	0728      	lsls	r0, r5, #28
 80082b6:	d50d      	bpl.n	80082d4 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80082b8:	f06f 0208 	mvn.w	r2, #8
 80082bc:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 80082be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80082c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082c2:	2204      	movs	r2, #4
 80082c4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082c6:	69db      	ldr	r3, [r3, #28]
 80082c8:	0799      	lsls	r1, r3, #30
 80082ca:	d050      	beq.n	800836e <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 80082cc:	f7ff ffc5 	bl	800825a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d0:	2300      	movs	r3, #0
 80082d2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80082d4:	06f2      	lsls	r2, r6, #27
 80082d6:	d510      	bpl.n	80082fa <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80082d8:	06eb      	lsls	r3, r5, #27
 80082da:	d50e      	bpl.n	80082fa <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80082dc:	f06f 0210 	mvn.w	r2, #16
 80082e0:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 80082e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80082e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082e6:	2208      	movs	r2, #8
 80082e8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082ea:	69db      	ldr	r3, [r3, #28]
 80082ec:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80082f0:	d043      	beq.n	800837a <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 80082f2:	f7ff ffb2 	bl	800825a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082f6:	2300      	movs	r3, #0
 80082f8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80082fa:	07f0      	lsls	r0, r6, #31
 80082fc:	d508      	bpl.n	8008310 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80082fe:	07e9      	lsls	r1, r5, #31
 8008300:	d506      	bpl.n	8008310 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008302:	f06f 0201 	mvn.w	r2, #1
 8008306:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008308:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800830a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800830c:	f7fd feda 	bl	80060c4 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008310:	0632      	lsls	r2, r6, #24
 8008312:	d508      	bpl.n	8008326 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008314:	062b      	lsls	r3, r5, #24
 8008316:	d506      	bpl.n	8008326 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008318:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800831c:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_BreakCallback(htim);
 800831e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008320:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008322:	f000 f970 	bl	8008606 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008326:	0670      	lsls	r0, r6, #25
 8008328:	d508      	bpl.n	800833c <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800832a:	0669      	lsls	r1, r5, #25
 800832c:	d506      	bpl.n	800833c <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800832e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008332:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_TriggerCallback(htim);
 8008334:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008336:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008338:	f7ff ff91 	bl	800825e <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800833c:	06b2      	lsls	r2, r6, #26
 800833e:	d522      	bpl.n	8008386 <HAL_TIM_IRQHandler+0x126>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008340:	06ab      	lsls	r3, r5, #26
 8008342:	d520      	bpl.n	8008386 <HAL_TIM_IRQHandler+0x126>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008344:	f06f 0220 	mvn.w	r2, #32
 8008348:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_CommutCallback(htim);
 800834a:	4620      	mov	r0, r4
}
 800834c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008350:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008352:	f000 b957 	b.w	8008604 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008356:	f7ff ff7f 	bl	8008258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800835a:	4620      	mov	r0, r4
 800835c:	f7ff ff7e 	bl	800825c <HAL_TIM_PWM_PulseFinishedCallback>
 8008360:	e791      	b.n	8008286 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008362:	f7ff ff79 	bl	8008258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008366:	4620      	mov	r0, r4
 8008368:	f7ff ff78 	bl	800825c <HAL_TIM_PWM_PulseFinishedCallback>
 800836c:	e79e      	b.n	80082ac <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800836e:	f7ff ff73 	bl	8008258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008372:	4620      	mov	r0, r4
 8008374:	f7ff ff72 	bl	800825c <HAL_TIM_PWM_PulseFinishedCallback>
 8008378:	e7aa      	b.n	80082d0 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800837a:	f7ff ff6d 	bl	8008258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800837e:	4620      	mov	r0, r4
 8008380:	f7ff ff6c 	bl	800825c <HAL_TIM_PWM_PulseFinishedCallback>
 8008384:	e7b7      	b.n	80082f6 <HAL_TIM_IRQHandler+0x96>
}
 8008386:	bd70      	pop	{r4, r5, r6, pc}

08008388 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008388:	4a1e      	ldr	r2, [pc, #120]	@ (8008404 <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 800838a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800838c:	4290      	cmp	r0, r2
 800838e:	d00a      	beq.n	80083a6 <TIM_Base_SetConfig+0x1e>
 8008390:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008394:	d007      	beq.n	80083a6 <TIM_Base_SetConfig+0x1e>
 8008396:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800839a:	4290      	cmp	r0, r2
 800839c:	d003      	beq.n	80083a6 <TIM_Base_SetConfig+0x1e>
 800839e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80083a2:	4290      	cmp	r0, r2
 80083a4:	d115      	bne.n	80083d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80083a6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80083ac:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083ae:	4a15      	ldr	r2, [pc, #84]	@ (8008404 <TIM_Base_SetConfig+0x7c>)
 80083b0:	4290      	cmp	r0, r2
 80083b2:	d00a      	beq.n	80083ca <TIM_Base_SetConfig+0x42>
 80083b4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80083b8:	d007      	beq.n	80083ca <TIM_Base_SetConfig+0x42>
 80083ba:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80083be:	4290      	cmp	r0, r2
 80083c0:	d003      	beq.n	80083ca <TIM_Base_SetConfig+0x42>
 80083c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80083c6:	4290      	cmp	r0, r2
 80083c8:	d103      	bne.n	80083d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083ca:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80083cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083d0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083d2:	694a      	ldr	r2, [r1, #20]
 80083d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083d8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80083da:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083dc:	688b      	ldr	r3, [r1, #8]
 80083de:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083e0:	680b      	ldr	r3, [r1, #0]
 80083e2:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083e4:	4b07      	ldr	r3, [pc, #28]	@ (8008404 <TIM_Base_SetConfig+0x7c>)
 80083e6:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083e8:	bf04      	itt	eq
 80083ea:	690b      	ldreq	r3, [r1, #16]
 80083ec:	6303      	streq	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083ee:	2301      	movs	r3, #1
 80083f0:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80083f2:	6903      	ldr	r3, [r0, #16]
 80083f4:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80083f6:	bf42      	ittt	mi
 80083f8:	6903      	ldrmi	r3, [r0, #16]
 80083fa:	f023 0301 	bicmi.w	r3, r3, #1
 80083fe:	6103      	strmi	r3, [r0, #16]
  }
}
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	40012c00 	.word	0x40012c00

08008408 <HAL_TIM_Base_Init>:
{
 8008408:	b510      	push	{r4, lr}
  if (htim == NULL)
 800840a:	4604      	mov	r4, r0
 800840c:	b330      	cbz	r0, 800845c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800840e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008412:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008416:	b91b      	cbnz	r3, 8008420 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8008418:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800841c:	f7fd fe1a 	bl	8006054 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8008420:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008422:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8008424:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008428:	1d21      	adds	r1, r4, #4
 800842a:	f7ff ffad 	bl	8008388 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800842e:	2301      	movs	r3, #1
  return HAL_OK;
 8008430:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008432:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008436:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800843a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800843e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008442:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008446:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800844a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800844e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008452:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8008456:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800845a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800845c:	2001      	movs	r0, #1
 800845e:	e7fc      	b.n	800845a <HAL_TIM_Base_Init+0x52>

08008460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008460:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008462:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008464:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008466:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800846a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800846e:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008470:	6082      	str	r2, [r0, #8]
}
 8008472:	bd10      	pop	{r4, pc}

08008474 <HAL_TIM_ConfigClockSource>:
{
 8008474:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8008476:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800847a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800847c:	2b01      	cmp	r3, #1
 800847e:	f04f 0002 	mov.w	r0, #2
 8008482:	f000 808e 	beq.w	80085a2 <HAL_TIM_ConfigClockSource+0x12e>
 8008486:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8008488:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800848c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800848e:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8008492:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008494:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008498:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800849c:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800849e:	680b      	ldr	r3, [r1, #0]
 80084a0:	2b60      	cmp	r3, #96	@ 0x60
 80084a2:	d04f      	beq.n	8008544 <HAL_TIM_ConfigClockSource+0xd0>
 80084a4:	d832      	bhi.n	800850c <HAL_TIM_ConfigClockSource+0x98>
 80084a6:	2b40      	cmp	r3, #64	@ 0x40
 80084a8:	d064      	beq.n	8008574 <HAL_TIM_ConfigClockSource+0x100>
 80084aa:	d816      	bhi.n	80084da <HAL_TIM_ConfigClockSource+0x66>
 80084ac:	2b20      	cmp	r3, #32
 80084ae:	d00d      	beq.n	80084cc <HAL_TIM_ConfigClockSource+0x58>
 80084b0:	d80a      	bhi.n	80084c8 <HAL_TIM_ConfigClockSource+0x54>
 80084b2:	f033 0110 	bics.w	r1, r3, #16
 80084b6:	d009      	beq.n	80084cc <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 80084b8:	2301      	movs	r3, #1
 80084ba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80084be:	2300      	movs	r3, #0
 80084c0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80084c4:	4610      	mov	r0, r2
 80084c6:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 80084c8:	2b30      	cmp	r3, #48	@ 0x30
 80084ca:	d1f5      	bne.n	80084b8 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 80084cc:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80084ce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084d2:	4313      	orrs	r3, r2
 80084d4:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80084d8:	e028      	b.n	800852c <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 80084da:	2b50      	cmp	r3, #80	@ 0x50
 80084dc:	d1ec      	bne.n	80084b8 <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 80084de:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80084e0:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80084e2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084e4:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084e6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ea:	f023 0301 	bic.w	r3, r3, #1
 80084ee:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084f0:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80084f2:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084f8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80084fc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80084fe:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8008500:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008506:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 800850a:	e00f      	b.n	800852c <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800850c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008510:	d00d      	beq.n	800852e <HAL_TIM_ConfigClockSource+0xba>
 8008512:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008516:	d00c      	beq.n	8008532 <HAL_TIM_ConfigClockSource+0xbe>
 8008518:	2b70      	cmp	r3, #112	@ 0x70
 800851a:	d1cd      	bne.n	80084b8 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800851c:	68cb      	ldr	r3, [r1, #12]
 800851e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8008522:	f7ff ff9d 	bl	8008460 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008526:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008528:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800852c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800852e:	2200      	movs	r2, #0
 8008530:	e7c2      	b.n	80084b8 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8008532:	68cb      	ldr	r3, [r1, #12]
 8008534:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8008538:	f7ff ff92 	bl	8008460 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800853c:	6883      	ldr	r3, [r0, #8]
 800853e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008542:	e7f3      	b.n	800852c <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 8008544:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008546:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8008548:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800854a:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 800854e:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008550:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008552:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008554:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008558:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 800855c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008560:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8008564:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8008566:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8008568:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800856a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800856e:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8008572:	e7db      	b.n	800852c <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 8008574:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8008576:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8008578:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800857a:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800857c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008580:	f023 0301 	bic.w	r3, r3, #1
 8008584:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008586:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8008588:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800858a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800858e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8008592:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8008594:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8008596:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800859c:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80085a0:	e7c4      	b.n	800852c <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 80085a2:	4602      	mov	r2, r0
 80085a4:	e78e      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x50>
	...

080085a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085a8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085aa:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 80085ae:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	f04f 0002 	mov.w	r0, #2
 80085b6:	d022      	beq.n	80085fe <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085b8:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80085ba:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 80085be:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085c0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80085c2:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085c6:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 80085c8:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085ca:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085cc:	4c0c      	ldr	r4, [pc, #48]	@ (8008600 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80085ce:	42a3      	cmp	r3, r4
 80085d0:	d00a      	beq.n	80085e8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80085d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085d6:	d007      	beq.n	80085e8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80085d8:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 80085dc:	42a3      	cmp	r3, r4
 80085de:	d003      	beq.n	80085e8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80085e0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80085e4:	42a3      	cmp	r3, r4
 80085e6:	d104      	bne.n	80085f2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085e8:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085ea:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085ee:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085f0:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085f2:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80085f4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80085f6:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80085fa:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 80085fe:	bd30      	pop	{r4, r5, pc}
 8008600:	40012c00 	.word	0x40012c00

08008604 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8008604:	4770      	bx	lr

08008606 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8008606:	4770      	bx	lr

08008608 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008608:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	f102 030c 	add.w	r3, r2, #12
 800860e:	e853 3f00 	ldrex	r3, [r3]
 8008612:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008616:	320c      	adds	r2, #12
 8008618:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800861c:	6802      	ldr	r2, [r0, #0]
 800861e:	2900      	cmp	r1, #0
 8008620:	d1f2      	bne.n	8008608 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008622:	f102 0314 	add.w	r3, r2, #20
 8008626:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800862a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862e:	f102 0c14 	add.w	ip, r2, #20
 8008632:	e84c 3100 	strex	r1, r3, [ip]
 8008636:	2900      	cmp	r1, #0
 8008638:	d1f3      	bne.n	8008622 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800863a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800863c:	2b01      	cmp	r3, #1
 800863e:	d10b      	bne.n	8008658 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008640:	f102 030c 	add.w	r3, r2, #12
 8008644:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008648:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864c:	f102 0c0c 	add.w	ip, r2, #12
 8008650:	e84c 3100 	strex	r1, r3, [ip]
 8008654:	2900      	cmp	r1, #0
 8008656:	d1f3      	bne.n	8008640 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008658:	2320      	movs	r3, #32
 800865a:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800865e:	2300      	movs	r3, #0
 8008660:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8008662:	4770      	bx	lr

08008664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008664:	b510      	push	{r4, lr}
 8008666:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008668:	6803      	ldr	r3, [r0, #0]
 800866a:	68c1      	ldr	r1, [r0, #12]
 800866c:	691a      	ldr	r2, [r3, #16]
 800866e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8008672:	430a      	orrs	r2, r1
 8008674:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008676:	6882      	ldr	r2, [r0, #8]
 8008678:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800867a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800867c:	4302      	orrs	r2, r0
 800867e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8008680:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 8008684:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008688:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800868a:	430a      	orrs	r2, r1
 800868c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800868e:	695a      	ldr	r2, [r3, #20]
 8008690:	69a1      	ldr	r1, [r4, #24]
 8008692:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008696:	430a      	orrs	r2, r1
 8008698:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800869a:	4a0e      	ldr	r2, [pc, #56]	@ (80086d4 <UART_SetConfig+0x70>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d115      	bne.n	80086cc <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80086a0:	f7ff fafc 	bl	8007c9c <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086a4:	2319      	movs	r3, #25
 80086a6:	4343      	muls	r3, r0
 80086a8:	6862      	ldr	r2, [r4, #4]
 80086aa:	6820      	ldr	r0, [r4, #0]
 80086ac:	0092      	lsls	r2, r2, #2
 80086ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80086b2:	2264      	movs	r2, #100	@ 0x64
 80086b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80086b8:	fb02 3311 	mls	r3, r2, r1, r3
 80086bc:	011b      	lsls	r3, r3, #4
 80086be:	3332      	adds	r3, #50	@ 0x32
 80086c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80086c4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80086c8:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80086ca:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80086cc:	f7ff fad6 	bl	8007c7c <HAL_RCC_GetPCLK1Freq>
 80086d0:	e7e8      	b.n	80086a4 <UART_SetConfig+0x40>
 80086d2:	bf00      	nop
 80086d4:	40013800 	.word	0x40013800

080086d8 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80086d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086da:	4605      	mov	r5, r0
 80086dc:	460c      	mov	r4, r1
 80086de:	4617      	mov	r7, r2
 80086e0:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086e2:	682a      	ldr	r2, [r5, #0]
 80086e4:	6813      	ldr	r3, [r2, #0]
 80086e6:	ea34 0303 	bics.w	r3, r4, r3
 80086ea:	d101      	bne.n	80086f0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80086ec:	2000      	movs	r0, #0
 80086ee:	e021      	b.n	8008734 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80086f0:	1c70      	adds	r0, r6, #1
 80086f2:	d0f7      	beq.n	80086e4 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086f4:	f7fe fa7c 	bl	8006bf0 <HAL_GetTick>
 80086f8:	1bc0      	subs	r0, r0, r7
 80086fa:	4286      	cmp	r6, r0
 80086fc:	d31c      	bcc.n	8008738 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 80086fe:	b1de      	cbz	r6, 8008738 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008700:	682b      	ldr	r3, [r5, #0]
 8008702:	68da      	ldr	r2, [r3, #12]
 8008704:	0751      	lsls	r1, r2, #29
 8008706:	d5ec      	bpl.n	80086e2 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8008708:	2c80      	cmp	r4, #128	@ 0x80
 800870a:	d0ea      	beq.n	80086e2 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 800870c:	2c40      	cmp	r4, #64	@ 0x40
 800870e:	d0e8      	beq.n	80086e2 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	0712      	lsls	r2, r2, #28
 8008714:	d5e5      	bpl.n	80086e2 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008716:	2400      	movs	r4, #0
 8008718:	9401      	str	r4, [sp, #4]
 800871a:	681a      	ldr	r2, [r3, #0]
          UART_EndRxTransfer(huart);
 800871c:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 800871e:	9201      	str	r2, [sp, #4]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	9301      	str	r3, [sp, #4]
 8008724:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8008726:	f7ff ff6f 	bl	8008608 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800872a:	2308      	movs	r3, #8
          return HAL_ERROR;
 800872c:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800872e:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8008730:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
}
 8008734:	b003      	add	sp, #12
 8008736:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008738:	2003      	movs	r0, #3
 800873a:	e7fb      	b.n	8008734 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

0800873c <HAL_UART_Init>:
{
 800873c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800873e:	4604      	mov	r4, r0
 8008740:	b348      	cbz	r0, 8008796 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008742:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8008746:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800874a:	b91b      	cbnz	r3, 8008754 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800874c:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8008750:	f7fe f856 	bl	8006800 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8008754:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8008756:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008758:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800875c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800875e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8008760:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008764:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8008766:	f7ff ff7d 	bl	8008664 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800876a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800876c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800876e:	691a      	ldr	r2, [r3, #16]
 8008770:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008776:	695a      	ldr	r2, [r3, #20]
 8008778:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800877c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800877e:	68da      	ldr	r2, [r3, #12]
 8008780:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008784:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8008786:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008788:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800878a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800878e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008792:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8008794:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008796:	2001      	movs	r0, #1
 8008798:	e7fc      	b.n	8008794 <HAL_UART_Init+0x58>

0800879a <HAL_UART_Transmit>:
{
 800879a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800879e:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80087a0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80087a4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80087a6:	2b20      	cmp	r3, #32
{
 80087a8:	460e      	mov	r6, r1
 80087aa:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80087ac:	d13f      	bne.n	800882e <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 80087ae:	2900      	cmp	r1, #0
 80087b0:	d03f      	beq.n	8008832 <HAL_UART_Transmit+0x98>
 80087b2:	2a00      	cmp	r2, #0
 80087b4:	d03d      	beq.n	8008832 <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087b6:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087b8:	2500      	movs	r5, #0
 80087ba:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087bc:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 80087c0:	f7fe fa16 	bl	8006bf0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087c4:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80087c6:	4681      	mov	r9, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferSize = Size;
 80087cc:	84a7      	strh	r7, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 80087ce:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087d0:	d103      	bne.n	80087da <HAL_UART_Transmit+0x40>
 80087d2:	6923      	ldr	r3, [r4, #16]
 80087d4:	b90b      	cbnz	r3, 80087da <HAL_UART_Transmit+0x40>
 80087d6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80087d8:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80087da:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80087dc:	b29b      	uxth	r3, r3
 80087de:	b953      	cbnz	r3, 80087f6 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087e0:	4643      	mov	r3, r8
 80087e2:	464a      	mov	r2, r9
 80087e4:	2140      	movs	r1, #64	@ 0x40
 80087e6:	4620      	mov	r0, r4
 80087e8:	f7ff ff76 	bl	80086d8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80087ec:	2320      	movs	r3, #32
 80087ee:	b950      	cbnz	r0, 8008806 <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 80087f0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80087f4:	e00a      	b.n	800880c <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087f6:	4643      	mov	r3, r8
 80087f8:	464a      	mov	r2, r9
 80087fa:	2180      	movs	r1, #128	@ 0x80
 80087fc:	4620      	mov	r0, r4
 80087fe:	f7ff ff6b 	bl	80086d8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8008802:	b128      	cbz	r0, 8008810 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8008804:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8008806:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8008808:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 800880c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008810:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8008812:	b94e      	cbnz	r6, 8008828 <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008814:	f835 3b02 	ldrh.w	r3, [r5], #2
 8008818:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800881c:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800881e:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 8008820:	3901      	subs	r1, #1
 8008822:	b289      	uxth	r1, r1
 8008824:	84e1      	strh	r1, [r4, #38]	@ 0x26
 8008826:	e7d8      	b.n	80087da <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008828:	f816 3b01 	ldrb.w	r3, [r6], #1
 800882c:	e7f6      	b.n	800881c <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800882e:	2002      	movs	r0, #2
 8008830:	e7ec      	b.n	800880c <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8008832:	2001      	movs	r0, #1
 8008834:	e7ea      	b.n	800880c <HAL_UART_Transmit+0x72>

08008836 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8008836:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800883a:	2b20      	cmp	r3, #32
 800883c:	d110      	bne.n	8008860 <HAL_UART_Transmit_IT+0x2a>
    if ((pData == NULL) || (Size == 0U))
 800883e:	b189      	cbz	r1, 8008864 <HAL_UART_Transmit_IT+0x2e>
 8008840:	b182      	cbz	r2, 8008864 <HAL_UART_Transmit_IT+0x2e>
    huart->TxXferCount = Size;
 8008842:	84c2      	strh	r2, [r0, #38]	@ 0x26
    huart->TxXferSize = Size;
 8008844:	8482      	strh	r2, [r0, #36]	@ 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008846:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008848:	2221      	movs	r2, #33	@ 0x21
    huart->pTxBuffPtr = pData;
 800884a:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800884c:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800884e:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008850:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008854:	68ca      	ldr	r2, [r1, #12]
    return HAL_OK;
 8008856:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008858:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800885c:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 800885e:	4770      	bx	lr
    return HAL_BUSY;
 8008860:	2002      	movs	r0, #2
 8008862:	4770      	bx	lr
      return HAL_ERROR;
 8008864:	2001      	movs	r0, #1
}
 8008866:	4770      	bx	lr

08008868 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8008868:	4770      	bx	lr

0800886a <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800886a:	4770      	bx	lr

0800886c <UART_DMAError>:
{
 800886c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800886e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008870:	6803      	ldr	r3, [r0, #0]
 8008872:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008874:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8008878:	2921      	cmp	r1, #33	@ 0x21
 800887a:	d112      	bne.n	80088a2 <UART_DMAError+0x36>
 800887c:	0612      	lsls	r2, r2, #24
 800887e:	d510      	bpl.n	80088a2 <UART_DMAError+0x36>
    huart->TxXferCount = 0x00U;
 8008880:	2200      	movs	r2, #0
 8008882:	84c2      	strh	r2, [r0, #38]	@ 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008884:	f103 020c 	add.w	r2, r3, #12
 8008888:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800888c:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008890:	f103 0c0c 	add.w	ip, r3, #12
 8008894:	e84c 2100 	strex	r1, r2, [ip]
 8008898:	2900      	cmp	r1, #0
 800889a:	d1f3      	bne.n	8008884 <UART_DMAError+0x18>
  huart->gState = HAL_UART_STATE_READY;
 800889c:	2220      	movs	r2, #32
 800889e:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088a2:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80088a4:	f890 2042 	ldrb.w	r2, [r0, #66]	@ 0x42
 80088a8:	2a22      	cmp	r2, #34	@ 0x22
 80088aa:	d105      	bne.n	80088b8 <UART_DMAError+0x4c>
 80088ac:	065b      	lsls	r3, r3, #25
 80088ae:	d503      	bpl.n	80088b8 <UART_DMAError+0x4c>
    huart->RxXferCount = 0x00U;
 80088b0:	2300      	movs	r3, #0
 80088b2:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80088b4:	f7ff fea8 	bl	8008608 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80088b8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80088ba:	f043 0310 	orr.w	r3, r3, #16
 80088be:	6443      	str	r3, [r0, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 80088c0:	f7ff ffd3 	bl	800886a <HAL_UART_ErrorCallback>
}
 80088c4:	bd08      	pop	{r3, pc}

080088c6 <UART_DMAAbortOnError>:
{
 80088c6:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80088c8:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088ca:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 80088cc:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80088ce:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 80088d0:	f7ff ffcb 	bl	800886a <HAL_UART_ErrorCallback>
}
 80088d4:	bd08      	pop	{r3, pc}

080088d6 <HAL_UARTEx_RxEventCallback>:
}
 80088d6:	4770      	bx	lr

080088d8 <UART_DMARxHalfCplt>:
{
 80088d8:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80088da:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088dc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80088de:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088e0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d104      	bne.n	80088f0 <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80088e6:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80088e8:	0849      	lsrs	r1, r1, #1
 80088ea:	f7ff fff4 	bl	80088d6 <HAL_UARTEx_RxEventCallback>
}
 80088ee:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 80088f0:	f7ff ffba 	bl	8008868 <HAL_UART_RxHalfCpltCallback>
}
 80088f4:	e7fb      	b.n	80088ee <UART_DMARxHalfCplt+0x16>

080088f6 <UART_DMAReceiveCplt>:
{
 80088f6:	b508      	push	{r3, lr}
 80088f8:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80088fa:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088fc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f013 0320 	ands.w	r3, r3, #32
 8008904:	d137      	bne.n	8008976 <UART_DMAReceiveCplt+0x80>
    huart->RxXferCount = 0U;
 8008906:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008908:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890a:	f102 030c 	add.w	r3, r2, #12
 800890e:	e853 3f00 	ldrex	r3, [r3]
 8008912:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008916:	320c      	adds	r2, #12
 8008918:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800891c:	6803      	ldr	r3, [r0, #0]
 800891e:	2900      	cmp	r1, #0
 8008920:	d1f2      	bne.n	8008908 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008922:	f103 0214 	add.w	r2, r3, #20
 8008926:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800892a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892e:	f103 0c14 	add.w	ip, r3, #20
 8008932:	e84c 2100 	strex	r1, r2, [ip]
 8008936:	2900      	cmp	r1, #0
 8008938:	d1f3      	bne.n	8008922 <UART_DMAReceiveCplt+0x2c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893a:	f103 0214 	add.w	r2, r3, #20
 800893e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008942:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008946:	f103 0c14 	add.w	ip, r3, #20
 800894a:	e84c 2100 	strex	r1, r2, [ip]
 800894e:	2900      	cmp	r1, #0
 8008950:	d1f3      	bne.n	800893a <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8008952:	2220      	movs	r2, #32
 8008954:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008958:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800895a:	2a01      	cmp	r2, #1
 800895c:	d10b      	bne.n	8008976 <UART_DMAReceiveCplt+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895e:	f103 020c 	add.w	r2, r3, #12
 8008962:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008966:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896a:	f103 0c0c 	add.w	ip, r3, #12
 800896e:	e84c 2100 	strex	r1, r2, [ip]
 8008972:	2900      	cmp	r1, #0
 8008974:	d1f3      	bne.n	800895e <UART_DMAReceiveCplt+0x68>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008976:	2300      	movs	r3, #0
 8008978:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800897a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800897c:	2b01      	cmp	r3, #1
 800897e:	d103      	bne.n	8008988 <UART_DMAReceiveCplt+0x92>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008980:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8008982:	f7ff ffa8 	bl	80088d6 <HAL_UARTEx_RxEventCallback>
}
 8008986:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8008988:	f7fe f830 	bl	80069ec <HAL_UART_RxCpltCallback>
}
 800898c:	e7fb      	b.n	8008986 <UART_DMAReceiveCplt+0x90>

0800898e <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800898e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8008992:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008994:	2b22      	cmp	r3, #34	@ 0x22
 8008996:	d142      	bne.n	8008a1e <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008998:	6881      	ldr	r1, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800899a:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800899c:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80089a0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089a2:	d13f      	bne.n	8008a24 <UART_Receive_IT.isra.0+0x96>
 80089a4:	6901      	ldr	r1, [r0, #16]
 80089a6:	2900      	cmp	r1, #0
 80089a8:	d13f      	bne.n	8008a2a <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089aa:	6852      	ldr	r2, [r2, #4]
 80089ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089b0:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 80089b4:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 80089b6:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80089b8:	3b01      	subs	r3, #1
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d12d      	bne.n	8008a1e <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80089c2:	6802      	ldr	r2, [r0, #0]
 80089c4:	68d1      	ldr	r1, [r2, #12]
 80089c6:	f021 0120 	bic.w	r1, r1, #32
 80089ca:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80089cc:	68d1      	ldr	r1, [r2, #12]
 80089ce:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80089d2:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80089d4:	6951      	ldr	r1, [r2, #20]
 80089d6:	f021 0101 	bic.w	r1, r1, #1
 80089da:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80089dc:	2220      	movs	r2, #32
 80089de:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089e2:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089e4:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80089e6:	2a01      	cmp	r2, #1
 80089e8:	6802      	ldr	r2, [r0, #0]
 80089ea:	d128      	bne.n	8008a3e <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ec:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ee:	f102 030c 	add.w	r3, r2, #12
 80089f2:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089f6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fa:	f102 0c0c 	add.w	ip, r2, #12
 80089fe:	e84c 3100 	strex	r1, r3, [ip]
 8008a02:	2900      	cmp	r1, #0
 8008a04:	d1f3      	bne.n	80089ee <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a06:	6813      	ldr	r3, [r2, #0]
 8008a08:	06db      	lsls	r3, r3, #27
 8008a0a:	d505      	bpl.n	8008a18 <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a0c:	9101      	str	r1, [sp, #4]
 8008a0e:	6813      	ldr	r3, [r2, #0]
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	6853      	ldr	r3, [r2, #4]
 8008a14:	9301      	str	r3, [sp, #4]
 8008a16:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a18:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8008a1a:	f7ff ff5c 	bl	80088d6 <HAL_UARTEx_RxEventCallback>
}
 8008a1e:	b003      	add	sp, #12
 8008a20:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a24:	b939      	cbnz	r1, 8008a36 <UART_Receive_IT.isra.0+0xa8>
 8008a26:	6901      	ldr	r1, [r0, #16]
 8008a28:	b929      	cbnz	r1, 8008a36 <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a2a:	6852      	ldr	r2, [r2, #4]
 8008a2c:	b2d2      	uxtb	r2, r2
 8008a2e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8008a30:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008a32:	3301      	adds	r3, #1
 8008a34:	e7be      	b.n	80089b4 <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a36:	6852      	ldr	r2, [r2, #4]
 8008a38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008a3c:	e7f7      	b.n	8008a2e <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 8008a3e:	f7fd ffd5 	bl	80069ec <HAL_UART_RxCpltCallback>
 8008a42:	e7ec      	b.n	8008a1e <UART_Receive_IT.isra.0+0x90>

08008a44 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a44:	6803      	ldr	r3, [r0, #0]
{
 8008a46:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a48:	681a      	ldr	r2, [r3, #0]
{
 8008a4a:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8008a4c:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a4e:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a50:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8008a52:	d108      	bne.n	8008a66 <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a54:	0696      	lsls	r6, r2, #26
 8008a56:	d568      	bpl.n	8008b2a <HAL_UART_IRQHandler+0xe6>
 8008a58:	068d      	lsls	r5, r1, #26
 8008a5a:	d566      	bpl.n	8008b2a <HAL_UART_IRQHandler+0xe6>
}
 8008a5c:	b002      	add	sp, #8
 8008a5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8008a62:	f7ff bf94 	b.w	800898e <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008a66:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a6a:	f401 7590 	and.w	r5, r1, #288	@ 0x120
 8008a6e:	4305      	orrs	r5, r0
 8008a70:	d05b      	beq.n	8008b2a <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a72:	07d6      	lsls	r6, r2, #31
 8008a74:	d505      	bpl.n	8008a82 <HAL_UART_IRQHandler+0x3e>
 8008a76:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a78:	bf42      	ittt	mi
 8008a7a:	6c63      	ldrmi	r3, [r4, #68]	@ 0x44
 8008a7c:	f043 0301 	orrmi.w	r3, r3, #1
 8008a80:	6463      	strmi	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a82:	0753      	lsls	r3, r2, #29
 8008a84:	d504      	bpl.n	8008a90 <HAL_UART_IRQHandler+0x4c>
 8008a86:	b118      	cbz	r0, 8008a90 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a88:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008a8a:	f043 0302 	orr.w	r3, r3, #2
 8008a8e:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a90:	0796      	lsls	r6, r2, #30
 8008a92:	d504      	bpl.n	8008a9e <HAL_UART_IRQHandler+0x5a>
 8008a94:	b118      	cbz	r0, 8008a9e <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a96:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008a98:	f043 0304 	orr.w	r3, r3, #4
 8008a9c:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008a9e:	0715      	lsls	r5, r2, #28
 8008aa0:	d507      	bpl.n	8008ab2 <HAL_UART_IRQHandler+0x6e>
 8008aa2:	f001 0320 	and.w	r3, r1, #32
 8008aa6:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008aa8:	bf1e      	ittt	ne
 8008aaa:	6c63      	ldrne	r3, [r4, #68]	@ 0x44
 8008aac:	f043 0308 	orrne.w	r3, r3, #8
 8008ab0:	6463      	strne	r3, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ab2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d032      	beq.n	8008b1e <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ab8:	0692      	lsls	r2, r2, #26
 8008aba:	d504      	bpl.n	8008ac6 <HAL_UART_IRQHandler+0x82>
 8008abc:	068b      	lsls	r3, r1, #26
 8008abe:	d502      	bpl.n	8008ac6 <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f7ff ff64 	bl	800898e <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ac6:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 8008ac8:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008aca:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008acc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008ad2:	f002 0208 	and.w	r2, r2, #8
 8008ad6:	ea53 0502 	orrs.w	r5, r3, r2
 8008ada:	d022      	beq.n	8008b22 <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8008adc:	f7ff fd94 	bl	8008608 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ae0:	6973      	ldr	r3, [r6, #20]
 8008ae2:	065e      	lsls	r6, r3, #25
 8008ae4:	d518      	bpl.n	8008b18 <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ae6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae8:	f102 0314 	add.w	r3, r2, #20
 8008aec:	e853 3f00 	ldrex	r3, [r3]
 8008af0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af4:	3214      	adds	r2, #20
 8008af6:	e842 3100 	strex	r1, r3, [r2]
 8008afa:	2900      	cmp	r1, #0
 8008afc:	d1f3      	bne.n	8008ae6 <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 8008afe:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8008b00:	b150      	cbz	r0, 8008b18 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b02:	4b74      	ldr	r3, [pc, #464]	@ (8008cd4 <HAL_UART_IRQHandler+0x290>)
 8008b04:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b06:	f7fe fc89 	bl	800741c <HAL_DMA_Abort_IT>
 8008b0a:	b140      	cbz	r0, 8008b1e <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b0c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8008b0e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
}
 8008b10:	b002      	add	sp, #8
 8008b12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b16:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f7ff fea6 	bl	800886a <HAL_UART_ErrorCallback>
}
 8008b1e:	b002      	add	sp, #8
 8008b20:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8008b22:	f7ff fea2 	bl	800886a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b26:	6465      	str	r5, [r4, #68]	@ 0x44
 8008b28:	e7f9      	b.n	8008b1e <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b2a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008b2c:	2801      	cmp	r0, #1
 8008b2e:	f040 8094 	bne.w	8008c5a <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008b32:	06d5      	lsls	r5, r2, #27
 8008b34:	f140 8091 	bpl.w	8008c5a <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008b38:	06c8      	lsls	r0, r1, #27
 8008b3a:	f140 808e 	bpl.w	8008c5a <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b3e:	2200      	movs	r2, #0
 8008b40:	9201      	str	r2, [sp, #4]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	9201      	str	r2, [sp, #4]
 8008b46:	685a      	ldr	r2, [r3, #4]
 8008b48:	9201      	str	r2, [sp, #4]
 8008b4a:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b4c:	695a      	ldr	r2, [r3, #20]
 8008b4e:	0652      	lsls	r2, r2, #25
 8008b50:	d54d      	bpl.n	8008bee <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b52:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8008b54:	680a      	ldr	r2, [r1, #0]
 8008b56:	6852      	ldr	r2, [r2, #4]
 8008b58:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8008b5a:	2a00      	cmp	r2, #0
 8008b5c:	d0df      	beq.n	8008b1e <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b5e:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 8008b60:	4290      	cmp	r0, r2
 8008b62:	d9dc      	bls.n	8008b1e <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 8008b64:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b66:	698a      	ldr	r2, [r1, #24]
 8008b68:	2a20      	cmp	r2, #32
 8008b6a:	d036      	beq.n	8008bda <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6c:	f103 020c 	add.w	r2, r3, #12
 8008b70:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b78:	f103 000c 	add.w	r0, r3, #12
 8008b7c:	e840 2100 	strex	r1, r2, [r0]
 8008b80:	2900      	cmp	r1, #0
 8008b82:	d1f3      	bne.n	8008b6c <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b84:	f103 0214 	add.w	r2, r3, #20
 8008b88:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b8c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b90:	f103 0014 	add.w	r0, r3, #20
 8008b94:	e840 2100 	strex	r1, r2, [r0]
 8008b98:	2900      	cmp	r1, #0
 8008b9a:	d1f3      	bne.n	8008b84 <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9c:	f103 0214 	add.w	r2, r3, #20
 8008ba0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ba4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba8:	f103 0014 	add.w	r0, r3, #20
 8008bac:	e840 2100 	strex	r1, r2, [r0]
 8008bb0:	2900      	cmp	r1, #0
 8008bb2:	d1f3      	bne.n	8008b9c <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 8008bb4:	2220      	movs	r2, #32
 8008bb6:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bba:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbc:	f103 020c 	add.w	r2, r3, #12
 8008bc0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bc4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc8:	f103 000c 	add.w	r0, r3, #12
 8008bcc:	e840 2100 	strex	r1, r2, [r0]
 8008bd0:	2900      	cmp	r1, #0
 8008bd2:	d1f3      	bne.n	8008bbc <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bd4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8008bd6:	f7fe fc01 	bl	80073dc <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bda:	2302      	movs	r3, #2
 8008bdc:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bde:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8008be0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8008be2:	1ac9      	subs	r1, r1, r3
 8008be4:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008be6:	4620      	mov	r0, r4
 8008be8:	f7ff fe75 	bl	80088d6 <HAL_UARTEx_RxEventCallback>
 8008bec:	e797      	b.n	8008b1e <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008bee:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8008bf0:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008bf2:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 8008bf4:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008bf6:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d090      	beq.n	8008b1e <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008bfc:	1a89      	subs	r1, r1, r2
 8008bfe:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8008c00:	2900      	cmp	r1, #0
 8008c02:	d08c      	beq.n	8008b1e <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c04:	f103 020c 	add.w	r2, r3, #12
 8008c08:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c0c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c10:	f103 050c 	add.w	r5, r3, #12
 8008c14:	e845 2000 	strex	r0, r2, [r5]
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d1f3      	bne.n	8008c04 <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1c:	f103 0214 	add.w	r2, r3, #20
 8008c20:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c24:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c28:	f103 0514 	add.w	r5, r3, #20
 8008c2c:	e845 2000 	strex	r0, r2, [r5]
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d1f3      	bne.n	8008c1c <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 8008c34:	2220      	movs	r2, #32
 8008c36:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c3a:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3c:	f103 020c 	add.w	r2, r3, #12
 8008c40:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c44:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c48:	f103 050c 	add.w	r5, r3, #12
 8008c4c:	e845 2000 	strex	r0, r2, [r5]
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d1f3      	bne.n	8008c3c <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c54:	2302      	movs	r3, #2
 8008c56:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c58:	e7c5      	b.n	8008be6 <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c5a:	0616      	lsls	r6, r2, #24
 8008c5c:	d528      	bpl.n	8008cb0 <HAL_UART_IRQHandler+0x26c>
 8008c5e:	060d      	lsls	r5, r1, #24
 8008c60:	d526      	bpl.n	8008cb0 <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c62:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8008c66:	2a21      	cmp	r2, #33	@ 0x21
 8008c68:	f47f af59 	bne.w	8008b1e <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c6c:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c6e:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c70:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8008c74:	d117      	bne.n	8008ca6 <HAL_UART_IRQHandler+0x262>
 8008c76:	6921      	ldr	r1, [r4, #16]
 8008c78:	b9a9      	cbnz	r1, 8008ca6 <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c7a:	f832 1b02 	ldrh.w	r1, [r2], #2
 8008c7e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8008c82:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c84:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8008c86:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8008c88:	3a01      	subs	r2, #1
 8008c8a:	b292      	uxth	r2, r2
 8008c8c:	84e2      	strh	r2, [r4, #38]	@ 0x26
 8008c8e:	2a00      	cmp	r2, #0
 8008c90:	f47f af45 	bne.w	8008b1e <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c94:	68da      	ldr	r2, [r3, #12]
 8008c96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c9a:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c9c:	68da      	ldr	r2, [r3, #12]
 8008c9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ca2:	60da      	str	r2, [r3, #12]
 8008ca4:	e73b      	b.n	8008b1e <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008ca6:	1c51      	adds	r1, r2, #1
 8008ca8:	6221      	str	r1, [r4, #32]
 8008caa:	7812      	ldrb	r2, [r2, #0]
 8008cac:	605a      	str	r2, [r3, #4]
 8008cae:	e7ea      	b.n	8008c86 <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008cb0:	0650      	lsls	r0, r2, #25
 8008cb2:	f57f af34 	bpl.w	8008b1e <HAL_UART_IRQHandler+0xda>
 8008cb6:	064a      	lsls	r2, r1, #25
 8008cb8:	f57f af31 	bpl.w	8008b1e <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008cbc:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8008cbe:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008cc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008cc4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8008cc6:	2320      	movs	r3, #32
 8008cc8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8008ccc:	f7fd fe7a 	bl	80069c4 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8008cd0:	e725      	b.n	8008b1e <HAL_UART_IRQHandler+0xda>
 8008cd2:	bf00      	nop
 8008cd4:	080088c7 	.word	0x080088c7

08008cd8 <UART_Start_Receive_DMA>:
{
 8008cd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cda:	4613      	mov	r3, r2
  huart->RxXferSize = Size;
 8008cdc:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cde:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ce0:	2222      	movs	r2, #34	@ 0x22
{
 8008ce2:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8008ce4:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ce6:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ce8:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008cec:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8008cee:	4a1d      	ldr	r2, [pc, #116]	@ (8008d64 <UART_Start_Receive_DMA+0x8c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008cf0:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008cf2:	6282      	str	r2, [r0, #40]	@ 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8008d68 <UART_Start_Receive_DMA+0x90>)
 8008cf6:	62c2      	str	r2, [r0, #44]	@ 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8008d6c <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 8008cfa:	e9c0 250c 	strd	r2, r5, [r0, #48]	@ 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008cfe:	460a      	mov	r2, r1
 8008d00:	1d31      	adds	r1, r6, #4
 8008d02:	f7fe fb2f 	bl	8007364 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008d06:	6823      	ldr	r3, [r4, #0]
 8008d08:	9501      	str	r5, [sp, #4]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	9201      	str	r2, [sp, #4]
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	9201      	str	r2, [sp, #4]
 8008d12:	9a01      	ldr	r2, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d14:	6922      	ldr	r2, [r4, #16]
 8008d16:	b15a      	cbz	r2, 8008d30 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d18:	f103 020c 	add.w	r2, r3, #12
 8008d1c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d24:	f103 000c 	add.w	r0, r3, #12
 8008d28:	e840 2100 	strex	r1, r2, [r0]
 8008d2c:	2900      	cmp	r1, #0
 8008d2e:	d1f3      	bne.n	8008d18 <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d30:	f103 0214 	add.w	r2, r3, #20
 8008d34:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d38:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3c:	f103 0014 	add.w	r0, r3, #20
 8008d40:	e840 2100 	strex	r1, r2, [r0]
 8008d44:	2900      	cmp	r1, #0
 8008d46:	d1f3      	bne.n	8008d30 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d48:	f103 0214 	add.w	r2, r3, #20
 8008d4c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d54:	f103 0114 	add.w	r1, r3, #20
 8008d58:	e841 2000 	strex	r0, r2, [r1]
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d1f3      	bne.n	8008d48 <UART_Start_Receive_DMA+0x70>
}
 8008d60:	b002      	add	sp, #8
 8008d62:	bd70      	pop	{r4, r5, r6, pc}
 8008d64:	080088f7 	.word	0x080088f7
 8008d68:	080088d9 	.word	0x080088d9
 8008d6c:	0800886d 	.word	0x0800886d

08008d70 <HAL_UART_Receive_DMA>:
{
 8008d70:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d72:	f890 6042 	ldrb.w	r6, [r0, #66]	@ 0x42
 8008d76:	2e20      	cmp	r6, #32
 8008d78:	d106      	bne.n	8008d88 <HAL_UART_Receive_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 8008d7a:	b141      	cbz	r1, 8008d8e <HAL_UART_Receive_DMA+0x1e>
 8008d7c:	b13a      	cbz	r2, 8008d8e <HAL_UART_Receive_DMA+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d7e:	2400      	movs	r4, #0
 8008d80:	6304      	str	r4, [r0, #48]	@ 0x30
}
 8008d82:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008d84:	f7ff bfa8 	b.w	8008cd8 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8008d88:	2002      	movs	r0, #2
}
 8008d8a:	bc70      	pop	{r4, r5, r6}
 8008d8c:	4770      	bx	lr
      return HAL_ERROR;
 8008d8e:	2001      	movs	r0, #1
 8008d90:	e7fb      	b.n	8008d8a <HAL_UART_Receive_DMA+0x1a>

08008d92 <atof>:
 8008d92:	2100      	movs	r1, #0
 8008d94:	f000 bec2 	b.w	8009b1c <strtod>

08008d98 <atoi>:
 8008d98:	220a      	movs	r2, #10
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	f000 bf46 	b.w	8009c2c <strtol>

08008da0 <malloc>:
 8008da0:	4b02      	ldr	r3, [pc, #8]	@ (8008dac <malloc+0xc>)
 8008da2:	4601      	mov	r1, r0
 8008da4:	6818      	ldr	r0, [r3, #0]
 8008da6:	f000 b82d 	b.w	8008e04 <_malloc_r>
 8008daa:	bf00      	nop
 8008dac:	20000188 	.word	0x20000188

08008db0 <free>:
 8008db0:	4b02      	ldr	r3, [pc, #8]	@ (8008dbc <free+0xc>)
 8008db2:	4601      	mov	r1, r0
 8008db4:	6818      	ldr	r0, [r3, #0]
 8008db6:	f002 be93 	b.w	800bae0 <_free_r>
 8008dba:	bf00      	nop
 8008dbc:	20000188 	.word	0x20000188

08008dc0 <sbrk_aligned>:
 8008dc0:	b570      	push	{r4, r5, r6, lr}
 8008dc2:	4e0f      	ldr	r6, [pc, #60]	@ (8008e00 <sbrk_aligned+0x40>)
 8008dc4:	460c      	mov	r4, r1
 8008dc6:	6831      	ldr	r1, [r6, #0]
 8008dc8:	4605      	mov	r5, r0
 8008dca:	b911      	cbnz	r1, 8008dd2 <sbrk_aligned+0x12>
 8008dcc:	f001 ffba 	bl	800ad44 <_sbrk_r>
 8008dd0:	6030      	str	r0, [r6, #0]
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	f001 ffb5 	bl	800ad44 <_sbrk_r>
 8008dda:	1c43      	adds	r3, r0, #1
 8008ddc:	d103      	bne.n	8008de6 <sbrk_aligned+0x26>
 8008dde:	f04f 34ff 	mov.w	r4, #4294967295
 8008de2:	4620      	mov	r0, r4
 8008de4:	bd70      	pop	{r4, r5, r6, pc}
 8008de6:	1cc4      	adds	r4, r0, #3
 8008de8:	f024 0403 	bic.w	r4, r4, #3
 8008dec:	42a0      	cmp	r0, r4
 8008dee:	d0f8      	beq.n	8008de2 <sbrk_aligned+0x22>
 8008df0:	1a21      	subs	r1, r4, r0
 8008df2:	4628      	mov	r0, r5
 8008df4:	f001 ffa6 	bl	800ad44 <_sbrk_r>
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d1f2      	bne.n	8008de2 <sbrk_aligned+0x22>
 8008dfc:	e7ef      	b.n	8008dde <sbrk_aligned+0x1e>
 8008dfe:	bf00      	nop
 8008e00:	20000bb4 	.word	0x20000bb4

08008e04 <_malloc_r>:
 8008e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e08:	1ccd      	adds	r5, r1, #3
 8008e0a:	f025 0503 	bic.w	r5, r5, #3
 8008e0e:	3508      	adds	r5, #8
 8008e10:	2d0c      	cmp	r5, #12
 8008e12:	bf38      	it	cc
 8008e14:	250c      	movcc	r5, #12
 8008e16:	2d00      	cmp	r5, #0
 8008e18:	4606      	mov	r6, r0
 8008e1a:	db01      	blt.n	8008e20 <_malloc_r+0x1c>
 8008e1c:	42a9      	cmp	r1, r5
 8008e1e:	d904      	bls.n	8008e2a <_malloc_r+0x26>
 8008e20:	230c      	movs	r3, #12
 8008e22:	6033      	str	r3, [r6, #0]
 8008e24:	2000      	movs	r0, #0
 8008e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f00 <_malloc_r+0xfc>
 8008e2e:	f000 f869 	bl	8008f04 <__malloc_lock>
 8008e32:	f8d8 3000 	ldr.w	r3, [r8]
 8008e36:	461c      	mov	r4, r3
 8008e38:	bb44      	cbnz	r4, 8008e8c <_malloc_r+0x88>
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	f7ff ffbf 	bl	8008dc0 <sbrk_aligned>
 8008e42:	1c43      	adds	r3, r0, #1
 8008e44:	4604      	mov	r4, r0
 8008e46:	d158      	bne.n	8008efa <_malloc_r+0xf6>
 8008e48:	f8d8 4000 	ldr.w	r4, [r8]
 8008e4c:	4627      	mov	r7, r4
 8008e4e:	2f00      	cmp	r7, #0
 8008e50:	d143      	bne.n	8008eda <_malloc_r+0xd6>
 8008e52:	2c00      	cmp	r4, #0
 8008e54:	d04b      	beq.n	8008eee <_malloc_r+0xea>
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	4639      	mov	r1, r7
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	eb04 0903 	add.w	r9, r4, r3
 8008e60:	f001 ff70 	bl	800ad44 <_sbrk_r>
 8008e64:	4581      	cmp	r9, r0
 8008e66:	d142      	bne.n	8008eee <_malloc_r+0xea>
 8008e68:	6821      	ldr	r1, [r4, #0]
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	1a6d      	subs	r5, r5, r1
 8008e6e:	4629      	mov	r1, r5
 8008e70:	f7ff ffa6 	bl	8008dc0 <sbrk_aligned>
 8008e74:	3001      	adds	r0, #1
 8008e76:	d03a      	beq.n	8008eee <_malloc_r+0xea>
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	442b      	add	r3, r5
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	f8d8 3000 	ldr.w	r3, [r8]
 8008e82:	685a      	ldr	r2, [r3, #4]
 8008e84:	bb62      	cbnz	r2, 8008ee0 <_malloc_r+0xdc>
 8008e86:	f8c8 7000 	str.w	r7, [r8]
 8008e8a:	e00f      	b.n	8008eac <_malloc_r+0xa8>
 8008e8c:	6822      	ldr	r2, [r4, #0]
 8008e8e:	1b52      	subs	r2, r2, r5
 8008e90:	d420      	bmi.n	8008ed4 <_malloc_r+0xd0>
 8008e92:	2a0b      	cmp	r2, #11
 8008e94:	d917      	bls.n	8008ec6 <_malloc_r+0xc2>
 8008e96:	1961      	adds	r1, r4, r5
 8008e98:	42a3      	cmp	r3, r4
 8008e9a:	6025      	str	r5, [r4, #0]
 8008e9c:	bf18      	it	ne
 8008e9e:	6059      	strne	r1, [r3, #4]
 8008ea0:	6863      	ldr	r3, [r4, #4]
 8008ea2:	bf08      	it	eq
 8008ea4:	f8c8 1000 	streq.w	r1, [r8]
 8008ea8:	5162      	str	r2, [r4, r5]
 8008eaa:	604b      	str	r3, [r1, #4]
 8008eac:	4630      	mov	r0, r6
 8008eae:	f000 f82f 	bl	8008f10 <__malloc_unlock>
 8008eb2:	f104 000b 	add.w	r0, r4, #11
 8008eb6:	1d23      	adds	r3, r4, #4
 8008eb8:	f020 0007 	bic.w	r0, r0, #7
 8008ebc:	1ac2      	subs	r2, r0, r3
 8008ebe:	bf1c      	itt	ne
 8008ec0:	1a1b      	subne	r3, r3, r0
 8008ec2:	50a3      	strne	r3, [r4, r2]
 8008ec4:	e7af      	b.n	8008e26 <_malloc_r+0x22>
 8008ec6:	6862      	ldr	r2, [r4, #4]
 8008ec8:	42a3      	cmp	r3, r4
 8008eca:	bf0c      	ite	eq
 8008ecc:	f8c8 2000 	streq.w	r2, [r8]
 8008ed0:	605a      	strne	r2, [r3, #4]
 8008ed2:	e7eb      	b.n	8008eac <_malloc_r+0xa8>
 8008ed4:	4623      	mov	r3, r4
 8008ed6:	6864      	ldr	r4, [r4, #4]
 8008ed8:	e7ae      	b.n	8008e38 <_malloc_r+0x34>
 8008eda:	463c      	mov	r4, r7
 8008edc:	687f      	ldr	r7, [r7, #4]
 8008ede:	e7b6      	b.n	8008e4e <_malloc_r+0x4a>
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	42a3      	cmp	r3, r4
 8008ee6:	d1fb      	bne.n	8008ee0 <_malloc_r+0xdc>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	6053      	str	r3, [r2, #4]
 8008eec:	e7de      	b.n	8008eac <_malloc_r+0xa8>
 8008eee:	230c      	movs	r3, #12
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	6033      	str	r3, [r6, #0]
 8008ef4:	f000 f80c 	bl	8008f10 <__malloc_unlock>
 8008ef8:	e794      	b.n	8008e24 <_malloc_r+0x20>
 8008efa:	6005      	str	r5, [r0, #0]
 8008efc:	e7d6      	b.n	8008eac <_malloc_r+0xa8>
 8008efe:	bf00      	nop
 8008f00:	20000bb8 	.word	0x20000bb8

08008f04 <__malloc_lock>:
 8008f04:	4801      	ldr	r0, [pc, #4]	@ (8008f0c <__malloc_lock+0x8>)
 8008f06:	f001 bf6a 	b.w	800adde <__retarget_lock_acquire_recursive>
 8008f0a:	bf00      	nop
 8008f0c:	20000cfc 	.word	0x20000cfc

08008f10 <__malloc_unlock>:
 8008f10:	4801      	ldr	r0, [pc, #4]	@ (8008f18 <__malloc_unlock+0x8>)
 8008f12:	f001 bf65 	b.w	800ade0 <__retarget_lock_release_recursive>
 8008f16:	bf00      	nop
 8008f18:	20000cfc 	.word	0x20000cfc

08008f1c <sulp>:
 8008f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f20:	460f      	mov	r7, r1
 8008f22:	4690      	mov	r8, r2
 8008f24:	f003 fce2 	bl	800c8ec <__ulp>
 8008f28:	4604      	mov	r4, r0
 8008f2a:	460d      	mov	r5, r1
 8008f2c:	f1b8 0f00 	cmp.w	r8, #0
 8008f30:	d011      	beq.n	8008f56 <sulp+0x3a>
 8008f32:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008f36:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	dd0b      	ble.n	8008f56 <sulp+0x3a>
 8008f3e:	2400      	movs	r4, #0
 8008f40:	051b      	lsls	r3, r3, #20
 8008f42:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008f46:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008f4a:	4622      	mov	r2, r4
 8008f4c:	462b      	mov	r3, r5
 8008f4e:	f7f7 facd 	bl	80004ec <__aeabi_dmul>
 8008f52:	4604      	mov	r4, r0
 8008f54:	460d      	mov	r5, r1
 8008f56:	4620      	mov	r0, r4
 8008f58:	4629      	mov	r1, r5
 8008f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008f60 <_strtod_l>:
 8008f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f64:	b09f      	sub	sp, #124	@ 0x7c
 8008f66:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008f68:	2200      	movs	r2, #0
 8008f6a:	460c      	mov	r4, r1
 8008f6c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008f6e:	f04f 0a00 	mov.w	sl, #0
 8008f72:	f04f 0b00 	mov.w	fp, #0
 8008f76:	460a      	mov	r2, r1
 8008f78:	9005      	str	r0, [sp, #20]
 8008f7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f7c:	7811      	ldrb	r1, [r2, #0]
 8008f7e:	292b      	cmp	r1, #43	@ 0x2b
 8008f80:	d048      	beq.n	8009014 <_strtod_l+0xb4>
 8008f82:	d836      	bhi.n	8008ff2 <_strtod_l+0x92>
 8008f84:	290d      	cmp	r1, #13
 8008f86:	d830      	bhi.n	8008fea <_strtod_l+0x8a>
 8008f88:	2908      	cmp	r1, #8
 8008f8a:	d830      	bhi.n	8008fee <_strtod_l+0x8e>
 8008f8c:	2900      	cmp	r1, #0
 8008f8e:	d039      	beq.n	8009004 <_strtod_l+0xa4>
 8008f90:	2200      	movs	r2, #0
 8008f92:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008f94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008f96:	782a      	ldrb	r2, [r5, #0]
 8008f98:	2a30      	cmp	r2, #48	@ 0x30
 8008f9a:	f040 80b1 	bne.w	8009100 <_strtod_l+0x1a0>
 8008f9e:	786a      	ldrb	r2, [r5, #1]
 8008fa0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008fa4:	2a58      	cmp	r2, #88	@ 0x58
 8008fa6:	d16c      	bne.n	8009082 <_strtod_l+0x122>
 8008fa8:	9302      	str	r3, [sp, #8]
 8008faa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fac:	4a8e      	ldr	r2, [pc, #568]	@ (80091e8 <_strtod_l+0x288>)
 8008fae:	9301      	str	r3, [sp, #4]
 8008fb0:	ab1a      	add	r3, sp, #104	@ 0x68
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	9805      	ldr	r0, [sp, #20]
 8008fb6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008fb8:	a919      	add	r1, sp, #100	@ 0x64
 8008fba:	f002 fe41 	bl	800bc40 <__gethex>
 8008fbe:	f010 060f 	ands.w	r6, r0, #15
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	d005      	beq.n	8008fd2 <_strtod_l+0x72>
 8008fc6:	2e06      	cmp	r6, #6
 8008fc8:	d126      	bne.n	8009018 <_strtod_l+0xb8>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	3501      	adds	r5, #1
 8008fce:	9519      	str	r5, [sp, #100]	@ 0x64
 8008fd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008fd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f040 8584 	bne.w	8009ae2 <_strtod_l+0xb82>
 8008fda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fdc:	b1bb      	cbz	r3, 800900e <_strtod_l+0xae>
 8008fde:	4650      	mov	r0, sl
 8008fe0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008fe4:	b01f      	add	sp, #124	@ 0x7c
 8008fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fea:	2920      	cmp	r1, #32
 8008fec:	d1d0      	bne.n	8008f90 <_strtod_l+0x30>
 8008fee:	3201      	adds	r2, #1
 8008ff0:	e7c3      	b.n	8008f7a <_strtod_l+0x1a>
 8008ff2:	292d      	cmp	r1, #45	@ 0x2d
 8008ff4:	d1cc      	bne.n	8008f90 <_strtod_l+0x30>
 8008ff6:	2101      	movs	r1, #1
 8008ff8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008ffa:	1c51      	adds	r1, r2, #1
 8008ffc:	9119      	str	r1, [sp, #100]	@ 0x64
 8008ffe:	7852      	ldrb	r2, [r2, #1]
 8009000:	2a00      	cmp	r2, #0
 8009002:	d1c7      	bne.n	8008f94 <_strtod_l+0x34>
 8009004:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009006:	9419      	str	r4, [sp, #100]	@ 0x64
 8009008:	2b00      	cmp	r3, #0
 800900a:	f040 8568 	bne.w	8009ade <_strtod_l+0xb7e>
 800900e:	4650      	mov	r0, sl
 8009010:	4659      	mov	r1, fp
 8009012:	e7e7      	b.n	8008fe4 <_strtod_l+0x84>
 8009014:	2100      	movs	r1, #0
 8009016:	e7ef      	b.n	8008ff8 <_strtod_l+0x98>
 8009018:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800901a:	b13a      	cbz	r2, 800902c <_strtod_l+0xcc>
 800901c:	2135      	movs	r1, #53	@ 0x35
 800901e:	a81c      	add	r0, sp, #112	@ 0x70
 8009020:	f003 fd54 	bl	800cacc <__copybits>
 8009024:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009026:	9805      	ldr	r0, [sp, #20]
 8009028:	f003 f92e 	bl	800c288 <_Bfree>
 800902c:	3e01      	subs	r6, #1
 800902e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009030:	2e04      	cmp	r6, #4
 8009032:	d806      	bhi.n	8009042 <_strtod_l+0xe2>
 8009034:	e8df f006 	tbb	[pc, r6]
 8009038:	201d0314 	.word	0x201d0314
 800903c:	14          	.byte	0x14
 800903d:	00          	.byte	0x00
 800903e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009042:	05e1      	lsls	r1, r4, #23
 8009044:	bf48      	it	mi
 8009046:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800904a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800904e:	0d1b      	lsrs	r3, r3, #20
 8009050:	051b      	lsls	r3, r3, #20
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1bd      	bne.n	8008fd2 <_strtod_l+0x72>
 8009056:	f001 fe97 	bl	800ad88 <__errno>
 800905a:	2322      	movs	r3, #34	@ 0x22
 800905c:	6003      	str	r3, [r0, #0]
 800905e:	e7b8      	b.n	8008fd2 <_strtod_l+0x72>
 8009060:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009064:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009068:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800906c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009070:	e7e7      	b.n	8009042 <_strtod_l+0xe2>
 8009072:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80091ec <_strtod_l+0x28c>
 8009076:	e7e4      	b.n	8009042 <_strtod_l+0xe2>
 8009078:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800907c:	f04f 3aff 	mov.w	sl, #4294967295
 8009080:	e7df      	b.n	8009042 <_strtod_l+0xe2>
 8009082:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	9219      	str	r2, [sp, #100]	@ 0x64
 8009088:	785b      	ldrb	r3, [r3, #1]
 800908a:	2b30      	cmp	r3, #48	@ 0x30
 800908c:	d0f9      	beq.n	8009082 <_strtod_l+0x122>
 800908e:	2b00      	cmp	r3, #0
 8009090:	d09f      	beq.n	8008fd2 <_strtod_l+0x72>
 8009092:	2301      	movs	r3, #1
 8009094:	9309      	str	r3, [sp, #36]	@ 0x24
 8009096:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009098:	220a      	movs	r2, #10
 800909a:	930c      	str	r3, [sp, #48]	@ 0x30
 800909c:	2300      	movs	r3, #0
 800909e:	461f      	mov	r7, r3
 80090a0:	9308      	str	r3, [sp, #32]
 80090a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80090a4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80090a6:	7805      	ldrb	r5, [r0, #0]
 80090a8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80090ac:	b2d9      	uxtb	r1, r3
 80090ae:	2909      	cmp	r1, #9
 80090b0:	d928      	bls.n	8009104 <_strtod_l+0x1a4>
 80090b2:	2201      	movs	r2, #1
 80090b4:	494e      	ldr	r1, [pc, #312]	@ (80091f0 <_strtod_l+0x290>)
 80090b6:	f001 fdbc 	bl	800ac32 <strncmp>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d032      	beq.n	8009124 <_strtod_l+0x1c4>
 80090be:	2000      	movs	r0, #0
 80090c0:	462a      	mov	r2, r5
 80090c2:	4681      	mov	r9, r0
 80090c4:	463d      	mov	r5, r7
 80090c6:	4603      	mov	r3, r0
 80090c8:	2a65      	cmp	r2, #101	@ 0x65
 80090ca:	d001      	beq.n	80090d0 <_strtod_l+0x170>
 80090cc:	2a45      	cmp	r2, #69	@ 0x45
 80090ce:	d114      	bne.n	80090fa <_strtod_l+0x19a>
 80090d0:	b91d      	cbnz	r5, 80090da <_strtod_l+0x17a>
 80090d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090d4:	4302      	orrs	r2, r0
 80090d6:	d095      	beq.n	8009004 <_strtod_l+0xa4>
 80090d8:	2500      	movs	r5, #0
 80090da:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80090dc:	1c62      	adds	r2, r4, #1
 80090de:	9219      	str	r2, [sp, #100]	@ 0x64
 80090e0:	7862      	ldrb	r2, [r4, #1]
 80090e2:	2a2b      	cmp	r2, #43	@ 0x2b
 80090e4:	d077      	beq.n	80091d6 <_strtod_l+0x276>
 80090e6:	2a2d      	cmp	r2, #45	@ 0x2d
 80090e8:	d07b      	beq.n	80091e2 <_strtod_l+0x282>
 80090ea:	f04f 0c00 	mov.w	ip, #0
 80090ee:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80090f2:	2909      	cmp	r1, #9
 80090f4:	f240 8082 	bls.w	80091fc <_strtod_l+0x29c>
 80090f8:	9419      	str	r4, [sp, #100]	@ 0x64
 80090fa:	f04f 0800 	mov.w	r8, #0
 80090fe:	e0a2      	b.n	8009246 <_strtod_l+0x2e6>
 8009100:	2300      	movs	r3, #0
 8009102:	e7c7      	b.n	8009094 <_strtod_l+0x134>
 8009104:	2f08      	cmp	r7, #8
 8009106:	bfd5      	itete	le
 8009108:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800910a:	9908      	ldrgt	r1, [sp, #32]
 800910c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009110:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009114:	f100 0001 	add.w	r0, r0, #1
 8009118:	bfd4      	ite	le
 800911a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800911c:	9308      	strgt	r3, [sp, #32]
 800911e:	3701      	adds	r7, #1
 8009120:	9019      	str	r0, [sp, #100]	@ 0x64
 8009122:	e7bf      	b.n	80090a4 <_strtod_l+0x144>
 8009124:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009126:	1c5a      	adds	r2, r3, #1
 8009128:	9219      	str	r2, [sp, #100]	@ 0x64
 800912a:	785a      	ldrb	r2, [r3, #1]
 800912c:	b37f      	cbz	r7, 800918e <_strtod_l+0x22e>
 800912e:	4681      	mov	r9, r0
 8009130:	463d      	mov	r5, r7
 8009132:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009136:	2b09      	cmp	r3, #9
 8009138:	d912      	bls.n	8009160 <_strtod_l+0x200>
 800913a:	2301      	movs	r3, #1
 800913c:	e7c4      	b.n	80090c8 <_strtod_l+0x168>
 800913e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009140:	3001      	adds	r0, #1
 8009142:	1c5a      	adds	r2, r3, #1
 8009144:	9219      	str	r2, [sp, #100]	@ 0x64
 8009146:	785a      	ldrb	r2, [r3, #1]
 8009148:	2a30      	cmp	r2, #48	@ 0x30
 800914a:	d0f8      	beq.n	800913e <_strtod_l+0x1de>
 800914c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009150:	2b08      	cmp	r3, #8
 8009152:	f200 84cb 	bhi.w	8009aec <_strtod_l+0xb8c>
 8009156:	4681      	mov	r9, r0
 8009158:	2000      	movs	r0, #0
 800915a:	4605      	mov	r5, r0
 800915c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800915e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009160:	3a30      	subs	r2, #48	@ 0x30
 8009162:	f100 0301 	add.w	r3, r0, #1
 8009166:	d02a      	beq.n	80091be <_strtod_l+0x25e>
 8009168:	4499      	add	r9, r3
 800916a:	210a      	movs	r1, #10
 800916c:	462b      	mov	r3, r5
 800916e:	eb00 0c05 	add.w	ip, r0, r5
 8009172:	4563      	cmp	r3, ip
 8009174:	d10d      	bne.n	8009192 <_strtod_l+0x232>
 8009176:	1c69      	adds	r1, r5, #1
 8009178:	4401      	add	r1, r0
 800917a:	4428      	add	r0, r5
 800917c:	2808      	cmp	r0, #8
 800917e:	dc16      	bgt.n	80091ae <_strtod_l+0x24e>
 8009180:	230a      	movs	r3, #10
 8009182:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009184:	fb03 2300 	mla	r3, r3, r0, r2
 8009188:	930a      	str	r3, [sp, #40]	@ 0x28
 800918a:	2300      	movs	r3, #0
 800918c:	e018      	b.n	80091c0 <_strtod_l+0x260>
 800918e:	4638      	mov	r0, r7
 8009190:	e7da      	b.n	8009148 <_strtod_l+0x1e8>
 8009192:	2b08      	cmp	r3, #8
 8009194:	f103 0301 	add.w	r3, r3, #1
 8009198:	dc03      	bgt.n	80091a2 <_strtod_l+0x242>
 800919a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800919c:	434e      	muls	r6, r1
 800919e:	960a      	str	r6, [sp, #40]	@ 0x28
 80091a0:	e7e7      	b.n	8009172 <_strtod_l+0x212>
 80091a2:	2b10      	cmp	r3, #16
 80091a4:	bfde      	ittt	le
 80091a6:	9e08      	ldrle	r6, [sp, #32]
 80091a8:	434e      	mulle	r6, r1
 80091aa:	9608      	strle	r6, [sp, #32]
 80091ac:	e7e1      	b.n	8009172 <_strtod_l+0x212>
 80091ae:	280f      	cmp	r0, #15
 80091b0:	dceb      	bgt.n	800918a <_strtod_l+0x22a>
 80091b2:	230a      	movs	r3, #10
 80091b4:	9808      	ldr	r0, [sp, #32]
 80091b6:	fb03 2300 	mla	r3, r3, r0, r2
 80091ba:	9308      	str	r3, [sp, #32]
 80091bc:	e7e5      	b.n	800918a <_strtod_l+0x22a>
 80091be:	4629      	mov	r1, r5
 80091c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80091c2:	460d      	mov	r5, r1
 80091c4:	1c50      	adds	r0, r2, #1
 80091c6:	9019      	str	r0, [sp, #100]	@ 0x64
 80091c8:	7852      	ldrb	r2, [r2, #1]
 80091ca:	4618      	mov	r0, r3
 80091cc:	e7b1      	b.n	8009132 <_strtod_l+0x1d2>
 80091ce:	f04f 0900 	mov.w	r9, #0
 80091d2:	2301      	movs	r3, #1
 80091d4:	e77d      	b.n	80090d2 <_strtod_l+0x172>
 80091d6:	f04f 0c00 	mov.w	ip, #0
 80091da:	1ca2      	adds	r2, r4, #2
 80091dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80091de:	78a2      	ldrb	r2, [r4, #2]
 80091e0:	e785      	b.n	80090ee <_strtod_l+0x18e>
 80091e2:	f04f 0c01 	mov.w	ip, #1
 80091e6:	e7f8      	b.n	80091da <_strtod_l+0x27a>
 80091e8:	0800dd40 	.word	0x0800dd40
 80091ec:	7ff00000 	.word	0x7ff00000
 80091f0:	0800d7da 	.word	0x0800d7da
 80091f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80091f6:	1c51      	adds	r1, r2, #1
 80091f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80091fa:	7852      	ldrb	r2, [r2, #1]
 80091fc:	2a30      	cmp	r2, #48	@ 0x30
 80091fe:	d0f9      	beq.n	80091f4 <_strtod_l+0x294>
 8009200:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009204:	2908      	cmp	r1, #8
 8009206:	f63f af78 	bhi.w	80090fa <_strtod_l+0x19a>
 800920a:	f04f 080a 	mov.w	r8, #10
 800920e:	3a30      	subs	r2, #48	@ 0x30
 8009210:	920e      	str	r2, [sp, #56]	@ 0x38
 8009212:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009214:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009216:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009218:	1c56      	adds	r6, r2, #1
 800921a:	9619      	str	r6, [sp, #100]	@ 0x64
 800921c:	7852      	ldrb	r2, [r2, #1]
 800921e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009222:	f1be 0f09 	cmp.w	lr, #9
 8009226:	d939      	bls.n	800929c <_strtod_l+0x33c>
 8009228:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800922a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800922e:	1a76      	subs	r6, r6, r1
 8009230:	2e08      	cmp	r6, #8
 8009232:	dc03      	bgt.n	800923c <_strtod_l+0x2dc>
 8009234:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009236:	4588      	cmp	r8, r1
 8009238:	bfa8      	it	ge
 800923a:	4688      	movge	r8, r1
 800923c:	f1bc 0f00 	cmp.w	ip, #0
 8009240:	d001      	beq.n	8009246 <_strtod_l+0x2e6>
 8009242:	f1c8 0800 	rsb	r8, r8, #0
 8009246:	2d00      	cmp	r5, #0
 8009248:	d14e      	bne.n	80092e8 <_strtod_l+0x388>
 800924a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800924c:	4308      	orrs	r0, r1
 800924e:	f47f aec0 	bne.w	8008fd2 <_strtod_l+0x72>
 8009252:	2b00      	cmp	r3, #0
 8009254:	f47f aed6 	bne.w	8009004 <_strtod_l+0xa4>
 8009258:	2a69      	cmp	r2, #105	@ 0x69
 800925a:	d028      	beq.n	80092ae <_strtod_l+0x34e>
 800925c:	dc25      	bgt.n	80092aa <_strtod_l+0x34a>
 800925e:	2a49      	cmp	r2, #73	@ 0x49
 8009260:	d025      	beq.n	80092ae <_strtod_l+0x34e>
 8009262:	2a4e      	cmp	r2, #78	@ 0x4e
 8009264:	f47f aece 	bne.w	8009004 <_strtod_l+0xa4>
 8009268:	499a      	ldr	r1, [pc, #616]	@ (80094d4 <_strtod_l+0x574>)
 800926a:	a819      	add	r0, sp, #100	@ 0x64
 800926c:	f002 ff0a 	bl	800c084 <__match>
 8009270:	2800      	cmp	r0, #0
 8009272:	f43f aec7 	beq.w	8009004 <_strtod_l+0xa4>
 8009276:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	2b28      	cmp	r3, #40	@ 0x28
 800927c:	d12e      	bne.n	80092dc <_strtod_l+0x37c>
 800927e:	4996      	ldr	r1, [pc, #600]	@ (80094d8 <_strtod_l+0x578>)
 8009280:	aa1c      	add	r2, sp, #112	@ 0x70
 8009282:	a819      	add	r0, sp, #100	@ 0x64
 8009284:	f002 ff12 	bl	800c0ac <__hexnan>
 8009288:	2805      	cmp	r0, #5
 800928a:	d127      	bne.n	80092dc <_strtod_l+0x37c>
 800928c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800928e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009292:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009296:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800929a:	e69a      	b.n	8008fd2 <_strtod_l+0x72>
 800929c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800929e:	fb08 2101 	mla	r1, r8, r1, r2
 80092a2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80092a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80092a8:	e7b5      	b.n	8009216 <_strtod_l+0x2b6>
 80092aa:	2a6e      	cmp	r2, #110	@ 0x6e
 80092ac:	e7da      	b.n	8009264 <_strtod_l+0x304>
 80092ae:	498b      	ldr	r1, [pc, #556]	@ (80094dc <_strtod_l+0x57c>)
 80092b0:	a819      	add	r0, sp, #100	@ 0x64
 80092b2:	f002 fee7 	bl	800c084 <__match>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	f43f aea4 	beq.w	8009004 <_strtod_l+0xa4>
 80092bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092be:	4988      	ldr	r1, [pc, #544]	@ (80094e0 <_strtod_l+0x580>)
 80092c0:	3b01      	subs	r3, #1
 80092c2:	a819      	add	r0, sp, #100	@ 0x64
 80092c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80092c6:	f002 fedd 	bl	800c084 <__match>
 80092ca:	b910      	cbnz	r0, 80092d2 <_strtod_l+0x372>
 80092cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092ce:	3301      	adds	r3, #1
 80092d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80092d2:	f04f 0a00 	mov.w	sl, #0
 80092d6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80094e4 <_strtod_l+0x584>
 80092da:	e67a      	b.n	8008fd2 <_strtod_l+0x72>
 80092dc:	4882      	ldr	r0, [pc, #520]	@ (80094e8 <_strtod_l+0x588>)
 80092de:	f001 fda5 	bl	800ae2c <nan>
 80092e2:	4682      	mov	sl, r0
 80092e4:	468b      	mov	fp, r1
 80092e6:	e674      	b.n	8008fd2 <_strtod_l+0x72>
 80092e8:	eba8 0309 	sub.w	r3, r8, r9
 80092ec:	2f00      	cmp	r7, #0
 80092ee:	bf08      	it	eq
 80092f0:	462f      	moveq	r7, r5
 80092f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80092f4:	2d10      	cmp	r5, #16
 80092f6:	462c      	mov	r4, r5
 80092f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80092fa:	bfa8      	it	ge
 80092fc:	2410      	movge	r4, #16
 80092fe:	f7f7 f87b 	bl	80003f8 <__aeabi_ui2d>
 8009302:	2d09      	cmp	r5, #9
 8009304:	4682      	mov	sl, r0
 8009306:	468b      	mov	fp, r1
 8009308:	dc11      	bgt.n	800932e <_strtod_l+0x3ce>
 800930a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800930c:	2b00      	cmp	r3, #0
 800930e:	f43f ae60 	beq.w	8008fd2 <_strtod_l+0x72>
 8009312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009314:	dd76      	ble.n	8009404 <_strtod_l+0x4a4>
 8009316:	2b16      	cmp	r3, #22
 8009318:	dc5d      	bgt.n	80093d6 <_strtod_l+0x476>
 800931a:	4974      	ldr	r1, [pc, #464]	@ (80094ec <_strtod_l+0x58c>)
 800931c:	4652      	mov	r2, sl
 800931e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009322:	465b      	mov	r3, fp
 8009324:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009328:	f7f7 f8e0 	bl	80004ec <__aeabi_dmul>
 800932c:	e7d9      	b.n	80092e2 <_strtod_l+0x382>
 800932e:	4b6f      	ldr	r3, [pc, #444]	@ (80094ec <_strtod_l+0x58c>)
 8009330:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009334:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009338:	f7f7 f8d8 	bl	80004ec <__aeabi_dmul>
 800933c:	4682      	mov	sl, r0
 800933e:	9808      	ldr	r0, [sp, #32]
 8009340:	468b      	mov	fp, r1
 8009342:	f7f7 f859 	bl	80003f8 <__aeabi_ui2d>
 8009346:	4602      	mov	r2, r0
 8009348:	460b      	mov	r3, r1
 800934a:	4650      	mov	r0, sl
 800934c:	4659      	mov	r1, fp
 800934e:	f7f6 ff17 	bl	8000180 <__adddf3>
 8009352:	2d0f      	cmp	r5, #15
 8009354:	4682      	mov	sl, r0
 8009356:	468b      	mov	fp, r1
 8009358:	ddd7      	ble.n	800930a <_strtod_l+0x3aa>
 800935a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800935c:	1b2c      	subs	r4, r5, r4
 800935e:	441c      	add	r4, r3
 8009360:	2c00      	cmp	r4, #0
 8009362:	f340 8096 	ble.w	8009492 <_strtod_l+0x532>
 8009366:	f014 030f 	ands.w	r3, r4, #15
 800936a:	d00a      	beq.n	8009382 <_strtod_l+0x422>
 800936c:	495f      	ldr	r1, [pc, #380]	@ (80094ec <_strtod_l+0x58c>)
 800936e:	4652      	mov	r2, sl
 8009370:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009374:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009378:	465b      	mov	r3, fp
 800937a:	f7f7 f8b7 	bl	80004ec <__aeabi_dmul>
 800937e:	4682      	mov	sl, r0
 8009380:	468b      	mov	fp, r1
 8009382:	f034 040f 	bics.w	r4, r4, #15
 8009386:	d073      	beq.n	8009470 <_strtod_l+0x510>
 8009388:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800938c:	dd48      	ble.n	8009420 <_strtod_l+0x4c0>
 800938e:	2400      	movs	r4, #0
 8009390:	46a0      	mov	r8, r4
 8009392:	46a1      	mov	r9, r4
 8009394:	940a      	str	r4, [sp, #40]	@ 0x28
 8009396:	2322      	movs	r3, #34	@ 0x22
 8009398:	f04f 0a00 	mov.w	sl, #0
 800939c:	9a05      	ldr	r2, [sp, #20]
 800939e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80094e4 <_strtod_l+0x584>
 80093a2:	6013      	str	r3, [r2, #0]
 80093a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f43f ae13 	beq.w	8008fd2 <_strtod_l+0x72>
 80093ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093ae:	9805      	ldr	r0, [sp, #20]
 80093b0:	f002 ff6a 	bl	800c288 <_Bfree>
 80093b4:	4649      	mov	r1, r9
 80093b6:	9805      	ldr	r0, [sp, #20]
 80093b8:	f002 ff66 	bl	800c288 <_Bfree>
 80093bc:	4641      	mov	r1, r8
 80093be:	9805      	ldr	r0, [sp, #20]
 80093c0:	f002 ff62 	bl	800c288 <_Bfree>
 80093c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80093c6:	9805      	ldr	r0, [sp, #20]
 80093c8:	f002 ff5e 	bl	800c288 <_Bfree>
 80093cc:	4621      	mov	r1, r4
 80093ce:	9805      	ldr	r0, [sp, #20]
 80093d0:	f002 ff5a 	bl	800c288 <_Bfree>
 80093d4:	e5fd      	b.n	8008fd2 <_strtod_l+0x72>
 80093d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80093dc:	4293      	cmp	r3, r2
 80093de:	dbbc      	blt.n	800935a <_strtod_l+0x3fa>
 80093e0:	4c42      	ldr	r4, [pc, #264]	@ (80094ec <_strtod_l+0x58c>)
 80093e2:	f1c5 050f 	rsb	r5, r5, #15
 80093e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80093ea:	4652      	mov	r2, sl
 80093ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093f0:	465b      	mov	r3, fp
 80093f2:	f7f7 f87b 	bl	80004ec <__aeabi_dmul>
 80093f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f8:	1b5d      	subs	r5, r3, r5
 80093fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80093fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009402:	e791      	b.n	8009328 <_strtod_l+0x3c8>
 8009404:	3316      	adds	r3, #22
 8009406:	dba8      	blt.n	800935a <_strtod_l+0x3fa>
 8009408:	4b38      	ldr	r3, [pc, #224]	@ (80094ec <_strtod_l+0x58c>)
 800940a:	eba9 0808 	sub.w	r8, r9, r8
 800940e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009412:	4650      	mov	r0, sl
 8009414:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009418:	4659      	mov	r1, fp
 800941a:	f7f7 f991 	bl	8000740 <__aeabi_ddiv>
 800941e:	e760      	b.n	80092e2 <_strtod_l+0x382>
 8009420:	4b33      	ldr	r3, [pc, #204]	@ (80094f0 <_strtod_l+0x590>)
 8009422:	4650      	mov	r0, sl
 8009424:	9308      	str	r3, [sp, #32]
 8009426:	2300      	movs	r3, #0
 8009428:	4659      	mov	r1, fp
 800942a:	461e      	mov	r6, r3
 800942c:	1124      	asrs	r4, r4, #4
 800942e:	2c01      	cmp	r4, #1
 8009430:	dc21      	bgt.n	8009476 <_strtod_l+0x516>
 8009432:	b10b      	cbz	r3, 8009438 <_strtod_l+0x4d8>
 8009434:	4682      	mov	sl, r0
 8009436:	468b      	mov	fp, r1
 8009438:	492d      	ldr	r1, [pc, #180]	@ (80094f0 <_strtod_l+0x590>)
 800943a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800943e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009442:	4652      	mov	r2, sl
 8009444:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009448:	465b      	mov	r3, fp
 800944a:	f7f7 f84f 	bl	80004ec <__aeabi_dmul>
 800944e:	4b25      	ldr	r3, [pc, #148]	@ (80094e4 <_strtod_l+0x584>)
 8009450:	460a      	mov	r2, r1
 8009452:	400b      	ands	r3, r1
 8009454:	4927      	ldr	r1, [pc, #156]	@ (80094f4 <_strtod_l+0x594>)
 8009456:	4682      	mov	sl, r0
 8009458:	428b      	cmp	r3, r1
 800945a:	d898      	bhi.n	800938e <_strtod_l+0x42e>
 800945c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009460:	428b      	cmp	r3, r1
 8009462:	bf86      	itte	hi
 8009464:	f04f 3aff 	movhi.w	sl, #4294967295
 8009468:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80094f8 <_strtod_l+0x598>
 800946c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009470:	2300      	movs	r3, #0
 8009472:	9308      	str	r3, [sp, #32]
 8009474:	e07a      	b.n	800956c <_strtod_l+0x60c>
 8009476:	07e2      	lsls	r2, r4, #31
 8009478:	d505      	bpl.n	8009486 <_strtod_l+0x526>
 800947a:	9b08      	ldr	r3, [sp, #32]
 800947c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009480:	f7f7 f834 	bl	80004ec <__aeabi_dmul>
 8009484:	2301      	movs	r3, #1
 8009486:	9a08      	ldr	r2, [sp, #32]
 8009488:	3601      	adds	r6, #1
 800948a:	3208      	adds	r2, #8
 800948c:	1064      	asrs	r4, r4, #1
 800948e:	9208      	str	r2, [sp, #32]
 8009490:	e7cd      	b.n	800942e <_strtod_l+0x4ce>
 8009492:	d0ed      	beq.n	8009470 <_strtod_l+0x510>
 8009494:	4264      	negs	r4, r4
 8009496:	f014 020f 	ands.w	r2, r4, #15
 800949a:	d00a      	beq.n	80094b2 <_strtod_l+0x552>
 800949c:	4b13      	ldr	r3, [pc, #76]	@ (80094ec <_strtod_l+0x58c>)
 800949e:	4650      	mov	r0, sl
 80094a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094a4:	4659      	mov	r1, fp
 80094a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094aa:	f7f7 f949 	bl	8000740 <__aeabi_ddiv>
 80094ae:	4682      	mov	sl, r0
 80094b0:	468b      	mov	fp, r1
 80094b2:	1124      	asrs	r4, r4, #4
 80094b4:	d0dc      	beq.n	8009470 <_strtod_l+0x510>
 80094b6:	2c1f      	cmp	r4, #31
 80094b8:	dd20      	ble.n	80094fc <_strtod_l+0x59c>
 80094ba:	2400      	movs	r4, #0
 80094bc:	46a0      	mov	r8, r4
 80094be:	46a1      	mov	r9, r4
 80094c0:	940a      	str	r4, [sp, #40]	@ 0x28
 80094c2:	2322      	movs	r3, #34	@ 0x22
 80094c4:	9a05      	ldr	r2, [sp, #20]
 80094c6:	f04f 0a00 	mov.w	sl, #0
 80094ca:	f04f 0b00 	mov.w	fp, #0
 80094ce:	6013      	str	r3, [r2, #0]
 80094d0:	e768      	b.n	80093a4 <_strtod_l+0x444>
 80094d2:	bf00      	nop
 80094d4:	0800de8e 	.word	0x0800de8e
 80094d8:	0800dd2c 	.word	0x0800dd2c
 80094dc:	0800de86 	.word	0x0800de86
 80094e0:	0800dec1 	.word	0x0800dec1
 80094e4:	7ff00000 	.word	0x7ff00000
 80094e8:	0800d9be 	.word	0x0800d9be
 80094ec:	0800e038 	.word	0x0800e038
 80094f0:	0800e010 	.word	0x0800e010
 80094f4:	7ca00000 	.word	0x7ca00000
 80094f8:	7fefffff 	.word	0x7fefffff
 80094fc:	f014 0310 	ands.w	r3, r4, #16
 8009500:	bf18      	it	ne
 8009502:	236a      	movne	r3, #106	@ 0x6a
 8009504:	4650      	mov	r0, sl
 8009506:	9308      	str	r3, [sp, #32]
 8009508:	4659      	mov	r1, fp
 800950a:	2300      	movs	r3, #0
 800950c:	4ea9      	ldr	r6, [pc, #676]	@ (80097b4 <_strtod_l+0x854>)
 800950e:	07e2      	lsls	r2, r4, #31
 8009510:	d504      	bpl.n	800951c <_strtod_l+0x5bc>
 8009512:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009516:	f7f6 ffe9 	bl	80004ec <__aeabi_dmul>
 800951a:	2301      	movs	r3, #1
 800951c:	1064      	asrs	r4, r4, #1
 800951e:	f106 0608 	add.w	r6, r6, #8
 8009522:	d1f4      	bne.n	800950e <_strtod_l+0x5ae>
 8009524:	b10b      	cbz	r3, 800952a <_strtod_l+0x5ca>
 8009526:	4682      	mov	sl, r0
 8009528:	468b      	mov	fp, r1
 800952a:	9b08      	ldr	r3, [sp, #32]
 800952c:	b1b3      	cbz	r3, 800955c <_strtod_l+0x5fc>
 800952e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009532:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009536:	2b00      	cmp	r3, #0
 8009538:	4659      	mov	r1, fp
 800953a:	dd0f      	ble.n	800955c <_strtod_l+0x5fc>
 800953c:	2b1f      	cmp	r3, #31
 800953e:	dd57      	ble.n	80095f0 <_strtod_l+0x690>
 8009540:	2b34      	cmp	r3, #52	@ 0x34
 8009542:	bfd8      	it	le
 8009544:	f04f 33ff 	movle.w	r3, #4294967295
 8009548:	f04f 0a00 	mov.w	sl, #0
 800954c:	bfcf      	iteee	gt
 800954e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009552:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009556:	4093      	lslle	r3, r2
 8009558:	ea03 0b01 	andle.w	fp, r3, r1
 800955c:	2200      	movs	r2, #0
 800955e:	2300      	movs	r3, #0
 8009560:	4650      	mov	r0, sl
 8009562:	4659      	mov	r1, fp
 8009564:	f7f7 fa2a 	bl	80009bc <__aeabi_dcmpeq>
 8009568:	2800      	cmp	r0, #0
 800956a:	d1a6      	bne.n	80094ba <_strtod_l+0x55a>
 800956c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800956e:	463a      	mov	r2, r7
 8009570:	9300      	str	r3, [sp, #0]
 8009572:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009574:	462b      	mov	r3, r5
 8009576:	9805      	ldr	r0, [sp, #20]
 8009578:	f002 feee 	bl	800c358 <__s2b>
 800957c:	900a      	str	r0, [sp, #40]	@ 0x28
 800957e:	2800      	cmp	r0, #0
 8009580:	f43f af05 	beq.w	800938e <_strtod_l+0x42e>
 8009584:	2400      	movs	r4, #0
 8009586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009588:	eba9 0308 	sub.w	r3, r9, r8
 800958c:	2a00      	cmp	r2, #0
 800958e:	bfa8      	it	ge
 8009590:	2300      	movge	r3, #0
 8009592:	46a0      	mov	r8, r4
 8009594:	9312      	str	r3, [sp, #72]	@ 0x48
 8009596:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800959a:	9316      	str	r3, [sp, #88]	@ 0x58
 800959c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800959e:	9805      	ldr	r0, [sp, #20]
 80095a0:	6859      	ldr	r1, [r3, #4]
 80095a2:	f002 fe31 	bl	800c208 <_Balloc>
 80095a6:	4681      	mov	r9, r0
 80095a8:	2800      	cmp	r0, #0
 80095aa:	f43f aef4 	beq.w	8009396 <_strtod_l+0x436>
 80095ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095b0:	300c      	adds	r0, #12
 80095b2:	691a      	ldr	r2, [r3, #16]
 80095b4:	f103 010c 	add.w	r1, r3, #12
 80095b8:	3202      	adds	r2, #2
 80095ba:	0092      	lsls	r2, r2, #2
 80095bc:	f001 fc27 	bl	800ae0e <memcpy>
 80095c0:	ab1c      	add	r3, sp, #112	@ 0x70
 80095c2:	9301      	str	r3, [sp, #4]
 80095c4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	4652      	mov	r2, sl
 80095ca:	465b      	mov	r3, fp
 80095cc:	9805      	ldr	r0, [sp, #20]
 80095ce:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80095d2:	f003 f9f3 	bl	800c9bc <__d2b>
 80095d6:	901a      	str	r0, [sp, #104]	@ 0x68
 80095d8:	2800      	cmp	r0, #0
 80095da:	f43f aedc 	beq.w	8009396 <_strtod_l+0x436>
 80095de:	2101      	movs	r1, #1
 80095e0:	9805      	ldr	r0, [sp, #20]
 80095e2:	f002 ff4f 	bl	800c484 <__i2b>
 80095e6:	4680      	mov	r8, r0
 80095e8:	b948      	cbnz	r0, 80095fe <_strtod_l+0x69e>
 80095ea:	f04f 0800 	mov.w	r8, #0
 80095ee:	e6d2      	b.n	8009396 <_strtod_l+0x436>
 80095f0:	f04f 32ff 	mov.w	r2, #4294967295
 80095f4:	fa02 f303 	lsl.w	r3, r2, r3
 80095f8:	ea03 0a0a 	and.w	sl, r3, sl
 80095fc:	e7ae      	b.n	800955c <_strtod_l+0x5fc>
 80095fe:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009600:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009602:	2d00      	cmp	r5, #0
 8009604:	bfab      	itete	ge
 8009606:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009608:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800960a:	18ef      	addge	r7, r5, r3
 800960c:	1b5e      	sublt	r6, r3, r5
 800960e:	9b08      	ldr	r3, [sp, #32]
 8009610:	bfa8      	it	ge
 8009612:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009614:	eba5 0503 	sub.w	r5, r5, r3
 8009618:	4415      	add	r5, r2
 800961a:	4b67      	ldr	r3, [pc, #412]	@ (80097b8 <_strtod_l+0x858>)
 800961c:	f105 35ff 	add.w	r5, r5, #4294967295
 8009620:	bfb8      	it	lt
 8009622:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009624:	429d      	cmp	r5, r3
 8009626:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800962a:	da50      	bge.n	80096ce <_strtod_l+0x76e>
 800962c:	1b5b      	subs	r3, r3, r5
 800962e:	2b1f      	cmp	r3, #31
 8009630:	f04f 0101 	mov.w	r1, #1
 8009634:	eba2 0203 	sub.w	r2, r2, r3
 8009638:	dc3d      	bgt.n	80096b6 <_strtod_l+0x756>
 800963a:	fa01 f303 	lsl.w	r3, r1, r3
 800963e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009640:	2300      	movs	r3, #0
 8009642:	9310      	str	r3, [sp, #64]	@ 0x40
 8009644:	18bd      	adds	r5, r7, r2
 8009646:	9b08      	ldr	r3, [sp, #32]
 8009648:	42af      	cmp	r7, r5
 800964a:	4416      	add	r6, r2
 800964c:	441e      	add	r6, r3
 800964e:	463b      	mov	r3, r7
 8009650:	bfa8      	it	ge
 8009652:	462b      	movge	r3, r5
 8009654:	42b3      	cmp	r3, r6
 8009656:	bfa8      	it	ge
 8009658:	4633      	movge	r3, r6
 800965a:	2b00      	cmp	r3, #0
 800965c:	bfc2      	ittt	gt
 800965e:	1aed      	subgt	r5, r5, r3
 8009660:	1af6      	subgt	r6, r6, r3
 8009662:	1aff      	subgt	r7, r7, r3
 8009664:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009666:	2b00      	cmp	r3, #0
 8009668:	dd16      	ble.n	8009698 <_strtod_l+0x738>
 800966a:	4641      	mov	r1, r8
 800966c:	461a      	mov	r2, r3
 800966e:	9805      	ldr	r0, [sp, #20]
 8009670:	f002 ffc6 	bl	800c600 <__pow5mult>
 8009674:	4680      	mov	r8, r0
 8009676:	2800      	cmp	r0, #0
 8009678:	d0b7      	beq.n	80095ea <_strtod_l+0x68a>
 800967a:	4601      	mov	r1, r0
 800967c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800967e:	9805      	ldr	r0, [sp, #20]
 8009680:	f002 ff16 	bl	800c4b0 <__multiply>
 8009684:	900e      	str	r0, [sp, #56]	@ 0x38
 8009686:	2800      	cmp	r0, #0
 8009688:	f43f ae85 	beq.w	8009396 <_strtod_l+0x436>
 800968c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800968e:	9805      	ldr	r0, [sp, #20]
 8009690:	f002 fdfa 	bl	800c288 <_Bfree>
 8009694:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009696:	931a      	str	r3, [sp, #104]	@ 0x68
 8009698:	2d00      	cmp	r5, #0
 800969a:	dc1d      	bgt.n	80096d8 <_strtod_l+0x778>
 800969c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800969e:	2b00      	cmp	r3, #0
 80096a0:	dd23      	ble.n	80096ea <_strtod_l+0x78a>
 80096a2:	4649      	mov	r1, r9
 80096a4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80096a6:	9805      	ldr	r0, [sp, #20]
 80096a8:	f002 ffaa 	bl	800c600 <__pow5mult>
 80096ac:	4681      	mov	r9, r0
 80096ae:	b9e0      	cbnz	r0, 80096ea <_strtod_l+0x78a>
 80096b0:	f04f 0900 	mov.w	r9, #0
 80096b4:	e66f      	b.n	8009396 <_strtod_l+0x436>
 80096b6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80096ba:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80096be:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80096c2:	35e2      	adds	r5, #226	@ 0xe2
 80096c4:	fa01 f305 	lsl.w	r3, r1, r5
 80096c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80096ca:	9113      	str	r1, [sp, #76]	@ 0x4c
 80096cc:	e7ba      	b.n	8009644 <_strtod_l+0x6e4>
 80096ce:	2300      	movs	r3, #0
 80096d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80096d2:	2301      	movs	r3, #1
 80096d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80096d6:	e7b5      	b.n	8009644 <_strtod_l+0x6e4>
 80096d8:	462a      	mov	r2, r5
 80096da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096dc:	9805      	ldr	r0, [sp, #20]
 80096de:	f002 ffe9 	bl	800c6b4 <__lshift>
 80096e2:	901a      	str	r0, [sp, #104]	@ 0x68
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d1d9      	bne.n	800969c <_strtod_l+0x73c>
 80096e8:	e655      	b.n	8009396 <_strtod_l+0x436>
 80096ea:	2e00      	cmp	r6, #0
 80096ec:	dd07      	ble.n	80096fe <_strtod_l+0x79e>
 80096ee:	4649      	mov	r1, r9
 80096f0:	4632      	mov	r2, r6
 80096f2:	9805      	ldr	r0, [sp, #20]
 80096f4:	f002 ffde 	bl	800c6b4 <__lshift>
 80096f8:	4681      	mov	r9, r0
 80096fa:	2800      	cmp	r0, #0
 80096fc:	d0d8      	beq.n	80096b0 <_strtod_l+0x750>
 80096fe:	2f00      	cmp	r7, #0
 8009700:	dd08      	ble.n	8009714 <_strtod_l+0x7b4>
 8009702:	4641      	mov	r1, r8
 8009704:	463a      	mov	r2, r7
 8009706:	9805      	ldr	r0, [sp, #20]
 8009708:	f002 ffd4 	bl	800c6b4 <__lshift>
 800970c:	4680      	mov	r8, r0
 800970e:	2800      	cmp	r0, #0
 8009710:	f43f ae41 	beq.w	8009396 <_strtod_l+0x436>
 8009714:	464a      	mov	r2, r9
 8009716:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009718:	9805      	ldr	r0, [sp, #20]
 800971a:	f003 f853 	bl	800c7c4 <__mdiff>
 800971e:	4604      	mov	r4, r0
 8009720:	2800      	cmp	r0, #0
 8009722:	f43f ae38 	beq.w	8009396 <_strtod_l+0x436>
 8009726:	68c3      	ldr	r3, [r0, #12]
 8009728:	4641      	mov	r1, r8
 800972a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800972c:	2300      	movs	r3, #0
 800972e:	60c3      	str	r3, [r0, #12]
 8009730:	f003 f82c 	bl	800c78c <__mcmp>
 8009734:	2800      	cmp	r0, #0
 8009736:	da45      	bge.n	80097c4 <_strtod_l+0x864>
 8009738:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800973a:	ea53 030a 	orrs.w	r3, r3, sl
 800973e:	d16b      	bne.n	8009818 <_strtod_l+0x8b8>
 8009740:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009744:	2b00      	cmp	r3, #0
 8009746:	d167      	bne.n	8009818 <_strtod_l+0x8b8>
 8009748:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800974c:	0d1b      	lsrs	r3, r3, #20
 800974e:	051b      	lsls	r3, r3, #20
 8009750:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009754:	d960      	bls.n	8009818 <_strtod_l+0x8b8>
 8009756:	6963      	ldr	r3, [r4, #20]
 8009758:	b913      	cbnz	r3, 8009760 <_strtod_l+0x800>
 800975a:	6923      	ldr	r3, [r4, #16]
 800975c:	2b01      	cmp	r3, #1
 800975e:	dd5b      	ble.n	8009818 <_strtod_l+0x8b8>
 8009760:	4621      	mov	r1, r4
 8009762:	2201      	movs	r2, #1
 8009764:	9805      	ldr	r0, [sp, #20]
 8009766:	f002 ffa5 	bl	800c6b4 <__lshift>
 800976a:	4641      	mov	r1, r8
 800976c:	4604      	mov	r4, r0
 800976e:	f003 f80d 	bl	800c78c <__mcmp>
 8009772:	2800      	cmp	r0, #0
 8009774:	dd50      	ble.n	8009818 <_strtod_l+0x8b8>
 8009776:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800977a:	9a08      	ldr	r2, [sp, #32]
 800977c:	0d1b      	lsrs	r3, r3, #20
 800977e:	051b      	lsls	r3, r3, #20
 8009780:	2a00      	cmp	r2, #0
 8009782:	d06a      	beq.n	800985a <_strtod_l+0x8fa>
 8009784:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009788:	d867      	bhi.n	800985a <_strtod_l+0x8fa>
 800978a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800978e:	f67f ae98 	bls.w	80094c2 <_strtod_l+0x562>
 8009792:	4650      	mov	r0, sl
 8009794:	4659      	mov	r1, fp
 8009796:	4b09      	ldr	r3, [pc, #36]	@ (80097bc <_strtod_l+0x85c>)
 8009798:	2200      	movs	r2, #0
 800979a:	f7f6 fea7 	bl	80004ec <__aeabi_dmul>
 800979e:	4b08      	ldr	r3, [pc, #32]	@ (80097c0 <_strtod_l+0x860>)
 80097a0:	4682      	mov	sl, r0
 80097a2:	400b      	ands	r3, r1
 80097a4:	468b      	mov	fp, r1
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f47f ae00 	bne.w	80093ac <_strtod_l+0x44c>
 80097ac:	2322      	movs	r3, #34	@ 0x22
 80097ae:	9a05      	ldr	r2, [sp, #20]
 80097b0:	6013      	str	r3, [r2, #0]
 80097b2:	e5fb      	b.n	80093ac <_strtod_l+0x44c>
 80097b4:	0800dd58 	.word	0x0800dd58
 80097b8:	fffffc02 	.word	0xfffffc02
 80097bc:	39500000 	.word	0x39500000
 80097c0:	7ff00000 	.word	0x7ff00000
 80097c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80097c8:	d165      	bne.n	8009896 <_strtod_l+0x936>
 80097ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80097cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80097d0:	b35a      	cbz	r2, 800982a <_strtod_l+0x8ca>
 80097d2:	4a99      	ldr	r2, [pc, #612]	@ (8009a38 <_strtod_l+0xad8>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d12b      	bne.n	8009830 <_strtod_l+0x8d0>
 80097d8:	9b08      	ldr	r3, [sp, #32]
 80097da:	4651      	mov	r1, sl
 80097dc:	b303      	cbz	r3, 8009820 <_strtod_l+0x8c0>
 80097de:	465a      	mov	r2, fp
 80097e0:	4b96      	ldr	r3, [pc, #600]	@ (8009a3c <_strtod_l+0xadc>)
 80097e2:	4013      	ands	r3, r2
 80097e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80097e8:	f04f 32ff 	mov.w	r2, #4294967295
 80097ec:	d81b      	bhi.n	8009826 <_strtod_l+0x8c6>
 80097ee:	0d1b      	lsrs	r3, r3, #20
 80097f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80097f4:	fa02 f303 	lsl.w	r3, r2, r3
 80097f8:	4299      	cmp	r1, r3
 80097fa:	d119      	bne.n	8009830 <_strtod_l+0x8d0>
 80097fc:	4b90      	ldr	r3, [pc, #576]	@ (8009a40 <_strtod_l+0xae0>)
 80097fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009800:	429a      	cmp	r2, r3
 8009802:	d102      	bne.n	800980a <_strtod_l+0x8aa>
 8009804:	3101      	adds	r1, #1
 8009806:	f43f adc6 	beq.w	8009396 <_strtod_l+0x436>
 800980a:	f04f 0a00 	mov.w	sl, #0
 800980e:	4b8b      	ldr	r3, [pc, #556]	@ (8009a3c <_strtod_l+0xadc>)
 8009810:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009812:	401a      	ands	r2, r3
 8009814:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009818:	9b08      	ldr	r3, [sp, #32]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1b9      	bne.n	8009792 <_strtod_l+0x832>
 800981e:	e5c5      	b.n	80093ac <_strtod_l+0x44c>
 8009820:	f04f 33ff 	mov.w	r3, #4294967295
 8009824:	e7e8      	b.n	80097f8 <_strtod_l+0x898>
 8009826:	4613      	mov	r3, r2
 8009828:	e7e6      	b.n	80097f8 <_strtod_l+0x898>
 800982a:	ea53 030a 	orrs.w	r3, r3, sl
 800982e:	d0a2      	beq.n	8009776 <_strtod_l+0x816>
 8009830:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009832:	b1db      	cbz	r3, 800986c <_strtod_l+0x90c>
 8009834:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009836:	4213      	tst	r3, r2
 8009838:	d0ee      	beq.n	8009818 <_strtod_l+0x8b8>
 800983a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800983c:	4650      	mov	r0, sl
 800983e:	4659      	mov	r1, fp
 8009840:	9a08      	ldr	r2, [sp, #32]
 8009842:	b1bb      	cbz	r3, 8009874 <_strtod_l+0x914>
 8009844:	f7ff fb6a 	bl	8008f1c <sulp>
 8009848:	4602      	mov	r2, r0
 800984a:	460b      	mov	r3, r1
 800984c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009850:	f7f6 fc96 	bl	8000180 <__adddf3>
 8009854:	4682      	mov	sl, r0
 8009856:	468b      	mov	fp, r1
 8009858:	e7de      	b.n	8009818 <_strtod_l+0x8b8>
 800985a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800985e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009862:	f04f 3aff 	mov.w	sl, #4294967295
 8009866:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800986a:	e7d5      	b.n	8009818 <_strtod_l+0x8b8>
 800986c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800986e:	ea13 0f0a 	tst.w	r3, sl
 8009872:	e7e1      	b.n	8009838 <_strtod_l+0x8d8>
 8009874:	f7ff fb52 	bl	8008f1c <sulp>
 8009878:	4602      	mov	r2, r0
 800987a:	460b      	mov	r3, r1
 800987c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009880:	f7f6 fc7c 	bl	800017c <__aeabi_dsub>
 8009884:	2200      	movs	r2, #0
 8009886:	2300      	movs	r3, #0
 8009888:	4682      	mov	sl, r0
 800988a:	468b      	mov	fp, r1
 800988c:	f7f7 f896 	bl	80009bc <__aeabi_dcmpeq>
 8009890:	2800      	cmp	r0, #0
 8009892:	d0c1      	beq.n	8009818 <_strtod_l+0x8b8>
 8009894:	e615      	b.n	80094c2 <_strtod_l+0x562>
 8009896:	4641      	mov	r1, r8
 8009898:	4620      	mov	r0, r4
 800989a:	f003 f8e7 	bl	800ca6c <__ratio>
 800989e:	2200      	movs	r2, #0
 80098a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80098a4:	4606      	mov	r6, r0
 80098a6:	460f      	mov	r7, r1
 80098a8:	f7f7 f89c 	bl	80009e4 <__aeabi_dcmple>
 80098ac:	2800      	cmp	r0, #0
 80098ae:	d06d      	beq.n	800998c <_strtod_l+0xa2c>
 80098b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d178      	bne.n	80099a8 <_strtod_l+0xa48>
 80098b6:	f1ba 0f00 	cmp.w	sl, #0
 80098ba:	d156      	bne.n	800996a <_strtod_l+0xa0a>
 80098bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d158      	bne.n	8009978 <_strtod_l+0xa18>
 80098c6:	2200      	movs	r2, #0
 80098c8:	4630      	mov	r0, r6
 80098ca:	4639      	mov	r1, r7
 80098cc:	4b5d      	ldr	r3, [pc, #372]	@ (8009a44 <_strtod_l+0xae4>)
 80098ce:	f7f7 f87f 	bl	80009d0 <__aeabi_dcmplt>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	d157      	bne.n	8009986 <_strtod_l+0xa26>
 80098d6:	4630      	mov	r0, r6
 80098d8:	4639      	mov	r1, r7
 80098da:	2200      	movs	r2, #0
 80098dc:	4b5a      	ldr	r3, [pc, #360]	@ (8009a48 <_strtod_l+0xae8>)
 80098de:	f7f6 fe05 	bl	80004ec <__aeabi_dmul>
 80098e2:	4606      	mov	r6, r0
 80098e4:	460f      	mov	r7, r1
 80098e6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80098ea:	9606      	str	r6, [sp, #24]
 80098ec:	9307      	str	r3, [sp, #28]
 80098ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098f2:	4d52      	ldr	r5, [pc, #328]	@ (8009a3c <_strtod_l+0xadc>)
 80098f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80098f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098fa:	401d      	ands	r5, r3
 80098fc:	4b53      	ldr	r3, [pc, #332]	@ (8009a4c <_strtod_l+0xaec>)
 80098fe:	429d      	cmp	r5, r3
 8009900:	f040 80aa 	bne.w	8009a58 <_strtod_l+0xaf8>
 8009904:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009906:	4650      	mov	r0, sl
 8009908:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800990c:	4659      	mov	r1, fp
 800990e:	f002 ffed 	bl	800c8ec <__ulp>
 8009912:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009916:	f7f6 fde9 	bl	80004ec <__aeabi_dmul>
 800991a:	4652      	mov	r2, sl
 800991c:	465b      	mov	r3, fp
 800991e:	f7f6 fc2f 	bl	8000180 <__adddf3>
 8009922:	460b      	mov	r3, r1
 8009924:	4945      	ldr	r1, [pc, #276]	@ (8009a3c <_strtod_l+0xadc>)
 8009926:	4a4a      	ldr	r2, [pc, #296]	@ (8009a50 <_strtod_l+0xaf0>)
 8009928:	4019      	ands	r1, r3
 800992a:	4291      	cmp	r1, r2
 800992c:	4682      	mov	sl, r0
 800992e:	d942      	bls.n	80099b6 <_strtod_l+0xa56>
 8009930:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009932:	4b43      	ldr	r3, [pc, #268]	@ (8009a40 <_strtod_l+0xae0>)
 8009934:	429a      	cmp	r2, r3
 8009936:	d103      	bne.n	8009940 <_strtod_l+0x9e0>
 8009938:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800993a:	3301      	adds	r3, #1
 800993c:	f43f ad2b 	beq.w	8009396 <_strtod_l+0x436>
 8009940:	f04f 3aff 	mov.w	sl, #4294967295
 8009944:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009a40 <_strtod_l+0xae0>
 8009948:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800994a:	9805      	ldr	r0, [sp, #20]
 800994c:	f002 fc9c 	bl	800c288 <_Bfree>
 8009950:	4649      	mov	r1, r9
 8009952:	9805      	ldr	r0, [sp, #20]
 8009954:	f002 fc98 	bl	800c288 <_Bfree>
 8009958:	4641      	mov	r1, r8
 800995a:	9805      	ldr	r0, [sp, #20]
 800995c:	f002 fc94 	bl	800c288 <_Bfree>
 8009960:	4621      	mov	r1, r4
 8009962:	9805      	ldr	r0, [sp, #20]
 8009964:	f002 fc90 	bl	800c288 <_Bfree>
 8009968:	e618      	b.n	800959c <_strtod_l+0x63c>
 800996a:	f1ba 0f01 	cmp.w	sl, #1
 800996e:	d103      	bne.n	8009978 <_strtod_l+0xa18>
 8009970:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009972:	2b00      	cmp	r3, #0
 8009974:	f43f ada5 	beq.w	80094c2 <_strtod_l+0x562>
 8009978:	2200      	movs	r2, #0
 800997a:	4b36      	ldr	r3, [pc, #216]	@ (8009a54 <_strtod_l+0xaf4>)
 800997c:	2600      	movs	r6, #0
 800997e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009982:	4f30      	ldr	r7, [pc, #192]	@ (8009a44 <_strtod_l+0xae4>)
 8009984:	e7b3      	b.n	80098ee <_strtod_l+0x98e>
 8009986:	2600      	movs	r6, #0
 8009988:	4f2f      	ldr	r7, [pc, #188]	@ (8009a48 <_strtod_l+0xae8>)
 800998a:	e7ac      	b.n	80098e6 <_strtod_l+0x986>
 800998c:	4630      	mov	r0, r6
 800998e:	4639      	mov	r1, r7
 8009990:	4b2d      	ldr	r3, [pc, #180]	@ (8009a48 <_strtod_l+0xae8>)
 8009992:	2200      	movs	r2, #0
 8009994:	f7f6 fdaa 	bl	80004ec <__aeabi_dmul>
 8009998:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800999a:	4606      	mov	r6, r0
 800999c:	460f      	mov	r7, r1
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d0a1      	beq.n	80098e6 <_strtod_l+0x986>
 80099a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80099a6:	e7a2      	b.n	80098ee <_strtod_l+0x98e>
 80099a8:	2200      	movs	r2, #0
 80099aa:	4b26      	ldr	r3, [pc, #152]	@ (8009a44 <_strtod_l+0xae4>)
 80099ac:	4616      	mov	r6, r2
 80099ae:	461f      	mov	r7, r3
 80099b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80099b4:	e79b      	b.n	80098ee <_strtod_l+0x98e>
 80099b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80099ba:	9b08      	ldr	r3, [sp, #32]
 80099bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1c1      	bne.n	8009948 <_strtod_l+0x9e8>
 80099c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80099c8:	0d1b      	lsrs	r3, r3, #20
 80099ca:	051b      	lsls	r3, r3, #20
 80099cc:	429d      	cmp	r5, r3
 80099ce:	d1bb      	bne.n	8009948 <_strtod_l+0x9e8>
 80099d0:	4630      	mov	r0, r6
 80099d2:	4639      	mov	r1, r7
 80099d4:	f7f7 fa6e 	bl	8000eb4 <__aeabi_d2lz>
 80099d8:	f7f6 fd5a 	bl	8000490 <__aeabi_l2d>
 80099dc:	4602      	mov	r2, r0
 80099de:	460b      	mov	r3, r1
 80099e0:	4630      	mov	r0, r6
 80099e2:	4639      	mov	r1, r7
 80099e4:	f7f6 fbca 	bl	800017c <__aeabi_dsub>
 80099e8:	460b      	mov	r3, r1
 80099ea:	4602      	mov	r2, r0
 80099ec:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80099f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80099f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099f6:	ea46 060a 	orr.w	r6, r6, sl
 80099fa:	431e      	orrs	r6, r3
 80099fc:	d069      	beq.n	8009ad2 <_strtod_l+0xb72>
 80099fe:	a30a      	add	r3, pc, #40	@ (adr r3, 8009a28 <_strtod_l+0xac8>)
 8009a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a04:	f7f6 ffe4 	bl	80009d0 <__aeabi_dcmplt>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	f47f accf 	bne.w	80093ac <_strtod_l+0x44c>
 8009a0e:	a308      	add	r3, pc, #32	@ (adr r3, 8009a30 <_strtod_l+0xad0>)
 8009a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a18:	f7f6 fff8 	bl	8000a0c <__aeabi_dcmpgt>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d093      	beq.n	8009948 <_strtod_l+0x9e8>
 8009a20:	e4c4      	b.n	80093ac <_strtod_l+0x44c>
 8009a22:	bf00      	nop
 8009a24:	f3af 8000 	nop.w
 8009a28:	94a03595 	.word	0x94a03595
 8009a2c:	3fdfffff 	.word	0x3fdfffff
 8009a30:	35afe535 	.word	0x35afe535
 8009a34:	3fe00000 	.word	0x3fe00000
 8009a38:	000fffff 	.word	0x000fffff
 8009a3c:	7ff00000 	.word	0x7ff00000
 8009a40:	7fefffff 	.word	0x7fefffff
 8009a44:	3ff00000 	.word	0x3ff00000
 8009a48:	3fe00000 	.word	0x3fe00000
 8009a4c:	7fe00000 	.word	0x7fe00000
 8009a50:	7c9fffff 	.word	0x7c9fffff
 8009a54:	bff00000 	.word	0xbff00000
 8009a58:	9b08      	ldr	r3, [sp, #32]
 8009a5a:	b323      	cbz	r3, 8009aa6 <_strtod_l+0xb46>
 8009a5c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009a60:	d821      	bhi.n	8009aa6 <_strtod_l+0xb46>
 8009a62:	a327      	add	r3, pc, #156	@ (adr r3, 8009b00 <_strtod_l+0xba0>)
 8009a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a68:	4630      	mov	r0, r6
 8009a6a:	4639      	mov	r1, r7
 8009a6c:	f7f6 ffba 	bl	80009e4 <__aeabi_dcmple>
 8009a70:	b1a0      	cbz	r0, 8009a9c <_strtod_l+0xb3c>
 8009a72:	4639      	mov	r1, r7
 8009a74:	4630      	mov	r0, r6
 8009a76:	f7f7 f811 	bl	8000a9c <__aeabi_d2uiz>
 8009a7a:	2801      	cmp	r0, #1
 8009a7c:	bf38      	it	cc
 8009a7e:	2001      	movcc	r0, #1
 8009a80:	f7f6 fcba 	bl	80003f8 <__aeabi_ui2d>
 8009a84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a86:	4606      	mov	r6, r0
 8009a88:	460f      	mov	r7, r1
 8009a8a:	b9fb      	cbnz	r3, 8009acc <_strtod_l+0xb6c>
 8009a8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009a90:	9014      	str	r0, [sp, #80]	@ 0x50
 8009a92:	9315      	str	r3, [sp, #84]	@ 0x54
 8009a94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009a98:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009a9c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009a9e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009aa2:	1b5b      	subs	r3, r3, r5
 8009aa4:	9311      	str	r3, [sp, #68]	@ 0x44
 8009aa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009aaa:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009aae:	f002 ff1d 	bl	800c8ec <__ulp>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	4650      	mov	r0, sl
 8009ab8:	4659      	mov	r1, fp
 8009aba:	f7f6 fd17 	bl	80004ec <__aeabi_dmul>
 8009abe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009ac2:	f7f6 fb5d 	bl	8000180 <__adddf3>
 8009ac6:	4682      	mov	sl, r0
 8009ac8:	468b      	mov	fp, r1
 8009aca:	e776      	b.n	80099ba <_strtod_l+0xa5a>
 8009acc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009ad0:	e7e0      	b.n	8009a94 <_strtod_l+0xb34>
 8009ad2:	a30d      	add	r3, pc, #52	@ (adr r3, 8009b08 <_strtod_l+0xba8>)
 8009ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad8:	f7f6 ff7a 	bl	80009d0 <__aeabi_dcmplt>
 8009adc:	e79e      	b.n	8009a1c <_strtod_l+0xabc>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ae2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ae4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009ae6:	6013      	str	r3, [r2, #0]
 8009ae8:	f7ff ba77 	b.w	8008fda <_strtod_l+0x7a>
 8009aec:	2a65      	cmp	r2, #101	@ 0x65
 8009aee:	f43f ab6e 	beq.w	80091ce <_strtod_l+0x26e>
 8009af2:	2a45      	cmp	r2, #69	@ 0x45
 8009af4:	f43f ab6b 	beq.w	80091ce <_strtod_l+0x26e>
 8009af8:	2301      	movs	r3, #1
 8009afa:	f7ff bba6 	b.w	800924a <_strtod_l+0x2ea>
 8009afe:	bf00      	nop
 8009b00:	ffc00000 	.word	0xffc00000
 8009b04:	41dfffff 	.word	0x41dfffff
 8009b08:	94a03595 	.word	0x94a03595
 8009b0c:	3fcfffff 	.word	0x3fcfffff

08009b10 <_strtod_r>:
 8009b10:	4b01      	ldr	r3, [pc, #4]	@ (8009b18 <_strtod_r+0x8>)
 8009b12:	f7ff ba25 	b.w	8008f60 <_strtod_l>
 8009b16:	bf00      	nop
 8009b18:	2000001c 	.word	0x2000001c

08009b1c <strtod>:
 8009b1c:	460a      	mov	r2, r1
 8009b1e:	4601      	mov	r1, r0
 8009b20:	4802      	ldr	r0, [pc, #8]	@ (8009b2c <strtod+0x10>)
 8009b22:	4b03      	ldr	r3, [pc, #12]	@ (8009b30 <strtod+0x14>)
 8009b24:	6800      	ldr	r0, [r0, #0]
 8009b26:	f7ff ba1b 	b.w	8008f60 <_strtod_l>
 8009b2a:	bf00      	nop
 8009b2c:	20000188 	.word	0x20000188
 8009b30:	2000001c 	.word	0x2000001c

08009b34 <_strtol_l.constprop.0>:
 8009b34:	2b24      	cmp	r3, #36	@ 0x24
 8009b36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b3a:	4686      	mov	lr, r0
 8009b3c:	4690      	mov	r8, r2
 8009b3e:	d801      	bhi.n	8009b44 <_strtol_l.constprop.0+0x10>
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d106      	bne.n	8009b52 <_strtol_l.constprop.0+0x1e>
 8009b44:	f001 f920 	bl	800ad88 <__errno>
 8009b48:	2316      	movs	r3, #22
 8009b4a:	6003      	str	r3, [r0, #0]
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b52:	460d      	mov	r5, r1
 8009b54:	4833      	ldr	r0, [pc, #204]	@ (8009c24 <_strtol_l.constprop.0+0xf0>)
 8009b56:	462a      	mov	r2, r5
 8009b58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b5c:	5d06      	ldrb	r6, [r0, r4]
 8009b5e:	f016 0608 	ands.w	r6, r6, #8
 8009b62:	d1f8      	bne.n	8009b56 <_strtol_l.constprop.0+0x22>
 8009b64:	2c2d      	cmp	r4, #45	@ 0x2d
 8009b66:	d12d      	bne.n	8009bc4 <_strtol_l.constprop.0+0x90>
 8009b68:	2601      	movs	r6, #1
 8009b6a:	782c      	ldrb	r4, [r5, #0]
 8009b6c:	1c95      	adds	r5, r2, #2
 8009b6e:	f033 0210 	bics.w	r2, r3, #16
 8009b72:	d109      	bne.n	8009b88 <_strtol_l.constprop.0+0x54>
 8009b74:	2c30      	cmp	r4, #48	@ 0x30
 8009b76:	d12a      	bne.n	8009bce <_strtol_l.constprop.0+0x9a>
 8009b78:	782a      	ldrb	r2, [r5, #0]
 8009b7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009b7e:	2a58      	cmp	r2, #88	@ 0x58
 8009b80:	d125      	bne.n	8009bce <_strtol_l.constprop.0+0x9a>
 8009b82:	2310      	movs	r3, #16
 8009b84:	786c      	ldrb	r4, [r5, #1]
 8009b86:	3502      	adds	r5, #2
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009b8e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009b92:	fbbc f9f3 	udiv	r9, ip, r3
 8009b96:	4610      	mov	r0, r2
 8009b98:	fb03 ca19 	mls	sl, r3, r9, ip
 8009b9c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009ba0:	2f09      	cmp	r7, #9
 8009ba2:	d81b      	bhi.n	8009bdc <_strtol_l.constprop.0+0xa8>
 8009ba4:	463c      	mov	r4, r7
 8009ba6:	42a3      	cmp	r3, r4
 8009ba8:	dd27      	ble.n	8009bfa <_strtol_l.constprop.0+0xc6>
 8009baa:	1c57      	adds	r7, r2, #1
 8009bac:	d007      	beq.n	8009bbe <_strtol_l.constprop.0+0x8a>
 8009bae:	4581      	cmp	r9, r0
 8009bb0:	d320      	bcc.n	8009bf4 <_strtol_l.constprop.0+0xc0>
 8009bb2:	d101      	bne.n	8009bb8 <_strtol_l.constprop.0+0x84>
 8009bb4:	45a2      	cmp	sl, r4
 8009bb6:	db1d      	blt.n	8009bf4 <_strtol_l.constprop.0+0xc0>
 8009bb8:	2201      	movs	r2, #1
 8009bba:	fb00 4003 	mla	r0, r0, r3, r4
 8009bbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bc2:	e7eb      	b.n	8009b9c <_strtol_l.constprop.0+0x68>
 8009bc4:	2c2b      	cmp	r4, #43	@ 0x2b
 8009bc6:	bf04      	itt	eq
 8009bc8:	782c      	ldrbeq	r4, [r5, #0]
 8009bca:	1c95      	addeq	r5, r2, #2
 8009bcc:	e7cf      	b.n	8009b6e <_strtol_l.constprop.0+0x3a>
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1da      	bne.n	8009b88 <_strtol_l.constprop.0+0x54>
 8009bd2:	2c30      	cmp	r4, #48	@ 0x30
 8009bd4:	bf0c      	ite	eq
 8009bd6:	2308      	moveq	r3, #8
 8009bd8:	230a      	movne	r3, #10
 8009bda:	e7d5      	b.n	8009b88 <_strtol_l.constprop.0+0x54>
 8009bdc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009be0:	2f19      	cmp	r7, #25
 8009be2:	d801      	bhi.n	8009be8 <_strtol_l.constprop.0+0xb4>
 8009be4:	3c37      	subs	r4, #55	@ 0x37
 8009be6:	e7de      	b.n	8009ba6 <_strtol_l.constprop.0+0x72>
 8009be8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009bec:	2f19      	cmp	r7, #25
 8009bee:	d804      	bhi.n	8009bfa <_strtol_l.constprop.0+0xc6>
 8009bf0:	3c57      	subs	r4, #87	@ 0x57
 8009bf2:	e7d8      	b.n	8009ba6 <_strtol_l.constprop.0+0x72>
 8009bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf8:	e7e1      	b.n	8009bbe <_strtol_l.constprop.0+0x8a>
 8009bfa:	1c53      	adds	r3, r2, #1
 8009bfc:	d108      	bne.n	8009c10 <_strtol_l.constprop.0+0xdc>
 8009bfe:	2322      	movs	r3, #34	@ 0x22
 8009c00:	4660      	mov	r0, ip
 8009c02:	f8ce 3000 	str.w	r3, [lr]
 8009c06:	f1b8 0f00 	cmp.w	r8, #0
 8009c0a:	d0a0      	beq.n	8009b4e <_strtol_l.constprop.0+0x1a>
 8009c0c:	1e69      	subs	r1, r5, #1
 8009c0e:	e006      	b.n	8009c1e <_strtol_l.constprop.0+0xea>
 8009c10:	b106      	cbz	r6, 8009c14 <_strtol_l.constprop.0+0xe0>
 8009c12:	4240      	negs	r0, r0
 8009c14:	f1b8 0f00 	cmp.w	r8, #0
 8009c18:	d099      	beq.n	8009b4e <_strtol_l.constprop.0+0x1a>
 8009c1a:	2a00      	cmp	r2, #0
 8009c1c:	d1f6      	bne.n	8009c0c <_strtol_l.constprop.0+0xd8>
 8009c1e:	f8c8 1000 	str.w	r1, [r8]
 8009c22:	e794      	b.n	8009b4e <_strtol_l.constprop.0+0x1a>
 8009c24:	0800dd81 	.word	0x0800dd81

08009c28 <_strtol_r>:
 8009c28:	f7ff bf84 	b.w	8009b34 <_strtol_l.constprop.0>

08009c2c <strtol>:
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	460a      	mov	r2, r1
 8009c30:	4601      	mov	r1, r0
 8009c32:	4802      	ldr	r0, [pc, #8]	@ (8009c3c <strtol+0x10>)
 8009c34:	6800      	ldr	r0, [r0, #0]
 8009c36:	f7ff bf7d 	b.w	8009b34 <_strtol_l.constprop.0>
 8009c3a:	bf00      	nop
 8009c3c:	20000188 	.word	0x20000188

08009c40 <__cvt>:
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c46:	461d      	mov	r5, r3
 8009c48:	bfbb      	ittet	lt
 8009c4a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009c4e:	461d      	movlt	r5, r3
 8009c50:	2300      	movge	r3, #0
 8009c52:	232d      	movlt	r3, #45	@ 0x2d
 8009c54:	b088      	sub	sp, #32
 8009c56:	4614      	mov	r4, r2
 8009c58:	bfb8      	it	lt
 8009c5a:	4614      	movlt	r4, r2
 8009c5c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009c5e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009c60:	7013      	strb	r3, [r2, #0]
 8009c62:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009c64:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009c68:	f023 0820 	bic.w	r8, r3, #32
 8009c6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009c70:	d005      	beq.n	8009c7e <__cvt+0x3e>
 8009c72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009c76:	d100      	bne.n	8009c7a <__cvt+0x3a>
 8009c78:	3601      	adds	r6, #1
 8009c7a:	2302      	movs	r3, #2
 8009c7c:	e000      	b.n	8009c80 <__cvt+0x40>
 8009c7e:	2303      	movs	r3, #3
 8009c80:	aa07      	add	r2, sp, #28
 8009c82:	9204      	str	r2, [sp, #16]
 8009c84:	aa06      	add	r2, sp, #24
 8009c86:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009c8a:	e9cd 3600 	strd	r3, r6, [sp]
 8009c8e:	4622      	mov	r2, r4
 8009c90:	462b      	mov	r3, r5
 8009c92:	f001 f95d 	bl	800af50 <_dtoa_r>
 8009c96:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009c9a:	4607      	mov	r7, r0
 8009c9c:	d119      	bne.n	8009cd2 <__cvt+0x92>
 8009c9e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ca0:	07db      	lsls	r3, r3, #31
 8009ca2:	d50e      	bpl.n	8009cc2 <__cvt+0x82>
 8009ca4:	eb00 0906 	add.w	r9, r0, r6
 8009ca8:	2200      	movs	r2, #0
 8009caa:	2300      	movs	r3, #0
 8009cac:	4620      	mov	r0, r4
 8009cae:	4629      	mov	r1, r5
 8009cb0:	f7f6 fe84 	bl	80009bc <__aeabi_dcmpeq>
 8009cb4:	b108      	cbz	r0, 8009cba <__cvt+0x7a>
 8009cb6:	f8cd 901c 	str.w	r9, [sp, #28]
 8009cba:	2230      	movs	r2, #48	@ 0x30
 8009cbc:	9b07      	ldr	r3, [sp, #28]
 8009cbe:	454b      	cmp	r3, r9
 8009cc0:	d31e      	bcc.n	8009d00 <__cvt+0xc0>
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	9b07      	ldr	r3, [sp, #28]
 8009cc6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009cc8:	1bdb      	subs	r3, r3, r7
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	b008      	add	sp, #32
 8009cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009cd6:	eb00 0906 	add.w	r9, r0, r6
 8009cda:	d1e5      	bne.n	8009ca8 <__cvt+0x68>
 8009cdc:	7803      	ldrb	r3, [r0, #0]
 8009cde:	2b30      	cmp	r3, #48	@ 0x30
 8009ce0:	d10a      	bne.n	8009cf8 <__cvt+0xb8>
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	4629      	mov	r1, r5
 8009cea:	f7f6 fe67 	bl	80009bc <__aeabi_dcmpeq>
 8009cee:	b918      	cbnz	r0, 8009cf8 <__cvt+0xb8>
 8009cf0:	f1c6 0601 	rsb	r6, r6, #1
 8009cf4:	f8ca 6000 	str.w	r6, [sl]
 8009cf8:	f8da 3000 	ldr.w	r3, [sl]
 8009cfc:	4499      	add	r9, r3
 8009cfe:	e7d3      	b.n	8009ca8 <__cvt+0x68>
 8009d00:	1c59      	adds	r1, r3, #1
 8009d02:	9107      	str	r1, [sp, #28]
 8009d04:	701a      	strb	r2, [r3, #0]
 8009d06:	e7d9      	b.n	8009cbc <__cvt+0x7c>

08009d08 <__exponent>:
 8009d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d0a:	2900      	cmp	r1, #0
 8009d0c:	bfb6      	itet	lt
 8009d0e:	232d      	movlt	r3, #45	@ 0x2d
 8009d10:	232b      	movge	r3, #43	@ 0x2b
 8009d12:	4249      	neglt	r1, r1
 8009d14:	2909      	cmp	r1, #9
 8009d16:	7002      	strb	r2, [r0, #0]
 8009d18:	7043      	strb	r3, [r0, #1]
 8009d1a:	dd29      	ble.n	8009d70 <__exponent+0x68>
 8009d1c:	f10d 0307 	add.w	r3, sp, #7
 8009d20:	461d      	mov	r5, r3
 8009d22:	270a      	movs	r7, #10
 8009d24:	fbb1 f6f7 	udiv	r6, r1, r7
 8009d28:	461a      	mov	r2, r3
 8009d2a:	fb07 1416 	mls	r4, r7, r6, r1
 8009d2e:	3430      	adds	r4, #48	@ 0x30
 8009d30:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009d34:	460c      	mov	r4, r1
 8009d36:	2c63      	cmp	r4, #99	@ 0x63
 8009d38:	4631      	mov	r1, r6
 8009d3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d3e:	dcf1      	bgt.n	8009d24 <__exponent+0x1c>
 8009d40:	3130      	adds	r1, #48	@ 0x30
 8009d42:	1e94      	subs	r4, r2, #2
 8009d44:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009d48:	4623      	mov	r3, r4
 8009d4a:	1c41      	adds	r1, r0, #1
 8009d4c:	42ab      	cmp	r3, r5
 8009d4e:	d30a      	bcc.n	8009d66 <__exponent+0x5e>
 8009d50:	f10d 0309 	add.w	r3, sp, #9
 8009d54:	1a9b      	subs	r3, r3, r2
 8009d56:	42ac      	cmp	r4, r5
 8009d58:	bf88      	it	hi
 8009d5a:	2300      	movhi	r3, #0
 8009d5c:	3302      	adds	r3, #2
 8009d5e:	4403      	add	r3, r0
 8009d60:	1a18      	subs	r0, r3, r0
 8009d62:	b003      	add	sp, #12
 8009d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d66:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009d6a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009d6e:	e7ed      	b.n	8009d4c <__exponent+0x44>
 8009d70:	2330      	movs	r3, #48	@ 0x30
 8009d72:	3130      	adds	r1, #48	@ 0x30
 8009d74:	7083      	strb	r3, [r0, #2]
 8009d76:	70c1      	strb	r1, [r0, #3]
 8009d78:	1d03      	adds	r3, r0, #4
 8009d7a:	e7f1      	b.n	8009d60 <__exponent+0x58>

08009d7c <_printf_float>:
 8009d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d80:	b091      	sub	sp, #68	@ 0x44
 8009d82:	460c      	mov	r4, r1
 8009d84:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009d88:	4616      	mov	r6, r2
 8009d8a:	461f      	mov	r7, r3
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	f000 ffa1 	bl	800acd4 <_localeconv_r>
 8009d92:	6803      	ldr	r3, [r0, #0]
 8009d94:	4618      	mov	r0, r3
 8009d96:	9308      	str	r3, [sp, #32]
 8009d98:	f7f6 f9e4 	bl	8000164 <strlen>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	930e      	str	r3, [sp, #56]	@ 0x38
 8009da0:	f8d8 3000 	ldr.w	r3, [r8]
 8009da4:	9009      	str	r0, [sp, #36]	@ 0x24
 8009da6:	3307      	adds	r3, #7
 8009da8:	f023 0307 	bic.w	r3, r3, #7
 8009dac:	f103 0208 	add.w	r2, r3, #8
 8009db0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009db4:	f8d4 b000 	ldr.w	fp, [r4]
 8009db8:	f8c8 2000 	str.w	r2, [r8]
 8009dbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009dc0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009dc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dc6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009dca:	f04f 32ff 	mov.w	r2, #4294967295
 8009dce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009dd2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009dd6:	4b9c      	ldr	r3, [pc, #624]	@ (800a048 <_printf_float+0x2cc>)
 8009dd8:	f7f6 fe22 	bl	8000a20 <__aeabi_dcmpun>
 8009ddc:	bb70      	cbnz	r0, 8009e3c <_printf_float+0xc0>
 8009dde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009de2:	f04f 32ff 	mov.w	r2, #4294967295
 8009de6:	4b98      	ldr	r3, [pc, #608]	@ (800a048 <_printf_float+0x2cc>)
 8009de8:	f7f6 fdfc 	bl	80009e4 <__aeabi_dcmple>
 8009dec:	bb30      	cbnz	r0, 8009e3c <_printf_float+0xc0>
 8009dee:	2200      	movs	r2, #0
 8009df0:	2300      	movs	r3, #0
 8009df2:	4640      	mov	r0, r8
 8009df4:	4649      	mov	r1, r9
 8009df6:	f7f6 fdeb 	bl	80009d0 <__aeabi_dcmplt>
 8009dfa:	b110      	cbz	r0, 8009e02 <_printf_float+0x86>
 8009dfc:	232d      	movs	r3, #45	@ 0x2d
 8009dfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e02:	4a92      	ldr	r2, [pc, #584]	@ (800a04c <_printf_float+0x2d0>)
 8009e04:	4b92      	ldr	r3, [pc, #584]	@ (800a050 <_printf_float+0x2d4>)
 8009e06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009e0a:	bf94      	ite	ls
 8009e0c:	4690      	movls	r8, r2
 8009e0e:	4698      	movhi	r8, r3
 8009e10:	2303      	movs	r3, #3
 8009e12:	f04f 0900 	mov.w	r9, #0
 8009e16:	6123      	str	r3, [r4, #16]
 8009e18:	f02b 0304 	bic.w	r3, fp, #4
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	4633      	mov	r3, r6
 8009e20:	4621      	mov	r1, r4
 8009e22:	4628      	mov	r0, r5
 8009e24:	9700      	str	r7, [sp, #0]
 8009e26:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009e28:	f000 f9d4 	bl	800a1d4 <_printf_common>
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	f040 8090 	bne.w	8009f52 <_printf_float+0x1d6>
 8009e32:	f04f 30ff 	mov.w	r0, #4294967295
 8009e36:	b011      	add	sp, #68	@ 0x44
 8009e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e3c:	4642      	mov	r2, r8
 8009e3e:	464b      	mov	r3, r9
 8009e40:	4640      	mov	r0, r8
 8009e42:	4649      	mov	r1, r9
 8009e44:	f7f6 fdec 	bl	8000a20 <__aeabi_dcmpun>
 8009e48:	b148      	cbz	r0, 8009e5e <_printf_float+0xe2>
 8009e4a:	464b      	mov	r3, r9
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	bfb8      	it	lt
 8009e50:	232d      	movlt	r3, #45	@ 0x2d
 8009e52:	4a80      	ldr	r2, [pc, #512]	@ (800a054 <_printf_float+0x2d8>)
 8009e54:	bfb8      	it	lt
 8009e56:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009e5a:	4b7f      	ldr	r3, [pc, #508]	@ (800a058 <_printf_float+0x2dc>)
 8009e5c:	e7d3      	b.n	8009e06 <_printf_float+0x8a>
 8009e5e:	6863      	ldr	r3, [r4, #4]
 8009e60:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009e64:	1c5a      	adds	r2, r3, #1
 8009e66:	d13f      	bne.n	8009ee8 <_printf_float+0x16c>
 8009e68:	2306      	movs	r3, #6
 8009e6a:	6063      	str	r3, [r4, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009e72:	6023      	str	r3, [r4, #0]
 8009e74:	9206      	str	r2, [sp, #24]
 8009e76:	aa0e      	add	r2, sp, #56	@ 0x38
 8009e78:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009e7c:	aa0d      	add	r2, sp, #52	@ 0x34
 8009e7e:	9203      	str	r2, [sp, #12]
 8009e80:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009e84:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009e88:	6863      	ldr	r3, [r4, #4]
 8009e8a:	4642      	mov	r2, r8
 8009e8c:	9300      	str	r3, [sp, #0]
 8009e8e:	4628      	mov	r0, r5
 8009e90:	464b      	mov	r3, r9
 8009e92:	910a      	str	r1, [sp, #40]	@ 0x28
 8009e94:	f7ff fed4 	bl	8009c40 <__cvt>
 8009e98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e9a:	4680      	mov	r8, r0
 8009e9c:	2947      	cmp	r1, #71	@ 0x47
 8009e9e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009ea0:	d128      	bne.n	8009ef4 <_printf_float+0x178>
 8009ea2:	1cc8      	adds	r0, r1, #3
 8009ea4:	db02      	blt.n	8009eac <_printf_float+0x130>
 8009ea6:	6863      	ldr	r3, [r4, #4]
 8009ea8:	4299      	cmp	r1, r3
 8009eaa:	dd40      	ble.n	8009f2e <_printf_float+0x1b2>
 8009eac:	f1aa 0a02 	sub.w	sl, sl, #2
 8009eb0:	fa5f fa8a 	uxtb.w	sl, sl
 8009eb4:	4652      	mov	r2, sl
 8009eb6:	3901      	subs	r1, #1
 8009eb8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009ebc:	910d      	str	r1, [sp, #52]	@ 0x34
 8009ebe:	f7ff ff23 	bl	8009d08 <__exponent>
 8009ec2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ec4:	4681      	mov	r9, r0
 8009ec6:	1813      	adds	r3, r2, r0
 8009ec8:	2a01      	cmp	r2, #1
 8009eca:	6123      	str	r3, [r4, #16]
 8009ecc:	dc02      	bgt.n	8009ed4 <_printf_float+0x158>
 8009ece:	6822      	ldr	r2, [r4, #0]
 8009ed0:	07d2      	lsls	r2, r2, #31
 8009ed2:	d501      	bpl.n	8009ed8 <_printf_float+0x15c>
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	6123      	str	r3, [r4, #16]
 8009ed8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d09e      	beq.n	8009e1e <_printf_float+0xa2>
 8009ee0:	232d      	movs	r3, #45	@ 0x2d
 8009ee2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ee6:	e79a      	b.n	8009e1e <_printf_float+0xa2>
 8009ee8:	2947      	cmp	r1, #71	@ 0x47
 8009eea:	d1bf      	bne.n	8009e6c <_printf_float+0xf0>
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1bd      	bne.n	8009e6c <_printf_float+0xf0>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e7ba      	b.n	8009e6a <_printf_float+0xee>
 8009ef4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009ef8:	d9dc      	bls.n	8009eb4 <_printf_float+0x138>
 8009efa:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009efe:	d118      	bne.n	8009f32 <_printf_float+0x1b6>
 8009f00:	2900      	cmp	r1, #0
 8009f02:	6863      	ldr	r3, [r4, #4]
 8009f04:	dd0b      	ble.n	8009f1e <_printf_float+0x1a2>
 8009f06:	6121      	str	r1, [r4, #16]
 8009f08:	b913      	cbnz	r3, 8009f10 <_printf_float+0x194>
 8009f0a:	6822      	ldr	r2, [r4, #0]
 8009f0c:	07d0      	lsls	r0, r2, #31
 8009f0e:	d502      	bpl.n	8009f16 <_printf_float+0x19a>
 8009f10:	3301      	adds	r3, #1
 8009f12:	440b      	add	r3, r1
 8009f14:	6123      	str	r3, [r4, #16]
 8009f16:	f04f 0900 	mov.w	r9, #0
 8009f1a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009f1c:	e7dc      	b.n	8009ed8 <_printf_float+0x15c>
 8009f1e:	b913      	cbnz	r3, 8009f26 <_printf_float+0x1aa>
 8009f20:	6822      	ldr	r2, [r4, #0]
 8009f22:	07d2      	lsls	r2, r2, #31
 8009f24:	d501      	bpl.n	8009f2a <_printf_float+0x1ae>
 8009f26:	3302      	adds	r3, #2
 8009f28:	e7f4      	b.n	8009f14 <_printf_float+0x198>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e7f2      	b.n	8009f14 <_printf_float+0x198>
 8009f2e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009f32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f34:	4299      	cmp	r1, r3
 8009f36:	db05      	blt.n	8009f44 <_printf_float+0x1c8>
 8009f38:	6823      	ldr	r3, [r4, #0]
 8009f3a:	6121      	str	r1, [r4, #16]
 8009f3c:	07d8      	lsls	r0, r3, #31
 8009f3e:	d5ea      	bpl.n	8009f16 <_printf_float+0x19a>
 8009f40:	1c4b      	adds	r3, r1, #1
 8009f42:	e7e7      	b.n	8009f14 <_printf_float+0x198>
 8009f44:	2900      	cmp	r1, #0
 8009f46:	bfcc      	ite	gt
 8009f48:	2201      	movgt	r2, #1
 8009f4a:	f1c1 0202 	rsble	r2, r1, #2
 8009f4e:	4413      	add	r3, r2
 8009f50:	e7e0      	b.n	8009f14 <_printf_float+0x198>
 8009f52:	6823      	ldr	r3, [r4, #0]
 8009f54:	055a      	lsls	r2, r3, #21
 8009f56:	d407      	bmi.n	8009f68 <_printf_float+0x1ec>
 8009f58:	6923      	ldr	r3, [r4, #16]
 8009f5a:	4642      	mov	r2, r8
 8009f5c:	4631      	mov	r1, r6
 8009f5e:	4628      	mov	r0, r5
 8009f60:	47b8      	blx	r7
 8009f62:	3001      	adds	r0, #1
 8009f64:	d12b      	bne.n	8009fbe <_printf_float+0x242>
 8009f66:	e764      	b.n	8009e32 <_printf_float+0xb6>
 8009f68:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f6c:	f240 80dc 	bls.w	800a128 <_printf_float+0x3ac>
 8009f70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009f74:	2200      	movs	r2, #0
 8009f76:	2300      	movs	r3, #0
 8009f78:	f7f6 fd20 	bl	80009bc <__aeabi_dcmpeq>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d033      	beq.n	8009fe8 <_printf_float+0x26c>
 8009f80:	2301      	movs	r3, #1
 8009f82:	4631      	mov	r1, r6
 8009f84:	4628      	mov	r0, r5
 8009f86:	4a35      	ldr	r2, [pc, #212]	@ (800a05c <_printf_float+0x2e0>)
 8009f88:	47b8      	blx	r7
 8009f8a:	3001      	adds	r0, #1
 8009f8c:	f43f af51 	beq.w	8009e32 <_printf_float+0xb6>
 8009f90:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009f94:	4543      	cmp	r3, r8
 8009f96:	db02      	blt.n	8009f9e <_printf_float+0x222>
 8009f98:	6823      	ldr	r3, [r4, #0]
 8009f9a:	07d8      	lsls	r0, r3, #31
 8009f9c:	d50f      	bpl.n	8009fbe <_printf_float+0x242>
 8009f9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009fa2:	4631      	mov	r1, r6
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	47b8      	blx	r7
 8009fa8:	3001      	adds	r0, #1
 8009faa:	f43f af42 	beq.w	8009e32 <_printf_float+0xb6>
 8009fae:	f04f 0900 	mov.w	r9, #0
 8009fb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009fb6:	f104 0a1a 	add.w	sl, r4, #26
 8009fba:	45c8      	cmp	r8, r9
 8009fbc:	dc09      	bgt.n	8009fd2 <_printf_float+0x256>
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	079b      	lsls	r3, r3, #30
 8009fc2:	f100 8102 	bmi.w	800a1ca <_printf_float+0x44e>
 8009fc6:	68e0      	ldr	r0, [r4, #12]
 8009fc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fca:	4298      	cmp	r0, r3
 8009fcc:	bfb8      	it	lt
 8009fce:	4618      	movlt	r0, r3
 8009fd0:	e731      	b.n	8009e36 <_printf_float+0xba>
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	4652      	mov	r2, sl
 8009fd6:	4631      	mov	r1, r6
 8009fd8:	4628      	mov	r0, r5
 8009fda:	47b8      	blx	r7
 8009fdc:	3001      	adds	r0, #1
 8009fde:	f43f af28 	beq.w	8009e32 <_printf_float+0xb6>
 8009fe2:	f109 0901 	add.w	r9, r9, #1
 8009fe6:	e7e8      	b.n	8009fba <_printf_float+0x23e>
 8009fe8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	dc38      	bgt.n	800a060 <_printf_float+0x2e4>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	4631      	mov	r1, r6
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	4a19      	ldr	r2, [pc, #100]	@ (800a05c <_printf_float+0x2e0>)
 8009ff6:	47b8      	blx	r7
 8009ff8:	3001      	adds	r0, #1
 8009ffa:	f43f af1a 	beq.w	8009e32 <_printf_float+0xb6>
 8009ffe:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800a002:	ea59 0303 	orrs.w	r3, r9, r3
 800a006:	d102      	bne.n	800a00e <_printf_float+0x292>
 800a008:	6823      	ldr	r3, [r4, #0]
 800a00a:	07d9      	lsls	r1, r3, #31
 800a00c:	d5d7      	bpl.n	8009fbe <_printf_float+0x242>
 800a00e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a012:	4631      	mov	r1, r6
 800a014:	4628      	mov	r0, r5
 800a016:	47b8      	blx	r7
 800a018:	3001      	adds	r0, #1
 800a01a:	f43f af0a 	beq.w	8009e32 <_printf_float+0xb6>
 800a01e:	f04f 0a00 	mov.w	sl, #0
 800a022:	f104 0b1a 	add.w	fp, r4, #26
 800a026:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a028:	425b      	negs	r3, r3
 800a02a:	4553      	cmp	r3, sl
 800a02c:	dc01      	bgt.n	800a032 <_printf_float+0x2b6>
 800a02e:	464b      	mov	r3, r9
 800a030:	e793      	b.n	8009f5a <_printf_float+0x1de>
 800a032:	2301      	movs	r3, #1
 800a034:	465a      	mov	r2, fp
 800a036:	4631      	mov	r1, r6
 800a038:	4628      	mov	r0, r5
 800a03a:	47b8      	blx	r7
 800a03c:	3001      	adds	r0, #1
 800a03e:	f43f aef8 	beq.w	8009e32 <_printf_float+0xb6>
 800a042:	f10a 0a01 	add.w	sl, sl, #1
 800a046:	e7ee      	b.n	800a026 <_printf_float+0x2aa>
 800a048:	7fefffff 	.word	0x7fefffff
 800a04c:	0800de81 	.word	0x0800de81
 800a050:	0800de85 	.word	0x0800de85
 800a054:	0800de89 	.word	0x0800de89
 800a058:	0800de8d 	.word	0x0800de8d
 800a05c:	0800db4f 	.word	0x0800db4f
 800a060:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a062:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a066:	4553      	cmp	r3, sl
 800a068:	bfa8      	it	ge
 800a06a:	4653      	movge	r3, sl
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	4699      	mov	r9, r3
 800a070:	dc36      	bgt.n	800a0e0 <_printf_float+0x364>
 800a072:	f04f 0b00 	mov.w	fp, #0
 800a076:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a07a:	f104 021a 	add.w	r2, r4, #26
 800a07e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a080:	930a      	str	r3, [sp, #40]	@ 0x28
 800a082:	eba3 0309 	sub.w	r3, r3, r9
 800a086:	455b      	cmp	r3, fp
 800a088:	dc31      	bgt.n	800a0ee <_printf_float+0x372>
 800a08a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a08c:	459a      	cmp	sl, r3
 800a08e:	dc3a      	bgt.n	800a106 <_printf_float+0x38a>
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	07da      	lsls	r2, r3, #31
 800a094:	d437      	bmi.n	800a106 <_printf_float+0x38a>
 800a096:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a098:	ebaa 0903 	sub.w	r9, sl, r3
 800a09c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a09e:	ebaa 0303 	sub.w	r3, sl, r3
 800a0a2:	4599      	cmp	r9, r3
 800a0a4:	bfa8      	it	ge
 800a0a6:	4699      	movge	r9, r3
 800a0a8:	f1b9 0f00 	cmp.w	r9, #0
 800a0ac:	dc33      	bgt.n	800a116 <_printf_float+0x39a>
 800a0ae:	f04f 0800 	mov.w	r8, #0
 800a0b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0b6:	f104 0b1a 	add.w	fp, r4, #26
 800a0ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0bc:	ebaa 0303 	sub.w	r3, sl, r3
 800a0c0:	eba3 0309 	sub.w	r3, r3, r9
 800a0c4:	4543      	cmp	r3, r8
 800a0c6:	f77f af7a 	ble.w	8009fbe <_printf_float+0x242>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	465a      	mov	r2, fp
 800a0ce:	4631      	mov	r1, r6
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	47b8      	blx	r7
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	f43f aeac 	beq.w	8009e32 <_printf_float+0xb6>
 800a0da:	f108 0801 	add.w	r8, r8, #1
 800a0de:	e7ec      	b.n	800a0ba <_printf_float+0x33e>
 800a0e0:	4642      	mov	r2, r8
 800a0e2:	4631      	mov	r1, r6
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	47b8      	blx	r7
 800a0e8:	3001      	adds	r0, #1
 800a0ea:	d1c2      	bne.n	800a072 <_printf_float+0x2f6>
 800a0ec:	e6a1      	b.n	8009e32 <_printf_float+0xb6>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	4631      	mov	r1, r6
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	920a      	str	r2, [sp, #40]	@ 0x28
 800a0f6:	47b8      	blx	r7
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	f43f ae9a 	beq.w	8009e32 <_printf_float+0xb6>
 800a0fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a100:	f10b 0b01 	add.w	fp, fp, #1
 800a104:	e7bb      	b.n	800a07e <_printf_float+0x302>
 800a106:	4631      	mov	r1, r6
 800a108:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a10c:	4628      	mov	r0, r5
 800a10e:	47b8      	blx	r7
 800a110:	3001      	adds	r0, #1
 800a112:	d1c0      	bne.n	800a096 <_printf_float+0x31a>
 800a114:	e68d      	b.n	8009e32 <_printf_float+0xb6>
 800a116:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a118:	464b      	mov	r3, r9
 800a11a:	4631      	mov	r1, r6
 800a11c:	4628      	mov	r0, r5
 800a11e:	4442      	add	r2, r8
 800a120:	47b8      	blx	r7
 800a122:	3001      	adds	r0, #1
 800a124:	d1c3      	bne.n	800a0ae <_printf_float+0x332>
 800a126:	e684      	b.n	8009e32 <_printf_float+0xb6>
 800a128:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a12c:	f1ba 0f01 	cmp.w	sl, #1
 800a130:	dc01      	bgt.n	800a136 <_printf_float+0x3ba>
 800a132:	07db      	lsls	r3, r3, #31
 800a134:	d536      	bpl.n	800a1a4 <_printf_float+0x428>
 800a136:	2301      	movs	r3, #1
 800a138:	4642      	mov	r2, r8
 800a13a:	4631      	mov	r1, r6
 800a13c:	4628      	mov	r0, r5
 800a13e:	47b8      	blx	r7
 800a140:	3001      	adds	r0, #1
 800a142:	f43f ae76 	beq.w	8009e32 <_printf_float+0xb6>
 800a146:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a14a:	4631      	mov	r1, r6
 800a14c:	4628      	mov	r0, r5
 800a14e:	47b8      	blx	r7
 800a150:	3001      	adds	r0, #1
 800a152:	f43f ae6e 	beq.w	8009e32 <_printf_float+0xb6>
 800a156:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a15a:	2200      	movs	r2, #0
 800a15c:	2300      	movs	r3, #0
 800a15e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a162:	f7f6 fc2b 	bl	80009bc <__aeabi_dcmpeq>
 800a166:	b9c0      	cbnz	r0, 800a19a <_printf_float+0x41e>
 800a168:	4653      	mov	r3, sl
 800a16a:	f108 0201 	add.w	r2, r8, #1
 800a16e:	4631      	mov	r1, r6
 800a170:	4628      	mov	r0, r5
 800a172:	47b8      	blx	r7
 800a174:	3001      	adds	r0, #1
 800a176:	d10c      	bne.n	800a192 <_printf_float+0x416>
 800a178:	e65b      	b.n	8009e32 <_printf_float+0xb6>
 800a17a:	2301      	movs	r3, #1
 800a17c:	465a      	mov	r2, fp
 800a17e:	4631      	mov	r1, r6
 800a180:	4628      	mov	r0, r5
 800a182:	47b8      	blx	r7
 800a184:	3001      	adds	r0, #1
 800a186:	f43f ae54 	beq.w	8009e32 <_printf_float+0xb6>
 800a18a:	f108 0801 	add.w	r8, r8, #1
 800a18e:	45d0      	cmp	r8, sl
 800a190:	dbf3      	blt.n	800a17a <_printf_float+0x3fe>
 800a192:	464b      	mov	r3, r9
 800a194:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a198:	e6e0      	b.n	8009f5c <_printf_float+0x1e0>
 800a19a:	f04f 0800 	mov.w	r8, #0
 800a19e:	f104 0b1a 	add.w	fp, r4, #26
 800a1a2:	e7f4      	b.n	800a18e <_printf_float+0x412>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	4642      	mov	r2, r8
 800a1a8:	e7e1      	b.n	800a16e <_printf_float+0x3f2>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	464a      	mov	r2, r9
 800a1ae:	4631      	mov	r1, r6
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	47b8      	blx	r7
 800a1b4:	3001      	adds	r0, #1
 800a1b6:	f43f ae3c 	beq.w	8009e32 <_printf_float+0xb6>
 800a1ba:	f108 0801 	add.w	r8, r8, #1
 800a1be:	68e3      	ldr	r3, [r4, #12]
 800a1c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a1c2:	1a5b      	subs	r3, r3, r1
 800a1c4:	4543      	cmp	r3, r8
 800a1c6:	dcf0      	bgt.n	800a1aa <_printf_float+0x42e>
 800a1c8:	e6fd      	b.n	8009fc6 <_printf_float+0x24a>
 800a1ca:	f04f 0800 	mov.w	r8, #0
 800a1ce:	f104 0919 	add.w	r9, r4, #25
 800a1d2:	e7f4      	b.n	800a1be <_printf_float+0x442>

0800a1d4 <_printf_common>:
 800a1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1d8:	4616      	mov	r6, r2
 800a1da:	4698      	mov	r8, r3
 800a1dc:	688a      	ldr	r2, [r1, #8]
 800a1de:	690b      	ldr	r3, [r1, #16]
 800a1e0:	4607      	mov	r7, r0
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	bfb8      	it	lt
 800a1e6:	4613      	movlt	r3, r2
 800a1e8:	6033      	str	r3, [r6, #0]
 800a1ea:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a1f4:	b10a      	cbz	r2, 800a1fa <_printf_common+0x26>
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	6033      	str	r3, [r6, #0]
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	0699      	lsls	r1, r3, #26
 800a1fe:	bf42      	ittt	mi
 800a200:	6833      	ldrmi	r3, [r6, #0]
 800a202:	3302      	addmi	r3, #2
 800a204:	6033      	strmi	r3, [r6, #0]
 800a206:	6825      	ldr	r5, [r4, #0]
 800a208:	f015 0506 	ands.w	r5, r5, #6
 800a20c:	d106      	bne.n	800a21c <_printf_common+0x48>
 800a20e:	f104 0a19 	add.w	sl, r4, #25
 800a212:	68e3      	ldr	r3, [r4, #12]
 800a214:	6832      	ldr	r2, [r6, #0]
 800a216:	1a9b      	subs	r3, r3, r2
 800a218:	42ab      	cmp	r3, r5
 800a21a:	dc2b      	bgt.n	800a274 <_printf_common+0xa0>
 800a21c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a220:	6822      	ldr	r2, [r4, #0]
 800a222:	3b00      	subs	r3, #0
 800a224:	bf18      	it	ne
 800a226:	2301      	movne	r3, #1
 800a228:	0692      	lsls	r2, r2, #26
 800a22a:	d430      	bmi.n	800a28e <_printf_common+0xba>
 800a22c:	4641      	mov	r1, r8
 800a22e:	4638      	mov	r0, r7
 800a230:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a234:	47c8      	blx	r9
 800a236:	3001      	adds	r0, #1
 800a238:	d023      	beq.n	800a282 <_printf_common+0xae>
 800a23a:	6823      	ldr	r3, [r4, #0]
 800a23c:	6922      	ldr	r2, [r4, #16]
 800a23e:	f003 0306 	and.w	r3, r3, #6
 800a242:	2b04      	cmp	r3, #4
 800a244:	bf14      	ite	ne
 800a246:	2500      	movne	r5, #0
 800a248:	6833      	ldreq	r3, [r6, #0]
 800a24a:	f04f 0600 	mov.w	r6, #0
 800a24e:	bf08      	it	eq
 800a250:	68e5      	ldreq	r5, [r4, #12]
 800a252:	f104 041a 	add.w	r4, r4, #26
 800a256:	bf08      	it	eq
 800a258:	1aed      	subeq	r5, r5, r3
 800a25a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a25e:	bf08      	it	eq
 800a260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a264:	4293      	cmp	r3, r2
 800a266:	bfc4      	itt	gt
 800a268:	1a9b      	subgt	r3, r3, r2
 800a26a:	18ed      	addgt	r5, r5, r3
 800a26c:	42b5      	cmp	r5, r6
 800a26e:	d11a      	bne.n	800a2a6 <_printf_common+0xd2>
 800a270:	2000      	movs	r0, #0
 800a272:	e008      	b.n	800a286 <_printf_common+0xb2>
 800a274:	2301      	movs	r3, #1
 800a276:	4652      	mov	r2, sl
 800a278:	4641      	mov	r1, r8
 800a27a:	4638      	mov	r0, r7
 800a27c:	47c8      	blx	r9
 800a27e:	3001      	adds	r0, #1
 800a280:	d103      	bne.n	800a28a <_printf_common+0xb6>
 800a282:	f04f 30ff 	mov.w	r0, #4294967295
 800a286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a28a:	3501      	adds	r5, #1
 800a28c:	e7c1      	b.n	800a212 <_printf_common+0x3e>
 800a28e:	2030      	movs	r0, #48	@ 0x30
 800a290:	18e1      	adds	r1, r4, r3
 800a292:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a296:	1c5a      	adds	r2, r3, #1
 800a298:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a29c:	4422      	add	r2, r4
 800a29e:	3302      	adds	r3, #2
 800a2a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a2a4:	e7c2      	b.n	800a22c <_printf_common+0x58>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	4622      	mov	r2, r4
 800a2aa:	4641      	mov	r1, r8
 800a2ac:	4638      	mov	r0, r7
 800a2ae:	47c8      	blx	r9
 800a2b0:	3001      	adds	r0, #1
 800a2b2:	d0e6      	beq.n	800a282 <_printf_common+0xae>
 800a2b4:	3601      	adds	r6, #1
 800a2b6:	e7d9      	b.n	800a26c <_printf_common+0x98>

0800a2b8 <_printf_i>:
 800a2b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2bc:	7e0f      	ldrb	r7, [r1, #24]
 800a2be:	4691      	mov	r9, r2
 800a2c0:	2f78      	cmp	r7, #120	@ 0x78
 800a2c2:	4680      	mov	r8, r0
 800a2c4:	460c      	mov	r4, r1
 800a2c6:	469a      	mov	sl, r3
 800a2c8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a2ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a2ce:	d807      	bhi.n	800a2e0 <_printf_i+0x28>
 800a2d0:	2f62      	cmp	r7, #98	@ 0x62
 800a2d2:	d80a      	bhi.n	800a2ea <_printf_i+0x32>
 800a2d4:	2f00      	cmp	r7, #0
 800a2d6:	f000 80d3 	beq.w	800a480 <_printf_i+0x1c8>
 800a2da:	2f58      	cmp	r7, #88	@ 0x58
 800a2dc:	f000 80ba 	beq.w	800a454 <_printf_i+0x19c>
 800a2e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a2e8:	e03a      	b.n	800a360 <_printf_i+0xa8>
 800a2ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a2ee:	2b15      	cmp	r3, #21
 800a2f0:	d8f6      	bhi.n	800a2e0 <_printf_i+0x28>
 800a2f2:	a101      	add	r1, pc, #4	@ (adr r1, 800a2f8 <_printf_i+0x40>)
 800a2f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2f8:	0800a351 	.word	0x0800a351
 800a2fc:	0800a365 	.word	0x0800a365
 800a300:	0800a2e1 	.word	0x0800a2e1
 800a304:	0800a2e1 	.word	0x0800a2e1
 800a308:	0800a2e1 	.word	0x0800a2e1
 800a30c:	0800a2e1 	.word	0x0800a2e1
 800a310:	0800a365 	.word	0x0800a365
 800a314:	0800a2e1 	.word	0x0800a2e1
 800a318:	0800a2e1 	.word	0x0800a2e1
 800a31c:	0800a2e1 	.word	0x0800a2e1
 800a320:	0800a2e1 	.word	0x0800a2e1
 800a324:	0800a467 	.word	0x0800a467
 800a328:	0800a38f 	.word	0x0800a38f
 800a32c:	0800a421 	.word	0x0800a421
 800a330:	0800a2e1 	.word	0x0800a2e1
 800a334:	0800a2e1 	.word	0x0800a2e1
 800a338:	0800a489 	.word	0x0800a489
 800a33c:	0800a2e1 	.word	0x0800a2e1
 800a340:	0800a38f 	.word	0x0800a38f
 800a344:	0800a2e1 	.word	0x0800a2e1
 800a348:	0800a2e1 	.word	0x0800a2e1
 800a34c:	0800a429 	.word	0x0800a429
 800a350:	6833      	ldr	r3, [r6, #0]
 800a352:	1d1a      	adds	r2, r3, #4
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	6032      	str	r2, [r6, #0]
 800a358:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a35c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a360:	2301      	movs	r3, #1
 800a362:	e09e      	b.n	800a4a2 <_printf_i+0x1ea>
 800a364:	6833      	ldr	r3, [r6, #0]
 800a366:	6820      	ldr	r0, [r4, #0]
 800a368:	1d19      	adds	r1, r3, #4
 800a36a:	6031      	str	r1, [r6, #0]
 800a36c:	0606      	lsls	r6, r0, #24
 800a36e:	d501      	bpl.n	800a374 <_printf_i+0xbc>
 800a370:	681d      	ldr	r5, [r3, #0]
 800a372:	e003      	b.n	800a37c <_printf_i+0xc4>
 800a374:	0645      	lsls	r5, r0, #25
 800a376:	d5fb      	bpl.n	800a370 <_printf_i+0xb8>
 800a378:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a37c:	2d00      	cmp	r5, #0
 800a37e:	da03      	bge.n	800a388 <_printf_i+0xd0>
 800a380:	232d      	movs	r3, #45	@ 0x2d
 800a382:	426d      	negs	r5, r5
 800a384:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a388:	230a      	movs	r3, #10
 800a38a:	4859      	ldr	r0, [pc, #356]	@ (800a4f0 <_printf_i+0x238>)
 800a38c:	e011      	b.n	800a3b2 <_printf_i+0xfa>
 800a38e:	6821      	ldr	r1, [r4, #0]
 800a390:	6833      	ldr	r3, [r6, #0]
 800a392:	0608      	lsls	r0, r1, #24
 800a394:	f853 5b04 	ldr.w	r5, [r3], #4
 800a398:	d402      	bmi.n	800a3a0 <_printf_i+0xe8>
 800a39a:	0649      	lsls	r1, r1, #25
 800a39c:	bf48      	it	mi
 800a39e:	b2ad      	uxthmi	r5, r5
 800a3a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a3a2:	6033      	str	r3, [r6, #0]
 800a3a4:	bf14      	ite	ne
 800a3a6:	230a      	movne	r3, #10
 800a3a8:	2308      	moveq	r3, #8
 800a3aa:	4851      	ldr	r0, [pc, #324]	@ (800a4f0 <_printf_i+0x238>)
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a3b2:	6866      	ldr	r6, [r4, #4]
 800a3b4:	2e00      	cmp	r6, #0
 800a3b6:	bfa8      	it	ge
 800a3b8:	6821      	ldrge	r1, [r4, #0]
 800a3ba:	60a6      	str	r6, [r4, #8]
 800a3bc:	bfa4      	itt	ge
 800a3be:	f021 0104 	bicge.w	r1, r1, #4
 800a3c2:	6021      	strge	r1, [r4, #0]
 800a3c4:	b90d      	cbnz	r5, 800a3ca <_printf_i+0x112>
 800a3c6:	2e00      	cmp	r6, #0
 800a3c8:	d04b      	beq.n	800a462 <_printf_i+0x1aa>
 800a3ca:	4616      	mov	r6, r2
 800a3cc:	fbb5 f1f3 	udiv	r1, r5, r3
 800a3d0:	fb03 5711 	mls	r7, r3, r1, r5
 800a3d4:	5dc7      	ldrb	r7, [r0, r7]
 800a3d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a3da:	462f      	mov	r7, r5
 800a3dc:	42bb      	cmp	r3, r7
 800a3de:	460d      	mov	r5, r1
 800a3e0:	d9f4      	bls.n	800a3cc <_printf_i+0x114>
 800a3e2:	2b08      	cmp	r3, #8
 800a3e4:	d10b      	bne.n	800a3fe <_printf_i+0x146>
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	07df      	lsls	r7, r3, #31
 800a3ea:	d508      	bpl.n	800a3fe <_printf_i+0x146>
 800a3ec:	6923      	ldr	r3, [r4, #16]
 800a3ee:	6861      	ldr	r1, [r4, #4]
 800a3f0:	4299      	cmp	r1, r3
 800a3f2:	bfde      	ittt	le
 800a3f4:	2330      	movle	r3, #48	@ 0x30
 800a3f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a3fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a3fe:	1b92      	subs	r2, r2, r6
 800a400:	6122      	str	r2, [r4, #16]
 800a402:	464b      	mov	r3, r9
 800a404:	4621      	mov	r1, r4
 800a406:	4640      	mov	r0, r8
 800a408:	f8cd a000 	str.w	sl, [sp]
 800a40c:	aa03      	add	r2, sp, #12
 800a40e:	f7ff fee1 	bl	800a1d4 <_printf_common>
 800a412:	3001      	adds	r0, #1
 800a414:	d14a      	bne.n	800a4ac <_printf_i+0x1f4>
 800a416:	f04f 30ff 	mov.w	r0, #4294967295
 800a41a:	b004      	add	sp, #16
 800a41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a420:	6823      	ldr	r3, [r4, #0]
 800a422:	f043 0320 	orr.w	r3, r3, #32
 800a426:	6023      	str	r3, [r4, #0]
 800a428:	2778      	movs	r7, #120	@ 0x78
 800a42a:	4832      	ldr	r0, [pc, #200]	@ (800a4f4 <_printf_i+0x23c>)
 800a42c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a430:	6823      	ldr	r3, [r4, #0]
 800a432:	6831      	ldr	r1, [r6, #0]
 800a434:	061f      	lsls	r7, r3, #24
 800a436:	f851 5b04 	ldr.w	r5, [r1], #4
 800a43a:	d402      	bmi.n	800a442 <_printf_i+0x18a>
 800a43c:	065f      	lsls	r7, r3, #25
 800a43e:	bf48      	it	mi
 800a440:	b2ad      	uxthmi	r5, r5
 800a442:	6031      	str	r1, [r6, #0]
 800a444:	07d9      	lsls	r1, r3, #31
 800a446:	bf44      	itt	mi
 800a448:	f043 0320 	orrmi.w	r3, r3, #32
 800a44c:	6023      	strmi	r3, [r4, #0]
 800a44e:	b11d      	cbz	r5, 800a458 <_printf_i+0x1a0>
 800a450:	2310      	movs	r3, #16
 800a452:	e7ab      	b.n	800a3ac <_printf_i+0xf4>
 800a454:	4826      	ldr	r0, [pc, #152]	@ (800a4f0 <_printf_i+0x238>)
 800a456:	e7e9      	b.n	800a42c <_printf_i+0x174>
 800a458:	6823      	ldr	r3, [r4, #0]
 800a45a:	f023 0320 	bic.w	r3, r3, #32
 800a45e:	6023      	str	r3, [r4, #0]
 800a460:	e7f6      	b.n	800a450 <_printf_i+0x198>
 800a462:	4616      	mov	r6, r2
 800a464:	e7bd      	b.n	800a3e2 <_printf_i+0x12a>
 800a466:	6833      	ldr	r3, [r6, #0]
 800a468:	6825      	ldr	r5, [r4, #0]
 800a46a:	1d18      	adds	r0, r3, #4
 800a46c:	6961      	ldr	r1, [r4, #20]
 800a46e:	6030      	str	r0, [r6, #0]
 800a470:	062e      	lsls	r6, r5, #24
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	d501      	bpl.n	800a47a <_printf_i+0x1c2>
 800a476:	6019      	str	r1, [r3, #0]
 800a478:	e002      	b.n	800a480 <_printf_i+0x1c8>
 800a47a:	0668      	lsls	r0, r5, #25
 800a47c:	d5fb      	bpl.n	800a476 <_printf_i+0x1be>
 800a47e:	8019      	strh	r1, [r3, #0]
 800a480:	2300      	movs	r3, #0
 800a482:	4616      	mov	r6, r2
 800a484:	6123      	str	r3, [r4, #16]
 800a486:	e7bc      	b.n	800a402 <_printf_i+0x14a>
 800a488:	6833      	ldr	r3, [r6, #0]
 800a48a:	2100      	movs	r1, #0
 800a48c:	1d1a      	adds	r2, r3, #4
 800a48e:	6032      	str	r2, [r6, #0]
 800a490:	681e      	ldr	r6, [r3, #0]
 800a492:	6862      	ldr	r2, [r4, #4]
 800a494:	4630      	mov	r0, r6
 800a496:	f000 fcac 	bl	800adf2 <memchr>
 800a49a:	b108      	cbz	r0, 800a4a0 <_printf_i+0x1e8>
 800a49c:	1b80      	subs	r0, r0, r6
 800a49e:	6060      	str	r0, [r4, #4]
 800a4a0:	6863      	ldr	r3, [r4, #4]
 800a4a2:	6123      	str	r3, [r4, #16]
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4aa:	e7aa      	b.n	800a402 <_printf_i+0x14a>
 800a4ac:	4632      	mov	r2, r6
 800a4ae:	4649      	mov	r1, r9
 800a4b0:	4640      	mov	r0, r8
 800a4b2:	6923      	ldr	r3, [r4, #16]
 800a4b4:	47d0      	blx	sl
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	d0ad      	beq.n	800a416 <_printf_i+0x15e>
 800a4ba:	6823      	ldr	r3, [r4, #0]
 800a4bc:	079b      	lsls	r3, r3, #30
 800a4be:	d413      	bmi.n	800a4e8 <_printf_i+0x230>
 800a4c0:	68e0      	ldr	r0, [r4, #12]
 800a4c2:	9b03      	ldr	r3, [sp, #12]
 800a4c4:	4298      	cmp	r0, r3
 800a4c6:	bfb8      	it	lt
 800a4c8:	4618      	movlt	r0, r3
 800a4ca:	e7a6      	b.n	800a41a <_printf_i+0x162>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	4632      	mov	r2, r6
 800a4d0:	4649      	mov	r1, r9
 800a4d2:	4640      	mov	r0, r8
 800a4d4:	47d0      	blx	sl
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	d09d      	beq.n	800a416 <_printf_i+0x15e>
 800a4da:	3501      	adds	r5, #1
 800a4dc:	68e3      	ldr	r3, [r4, #12]
 800a4de:	9903      	ldr	r1, [sp, #12]
 800a4e0:	1a5b      	subs	r3, r3, r1
 800a4e2:	42ab      	cmp	r3, r5
 800a4e4:	dcf2      	bgt.n	800a4cc <_printf_i+0x214>
 800a4e6:	e7eb      	b.n	800a4c0 <_printf_i+0x208>
 800a4e8:	2500      	movs	r5, #0
 800a4ea:	f104 0619 	add.w	r6, r4, #25
 800a4ee:	e7f5      	b.n	800a4dc <_printf_i+0x224>
 800a4f0:	0800de91 	.word	0x0800de91
 800a4f4:	0800dea2 	.word	0x0800dea2

0800a4f8 <_scanf_float>:
 800a4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fc:	b087      	sub	sp, #28
 800a4fe:	9303      	str	r3, [sp, #12]
 800a500:	688b      	ldr	r3, [r1, #8]
 800a502:	4617      	mov	r7, r2
 800a504:	1e5a      	subs	r2, r3, #1
 800a506:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a50a:	bf82      	ittt	hi
 800a50c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a510:	eb03 0b05 	addhi.w	fp, r3, r5
 800a514:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a518:	460a      	mov	r2, r1
 800a51a:	f04f 0500 	mov.w	r5, #0
 800a51e:	bf88      	it	hi
 800a520:	608b      	strhi	r3, [r1, #8]
 800a522:	680b      	ldr	r3, [r1, #0]
 800a524:	4680      	mov	r8, r0
 800a526:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a52a:	f842 3b1c 	str.w	r3, [r2], #28
 800a52e:	460c      	mov	r4, r1
 800a530:	bf98      	it	ls
 800a532:	f04f 0b00 	movls.w	fp, #0
 800a536:	4616      	mov	r6, r2
 800a538:	46aa      	mov	sl, r5
 800a53a:	46a9      	mov	r9, r5
 800a53c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a540:	9201      	str	r2, [sp, #4]
 800a542:	9502      	str	r5, [sp, #8]
 800a544:	68a2      	ldr	r2, [r4, #8]
 800a546:	b152      	cbz	r2, 800a55e <_scanf_float+0x66>
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	2b4e      	cmp	r3, #78	@ 0x4e
 800a54e:	d865      	bhi.n	800a61c <_scanf_float+0x124>
 800a550:	2b40      	cmp	r3, #64	@ 0x40
 800a552:	d83d      	bhi.n	800a5d0 <_scanf_float+0xd8>
 800a554:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a558:	b2c8      	uxtb	r0, r1
 800a55a:	280e      	cmp	r0, #14
 800a55c:	d93b      	bls.n	800a5d6 <_scanf_float+0xde>
 800a55e:	f1b9 0f00 	cmp.w	r9, #0
 800a562:	d003      	beq.n	800a56c <_scanf_float+0x74>
 800a564:	6823      	ldr	r3, [r4, #0]
 800a566:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a56a:	6023      	str	r3, [r4, #0]
 800a56c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a570:	f1ba 0f01 	cmp.w	sl, #1
 800a574:	f200 8118 	bhi.w	800a7a8 <_scanf_float+0x2b0>
 800a578:	9b01      	ldr	r3, [sp, #4]
 800a57a:	429e      	cmp	r6, r3
 800a57c:	f200 8109 	bhi.w	800a792 <_scanf_float+0x29a>
 800a580:	2001      	movs	r0, #1
 800a582:	b007      	add	sp, #28
 800a584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a588:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a58c:	2a0d      	cmp	r2, #13
 800a58e:	d8e6      	bhi.n	800a55e <_scanf_float+0x66>
 800a590:	a101      	add	r1, pc, #4	@ (adr r1, 800a598 <_scanf_float+0xa0>)
 800a592:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a596:	bf00      	nop
 800a598:	0800a6df 	.word	0x0800a6df
 800a59c:	0800a55f 	.word	0x0800a55f
 800a5a0:	0800a55f 	.word	0x0800a55f
 800a5a4:	0800a55f 	.word	0x0800a55f
 800a5a8:	0800a73f 	.word	0x0800a73f
 800a5ac:	0800a717 	.word	0x0800a717
 800a5b0:	0800a55f 	.word	0x0800a55f
 800a5b4:	0800a55f 	.word	0x0800a55f
 800a5b8:	0800a6ed 	.word	0x0800a6ed
 800a5bc:	0800a55f 	.word	0x0800a55f
 800a5c0:	0800a55f 	.word	0x0800a55f
 800a5c4:	0800a55f 	.word	0x0800a55f
 800a5c8:	0800a55f 	.word	0x0800a55f
 800a5cc:	0800a6a5 	.word	0x0800a6a5
 800a5d0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a5d4:	e7da      	b.n	800a58c <_scanf_float+0x94>
 800a5d6:	290e      	cmp	r1, #14
 800a5d8:	d8c1      	bhi.n	800a55e <_scanf_float+0x66>
 800a5da:	a001      	add	r0, pc, #4	@ (adr r0, 800a5e0 <_scanf_float+0xe8>)
 800a5dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a5e0:	0800a695 	.word	0x0800a695
 800a5e4:	0800a55f 	.word	0x0800a55f
 800a5e8:	0800a695 	.word	0x0800a695
 800a5ec:	0800a72b 	.word	0x0800a72b
 800a5f0:	0800a55f 	.word	0x0800a55f
 800a5f4:	0800a63d 	.word	0x0800a63d
 800a5f8:	0800a67b 	.word	0x0800a67b
 800a5fc:	0800a67b 	.word	0x0800a67b
 800a600:	0800a67b 	.word	0x0800a67b
 800a604:	0800a67b 	.word	0x0800a67b
 800a608:	0800a67b 	.word	0x0800a67b
 800a60c:	0800a67b 	.word	0x0800a67b
 800a610:	0800a67b 	.word	0x0800a67b
 800a614:	0800a67b 	.word	0x0800a67b
 800a618:	0800a67b 	.word	0x0800a67b
 800a61c:	2b6e      	cmp	r3, #110	@ 0x6e
 800a61e:	d809      	bhi.n	800a634 <_scanf_float+0x13c>
 800a620:	2b60      	cmp	r3, #96	@ 0x60
 800a622:	d8b1      	bhi.n	800a588 <_scanf_float+0x90>
 800a624:	2b54      	cmp	r3, #84	@ 0x54
 800a626:	d07b      	beq.n	800a720 <_scanf_float+0x228>
 800a628:	2b59      	cmp	r3, #89	@ 0x59
 800a62a:	d198      	bne.n	800a55e <_scanf_float+0x66>
 800a62c:	2d07      	cmp	r5, #7
 800a62e:	d196      	bne.n	800a55e <_scanf_float+0x66>
 800a630:	2508      	movs	r5, #8
 800a632:	e02c      	b.n	800a68e <_scanf_float+0x196>
 800a634:	2b74      	cmp	r3, #116	@ 0x74
 800a636:	d073      	beq.n	800a720 <_scanf_float+0x228>
 800a638:	2b79      	cmp	r3, #121	@ 0x79
 800a63a:	e7f6      	b.n	800a62a <_scanf_float+0x132>
 800a63c:	6821      	ldr	r1, [r4, #0]
 800a63e:	05c8      	lsls	r0, r1, #23
 800a640:	d51b      	bpl.n	800a67a <_scanf_float+0x182>
 800a642:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a646:	6021      	str	r1, [r4, #0]
 800a648:	f109 0901 	add.w	r9, r9, #1
 800a64c:	f1bb 0f00 	cmp.w	fp, #0
 800a650:	d003      	beq.n	800a65a <_scanf_float+0x162>
 800a652:	3201      	adds	r2, #1
 800a654:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a658:	60a2      	str	r2, [r4, #8]
 800a65a:	68a3      	ldr	r3, [r4, #8]
 800a65c:	3b01      	subs	r3, #1
 800a65e:	60a3      	str	r3, [r4, #8]
 800a660:	6923      	ldr	r3, [r4, #16]
 800a662:	3301      	adds	r3, #1
 800a664:	6123      	str	r3, [r4, #16]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	3b01      	subs	r3, #1
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	607b      	str	r3, [r7, #4]
 800a66e:	f340 8087 	ble.w	800a780 <_scanf_float+0x288>
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	3301      	adds	r3, #1
 800a676:	603b      	str	r3, [r7, #0]
 800a678:	e764      	b.n	800a544 <_scanf_float+0x4c>
 800a67a:	eb1a 0105 	adds.w	r1, sl, r5
 800a67e:	f47f af6e 	bne.w	800a55e <_scanf_float+0x66>
 800a682:	460d      	mov	r5, r1
 800a684:	468a      	mov	sl, r1
 800a686:	6822      	ldr	r2, [r4, #0]
 800a688:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a68c:	6022      	str	r2, [r4, #0]
 800a68e:	f806 3b01 	strb.w	r3, [r6], #1
 800a692:	e7e2      	b.n	800a65a <_scanf_float+0x162>
 800a694:	6822      	ldr	r2, [r4, #0]
 800a696:	0610      	lsls	r0, r2, #24
 800a698:	f57f af61 	bpl.w	800a55e <_scanf_float+0x66>
 800a69c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a6a0:	6022      	str	r2, [r4, #0]
 800a6a2:	e7f4      	b.n	800a68e <_scanf_float+0x196>
 800a6a4:	f1ba 0f00 	cmp.w	sl, #0
 800a6a8:	d10e      	bne.n	800a6c8 <_scanf_float+0x1d0>
 800a6aa:	f1b9 0f00 	cmp.w	r9, #0
 800a6ae:	d10e      	bne.n	800a6ce <_scanf_float+0x1d6>
 800a6b0:	6822      	ldr	r2, [r4, #0]
 800a6b2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a6b6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a6ba:	d108      	bne.n	800a6ce <_scanf_float+0x1d6>
 800a6bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a6c0:	f04f 0a01 	mov.w	sl, #1
 800a6c4:	6022      	str	r2, [r4, #0]
 800a6c6:	e7e2      	b.n	800a68e <_scanf_float+0x196>
 800a6c8:	f1ba 0f02 	cmp.w	sl, #2
 800a6cc:	d055      	beq.n	800a77a <_scanf_float+0x282>
 800a6ce:	2d01      	cmp	r5, #1
 800a6d0:	d002      	beq.n	800a6d8 <_scanf_float+0x1e0>
 800a6d2:	2d04      	cmp	r5, #4
 800a6d4:	f47f af43 	bne.w	800a55e <_scanf_float+0x66>
 800a6d8:	3501      	adds	r5, #1
 800a6da:	b2ed      	uxtb	r5, r5
 800a6dc:	e7d7      	b.n	800a68e <_scanf_float+0x196>
 800a6de:	f1ba 0f01 	cmp.w	sl, #1
 800a6e2:	f47f af3c 	bne.w	800a55e <_scanf_float+0x66>
 800a6e6:	f04f 0a02 	mov.w	sl, #2
 800a6ea:	e7d0      	b.n	800a68e <_scanf_float+0x196>
 800a6ec:	b97d      	cbnz	r5, 800a70e <_scanf_float+0x216>
 800a6ee:	f1b9 0f00 	cmp.w	r9, #0
 800a6f2:	f47f af37 	bne.w	800a564 <_scanf_float+0x6c>
 800a6f6:	6822      	ldr	r2, [r4, #0]
 800a6f8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a6fc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a700:	f040 8103 	bne.w	800a90a <_scanf_float+0x412>
 800a704:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a708:	2501      	movs	r5, #1
 800a70a:	6022      	str	r2, [r4, #0]
 800a70c:	e7bf      	b.n	800a68e <_scanf_float+0x196>
 800a70e:	2d03      	cmp	r5, #3
 800a710:	d0e2      	beq.n	800a6d8 <_scanf_float+0x1e0>
 800a712:	2d05      	cmp	r5, #5
 800a714:	e7de      	b.n	800a6d4 <_scanf_float+0x1dc>
 800a716:	2d02      	cmp	r5, #2
 800a718:	f47f af21 	bne.w	800a55e <_scanf_float+0x66>
 800a71c:	2503      	movs	r5, #3
 800a71e:	e7b6      	b.n	800a68e <_scanf_float+0x196>
 800a720:	2d06      	cmp	r5, #6
 800a722:	f47f af1c 	bne.w	800a55e <_scanf_float+0x66>
 800a726:	2507      	movs	r5, #7
 800a728:	e7b1      	b.n	800a68e <_scanf_float+0x196>
 800a72a:	6822      	ldr	r2, [r4, #0]
 800a72c:	0591      	lsls	r1, r2, #22
 800a72e:	f57f af16 	bpl.w	800a55e <_scanf_float+0x66>
 800a732:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a736:	6022      	str	r2, [r4, #0]
 800a738:	f8cd 9008 	str.w	r9, [sp, #8]
 800a73c:	e7a7      	b.n	800a68e <_scanf_float+0x196>
 800a73e:	6822      	ldr	r2, [r4, #0]
 800a740:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a744:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a748:	d006      	beq.n	800a758 <_scanf_float+0x260>
 800a74a:	0550      	lsls	r0, r2, #21
 800a74c:	f57f af07 	bpl.w	800a55e <_scanf_float+0x66>
 800a750:	f1b9 0f00 	cmp.w	r9, #0
 800a754:	f000 80d9 	beq.w	800a90a <_scanf_float+0x412>
 800a758:	0591      	lsls	r1, r2, #22
 800a75a:	bf58      	it	pl
 800a75c:	9902      	ldrpl	r1, [sp, #8]
 800a75e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a762:	bf58      	it	pl
 800a764:	eba9 0101 	subpl.w	r1, r9, r1
 800a768:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a76c:	f04f 0900 	mov.w	r9, #0
 800a770:	bf58      	it	pl
 800a772:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a776:	6022      	str	r2, [r4, #0]
 800a778:	e789      	b.n	800a68e <_scanf_float+0x196>
 800a77a:	f04f 0a03 	mov.w	sl, #3
 800a77e:	e786      	b.n	800a68e <_scanf_float+0x196>
 800a780:	4639      	mov	r1, r7
 800a782:	4640      	mov	r0, r8
 800a784:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a788:	4798      	blx	r3
 800a78a:	2800      	cmp	r0, #0
 800a78c:	f43f aeda 	beq.w	800a544 <_scanf_float+0x4c>
 800a790:	e6e5      	b.n	800a55e <_scanf_float+0x66>
 800a792:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a796:	463a      	mov	r2, r7
 800a798:	4640      	mov	r0, r8
 800a79a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a79e:	4798      	blx	r3
 800a7a0:	6923      	ldr	r3, [r4, #16]
 800a7a2:	3b01      	subs	r3, #1
 800a7a4:	6123      	str	r3, [r4, #16]
 800a7a6:	e6e7      	b.n	800a578 <_scanf_float+0x80>
 800a7a8:	1e6b      	subs	r3, r5, #1
 800a7aa:	2b06      	cmp	r3, #6
 800a7ac:	d824      	bhi.n	800a7f8 <_scanf_float+0x300>
 800a7ae:	2d02      	cmp	r5, #2
 800a7b0:	d836      	bhi.n	800a820 <_scanf_float+0x328>
 800a7b2:	9b01      	ldr	r3, [sp, #4]
 800a7b4:	429e      	cmp	r6, r3
 800a7b6:	f67f aee3 	bls.w	800a580 <_scanf_float+0x88>
 800a7ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a7be:	463a      	mov	r2, r7
 800a7c0:	4640      	mov	r0, r8
 800a7c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a7c6:	4798      	blx	r3
 800a7c8:	6923      	ldr	r3, [r4, #16]
 800a7ca:	3b01      	subs	r3, #1
 800a7cc:	6123      	str	r3, [r4, #16]
 800a7ce:	e7f0      	b.n	800a7b2 <_scanf_float+0x2ba>
 800a7d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a7d4:	463a      	mov	r2, r7
 800a7d6:	4640      	mov	r0, r8
 800a7d8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a7dc:	4798      	blx	r3
 800a7de:	6923      	ldr	r3, [r4, #16]
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	6123      	str	r3, [r4, #16]
 800a7e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7e8:	fa5f fa8a 	uxtb.w	sl, sl
 800a7ec:	f1ba 0f02 	cmp.w	sl, #2
 800a7f0:	d1ee      	bne.n	800a7d0 <_scanf_float+0x2d8>
 800a7f2:	3d03      	subs	r5, #3
 800a7f4:	b2ed      	uxtb	r5, r5
 800a7f6:	1b76      	subs	r6, r6, r5
 800a7f8:	6823      	ldr	r3, [r4, #0]
 800a7fa:	05da      	lsls	r2, r3, #23
 800a7fc:	d530      	bpl.n	800a860 <_scanf_float+0x368>
 800a7fe:	055b      	lsls	r3, r3, #21
 800a800:	d511      	bpl.n	800a826 <_scanf_float+0x32e>
 800a802:	9b01      	ldr	r3, [sp, #4]
 800a804:	429e      	cmp	r6, r3
 800a806:	f67f aebb 	bls.w	800a580 <_scanf_float+0x88>
 800a80a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a80e:	463a      	mov	r2, r7
 800a810:	4640      	mov	r0, r8
 800a812:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a816:	4798      	blx	r3
 800a818:	6923      	ldr	r3, [r4, #16]
 800a81a:	3b01      	subs	r3, #1
 800a81c:	6123      	str	r3, [r4, #16]
 800a81e:	e7f0      	b.n	800a802 <_scanf_float+0x30a>
 800a820:	46aa      	mov	sl, r5
 800a822:	46b3      	mov	fp, r6
 800a824:	e7de      	b.n	800a7e4 <_scanf_float+0x2ec>
 800a826:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a82a:	6923      	ldr	r3, [r4, #16]
 800a82c:	2965      	cmp	r1, #101	@ 0x65
 800a82e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a832:	f106 35ff 	add.w	r5, r6, #4294967295
 800a836:	6123      	str	r3, [r4, #16]
 800a838:	d00c      	beq.n	800a854 <_scanf_float+0x35c>
 800a83a:	2945      	cmp	r1, #69	@ 0x45
 800a83c:	d00a      	beq.n	800a854 <_scanf_float+0x35c>
 800a83e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a842:	463a      	mov	r2, r7
 800a844:	4640      	mov	r0, r8
 800a846:	4798      	blx	r3
 800a848:	6923      	ldr	r3, [r4, #16]
 800a84a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a84e:	3b01      	subs	r3, #1
 800a850:	1eb5      	subs	r5, r6, #2
 800a852:	6123      	str	r3, [r4, #16]
 800a854:	463a      	mov	r2, r7
 800a856:	4640      	mov	r0, r8
 800a858:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a85c:	4798      	blx	r3
 800a85e:	462e      	mov	r6, r5
 800a860:	6822      	ldr	r2, [r4, #0]
 800a862:	f012 0210 	ands.w	r2, r2, #16
 800a866:	d001      	beq.n	800a86c <_scanf_float+0x374>
 800a868:	2000      	movs	r0, #0
 800a86a:	e68a      	b.n	800a582 <_scanf_float+0x8a>
 800a86c:	7032      	strb	r2, [r6, #0]
 800a86e:	6823      	ldr	r3, [r4, #0]
 800a870:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a878:	d11c      	bne.n	800a8b4 <_scanf_float+0x3bc>
 800a87a:	9b02      	ldr	r3, [sp, #8]
 800a87c:	454b      	cmp	r3, r9
 800a87e:	eba3 0209 	sub.w	r2, r3, r9
 800a882:	d123      	bne.n	800a8cc <_scanf_float+0x3d4>
 800a884:	2200      	movs	r2, #0
 800a886:	4640      	mov	r0, r8
 800a888:	9901      	ldr	r1, [sp, #4]
 800a88a:	f7ff f941 	bl	8009b10 <_strtod_r>
 800a88e:	9b03      	ldr	r3, [sp, #12]
 800a890:	6825      	ldr	r5, [r4, #0]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f015 0f02 	tst.w	r5, #2
 800a898:	4606      	mov	r6, r0
 800a89a:	460f      	mov	r7, r1
 800a89c:	f103 0204 	add.w	r2, r3, #4
 800a8a0:	d01f      	beq.n	800a8e2 <_scanf_float+0x3ea>
 800a8a2:	9903      	ldr	r1, [sp, #12]
 800a8a4:	600a      	str	r2, [r1, #0]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	e9c3 6700 	strd	r6, r7, [r3]
 800a8ac:	68e3      	ldr	r3, [r4, #12]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	60e3      	str	r3, [r4, #12]
 800a8b2:	e7d9      	b.n	800a868 <_scanf_float+0x370>
 800a8b4:	9b04      	ldr	r3, [sp, #16]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d0e4      	beq.n	800a884 <_scanf_float+0x38c>
 800a8ba:	9905      	ldr	r1, [sp, #20]
 800a8bc:	230a      	movs	r3, #10
 800a8be:	4640      	mov	r0, r8
 800a8c0:	3101      	adds	r1, #1
 800a8c2:	f7ff f9b1 	bl	8009c28 <_strtol_r>
 800a8c6:	9b04      	ldr	r3, [sp, #16]
 800a8c8:	9e05      	ldr	r6, [sp, #20]
 800a8ca:	1ac2      	subs	r2, r0, r3
 800a8cc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a8d0:	429e      	cmp	r6, r3
 800a8d2:	bf28      	it	cs
 800a8d4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a8d8:	4630      	mov	r0, r6
 800a8da:	490d      	ldr	r1, [pc, #52]	@ (800a910 <_scanf_float+0x418>)
 800a8dc:	f000 f912 	bl	800ab04 <siprintf>
 800a8e0:	e7d0      	b.n	800a884 <_scanf_float+0x38c>
 800a8e2:	076d      	lsls	r5, r5, #29
 800a8e4:	d4dd      	bmi.n	800a8a2 <_scanf_float+0x3aa>
 800a8e6:	9d03      	ldr	r5, [sp, #12]
 800a8e8:	602a      	str	r2, [r5, #0]
 800a8ea:	681d      	ldr	r5, [r3, #0]
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	f7f6 f896 	bl	8000a20 <__aeabi_dcmpun>
 800a8f4:	b120      	cbz	r0, 800a900 <_scanf_float+0x408>
 800a8f6:	4807      	ldr	r0, [pc, #28]	@ (800a914 <_scanf_float+0x41c>)
 800a8f8:	f000 fa9e 	bl	800ae38 <nanf>
 800a8fc:	6028      	str	r0, [r5, #0]
 800a8fe:	e7d5      	b.n	800a8ac <_scanf_float+0x3b4>
 800a900:	4630      	mov	r0, r6
 800a902:	4639      	mov	r1, r7
 800a904:	f7f6 f8ea 	bl	8000adc <__aeabi_d2f>
 800a908:	e7f8      	b.n	800a8fc <_scanf_float+0x404>
 800a90a:	f04f 0900 	mov.w	r9, #0
 800a90e:	e62d      	b.n	800a56c <_scanf_float+0x74>
 800a910:	0800deb3 	.word	0x0800deb3
 800a914:	0800d9be 	.word	0x0800d9be

0800a918 <std>:
 800a918:	2300      	movs	r3, #0
 800a91a:	b510      	push	{r4, lr}
 800a91c:	4604      	mov	r4, r0
 800a91e:	e9c0 3300 	strd	r3, r3, [r0]
 800a922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a926:	6083      	str	r3, [r0, #8]
 800a928:	8181      	strh	r1, [r0, #12]
 800a92a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a92c:	81c2      	strh	r2, [r0, #14]
 800a92e:	6183      	str	r3, [r0, #24]
 800a930:	4619      	mov	r1, r3
 800a932:	2208      	movs	r2, #8
 800a934:	305c      	adds	r0, #92	@ 0x5c
 800a936:	f000 f958 	bl	800abea <memset>
 800a93a:	4b0d      	ldr	r3, [pc, #52]	@ (800a970 <std+0x58>)
 800a93c:	6224      	str	r4, [r4, #32]
 800a93e:	6263      	str	r3, [r4, #36]	@ 0x24
 800a940:	4b0c      	ldr	r3, [pc, #48]	@ (800a974 <std+0x5c>)
 800a942:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a944:	4b0c      	ldr	r3, [pc, #48]	@ (800a978 <std+0x60>)
 800a946:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a948:	4b0c      	ldr	r3, [pc, #48]	@ (800a97c <std+0x64>)
 800a94a:	6323      	str	r3, [r4, #48]	@ 0x30
 800a94c:	4b0c      	ldr	r3, [pc, #48]	@ (800a980 <std+0x68>)
 800a94e:	429c      	cmp	r4, r3
 800a950:	d006      	beq.n	800a960 <std+0x48>
 800a952:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a956:	4294      	cmp	r4, r2
 800a958:	d002      	beq.n	800a960 <std+0x48>
 800a95a:	33d0      	adds	r3, #208	@ 0xd0
 800a95c:	429c      	cmp	r4, r3
 800a95e:	d105      	bne.n	800a96c <std+0x54>
 800a960:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a968:	f000 ba38 	b.w	800addc <__retarget_lock_init_recursive>
 800a96c:	bd10      	pop	{r4, pc}
 800a96e:	bf00      	nop
 800a970:	0800ab45 	.word	0x0800ab45
 800a974:	0800ab67 	.word	0x0800ab67
 800a978:	0800ab9f 	.word	0x0800ab9f
 800a97c:	0800abc3 	.word	0x0800abc3
 800a980:	20000bbc 	.word	0x20000bbc

0800a984 <stdio_exit_handler>:
 800a984:	4a02      	ldr	r2, [pc, #8]	@ (800a990 <stdio_exit_handler+0xc>)
 800a986:	4903      	ldr	r1, [pc, #12]	@ (800a994 <stdio_exit_handler+0x10>)
 800a988:	4803      	ldr	r0, [pc, #12]	@ (800a998 <stdio_exit_handler+0x14>)
 800a98a:	f000 b869 	b.w	800aa60 <_fwalk_sglue>
 800a98e:	bf00      	nop
 800a990:	20000010 	.word	0x20000010
 800a994:	0800d19d 	.word	0x0800d19d
 800a998:	2000018c 	.word	0x2000018c

0800a99c <cleanup_stdio>:
 800a99c:	6841      	ldr	r1, [r0, #4]
 800a99e:	4b0c      	ldr	r3, [pc, #48]	@ (800a9d0 <cleanup_stdio+0x34>)
 800a9a0:	b510      	push	{r4, lr}
 800a9a2:	4299      	cmp	r1, r3
 800a9a4:	4604      	mov	r4, r0
 800a9a6:	d001      	beq.n	800a9ac <cleanup_stdio+0x10>
 800a9a8:	f002 fbf8 	bl	800d19c <_fflush_r>
 800a9ac:	68a1      	ldr	r1, [r4, #8]
 800a9ae:	4b09      	ldr	r3, [pc, #36]	@ (800a9d4 <cleanup_stdio+0x38>)
 800a9b0:	4299      	cmp	r1, r3
 800a9b2:	d002      	beq.n	800a9ba <cleanup_stdio+0x1e>
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f002 fbf1 	bl	800d19c <_fflush_r>
 800a9ba:	68e1      	ldr	r1, [r4, #12]
 800a9bc:	4b06      	ldr	r3, [pc, #24]	@ (800a9d8 <cleanup_stdio+0x3c>)
 800a9be:	4299      	cmp	r1, r3
 800a9c0:	d004      	beq.n	800a9cc <cleanup_stdio+0x30>
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9c8:	f002 bbe8 	b.w	800d19c <_fflush_r>
 800a9cc:	bd10      	pop	{r4, pc}
 800a9ce:	bf00      	nop
 800a9d0:	20000bbc 	.word	0x20000bbc
 800a9d4:	20000c24 	.word	0x20000c24
 800a9d8:	20000c8c 	.word	0x20000c8c

0800a9dc <global_stdio_init.part.0>:
 800a9dc:	b510      	push	{r4, lr}
 800a9de:	4b0b      	ldr	r3, [pc, #44]	@ (800aa0c <global_stdio_init.part.0+0x30>)
 800a9e0:	4c0b      	ldr	r4, [pc, #44]	@ (800aa10 <global_stdio_init.part.0+0x34>)
 800a9e2:	4a0c      	ldr	r2, [pc, #48]	@ (800aa14 <global_stdio_init.part.0+0x38>)
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	601a      	str	r2, [r3, #0]
 800a9e8:	2104      	movs	r1, #4
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f7ff ff94 	bl	800a918 <std>
 800a9f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	2109      	movs	r1, #9
 800a9f8:	f7ff ff8e 	bl	800a918 <std>
 800a9fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aa00:	2202      	movs	r2, #2
 800aa02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa06:	2112      	movs	r1, #18
 800aa08:	f7ff bf86 	b.w	800a918 <std>
 800aa0c:	20000cf4 	.word	0x20000cf4
 800aa10:	20000bbc 	.word	0x20000bbc
 800aa14:	0800a985 	.word	0x0800a985

0800aa18 <__sfp_lock_acquire>:
 800aa18:	4801      	ldr	r0, [pc, #4]	@ (800aa20 <__sfp_lock_acquire+0x8>)
 800aa1a:	f000 b9e0 	b.w	800adde <__retarget_lock_acquire_recursive>
 800aa1e:	bf00      	nop
 800aa20:	20000cfd 	.word	0x20000cfd

0800aa24 <__sfp_lock_release>:
 800aa24:	4801      	ldr	r0, [pc, #4]	@ (800aa2c <__sfp_lock_release+0x8>)
 800aa26:	f000 b9db 	b.w	800ade0 <__retarget_lock_release_recursive>
 800aa2a:	bf00      	nop
 800aa2c:	20000cfd 	.word	0x20000cfd

0800aa30 <__sinit>:
 800aa30:	b510      	push	{r4, lr}
 800aa32:	4604      	mov	r4, r0
 800aa34:	f7ff fff0 	bl	800aa18 <__sfp_lock_acquire>
 800aa38:	6a23      	ldr	r3, [r4, #32]
 800aa3a:	b11b      	cbz	r3, 800aa44 <__sinit+0x14>
 800aa3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa40:	f7ff bff0 	b.w	800aa24 <__sfp_lock_release>
 800aa44:	4b04      	ldr	r3, [pc, #16]	@ (800aa58 <__sinit+0x28>)
 800aa46:	6223      	str	r3, [r4, #32]
 800aa48:	4b04      	ldr	r3, [pc, #16]	@ (800aa5c <__sinit+0x2c>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d1f5      	bne.n	800aa3c <__sinit+0xc>
 800aa50:	f7ff ffc4 	bl	800a9dc <global_stdio_init.part.0>
 800aa54:	e7f2      	b.n	800aa3c <__sinit+0xc>
 800aa56:	bf00      	nop
 800aa58:	0800a99d 	.word	0x0800a99d
 800aa5c:	20000cf4 	.word	0x20000cf4

0800aa60 <_fwalk_sglue>:
 800aa60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa64:	4607      	mov	r7, r0
 800aa66:	4688      	mov	r8, r1
 800aa68:	4614      	mov	r4, r2
 800aa6a:	2600      	movs	r6, #0
 800aa6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa70:	f1b9 0901 	subs.w	r9, r9, #1
 800aa74:	d505      	bpl.n	800aa82 <_fwalk_sglue+0x22>
 800aa76:	6824      	ldr	r4, [r4, #0]
 800aa78:	2c00      	cmp	r4, #0
 800aa7a:	d1f7      	bne.n	800aa6c <_fwalk_sglue+0xc>
 800aa7c:	4630      	mov	r0, r6
 800aa7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa82:	89ab      	ldrh	r3, [r5, #12]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d907      	bls.n	800aa98 <_fwalk_sglue+0x38>
 800aa88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	d003      	beq.n	800aa98 <_fwalk_sglue+0x38>
 800aa90:	4629      	mov	r1, r5
 800aa92:	4638      	mov	r0, r7
 800aa94:	47c0      	blx	r8
 800aa96:	4306      	orrs	r6, r0
 800aa98:	3568      	adds	r5, #104	@ 0x68
 800aa9a:	e7e9      	b.n	800aa70 <_fwalk_sglue+0x10>

0800aa9c <sniprintf>:
 800aa9c:	b40c      	push	{r2, r3}
 800aa9e:	b530      	push	{r4, r5, lr}
 800aaa0:	4b17      	ldr	r3, [pc, #92]	@ (800ab00 <sniprintf+0x64>)
 800aaa2:	1e0c      	subs	r4, r1, #0
 800aaa4:	681d      	ldr	r5, [r3, #0]
 800aaa6:	b09d      	sub	sp, #116	@ 0x74
 800aaa8:	da08      	bge.n	800aabc <sniprintf+0x20>
 800aaaa:	238b      	movs	r3, #139	@ 0x8b
 800aaac:	f04f 30ff 	mov.w	r0, #4294967295
 800aab0:	602b      	str	r3, [r5, #0]
 800aab2:	b01d      	add	sp, #116	@ 0x74
 800aab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aab8:	b002      	add	sp, #8
 800aaba:	4770      	bx	lr
 800aabc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800aac0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aac4:	bf0c      	ite	eq
 800aac6:	4623      	moveq	r3, r4
 800aac8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aacc:	9304      	str	r3, [sp, #16]
 800aace:	9307      	str	r3, [sp, #28]
 800aad0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aad4:	9002      	str	r0, [sp, #8]
 800aad6:	9006      	str	r0, [sp, #24]
 800aad8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aadc:	4628      	mov	r0, r5
 800aade:	ab21      	add	r3, sp, #132	@ 0x84
 800aae0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800aae2:	a902      	add	r1, sp, #8
 800aae4:	9301      	str	r3, [sp, #4]
 800aae6:	f002 f89d 	bl	800cc24 <_svfiprintf_r>
 800aaea:	1c43      	adds	r3, r0, #1
 800aaec:	bfbc      	itt	lt
 800aaee:	238b      	movlt	r3, #139	@ 0x8b
 800aaf0:	602b      	strlt	r3, [r5, #0]
 800aaf2:	2c00      	cmp	r4, #0
 800aaf4:	d0dd      	beq.n	800aab2 <sniprintf+0x16>
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	9b02      	ldr	r3, [sp, #8]
 800aafa:	701a      	strb	r2, [r3, #0]
 800aafc:	e7d9      	b.n	800aab2 <sniprintf+0x16>
 800aafe:	bf00      	nop
 800ab00:	20000188 	.word	0x20000188

0800ab04 <siprintf>:
 800ab04:	b40e      	push	{r1, r2, r3}
 800ab06:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ab0a:	b500      	push	{lr}
 800ab0c:	b09c      	sub	sp, #112	@ 0x70
 800ab0e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ab10:	9002      	str	r0, [sp, #8]
 800ab12:	9006      	str	r0, [sp, #24]
 800ab14:	9107      	str	r1, [sp, #28]
 800ab16:	9104      	str	r1, [sp, #16]
 800ab18:	4808      	ldr	r0, [pc, #32]	@ (800ab3c <siprintf+0x38>)
 800ab1a:	4909      	ldr	r1, [pc, #36]	@ (800ab40 <siprintf+0x3c>)
 800ab1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab20:	9105      	str	r1, [sp, #20]
 800ab22:	6800      	ldr	r0, [r0, #0]
 800ab24:	a902      	add	r1, sp, #8
 800ab26:	9301      	str	r3, [sp, #4]
 800ab28:	f002 f87c 	bl	800cc24 <_svfiprintf_r>
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	9b02      	ldr	r3, [sp, #8]
 800ab30:	701a      	strb	r2, [r3, #0]
 800ab32:	b01c      	add	sp, #112	@ 0x70
 800ab34:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab38:	b003      	add	sp, #12
 800ab3a:	4770      	bx	lr
 800ab3c:	20000188 	.word	0x20000188
 800ab40:	ffff0208 	.word	0xffff0208

0800ab44 <__sread>:
 800ab44:	b510      	push	{r4, lr}
 800ab46:	460c      	mov	r4, r1
 800ab48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab4c:	f000 f8e8 	bl	800ad20 <_read_r>
 800ab50:	2800      	cmp	r0, #0
 800ab52:	bfab      	itete	ge
 800ab54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ab56:	89a3      	ldrhlt	r3, [r4, #12]
 800ab58:	181b      	addge	r3, r3, r0
 800ab5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ab5e:	bfac      	ite	ge
 800ab60:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ab62:	81a3      	strhlt	r3, [r4, #12]
 800ab64:	bd10      	pop	{r4, pc}

0800ab66 <__swrite>:
 800ab66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab6a:	461f      	mov	r7, r3
 800ab6c:	898b      	ldrh	r3, [r1, #12]
 800ab6e:	4605      	mov	r5, r0
 800ab70:	05db      	lsls	r3, r3, #23
 800ab72:	460c      	mov	r4, r1
 800ab74:	4616      	mov	r6, r2
 800ab76:	d505      	bpl.n	800ab84 <__swrite+0x1e>
 800ab78:	2302      	movs	r3, #2
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab80:	f000 f8bc 	bl	800acfc <_lseek_r>
 800ab84:	89a3      	ldrh	r3, [r4, #12]
 800ab86:	4632      	mov	r2, r6
 800ab88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab8c:	81a3      	strh	r3, [r4, #12]
 800ab8e:	4628      	mov	r0, r5
 800ab90:	463b      	mov	r3, r7
 800ab92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab9a:	f000 b8e3 	b.w	800ad64 <_write_r>

0800ab9e <__sseek>:
 800ab9e:	b510      	push	{r4, lr}
 800aba0:	460c      	mov	r4, r1
 800aba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aba6:	f000 f8a9 	bl	800acfc <_lseek_r>
 800abaa:	1c43      	adds	r3, r0, #1
 800abac:	89a3      	ldrh	r3, [r4, #12]
 800abae:	bf15      	itete	ne
 800abb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800abb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800abb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800abba:	81a3      	strheq	r3, [r4, #12]
 800abbc:	bf18      	it	ne
 800abbe:	81a3      	strhne	r3, [r4, #12]
 800abc0:	bd10      	pop	{r4, pc}

0800abc2 <__sclose>:
 800abc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abc6:	f000 b889 	b.w	800acdc <_close_r>

0800abca <memcmp>:
 800abca:	b510      	push	{r4, lr}
 800abcc:	3901      	subs	r1, #1
 800abce:	4402      	add	r2, r0
 800abd0:	4290      	cmp	r0, r2
 800abd2:	d101      	bne.n	800abd8 <memcmp+0xe>
 800abd4:	2000      	movs	r0, #0
 800abd6:	e005      	b.n	800abe4 <memcmp+0x1a>
 800abd8:	7803      	ldrb	r3, [r0, #0]
 800abda:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800abde:	42a3      	cmp	r3, r4
 800abe0:	d001      	beq.n	800abe6 <memcmp+0x1c>
 800abe2:	1b18      	subs	r0, r3, r4
 800abe4:	bd10      	pop	{r4, pc}
 800abe6:	3001      	adds	r0, #1
 800abe8:	e7f2      	b.n	800abd0 <memcmp+0x6>

0800abea <memset>:
 800abea:	4603      	mov	r3, r0
 800abec:	4402      	add	r2, r0
 800abee:	4293      	cmp	r3, r2
 800abf0:	d100      	bne.n	800abf4 <memset+0xa>
 800abf2:	4770      	bx	lr
 800abf4:	f803 1b01 	strb.w	r1, [r3], #1
 800abf8:	e7f9      	b.n	800abee <memset+0x4>

0800abfa <strcat>:
 800abfa:	4602      	mov	r2, r0
 800abfc:	b510      	push	{r4, lr}
 800abfe:	7814      	ldrb	r4, [r2, #0]
 800ac00:	4613      	mov	r3, r2
 800ac02:	3201      	adds	r2, #1
 800ac04:	2c00      	cmp	r4, #0
 800ac06:	d1fa      	bne.n	800abfe <strcat+0x4>
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac12:	2a00      	cmp	r2, #0
 800ac14:	d1f9      	bne.n	800ac0a <strcat+0x10>
 800ac16:	bd10      	pop	{r4, pc}

0800ac18 <strchr>:
 800ac18:	4603      	mov	r3, r0
 800ac1a:	b2c9      	uxtb	r1, r1
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac22:	b112      	cbz	r2, 800ac2a <strchr+0x12>
 800ac24:	428a      	cmp	r2, r1
 800ac26:	d1f9      	bne.n	800ac1c <strchr+0x4>
 800ac28:	4770      	bx	lr
 800ac2a:	2900      	cmp	r1, #0
 800ac2c:	bf18      	it	ne
 800ac2e:	2000      	movne	r0, #0
 800ac30:	4770      	bx	lr

0800ac32 <strncmp>:
 800ac32:	b510      	push	{r4, lr}
 800ac34:	b16a      	cbz	r2, 800ac52 <strncmp+0x20>
 800ac36:	3901      	subs	r1, #1
 800ac38:	1884      	adds	r4, r0, r2
 800ac3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac3e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d103      	bne.n	800ac4e <strncmp+0x1c>
 800ac46:	42a0      	cmp	r0, r4
 800ac48:	d001      	beq.n	800ac4e <strncmp+0x1c>
 800ac4a:	2a00      	cmp	r2, #0
 800ac4c:	d1f5      	bne.n	800ac3a <strncmp+0x8>
 800ac4e:	1ad0      	subs	r0, r2, r3
 800ac50:	bd10      	pop	{r4, pc}
 800ac52:	4610      	mov	r0, r2
 800ac54:	e7fc      	b.n	800ac50 <strncmp+0x1e>

0800ac56 <strncpy>:
 800ac56:	4603      	mov	r3, r0
 800ac58:	b510      	push	{r4, lr}
 800ac5a:	3901      	subs	r1, #1
 800ac5c:	b132      	cbz	r2, 800ac6c <strncpy+0x16>
 800ac5e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ac62:	3a01      	subs	r2, #1
 800ac64:	f803 4b01 	strb.w	r4, [r3], #1
 800ac68:	2c00      	cmp	r4, #0
 800ac6a:	d1f7      	bne.n	800ac5c <strncpy+0x6>
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	441a      	add	r2, r3
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d100      	bne.n	800ac76 <strncpy+0x20>
 800ac74:	bd10      	pop	{r4, pc}
 800ac76:	f803 1b01 	strb.w	r1, [r3], #1
 800ac7a:	e7f9      	b.n	800ac70 <strncpy+0x1a>

0800ac7c <__strtok_r>:
 800ac7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac7e:	4604      	mov	r4, r0
 800ac80:	b908      	cbnz	r0, 800ac86 <__strtok_r+0xa>
 800ac82:	6814      	ldr	r4, [r2, #0]
 800ac84:	b144      	cbz	r4, 800ac98 <__strtok_r+0x1c>
 800ac86:	460f      	mov	r7, r1
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ac8e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ac92:	b91e      	cbnz	r6, 800ac9c <__strtok_r+0x20>
 800ac94:	b965      	cbnz	r5, 800acb0 <__strtok_r+0x34>
 800ac96:	6015      	str	r5, [r2, #0]
 800ac98:	2000      	movs	r0, #0
 800ac9a:	e005      	b.n	800aca8 <__strtok_r+0x2c>
 800ac9c:	42b5      	cmp	r5, r6
 800ac9e:	d1f6      	bne.n	800ac8e <__strtok_r+0x12>
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1f0      	bne.n	800ac86 <__strtok_r+0xa>
 800aca4:	6014      	str	r4, [r2, #0]
 800aca6:	7003      	strb	r3, [r0, #0]
 800aca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acaa:	461c      	mov	r4, r3
 800acac:	e00c      	b.n	800acc8 <__strtok_r+0x4c>
 800acae:	b915      	cbnz	r5, 800acb6 <__strtok_r+0x3a>
 800acb0:	460e      	mov	r6, r1
 800acb2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800acb6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800acba:	42ab      	cmp	r3, r5
 800acbc:	d1f7      	bne.n	800acae <__strtok_r+0x32>
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d0f3      	beq.n	800acaa <__strtok_r+0x2e>
 800acc2:	2300      	movs	r3, #0
 800acc4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800acc8:	6014      	str	r4, [r2, #0]
 800acca:	e7ed      	b.n	800aca8 <__strtok_r+0x2c>

0800accc <strtok_r>:
 800accc:	2301      	movs	r3, #1
 800acce:	f7ff bfd5 	b.w	800ac7c <__strtok_r>
	...

0800acd4 <_localeconv_r>:
 800acd4:	4800      	ldr	r0, [pc, #0]	@ (800acd8 <_localeconv_r+0x4>)
 800acd6:	4770      	bx	lr
 800acd8:	2000010c 	.word	0x2000010c

0800acdc <_close_r>:
 800acdc:	b538      	push	{r3, r4, r5, lr}
 800acde:	2300      	movs	r3, #0
 800ace0:	4d05      	ldr	r5, [pc, #20]	@ (800acf8 <_close_r+0x1c>)
 800ace2:	4604      	mov	r4, r0
 800ace4:	4608      	mov	r0, r1
 800ace6:	602b      	str	r3, [r5, #0]
 800ace8:	f7fb f91a 	bl	8005f20 <_close>
 800acec:	1c43      	adds	r3, r0, #1
 800acee:	d102      	bne.n	800acf6 <_close_r+0x1a>
 800acf0:	682b      	ldr	r3, [r5, #0]
 800acf2:	b103      	cbz	r3, 800acf6 <_close_r+0x1a>
 800acf4:	6023      	str	r3, [r4, #0]
 800acf6:	bd38      	pop	{r3, r4, r5, pc}
 800acf8:	20000cf8 	.word	0x20000cf8

0800acfc <_lseek_r>:
 800acfc:	b538      	push	{r3, r4, r5, lr}
 800acfe:	4604      	mov	r4, r0
 800ad00:	4608      	mov	r0, r1
 800ad02:	4611      	mov	r1, r2
 800ad04:	2200      	movs	r2, #0
 800ad06:	4d05      	ldr	r5, [pc, #20]	@ (800ad1c <_lseek_r+0x20>)
 800ad08:	602a      	str	r2, [r5, #0]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	f7fb f912 	bl	8005f34 <_lseek>
 800ad10:	1c43      	adds	r3, r0, #1
 800ad12:	d102      	bne.n	800ad1a <_lseek_r+0x1e>
 800ad14:	682b      	ldr	r3, [r5, #0]
 800ad16:	b103      	cbz	r3, 800ad1a <_lseek_r+0x1e>
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	bd38      	pop	{r3, r4, r5, pc}
 800ad1c:	20000cf8 	.word	0x20000cf8

0800ad20 <_read_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4604      	mov	r4, r0
 800ad24:	4608      	mov	r0, r1
 800ad26:	4611      	mov	r1, r2
 800ad28:	2200      	movs	r2, #0
 800ad2a:	4d05      	ldr	r5, [pc, #20]	@ (800ad40 <_read_r+0x20>)
 800ad2c:	602a      	str	r2, [r5, #0]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	f7fb f8da 	bl	8005ee8 <_read>
 800ad34:	1c43      	adds	r3, r0, #1
 800ad36:	d102      	bne.n	800ad3e <_read_r+0x1e>
 800ad38:	682b      	ldr	r3, [r5, #0]
 800ad3a:	b103      	cbz	r3, 800ad3e <_read_r+0x1e>
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
 800ad40:	20000cf8 	.word	0x20000cf8

0800ad44 <_sbrk_r>:
 800ad44:	b538      	push	{r3, r4, r5, lr}
 800ad46:	2300      	movs	r3, #0
 800ad48:	4d05      	ldr	r5, [pc, #20]	@ (800ad60 <_sbrk_r+0x1c>)
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	4608      	mov	r0, r1
 800ad4e:	602b      	str	r3, [r5, #0]
 800ad50:	f7fb f8f2 	bl	8005f38 <_sbrk>
 800ad54:	1c43      	adds	r3, r0, #1
 800ad56:	d102      	bne.n	800ad5e <_sbrk_r+0x1a>
 800ad58:	682b      	ldr	r3, [r5, #0]
 800ad5a:	b103      	cbz	r3, 800ad5e <_sbrk_r+0x1a>
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	bd38      	pop	{r3, r4, r5, pc}
 800ad60:	20000cf8 	.word	0x20000cf8

0800ad64 <_write_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	4604      	mov	r4, r0
 800ad68:	4608      	mov	r0, r1
 800ad6a:	4611      	mov	r1, r2
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	4d05      	ldr	r5, [pc, #20]	@ (800ad84 <_write_r+0x20>)
 800ad70:	602a      	str	r2, [r5, #0]
 800ad72:	461a      	mov	r2, r3
 800ad74:	f7fb f8c6 	bl	8005f04 <_write>
 800ad78:	1c43      	adds	r3, r0, #1
 800ad7a:	d102      	bne.n	800ad82 <_write_r+0x1e>
 800ad7c:	682b      	ldr	r3, [r5, #0]
 800ad7e:	b103      	cbz	r3, 800ad82 <_write_r+0x1e>
 800ad80:	6023      	str	r3, [r4, #0]
 800ad82:	bd38      	pop	{r3, r4, r5, pc}
 800ad84:	20000cf8 	.word	0x20000cf8

0800ad88 <__errno>:
 800ad88:	4b01      	ldr	r3, [pc, #4]	@ (800ad90 <__errno+0x8>)
 800ad8a:	6818      	ldr	r0, [r3, #0]
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	20000188 	.word	0x20000188

0800ad94 <__libc_init_array>:
 800ad94:	b570      	push	{r4, r5, r6, lr}
 800ad96:	2600      	movs	r6, #0
 800ad98:	4d0c      	ldr	r5, [pc, #48]	@ (800adcc <__libc_init_array+0x38>)
 800ad9a:	4c0d      	ldr	r4, [pc, #52]	@ (800add0 <__libc_init_array+0x3c>)
 800ad9c:	1b64      	subs	r4, r4, r5
 800ad9e:	10a4      	asrs	r4, r4, #2
 800ada0:	42a6      	cmp	r6, r4
 800ada2:	d109      	bne.n	800adb8 <__libc_init_array+0x24>
 800ada4:	f002 fc1a 	bl	800d5dc <_init>
 800ada8:	2600      	movs	r6, #0
 800adaa:	4d0a      	ldr	r5, [pc, #40]	@ (800add4 <__libc_init_array+0x40>)
 800adac:	4c0a      	ldr	r4, [pc, #40]	@ (800add8 <__libc_init_array+0x44>)
 800adae:	1b64      	subs	r4, r4, r5
 800adb0:	10a4      	asrs	r4, r4, #2
 800adb2:	42a6      	cmp	r6, r4
 800adb4:	d105      	bne.n	800adc2 <__libc_init_array+0x2e>
 800adb6:	bd70      	pop	{r4, r5, r6, pc}
 800adb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800adbc:	4798      	blx	r3
 800adbe:	3601      	adds	r6, #1
 800adc0:	e7ee      	b.n	800ada0 <__libc_init_array+0xc>
 800adc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800adc6:	4798      	blx	r3
 800adc8:	3601      	adds	r6, #1
 800adca:	e7f2      	b.n	800adb2 <__libc_init_array+0x1e>
 800adcc:	0800e158 	.word	0x0800e158
 800add0:	0800e158 	.word	0x0800e158
 800add4:	0800e158 	.word	0x0800e158
 800add8:	0800e15c 	.word	0x0800e15c

0800addc <__retarget_lock_init_recursive>:
 800addc:	4770      	bx	lr

0800adde <__retarget_lock_acquire_recursive>:
 800adde:	4770      	bx	lr

0800ade0 <__retarget_lock_release_recursive>:
 800ade0:	4770      	bx	lr

0800ade2 <strcpy>:
 800ade2:	4603      	mov	r3, r0
 800ade4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ade8:	f803 2b01 	strb.w	r2, [r3], #1
 800adec:	2a00      	cmp	r2, #0
 800adee:	d1f9      	bne.n	800ade4 <strcpy+0x2>
 800adf0:	4770      	bx	lr

0800adf2 <memchr>:
 800adf2:	4603      	mov	r3, r0
 800adf4:	b510      	push	{r4, lr}
 800adf6:	b2c9      	uxtb	r1, r1
 800adf8:	4402      	add	r2, r0
 800adfa:	4293      	cmp	r3, r2
 800adfc:	4618      	mov	r0, r3
 800adfe:	d101      	bne.n	800ae04 <memchr+0x12>
 800ae00:	2000      	movs	r0, #0
 800ae02:	e003      	b.n	800ae0c <memchr+0x1a>
 800ae04:	7804      	ldrb	r4, [r0, #0]
 800ae06:	3301      	adds	r3, #1
 800ae08:	428c      	cmp	r4, r1
 800ae0a:	d1f6      	bne.n	800adfa <memchr+0x8>
 800ae0c:	bd10      	pop	{r4, pc}

0800ae0e <memcpy>:
 800ae0e:	440a      	add	r2, r1
 800ae10:	4291      	cmp	r1, r2
 800ae12:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae16:	d100      	bne.n	800ae1a <memcpy+0xc>
 800ae18:	4770      	bx	lr
 800ae1a:	b510      	push	{r4, lr}
 800ae1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae20:	4291      	cmp	r1, r2
 800ae22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae26:	d1f9      	bne.n	800ae1c <memcpy+0xe>
 800ae28:	bd10      	pop	{r4, pc}
	...

0800ae2c <nan>:
 800ae2c:	2000      	movs	r0, #0
 800ae2e:	4901      	ldr	r1, [pc, #4]	@ (800ae34 <nan+0x8>)
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	7ff80000 	.word	0x7ff80000

0800ae38 <nanf>:
 800ae38:	4800      	ldr	r0, [pc, #0]	@ (800ae3c <nanf+0x4>)
 800ae3a:	4770      	bx	lr
 800ae3c:	7fc00000 	.word	0x7fc00000

0800ae40 <quorem>:
 800ae40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae44:	6903      	ldr	r3, [r0, #16]
 800ae46:	690c      	ldr	r4, [r1, #16]
 800ae48:	4607      	mov	r7, r0
 800ae4a:	42a3      	cmp	r3, r4
 800ae4c:	db7e      	blt.n	800af4c <quorem+0x10c>
 800ae4e:	3c01      	subs	r4, #1
 800ae50:	00a3      	lsls	r3, r4, #2
 800ae52:	f100 0514 	add.w	r5, r0, #20
 800ae56:	f101 0814 	add.w	r8, r1, #20
 800ae5a:	9300      	str	r3, [sp, #0]
 800ae5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae60:	9301      	str	r3, [sp, #4]
 800ae62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae76:	d32e      	bcc.n	800aed6 <quorem+0x96>
 800ae78:	f04f 0a00 	mov.w	sl, #0
 800ae7c:	46c4      	mov	ip, r8
 800ae7e:	46ae      	mov	lr, r5
 800ae80:	46d3      	mov	fp, sl
 800ae82:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ae86:	b298      	uxth	r0, r3
 800ae88:	fb06 a000 	mla	r0, r6, r0, sl
 800ae8c:	0c1b      	lsrs	r3, r3, #16
 800ae8e:	0c02      	lsrs	r2, r0, #16
 800ae90:	fb06 2303 	mla	r3, r6, r3, r2
 800ae94:	f8de 2000 	ldr.w	r2, [lr]
 800ae98:	b280      	uxth	r0, r0
 800ae9a:	b292      	uxth	r2, r2
 800ae9c:	1a12      	subs	r2, r2, r0
 800ae9e:	445a      	add	r2, fp
 800aea0:	f8de 0000 	ldr.w	r0, [lr]
 800aea4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aeae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aeb2:	b292      	uxth	r2, r2
 800aeb4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aeb8:	45e1      	cmp	r9, ip
 800aeba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aebe:	f84e 2b04 	str.w	r2, [lr], #4
 800aec2:	d2de      	bcs.n	800ae82 <quorem+0x42>
 800aec4:	9b00      	ldr	r3, [sp, #0]
 800aec6:	58eb      	ldr	r3, [r5, r3]
 800aec8:	b92b      	cbnz	r3, 800aed6 <quorem+0x96>
 800aeca:	9b01      	ldr	r3, [sp, #4]
 800aecc:	3b04      	subs	r3, #4
 800aece:	429d      	cmp	r5, r3
 800aed0:	461a      	mov	r2, r3
 800aed2:	d32f      	bcc.n	800af34 <quorem+0xf4>
 800aed4:	613c      	str	r4, [r7, #16]
 800aed6:	4638      	mov	r0, r7
 800aed8:	f001 fc58 	bl	800c78c <__mcmp>
 800aedc:	2800      	cmp	r0, #0
 800aede:	db25      	blt.n	800af2c <quorem+0xec>
 800aee0:	4629      	mov	r1, r5
 800aee2:	2000      	movs	r0, #0
 800aee4:	f858 2b04 	ldr.w	r2, [r8], #4
 800aee8:	f8d1 c000 	ldr.w	ip, [r1]
 800aeec:	fa1f fe82 	uxth.w	lr, r2
 800aef0:	fa1f f38c 	uxth.w	r3, ip
 800aef4:	eba3 030e 	sub.w	r3, r3, lr
 800aef8:	4403      	add	r3, r0
 800aefa:	0c12      	lsrs	r2, r2, #16
 800aefc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800af00:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800af04:	b29b      	uxth	r3, r3
 800af06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af0a:	45c1      	cmp	r9, r8
 800af0c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800af10:	f841 3b04 	str.w	r3, [r1], #4
 800af14:	d2e6      	bcs.n	800aee4 <quorem+0xa4>
 800af16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af1e:	b922      	cbnz	r2, 800af2a <quorem+0xea>
 800af20:	3b04      	subs	r3, #4
 800af22:	429d      	cmp	r5, r3
 800af24:	461a      	mov	r2, r3
 800af26:	d30b      	bcc.n	800af40 <quorem+0x100>
 800af28:	613c      	str	r4, [r7, #16]
 800af2a:	3601      	adds	r6, #1
 800af2c:	4630      	mov	r0, r6
 800af2e:	b003      	add	sp, #12
 800af30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af34:	6812      	ldr	r2, [r2, #0]
 800af36:	3b04      	subs	r3, #4
 800af38:	2a00      	cmp	r2, #0
 800af3a:	d1cb      	bne.n	800aed4 <quorem+0x94>
 800af3c:	3c01      	subs	r4, #1
 800af3e:	e7c6      	b.n	800aece <quorem+0x8e>
 800af40:	6812      	ldr	r2, [r2, #0]
 800af42:	3b04      	subs	r3, #4
 800af44:	2a00      	cmp	r2, #0
 800af46:	d1ef      	bne.n	800af28 <quorem+0xe8>
 800af48:	3c01      	subs	r4, #1
 800af4a:	e7ea      	b.n	800af22 <quorem+0xe2>
 800af4c:	2000      	movs	r0, #0
 800af4e:	e7ee      	b.n	800af2e <quorem+0xee>

0800af50 <_dtoa_r>:
 800af50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af54:	4614      	mov	r4, r2
 800af56:	461d      	mov	r5, r3
 800af58:	69c7      	ldr	r7, [r0, #28]
 800af5a:	b097      	sub	sp, #92	@ 0x5c
 800af5c:	4683      	mov	fp, r0
 800af5e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800af62:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800af64:	b97f      	cbnz	r7, 800af86 <_dtoa_r+0x36>
 800af66:	2010      	movs	r0, #16
 800af68:	f7fd ff1a 	bl	8008da0 <malloc>
 800af6c:	4602      	mov	r2, r0
 800af6e:	f8cb 001c 	str.w	r0, [fp, #28]
 800af72:	b920      	cbnz	r0, 800af7e <_dtoa_r+0x2e>
 800af74:	21ef      	movs	r1, #239	@ 0xef
 800af76:	4ba8      	ldr	r3, [pc, #672]	@ (800b218 <_dtoa_r+0x2c8>)
 800af78:	48a8      	ldr	r0, [pc, #672]	@ (800b21c <_dtoa_r+0x2cc>)
 800af7a:	f002 f9e5 	bl	800d348 <__assert_func>
 800af7e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800af82:	6007      	str	r7, [r0, #0]
 800af84:	60c7      	str	r7, [r0, #12]
 800af86:	f8db 301c 	ldr.w	r3, [fp, #28]
 800af8a:	6819      	ldr	r1, [r3, #0]
 800af8c:	b159      	cbz	r1, 800afa6 <_dtoa_r+0x56>
 800af8e:	685a      	ldr	r2, [r3, #4]
 800af90:	2301      	movs	r3, #1
 800af92:	4093      	lsls	r3, r2
 800af94:	604a      	str	r2, [r1, #4]
 800af96:	608b      	str	r3, [r1, #8]
 800af98:	4658      	mov	r0, fp
 800af9a:	f001 f975 	bl	800c288 <_Bfree>
 800af9e:	2200      	movs	r2, #0
 800afa0:	f8db 301c 	ldr.w	r3, [fp, #28]
 800afa4:	601a      	str	r2, [r3, #0]
 800afa6:	1e2b      	subs	r3, r5, #0
 800afa8:	bfaf      	iteee	ge
 800afaa:	2300      	movge	r3, #0
 800afac:	2201      	movlt	r2, #1
 800afae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800afb2:	9303      	strlt	r3, [sp, #12]
 800afb4:	bfa8      	it	ge
 800afb6:	6033      	strge	r3, [r6, #0]
 800afb8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800afbc:	4b98      	ldr	r3, [pc, #608]	@ (800b220 <_dtoa_r+0x2d0>)
 800afbe:	bfb8      	it	lt
 800afc0:	6032      	strlt	r2, [r6, #0]
 800afc2:	ea33 0308 	bics.w	r3, r3, r8
 800afc6:	d112      	bne.n	800afee <_dtoa_r+0x9e>
 800afc8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800afcc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800afce:	6013      	str	r3, [r2, #0]
 800afd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800afd4:	4323      	orrs	r3, r4
 800afd6:	f000 8550 	beq.w	800ba7a <_dtoa_r+0xb2a>
 800afda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800afdc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800b224 <_dtoa_r+0x2d4>
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f000 8552 	beq.w	800ba8a <_dtoa_r+0xb3a>
 800afe6:	f10a 0303 	add.w	r3, sl, #3
 800afea:	f000 bd4c 	b.w	800ba86 <_dtoa_r+0xb36>
 800afee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aff2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800aff6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800affa:	2200      	movs	r2, #0
 800affc:	2300      	movs	r3, #0
 800affe:	f7f5 fcdd 	bl	80009bc <__aeabi_dcmpeq>
 800b002:	4607      	mov	r7, r0
 800b004:	b158      	cbz	r0, 800b01e <_dtoa_r+0xce>
 800b006:	2301      	movs	r3, #1
 800b008:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b00a:	6013      	str	r3, [r2, #0]
 800b00c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b00e:	b113      	cbz	r3, 800b016 <_dtoa_r+0xc6>
 800b010:	4b85      	ldr	r3, [pc, #532]	@ (800b228 <_dtoa_r+0x2d8>)
 800b012:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b014:	6013      	str	r3, [r2, #0]
 800b016:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800b22c <_dtoa_r+0x2dc>
 800b01a:	f000 bd36 	b.w	800ba8a <_dtoa_r+0xb3a>
 800b01e:	ab14      	add	r3, sp, #80	@ 0x50
 800b020:	9301      	str	r3, [sp, #4]
 800b022:	ab15      	add	r3, sp, #84	@ 0x54
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	4658      	mov	r0, fp
 800b028:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b02c:	f001 fcc6 	bl	800c9bc <__d2b>
 800b030:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800b034:	4681      	mov	r9, r0
 800b036:	2e00      	cmp	r6, #0
 800b038:	d077      	beq.n	800b12a <_dtoa_r+0x1da>
 800b03a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b03e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b040:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b048:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b04c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b050:	9712      	str	r7, [sp, #72]	@ 0x48
 800b052:	4619      	mov	r1, r3
 800b054:	2200      	movs	r2, #0
 800b056:	4b76      	ldr	r3, [pc, #472]	@ (800b230 <_dtoa_r+0x2e0>)
 800b058:	f7f5 f890 	bl	800017c <__aeabi_dsub>
 800b05c:	a368      	add	r3, pc, #416	@ (adr r3, 800b200 <_dtoa_r+0x2b0>)
 800b05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b062:	f7f5 fa43 	bl	80004ec <__aeabi_dmul>
 800b066:	a368      	add	r3, pc, #416	@ (adr r3, 800b208 <_dtoa_r+0x2b8>)
 800b068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06c:	f7f5 f888 	bl	8000180 <__adddf3>
 800b070:	4604      	mov	r4, r0
 800b072:	4630      	mov	r0, r6
 800b074:	460d      	mov	r5, r1
 800b076:	f7f5 f9cf 	bl	8000418 <__aeabi_i2d>
 800b07a:	a365      	add	r3, pc, #404	@ (adr r3, 800b210 <_dtoa_r+0x2c0>)
 800b07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b080:	f7f5 fa34 	bl	80004ec <__aeabi_dmul>
 800b084:	4602      	mov	r2, r0
 800b086:	460b      	mov	r3, r1
 800b088:	4620      	mov	r0, r4
 800b08a:	4629      	mov	r1, r5
 800b08c:	f7f5 f878 	bl	8000180 <__adddf3>
 800b090:	4604      	mov	r4, r0
 800b092:	460d      	mov	r5, r1
 800b094:	f7f5 fcda 	bl	8000a4c <__aeabi_d2iz>
 800b098:	2200      	movs	r2, #0
 800b09a:	4607      	mov	r7, r0
 800b09c:	2300      	movs	r3, #0
 800b09e:	4620      	mov	r0, r4
 800b0a0:	4629      	mov	r1, r5
 800b0a2:	f7f5 fc95 	bl	80009d0 <__aeabi_dcmplt>
 800b0a6:	b140      	cbz	r0, 800b0ba <_dtoa_r+0x16a>
 800b0a8:	4638      	mov	r0, r7
 800b0aa:	f7f5 f9b5 	bl	8000418 <__aeabi_i2d>
 800b0ae:	4622      	mov	r2, r4
 800b0b0:	462b      	mov	r3, r5
 800b0b2:	f7f5 fc83 	bl	80009bc <__aeabi_dcmpeq>
 800b0b6:	b900      	cbnz	r0, 800b0ba <_dtoa_r+0x16a>
 800b0b8:	3f01      	subs	r7, #1
 800b0ba:	2f16      	cmp	r7, #22
 800b0bc:	d853      	bhi.n	800b166 <_dtoa_r+0x216>
 800b0be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0c2:	4b5c      	ldr	r3, [pc, #368]	@ (800b234 <_dtoa_r+0x2e4>)
 800b0c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0cc:	f7f5 fc80 	bl	80009d0 <__aeabi_dcmplt>
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	d04a      	beq.n	800b16a <_dtoa_r+0x21a>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	3f01      	subs	r7, #1
 800b0d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b0da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b0dc:	1b9b      	subs	r3, r3, r6
 800b0de:	1e5a      	subs	r2, r3, #1
 800b0e0:	bf46      	itte	mi
 800b0e2:	f1c3 0801 	rsbmi	r8, r3, #1
 800b0e6:	2300      	movmi	r3, #0
 800b0e8:	f04f 0800 	movpl.w	r8, #0
 800b0ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0ee:	bf48      	it	mi
 800b0f0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b0f2:	2f00      	cmp	r7, #0
 800b0f4:	db3b      	blt.n	800b16e <_dtoa_r+0x21e>
 800b0f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0f8:	970e      	str	r7, [sp, #56]	@ 0x38
 800b0fa:	443b      	add	r3, r7
 800b0fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0fe:	2300      	movs	r3, #0
 800b100:	930a      	str	r3, [sp, #40]	@ 0x28
 800b102:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b104:	2b09      	cmp	r3, #9
 800b106:	d866      	bhi.n	800b1d6 <_dtoa_r+0x286>
 800b108:	2b05      	cmp	r3, #5
 800b10a:	bfc4      	itt	gt
 800b10c:	3b04      	subgt	r3, #4
 800b10e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800b110:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b112:	bfc8      	it	gt
 800b114:	2400      	movgt	r4, #0
 800b116:	f1a3 0302 	sub.w	r3, r3, #2
 800b11a:	bfd8      	it	le
 800b11c:	2401      	movle	r4, #1
 800b11e:	2b03      	cmp	r3, #3
 800b120:	d864      	bhi.n	800b1ec <_dtoa_r+0x29c>
 800b122:	e8df f003 	tbb	[pc, r3]
 800b126:	382b      	.short	0x382b
 800b128:	5636      	.short	0x5636
 800b12a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b12e:	441e      	add	r6, r3
 800b130:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b134:	2b20      	cmp	r3, #32
 800b136:	bfc1      	itttt	gt
 800b138:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b13c:	fa08 f803 	lslgt.w	r8, r8, r3
 800b140:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b144:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b148:	bfd6      	itet	le
 800b14a:	f1c3 0320 	rsble	r3, r3, #32
 800b14e:	ea48 0003 	orrgt.w	r0, r8, r3
 800b152:	fa04 f003 	lslle.w	r0, r4, r3
 800b156:	f7f5 f94f 	bl	80003f8 <__aeabi_ui2d>
 800b15a:	2201      	movs	r2, #1
 800b15c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b160:	3e01      	subs	r6, #1
 800b162:	9212      	str	r2, [sp, #72]	@ 0x48
 800b164:	e775      	b.n	800b052 <_dtoa_r+0x102>
 800b166:	2301      	movs	r3, #1
 800b168:	e7b6      	b.n	800b0d8 <_dtoa_r+0x188>
 800b16a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b16c:	e7b5      	b.n	800b0da <_dtoa_r+0x18a>
 800b16e:	427b      	negs	r3, r7
 800b170:	930a      	str	r3, [sp, #40]	@ 0x28
 800b172:	2300      	movs	r3, #0
 800b174:	eba8 0807 	sub.w	r8, r8, r7
 800b178:	930e      	str	r3, [sp, #56]	@ 0x38
 800b17a:	e7c2      	b.n	800b102 <_dtoa_r+0x1b2>
 800b17c:	2300      	movs	r3, #0
 800b17e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b180:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b182:	2b00      	cmp	r3, #0
 800b184:	dc35      	bgt.n	800b1f2 <_dtoa_r+0x2a2>
 800b186:	2301      	movs	r3, #1
 800b188:	461a      	mov	r2, r3
 800b18a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b18e:	9221      	str	r2, [sp, #132]	@ 0x84
 800b190:	e00b      	b.n	800b1aa <_dtoa_r+0x25a>
 800b192:	2301      	movs	r3, #1
 800b194:	e7f3      	b.n	800b17e <_dtoa_r+0x22e>
 800b196:	2300      	movs	r3, #0
 800b198:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b19a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b19c:	18fb      	adds	r3, r7, r3
 800b19e:	9308      	str	r3, [sp, #32]
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	9307      	str	r3, [sp, #28]
 800b1a6:	bfb8      	it	lt
 800b1a8:	2301      	movlt	r3, #1
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	2204      	movs	r2, #4
 800b1ae:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b1b2:	f102 0514 	add.w	r5, r2, #20
 800b1b6:	429d      	cmp	r5, r3
 800b1b8:	d91f      	bls.n	800b1fa <_dtoa_r+0x2aa>
 800b1ba:	6041      	str	r1, [r0, #4]
 800b1bc:	4658      	mov	r0, fp
 800b1be:	f001 f823 	bl	800c208 <_Balloc>
 800b1c2:	4682      	mov	sl, r0
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	d139      	bne.n	800b23c <_dtoa_r+0x2ec>
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	f240 11af 	movw	r1, #431	@ 0x1af
 800b1ce:	4b1a      	ldr	r3, [pc, #104]	@ (800b238 <_dtoa_r+0x2e8>)
 800b1d0:	e6d2      	b.n	800af78 <_dtoa_r+0x28>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e7e0      	b.n	800b198 <_dtoa_r+0x248>
 800b1d6:	2401      	movs	r4, #1
 800b1d8:	2300      	movs	r3, #0
 800b1da:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b1dc:	9320      	str	r3, [sp, #128]	@ 0x80
 800b1de:	f04f 33ff 	mov.w	r3, #4294967295
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b1e8:	2312      	movs	r3, #18
 800b1ea:	e7d0      	b.n	800b18e <_dtoa_r+0x23e>
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1f0:	e7f5      	b.n	800b1de <_dtoa_r+0x28e>
 800b1f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b1f4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b1f8:	e7d7      	b.n	800b1aa <_dtoa_r+0x25a>
 800b1fa:	3101      	adds	r1, #1
 800b1fc:	0052      	lsls	r2, r2, #1
 800b1fe:	e7d8      	b.n	800b1b2 <_dtoa_r+0x262>
 800b200:	636f4361 	.word	0x636f4361
 800b204:	3fd287a7 	.word	0x3fd287a7
 800b208:	8b60c8b3 	.word	0x8b60c8b3
 800b20c:	3fc68a28 	.word	0x3fc68a28
 800b210:	509f79fb 	.word	0x509f79fb
 800b214:	3fd34413 	.word	0x3fd34413
 800b218:	0800decb 	.word	0x0800decb
 800b21c:	0800dee2 	.word	0x0800dee2
 800b220:	7ff00000 	.word	0x7ff00000
 800b224:	0800dec7 	.word	0x0800dec7
 800b228:	0800db50 	.word	0x0800db50
 800b22c:	0800db4f 	.word	0x0800db4f
 800b230:	3ff80000 	.word	0x3ff80000
 800b234:	0800e038 	.word	0x0800e038
 800b238:	0800df3a 	.word	0x0800df3a
 800b23c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b240:	6018      	str	r0, [r3, #0]
 800b242:	9b07      	ldr	r3, [sp, #28]
 800b244:	2b0e      	cmp	r3, #14
 800b246:	f200 80a4 	bhi.w	800b392 <_dtoa_r+0x442>
 800b24a:	2c00      	cmp	r4, #0
 800b24c:	f000 80a1 	beq.w	800b392 <_dtoa_r+0x442>
 800b250:	2f00      	cmp	r7, #0
 800b252:	dd33      	ble.n	800b2bc <_dtoa_r+0x36c>
 800b254:	4b86      	ldr	r3, [pc, #536]	@ (800b470 <_dtoa_r+0x520>)
 800b256:	f007 020f 	and.w	r2, r7, #15
 800b25a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b25e:	05f8      	lsls	r0, r7, #23
 800b260:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b264:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b268:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b26c:	d516      	bpl.n	800b29c <_dtoa_r+0x34c>
 800b26e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b272:	4b80      	ldr	r3, [pc, #512]	@ (800b474 <_dtoa_r+0x524>)
 800b274:	2603      	movs	r6, #3
 800b276:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b27a:	f7f5 fa61 	bl	8000740 <__aeabi_ddiv>
 800b27e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b282:	f004 040f 	and.w	r4, r4, #15
 800b286:	4d7b      	ldr	r5, [pc, #492]	@ (800b474 <_dtoa_r+0x524>)
 800b288:	b954      	cbnz	r4, 800b2a0 <_dtoa_r+0x350>
 800b28a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b28e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b292:	f7f5 fa55 	bl	8000740 <__aeabi_ddiv>
 800b296:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b29a:	e028      	b.n	800b2ee <_dtoa_r+0x39e>
 800b29c:	2602      	movs	r6, #2
 800b29e:	e7f2      	b.n	800b286 <_dtoa_r+0x336>
 800b2a0:	07e1      	lsls	r1, r4, #31
 800b2a2:	d508      	bpl.n	800b2b6 <_dtoa_r+0x366>
 800b2a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b2ac:	f7f5 f91e 	bl	80004ec <__aeabi_dmul>
 800b2b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2b4:	3601      	adds	r6, #1
 800b2b6:	1064      	asrs	r4, r4, #1
 800b2b8:	3508      	adds	r5, #8
 800b2ba:	e7e5      	b.n	800b288 <_dtoa_r+0x338>
 800b2bc:	f000 80d2 	beq.w	800b464 <_dtoa_r+0x514>
 800b2c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2c4:	427c      	negs	r4, r7
 800b2c6:	4b6a      	ldr	r3, [pc, #424]	@ (800b470 <_dtoa_r+0x520>)
 800b2c8:	f004 020f 	and.w	r2, r4, #15
 800b2cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d4:	f7f5 f90a 	bl	80004ec <__aeabi_dmul>
 800b2d8:	2602      	movs	r6, #2
 800b2da:	2300      	movs	r3, #0
 800b2dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2e0:	4d64      	ldr	r5, [pc, #400]	@ (800b474 <_dtoa_r+0x524>)
 800b2e2:	1124      	asrs	r4, r4, #4
 800b2e4:	2c00      	cmp	r4, #0
 800b2e6:	f040 80b2 	bne.w	800b44e <_dtoa_r+0x4fe>
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1d3      	bne.n	800b296 <_dtoa_r+0x346>
 800b2ee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b2f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	f000 80b7 	beq.w	800b468 <_dtoa_r+0x518>
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	4629      	mov	r1, r5
 800b300:	4b5d      	ldr	r3, [pc, #372]	@ (800b478 <_dtoa_r+0x528>)
 800b302:	f7f5 fb65 	bl	80009d0 <__aeabi_dcmplt>
 800b306:	2800      	cmp	r0, #0
 800b308:	f000 80ae 	beq.w	800b468 <_dtoa_r+0x518>
 800b30c:	9b07      	ldr	r3, [sp, #28]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f000 80aa 	beq.w	800b468 <_dtoa_r+0x518>
 800b314:	9b08      	ldr	r3, [sp, #32]
 800b316:	2b00      	cmp	r3, #0
 800b318:	dd37      	ble.n	800b38a <_dtoa_r+0x43a>
 800b31a:	1e7b      	subs	r3, r7, #1
 800b31c:	4620      	mov	r0, r4
 800b31e:	9304      	str	r3, [sp, #16]
 800b320:	2200      	movs	r2, #0
 800b322:	4629      	mov	r1, r5
 800b324:	4b55      	ldr	r3, [pc, #340]	@ (800b47c <_dtoa_r+0x52c>)
 800b326:	f7f5 f8e1 	bl	80004ec <__aeabi_dmul>
 800b32a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b32e:	9c08      	ldr	r4, [sp, #32]
 800b330:	3601      	adds	r6, #1
 800b332:	4630      	mov	r0, r6
 800b334:	f7f5 f870 	bl	8000418 <__aeabi_i2d>
 800b338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b33c:	f7f5 f8d6 	bl	80004ec <__aeabi_dmul>
 800b340:	2200      	movs	r2, #0
 800b342:	4b4f      	ldr	r3, [pc, #316]	@ (800b480 <_dtoa_r+0x530>)
 800b344:	f7f4 ff1c 	bl	8000180 <__adddf3>
 800b348:	4605      	mov	r5, r0
 800b34a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b34e:	2c00      	cmp	r4, #0
 800b350:	f040 809a 	bne.w	800b488 <_dtoa_r+0x538>
 800b354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b358:	2200      	movs	r2, #0
 800b35a:	4b4a      	ldr	r3, [pc, #296]	@ (800b484 <_dtoa_r+0x534>)
 800b35c:	f7f4 ff0e 	bl	800017c <__aeabi_dsub>
 800b360:	4602      	mov	r2, r0
 800b362:	460b      	mov	r3, r1
 800b364:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b368:	462a      	mov	r2, r5
 800b36a:	4633      	mov	r3, r6
 800b36c:	f7f5 fb4e 	bl	8000a0c <__aeabi_dcmpgt>
 800b370:	2800      	cmp	r0, #0
 800b372:	f040 828e 	bne.w	800b892 <_dtoa_r+0x942>
 800b376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b37a:	462a      	mov	r2, r5
 800b37c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b380:	f7f5 fb26 	bl	80009d0 <__aeabi_dcmplt>
 800b384:	2800      	cmp	r0, #0
 800b386:	f040 8127 	bne.w	800b5d8 <_dtoa_r+0x688>
 800b38a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b38e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b392:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b394:	2b00      	cmp	r3, #0
 800b396:	f2c0 8163 	blt.w	800b660 <_dtoa_r+0x710>
 800b39a:	2f0e      	cmp	r7, #14
 800b39c:	f300 8160 	bgt.w	800b660 <_dtoa_r+0x710>
 800b3a0:	4b33      	ldr	r3, [pc, #204]	@ (800b470 <_dtoa_r+0x520>)
 800b3a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b3a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b3aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b3ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	da03      	bge.n	800b3bc <_dtoa_r+0x46c>
 800b3b4:	9b07      	ldr	r3, [sp, #28]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f340 8100 	ble.w	800b5bc <_dtoa_r+0x66c>
 800b3bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b3c0:	4656      	mov	r6, sl
 800b3c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	f7f5 f9b9 	bl	8000740 <__aeabi_ddiv>
 800b3ce:	f7f5 fb3d 	bl	8000a4c <__aeabi_d2iz>
 800b3d2:	4680      	mov	r8, r0
 800b3d4:	f7f5 f820 	bl	8000418 <__aeabi_i2d>
 800b3d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3dc:	f7f5 f886 	bl	80004ec <__aeabi_dmul>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	4629      	mov	r1, r5
 800b3e8:	f7f4 fec8 	bl	800017c <__aeabi_dsub>
 800b3ec:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b3f0:	9d07      	ldr	r5, [sp, #28]
 800b3f2:	f806 4b01 	strb.w	r4, [r6], #1
 800b3f6:	eba6 040a 	sub.w	r4, r6, sl
 800b3fa:	42a5      	cmp	r5, r4
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	460b      	mov	r3, r1
 800b400:	f040 8116 	bne.w	800b630 <_dtoa_r+0x6e0>
 800b404:	f7f4 febc 	bl	8000180 <__adddf3>
 800b408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b40c:	4604      	mov	r4, r0
 800b40e:	460d      	mov	r5, r1
 800b410:	f7f5 fafc 	bl	8000a0c <__aeabi_dcmpgt>
 800b414:	2800      	cmp	r0, #0
 800b416:	f040 80f8 	bne.w	800b60a <_dtoa_r+0x6ba>
 800b41a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b41e:	4620      	mov	r0, r4
 800b420:	4629      	mov	r1, r5
 800b422:	f7f5 facb 	bl	80009bc <__aeabi_dcmpeq>
 800b426:	b118      	cbz	r0, 800b430 <_dtoa_r+0x4e0>
 800b428:	f018 0f01 	tst.w	r8, #1
 800b42c:	f040 80ed 	bne.w	800b60a <_dtoa_r+0x6ba>
 800b430:	4649      	mov	r1, r9
 800b432:	4658      	mov	r0, fp
 800b434:	f000 ff28 	bl	800c288 <_Bfree>
 800b438:	2300      	movs	r3, #0
 800b43a:	7033      	strb	r3, [r6, #0]
 800b43c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b43e:	3701      	adds	r7, #1
 800b440:	601f      	str	r7, [r3, #0]
 800b442:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b444:	2b00      	cmp	r3, #0
 800b446:	f000 8320 	beq.w	800ba8a <_dtoa_r+0xb3a>
 800b44a:	601e      	str	r6, [r3, #0]
 800b44c:	e31d      	b.n	800ba8a <_dtoa_r+0xb3a>
 800b44e:	07e2      	lsls	r2, r4, #31
 800b450:	d505      	bpl.n	800b45e <_dtoa_r+0x50e>
 800b452:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b456:	f7f5 f849 	bl	80004ec <__aeabi_dmul>
 800b45a:	2301      	movs	r3, #1
 800b45c:	3601      	adds	r6, #1
 800b45e:	1064      	asrs	r4, r4, #1
 800b460:	3508      	adds	r5, #8
 800b462:	e73f      	b.n	800b2e4 <_dtoa_r+0x394>
 800b464:	2602      	movs	r6, #2
 800b466:	e742      	b.n	800b2ee <_dtoa_r+0x39e>
 800b468:	9c07      	ldr	r4, [sp, #28]
 800b46a:	9704      	str	r7, [sp, #16]
 800b46c:	e761      	b.n	800b332 <_dtoa_r+0x3e2>
 800b46e:	bf00      	nop
 800b470:	0800e038 	.word	0x0800e038
 800b474:	0800e010 	.word	0x0800e010
 800b478:	3ff00000 	.word	0x3ff00000
 800b47c:	40240000 	.word	0x40240000
 800b480:	401c0000 	.word	0x401c0000
 800b484:	40140000 	.word	0x40140000
 800b488:	4b70      	ldr	r3, [pc, #448]	@ (800b64c <_dtoa_r+0x6fc>)
 800b48a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b48c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b490:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b494:	4454      	add	r4, sl
 800b496:	2900      	cmp	r1, #0
 800b498:	d045      	beq.n	800b526 <_dtoa_r+0x5d6>
 800b49a:	2000      	movs	r0, #0
 800b49c:	496c      	ldr	r1, [pc, #432]	@ (800b650 <_dtoa_r+0x700>)
 800b49e:	f7f5 f94f 	bl	8000740 <__aeabi_ddiv>
 800b4a2:	4633      	mov	r3, r6
 800b4a4:	462a      	mov	r2, r5
 800b4a6:	f7f4 fe69 	bl	800017c <__aeabi_dsub>
 800b4aa:	4656      	mov	r6, sl
 800b4ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b4b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4b4:	f7f5 faca 	bl	8000a4c <__aeabi_d2iz>
 800b4b8:	4605      	mov	r5, r0
 800b4ba:	f7f4 ffad 	bl	8000418 <__aeabi_i2d>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4c6:	f7f4 fe59 	bl	800017c <__aeabi_dsub>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	3530      	adds	r5, #48	@ 0x30
 800b4d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b4d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b4d8:	f806 5b01 	strb.w	r5, [r6], #1
 800b4dc:	f7f5 fa78 	bl	80009d0 <__aeabi_dcmplt>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	d163      	bne.n	800b5ac <_dtoa_r+0x65c>
 800b4e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	495a      	ldr	r1, [pc, #360]	@ (800b654 <_dtoa_r+0x704>)
 800b4ec:	f7f4 fe46 	bl	800017c <__aeabi_dsub>
 800b4f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b4f4:	f7f5 fa6c 	bl	80009d0 <__aeabi_dcmplt>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	f040 8087 	bne.w	800b60c <_dtoa_r+0x6bc>
 800b4fe:	42a6      	cmp	r6, r4
 800b500:	f43f af43 	beq.w	800b38a <_dtoa_r+0x43a>
 800b504:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b508:	2200      	movs	r2, #0
 800b50a:	4b53      	ldr	r3, [pc, #332]	@ (800b658 <_dtoa_r+0x708>)
 800b50c:	f7f4 ffee 	bl	80004ec <__aeabi_dmul>
 800b510:	2200      	movs	r2, #0
 800b512:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b51a:	4b4f      	ldr	r3, [pc, #316]	@ (800b658 <_dtoa_r+0x708>)
 800b51c:	f7f4 ffe6 	bl	80004ec <__aeabi_dmul>
 800b520:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b524:	e7c4      	b.n	800b4b0 <_dtoa_r+0x560>
 800b526:	4631      	mov	r1, r6
 800b528:	4628      	mov	r0, r5
 800b52a:	f7f4 ffdf 	bl	80004ec <__aeabi_dmul>
 800b52e:	4656      	mov	r6, sl
 800b530:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b534:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b53a:	f7f5 fa87 	bl	8000a4c <__aeabi_d2iz>
 800b53e:	4605      	mov	r5, r0
 800b540:	f7f4 ff6a 	bl	8000418 <__aeabi_i2d>
 800b544:	4602      	mov	r2, r0
 800b546:	460b      	mov	r3, r1
 800b548:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b54c:	f7f4 fe16 	bl	800017c <__aeabi_dsub>
 800b550:	4602      	mov	r2, r0
 800b552:	460b      	mov	r3, r1
 800b554:	3530      	adds	r5, #48	@ 0x30
 800b556:	f806 5b01 	strb.w	r5, [r6], #1
 800b55a:	42a6      	cmp	r6, r4
 800b55c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b560:	f04f 0200 	mov.w	r2, #0
 800b564:	d124      	bne.n	800b5b0 <_dtoa_r+0x660>
 800b566:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b56a:	4b39      	ldr	r3, [pc, #228]	@ (800b650 <_dtoa_r+0x700>)
 800b56c:	f7f4 fe08 	bl	8000180 <__adddf3>
 800b570:	4602      	mov	r2, r0
 800b572:	460b      	mov	r3, r1
 800b574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b578:	f7f5 fa48 	bl	8000a0c <__aeabi_dcmpgt>
 800b57c:	2800      	cmp	r0, #0
 800b57e:	d145      	bne.n	800b60c <_dtoa_r+0x6bc>
 800b580:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b584:	2000      	movs	r0, #0
 800b586:	4932      	ldr	r1, [pc, #200]	@ (800b650 <_dtoa_r+0x700>)
 800b588:	f7f4 fdf8 	bl	800017c <__aeabi_dsub>
 800b58c:	4602      	mov	r2, r0
 800b58e:	460b      	mov	r3, r1
 800b590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b594:	f7f5 fa1c 	bl	80009d0 <__aeabi_dcmplt>
 800b598:	2800      	cmp	r0, #0
 800b59a:	f43f aef6 	beq.w	800b38a <_dtoa_r+0x43a>
 800b59e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b5a0:	1e73      	subs	r3, r6, #1
 800b5a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b5a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b5a8:	2b30      	cmp	r3, #48	@ 0x30
 800b5aa:	d0f8      	beq.n	800b59e <_dtoa_r+0x64e>
 800b5ac:	9f04      	ldr	r7, [sp, #16]
 800b5ae:	e73f      	b.n	800b430 <_dtoa_r+0x4e0>
 800b5b0:	4b29      	ldr	r3, [pc, #164]	@ (800b658 <_dtoa_r+0x708>)
 800b5b2:	f7f4 ff9b 	bl	80004ec <__aeabi_dmul>
 800b5b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5ba:	e7bc      	b.n	800b536 <_dtoa_r+0x5e6>
 800b5bc:	d10c      	bne.n	800b5d8 <_dtoa_r+0x688>
 800b5be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	4b25      	ldr	r3, [pc, #148]	@ (800b65c <_dtoa_r+0x70c>)
 800b5c6:	f7f4 ff91 	bl	80004ec <__aeabi_dmul>
 800b5ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5ce:	f7f5 fa13 	bl	80009f8 <__aeabi_dcmpge>
 800b5d2:	2800      	cmp	r0, #0
 800b5d4:	f000 815b 	beq.w	800b88e <_dtoa_r+0x93e>
 800b5d8:	2400      	movs	r4, #0
 800b5da:	4625      	mov	r5, r4
 800b5dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b5de:	4656      	mov	r6, sl
 800b5e0:	43db      	mvns	r3, r3
 800b5e2:	9304      	str	r3, [sp, #16]
 800b5e4:	2700      	movs	r7, #0
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	4658      	mov	r0, fp
 800b5ea:	f000 fe4d 	bl	800c288 <_Bfree>
 800b5ee:	2d00      	cmp	r5, #0
 800b5f0:	d0dc      	beq.n	800b5ac <_dtoa_r+0x65c>
 800b5f2:	b12f      	cbz	r7, 800b600 <_dtoa_r+0x6b0>
 800b5f4:	42af      	cmp	r7, r5
 800b5f6:	d003      	beq.n	800b600 <_dtoa_r+0x6b0>
 800b5f8:	4639      	mov	r1, r7
 800b5fa:	4658      	mov	r0, fp
 800b5fc:	f000 fe44 	bl	800c288 <_Bfree>
 800b600:	4629      	mov	r1, r5
 800b602:	4658      	mov	r0, fp
 800b604:	f000 fe40 	bl	800c288 <_Bfree>
 800b608:	e7d0      	b.n	800b5ac <_dtoa_r+0x65c>
 800b60a:	9704      	str	r7, [sp, #16]
 800b60c:	4633      	mov	r3, r6
 800b60e:	461e      	mov	r6, r3
 800b610:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b614:	2a39      	cmp	r2, #57	@ 0x39
 800b616:	d107      	bne.n	800b628 <_dtoa_r+0x6d8>
 800b618:	459a      	cmp	sl, r3
 800b61a:	d1f8      	bne.n	800b60e <_dtoa_r+0x6be>
 800b61c:	9a04      	ldr	r2, [sp, #16]
 800b61e:	3201      	adds	r2, #1
 800b620:	9204      	str	r2, [sp, #16]
 800b622:	2230      	movs	r2, #48	@ 0x30
 800b624:	f88a 2000 	strb.w	r2, [sl]
 800b628:	781a      	ldrb	r2, [r3, #0]
 800b62a:	3201      	adds	r2, #1
 800b62c:	701a      	strb	r2, [r3, #0]
 800b62e:	e7bd      	b.n	800b5ac <_dtoa_r+0x65c>
 800b630:	2200      	movs	r2, #0
 800b632:	4b09      	ldr	r3, [pc, #36]	@ (800b658 <_dtoa_r+0x708>)
 800b634:	f7f4 ff5a 	bl	80004ec <__aeabi_dmul>
 800b638:	2200      	movs	r2, #0
 800b63a:	2300      	movs	r3, #0
 800b63c:	4604      	mov	r4, r0
 800b63e:	460d      	mov	r5, r1
 800b640:	f7f5 f9bc 	bl	80009bc <__aeabi_dcmpeq>
 800b644:	2800      	cmp	r0, #0
 800b646:	f43f aebc 	beq.w	800b3c2 <_dtoa_r+0x472>
 800b64a:	e6f1      	b.n	800b430 <_dtoa_r+0x4e0>
 800b64c:	0800e038 	.word	0x0800e038
 800b650:	3fe00000 	.word	0x3fe00000
 800b654:	3ff00000 	.word	0x3ff00000
 800b658:	40240000 	.word	0x40240000
 800b65c:	40140000 	.word	0x40140000
 800b660:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b662:	2a00      	cmp	r2, #0
 800b664:	f000 80db 	beq.w	800b81e <_dtoa_r+0x8ce>
 800b668:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b66a:	2a01      	cmp	r2, #1
 800b66c:	f300 80bf 	bgt.w	800b7ee <_dtoa_r+0x89e>
 800b670:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b672:	2a00      	cmp	r2, #0
 800b674:	f000 80b7 	beq.w	800b7e6 <_dtoa_r+0x896>
 800b678:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b67c:	4646      	mov	r6, r8
 800b67e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b680:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b682:	2101      	movs	r1, #1
 800b684:	441a      	add	r2, r3
 800b686:	4658      	mov	r0, fp
 800b688:	4498      	add	r8, r3
 800b68a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b68c:	f000 fefa 	bl	800c484 <__i2b>
 800b690:	4605      	mov	r5, r0
 800b692:	b15e      	cbz	r6, 800b6ac <_dtoa_r+0x75c>
 800b694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b696:	2b00      	cmp	r3, #0
 800b698:	dd08      	ble.n	800b6ac <_dtoa_r+0x75c>
 800b69a:	42b3      	cmp	r3, r6
 800b69c:	bfa8      	it	ge
 800b69e:	4633      	movge	r3, r6
 800b6a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6a2:	eba8 0803 	sub.w	r8, r8, r3
 800b6a6:	1af6      	subs	r6, r6, r3
 800b6a8:	1ad3      	subs	r3, r2, r3
 800b6aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6ae:	b1f3      	cbz	r3, 800b6ee <_dtoa_r+0x79e>
 800b6b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f000 80b7 	beq.w	800b826 <_dtoa_r+0x8d6>
 800b6b8:	b18c      	cbz	r4, 800b6de <_dtoa_r+0x78e>
 800b6ba:	4629      	mov	r1, r5
 800b6bc:	4622      	mov	r2, r4
 800b6be:	4658      	mov	r0, fp
 800b6c0:	f000 ff9e 	bl	800c600 <__pow5mult>
 800b6c4:	464a      	mov	r2, r9
 800b6c6:	4601      	mov	r1, r0
 800b6c8:	4605      	mov	r5, r0
 800b6ca:	4658      	mov	r0, fp
 800b6cc:	f000 fef0 	bl	800c4b0 <__multiply>
 800b6d0:	4649      	mov	r1, r9
 800b6d2:	9004      	str	r0, [sp, #16]
 800b6d4:	4658      	mov	r0, fp
 800b6d6:	f000 fdd7 	bl	800c288 <_Bfree>
 800b6da:	9b04      	ldr	r3, [sp, #16]
 800b6dc:	4699      	mov	r9, r3
 800b6de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6e0:	1b1a      	subs	r2, r3, r4
 800b6e2:	d004      	beq.n	800b6ee <_dtoa_r+0x79e>
 800b6e4:	4649      	mov	r1, r9
 800b6e6:	4658      	mov	r0, fp
 800b6e8:	f000 ff8a 	bl	800c600 <__pow5mult>
 800b6ec:	4681      	mov	r9, r0
 800b6ee:	2101      	movs	r1, #1
 800b6f0:	4658      	mov	r0, fp
 800b6f2:	f000 fec7 	bl	800c484 <__i2b>
 800b6f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	f000 81c9 	beq.w	800ba92 <_dtoa_r+0xb42>
 800b700:	461a      	mov	r2, r3
 800b702:	4601      	mov	r1, r0
 800b704:	4658      	mov	r0, fp
 800b706:	f000 ff7b 	bl	800c600 <__pow5mult>
 800b70a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b70c:	4604      	mov	r4, r0
 800b70e:	2b01      	cmp	r3, #1
 800b710:	f300 808f 	bgt.w	800b832 <_dtoa_r+0x8e2>
 800b714:	9b02      	ldr	r3, [sp, #8]
 800b716:	2b00      	cmp	r3, #0
 800b718:	f040 8087 	bne.w	800b82a <_dtoa_r+0x8da>
 800b71c:	9b03      	ldr	r3, [sp, #12]
 800b71e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b722:	2b00      	cmp	r3, #0
 800b724:	f040 8083 	bne.w	800b82e <_dtoa_r+0x8de>
 800b728:	9b03      	ldr	r3, [sp, #12]
 800b72a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b72e:	0d1b      	lsrs	r3, r3, #20
 800b730:	051b      	lsls	r3, r3, #20
 800b732:	b12b      	cbz	r3, 800b740 <_dtoa_r+0x7f0>
 800b734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b736:	f108 0801 	add.w	r8, r8, #1
 800b73a:	3301      	adds	r3, #1
 800b73c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b73e:	2301      	movs	r3, #1
 800b740:	930a      	str	r3, [sp, #40]	@ 0x28
 800b742:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b744:	2b00      	cmp	r3, #0
 800b746:	f000 81aa 	beq.w	800ba9e <_dtoa_r+0xb4e>
 800b74a:	6923      	ldr	r3, [r4, #16]
 800b74c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b750:	6918      	ldr	r0, [r3, #16]
 800b752:	f000 fe4b 	bl	800c3ec <__hi0bits>
 800b756:	f1c0 0020 	rsb	r0, r0, #32
 800b75a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b75c:	4418      	add	r0, r3
 800b75e:	f010 001f 	ands.w	r0, r0, #31
 800b762:	d071      	beq.n	800b848 <_dtoa_r+0x8f8>
 800b764:	f1c0 0320 	rsb	r3, r0, #32
 800b768:	2b04      	cmp	r3, #4
 800b76a:	dd65      	ble.n	800b838 <_dtoa_r+0x8e8>
 800b76c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b76e:	f1c0 001c 	rsb	r0, r0, #28
 800b772:	4403      	add	r3, r0
 800b774:	4480      	add	r8, r0
 800b776:	4406      	add	r6, r0
 800b778:	9309      	str	r3, [sp, #36]	@ 0x24
 800b77a:	f1b8 0f00 	cmp.w	r8, #0
 800b77e:	dd05      	ble.n	800b78c <_dtoa_r+0x83c>
 800b780:	4649      	mov	r1, r9
 800b782:	4642      	mov	r2, r8
 800b784:	4658      	mov	r0, fp
 800b786:	f000 ff95 	bl	800c6b4 <__lshift>
 800b78a:	4681      	mov	r9, r0
 800b78c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b78e:	2b00      	cmp	r3, #0
 800b790:	dd05      	ble.n	800b79e <_dtoa_r+0x84e>
 800b792:	4621      	mov	r1, r4
 800b794:	461a      	mov	r2, r3
 800b796:	4658      	mov	r0, fp
 800b798:	f000 ff8c 	bl	800c6b4 <__lshift>
 800b79c:	4604      	mov	r4, r0
 800b79e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d053      	beq.n	800b84c <_dtoa_r+0x8fc>
 800b7a4:	4621      	mov	r1, r4
 800b7a6:	4648      	mov	r0, r9
 800b7a8:	f000 fff0 	bl	800c78c <__mcmp>
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	da4d      	bge.n	800b84c <_dtoa_r+0x8fc>
 800b7b0:	1e7b      	subs	r3, r7, #1
 800b7b2:	4649      	mov	r1, r9
 800b7b4:	9304      	str	r3, [sp, #16]
 800b7b6:	220a      	movs	r2, #10
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	4658      	mov	r0, fp
 800b7bc:	f000 fd86 	bl	800c2cc <__multadd>
 800b7c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7c2:	4681      	mov	r9, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f000 816c 	beq.w	800baa2 <_dtoa_r+0xb52>
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	4629      	mov	r1, r5
 800b7ce:	220a      	movs	r2, #10
 800b7d0:	4658      	mov	r0, fp
 800b7d2:	f000 fd7b 	bl	800c2cc <__multadd>
 800b7d6:	9b08      	ldr	r3, [sp, #32]
 800b7d8:	4605      	mov	r5, r0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	dc61      	bgt.n	800b8a2 <_dtoa_r+0x952>
 800b7de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b7e0:	2b02      	cmp	r3, #2
 800b7e2:	dc3b      	bgt.n	800b85c <_dtoa_r+0x90c>
 800b7e4:	e05d      	b.n	800b8a2 <_dtoa_r+0x952>
 800b7e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b7e8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b7ec:	e746      	b.n	800b67c <_dtoa_r+0x72c>
 800b7ee:	9b07      	ldr	r3, [sp, #28]
 800b7f0:	1e5c      	subs	r4, r3, #1
 800b7f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7f4:	42a3      	cmp	r3, r4
 800b7f6:	bfbf      	itttt	lt
 800b7f8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b7fa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800b7fc:	1ae3      	sublt	r3, r4, r3
 800b7fe:	18d2      	addlt	r2, r2, r3
 800b800:	bfa8      	it	ge
 800b802:	1b1c      	subge	r4, r3, r4
 800b804:	9b07      	ldr	r3, [sp, #28]
 800b806:	bfbe      	ittt	lt
 800b808:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b80a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800b80c:	2400      	movlt	r4, #0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	bfb5      	itete	lt
 800b812:	eba8 0603 	sublt.w	r6, r8, r3
 800b816:	4646      	movge	r6, r8
 800b818:	2300      	movlt	r3, #0
 800b81a:	9b07      	ldrge	r3, [sp, #28]
 800b81c:	e730      	b.n	800b680 <_dtoa_r+0x730>
 800b81e:	4646      	mov	r6, r8
 800b820:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b822:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b824:	e735      	b.n	800b692 <_dtoa_r+0x742>
 800b826:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b828:	e75c      	b.n	800b6e4 <_dtoa_r+0x794>
 800b82a:	2300      	movs	r3, #0
 800b82c:	e788      	b.n	800b740 <_dtoa_r+0x7f0>
 800b82e:	9b02      	ldr	r3, [sp, #8]
 800b830:	e786      	b.n	800b740 <_dtoa_r+0x7f0>
 800b832:	2300      	movs	r3, #0
 800b834:	930a      	str	r3, [sp, #40]	@ 0x28
 800b836:	e788      	b.n	800b74a <_dtoa_r+0x7fa>
 800b838:	d09f      	beq.n	800b77a <_dtoa_r+0x82a>
 800b83a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b83c:	331c      	adds	r3, #28
 800b83e:	441a      	add	r2, r3
 800b840:	4498      	add	r8, r3
 800b842:	441e      	add	r6, r3
 800b844:	9209      	str	r2, [sp, #36]	@ 0x24
 800b846:	e798      	b.n	800b77a <_dtoa_r+0x82a>
 800b848:	4603      	mov	r3, r0
 800b84a:	e7f6      	b.n	800b83a <_dtoa_r+0x8ea>
 800b84c:	9b07      	ldr	r3, [sp, #28]
 800b84e:	9704      	str	r7, [sp, #16]
 800b850:	2b00      	cmp	r3, #0
 800b852:	dc20      	bgt.n	800b896 <_dtoa_r+0x946>
 800b854:	9308      	str	r3, [sp, #32]
 800b856:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b858:	2b02      	cmp	r3, #2
 800b85a:	dd1e      	ble.n	800b89a <_dtoa_r+0x94a>
 800b85c:	9b08      	ldr	r3, [sp, #32]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	f47f aebc 	bne.w	800b5dc <_dtoa_r+0x68c>
 800b864:	4621      	mov	r1, r4
 800b866:	2205      	movs	r2, #5
 800b868:	4658      	mov	r0, fp
 800b86a:	f000 fd2f 	bl	800c2cc <__multadd>
 800b86e:	4601      	mov	r1, r0
 800b870:	4604      	mov	r4, r0
 800b872:	4648      	mov	r0, r9
 800b874:	f000 ff8a 	bl	800c78c <__mcmp>
 800b878:	2800      	cmp	r0, #0
 800b87a:	f77f aeaf 	ble.w	800b5dc <_dtoa_r+0x68c>
 800b87e:	2331      	movs	r3, #49	@ 0x31
 800b880:	4656      	mov	r6, sl
 800b882:	f806 3b01 	strb.w	r3, [r6], #1
 800b886:	9b04      	ldr	r3, [sp, #16]
 800b888:	3301      	adds	r3, #1
 800b88a:	9304      	str	r3, [sp, #16]
 800b88c:	e6aa      	b.n	800b5e4 <_dtoa_r+0x694>
 800b88e:	9c07      	ldr	r4, [sp, #28]
 800b890:	9704      	str	r7, [sp, #16]
 800b892:	4625      	mov	r5, r4
 800b894:	e7f3      	b.n	800b87e <_dtoa_r+0x92e>
 800b896:	9b07      	ldr	r3, [sp, #28]
 800b898:	9308      	str	r3, [sp, #32]
 800b89a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	f000 8104 	beq.w	800baaa <_dtoa_r+0xb5a>
 800b8a2:	2e00      	cmp	r6, #0
 800b8a4:	dd05      	ble.n	800b8b2 <_dtoa_r+0x962>
 800b8a6:	4629      	mov	r1, r5
 800b8a8:	4632      	mov	r2, r6
 800b8aa:	4658      	mov	r0, fp
 800b8ac:	f000 ff02 	bl	800c6b4 <__lshift>
 800b8b0:	4605      	mov	r5, r0
 800b8b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d05a      	beq.n	800b96e <_dtoa_r+0xa1e>
 800b8b8:	4658      	mov	r0, fp
 800b8ba:	6869      	ldr	r1, [r5, #4]
 800b8bc:	f000 fca4 	bl	800c208 <_Balloc>
 800b8c0:	4606      	mov	r6, r0
 800b8c2:	b928      	cbnz	r0, 800b8d0 <_dtoa_r+0x980>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b8ca:	4b83      	ldr	r3, [pc, #524]	@ (800bad8 <_dtoa_r+0xb88>)
 800b8cc:	f7ff bb54 	b.w	800af78 <_dtoa_r+0x28>
 800b8d0:	692a      	ldr	r2, [r5, #16]
 800b8d2:	f105 010c 	add.w	r1, r5, #12
 800b8d6:	3202      	adds	r2, #2
 800b8d8:	0092      	lsls	r2, r2, #2
 800b8da:	300c      	adds	r0, #12
 800b8dc:	f7ff fa97 	bl	800ae0e <memcpy>
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	4631      	mov	r1, r6
 800b8e4:	4658      	mov	r0, fp
 800b8e6:	f000 fee5 	bl	800c6b4 <__lshift>
 800b8ea:	462f      	mov	r7, r5
 800b8ec:	4605      	mov	r5, r0
 800b8ee:	f10a 0301 	add.w	r3, sl, #1
 800b8f2:	9307      	str	r3, [sp, #28]
 800b8f4:	9b08      	ldr	r3, [sp, #32]
 800b8f6:	4453      	add	r3, sl
 800b8f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8fa:	9b02      	ldr	r3, [sp, #8]
 800b8fc:	f003 0301 	and.w	r3, r3, #1
 800b900:	930a      	str	r3, [sp, #40]	@ 0x28
 800b902:	9b07      	ldr	r3, [sp, #28]
 800b904:	4621      	mov	r1, r4
 800b906:	3b01      	subs	r3, #1
 800b908:	4648      	mov	r0, r9
 800b90a:	9302      	str	r3, [sp, #8]
 800b90c:	f7ff fa98 	bl	800ae40 <quorem>
 800b910:	4639      	mov	r1, r7
 800b912:	9008      	str	r0, [sp, #32]
 800b914:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b918:	4648      	mov	r0, r9
 800b91a:	f000 ff37 	bl	800c78c <__mcmp>
 800b91e:	462a      	mov	r2, r5
 800b920:	9009      	str	r0, [sp, #36]	@ 0x24
 800b922:	4621      	mov	r1, r4
 800b924:	4658      	mov	r0, fp
 800b926:	f000 ff4d 	bl	800c7c4 <__mdiff>
 800b92a:	68c2      	ldr	r2, [r0, #12]
 800b92c:	4606      	mov	r6, r0
 800b92e:	bb02      	cbnz	r2, 800b972 <_dtoa_r+0xa22>
 800b930:	4601      	mov	r1, r0
 800b932:	4648      	mov	r0, r9
 800b934:	f000 ff2a 	bl	800c78c <__mcmp>
 800b938:	4602      	mov	r2, r0
 800b93a:	4631      	mov	r1, r6
 800b93c:	4658      	mov	r0, fp
 800b93e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b940:	f000 fca2 	bl	800c288 <_Bfree>
 800b944:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b946:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b948:	9e07      	ldr	r6, [sp, #28]
 800b94a:	ea43 0102 	orr.w	r1, r3, r2
 800b94e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b950:	4319      	orrs	r1, r3
 800b952:	d110      	bne.n	800b976 <_dtoa_r+0xa26>
 800b954:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b958:	d029      	beq.n	800b9ae <_dtoa_r+0xa5e>
 800b95a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	dd02      	ble.n	800b966 <_dtoa_r+0xa16>
 800b960:	9b08      	ldr	r3, [sp, #32]
 800b962:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b966:	9b02      	ldr	r3, [sp, #8]
 800b968:	f883 8000 	strb.w	r8, [r3]
 800b96c:	e63b      	b.n	800b5e6 <_dtoa_r+0x696>
 800b96e:	4628      	mov	r0, r5
 800b970:	e7bb      	b.n	800b8ea <_dtoa_r+0x99a>
 800b972:	2201      	movs	r2, #1
 800b974:	e7e1      	b.n	800b93a <_dtoa_r+0x9ea>
 800b976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b978:	2b00      	cmp	r3, #0
 800b97a:	db04      	blt.n	800b986 <_dtoa_r+0xa36>
 800b97c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800b97e:	430b      	orrs	r3, r1
 800b980:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b982:	430b      	orrs	r3, r1
 800b984:	d120      	bne.n	800b9c8 <_dtoa_r+0xa78>
 800b986:	2a00      	cmp	r2, #0
 800b988:	dded      	ble.n	800b966 <_dtoa_r+0xa16>
 800b98a:	4649      	mov	r1, r9
 800b98c:	2201      	movs	r2, #1
 800b98e:	4658      	mov	r0, fp
 800b990:	f000 fe90 	bl	800c6b4 <__lshift>
 800b994:	4621      	mov	r1, r4
 800b996:	4681      	mov	r9, r0
 800b998:	f000 fef8 	bl	800c78c <__mcmp>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	dc03      	bgt.n	800b9a8 <_dtoa_r+0xa58>
 800b9a0:	d1e1      	bne.n	800b966 <_dtoa_r+0xa16>
 800b9a2:	f018 0f01 	tst.w	r8, #1
 800b9a6:	d0de      	beq.n	800b966 <_dtoa_r+0xa16>
 800b9a8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b9ac:	d1d8      	bne.n	800b960 <_dtoa_r+0xa10>
 800b9ae:	2339      	movs	r3, #57	@ 0x39
 800b9b0:	9a02      	ldr	r2, [sp, #8]
 800b9b2:	7013      	strb	r3, [r2, #0]
 800b9b4:	4633      	mov	r3, r6
 800b9b6:	461e      	mov	r6, r3
 800b9b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	2a39      	cmp	r2, #57	@ 0x39
 800b9c0:	d052      	beq.n	800ba68 <_dtoa_r+0xb18>
 800b9c2:	3201      	adds	r2, #1
 800b9c4:	701a      	strb	r2, [r3, #0]
 800b9c6:	e60e      	b.n	800b5e6 <_dtoa_r+0x696>
 800b9c8:	2a00      	cmp	r2, #0
 800b9ca:	dd07      	ble.n	800b9dc <_dtoa_r+0xa8c>
 800b9cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b9d0:	d0ed      	beq.n	800b9ae <_dtoa_r+0xa5e>
 800b9d2:	9a02      	ldr	r2, [sp, #8]
 800b9d4:	f108 0301 	add.w	r3, r8, #1
 800b9d8:	7013      	strb	r3, [r2, #0]
 800b9da:	e604      	b.n	800b5e6 <_dtoa_r+0x696>
 800b9dc:	9b07      	ldr	r3, [sp, #28]
 800b9de:	9a07      	ldr	r2, [sp, #28]
 800b9e0:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b9e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d028      	beq.n	800ba3c <_dtoa_r+0xaec>
 800b9ea:	4649      	mov	r1, r9
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	220a      	movs	r2, #10
 800b9f0:	4658      	mov	r0, fp
 800b9f2:	f000 fc6b 	bl	800c2cc <__multadd>
 800b9f6:	42af      	cmp	r7, r5
 800b9f8:	4681      	mov	r9, r0
 800b9fa:	f04f 0300 	mov.w	r3, #0
 800b9fe:	f04f 020a 	mov.w	r2, #10
 800ba02:	4639      	mov	r1, r7
 800ba04:	4658      	mov	r0, fp
 800ba06:	d107      	bne.n	800ba18 <_dtoa_r+0xac8>
 800ba08:	f000 fc60 	bl	800c2cc <__multadd>
 800ba0c:	4607      	mov	r7, r0
 800ba0e:	4605      	mov	r5, r0
 800ba10:	9b07      	ldr	r3, [sp, #28]
 800ba12:	3301      	adds	r3, #1
 800ba14:	9307      	str	r3, [sp, #28]
 800ba16:	e774      	b.n	800b902 <_dtoa_r+0x9b2>
 800ba18:	f000 fc58 	bl	800c2cc <__multadd>
 800ba1c:	4629      	mov	r1, r5
 800ba1e:	4607      	mov	r7, r0
 800ba20:	2300      	movs	r3, #0
 800ba22:	220a      	movs	r2, #10
 800ba24:	4658      	mov	r0, fp
 800ba26:	f000 fc51 	bl	800c2cc <__multadd>
 800ba2a:	4605      	mov	r5, r0
 800ba2c:	e7f0      	b.n	800ba10 <_dtoa_r+0xac0>
 800ba2e:	9b08      	ldr	r3, [sp, #32]
 800ba30:	2700      	movs	r7, #0
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	bfcc      	ite	gt
 800ba36:	461e      	movgt	r6, r3
 800ba38:	2601      	movle	r6, #1
 800ba3a:	4456      	add	r6, sl
 800ba3c:	4649      	mov	r1, r9
 800ba3e:	2201      	movs	r2, #1
 800ba40:	4658      	mov	r0, fp
 800ba42:	f000 fe37 	bl	800c6b4 <__lshift>
 800ba46:	4621      	mov	r1, r4
 800ba48:	4681      	mov	r9, r0
 800ba4a:	f000 fe9f 	bl	800c78c <__mcmp>
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	dcb0      	bgt.n	800b9b4 <_dtoa_r+0xa64>
 800ba52:	d102      	bne.n	800ba5a <_dtoa_r+0xb0a>
 800ba54:	f018 0f01 	tst.w	r8, #1
 800ba58:	d1ac      	bne.n	800b9b4 <_dtoa_r+0xa64>
 800ba5a:	4633      	mov	r3, r6
 800ba5c:	461e      	mov	r6, r3
 800ba5e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba62:	2a30      	cmp	r2, #48	@ 0x30
 800ba64:	d0fa      	beq.n	800ba5c <_dtoa_r+0xb0c>
 800ba66:	e5be      	b.n	800b5e6 <_dtoa_r+0x696>
 800ba68:	459a      	cmp	sl, r3
 800ba6a:	d1a4      	bne.n	800b9b6 <_dtoa_r+0xa66>
 800ba6c:	9b04      	ldr	r3, [sp, #16]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	9304      	str	r3, [sp, #16]
 800ba72:	2331      	movs	r3, #49	@ 0x31
 800ba74:	f88a 3000 	strb.w	r3, [sl]
 800ba78:	e5b5      	b.n	800b5e6 <_dtoa_r+0x696>
 800ba7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ba7c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800badc <_dtoa_r+0xb8c>
 800ba80:	b11b      	cbz	r3, 800ba8a <_dtoa_r+0xb3a>
 800ba82:	f10a 0308 	add.w	r3, sl, #8
 800ba86:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ba88:	6013      	str	r3, [r2, #0]
 800ba8a:	4650      	mov	r0, sl
 800ba8c:	b017      	add	sp, #92	@ 0x5c
 800ba8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba92:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	f77f ae3d 	ble.w	800b714 <_dtoa_r+0x7c4>
 800ba9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba9c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba9e:	2001      	movs	r0, #1
 800baa0:	e65b      	b.n	800b75a <_dtoa_r+0x80a>
 800baa2:	9b08      	ldr	r3, [sp, #32]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f77f aed6 	ble.w	800b856 <_dtoa_r+0x906>
 800baaa:	4656      	mov	r6, sl
 800baac:	4621      	mov	r1, r4
 800baae:	4648      	mov	r0, r9
 800bab0:	f7ff f9c6 	bl	800ae40 <quorem>
 800bab4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bab8:	9b08      	ldr	r3, [sp, #32]
 800baba:	f806 8b01 	strb.w	r8, [r6], #1
 800babe:	eba6 020a 	sub.w	r2, r6, sl
 800bac2:	4293      	cmp	r3, r2
 800bac4:	ddb3      	ble.n	800ba2e <_dtoa_r+0xade>
 800bac6:	4649      	mov	r1, r9
 800bac8:	2300      	movs	r3, #0
 800baca:	220a      	movs	r2, #10
 800bacc:	4658      	mov	r0, fp
 800bace:	f000 fbfd 	bl	800c2cc <__multadd>
 800bad2:	4681      	mov	r9, r0
 800bad4:	e7ea      	b.n	800baac <_dtoa_r+0xb5c>
 800bad6:	bf00      	nop
 800bad8:	0800df3a 	.word	0x0800df3a
 800badc:	0800debe 	.word	0x0800debe

0800bae0 <_free_r>:
 800bae0:	b538      	push	{r3, r4, r5, lr}
 800bae2:	4605      	mov	r5, r0
 800bae4:	2900      	cmp	r1, #0
 800bae6:	d040      	beq.n	800bb6a <_free_r+0x8a>
 800bae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baec:	1f0c      	subs	r4, r1, #4
 800baee:	2b00      	cmp	r3, #0
 800baf0:	bfb8      	it	lt
 800baf2:	18e4      	addlt	r4, r4, r3
 800baf4:	f7fd fa06 	bl	8008f04 <__malloc_lock>
 800baf8:	4a1c      	ldr	r2, [pc, #112]	@ (800bb6c <_free_r+0x8c>)
 800bafa:	6813      	ldr	r3, [r2, #0]
 800bafc:	b933      	cbnz	r3, 800bb0c <_free_r+0x2c>
 800bafe:	6063      	str	r3, [r4, #4]
 800bb00:	6014      	str	r4, [r2, #0]
 800bb02:	4628      	mov	r0, r5
 800bb04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb08:	f7fd ba02 	b.w	8008f10 <__malloc_unlock>
 800bb0c:	42a3      	cmp	r3, r4
 800bb0e:	d908      	bls.n	800bb22 <_free_r+0x42>
 800bb10:	6820      	ldr	r0, [r4, #0]
 800bb12:	1821      	adds	r1, r4, r0
 800bb14:	428b      	cmp	r3, r1
 800bb16:	bf01      	itttt	eq
 800bb18:	6819      	ldreq	r1, [r3, #0]
 800bb1a:	685b      	ldreq	r3, [r3, #4]
 800bb1c:	1809      	addeq	r1, r1, r0
 800bb1e:	6021      	streq	r1, [r4, #0]
 800bb20:	e7ed      	b.n	800bafe <_free_r+0x1e>
 800bb22:	461a      	mov	r2, r3
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	b10b      	cbz	r3, 800bb2c <_free_r+0x4c>
 800bb28:	42a3      	cmp	r3, r4
 800bb2a:	d9fa      	bls.n	800bb22 <_free_r+0x42>
 800bb2c:	6811      	ldr	r1, [r2, #0]
 800bb2e:	1850      	adds	r0, r2, r1
 800bb30:	42a0      	cmp	r0, r4
 800bb32:	d10b      	bne.n	800bb4c <_free_r+0x6c>
 800bb34:	6820      	ldr	r0, [r4, #0]
 800bb36:	4401      	add	r1, r0
 800bb38:	1850      	adds	r0, r2, r1
 800bb3a:	4283      	cmp	r3, r0
 800bb3c:	6011      	str	r1, [r2, #0]
 800bb3e:	d1e0      	bne.n	800bb02 <_free_r+0x22>
 800bb40:	6818      	ldr	r0, [r3, #0]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	4408      	add	r0, r1
 800bb46:	6010      	str	r0, [r2, #0]
 800bb48:	6053      	str	r3, [r2, #4]
 800bb4a:	e7da      	b.n	800bb02 <_free_r+0x22>
 800bb4c:	d902      	bls.n	800bb54 <_free_r+0x74>
 800bb4e:	230c      	movs	r3, #12
 800bb50:	602b      	str	r3, [r5, #0]
 800bb52:	e7d6      	b.n	800bb02 <_free_r+0x22>
 800bb54:	6820      	ldr	r0, [r4, #0]
 800bb56:	1821      	adds	r1, r4, r0
 800bb58:	428b      	cmp	r3, r1
 800bb5a:	bf01      	itttt	eq
 800bb5c:	6819      	ldreq	r1, [r3, #0]
 800bb5e:	685b      	ldreq	r3, [r3, #4]
 800bb60:	1809      	addeq	r1, r1, r0
 800bb62:	6021      	streq	r1, [r4, #0]
 800bb64:	6063      	str	r3, [r4, #4]
 800bb66:	6054      	str	r4, [r2, #4]
 800bb68:	e7cb      	b.n	800bb02 <_free_r+0x22>
 800bb6a:	bd38      	pop	{r3, r4, r5, pc}
 800bb6c:	20000bb8 	.word	0x20000bb8

0800bb70 <rshift>:
 800bb70:	6903      	ldr	r3, [r0, #16]
 800bb72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bb7a:	f100 0414 	add.w	r4, r0, #20
 800bb7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bb82:	dd46      	ble.n	800bc12 <rshift+0xa2>
 800bb84:	f011 011f 	ands.w	r1, r1, #31
 800bb88:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bb8c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bb90:	d10c      	bne.n	800bbac <rshift+0x3c>
 800bb92:	4629      	mov	r1, r5
 800bb94:	f100 0710 	add.w	r7, r0, #16
 800bb98:	42b1      	cmp	r1, r6
 800bb9a:	d335      	bcc.n	800bc08 <rshift+0x98>
 800bb9c:	1a9b      	subs	r3, r3, r2
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	1eea      	subs	r2, r5, #3
 800bba2:	4296      	cmp	r6, r2
 800bba4:	bf38      	it	cc
 800bba6:	2300      	movcc	r3, #0
 800bba8:	4423      	add	r3, r4
 800bbaa:	e015      	b.n	800bbd8 <rshift+0x68>
 800bbac:	46a1      	mov	r9, r4
 800bbae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bbb2:	f1c1 0820 	rsb	r8, r1, #32
 800bbb6:	40cf      	lsrs	r7, r1
 800bbb8:	f105 0e04 	add.w	lr, r5, #4
 800bbbc:	4576      	cmp	r6, lr
 800bbbe:	46f4      	mov	ip, lr
 800bbc0:	d816      	bhi.n	800bbf0 <rshift+0x80>
 800bbc2:	1a9a      	subs	r2, r3, r2
 800bbc4:	0092      	lsls	r2, r2, #2
 800bbc6:	3a04      	subs	r2, #4
 800bbc8:	3501      	adds	r5, #1
 800bbca:	42ae      	cmp	r6, r5
 800bbcc:	bf38      	it	cc
 800bbce:	2200      	movcc	r2, #0
 800bbd0:	18a3      	adds	r3, r4, r2
 800bbd2:	50a7      	str	r7, [r4, r2]
 800bbd4:	b107      	cbz	r7, 800bbd8 <rshift+0x68>
 800bbd6:	3304      	adds	r3, #4
 800bbd8:	42a3      	cmp	r3, r4
 800bbda:	eba3 0204 	sub.w	r2, r3, r4
 800bbde:	bf08      	it	eq
 800bbe0:	2300      	moveq	r3, #0
 800bbe2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bbe6:	6102      	str	r2, [r0, #16]
 800bbe8:	bf08      	it	eq
 800bbea:	6143      	streq	r3, [r0, #20]
 800bbec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbf0:	f8dc c000 	ldr.w	ip, [ip]
 800bbf4:	fa0c fc08 	lsl.w	ip, ip, r8
 800bbf8:	ea4c 0707 	orr.w	r7, ip, r7
 800bbfc:	f849 7b04 	str.w	r7, [r9], #4
 800bc00:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bc04:	40cf      	lsrs	r7, r1
 800bc06:	e7d9      	b.n	800bbbc <rshift+0x4c>
 800bc08:	f851 cb04 	ldr.w	ip, [r1], #4
 800bc0c:	f847 cf04 	str.w	ip, [r7, #4]!
 800bc10:	e7c2      	b.n	800bb98 <rshift+0x28>
 800bc12:	4623      	mov	r3, r4
 800bc14:	e7e0      	b.n	800bbd8 <rshift+0x68>

0800bc16 <__hexdig_fun>:
 800bc16:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bc1a:	2b09      	cmp	r3, #9
 800bc1c:	d802      	bhi.n	800bc24 <__hexdig_fun+0xe>
 800bc1e:	3820      	subs	r0, #32
 800bc20:	b2c0      	uxtb	r0, r0
 800bc22:	4770      	bx	lr
 800bc24:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bc28:	2b05      	cmp	r3, #5
 800bc2a:	d801      	bhi.n	800bc30 <__hexdig_fun+0x1a>
 800bc2c:	3847      	subs	r0, #71	@ 0x47
 800bc2e:	e7f7      	b.n	800bc20 <__hexdig_fun+0xa>
 800bc30:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bc34:	2b05      	cmp	r3, #5
 800bc36:	d801      	bhi.n	800bc3c <__hexdig_fun+0x26>
 800bc38:	3827      	subs	r0, #39	@ 0x27
 800bc3a:	e7f1      	b.n	800bc20 <__hexdig_fun+0xa>
 800bc3c:	2000      	movs	r0, #0
 800bc3e:	4770      	bx	lr

0800bc40 <__gethex>:
 800bc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc44:	468a      	mov	sl, r1
 800bc46:	4690      	mov	r8, r2
 800bc48:	b085      	sub	sp, #20
 800bc4a:	9302      	str	r3, [sp, #8]
 800bc4c:	680b      	ldr	r3, [r1, #0]
 800bc4e:	9001      	str	r0, [sp, #4]
 800bc50:	1c9c      	adds	r4, r3, #2
 800bc52:	46a1      	mov	r9, r4
 800bc54:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bc58:	2830      	cmp	r0, #48	@ 0x30
 800bc5a:	d0fa      	beq.n	800bc52 <__gethex+0x12>
 800bc5c:	eba9 0303 	sub.w	r3, r9, r3
 800bc60:	f1a3 0b02 	sub.w	fp, r3, #2
 800bc64:	f7ff ffd7 	bl	800bc16 <__hexdig_fun>
 800bc68:	4605      	mov	r5, r0
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	d168      	bne.n	800bd40 <__gethex+0x100>
 800bc6e:	2201      	movs	r2, #1
 800bc70:	4648      	mov	r0, r9
 800bc72:	499f      	ldr	r1, [pc, #636]	@ (800bef0 <__gethex+0x2b0>)
 800bc74:	f7fe ffdd 	bl	800ac32 <strncmp>
 800bc78:	4607      	mov	r7, r0
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	d167      	bne.n	800bd4e <__gethex+0x10e>
 800bc7e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bc82:	4626      	mov	r6, r4
 800bc84:	f7ff ffc7 	bl	800bc16 <__hexdig_fun>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	d062      	beq.n	800bd52 <__gethex+0x112>
 800bc8c:	4623      	mov	r3, r4
 800bc8e:	7818      	ldrb	r0, [r3, #0]
 800bc90:	4699      	mov	r9, r3
 800bc92:	2830      	cmp	r0, #48	@ 0x30
 800bc94:	f103 0301 	add.w	r3, r3, #1
 800bc98:	d0f9      	beq.n	800bc8e <__gethex+0x4e>
 800bc9a:	f7ff ffbc 	bl	800bc16 <__hexdig_fun>
 800bc9e:	fab0 f580 	clz	r5, r0
 800bca2:	f04f 0b01 	mov.w	fp, #1
 800bca6:	096d      	lsrs	r5, r5, #5
 800bca8:	464a      	mov	r2, r9
 800bcaa:	4616      	mov	r6, r2
 800bcac:	7830      	ldrb	r0, [r6, #0]
 800bcae:	3201      	adds	r2, #1
 800bcb0:	f7ff ffb1 	bl	800bc16 <__hexdig_fun>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	d1f8      	bne.n	800bcaa <__gethex+0x6a>
 800bcb8:	2201      	movs	r2, #1
 800bcba:	4630      	mov	r0, r6
 800bcbc:	498c      	ldr	r1, [pc, #560]	@ (800bef0 <__gethex+0x2b0>)
 800bcbe:	f7fe ffb8 	bl	800ac32 <strncmp>
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	d13f      	bne.n	800bd46 <__gethex+0x106>
 800bcc6:	b944      	cbnz	r4, 800bcda <__gethex+0x9a>
 800bcc8:	1c74      	adds	r4, r6, #1
 800bcca:	4622      	mov	r2, r4
 800bccc:	4616      	mov	r6, r2
 800bcce:	7830      	ldrb	r0, [r6, #0]
 800bcd0:	3201      	adds	r2, #1
 800bcd2:	f7ff ffa0 	bl	800bc16 <__hexdig_fun>
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	d1f8      	bne.n	800bccc <__gethex+0x8c>
 800bcda:	1ba4      	subs	r4, r4, r6
 800bcdc:	00a7      	lsls	r7, r4, #2
 800bcde:	7833      	ldrb	r3, [r6, #0]
 800bce0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bce4:	2b50      	cmp	r3, #80	@ 0x50
 800bce6:	d13e      	bne.n	800bd66 <__gethex+0x126>
 800bce8:	7873      	ldrb	r3, [r6, #1]
 800bcea:	2b2b      	cmp	r3, #43	@ 0x2b
 800bcec:	d033      	beq.n	800bd56 <__gethex+0x116>
 800bcee:	2b2d      	cmp	r3, #45	@ 0x2d
 800bcf0:	d034      	beq.n	800bd5c <__gethex+0x11c>
 800bcf2:	2400      	movs	r4, #0
 800bcf4:	1c71      	adds	r1, r6, #1
 800bcf6:	7808      	ldrb	r0, [r1, #0]
 800bcf8:	f7ff ff8d 	bl	800bc16 <__hexdig_fun>
 800bcfc:	1e43      	subs	r3, r0, #1
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	2b18      	cmp	r3, #24
 800bd02:	d830      	bhi.n	800bd66 <__gethex+0x126>
 800bd04:	f1a0 0210 	sub.w	r2, r0, #16
 800bd08:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bd0c:	f7ff ff83 	bl	800bc16 <__hexdig_fun>
 800bd10:	f100 3cff 	add.w	ip, r0, #4294967295
 800bd14:	fa5f fc8c 	uxtb.w	ip, ip
 800bd18:	f1bc 0f18 	cmp.w	ip, #24
 800bd1c:	f04f 030a 	mov.w	r3, #10
 800bd20:	d91e      	bls.n	800bd60 <__gethex+0x120>
 800bd22:	b104      	cbz	r4, 800bd26 <__gethex+0xe6>
 800bd24:	4252      	negs	r2, r2
 800bd26:	4417      	add	r7, r2
 800bd28:	f8ca 1000 	str.w	r1, [sl]
 800bd2c:	b1ed      	cbz	r5, 800bd6a <__gethex+0x12a>
 800bd2e:	f1bb 0f00 	cmp.w	fp, #0
 800bd32:	bf0c      	ite	eq
 800bd34:	2506      	moveq	r5, #6
 800bd36:	2500      	movne	r5, #0
 800bd38:	4628      	mov	r0, r5
 800bd3a:	b005      	add	sp, #20
 800bd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd40:	2500      	movs	r5, #0
 800bd42:	462c      	mov	r4, r5
 800bd44:	e7b0      	b.n	800bca8 <__gethex+0x68>
 800bd46:	2c00      	cmp	r4, #0
 800bd48:	d1c7      	bne.n	800bcda <__gethex+0x9a>
 800bd4a:	4627      	mov	r7, r4
 800bd4c:	e7c7      	b.n	800bcde <__gethex+0x9e>
 800bd4e:	464e      	mov	r6, r9
 800bd50:	462f      	mov	r7, r5
 800bd52:	2501      	movs	r5, #1
 800bd54:	e7c3      	b.n	800bcde <__gethex+0x9e>
 800bd56:	2400      	movs	r4, #0
 800bd58:	1cb1      	adds	r1, r6, #2
 800bd5a:	e7cc      	b.n	800bcf6 <__gethex+0xb6>
 800bd5c:	2401      	movs	r4, #1
 800bd5e:	e7fb      	b.n	800bd58 <__gethex+0x118>
 800bd60:	fb03 0002 	mla	r0, r3, r2, r0
 800bd64:	e7ce      	b.n	800bd04 <__gethex+0xc4>
 800bd66:	4631      	mov	r1, r6
 800bd68:	e7de      	b.n	800bd28 <__gethex+0xe8>
 800bd6a:	4629      	mov	r1, r5
 800bd6c:	eba6 0309 	sub.w	r3, r6, r9
 800bd70:	3b01      	subs	r3, #1
 800bd72:	2b07      	cmp	r3, #7
 800bd74:	dc0a      	bgt.n	800bd8c <__gethex+0x14c>
 800bd76:	9801      	ldr	r0, [sp, #4]
 800bd78:	f000 fa46 	bl	800c208 <_Balloc>
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	b940      	cbnz	r0, 800bd92 <__gethex+0x152>
 800bd80:	4602      	mov	r2, r0
 800bd82:	21e4      	movs	r1, #228	@ 0xe4
 800bd84:	4b5b      	ldr	r3, [pc, #364]	@ (800bef4 <__gethex+0x2b4>)
 800bd86:	485c      	ldr	r0, [pc, #368]	@ (800bef8 <__gethex+0x2b8>)
 800bd88:	f001 fade 	bl	800d348 <__assert_func>
 800bd8c:	3101      	adds	r1, #1
 800bd8e:	105b      	asrs	r3, r3, #1
 800bd90:	e7ef      	b.n	800bd72 <__gethex+0x132>
 800bd92:	2300      	movs	r3, #0
 800bd94:	f100 0a14 	add.w	sl, r0, #20
 800bd98:	4655      	mov	r5, sl
 800bd9a:	469b      	mov	fp, r3
 800bd9c:	45b1      	cmp	r9, r6
 800bd9e:	d337      	bcc.n	800be10 <__gethex+0x1d0>
 800bda0:	f845 bb04 	str.w	fp, [r5], #4
 800bda4:	eba5 050a 	sub.w	r5, r5, sl
 800bda8:	10ad      	asrs	r5, r5, #2
 800bdaa:	6125      	str	r5, [r4, #16]
 800bdac:	4658      	mov	r0, fp
 800bdae:	f000 fb1d 	bl	800c3ec <__hi0bits>
 800bdb2:	016d      	lsls	r5, r5, #5
 800bdb4:	f8d8 6000 	ldr.w	r6, [r8]
 800bdb8:	1a2d      	subs	r5, r5, r0
 800bdba:	42b5      	cmp	r5, r6
 800bdbc:	dd54      	ble.n	800be68 <__gethex+0x228>
 800bdbe:	1bad      	subs	r5, r5, r6
 800bdc0:	4629      	mov	r1, r5
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f000 fea5 	bl	800cb12 <__any_on>
 800bdc8:	4681      	mov	r9, r0
 800bdca:	b178      	cbz	r0, 800bdec <__gethex+0x1ac>
 800bdcc:	f04f 0901 	mov.w	r9, #1
 800bdd0:	1e6b      	subs	r3, r5, #1
 800bdd2:	1159      	asrs	r1, r3, #5
 800bdd4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bdd8:	f003 021f 	and.w	r2, r3, #31
 800bddc:	fa09 f202 	lsl.w	r2, r9, r2
 800bde0:	420a      	tst	r2, r1
 800bde2:	d003      	beq.n	800bdec <__gethex+0x1ac>
 800bde4:	454b      	cmp	r3, r9
 800bde6:	dc36      	bgt.n	800be56 <__gethex+0x216>
 800bde8:	f04f 0902 	mov.w	r9, #2
 800bdec:	4629      	mov	r1, r5
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f7ff febe 	bl	800bb70 <rshift>
 800bdf4:	442f      	add	r7, r5
 800bdf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bdfa:	42bb      	cmp	r3, r7
 800bdfc:	da42      	bge.n	800be84 <__gethex+0x244>
 800bdfe:	4621      	mov	r1, r4
 800be00:	9801      	ldr	r0, [sp, #4]
 800be02:	f000 fa41 	bl	800c288 <_Bfree>
 800be06:	2300      	movs	r3, #0
 800be08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be0a:	25a3      	movs	r5, #163	@ 0xa3
 800be0c:	6013      	str	r3, [r2, #0]
 800be0e:	e793      	b.n	800bd38 <__gethex+0xf8>
 800be10:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800be14:	2a2e      	cmp	r2, #46	@ 0x2e
 800be16:	d012      	beq.n	800be3e <__gethex+0x1fe>
 800be18:	2b20      	cmp	r3, #32
 800be1a:	d104      	bne.n	800be26 <__gethex+0x1e6>
 800be1c:	f845 bb04 	str.w	fp, [r5], #4
 800be20:	f04f 0b00 	mov.w	fp, #0
 800be24:	465b      	mov	r3, fp
 800be26:	7830      	ldrb	r0, [r6, #0]
 800be28:	9303      	str	r3, [sp, #12]
 800be2a:	f7ff fef4 	bl	800bc16 <__hexdig_fun>
 800be2e:	9b03      	ldr	r3, [sp, #12]
 800be30:	f000 000f 	and.w	r0, r0, #15
 800be34:	4098      	lsls	r0, r3
 800be36:	ea4b 0b00 	orr.w	fp, fp, r0
 800be3a:	3304      	adds	r3, #4
 800be3c:	e7ae      	b.n	800bd9c <__gethex+0x15c>
 800be3e:	45b1      	cmp	r9, r6
 800be40:	d8ea      	bhi.n	800be18 <__gethex+0x1d8>
 800be42:	2201      	movs	r2, #1
 800be44:	4630      	mov	r0, r6
 800be46:	492a      	ldr	r1, [pc, #168]	@ (800bef0 <__gethex+0x2b0>)
 800be48:	9303      	str	r3, [sp, #12]
 800be4a:	f7fe fef2 	bl	800ac32 <strncmp>
 800be4e:	9b03      	ldr	r3, [sp, #12]
 800be50:	2800      	cmp	r0, #0
 800be52:	d1e1      	bne.n	800be18 <__gethex+0x1d8>
 800be54:	e7a2      	b.n	800bd9c <__gethex+0x15c>
 800be56:	4620      	mov	r0, r4
 800be58:	1ea9      	subs	r1, r5, #2
 800be5a:	f000 fe5a 	bl	800cb12 <__any_on>
 800be5e:	2800      	cmp	r0, #0
 800be60:	d0c2      	beq.n	800bde8 <__gethex+0x1a8>
 800be62:	f04f 0903 	mov.w	r9, #3
 800be66:	e7c1      	b.n	800bdec <__gethex+0x1ac>
 800be68:	da09      	bge.n	800be7e <__gethex+0x23e>
 800be6a:	1b75      	subs	r5, r6, r5
 800be6c:	4621      	mov	r1, r4
 800be6e:	462a      	mov	r2, r5
 800be70:	9801      	ldr	r0, [sp, #4]
 800be72:	f000 fc1f 	bl	800c6b4 <__lshift>
 800be76:	4604      	mov	r4, r0
 800be78:	1b7f      	subs	r7, r7, r5
 800be7a:	f100 0a14 	add.w	sl, r0, #20
 800be7e:	f04f 0900 	mov.w	r9, #0
 800be82:	e7b8      	b.n	800bdf6 <__gethex+0x1b6>
 800be84:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800be88:	42bd      	cmp	r5, r7
 800be8a:	dd6f      	ble.n	800bf6c <__gethex+0x32c>
 800be8c:	1bed      	subs	r5, r5, r7
 800be8e:	42ae      	cmp	r6, r5
 800be90:	dc34      	bgt.n	800befc <__gethex+0x2bc>
 800be92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be96:	2b02      	cmp	r3, #2
 800be98:	d022      	beq.n	800bee0 <__gethex+0x2a0>
 800be9a:	2b03      	cmp	r3, #3
 800be9c:	d024      	beq.n	800bee8 <__gethex+0x2a8>
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d115      	bne.n	800bece <__gethex+0x28e>
 800bea2:	42ae      	cmp	r6, r5
 800bea4:	d113      	bne.n	800bece <__gethex+0x28e>
 800bea6:	2e01      	cmp	r6, #1
 800bea8:	d10b      	bne.n	800bec2 <__gethex+0x282>
 800beaa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800beae:	9a02      	ldr	r2, [sp, #8]
 800beb0:	2562      	movs	r5, #98	@ 0x62
 800beb2:	6013      	str	r3, [r2, #0]
 800beb4:	2301      	movs	r3, #1
 800beb6:	6123      	str	r3, [r4, #16]
 800beb8:	f8ca 3000 	str.w	r3, [sl]
 800bebc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bebe:	601c      	str	r4, [r3, #0]
 800bec0:	e73a      	b.n	800bd38 <__gethex+0xf8>
 800bec2:	4620      	mov	r0, r4
 800bec4:	1e71      	subs	r1, r6, #1
 800bec6:	f000 fe24 	bl	800cb12 <__any_on>
 800beca:	2800      	cmp	r0, #0
 800becc:	d1ed      	bne.n	800beaa <__gethex+0x26a>
 800bece:	4621      	mov	r1, r4
 800bed0:	9801      	ldr	r0, [sp, #4]
 800bed2:	f000 f9d9 	bl	800c288 <_Bfree>
 800bed6:	2300      	movs	r3, #0
 800bed8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800beda:	2550      	movs	r5, #80	@ 0x50
 800bedc:	6013      	str	r3, [r2, #0]
 800bede:	e72b      	b.n	800bd38 <__gethex+0xf8>
 800bee0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1f3      	bne.n	800bece <__gethex+0x28e>
 800bee6:	e7e0      	b.n	800beaa <__gethex+0x26a>
 800bee8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beea:	2b00      	cmp	r3, #0
 800beec:	d1dd      	bne.n	800beaa <__gethex+0x26a>
 800beee:	e7ee      	b.n	800bece <__gethex+0x28e>
 800bef0:	0800d7da 	.word	0x0800d7da
 800bef4:	0800df3a 	.word	0x0800df3a
 800bef8:	0800df4b 	.word	0x0800df4b
 800befc:	1e6f      	subs	r7, r5, #1
 800befe:	f1b9 0f00 	cmp.w	r9, #0
 800bf02:	d130      	bne.n	800bf66 <__gethex+0x326>
 800bf04:	b127      	cbz	r7, 800bf10 <__gethex+0x2d0>
 800bf06:	4639      	mov	r1, r7
 800bf08:	4620      	mov	r0, r4
 800bf0a:	f000 fe02 	bl	800cb12 <__any_on>
 800bf0e:	4681      	mov	r9, r0
 800bf10:	2301      	movs	r3, #1
 800bf12:	4629      	mov	r1, r5
 800bf14:	1b76      	subs	r6, r6, r5
 800bf16:	2502      	movs	r5, #2
 800bf18:	117a      	asrs	r2, r7, #5
 800bf1a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bf1e:	f007 071f 	and.w	r7, r7, #31
 800bf22:	40bb      	lsls	r3, r7
 800bf24:	4213      	tst	r3, r2
 800bf26:	4620      	mov	r0, r4
 800bf28:	bf18      	it	ne
 800bf2a:	f049 0902 	orrne.w	r9, r9, #2
 800bf2e:	f7ff fe1f 	bl	800bb70 <rshift>
 800bf32:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bf36:	f1b9 0f00 	cmp.w	r9, #0
 800bf3a:	d047      	beq.n	800bfcc <__gethex+0x38c>
 800bf3c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf40:	2b02      	cmp	r3, #2
 800bf42:	d015      	beq.n	800bf70 <__gethex+0x330>
 800bf44:	2b03      	cmp	r3, #3
 800bf46:	d017      	beq.n	800bf78 <__gethex+0x338>
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d109      	bne.n	800bf60 <__gethex+0x320>
 800bf4c:	f019 0f02 	tst.w	r9, #2
 800bf50:	d006      	beq.n	800bf60 <__gethex+0x320>
 800bf52:	f8da 3000 	ldr.w	r3, [sl]
 800bf56:	ea49 0903 	orr.w	r9, r9, r3
 800bf5a:	f019 0f01 	tst.w	r9, #1
 800bf5e:	d10e      	bne.n	800bf7e <__gethex+0x33e>
 800bf60:	f045 0510 	orr.w	r5, r5, #16
 800bf64:	e032      	b.n	800bfcc <__gethex+0x38c>
 800bf66:	f04f 0901 	mov.w	r9, #1
 800bf6a:	e7d1      	b.n	800bf10 <__gethex+0x2d0>
 800bf6c:	2501      	movs	r5, #1
 800bf6e:	e7e2      	b.n	800bf36 <__gethex+0x2f6>
 800bf70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf72:	f1c3 0301 	rsb	r3, r3, #1
 800bf76:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bf78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d0f0      	beq.n	800bf60 <__gethex+0x320>
 800bf7e:	f04f 0c00 	mov.w	ip, #0
 800bf82:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bf86:	f104 0314 	add.w	r3, r4, #20
 800bf8a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bf8e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bf92:	4618      	mov	r0, r3
 800bf94:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf98:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bf9c:	d01b      	beq.n	800bfd6 <__gethex+0x396>
 800bf9e:	3201      	adds	r2, #1
 800bfa0:	6002      	str	r2, [r0, #0]
 800bfa2:	2d02      	cmp	r5, #2
 800bfa4:	f104 0314 	add.w	r3, r4, #20
 800bfa8:	d13c      	bne.n	800c024 <__gethex+0x3e4>
 800bfaa:	f8d8 2000 	ldr.w	r2, [r8]
 800bfae:	3a01      	subs	r2, #1
 800bfb0:	42b2      	cmp	r2, r6
 800bfb2:	d109      	bne.n	800bfc8 <__gethex+0x388>
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	1171      	asrs	r1, r6, #5
 800bfb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bfbc:	f006 061f 	and.w	r6, r6, #31
 800bfc0:	fa02 f606 	lsl.w	r6, r2, r6
 800bfc4:	421e      	tst	r6, r3
 800bfc6:	d13a      	bne.n	800c03e <__gethex+0x3fe>
 800bfc8:	f045 0520 	orr.w	r5, r5, #32
 800bfcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfce:	601c      	str	r4, [r3, #0]
 800bfd0:	9b02      	ldr	r3, [sp, #8]
 800bfd2:	601f      	str	r7, [r3, #0]
 800bfd4:	e6b0      	b.n	800bd38 <__gethex+0xf8>
 800bfd6:	4299      	cmp	r1, r3
 800bfd8:	f843 cc04 	str.w	ip, [r3, #-4]
 800bfdc:	d8d9      	bhi.n	800bf92 <__gethex+0x352>
 800bfde:	68a3      	ldr	r3, [r4, #8]
 800bfe0:	459b      	cmp	fp, r3
 800bfe2:	db17      	blt.n	800c014 <__gethex+0x3d4>
 800bfe4:	6861      	ldr	r1, [r4, #4]
 800bfe6:	9801      	ldr	r0, [sp, #4]
 800bfe8:	3101      	adds	r1, #1
 800bfea:	f000 f90d 	bl	800c208 <_Balloc>
 800bfee:	4681      	mov	r9, r0
 800bff0:	b918      	cbnz	r0, 800bffa <__gethex+0x3ba>
 800bff2:	4602      	mov	r2, r0
 800bff4:	2184      	movs	r1, #132	@ 0x84
 800bff6:	4b19      	ldr	r3, [pc, #100]	@ (800c05c <__gethex+0x41c>)
 800bff8:	e6c5      	b.n	800bd86 <__gethex+0x146>
 800bffa:	6922      	ldr	r2, [r4, #16]
 800bffc:	f104 010c 	add.w	r1, r4, #12
 800c000:	3202      	adds	r2, #2
 800c002:	0092      	lsls	r2, r2, #2
 800c004:	300c      	adds	r0, #12
 800c006:	f7fe ff02 	bl	800ae0e <memcpy>
 800c00a:	4621      	mov	r1, r4
 800c00c:	9801      	ldr	r0, [sp, #4]
 800c00e:	f000 f93b 	bl	800c288 <_Bfree>
 800c012:	464c      	mov	r4, r9
 800c014:	6923      	ldr	r3, [r4, #16]
 800c016:	1c5a      	adds	r2, r3, #1
 800c018:	6122      	str	r2, [r4, #16]
 800c01a:	2201      	movs	r2, #1
 800c01c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c020:	615a      	str	r2, [r3, #20]
 800c022:	e7be      	b.n	800bfa2 <__gethex+0x362>
 800c024:	6922      	ldr	r2, [r4, #16]
 800c026:	455a      	cmp	r2, fp
 800c028:	dd0b      	ble.n	800c042 <__gethex+0x402>
 800c02a:	2101      	movs	r1, #1
 800c02c:	4620      	mov	r0, r4
 800c02e:	f7ff fd9f 	bl	800bb70 <rshift>
 800c032:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c036:	3701      	adds	r7, #1
 800c038:	42bb      	cmp	r3, r7
 800c03a:	f6ff aee0 	blt.w	800bdfe <__gethex+0x1be>
 800c03e:	2501      	movs	r5, #1
 800c040:	e7c2      	b.n	800bfc8 <__gethex+0x388>
 800c042:	f016 061f 	ands.w	r6, r6, #31
 800c046:	d0fa      	beq.n	800c03e <__gethex+0x3fe>
 800c048:	4453      	add	r3, sl
 800c04a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c04e:	f000 f9cd 	bl	800c3ec <__hi0bits>
 800c052:	f1c6 0620 	rsb	r6, r6, #32
 800c056:	42b0      	cmp	r0, r6
 800c058:	dbe7      	blt.n	800c02a <__gethex+0x3ea>
 800c05a:	e7f0      	b.n	800c03e <__gethex+0x3fe>
 800c05c:	0800df3a 	.word	0x0800df3a

0800c060 <L_shift>:
 800c060:	f1c2 0208 	rsb	r2, r2, #8
 800c064:	0092      	lsls	r2, r2, #2
 800c066:	b570      	push	{r4, r5, r6, lr}
 800c068:	f1c2 0620 	rsb	r6, r2, #32
 800c06c:	6843      	ldr	r3, [r0, #4]
 800c06e:	6804      	ldr	r4, [r0, #0]
 800c070:	fa03 f506 	lsl.w	r5, r3, r6
 800c074:	432c      	orrs	r4, r5
 800c076:	40d3      	lsrs	r3, r2
 800c078:	6004      	str	r4, [r0, #0]
 800c07a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c07e:	4288      	cmp	r0, r1
 800c080:	d3f4      	bcc.n	800c06c <L_shift+0xc>
 800c082:	bd70      	pop	{r4, r5, r6, pc}

0800c084 <__match>:
 800c084:	b530      	push	{r4, r5, lr}
 800c086:	6803      	ldr	r3, [r0, #0]
 800c088:	3301      	adds	r3, #1
 800c08a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c08e:	b914      	cbnz	r4, 800c096 <__match+0x12>
 800c090:	6003      	str	r3, [r0, #0]
 800c092:	2001      	movs	r0, #1
 800c094:	bd30      	pop	{r4, r5, pc}
 800c096:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c09a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c09e:	2d19      	cmp	r5, #25
 800c0a0:	bf98      	it	ls
 800c0a2:	3220      	addls	r2, #32
 800c0a4:	42a2      	cmp	r2, r4
 800c0a6:	d0f0      	beq.n	800c08a <__match+0x6>
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	e7f3      	b.n	800c094 <__match+0x10>

0800c0ac <__hexnan>:
 800c0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b0:	2500      	movs	r5, #0
 800c0b2:	680b      	ldr	r3, [r1, #0]
 800c0b4:	4682      	mov	sl, r0
 800c0b6:	115e      	asrs	r6, r3, #5
 800c0b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c0bc:	f013 031f 	ands.w	r3, r3, #31
 800c0c0:	bf18      	it	ne
 800c0c2:	3604      	addne	r6, #4
 800c0c4:	1f37      	subs	r7, r6, #4
 800c0c6:	4690      	mov	r8, r2
 800c0c8:	46b9      	mov	r9, r7
 800c0ca:	463c      	mov	r4, r7
 800c0cc:	46ab      	mov	fp, r5
 800c0ce:	b087      	sub	sp, #28
 800c0d0:	6801      	ldr	r1, [r0, #0]
 800c0d2:	9301      	str	r3, [sp, #4]
 800c0d4:	f846 5c04 	str.w	r5, [r6, #-4]
 800c0d8:	9502      	str	r5, [sp, #8]
 800c0da:	784a      	ldrb	r2, [r1, #1]
 800c0dc:	1c4b      	adds	r3, r1, #1
 800c0de:	9303      	str	r3, [sp, #12]
 800c0e0:	b342      	cbz	r2, 800c134 <__hexnan+0x88>
 800c0e2:	4610      	mov	r0, r2
 800c0e4:	9105      	str	r1, [sp, #20]
 800c0e6:	9204      	str	r2, [sp, #16]
 800c0e8:	f7ff fd95 	bl	800bc16 <__hexdig_fun>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	d151      	bne.n	800c194 <__hexnan+0xe8>
 800c0f0:	9a04      	ldr	r2, [sp, #16]
 800c0f2:	9905      	ldr	r1, [sp, #20]
 800c0f4:	2a20      	cmp	r2, #32
 800c0f6:	d818      	bhi.n	800c12a <__hexnan+0x7e>
 800c0f8:	9b02      	ldr	r3, [sp, #8]
 800c0fa:	459b      	cmp	fp, r3
 800c0fc:	dd13      	ble.n	800c126 <__hexnan+0x7a>
 800c0fe:	454c      	cmp	r4, r9
 800c100:	d206      	bcs.n	800c110 <__hexnan+0x64>
 800c102:	2d07      	cmp	r5, #7
 800c104:	dc04      	bgt.n	800c110 <__hexnan+0x64>
 800c106:	462a      	mov	r2, r5
 800c108:	4649      	mov	r1, r9
 800c10a:	4620      	mov	r0, r4
 800c10c:	f7ff ffa8 	bl	800c060 <L_shift>
 800c110:	4544      	cmp	r4, r8
 800c112:	d952      	bls.n	800c1ba <__hexnan+0x10e>
 800c114:	2300      	movs	r3, #0
 800c116:	f1a4 0904 	sub.w	r9, r4, #4
 800c11a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c11e:	461d      	mov	r5, r3
 800c120:	464c      	mov	r4, r9
 800c122:	f8cd b008 	str.w	fp, [sp, #8]
 800c126:	9903      	ldr	r1, [sp, #12]
 800c128:	e7d7      	b.n	800c0da <__hexnan+0x2e>
 800c12a:	2a29      	cmp	r2, #41	@ 0x29
 800c12c:	d157      	bne.n	800c1de <__hexnan+0x132>
 800c12e:	3102      	adds	r1, #2
 800c130:	f8ca 1000 	str.w	r1, [sl]
 800c134:	f1bb 0f00 	cmp.w	fp, #0
 800c138:	d051      	beq.n	800c1de <__hexnan+0x132>
 800c13a:	454c      	cmp	r4, r9
 800c13c:	d206      	bcs.n	800c14c <__hexnan+0xa0>
 800c13e:	2d07      	cmp	r5, #7
 800c140:	dc04      	bgt.n	800c14c <__hexnan+0xa0>
 800c142:	462a      	mov	r2, r5
 800c144:	4649      	mov	r1, r9
 800c146:	4620      	mov	r0, r4
 800c148:	f7ff ff8a 	bl	800c060 <L_shift>
 800c14c:	4544      	cmp	r4, r8
 800c14e:	d936      	bls.n	800c1be <__hexnan+0x112>
 800c150:	4623      	mov	r3, r4
 800c152:	f1a8 0204 	sub.w	r2, r8, #4
 800c156:	f853 1b04 	ldr.w	r1, [r3], #4
 800c15a:	429f      	cmp	r7, r3
 800c15c:	f842 1f04 	str.w	r1, [r2, #4]!
 800c160:	d2f9      	bcs.n	800c156 <__hexnan+0xaa>
 800c162:	1b3b      	subs	r3, r7, r4
 800c164:	f023 0303 	bic.w	r3, r3, #3
 800c168:	3304      	adds	r3, #4
 800c16a:	3401      	adds	r4, #1
 800c16c:	3e03      	subs	r6, #3
 800c16e:	42b4      	cmp	r4, r6
 800c170:	bf88      	it	hi
 800c172:	2304      	movhi	r3, #4
 800c174:	2200      	movs	r2, #0
 800c176:	4443      	add	r3, r8
 800c178:	f843 2b04 	str.w	r2, [r3], #4
 800c17c:	429f      	cmp	r7, r3
 800c17e:	d2fb      	bcs.n	800c178 <__hexnan+0xcc>
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	b91b      	cbnz	r3, 800c18c <__hexnan+0xe0>
 800c184:	4547      	cmp	r7, r8
 800c186:	d128      	bne.n	800c1da <__hexnan+0x12e>
 800c188:	2301      	movs	r3, #1
 800c18a:	603b      	str	r3, [r7, #0]
 800c18c:	2005      	movs	r0, #5
 800c18e:	b007      	add	sp, #28
 800c190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c194:	3501      	adds	r5, #1
 800c196:	2d08      	cmp	r5, #8
 800c198:	f10b 0b01 	add.w	fp, fp, #1
 800c19c:	dd06      	ble.n	800c1ac <__hexnan+0x100>
 800c19e:	4544      	cmp	r4, r8
 800c1a0:	d9c1      	bls.n	800c126 <__hexnan+0x7a>
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	2501      	movs	r5, #1
 800c1a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c1aa:	3c04      	subs	r4, #4
 800c1ac:	6822      	ldr	r2, [r4, #0]
 800c1ae:	f000 000f 	and.w	r0, r0, #15
 800c1b2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c1b6:	6020      	str	r0, [r4, #0]
 800c1b8:	e7b5      	b.n	800c126 <__hexnan+0x7a>
 800c1ba:	2508      	movs	r5, #8
 800c1bc:	e7b3      	b.n	800c126 <__hexnan+0x7a>
 800c1be:	9b01      	ldr	r3, [sp, #4]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d0dd      	beq.n	800c180 <__hexnan+0xd4>
 800c1c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1c8:	f1c3 0320 	rsb	r3, r3, #32
 800c1cc:	40da      	lsrs	r2, r3
 800c1ce:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c1d2:	4013      	ands	r3, r2
 800c1d4:	f846 3c04 	str.w	r3, [r6, #-4]
 800c1d8:	e7d2      	b.n	800c180 <__hexnan+0xd4>
 800c1da:	3f04      	subs	r7, #4
 800c1dc:	e7d0      	b.n	800c180 <__hexnan+0xd4>
 800c1de:	2004      	movs	r0, #4
 800c1e0:	e7d5      	b.n	800c18e <__hexnan+0xe2>

0800c1e2 <__ascii_mbtowc>:
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	b901      	cbnz	r1, 800c1e8 <__ascii_mbtowc+0x6>
 800c1e6:	a901      	add	r1, sp, #4
 800c1e8:	b142      	cbz	r2, 800c1fc <__ascii_mbtowc+0x1a>
 800c1ea:	b14b      	cbz	r3, 800c200 <__ascii_mbtowc+0x1e>
 800c1ec:	7813      	ldrb	r3, [r2, #0]
 800c1ee:	600b      	str	r3, [r1, #0]
 800c1f0:	7812      	ldrb	r2, [r2, #0]
 800c1f2:	1e10      	subs	r0, r2, #0
 800c1f4:	bf18      	it	ne
 800c1f6:	2001      	movne	r0, #1
 800c1f8:	b002      	add	sp, #8
 800c1fa:	4770      	bx	lr
 800c1fc:	4610      	mov	r0, r2
 800c1fe:	e7fb      	b.n	800c1f8 <__ascii_mbtowc+0x16>
 800c200:	f06f 0001 	mvn.w	r0, #1
 800c204:	e7f8      	b.n	800c1f8 <__ascii_mbtowc+0x16>
	...

0800c208 <_Balloc>:
 800c208:	b570      	push	{r4, r5, r6, lr}
 800c20a:	69c6      	ldr	r6, [r0, #28]
 800c20c:	4604      	mov	r4, r0
 800c20e:	460d      	mov	r5, r1
 800c210:	b976      	cbnz	r6, 800c230 <_Balloc+0x28>
 800c212:	2010      	movs	r0, #16
 800c214:	f7fc fdc4 	bl	8008da0 <malloc>
 800c218:	4602      	mov	r2, r0
 800c21a:	61e0      	str	r0, [r4, #28]
 800c21c:	b920      	cbnz	r0, 800c228 <_Balloc+0x20>
 800c21e:	216b      	movs	r1, #107	@ 0x6b
 800c220:	4b17      	ldr	r3, [pc, #92]	@ (800c280 <_Balloc+0x78>)
 800c222:	4818      	ldr	r0, [pc, #96]	@ (800c284 <_Balloc+0x7c>)
 800c224:	f001 f890 	bl	800d348 <__assert_func>
 800c228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c22c:	6006      	str	r6, [r0, #0]
 800c22e:	60c6      	str	r6, [r0, #12]
 800c230:	69e6      	ldr	r6, [r4, #28]
 800c232:	68f3      	ldr	r3, [r6, #12]
 800c234:	b183      	cbz	r3, 800c258 <_Balloc+0x50>
 800c236:	69e3      	ldr	r3, [r4, #28]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c23e:	b9b8      	cbnz	r0, 800c270 <_Balloc+0x68>
 800c240:	2101      	movs	r1, #1
 800c242:	fa01 f605 	lsl.w	r6, r1, r5
 800c246:	1d72      	adds	r2, r6, #5
 800c248:	4620      	mov	r0, r4
 800c24a:	0092      	lsls	r2, r2, #2
 800c24c:	f001 f89a 	bl	800d384 <_calloc_r>
 800c250:	b160      	cbz	r0, 800c26c <_Balloc+0x64>
 800c252:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c256:	e00e      	b.n	800c276 <_Balloc+0x6e>
 800c258:	2221      	movs	r2, #33	@ 0x21
 800c25a:	2104      	movs	r1, #4
 800c25c:	4620      	mov	r0, r4
 800c25e:	f001 f891 	bl	800d384 <_calloc_r>
 800c262:	69e3      	ldr	r3, [r4, #28]
 800c264:	60f0      	str	r0, [r6, #12]
 800c266:	68db      	ldr	r3, [r3, #12]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d1e4      	bne.n	800c236 <_Balloc+0x2e>
 800c26c:	2000      	movs	r0, #0
 800c26e:	bd70      	pop	{r4, r5, r6, pc}
 800c270:	6802      	ldr	r2, [r0, #0]
 800c272:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c276:	2300      	movs	r3, #0
 800c278:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c27c:	e7f7      	b.n	800c26e <_Balloc+0x66>
 800c27e:	bf00      	nop
 800c280:	0800decb 	.word	0x0800decb
 800c284:	0800dfab 	.word	0x0800dfab

0800c288 <_Bfree>:
 800c288:	b570      	push	{r4, r5, r6, lr}
 800c28a:	69c6      	ldr	r6, [r0, #28]
 800c28c:	4605      	mov	r5, r0
 800c28e:	460c      	mov	r4, r1
 800c290:	b976      	cbnz	r6, 800c2b0 <_Bfree+0x28>
 800c292:	2010      	movs	r0, #16
 800c294:	f7fc fd84 	bl	8008da0 <malloc>
 800c298:	4602      	mov	r2, r0
 800c29a:	61e8      	str	r0, [r5, #28]
 800c29c:	b920      	cbnz	r0, 800c2a8 <_Bfree+0x20>
 800c29e:	218f      	movs	r1, #143	@ 0x8f
 800c2a0:	4b08      	ldr	r3, [pc, #32]	@ (800c2c4 <_Bfree+0x3c>)
 800c2a2:	4809      	ldr	r0, [pc, #36]	@ (800c2c8 <_Bfree+0x40>)
 800c2a4:	f001 f850 	bl	800d348 <__assert_func>
 800c2a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2ac:	6006      	str	r6, [r0, #0]
 800c2ae:	60c6      	str	r6, [r0, #12]
 800c2b0:	b13c      	cbz	r4, 800c2c2 <_Bfree+0x3a>
 800c2b2:	69eb      	ldr	r3, [r5, #28]
 800c2b4:	6862      	ldr	r2, [r4, #4]
 800c2b6:	68db      	ldr	r3, [r3, #12]
 800c2b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c2bc:	6021      	str	r1, [r4, #0]
 800c2be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c2c2:	bd70      	pop	{r4, r5, r6, pc}
 800c2c4:	0800decb 	.word	0x0800decb
 800c2c8:	0800dfab 	.word	0x0800dfab

0800c2cc <__multadd>:
 800c2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d0:	4607      	mov	r7, r0
 800c2d2:	460c      	mov	r4, r1
 800c2d4:	461e      	mov	r6, r3
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	690d      	ldr	r5, [r1, #16]
 800c2da:	f101 0c14 	add.w	ip, r1, #20
 800c2de:	f8dc 3000 	ldr.w	r3, [ip]
 800c2e2:	3001      	adds	r0, #1
 800c2e4:	b299      	uxth	r1, r3
 800c2e6:	fb02 6101 	mla	r1, r2, r1, r6
 800c2ea:	0c1e      	lsrs	r6, r3, #16
 800c2ec:	0c0b      	lsrs	r3, r1, #16
 800c2ee:	fb02 3306 	mla	r3, r2, r6, r3
 800c2f2:	b289      	uxth	r1, r1
 800c2f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c2f8:	4285      	cmp	r5, r0
 800c2fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c2fe:	f84c 1b04 	str.w	r1, [ip], #4
 800c302:	dcec      	bgt.n	800c2de <__multadd+0x12>
 800c304:	b30e      	cbz	r6, 800c34a <__multadd+0x7e>
 800c306:	68a3      	ldr	r3, [r4, #8]
 800c308:	42ab      	cmp	r3, r5
 800c30a:	dc19      	bgt.n	800c340 <__multadd+0x74>
 800c30c:	6861      	ldr	r1, [r4, #4]
 800c30e:	4638      	mov	r0, r7
 800c310:	3101      	adds	r1, #1
 800c312:	f7ff ff79 	bl	800c208 <_Balloc>
 800c316:	4680      	mov	r8, r0
 800c318:	b928      	cbnz	r0, 800c326 <__multadd+0x5a>
 800c31a:	4602      	mov	r2, r0
 800c31c:	21ba      	movs	r1, #186	@ 0xba
 800c31e:	4b0c      	ldr	r3, [pc, #48]	@ (800c350 <__multadd+0x84>)
 800c320:	480c      	ldr	r0, [pc, #48]	@ (800c354 <__multadd+0x88>)
 800c322:	f001 f811 	bl	800d348 <__assert_func>
 800c326:	6922      	ldr	r2, [r4, #16]
 800c328:	f104 010c 	add.w	r1, r4, #12
 800c32c:	3202      	adds	r2, #2
 800c32e:	0092      	lsls	r2, r2, #2
 800c330:	300c      	adds	r0, #12
 800c332:	f7fe fd6c 	bl	800ae0e <memcpy>
 800c336:	4621      	mov	r1, r4
 800c338:	4638      	mov	r0, r7
 800c33a:	f7ff ffa5 	bl	800c288 <_Bfree>
 800c33e:	4644      	mov	r4, r8
 800c340:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c344:	3501      	adds	r5, #1
 800c346:	615e      	str	r6, [r3, #20]
 800c348:	6125      	str	r5, [r4, #16]
 800c34a:	4620      	mov	r0, r4
 800c34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c350:	0800df3a 	.word	0x0800df3a
 800c354:	0800dfab 	.word	0x0800dfab

0800c358 <__s2b>:
 800c358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c35c:	4615      	mov	r5, r2
 800c35e:	2209      	movs	r2, #9
 800c360:	461f      	mov	r7, r3
 800c362:	3308      	adds	r3, #8
 800c364:	460c      	mov	r4, r1
 800c366:	fb93 f3f2 	sdiv	r3, r3, r2
 800c36a:	4606      	mov	r6, r0
 800c36c:	2201      	movs	r2, #1
 800c36e:	2100      	movs	r1, #0
 800c370:	429a      	cmp	r2, r3
 800c372:	db09      	blt.n	800c388 <__s2b+0x30>
 800c374:	4630      	mov	r0, r6
 800c376:	f7ff ff47 	bl	800c208 <_Balloc>
 800c37a:	b940      	cbnz	r0, 800c38e <__s2b+0x36>
 800c37c:	4602      	mov	r2, r0
 800c37e:	21d3      	movs	r1, #211	@ 0xd3
 800c380:	4b18      	ldr	r3, [pc, #96]	@ (800c3e4 <__s2b+0x8c>)
 800c382:	4819      	ldr	r0, [pc, #100]	@ (800c3e8 <__s2b+0x90>)
 800c384:	f000 ffe0 	bl	800d348 <__assert_func>
 800c388:	0052      	lsls	r2, r2, #1
 800c38a:	3101      	adds	r1, #1
 800c38c:	e7f0      	b.n	800c370 <__s2b+0x18>
 800c38e:	9b08      	ldr	r3, [sp, #32]
 800c390:	2d09      	cmp	r5, #9
 800c392:	6143      	str	r3, [r0, #20]
 800c394:	f04f 0301 	mov.w	r3, #1
 800c398:	6103      	str	r3, [r0, #16]
 800c39a:	dd16      	ble.n	800c3ca <__s2b+0x72>
 800c39c:	f104 0909 	add.w	r9, r4, #9
 800c3a0:	46c8      	mov	r8, r9
 800c3a2:	442c      	add	r4, r5
 800c3a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c3a8:	4601      	mov	r1, r0
 800c3aa:	220a      	movs	r2, #10
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	3b30      	subs	r3, #48	@ 0x30
 800c3b0:	f7ff ff8c 	bl	800c2cc <__multadd>
 800c3b4:	45a0      	cmp	r8, r4
 800c3b6:	d1f5      	bne.n	800c3a4 <__s2b+0x4c>
 800c3b8:	f1a5 0408 	sub.w	r4, r5, #8
 800c3bc:	444c      	add	r4, r9
 800c3be:	1b2d      	subs	r5, r5, r4
 800c3c0:	1963      	adds	r3, r4, r5
 800c3c2:	42bb      	cmp	r3, r7
 800c3c4:	db04      	blt.n	800c3d0 <__s2b+0x78>
 800c3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3ca:	2509      	movs	r5, #9
 800c3cc:	340a      	adds	r4, #10
 800c3ce:	e7f6      	b.n	800c3be <__s2b+0x66>
 800c3d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c3d4:	4601      	mov	r1, r0
 800c3d6:	220a      	movs	r2, #10
 800c3d8:	4630      	mov	r0, r6
 800c3da:	3b30      	subs	r3, #48	@ 0x30
 800c3dc:	f7ff ff76 	bl	800c2cc <__multadd>
 800c3e0:	e7ee      	b.n	800c3c0 <__s2b+0x68>
 800c3e2:	bf00      	nop
 800c3e4:	0800df3a 	.word	0x0800df3a
 800c3e8:	0800dfab 	.word	0x0800dfab

0800c3ec <__hi0bits>:
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c3f2:	bf3a      	itte	cc
 800c3f4:	0403      	lslcc	r3, r0, #16
 800c3f6:	2010      	movcc	r0, #16
 800c3f8:	2000      	movcs	r0, #0
 800c3fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c3fe:	bf3c      	itt	cc
 800c400:	021b      	lslcc	r3, r3, #8
 800c402:	3008      	addcc	r0, #8
 800c404:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c408:	bf3c      	itt	cc
 800c40a:	011b      	lslcc	r3, r3, #4
 800c40c:	3004      	addcc	r0, #4
 800c40e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c412:	bf3c      	itt	cc
 800c414:	009b      	lslcc	r3, r3, #2
 800c416:	3002      	addcc	r0, #2
 800c418:	2b00      	cmp	r3, #0
 800c41a:	db05      	blt.n	800c428 <__hi0bits+0x3c>
 800c41c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c420:	f100 0001 	add.w	r0, r0, #1
 800c424:	bf08      	it	eq
 800c426:	2020      	moveq	r0, #32
 800c428:	4770      	bx	lr

0800c42a <__lo0bits>:
 800c42a:	6803      	ldr	r3, [r0, #0]
 800c42c:	4602      	mov	r2, r0
 800c42e:	f013 0007 	ands.w	r0, r3, #7
 800c432:	d00b      	beq.n	800c44c <__lo0bits+0x22>
 800c434:	07d9      	lsls	r1, r3, #31
 800c436:	d421      	bmi.n	800c47c <__lo0bits+0x52>
 800c438:	0798      	lsls	r0, r3, #30
 800c43a:	bf49      	itett	mi
 800c43c:	085b      	lsrmi	r3, r3, #1
 800c43e:	089b      	lsrpl	r3, r3, #2
 800c440:	2001      	movmi	r0, #1
 800c442:	6013      	strmi	r3, [r2, #0]
 800c444:	bf5c      	itt	pl
 800c446:	2002      	movpl	r0, #2
 800c448:	6013      	strpl	r3, [r2, #0]
 800c44a:	4770      	bx	lr
 800c44c:	b299      	uxth	r1, r3
 800c44e:	b909      	cbnz	r1, 800c454 <__lo0bits+0x2a>
 800c450:	2010      	movs	r0, #16
 800c452:	0c1b      	lsrs	r3, r3, #16
 800c454:	b2d9      	uxtb	r1, r3
 800c456:	b909      	cbnz	r1, 800c45c <__lo0bits+0x32>
 800c458:	3008      	adds	r0, #8
 800c45a:	0a1b      	lsrs	r3, r3, #8
 800c45c:	0719      	lsls	r1, r3, #28
 800c45e:	bf04      	itt	eq
 800c460:	091b      	lsreq	r3, r3, #4
 800c462:	3004      	addeq	r0, #4
 800c464:	0799      	lsls	r1, r3, #30
 800c466:	bf04      	itt	eq
 800c468:	089b      	lsreq	r3, r3, #2
 800c46a:	3002      	addeq	r0, #2
 800c46c:	07d9      	lsls	r1, r3, #31
 800c46e:	d403      	bmi.n	800c478 <__lo0bits+0x4e>
 800c470:	085b      	lsrs	r3, r3, #1
 800c472:	f100 0001 	add.w	r0, r0, #1
 800c476:	d003      	beq.n	800c480 <__lo0bits+0x56>
 800c478:	6013      	str	r3, [r2, #0]
 800c47a:	4770      	bx	lr
 800c47c:	2000      	movs	r0, #0
 800c47e:	4770      	bx	lr
 800c480:	2020      	movs	r0, #32
 800c482:	4770      	bx	lr

0800c484 <__i2b>:
 800c484:	b510      	push	{r4, lr}
 800c486:	460c      	mov	r4, r1
 800c488:	2101      	movs	r1, #1
 800c48a:	f7ff febd 	bl	800c208 <_Balloc>
 800c48e:	4602      	mov	r2, r0
 800c490:	b928      	cbnz	r0, 800c49e <__i2b+0x1a>
 800c492:	f240 1145 	movw	r1, #325	@ 0x145
 800c496:	4b04      	ldr	r3, [pc, #16]	@ (800c4a8 <__i2b+0x24>)
 800c498:	4804      	ldr	r0, [pc, #16]	@ (800c4ac <__i2b+0x28>)
 800c49a:	f000 ff55 	bl	800d348 <__assert_func>
 800c49e:	2301      	movs	r3, #1
 800c4a0:	6144      	str	r4, [r0, #20]
 800c4a2:	6103      	str	r3, [r0, #16]
 800c4a4:	bd10      	pop	{r4, pc}
 800c4a6:	bf00      	nop
 800c4a8:	0800df3a 	.word	0x0800df3a
 800c4ac:	0800dfab 	.word	0x0800dfab

0800c4b0 <__multiply>:
 800c4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b4:	4614      	mov	r4, r2
 800c4b6:	690a      	ldr	r2, [r1, #16]
 800c4b8:	6923      	ldr	r3, [r4, #16]
 800c4ba:	460f      	mov	r7, r1
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	bfa2      	ittt	ge
 800c4c0:	4623      	movge	r3, r4
 800c4c2:	460c      	movge	r4, r1
 800c4c4:	461f      	movge	r7, r3
 800c4c6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c4ca:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c4ce:	68a3      	ldr	r3, [r4, #8]
 800c4d0:	6861      	ldr	r1, [r4, #4]
 800c4d2:	eb0a 0609 	add.w	r6, sl, r9
 800c4d6:	42b3      	cmp	r3, r6
 800c4d8:	b085      	sub	sp, #20
 800c4da:	bfb8      	it	lt
 800c4dc:	3101      	addlt	r1, #1
 800c4de:	f7ff fe93 	bl	800c208 <_Balloc>
 800c4e2:	b930      	cbnz	r0, 800c4f2 <__multiply+0x42>
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c4ea:	4b43      	ldr	r3, [pc, #268]	@ (800c5f8 <__multiply+0x148>)
 800c4ec:	4843      	ldr	r0, [pc, #268]	@ (800c5fc <__multiply+0x14c>)
 800c4ee:	f000 ff2b 	bl	800d348 <__assert_func>
 800c4f2:	f100 0514 	add.w	r5, r0, #20
 800c4f6:	462b      	mov	r3, r5
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c4fe:	4543      	cmp	r3, r8
 800c500:	d321      	bcc.n	800c546 <__multiply+0x96>
 800c502:	f107 0114 	add.w	r1, r7, #20
 800c506:	f104 0214 	add.w	r2, r4, #20
 800c50a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c50e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c512:	9302      	str	r3, [sp, #8]
 800c514:	1b13      	subs	r3, r2, r4
 800c516:	3b15      	subs	r3, #21
 800c518:	f023 0303 	bic.w	r3, r3, #3
 800c51c:	3304      	adds	r3, #4
 800c51e:	f104 0715 	add.w	r7, r4, #21
 800c522:	42ba      	cmp	r2, r7
 800c524:	bf38      	it	cc
 800c526:	2304      	movcc	r3, #4
 800c528:	9301      	str	r3, [sp, #4]
 800c52a:	9b02      	ldr	r3, [sp, #8]
 800c52c:	9103      	str	r1, [sp, #12]
 800c52e:	428b      	cmp	r3, r1
 800c530:	d80c      	bhi.n	800c54c <__multiply+0x9c>
 800c532:	2e00      	cmp	r6, #0
 800c534:	dd03      	ble.n	800c53e <__multiply+0x8e>
 800c536:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d05a      	beq.n	800c5f4 <__multiply+0x144>
 800c53e:	6106      	str	r6, [r0, #16]
 800c540:	b005      	add	sp, #20
 800c542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c546:	f843 2b04 	str.w	r2, [r3], #4
 800c54a:	e7d8      	b.n	800c4fe <__multiply+0x4e>
 800c54c:	f8b1 a000 	ldrh.w	sl, [r1]
 800c550:	f1ba 0f00 	cmp.w	sl, #0
 800c554:	d023      	beq.n	800c59e <__multiply+0xee>
 800c556:	46a9      	mov	r9, r5
 800c558:	f04f 0c00 	mov.w	ip, #0
 800c55c:	f104 0e14 	add.w	lr, r4, #20
 800c560:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c564:	f8d9 3000 	ldr.w	r3, [r9]
 800c568:	fa1f fb87 	uxth.w	fp, r7
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	fb0a 330b 	mla	r3, sl, fp, r3
 800c572:	4463      	add	r3, ip
 800c574:	f8d9 c000 	ldr.w	ip, [r9]
 800c578:	0c3f      	lsrs	r7, r7, #16
 800c57a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c57e:	fb0a c707 	mla	r7, sl, r7, ip
 800c582:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c586:	b29b      	uxth	r3, r3
 800c588:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c58c:	4572      	cmp	r2, lr
 800c58e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c592:	f849 3b04 	str.w	r3, [r9], #4
 800c596:	d8e3      	bhi.n	800c560 <__multiply+0xb0>
 800c598:	9b01      	ldr	r3, [sp, #4]
 800c59a:	f845 c003 	str.w	ip, [r5, r3]
 800c59e:	9b03      	ldr	r3, [sp, #12]
 800c5a0:	3104      	adds	r1, #4
 800c5a2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c5a6:	f1b9 0f00 	cmp.w	r9, #0
 800c5aa:	d021      	beq.n	800c5f0 <__multiply+0x140>
 800c5ac:	46ae      	mov	lr, r5
 800c5ae:	f04f 0a00 	mov.w	sl, #0
 800c5b2:	682b      	ldr	r3, [r5, #0]
 800c5b4:	f104 0c14 	add.w	ip, r4, #20
 800c5b8:	f8bc b000 	ldrh.w	fp, [ip]
 800c5bc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	fb09 770b 	mla	r7, r9, fp, r7
 800c5c6:	4457      	add	r7, sl
 800c5c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c5cc:	f84e 3b04 	str.w	r3, [lr], #4
 800c5d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c5d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5d8:	f8be 3000 	ldrh.w	r3, [lr]
 800c5dc:	4562      	cmp	r2, ip
 800c5de:	fb09 330a 	mla	r3, r9, sl, r3
 800c5e2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c5e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5ea:	d8e5      	bhi.n	800c5b8 <__multiply+0x108>
 800c5ec:	9f01      	ldr	r7, [sp, #4]
 800c5ee:	51eb      	str	r3, [r5, r7]
 800c5f0:	3504      	adds	r5, #4
 800c5f2:	e79a      	b.n	800c52a <__multiply+0x7a>
 800c5f4:	3e01      	subs	r6, #1
 800c5f6:	e79c      	b.n	800c532 <__multiply+0x82>
 800c5f8:	0800df3a 	.word	0x0800df3a
 800c5fc:	0800dfab 	.word	0x0800dfab

0800c600 <__pow5mult>:
 800c600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c604:	4615      	mov	r5, r2
 800c606:	f012 0203 	ands.w	r2, r2, #3
 800c60a:	4607      	mov	r7, r0
 800c60c:	460e      	mov	r6, r1
 800c60e:	d007      	beq.n	800c620 <__pow5mult+0x20>
 800c610:	4c25      	ldr	r4, [pc, #148]	@ (800c6a8 <__pow5mult+0xa8>)
 800c612:	3a01      	subs	r2, #1
 800c614:	2300      	movs	r3, #0
 800c616:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c61a:	f7ff fe57 	bl	800c2cc <__multadd>
 800c61e:	4606      	mov	r6, r0
 800c620:	10ad      	asrs	r5, r5, #2
 800c622:	d03d      	beq.n	800c6a0 <__pow5mult+0xa0>
 800c624:	69fc      	ldr	r4, [r7, #28]
 800c626:	b97c      	cbnz	r4, 800c648 <__pow5mult+0x48>
 800c628:	2010      	movs	r0, #16
 800c62a:	f7fc fbb9 	bl	8008da0 <malloc>
 800c62e:	4602      	mov	r2, r0
 800c630:	61f8      	str	r0, [r7, #28]
 800c632:	b928      	cbnz	r0, 800c640 <__pow5mult+0x40>
 800c634:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c638:	4b1c      	ldr	r3, [pc, #112]	@ (800c6ac <__pow5mult+0xac>)
 800c63a:	481d      	ldr	r0, [pc, #116]	@ (800c6b0 <__pow5mult+0xb0>)
 800c63c:	f000 fe84 	bl	800d348 <__assert_func>
 800c640:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c644:	6004      	str	r4, [r0, #0]
 800c646:	60c4      	str	r4, [r0, #12]
 800c648:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c64c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c650:	b94c      	cbnz	r4, 800c666 <__pow5mult+0x66>
 800c652:	f240 2171 	movw	r1, #625	@ 0x271
 800c656:	4638      	mov	r0, r7
 800c658:	f7ff ff14 	bl	800c484 <__i2b>
 800c65c:	2300      	movs	r3, #0
 800c65e:	4604      	mov	r4, r0
 800c660:	f8c8 0008 	str.w	r0, [r8, #8]
 800c664:	6003      	str	r3, [r0, #0]
 800c666:	f04f 0900 	mov.w	r9, #0
 800c66a:	07eb      	lsls	r3, r5, #31
 800c66c:	d50a      	bpl.n	800c684 <__pow5mult+0x84>
 800c66e:	4631      	mov	r1, r6
 800c670:	4622      	mov	r2, r4
 800c672:	4638      	mov	r0, r7
 800c674:	f7ff ff1c 	bl	800c4b0 <__multiply>
 800c678:	4680      	mov	r8, r0
 800c67a:	4631      	mov	r1, r6
 800c67c:	4638      	mov	r0, r7
 800c67e:	f7ff fe03 	bl	800c288 <_Bfree>
 800c682:	4646      	mov	r6, r8
 800c684:	106d      	asrs	r5, r5, #1
 800c686:	d00b      	beq.n	800c6a0 <__pow5mult+0xa0>
 800c688:	6820      	ldr	r0, [r4, #0]
 800c68a:	b938      	cbnz	r0, 800c69c <__pow5mult+0x9c>
 800c68c:	4622      	mov	r2, r4
 800c68e:	4621      	mov	r1, r4
 800c690:	4638      	mov	r0, r7
 800c692:	f7ff ff0d 	bl	800c4b0 <__multiply>
 800c696:	6020      	str	r0, [r4, #0]
 800c698:	f8c0 9000 	str.w	r9, [r0]
 800c69c:	4604      	mov	r4, r0
 800c69e:	e7e4      	b.n	800c66a <__pow5mult+0x6a>
 800c6a0:	4630      	mov	r0, r6
 800c6a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6a6:	bf00      	nop
 800c6a8:	0800e004 	.word	0x0800e004
 800c6ac:	0800decb 	.word	0x0800decb
 800c6b0:	0800dfab 	.word	0x0800dfab

0800c6b4 <__lshift>:
 800c6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6b8:	460c      	mov	r4, r1
 800c6ba:	4607      	mov	r7, r0
 800c6bc:	4691      	mov	r9, r2
 800c6be:	6923      	ldr	r3, [r4, #16]
 800c6c0:	6849      	ldr	r1, [r1, #4]
 800c6c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c6c6:	68a3      	ldr	r3, [r4, #8]
 800c6c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6cc:	f108 0601 	add.w	r6, r8, #1
 800c6d0:	42b3      	cmp	r3, r6
 800c6d2:	db0b      	blt.n	800c6ec <__lshift+0x38>
 800c6d4:	4638      	mov	r0, r7
 800c6d6:	f7ff fd97 	bl	800c208 <_Balloc>
 800c6da:	4605      	mov	r5, r0
 800c6dc:	b948      	cbnz	r0, 800c6f2 <__lshift+0x3e>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c6e4:	4b27      	ldr	r3, [pc, #156]	@ (800c784 <__lshift+0xd0>)
 800c6e6:	4828      	ldr	r0, [pc, #160]	@ (800c788 <__lshift+0xd4>)
 800c6e8:	f000 fe2e 	bl	800d348 <__assert_func>
 800c6ec:	3101      	adds	r1, #1
 800c6ee:	005b      	lsls	r3, r3, #1
 800c6f0:	e7ee      	b.n	800c6d0 <__lshift+0x1c>
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	f100 0114 	add.w	r1, r0, #20
 800c6f8:	f100 0210 	add.w	r2, r0, #16
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	4553      	cmp	r3, sl
 800c700:	db33      	blt.n	800c76a <__lshift+0xb6>
 800c702:	6920      	ldr	r0, [r4, #16]
 800c704:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c708:	f104 0314 	add.w	r3, r4, #20
 800c70c:	f019 091f 	ands.w	r9, r9, #31
 800c710:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c714:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c718:	d02b      	beq.n	800c772 <__lshift+0xbe>
 800c71a:	468a      	mov	sl, r1
 800c71c:	2200      	movs	r2, #0
 800c71e:	f1c9 0e20 	rsb	lr, r9, #32
 800c722:	6818      	ldr	r0, [r3, #0]
 800c724:	fa00 f009 	lsl.w	r0, r0, r9
 800c728:	4310      	orrs	r0, r2
 800c72a:	f84a 0b04 	str.w	r0, [sl], #4
 800c72e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c732:	459c      	cmp	ip, r3
 800c734:	fa22 f20e 	lsr.w	r2, r2, lr
 800c738:	d8f3      	bhi.n	800c722 <__lshift+0x6e>
 800c73a:	ebac 0304 	sub.w	r3, ip, r4
 800c73e:	3b15      	subs	r3, #21
 800c740:	f023 0303 	bic.w	r3, r3, #3
 800c744:	3304      	adds	r3, #4
 800c746:	f104 0015 	add.w	r0, r4, #21
 800c74a:	4584      	cmp	ip, r0
 800c74c:	bf38      	it	cc
 800c74e:	2304      	movcc	r3, #4
 800c750:	50ca      	str	r2, [r1, r3]
 800c752:	b10a      	cbz	r2, 800c758 <__lshift+0xa4>
 800c754:	f108 0602 	add.w	r6, r8, #2
 800c758:	3e01      	subs	r6, #1
 800c75a:	4638      	mov	r0, r7
 800c75c:	4621      	mov	r1, r4
 800c75e:	612e      	str	r6, [r5, #16]
 800c760:	f7ff fd92 	bl	800c288 <_Bfree>
 800c764:	4628      	mov	r0, r5
 800c766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c76a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c76e:	3301      	adds	r3, #1
 800c770:	e7c5      	b.n	800c6fe <__lshift+0x4a>
 800c772:	3904      	subs	r1, #4
 800c774:	f853 2b04 	ldr.w	r2, [r3], #4
 800c778:	459c      	cmp	ip, r3
 800c77a:	f841 2f04 	str.w	r2, [r1, #4]!
 800c77e:	d8f9      	bhi.n	800c774 <__lshift+0xc0>
 800c780:	e7ea      	b.n	800c758 <__lshift+0xa4>
 800c782:	bf00      	nop
 800c784:	0800df3a 	.word	0x0800df3a
 800c788:	0800dfab 	.word	0x0800dfab

0800c78c <__mcmp>:
 800c78c:	4603      	mov	r3, r0
 800c78e:	690a      	ldr	r2, [r1, #16]
 800c790:	6900      	ldr	r0, [r0, #16]
 800c792:	b530      	push	{r4, r5, lr}
 800c794:	1a80      	subs	r0, r0, r2
 800c796:	d10e      	bne.n	800c7b6 <__mcmp+0x2a>
 800c798:	3314      	adds	r3, #20
 800c79a:	3114      	adds	r1, #20
 800c79c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c7a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c7a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c7a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c7ac:	4295      	cmp	r5, r2
 800c7ae:	d003      	beq.n	800c7b8 <__mcmp+0x2c>
 800c7b0:	d205      	bcs.n	800c7be <__mcmp+0x32>
 800c7b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b6:	bd30      	pop	{r4, r5, pc}
 800c7b8:	42a3      	cmp	r3, r4
 800c7ba:	d3f3      	bcc.n	800c7a4 <__mcmp+0x18>
 800c7bc:	e7fb      	b.n	800c7b6 <__mcmp+0x2a>
 800c7be:	2001      	movs	r0, #1
 800c7c0:	e7f9      	b.n	800c7b6 <__mcmp+0x2a>
	...

0800c7c4 <__mdiff>:
 800c7c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c8:	4689      	mov	r9, r1
 800c7ca:	4606      	mov	r6, r0
 800c7cc:	4611      	mov	r1, r2
 800c7ce:	4648      	mov	r0, r9
 800c7d0:	4614      	mov	r4, r2
 800c7d2:	f7ff ffdb 	bl	800c78c <__mcmp>
 800c7d6:	1e05      	subs	r5, r0, #0
 800c7d8:	d112      	bne.n	800c800 <__mdiff+0x3c>
 800c7da:	4629      	mov	r1, r5
 800c7dc:	4630      	mov	r0, r6
 800c7de:	f7ff fd13 	bl	800c208 <_Balloc>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	b928      	cbnz	r0, 800c7f2 <__mdiff+0x2e>
 800c7e6:	f240 2137 	movw	r1, #567	@ 0x237
 800c7ea:	4b3e      	ldr	r3, [pc, #248]	@ (800c8e4 <__mdiff+0x120>)
 800c7ec:	483e      	ldr	r0, [pc, #248]	@ (800c8e8 <__mdiff+0x124>)
 800c7ee:	f000 fdab 	bl	800d348 <__assert_func>
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c7f8:	4610      	mov	r0, r2
 800c7fa:	b003      	add	sp, #12
 800c7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c800:	bfbc      	itt	lt
 800c802:	464b      	movlt	r3, r9
 800c804:	46a1      	movlt	r9, r4
 800c806:	4630      	mov	r0, r6
 800c808:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c80c:	bfba      	itte	lt
 800c80e:	461c      	movlt	r4, r3
 800c810:	2501      	movlt	r5, #1
 800c812:	2500      	movge	r5, #0
 800c814:	f7ff fcf8 	bl	800c208 <_Balloc>
 800c818:	4602      	mov	r2, r0
 800c81a:	b918      	cbnz	r0, 800c824 <__mdiff+0x60>
 800c81c:	f240 2145 	movw	r1, #581	@ 0x245
 800c820:	4b30      	ldr	r3, [pc, #192]	@ (800c8e4 <__mdiff+0x120>)
 800c822:	e7e3      	b.n	800c7ec <__mdiff+0x28>
 800c824:	f100 0b14 	add.w	fp, r0, #20
 800c828:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c82c:	f109 0310 	add.w	r3, r9, #16
 800c830:	60c5      	str	r5, [r0, #12]
 800c832:	f04f 0c00 	mov.w	ip, #0
 800c836:	f109 0514 	add.w	r5, r9, #20
 800c83a:	46d9      	mov	r9, fp
 800c83c:	6926      	ldr	r6, [r4, #16]
 800c83e:	f104 0e14 	add.w	lr, r4, #20
 800c842:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c846:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c84a:	9301      	str	r3, [sp, #4]
 800c84c:	9b01      	ldr	r3, [sp, #4]
 800c84e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c852:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c856:	b281      	uxth	r1, r0
 800c858:	9301      	str	r3, [sp, #4]
 800c85a:	fa1f f38a 	uxth.w	r3, sl
 800c85e:	1a5b      	subs	r3, r3, r1
 800c860:	0c00      	lsrs	r0, r0, #16
 800c862:	4463      	add	r3, ip
 800c864:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c868:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c872:	4576      	cmp	r6, lr
 800c874:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c878:	f849 3b04 	str.w	r3, [r9], #4
 800c87c:	d8e6      	bhi.n	800c84c <__mdiff+0x88>
 800c87e:	1b33      	subs	r3, r6, r4
 800c880:	3b15      	subs	r3, #21
 800c882:	f023 0303 	bic.w	r3, r3, #3
 800c886:	3415      	adds	r4, #21
 800c888:	3304      	adds	r3, #4
 800c88a:	42a6      	cmp	r6, r4
 800c88c:	bf38      	it	cc
 800c88e:	2304      	movcc	r3, #4
 800c890:	441d      	add	r5, r3
 800c892:	445b      	add	r3, fp
 800c894:	461e      	mov	r6, r3
 800c896:	462c      	mov	r4, r5
 800c898:	4544      	cmp	r4, r8
 800c89a:	d30e      	bcc.n	800c8ba <__mdiff+0xf6>
 800c89c:	f108 0103 	add.w	r1, r8, #3
 800c8a0:	1b49      	subs	r1, r1, r5
 800c8a2:	f021 0103 	bic.w	r1, r1, #3
 800c8a6:	3d03      	subs	r5, #3
 800c8a8:	45a8      	cmp	r8, r5
 800c8aa:	bf38      	it	cc
 800c8ac:	2100      	movcc	r1, #0
 800c8ae:	440b      	add	r3, r1
 800c8b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c8b4:	b199      	cbz	r1, 800c8de <__mdiff+0x11a>
 800c8b6:	6117      	str	r7, [r2, #16]
 800c8b8:	e79e      	b.n	800c7f8 <__mdiff+0x34>
 800c8ba:	46e6      	mov	lr, ip
 800c8bc:	f854 1b04 	ldr.w	r1, [r4], #4
 800c8c0:	fa1f fc81 	uxth.w	ip, r1
 800c8c4:	44f4      	add	ip, lr
 800c8c6:	0c08      	lsrs	r0, r1, #16
 800c8c8:	4471      	add	r1, lr
 800c8ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c8ce:	b289      	uxth	r1, r1
 800c8d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c8d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c8d8:	f846 1b04 	str.w	r1, [r6], #4
 800c8dc:	e7dc      	b.n	800c898 <__mdiff+0xd4>
 800c8de:	3f01      	subs	r7, #1
 800c8e0:	e7e6      	b.n	800c8b0 <__mdiff+0xec>
 800c8e2:	bf00      	nop
 800c8e4:	0800df3a 	.word	0x0800df3a
 800c8e8:	0800dfab 	.word	0x0800dfab

0800c8ec <__ulp>:
 800c8ec:	4b0e      	ldr	r3, [pc, #56]	@ (800c928 <__ulp+0x3c>)
 800c8ee:	400b      	ands	r3, r1
 800c8f0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	dc08      	bgt.n	800c90a <__ulp+0x1e>
 800c8f8:	425b      	negs	r3, r3
 800c8fa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c8fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c902:	da04      	bge.n	800c90e <__ulp+0x22>
 800c904:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c908:	4113      	asrs	r3, r2
 800c90a:	2200      	movs	r2, #0
 800c90c:	e008      	b.n	800c920 <__ulp+0x34>
 800c90e:	f1a2 0314 	sub.w	r3, r2, #20
 800c912:	2b1e      	cmp	r3, #30
 800c914:	bfd6      	itet	le
 800c916:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c91a:	2201      	movgt	r2, #1
 800c91c:	40da      	lsrle	r2, r3
 800c91e:	2300      	movs	r3, #0
 800c920:	4619      	mov	r1, r3
 800c922:	4610      	mov	r0, r2
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	7ff00000 	.word	0x7ff00000

0800c92c <__b2d>:
 800c92c:	6902      	ldr	r2, [r0, #16]
 800c92e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c930:	f100 0614 	add.w	r6, r0, #20
 800c934:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800c938:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800c93c:	4f1e      	ldr	r7, [pc, #120]	@ (800c9b8 <__b2d+0x8c>)
 800c93e:	4620      	mov	r0, r4
 800c940:	f7ff fd54 	bl	800c3ec <__hi0bits>
 800c944:	4603      	mov	r3, r0
 800c946:	f1c0 0020 	rsb	r0, r0, #32
 800c94a:	2b0a      	cmp	r3, #10
 800c94c:	f1a2 0504 	sub.w	r5, r2, #4
 800c950:	6008      	str	r0, [r1, #0]
 800c952:	dc12      	bgt.n	800c97a <__b2d+0x4e>
 800c954:	42ae      	cmp	r6, r5
 800c956:	bf2c      	ite	cs
 800c958:	2200      	movcs	r2, #0
 800c95a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800c95e:	f1c3 0c0b 	rsb	ip, r3, #11
 800c962:	3315      	adds	r3, #21
 800c964:	fa24 fe0c 	lsr.w	lr, r4, ip
 800c968:	fa04 f303 	lsl.w	r3, r4, r3
 800c96c:	fa22 f20c 	lsr.w	r2, r2, ip
 800c970:	ea4e 0107 	orr.w	r1, lr, r7
 800c974:	431a      	orrs	r2, r3
 800c976:	4610      	mov	r0, r2
 800c978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c97a:	42ae      	cmp	r6, r5
 800c97c:	bf36      	itet	cc
 800c97e:	f1a2 0508 	subcc.w	r5, r2, #8
 800c982:	2200      	movcs	r2, #0
 800c984:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800c988:	3b0b      	subs	r3, #11
 800c98a:	d012      	beq.n	800c9b2 <__b2d+0x86>
 800c98c:	f1c3 0720 	rsb	r7, r3, #32
 800c990:	fa22 f107 	lsr.w	r1, r2, r7
 800c994:	409c      	lsls	r4, r3
 800c996:	430c      	orrs	r4, r1
 800c998:	42b5      	cmp	r5, r6
 800c99a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800c99e:	bf94      	ite	ls
 800c9a0:	2400      	movls	r4, #0
 800c9a2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800c9a6:	409a      	lsls	r2, r3
 800c9a8:	40fc      	lsrs	r4, r7
 800c9aa:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c9ae:	4322      	orrs	r2, r4
 800c9b0:	e7e1      	b.n	800c976 <__b2d+0x4a>
 800c9b2:	ea44 0107 	orr.w	r1, r4, r7
 800c9b6:	e7de      	b.n	800c976 <__b2d+0x4a>
 800c9b8:	3ff00000 	.word	0x3ff00000

0800c9bc <__d2b>:
 800c9bc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800c9c0:	2101      	movs	r1, #1
 800c9c2:	4690      	mov	r8, r2
 800c9c4:	4699      	mov	r9, r3
 800c9c6:	9e08      	ldr	r6, [sp, #32]
 800c9c8:	f7ff fc1e 	bl	800c208 <_Balloc>
 800c9cc:	4604      	mov	r4, r0
 800c9ce:	b930      	cbnz	r0, 800c9de <__d2b+0x22>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	f240 310f 	movw	r1, #783	@ 0x30f
 800c9d6:	4b23      	ldr	r3, [pc, #140]	@ (800ca64 <__d2b+0xa8>)
 800c9d8:	4823      	ldr	r0, [pc, #140]	@ (800ca68 <__d2b+0xac>)
 800c9da:	f000 fcb5 	bl	800d348 <__assert_func>
 800c9de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c9e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c9e6:	b10d      	cbz	r5, 800c9ec <__d2b+0x30>
 800c9e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c9ec:	9301      	str	r3, [sp, #4]
 800c9ee:	f1b8 0300 	subs.w	r3, r8, #0
 800c9f2:	d024      	beq.n	800ca3e <__d2b+0x82>
 800c9f4:	4668      	mov	r0, sp
 800c9f6:	9300      	str	r3, [sp, #0]
 800c9f8:	f7ff fd17 	bl	800c42a <__lo0bits>
 800c9fc:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ca00:	b1d8      	cbz	r0, 800ca3a <__d2b+0x7e>
 800ca02:	f1c0 0320 	rsb	r3, r0, #32
 800ca06:	fa02 f303 	lsl.w	r3, r2, r3
 800ca0a:	430b      	orrs	r3, r1
 800ca0c:	40c2      	lsrs	r2, r0
 800ca0e:	6163      	str	r3, [r4, #20]
 800ca10:	9201      	str	r2, [sp, #4]
 800ca12:	9b01      	ldr	r3, [sp, #4]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	bf0c      	ite	eq
 800ca18:	2201      	moveq	r2, #1
 800ca1a:	2202      	movne	r2, #2
 800ca1c:	61a3      	str	r3, [r4, #24]
 800ca1e:	6122      	str	r2, [r4, #16]
 800ca20:	b1ad      	cbz	r5, 800ca4e <__d2b+0x92>
 800ca22:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ca26:	4405      	add	r5, r0
 800ca28:	6035      	str	r5, [r6, #0]
 800ca2a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ca2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca30:	6018      	str	r0, [r3, #0]
 800ca32:	4620      	mov	r0, r4
 800ca34:	b002      	add	sp, #8
 800ca36:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800ca3a:	6161      	str	r1, [r4, #20]
 800ca3c:	e7e9      	b.n	800ca12 <__d2b+0x56>
 800ca3e:	a801      	add	r0, sp, #4
 800ca40:	f7ff fcf3 	bl	800c42a <__lo0bits>
 800ca44:	9b01      	ldr	r3, [sp, #4]
 800ca46:	2201      	movs	r2, #1
 800ca48:	6163      	str	r3, [r4, #20]
 800ca4a:	3020      	adds	r0, #32
 800ca4c:	e7e7      	b.n	800ca1e <__d2b+0x62>
 800ca4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ca52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca56:	6030      	str	r0, [r6, #0]
 800ca58:	6918      	ldr	r0, [r3, #16]
 800ca5a:	f7ff fcc7 	bl	800c3ec <__hi0bits>
 800ca5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca62:	e7e4      	b.n	800ca2e <__d2b+0x72>
 800ca64:	0800df3a 	.word	0x0800df3a
 800ca68:	0800dfab 	.word	0x0800dfab

0800ca6c <__ratio>:
 800ca6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca70:	b085      	sub	sp, #20
 800ca72:	e9cd 1000 	strd	r1, r0, [sp]
 800ca76:	a902      	add	r1, sp, #8
 800ca78:	f7ff ff58 	bl	800c92c <__b2d>
 800ca7c:	468b      	mov	fp, r1
 800ca7e:	4606      	mov	r6, r0
 800ca80:	460f      	mov	r7, r1
 800ca82:	9800      	ldr	r0, [sp, #0]
 800ca84:	a903      	add	r1, sp, #12
 800ca86:	f7ff ff51 	bl	800c92c <__b2d>
 800ca8a:	460d      	mov	r5, r1
 800ca8c:	9b01      	ldr	r3, [sp, #4]
 800ca8e:	4689      	mov	r9, r1
 800ca90:	6919      	ldr	r1, [r3, #16]
 800ca92:	9b00      	ldr	r3, [sp, #0]
 800ca94:	4604      	mov	r4, r0
 800ca96:	691b      	ldr	r3, [r3, #16]
 800ca98:	4630      	mov	r0, r6
 800ca9a:	1ac9      	subs	r1, r1, r3
 800ca9c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800caa0:	1a9b      	subs	r3, r3, r2
 800caa2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	bfcd      	iteet	gt
 800caaa:	463a      	movgt	r2, r7
 800caac:	462a      	movle	r2, r5
 800caae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cab2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800cab6:	bfd8      	it	le
 800cab8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cabc:	464b      	mov	r3, r9
 800cabe:	4622      	mov	r2, r4
 800cac0:	4659      	mov	r1, fp
 800cac2:	f7f3 fe3d 	bl	8000740 <__aeabi_ddiv>
 800cac6:	b005      	add	sp, #20
 800cac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cacc <__copybits>:
 800cacc:	3901      	subs	r1, #1
 800cace:	b570      	push	{r4, r5, r6, lr}
 800cad0:	1149      	asrs	r1, r1, #5
 800cad2:	6914      	ldr	r4, [r2, #16]
 800cad4:	3101      	adds	r1, #1
 800cad6:	f102 0314 	add.w	r3, r2, #20
 800cada:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cade:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cae2:	1f05      	subs	r5, r0, #4
 800cae4:	42a3      	cmp	r3, r4
 800cae6:	d30c      	bcc.n	800cb02 <__copybits+0x36>
 800cae8:	1aa3      	subs	r3, r4, r2
 800caea:	3b11      	subs	r3, #17
 800caec:	f023 0303 	bic.w	r3, r3, #3
 800caf0:	3211      	adds	r2, #17
 800caf2:	42a2      	cmp	r2, r4
 800caf4:	bf88      	it	hi
 800caf6:	2300      	movhi	r3, #0
 800caf8:	4418      	add	r0, r3
 800cafa:	2300      	movs	r3, #0
 800cafc:	4288      	cmp	r0, r1
 800cafe:	d305      	bcc.n	800cb0c <__copybits+0x40>
 800cb00:	bd70      	pop	{r4, r5, r6, pc}
 800cb02:	f853 6b04 	ldr.w	r6, [r3], #4
 800cb06:	f845 6f04 	str.w	r6, [r5, #4]!
 800cb0a:	e7eb      	b.n	800cae4 <__copybits+0x18>
 800cb0c:	f840 3b04 	str.w	r3, [r0], #4
 800cb10:	e7f4      	b.n	800cafc <__copybits+0x30>

0800cb12 <__any_on>:
 800cb12:	f100 0214 	add.w	r2, r0, #20
 800cb16:	6900      	ldr	r0, [r0, #16]
 800cb18:	114b      	asrs	r3, r1, #5
 800cb1a:	4298      	cmp	r0, r3
 800cb1c:	b510      	push	{r4, lr}
 800cb1e:	db11      	blt.n	800cb44 <__any_on+0x32>
 800cb20:	dd0a      	ble.n	800cb38 <__any_on+0x26>
 800cb22:	f011 011f 	ands.w	r1, r1, #31
 800cb26:	d007      	beq.n	800cb38 <__any_on+0x26>
 800cb28:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cb2c:	fa24 f001 	lsr.w	r0, r4, r1
 800cb30:	fa00 f101 	lsl.w	r1, r0, r1
 800cb34:	428c      	cmp	r4, r1
 800cb36:	d10b      	bne.n	800cb50 <__any_on+0x3e>
 800cb38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d803      	bhi.n	800cb48 <__any_on+0x36>
 800cb40:	2000      	movs	r0, #0
 800cb42:	bd10      	pop	{r4, pc}
 800cb44:	4603      	mov	r3, r0
 800cb46:	e7f7      	b.n	800cb38 <__any_on+0x26>
 800cb48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb4c:	2900      	cmp	r1, #0
 800cb4e:	d0f5      	beq.n	800cb3c <__any_on+0x2a>
 800cb50:	2001      	movs	r0, #1
 800cb52:	e7f6      	b.n	800cb42 <__any_on+0x30>

0800cb54 <__ascii_wctomb>:
 800cb54:	4603      	mov	r3, r0
 800cb56:	4608      	mov	r0, r1
 800cb58:	b141      	cbz	r1, 800cb6c <__ascii_wctomb+0x18>
 800cb5a:	2aff      	cmp	r2, #255	@ 0xff
 800cb5c:	d904      	bls.n	800cb68 <__ascii_wctomb+0x14>
 800cb5e:	228a      	movs	r2, #138	@ 0x8a
 800cb60:	f04f 30ff 	mov.w	r0, #4294967295
 800cb64:	601a      	str	r2, [r3, #0]
 800cb66:	4770      	bx	lr
 800cb68:	2001      	movs	r0, #1
 800cb6a:	700a      	strb	r2, [r1, #0]
 800cb6c:	4770      	bx	lr

0800cb6e <__ssputs_r>:
 800cb6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb72:	461f      	mov	r7, r3
 800cb74:	688e      	ldr	r6, [r1, #8]
 800cb76:	4682      	mov	sl, r0
 800cb78:	42be      	cmp	r6, r7
 800cb7a:	460c      	mov	r4, r1
 800cb7c:	4690      	mov	r8, r2
 800cb7e:	680b      	ldr	r3, [r1, #0]
 800cb80:	d82d      	bhi.n	800cbde <__ssputs_r+0x70>
 800cb82:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb86:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cb8a:	d026      	beq.n	800cbda <__ssputs_r+0x6c>
 800cb8c:	6965      	ldr	r5, [r4, #20]
 800cb8e:	6909      	ldr	r1, [r1, #16]
 800cb90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb94:	eba3 0901 	sub.w	r9, r3, r1
 800cb98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb9c:	1c7b      	adds	r3, r7, #1
 800cb9e:	444b      	add	r3, r9
 800cba0:	106d      	asrs	r5, r5, #1
 800cba2:	429d      	cmp	r5, r3
 800cba4:	bf38      	it	cc
 800cba6:	461d      	movcc	r5, r3
 800cba8:	0553      	lsls	r3, r2, #21
 800cbaa:	d527      	bpl.n	800cbfc <__ssputs_r+0x8e>
 800cbac:	4629      	mov	r1, r5
 800cbae:	f7fc f929 	bl	8008e04 <_malloc_r>
 800cbb2:	4606      	mov	r6, r0
 800cbb4:	b360      	cbz	r0, 800cc10 <__ssputs_r+0xa2>
 800cbb6:	464a      	mov	r2, r9
 800cbb8:	6921      	ldr	r1, [r4, #16]
 800cbba:	f7fe f928 	bl	800ae0e <memcpy>
 800cbbe:	89a3      	ldrh	r3, [r4, #12]
 800cbc0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cbc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbc8:	81a3      	strh	r3, [r4, #12]
 800cbca:	6126      	str	r6, [r4, #16]
 800cbcc:	444e      	add	r6, r9
 800cbce:	6026      	str	r6, [r4, #0]
 800cbd0:	463e      	mov	r6, r7
 800cbd2:	6165      	str	r5, [r4, #20]
 800cbd4:	eba5 0509 	sub.w	r5, r5, r9
 800cbd8:	60a5      	str	r5, [r4, #8]
 800cbda:	42be      	cmp	r6, r7
 800cbdc:	d900      	bls.n	800cbe0 <__ssputs_r+0x72>
 800cbde:	463e      	mov	r6, r7
 800cbe0:	4632      	mov	r2, r6
 800cbe2:	4641      	mov	r1, r8
 800cbe4:	6820      	ldr	r0, [r4, #0]
 800cbe6:	f000 fb95 	bl	800d314 <memmove>
 800cbea:	2000      	movs	r0, #0
 800cbec:	68a3      	ldr	r3, [r4, #8]
 800cbee:	1b9b      	subs	r3, r3, r6
 800cbf0:	60a3      	str	r3, [r4, #8]
 800cbf2:	6823      	ldr	r3, [r4, #0]
 800cbf4:	4433      	add	r3, r6
 800cbf6:	6023      	str	r3, [r4, #0]
 800cbf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbfc:	462a      	mov	r2, r5
 800cbfe:	f000 fbd5 	bl	800d3ac <_realloc_r>
 800cc02:	4606      	mov	r6, r0
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d1e0      	bne.n	800cbca <__ssputs_r+0x5c>
 800cc08:	4650      	mov	r0, sl
 800cc0a:	6921      	ldr	r1, [r4, #16]
 800cc0c:	f7fe ff68 	bl	800bae0 <_free_r>
 800cc10:	230c      	movs	r3, #12
 800cc12:	f8ca 3000 	str.w	r3, [sl]
 800cc16:	89a3      	ldrh	r3, [r4, #12]
 800cc18:	f04f 30ff 	mov.w	r0, #4294967295
 800cc1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc20:	81a3      	strh	r3, [r4, #12]
 800cc22:	e7e9      	b.n	800cbf8 <__ssputs_r+0x8a>

0800cc24 <_svfiprintf_r>:
 800cc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc28:	4698      	mov	r8, r3
 800cc2a:	898b      	ldrh	r3, [r1, #12]
 800cc2c:	4607      	mov	r7, r0
 800cc2e:	061b      	lsls	r3, r3, #24
 800cc30:	460d      	mov	r5, r1
 800cc32:	4614      	mov	r4, r2
 800cc34:	b09d      	sub	sp, #116	@ 0x74
 800cc36:	d510      	bpl.n	800cc5a <_svfiprintf_r+0x36>
 800cc38:	690b      	ldr	r3, [r1, #16]
 800cc3a:	b973      	cbnz	r3, 800cc5a <_svfiprintf_r+0x36>
 800cc3c:	2140      	movs	r1, #64	@ 0x40
 800cc3e:	f7fc f8e1 	bl	8008e04 <_malloc_r>
 800cc42:	6028      	str	r0, [r5, #0]
 800cc44:	6128      	str	r0, [r5, #16]
 800cc46:	b930      	cbnz	r0, 800cc56 <_svfiprintf_r+0x32>
 800cc48:	230c      	movs	r3, #12
 800cc4a:	603b      	str	r3, [r7, #0]
 800cc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc50:	b01d      	add	sp, #116	@ 0x74
 800cc52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc56:	2340      	movs	r3, #64	@ 0x40
 800cc58:	616b      	str	r3, [r5, #20]
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc5e:	2320      	movs	r3, #32
 800cc60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc64:	2330      	movs	r3, #48	@ 0x30
 800cc66:	f04f 0901 	mov.w	r9, #1
 800cc6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc6e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ce08 <_svfiprintf_r+0x1e4>
 800cc72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc76:	4623      	mov	r3, r4
 800cc78:	469a      	mov	sl, r3
 800cc7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc7e:	b10a      	cbz	r2, 800cc84 <_svfiprintf_r+0x60>
 800cc80:	2a25      	cmp	r2, #37	@ 0x25
 800cc82:	d1f9      	bne.n	800cc78 <_svfiprintf_r+0x54>
 800cc84:	ebba 0b04 	subs.w	fp, sl, r4
 800cc88:	d00b      	beq.n	800cca2 <_svfiprintf_r+0x7e>
 800cc8a:	465b      	mov	r3, fp
 800cc8c:	4622      	mov	r2, r4
 800cc8e:	4629      	mov	r1, r5
 800cc90:	4638      	mov	r0, r7
 800cc92:	f7ff ff6c 	bl	800cb6e <__ssputs_r>
 800cc96:	3001      	adds	r0, #1
 800cc98:	f000 80a7 	beq.w	800cdea <_svfiprintf_r+0x1c6>
 800cc9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc9e:	445a      	add	r2, fp
 800cca0:	9209      	str	r2, [sp, #36]	@ 0x24
 800cca2:	f89a 3000 	ldrb.w	r3, [sl]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	f000 809f 	beq.w	800cdea <_svfiprintf_r+0x1c6>
 800ccac:	2300      	movs	r3, #0
 800ccae:	f04f 32ff 	mov.w	r2, #4294967295
 800ccb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccb6:	f10a 0a01 	add.w	sl, sl, #1
 800ccba:	9304      	str	r3, [sp, #16]
 800ccbc:	9307      	str	r3, [sp, #28]
 800ccbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ccc2:	931a      	str	r3, [sp, #104]	@ 0x68
 800ccc4:	4654      	mov	r4, sl
 800ccc6:	2205      	movs	r2, #5
 800ccc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cccc:	484e      	ldr	r0, [pc, #312]	@ (800ce08 <_svfiprintf_r+0x1e4>)
 800ccce:	f7fe f890 	bl	800adf2 <memchr>
 800ccd2:	9a04      	ldr	r2, [sp, #16]
 800ccd4:	b9d8      	cbnz	r0, 800cd0e <_svfiprintf_r+0xea>
 800ccd6:	06d0      	lsls	r0, r2, #27
 800ccd8:	bf44      	itt	mi
 800ccda:	2320      	movmi	r3, #32
 800ccdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cce0:	0711      	lsls	r1, r2, #28
 800cce2:	bf44      	itt	mi
 800cce4:	232b      	movmi	r3, #43	@ 0x2b
 800cce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ccea:	f89a 3000 	ldrb.w	r3, [sl]
 800ccee:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccf0:	d015      	beq.n	800cd1e <_svfiprintf_r+0xfa>
 800ccf2:	4654      	mov	r4, sl
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	f04f 0c0a 	mov.w	ip, #10
 800ccfa:	9a07      	ldr	r2, [sp, #28]
 800ccfc:	4621      	mov	r1, r4
 800ccfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd02:	3b30      	subs	r3, #48	@ 0x30
 800cd04:	2b09      	cmp	r3, #9
 800cd06:	d94b      	bls.n	800cda0 <_svfiprintf_r+0x17c>
 800cd08:	b1b0      	cbz	r0, 800cd38 <_svfiprintf_r+0x114>
 800cd0a:	9207      	str	r2, [sp, #28]
 800cd0c:	e014      	b.n	800cd38 <_svfiprintf_r+0x114>
 800cd0e:	eba0 0308 	sub.w	r3, r0, r8
 800cd12:	fa09 f303 	lsl.w	r3, r9, r3
 800cd16:	4313      	orrs	r3, r2
 800cd18:	46a2      	mov	sl, r4
 800cd1a:	9304      	str	r3, [sp, #16]
 800cd1c:	e7d2      	b.n	800ccc4 <_svfiprintf_r+0xa0>
 800cd1e:	9b03      	ldr	r3, [sp, #12]
 800cd20:	1d19      	adds	r1, r3, #4
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	9103      	str	r1, [sp, #12]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	bfbb      	ittet	lt
 800cd2a:	425b      	neglt	r3, r3
 800cd2c:	f042 0202 	orrlt.w	r2, r2, #2
 800cd30:	9307      	strge	r3, [sp, #28]
 800cd32:	9307      	strlt	r3, [sp, #28]
 800cd34:	bfb8      	it	lt
 800cd36:	9204      	strlt	r2, [sp, #16]
 800cd38:	7823      	ldrb	r3, [r4, #0]
 800cd3a:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd3c:	d10a      	bne.n	800cd54 <_svfiprintf_r+0x130>
 800cd3e:	7863      	ldrb	r3, [r4, #1]
 800cd40:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd42:	d132      	bne.n	800cdaa <_svfiprintf_r+0x186>
 800cd44:	9b03      	ldr	r3, [sp, #12]
 800cd46:	3402      	adds	r4, #2
 800cd48:	1d1a      	adds	r2, r3, #4
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	9203      	str	r2, [sp, #12]
 800cd4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd52:	9305      	str	r3, [sp, #20]
 800cd54:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ce0c <_svfiprintf_r+0x1e8>
 800cd58:	2203      	movs	r2, #3
 800cd5a:	4650      	mov	r0, sl
 800cd5c:	7821      	ldrb	r1, [r4, #0]
 800cd5e:	f7fe f848 	bl	800adf2 <memchr>
 800cd62:	b138      	cbz	r0, 800cd74 <_svfiprintf_r+0x150>
 800cd64:	2240      	movs	r2, #64	@ 0x40
 800cd66:	9b04      	ldr	r3, [sp, #16]
 800cd68:	eba0 000a 	sub.w	r0, r0, sl
 800cd6c:	4082      	lsls	r2, r0
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	3401      	adds	r4, #1
 800cd72:	9304      	str	r3, [sp, #16]
 800cd74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd78:	2206      	movs	r2, #6
 800cd7a:	4825      	ldr	r0, [pc, #148]	@ (800ce10 <_svfiprintf_r+0x1ec>)
 800cd7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd80:	f7fe f837 	bl	800adf2 <memchr>
 800cd84:	2800      	cmp	r0, #0
 800cd86:	d036      	beq.n	800cdf6 <_svfiprintf_r+0x1d2>
 800cd88:	4b22      	ldr	r3, [pc, #136]	@ (800ce14 <_svfiprintf_r+0x1f0>)
 800cd8a:	bb1b      	cbnz	r3, 800cdd4 <_svfiprintf_r+0x1b0>
 800cd8c:	9b03      	ldr	r3, [sp, #12]
 800cd8e:	3307      	adds	r3, #7
 800cd90:	f023 0307 	bic.w	r3, r3, #7
 800cd94:	3308      	adds	r3, #8
 800cd96:	9303      	str	r3, [sp, #12]
 800cd98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd9a:	4433      	add	r3, r6
 800cd9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd9e:	e76a      	b.n	800cc76 <_svfiprintf_r+0x52>
 800cda0:	460c      	mov	r4, r1
 800cda2:	2001      	movs	r0, #1
 800cda4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cda8:	e7a8      	b.n	800ccfc <_svfiprintf_r+0xd8>
 800cdaa:	2300      	movs	r3, #0
 800cdac:	f04f 0c0a 	mov.w	ip, #10
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	3401      	adds	r4, #1
 800cdb4:	9305      	str	r3, [sp, #20]
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdbc:	3a30      	subs	r2, #48	@ 0x30
 800cdbe:	2a09      	cmp	r2, #9
 800cdc0:	d903      	bls.n	800cdca <_svfiprintf_r+0x1a6>
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d0c6      	beq.n	800cd54 <_svfiprintf_r+0x130>
 800cdc6:	9105      	str	r1, [sp, #20]
 800cdc8:	e7c4      	b.n	800cd54 <_svfiprintf_r+0x130>
 800cdca:	4604      	mov	r4, r0
 800cdcc:	2301      	movs	r3, #1
 800cdce:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdd2:	e7f0      	b.n	800cdb6 <_svfiprintf_r+0x192>
 800cdd4:	ab03      	add	r3, sp, #12
 800cdd6:	9300      	str	r3, [sp, #0]
 800cdd8:	462a      	mov	r2, r5
 800cdda:	4638      	mov	r0, r7
 800cddc:	4b0e      	ldr	r3, [pc, #56]	@ (800ce18 <_svfiprintf_r+0x1f4>)
 800cdde:	a904      	add	r1, sp, #16
 800cde0:	f7fc ffcc 	bl	8009d7c <_printf_float>
 800cde4:	1c42      	adds	r2, r0, #1
 800cde6:	4606      	mov	r6, r0
 800cde8:	d1d6      	bne.n	800cd98 <_svfiprintf_r+0x174>
 800cdea:	89ab      	ldrh	r3, [r5, #12]
 800cdec:	065b      	lsls	r3, r3, #25
 800cdee:	f53f af2d 	bmi.w	800cc4c <_svfiprintf_r+0x28>
 800cdf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cdf4:	e72c      	b.n	800cc50 <_svfiprintf_r+0x2c>
 800cdf6:	ab03      	add	r3, sp, #12
 800cdf8:	9300      	str	r3, [sp, #0]
 800cdfa:	462a      	mov	r2, r5
 800cdfc:	4638      	mov	r0, r7
 800cdfe:	4b06      	ldr	r3, [pc, #24]	@ (800ce18 <_svfiprintf_r+0x1f4>)
 800ce00:	a904      	add	r1, sp, #16
 800ce02:	f7fd fa59 	bl	800a2b8 <_printf_i>
 800ce06:	e7ed      	b.n	800cde4 <_svfiprintf_r+0x1c0>
 800ce08:	0800e100 	.word	0x0800e100
 800ce0c:	0800e106 	.word	0x0800e106
 800ce10:	0800e10a 	.word	0x0800e10a
 800ce14:	08009d7d 	.word	0x08009d7d
 800ce18:	0800cb6f 	.word	0x0800cb6f

0800ce1c <__sfputc_r>:
 800ce1c:	6893      	ldr	r3, [r2, #8]
 800ce1e:	b410      	push	{r4}
 800ce20:	3b01      	subs	r3, #1
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	6093      	str	r3, [r2, #8]
 800ce26:	da07      	bge.n	800ce38 <__sfputc_r+0x1c>
 800ce28:	6994      	ldr	r4, [r2, #24]
 800ce2a:	42a3      	cmp	r3, r4
 800ce2c:	db01      	blt.n	800ce32 <__sfputc_r+0x16>
 800ce2e:	290a      	cmp	r1, #10
 800ce30:	d102      	bne.n	800ce38 <__sfputc_r+0x1c>
 800ce32:	bc10      	pop	{r4}
 800ce34:	f000 b9da 	b.w	800d1ec <__swbuf_r>
 800ce38:	6813      	ldr	r3, [r2, #0]
 800ce3a:	1c58      	adds	r0, r3, #1
 800ce3c:	6010      	str	r0, [r2, #0]
 800ce3e:	7019      	strb	r1, [r3, #0]
 800ce40:	4608      	mov	r0, r1
 800ce42:	bc10      	pop	{r4}
 800ce44:	4770      	bx	lr

0800ce46 <__sfputs_r>:
 800ce46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce48:	4606      	mov	r6, r0
 800ce4a:	460f      	mov	r7, r1
 800ce4c:	4614      	mov	r4, r2
 800ce4e:	18d5      	adds	r5, r2, r3
 800ce50:	42ac      	cmp	r4, r5
 800ce52:	d101      	bne.n	800ce58 <__sfputs_r+0x12>
 800ce54:	2000      	movs	r0, #0
 800ce56:	e007      	b.n	800ce68 <__sfputs_r+0x22>
 800ce58:	463a      	mov	r2, r7
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce60:	f7ff ffdc 	bl	800ce1c <__sfputc_r>
 800ce64:	1c43      	adds	r3, r0, #1
 800ce66:	d1f3      	bne.n	800ce50 <__sfputs_r+0xa>
 800ce68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce6c <_vfiprintf_r>:
 800ce6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce70:	460d      	mov	r5, r1
 800ce72:	4614      	mov	r4, r2
 800ce74:	4698      	mov	r8, r3
 800ce76:	4606      	mov	r6, r0
 800ce78:	b09d      	sub	sp, #116	@ 0x74
 800ce7a:	b118      	cbz	r0, 800ce84 <_vfiprintf_r+0x18>
 800ce7c:	6a03      	ldr	r3, [r0, #32]
 800ce7e:	b90b      	cbnz	r3, 800ce84 <_vfiprintf_r+0x18>
 800ce80:	f7fd fdd6 	bl	800aa30 <__sinit>
 800ce84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce86:	07d9      	lsls	r1, r3, #31
 800ce88:	d405      	bmi.n	800ce96 <_vfiprintf_r+0x2a>
 800ce8a:	89ab      	ldrh	r3, [r5, #12]
 800ce8c:	059a      	lsls	r2, r3, #22
 800ce8e:	d402      	bmi.n	800ce96 <_vfiprintf_r+0x2a>
 800ce90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce92:	f7fd ffa4 	bl	800adde <__retarget_lock_acquire_recursive>
 800ce96:	89ab      	ldrh	r3, [r5, #12]
 800ce98:	071b      	lsls	r3, r3, #28
 800ce9a:	d501      	bpl.n	800cea0 <_vfiprintf_r+0x34>
 800ce9c:	692b      	ldr	r3, [r5, #16]
 800ce9e:	b99b      	cbnz	r3, 800cec8 <_vfiprintf_r+0x5c>
 800cea0:	4629      	mov	r1, r5
 800cea2:	4630      	mov	r0, r6
 800cea4:	f000 f9e0 	bl	800d268 <__swsetup_r>
 800cea8:	b170      	cbz	r0, 800cec8 <_vfiprintf_r+0x5c>
 800ceaa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ceac:	07dc      	lsls	r4, r3, #31
 800ceae:	d504      	bpl.n	800ceba <_vfiprintf_r+0x4e>
 800ceb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ceb4:	b01d      	add	sp, #116	@ 0x74
 800ceb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceba:	89ab      	ldrh	r3, [r5, #12]
 800cebc:	0598      	lsls	r0, r3, #22
 800cebe:	d4f7      	bmi.n	800ceb0 <_vfiprintf_r+0x44>
 800cec0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cec2:	f7fd ff8d 	bl	800ade0 <__retarget_lock_release_recursive>
 800cec6:	e7f3      	b.n	800ceb0 <_vfiprintf_r+0x44>
 800cec8:	2300      	movs	r3, #0
 800ceca:	9309      	str	r3, [sp, #36]	@ 0x24
 800cecc:	2320      	movs	r3, #32
 800cece:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ced2:	2330      	movs	r3, #48	@ 0x30
 800ced4:	f04f 0901 	mov.w	r9, #1
 800ced8:	f8cd 800c 	str.w	r8, [sp, #12]
 800cedc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d088 <_vfiprintf_r+0x21c>
 800cee0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cee4:	4623      	mov	r3, r4
 800cee6:	469a      	mov	sl, r3
 800cee8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ceec:	b10a      	cbz	r2, 800cef2 <_vfiprintf_r+0x86>
 800ceee:	2a25      	cmp	r2, #37	@ 0x25
 800cef0:	d1f9      	bne.n	800cee6 <_vfiprintf_r+0x7a>
 800cef2:	ebba 0b04 	subs.w	fp, sl, r4
 800cef6:	d00b      	beq.n	800cf10 <_vfiprintf_r+0xa4>
 800cef8:	465b      	mov	r3, fp
 800cefa:	4622      	mov	r2, r4
 800cefc:	4629      	mov	r1, r5
 800cefe:	4630      	mov	r0, r6
 800cf00:	f7ff ffa1 	bl	800ce46 <__sfputs_r>
 800cf04:	3001      	adds	r0, #1
 800cf06:	f000 80a7 	beq.w	800d058 <_vfiprintf_r+0x1ec>
 800cf0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf0c:	445a      	add	r2, fp
 800cf0e:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf10:	f89a 3000 	ldrb.w	r3, [sl]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	f000 809f 	beq.w	800d058 <_vfiprintf_r+0x1ec>
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	f04f 32ff 	mov.w	r2, #4294967295
 800cf20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf24:	f10a 0a01 	add.w	sl, sl, #1
 800cf28:	9304      	str	r3, [sp, #16]
 800cf2a:	9307      	str	r3, [sp, #28]
 800cf2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf30:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf32:	4654      	mov	r4, sl
 800cf34:	2205      	movs	r2, #5
 800cf36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf3a:	4853      	ldr	r0, [pc, #332]	@ (800d088 <_vfiprintf_r+0x21c>)
 800cf3c:	f7fd ff59 	bl	800adf2 <memchr>
 800cf40:	9a04      	ldr	r2, [sp, #16]
 800cf42:	b9d8      	cbnz	r0, 800cf7c <_vfiprintf_r+0x110>
 800cf44:	06d1      	lsls	r1, r2, #27
 800cf46:	bf44      	itt	mi
 800cf48:	2320      	movmi	r3, #32
 800cf4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf4e:	0713      	lsls	r3, r2, #28
 800cf50:	bf44      	itt	mi
 800cf52:	232b      	movmi	r3, #43	@ 0x2b
 800cf54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf58:	f89a 3000 	ldrb.w	r3, [sl]
 800cf5c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf5e:	d015      	beq.n	800cf8c <_vfiprintf_r+0x120>
 800cf60:	4654      	mov	r4, sl
 800cf62:	2000      	movs	r0, #0
 800cf64:	f04f 0c0a 	mov.w	ip, #10
 800cf68:	9a07      	ldr	r2, [sp, #28]
 800cf6a:	4621      	mov	r1, r4
 800cf6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf70:	3b30      	subs	r3, #48	@ 0x30
 800cf72:	2b09      	cmp	r3, #9
 800cf74:	d94b      	bls.n	800d00e <_vfiprintf_r+0x1a2>
 800cf76:	b1b0      	cbz	r0, 800cfa6 <_vfiprintf_r+0x13a>
 800cf78:	9207      	str	r2, [sp, #28]
 800cf7a:	e014      	b.n	800cfa6 <_vfiprintf_r+0x13a>
 800cf7c:	eba0 0308 	sub.w	r3, r0, r8
 800cf80:	fa09 f303 	lsl.w	r3, r9, r3
 800cf84:	4313      	orrs	r3, r2
 800cf86:	46a2      	mov	sl, r4
 800cf88:	9304      	str	r3, [sp, #16]
 800cf8a:	e7d2      	b.n	800cf32 <_vfiprintf_r+0xc6>
 800cf8c:	9b03      	ldr	r3, [sp, #12]
 800cf8e:	1d19      	adds	r1, r3, #4
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	9103      	str	r1, [sp, #12]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	bfbb      	ittet	lt
 800cf98:	425b      	neglt	r3, r3
 800cf9a:	f042 0202 	orrlt.w	r2, r2, #2
 800cf9e:	9307      	strge	r3, [sp, #28]
 800cfa0:	9307      	strlt	r3, [sp, #28]
 800cfa2:	bfb8      	it	lt
 800cfa4:	9204      	strlt	r2, [sp, #16]
 800cfa6:	7823      	ldrb	r3, [r4, #0]
 800cfa8:	2b2e      	cmp	r3, #46	@ 0x2e
 800cfaa:	d10a      	bne.n	800cfc2 <_vfiprintf_r+0x156>
 800cfac:	7863      	ldrb	r3, [r4, #1]
 800cfae:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfb0:	d132      	bne.n	800d018 <_vfiprintf_r+0x1ac>
 800cfb2:	9b03      	ldr	r3, [sp, #12]
 800cfb4:	3402      	adds	r4, #2
 800cfb6:	1d1a      	adds	r2, r3, #4
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	9203      	str	r2, [sp, #12]
 800cfbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cfc0:	9305      	str	r3, [sp, #20]
 800cfc2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d08c <_vfiprintf_r+0x220>
 800cfc6:	2203      	movs	r2, #3
 800cfc8:	4650      	mov	r0, sl
 800cfca:	7821      	ldrb	r1, [r4, #0]
 800cfcc:	f7fd ff11 	bl	800adf2 <memchr>
 800cfd0:	b138      	cbz	r0, 800cfe2 <_vfiprintf_r+0x176>
 800cfd2:	2240      	movs	r2, #64	@ 0x40
 800cfd4:	9b04      	ldr	r3, [sp, #16]
 800cfd6:	eba0 000a 	sub.w	r0, r0, sl
 800cfda:	4082      	lsls	r2, r0
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	3401      	adds	r4, #1
 800cfe0:	9304      	str	r3, [sp, #16]
 800cfe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfe6:	2206      	movs	r2, #6
 800cfe8:	4829      	ldr	r0, [pc, #164]	@ (800d090 <_vfiprintf_r+0x224>)
 800cfea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cfee:	f7fd ff00 	bl	800adf2 <memchr>
 800cff2:	2800      	cmp	r0, #0
 800cff4:	d03f      	beq.n	800d076 <_vfiprintf_r+0x20a>
 800cff6:	4b27      	ldr	r3, [pc, #156]	@ (800d094 <_vfiprintf_r+0x228>)
 800cff8:	bb1b      	cbnz	r3, 800d042 <_vfiprintf_r+0x1d6>
 800cffa:	9b03      	ldr	r3, [sp, #12]
 800cffc:	3307      	adds	r3, #7
 800cffe:	f023 0307 	bic.w	r3, r3, #7
 800d002:	3308      	adds	r3, #8
 800d004:	9303      	str	r3, [sp, #12]
 800d006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d008:	443b      	add	r3, r7
 800d00a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d00c:	e76a      	b.n	800cee4 <_vfiprintf_r+0x78>
 800d00e:	460c      	mov	r4, r1
 800d010:	2001      	movs	r0, #1
 800d012:	fb0c 3202 	mla	r2, ip, r2, r3
 800d016:	e7a8      	b.n	800cf6a <_vfiprintf_r+0xfe>
 800d018:	2300      	movs	r3, #0
 800d01a:	f04f 0c0a 	mov.w	ip, #10
 800d01e:	4619      	mov	r1, r3
 800d020:	3401      	adds	r4, #1
 800d022:	9305      	str	r3, [sp, #20]
 800d024:	4620      	mov	r0, r4
 800d026:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d02a:	3a30      	subs	r2, #48	@ 0x30
 800d02c:	2a09      	cmp	r2, #9
 800d02e:	d903      	bls.n	800d038 <_vfiprintf_r+0x1cc>
 800d030:	2b00      	cmp	r3, #0
 800d032:	d0c6      	beq.n	800cfc2 <_vfiprintf_r+0x156>
 800d034:	9105      	str	r1, [sp, #20]
 800d036:	e7c4      	b.n	800cfc2 <_vfiprintf_r+0x156>
 800d038:	4604      	mov	r4, r0
 800d03a:	2301      	movs	r3, #1
 800d03c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d040:	e7f0      	b.n	800d024 <_vfiprintf_r+0x1b8>
 800d042:	ab03      	add	r3, sp, #12
 800d044:	9300      	str	r3, [sp, #0]
 800d046:	462a      	mov	r2, r5
 800d048:	4630      	mov	r0, r6
 800d04a:	4b13      	ldr	r3, [pc, #76]	@ (800d098 <_vfiprintf_r+0x22c>)
 800d04c:	a904      	add	r1, sp, #16
 800d04e:	f7fc fe95 	bl	8009d7c <_printf_float>
 800d052:	4607      	mov	r7, r0
 800d054:	1c78      	adds	r0, r7, #1
 800d056:	d1d6      	bne.n	800d006 <_vfiprintf_r+0x19a>
 800d058:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d05a:	07d9      	lsls	r1, r3, #31
 800d05c:	d405      	bmi.n	800d06a <_vfiprintf_r+0x1fe>
 800d05e:	89ab      	ldrh	r3, [r5, #12]
 800d060:	059a      	lsls	r2, r3, #22
 800d062:	d402      	bmi.n	800d06a <_vfiprintf_r+0x1fe>
 800d064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d066:	f7fd febb 	bl	800ade0 <__retarget_lock_release_recursive>
 800d06a:	89ab      	ldrh	r3, [r5, #12]
 800d06c:	065b      	lsls	r3, r3, #25
 800d06e:	f53f af1f 	bmi.w	800ceb0 <_vfiprintf_r+0x44>
 800d072:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d074:	e71e      	b.n	800ceb4 <_vfiprintf_r+0x48>
 800d076:	ab03      	add	r3, sp, #12
 800d078:	9300      	str	r3, [sp, #0]
 800d07a:	462a      	mov	r2, r5
 800d07c:	4630      	mov	r0, r6
 800d07e:	4b06      	ldr	r3, [pc, #24]	@ (800d098 <_vfiprintf_r+0x22c>)
 800d080:	a904      	add	r1, sp, #16
 800d082:	f7fd f919 	bl	800a2b8 <_printf_i>
 800d086:	e7e4      	b.n	800d052 <_vfiprintf_r+0x1e6>
 800d088:	0800e100 	.word	0x0800e100
 800d08c:	0800e106 	.word	0x0800e106
 800d090:	0800e10a 	.word	0x0800e10a
 800d094:	08009d7d 	.word	0x08009d7d
 800d098:	0800ce47 	.word	0x0800ce47

0800d09c <__sflush_r>:
 800d09c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a2:	0716      	lsls	r6, r2, #28
 800d0a4:	4605      	mov	r5, r0
 800d0a6:	460c      	mov	r4, r1
 800d0a8:	d454      	bmi.n	800d154 <__sflush_r+0xb8>
 800d0aa:	684b      	ldr	r3, [r1, #4]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	dc02      	bgt.n	800d0b6 <__sflush_r+0x1a>
 800d0b0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	dd48      	ble.n	800d148 <__sflush_r+0xac>
 800d0b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d0b8:	2e00      	cmp	r6, #0
 800d0ba:	d045      	beq.n	800d148 <__sflush_r+0xac>
 800d0bc:	2300      	movs	r3, #0
 800d0be:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d0c2:	682f      	ldr	r7, [r5, #0]
 800d0c4:	6a21      	ldr	r1, [r4, #32]
 800d0c6:	602b      	str	r3, [r5, #0]
 800d0c8:	d030      	beq.n	800d12c <__sflush_r+0x90>
 800d0ca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d0cc:	89a3      	ldrh	r3, [r4, #12]
 800d0ce:	0759      	lsls	r1, r3, #29
 800d0d0:	d505      	bpl.n	800d0de <__sflush_r+0x42>
 800d0d2:	6863      	ldr	r3, [r4, #4]
 800d0d4:	1ad2      	subs	r2, r2, r3
 800d0d6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d0d8:	b10b      	cbz	r3, 800d0de <__sflush_r+0x42>
 800d0da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d0dc:	1ad2      	subs	r2, r2, r3
 800d0de:	2300      	movs	r3, #0
 800d0e0:	4628      	mov	r0, r5
 800d0e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d0e4:	6a21      	ldr	r1, [r4, #32]
 800d0e6:	47b0      	blx	r6
 800d0e8:	1c43      	adds	r3, r0, #1
 800d0ea:	89a3      	ldrh	r3, [r4, #12]
 800d0ec:	d106      	bne.n	800d0fc <__sflush_r+0x60>
 800d0ee:	6829      	ldr	r1, [r5, #0]
 800d0f0:	291d      	cmp	r1, #29
 800d0f2:	d82b      	bhi.n	800d14c <__sflush_r+0xb0>
 800d0f4:	4a28      	ldr	r2, [pc, #160]	@ (800d198 <__sflush_r+0xfc>)
 800d0f6:	410a      	asrs	r2, r1
 800d0f8:	07d6      	lsls	r6, r2, #31
 800d0fa:	d427      	bmi.n	800d14c <__sflush_r+0xb0>
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	6062      	str	r2, [r4, #4]
 800d100:	6922      	ldr	r2, [r4, #16]
 800d102:	04d9      	lsls	r1, r3, #19
 800d104:	6022      	str	r2, [r4, #0]
 800d106:	d504      	bpl.n	800d112 <__sflush_r+0x76>
 800d108:	1c42      	adds	r2, r0, #1
 800d10a:	d101      	bne.n	800d110 <__sflush_r+0x74>
 800d10c:	682b      	ldr	r3, [r5, #0]
 800d10e:	b903      	cbnz	r3, 800d112 <__sflush_r+0x76>
 800d110:	6560      	str	r0, [r4, #84]	@ 0x54
 800d112:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d114:	602f      	str	r7, [r5, #0]
 800d116:	b1b9      	cbz	r1, 800d148 <__sflush_r+0xac>
 800d118:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d11c:	4299      	cmp	r1, r3
 800d11e:	d002      	beq.n	800d126 <__sflush_r+0x8a>
 800d120:	4628      	mov	r0, r5
 800d122:	f7fe fcdd 	bl	800bae0 <_free_r>
 800d126:	2300      	movs	r3, #0
 800d128:	6363      	str	r3, [r4, #52]	@ 0x34
 800d12a:	e00d      	b.n	800d148 <__sflush_r+0xac>
 800d12c:	2301      	movs	r3, #1
 800d12e:	4628      	mov	r0, r5
 800d130:	47b0      	blx	r6
 800d132:	4602      	mov	r2, r0
 800d134:	1c50      	adds	r0, r2, #1
 800d136:	d1c9      	bne.n	800d0cc <__sflush_r+0x30>
 800d138:	682b      	ldr	r3, [r5, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d0c6      	beq.n	800d0cc <__sflush_r+0x30>
 800d13e:	2b1d      	cmp	r3, #29
 800d140:	d001      	beq.n	800d146 <__sflush_r+0xaa>
 800d142:	2b16      	cmp	r3, #22
 800d144:	d11d      	bne.n	800d182 <__sflush_r+0xe6>
 800d146:	602f      	str	r7, [r5, #0]
 800d148:	2000      	movs	r0, #0
 800d14a:	e021      	b.n	800d190 <__sflush_r+0xf4>
 800d14c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d150:	b21b      	sxth	r3, r3
 800d152:	e01a      	b.n	800d18a <__sflush_r+0xee>
 800d154:	690f      	ldr	r7, [r1, #16]
 800d156:	2f00      	cmp	r7, #0
 800d158:	d0f6      	beq.n	800d148 <__sflush_r+0xac>
 800d15a:	0793      	lsls	r3, r2, #30
 800d15c:	bf18      	it	ne
 800d15e:	2300      	movne	r3, #0
 800d160:	680e      	ldr	r6, [r1, #0]
 800d162:	bf08      	it	eq
 800d164:	694b      	ldreq	r3, [r1, #20]
 800d166:	1bf6      	subs	r6, r6, r7
 800d168:	600f      	str	r7, [r1, #0]
 800d16a:	608b      	str	r3, [r1, #8]
 800d16c:	2e00      	cmp	r6, #0
 800d16e:	ddeb      	ble.n	800d148 <__sflush_r+0xac>
 800d170:	4633      	mov	r3, r6
 800d172:	463a      	mov	r2, r7
 800d174:	4628      	mov	r0, r5
 800d176:	6a21      	ldr	r1, [r4, #32]
 800d178:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d17c:	47e0      	blx	ip
 800d17e:	2800      	cmp	r0, #0
 800d180:	dc07      	bgt.n	800d192 <__sflush_r+0xf6>
 800d182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d18a:	f04f 30ff 	mov.w	r0, #4294967295
 800d18e:	81a3      	strh	r3, [r4, #12]
 800d190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d192:	4407      	add	r7, r0
 800d194:	1a36      	subs	r6, r6, r0
 800d196:	e7e9      	b.n	800d16c <__sflush_r+0xd0>
 800d198:	dfbffffe 	.word	0xdfbffffe

0800d19c <_fflush_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	690b      	ldr	r3, [r1, #16]
 800d1a0:	4605      	mov	r5, r0
 800d1a2:	460c      	mov	r4, r1
 800d1a4:	b913      	cbnz	r3, 800d1ac <_fflush_r+0x10>
 800d1a6:	2500      	movs	r5, #0
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	bd38      	pop	{r3, r4, r5, pc}
 800d1ac:	b118      	cbz	r0, 800d1b6 <_fflush_r+0x1a>
 800d1ae:	6a03      	ldr	r3, [r0, #32]
 800d1b0:	b90b      	cbnz	r3, 800d1b6 <_fflush_r+0x1a>
 800d1b2:	f7fd fc3d 	bl	800aa30 <__sinit>
 800d1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d0f3      	beq.n	800d1a6 <_fflush_r+0xa>
 800d1be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d1c0:	07d0      	lsls	r0, r2, #31
 800d1c2:	d404      	bmi.n	800d1ce <_fflush_r+0x32>
 800d1c4:	0599      	lsls	r1, r3, #22
 800d1c6:	d402      	bmi.n	800d1ce <_fflush_r+0x32>
 800d1c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d1ca:	f7fd fe08 	bl	800adde <__retarget_lock_acquire_recursive>
 800d1ce:	4628      	mov	r0, r5
 800d1d0:	4621      	mov	r1, r4
 800d1d2:	f7ff ff63 	bl	800d09c <__sflush_r>
 800d1d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d1d8:	4605      	mov	r5, r0
 800d1da:	07da      	lsls	r2, r3, #31
 800d1dc:	d4e4      	bmi.n	800d1a8 <_fflush_r+0xc>
 800d1de:	89a3      	ldrh	r3, [r4, #12]
 800d1e0:	059b      	lsls	r3, r3, #22
 800d1e2:	d4e1      	bmi.n	800d1a8 <_fflush_r+0xc>
 800d1e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d1e6:	f7fd fdfb 	bl	800ade0 <__retarget_lock_release_recursive>
 800d1ea:	e7dd      	b.n	800d1a8 <_fflush_r+0xc>

0800d1ec <__swbuf_r>:
 800d1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ee:	460e      	mov	r6, r1
 800d1f0:	4614      	mov	r4, r2
 800d1f2:	4605      	mov	r5, r0
 800d1f4:	b118      	cbz	r0, 800d1fe <__swbuf_r+0x12>
 800d1f6:	6a03      	ldr	r3, [r0, #32]
 800d1f8:	b90b      	cbnz	r3, 800d1fe <__swbuf_r+0x12>
 800d1fa:	f7fd fc19 	bl	800aa30 <__sinit>
 800d1fe:	69a3      	ldr	r3, [r4, #24]
 800d200:	60a3      	str	r3, [r4, #8]
 800d202:	89a3      	ldrh	r3, [r4, #12]
 800d204:	071a      	lsls	r2, r3, #28
 800d206:	d501      	bpl.n	800d20c <__swbuf_r+0x20>
 800d208:	6923      	ldr	r3, [r4, #16]
 800d20a:	b943      	cbnz	r3, 800d21e <__swbuf_r+0x32>
 800d20c:	4621      	mov	r1, r4
 800d20e:	4628      	mov	r0, r5
 800d210:	f000 f82a 	bl	800d268 <__swsetup_r>
 800d214:	b118      	cbz	r0, 800d21e <__swbuf_r+0x32>
 800d216:	f04f 37ff 	mov.w	r7, #4294967295
 800d21a:	4638      	mov	r0, r7
 800d21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d21e:	6823      	ldr	r3, [r4, #0]
 800d220:	6922      	ldr	r2, [r4, #16]
 800d222:	b2f6      	uxtb	r6, r6
 800d224:	1a98      	subs	r0, r3, r2
 800d226:	6963      	ldr	r3, [r4, #20]
 800d228:	4637      	mov	r7, r6
 800d22a:	4283      	cmp	r3, r0
 800d22c:	dc05      	bgt.n	800d23a <__swbuf_r+0x4e>
 800d22e:	4621      	mov	r1, r4
 800d230:	4628      	mov	r0, r5
 800d232:	f7ff ffb3 	bl	800d19c <_fflush_r>
 800d236:	2800      	cmp	r0, #0
 800d238:	d1ed      	bne.n	800d216 <__swbuf_r+0x2a>
 800d23a:	68a3      	ldr	r3, [r4, #8]
 800d23c:	3b01      	subs	r3, #1
 800d23e:	60a3      	str	r3, [r4, #8]
 800d240:	6823      	ldr	r3, [r4, #0]
 800d242:	1c5a      	adds	r2, r3, #1
 800d244:	6022      	str	r2, [r4, #0]
 800d246:	701e      	strb	r6, [r3, #0]
 800d248:	6962      	ldr	r2, [r4, #20]
 800d24a:	1c43      	adds	r3, r0, #1
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d004      	beq.n	800d25a <__swbuf_r+0x6e>
 800d250:	89a3      	ldrh	r3, [r4, #12]
 800d252:	07db      	lsls	r3, r3, #31
 800d254:	d5e1      	bpl.n	800d21a <__swbuf_r+0x2e>
 800d256:	2e0a      	cmp	r6, #10
 800d258:	d1df      	bne.n	800d21a <__swbuf_r+0x2e>
 800d25a:	4621      	mov	r1, r4
 800d25c:	4628      	mov	r0, r5
 800d25e:	f7ff ff9d 	bl	800d19c <_fflush_r>
 800d262:	2800      	cmp	r0, #0
 800d264:	d0d9      	beq.n	800d21a <__swbuf_r+0x2e>
 800d266:	e7d6      	b.n	800d216 <__swbuf_r+0x2a>

0800d268 <__swsetup_r>:
 800d268:	b538      	push	{r3, r4, r5, lr}
 800d26a:	4b29      	ldr	r3, [pc, #164]	@ (800d310 <__swsetup_r+0xa8>)
 800d26c:	4605      	mov	r5, r0
 800d26e:	6818      	ldr	r0, [r3, #0]
 800d270:	460c      	mov	r4, r1
 800d272:	b118      	cbz	r0, 800d27c <__swsetup_r+0x14>
 800d274:	6a03      	ldr	r3, [r0, #32]
 800d276:	b90b      	cbnz	r3, 800d27c <__swsetup_r+0x14>
 800d278:	f7fd fbda 	bl	800aa30 <__sinit>
 800d27c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d280:	0719      	lsls	r1, r3, #28
 800d282:	d422      	bmi.n	800d2ca <__swsetup_r+0x62>
 800d284:	06da      	lsls	r2, r3, #27
 800d286:	d407      	bmi.n	800d298 <__swsetup_r+0x30>
 800d288:	2209      	movs	r2, #9
 800d28a:	602a      	str	r2, [r5, #0]
 800d28c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d290:	f04f 30ff 	mov.w	r0, #4294967295
 800d294:	81a3      	strh	r3, [r4, #12]
 800d296:	e033      	b.n	800d300 <__swsetup_r+0x98>
 800d298:	0758      	lsls	r0, r3, #29
 800d29a:	d512      	bpl.n	800d2c2 <__swsetup_r+0x5a>
 800d29c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d29e:	b141      	cbz	r1, 800d2b2 <__swsetup_r+0x4a>
 800d2a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d2a4:	4299      	cmp	r1, r3
 800d2a6:	d002      	beq.n	800d2ae <__swsetup_r+0x46>
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	f7fe fc19 	bl	800bae0 <_free_r>
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d2b2:	89a3      	ldrh	r3, [r4, #12]
 800d2b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d2b8:	81a3      	strh	r3, [r4, #12]
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	6063      	str	r3, [r4, #4]
 800d2be:	6923      	ldr	r3, [r4, #16]
 800d2c0:	6023      	str	r3, [r4, #0]
 800d2c2:	89a3      	ldrh	r3, [r4, #12]
 800d2c4:	f043 0308 	orr.w	r3, r3, #8
 800d2c8:	81a3      	strh	r3, [r4, #12]
 800d2ca:	6923      	ldr	r3, [r4, #16]
 800d2cc:	b94b      	cbnz	r3, 800d2e2 <__swsetup_r+0x7a>
 800d2ce:	89a3      	ldrh	r3, [r4, #12]
 800d2d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d2d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d2d8:	d003      	beq.n	800d2e2 <__swsetup_r+0x7a>
 800d2da:	4621      	mov	r1, r4
 800d2dc:	4628      	mov	r0, r5
 800d2de:	f000 f8ca 	bl	800d476 <__smakebuf_r>
 800d2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2e6:	f013 0201 	ands.w	r2, r3, #1
 800d2ea:	d00a      	beq.n	800d302 <__swsetup_r+0x9a>
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	60a2      	str	r2, [r4, #8]
 800d2f0:	6962      	ldr	r2, [r4, #20]
 800d2f2:	4252      	negs	r2, r2
 800d2f4:	61a2      	str	r2, [r4, #24]
 800d2f6:	6922      	ldr	r2, [r4, #16]
 800d2f8:	b942      	cbnz	r2, 800d30c <__swsetup_r+0xa4>
 800d2fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d2fe:	d1c5      	bne.n	800d28c <__swsetup_r+0x24>
 800d300:	bd38      	pop	{r3, r4, r5, pc}
 800d302:	0799      	lsls	r1, r3, #30
 800d304:	bf58      	it	pl
 800d306:	6962      	ldrpl	r2, [r4, #20]
 800d308:	60a2      	str	r2, [r4, #8]
 800d30a:	e7f4      	b.n	800d2f6 <__swsetup_r+0x8e>
 800d30c:	2000      	movs	r0, #0
 800d30e:	e7f7      	b.n	800d300 <__swsetup_r+0x98>
 800d310:	20000188 	.word	0x20000188

0800d314 <memmove>:
 800d314:	4288      	cmp	r0, r1
 800d316:	b510      	push	{r4, lr}
 800d318:	eb01 0402 	add.w	r4, r1, r2
 800d31c:	d902      	bls.n	800d324 <memmove+0x10>
 800d31e:	4284      	cmp	r4, r0
 800d320:	4623      	mov	r3, r4
 800d322:	d807      	bhi.n	800d334 <memmove+0x20>
 800d324:	1e43      	subs	r3, r0, #1
 800d326:	42a1      	cmp	r1, r4
 800d328:	d008      	beq.n	800d33c <memmove+0x28>
 800d32a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d32e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d332:	e7f8      	b.n	800d326 <memmove+0x12>
 800d334:	4601      	mov	r1, r0
 800d336:	4402      	add	r2, r0
 800d338:	428a      	cmp	r2, r1
 800d33a:	d100      	bne.n	800d33e <memmove+0x2a>
 800d33c:	bd10      	pop	{r4, pc}
 800d33e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d342:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d346:	e7f7      	b.n	800d338 <memmove+0x24>

0800d348 <__assert_func>:
 800d348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d34a:	4614      	mov	r4, r2
 800d34c:	461a      	mov	r2, r3
 800d34e:	4b09      	ldr	r3, [pc, #36]	@ (800d374 <__assert_func+0x2c>)
 800d350:	4605      	mov	r5, r0
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	68d8      	ldr	r0, [r3, #12]
 800d356:	b954      	cbnz	r4, 800d36e <__assert_func+0x26>
 800d358:	4b07      	ldr	r3, [pc, #28]	@ (800d378 <__assert_func+0x30>)
 800d35a:	461c      	mov	r4, r3
 800d35c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d360:	9100      	str	r1, [sp, #0]
 800d362:	462b      	mov	r3, r5
 800d364:	4905      	ldr	r1, [pc, #20]	@ (800d37c <__assert_func+0x34>)
 800d366:	f000 f84f 	bl	800d408 <fiprintf>
 800d36a:	f000 f8e3 	bl	800d534 <abort>
 800d36e:	4b04      	ldr	r3, [pc, #16]	@ (800d380 <__assert_func+0x38>)
 800d370:	e7f4      	b.n	800d35c <__assert_func+0x14>
 800d372:	bf00      	nop
 800d374:	20000188 	.word	0x20000188
 800d378:	0800d9be 	.word	0x0800d9be
 800d37c:	0800e11e 	.word	0x0800e11e
 800d380:	0800e111 	.word	0x0800e111

0800d384 <_calloc_r>:
 800d384:	b570      	push	{r4, r5, r6, lr}
 800d386:	fba1 5402 	umull	r5, r4, r1, r2
 800d38a:	b93c      	cbnz	r4, 800d39c <_calloc_r+0x18>
 800d38c:	4629      	mov	r1, r5
 800d38e:	f7fb fd39 	bl	8008e04 <_malloc_r>
 800d392:	4606      	mov	r6, r0
 800d394:	b928      	cbnz	r0, 800d3a2 <_calloc_r+0x1e>
 800d396:	2600      	movs	r6, #0
 800d398:	4630      	mov	r0, r6
 800d39a:	bd70      	pop	{r4, r5, r6, pc}
 800d39c:	220c      	movs	r2, #12
 800d39e:	6002      	str	r2, [r0, #0]
 800d3a0:	e7f9      	b.n	800d396 <_calloc_r+0x12>
 800d3a2:	462a      	mov	r2, r5
 800d3a4:	4621      	mov	r1, r4
 800d3a6:	f7fd fc20 	bl	800abea <memset>
 800d3aa:	e7f5      	b.n	800d398 <_calloc_r+0x14>

0800d3ac <_realloc_r>:
 800d3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3b0:	4680      	mov	r8, r0
 800d3b2:	4615      	mov	r5, r2
 800d3b4:	460c      	mov	r4, r1
 800d3b6:	b921      	cbnz	r1, 800d3c2 <_realloc_r+0x16>
 800d3b8:	4611      	mov	r1, r2
 800d3ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3be:	f7fb bd21 	b.w	8008e04 <_malloc_r>
 800d3c2:	b92a      	cbnz	r2, 800d3d0 <_realloc_r+0x24>
 800d3c4:	f7fe fb8c 	bl	800bae0 <_free_r>
 800d3c8:	2400      	movs	r4, #0
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3d0:	f000 f8b7 	bl	800d542 <_malloc_usable_size_r>
 800d3d4:	4285      	cmp	r5, r0
 800d3d6:	4606      	mov	r6, r0
 800d3d8:	d802      	bhi.n	800d3e0 <_realloc_r+0x34>
 800d3da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d3de:	d8f4      	bhi.n	800d3ca <_realloc_r+0x1e>
 800d3e0:	4629      	mov	r1, r5
 800d3e2:	4640      	mov	r0, r8
 800d3e4:	f7fb fd0e 	bl	8008e04 <_malloc_r>
 800d3e8:	4607      	mov	r7, r0
 800d3ea:	2800      	cmp	r0, #0
 800d3ec:	d0ec      	beq.n	800d3c8 <_realloc_r+0x1c>
 800d3ee:	42b5      	cmp	r5, r6
 800d3f0:	462a      	mov	r2, r5
 800d3f2:	4621      	mov	r1, r4
 800d3f4:	bf28      	it	cs
 800d3f6:	4632      	movcs	r2, r6
 800d3f8:	f7fd fd09 	bl	800ae0e <memcpy>
 800d3fc:	4621      	mov	r1, r4
 800d3fe:	4640      	mov	r0, r8
 800d400:	f7fe fb6e 	bl	800bae0 <_free_r>
 800d404:	463c      	mov	r4, r7
 800d406:	e7e0      	b.n	800d3ca <_realloc_r+0x1e>

0800d408 <fiprintf>:
 800d408:	b40e      	push	{r1, r2, r3}
 800d40a:	b503      	push	{r0, r1, lr}
 800d40c:	4601      	mov	r1, r0
 800d40e:	ab03      	add	r3, sp, #12
 800d410:	4805      	ldr	r0, [pc, #20]	@ (800d428 <fiprintf+0x20>)
 800d412:	f853 2b04 	ldr.w	r2, [r3], #4
 800d416:	6800      	ldr	r0, [r0, #0]
 800d418:	9301      	str	r3, [sp, #4]
 800d41a:	f7ff fd27 	bl	800ce6c <_vfiprintf_r>
 800d41e:	b002      	add	sp, #8
 800d420:	f85d eb04 	ldr.w	lr, [sp], #4
 800d424:	b003      	add	sp, #12
 800d426:	4770      	bx	lr
 800d428:	20000188 	.word	0x20000188

0800d42c <__swhatbuf_r>:
 800d42c:	b570      	push	{r4, r5, r6, lr}
 800d42e:	460c      	mov	r4, r1
 800d430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d434:	4615      	mov	r5, r2
 800d436:	2900      	cmp	r1, #0
 800d438:	461e      	mov	r6, r3
 800d43a:	b096      	sub	sp, #88	@ 0x58
 800d43c:	da0c      	bge.n	800d458 <__swhatbuf_r+0x2c>
 800d43e:	89a3      	ldrh	r3, [r4, #12]
 800d440:	2100      	movs	r1, #0
 800d442:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d446:	bf14      	ite	ne
 800d448:	2340      	movne	r3, #64	@ 0x40
 800d44a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d44e:	2000      	movs	r0, #0
 800d450:	6031      	str	r1, [r6, #0]
 800d452:	602b      	str	r3, [r5, #0]
 800d454:	b016      	add	sp, #88	@ 0x58
 800d456:	bd70      	pop	{r4, r5, r6, pc}
 800d458:	466a      	mov	r2, sp
 800d45a:	f000 f849 	bl	800d4f0 <_fstat_r>
 800d45e:	2800      	cmp	r0, #0
 800d460:	dbed      	blt.n	800d43e <__swhatbuf_r+0x12>
 800d462:	9901      	ldr	r1, [sp, #4]
 800d464:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d468:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d46c:	4259      	negs	r1, r3
 800d46e:	4159      	adcs	r1, r3
 800d470:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d474:	e7eb      	b.n	800d44e <__swhatbuf_r+0x22>

0800d476 <__smakebuf_r>:
 800d476:	898b      	ldrh	r3, [r1, #12]
 800d478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d47a:	079d      	lsls	r5, r3, #30
 800d47c:	4606      	mov	r6, r0
 800d47e:	460c      	mov	r4, r1
 800d480:	d507      	bpl.n	800d492 <__smakebuf_r+0x1c>
 800d482:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d486:	6023      	str	r3, [r4, #0]
 800d488:	6123      	str	r3, [r4, #16]
 800d48a:	2301      	movs	r3, #1
 800d48c:	6163      	str	r3, [r4, #20]
 800d48e:	b003      	add	sp, #12
 800d490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d492:	466a      	mov	r2, sp
 800d494:	ab01      	add	r3, sp, #4
 800d496:	f7ff ffc9 	bl	800d42c <__swhatbuf_r>
 800d49a:	9f00      	ldr	r7, [sp, #0]
 800d49c:	4605      	mov	r5, r0
 800d49e:	4639      	mov	r1, r7
 800d4a0:	4630      	mov	r0, r6
 800d4a2:	f7fb fcaf 	bl	8008e04 <_malloc_r>
 800d4a6:	b948      	cbnz	r0, 800d4bc <__smakebuf_r+0x46>
 800d4a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4ac:	059a      	lsls	r2, r3, #22
 800d4ae:	d4ee      	bmi.n	800d48e <__smakebuf_r+0x18>
 800d4b0:	f023 0303 	bic.w	r3, r3, #3
 800d4b4:	f043 0302 	orr.w	r3, r3, #2
 800d4b8:	81a3      	strh	r3, [r4, #12]
 800d4ba:	e7e2      	b.n	800d482 <__smakebuf_r+0xc>
 800d4bc:	89a3      	ldrh	r3, [r4, #12]
 800d4be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d4c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4c6:	81a3      	strh	r3, [r4, #12]
 800d4c8:	9b01      	ldr	r3, [sp, #4]
 800d4ca:	6020      	str	r0, [r4, #0]
 800d4cc:	b15b      	cbz	r3, 800d4e6 <__smakebuf_r+0x70>
 800d4ce:	4630      	mov	r0, r6
 800d4d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4d4:	f000 f81e 	bl	800d514 <_isatty_r>
 800d4d8:	b128      	cbz	r0, 800d4e6 <__smakebuf_r+0x70>
 800d4da:	89a3      	ldrh	r3, [r4, #12]
 800d4dc:	f023 0303 	bic.w	r3, r3, #3
 800d4e0:	f043 0301 	orr.w	r3, r3, #1
 800d4e4:	81a3      	strh	r3, [r4, #12]
 800d4e6:	89a3      	ldrh	r3, [r4, #12]
 800d4e8:	431d      	orrs	r5, r3
 800d4ea:	81a5      	strh	r5, [r4, #12]
 800d4ec:	e7cf      	b.n	800d48e <__smakebuf_r+0x18>
	...

0800d4f0 <_fstat_r>:
 800d4f0:	b538      	push	{r3, r4, r5, lr}
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	4d06      	ldr	r5, [pc, #24]	@ (800d510 <_fstat_r+0x20>)
 800d4f6:	4604      	mov	r4, r0
 800d4f8:	4608      	mov	r0, r1
 800d4fa:	4611      	mov	r1, r2
 800d4fc:	602b      	str	r3, [r5, #0]
 800d4fe:	f7f8 fd12 	bl	8005f26 <_fstat>
 800d502:	1c43      	adds	r3, r0, #1
 800d504:	d102      	bne.n	800d50c <_fstat_r+0x1c>
 800d506:	682b      	ldr	r3, [r5, #0]
 800d508:	b103      	cbz	r3, 800d50c <_fstat_r+0x1c>
 800d50a:	6023      	str	r3, [r4, #0]
 800d50c:	bd38      	pop	{r3, r4, r5, pc}
 800d50e:	bf00      	nop
 800d510:	20000cf8 	.word	0x20000cf8

0800d514 <_isatty_r>:
 800d514:	b538      	push	{r3, r4, r5, lr}
 800d516:	2300      	movs	r3, #0
 800d518:	4d05      	ldr	r5, [pc, #20]	@ (800d530 <_isatty_r+0x1c>)
 800d51a:	4604      	mov	r4, r0
 800d51c:	4608      	mov	r0, r1
 800d51e:	602b      	str	r3, [r5, #0]
 800d520:	f7f8 fd06 	bl	8005f30 <_isatty>
 800d524:	1c43      	adds	r3, r0, #1
 800d526:	d102      	bne.n	800d52e <_isatty_r+0x1a>
 800d528:	682b      	ldr	r3, [r5, #0]
 800d52a:	b103      	cbz	r3, 800d52e <_isatty_r+0x1a>
 800d52c:	6023      	str	r3, [r4, #0]
 800d52e:	bd38      	pop	{r3, r4, r5, pc}
 800d530:	20000cf8 	.word	0x20000cf8

0800d534 <abort>:
 800d534:	2006      	movs	r0, #6
 800d536:	b508      	push	{r3, lr}
 800d538:	f000 f834 	bl	800d5a4 <raise>
 800d53c:	2001      	movs	r0, #1
 800d53e:	f7f8 fccd 	bl	8005edc <_exit>

0800d542 <_malloc_usable_size_r>:
 800d542:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d546:	1f18      	subs	r0, r3, #4
 800d548:	2b00      	cmp	r3, #0
 800d54a:	bfbc      	itt	lt
 800d54c:	580b      	ldrlt	r3, [r1, r0]
 800d54e:	18c0      	addlt	r0, r0, r3
 800d550:	4770      	bx	lr

0800d552 <_raise_r>:
 800d552:	291f      	cmp	r1, #31
 800d554:	b538      	push	{r3, r4, r5, lr}
 800d556:	4605      	mov	r5, r0
 800d558:	460c      	mov	r4, r1
 800d55a:	d904      	bls.n	800d566 <_raise_r+0x14>
 800d55c:	2316      	movs	r3, #22
 800d55e:	6003      	str	r3, [r0, #0]
 800d560:	f04f 30ff 	mov.w	r0, #4294967295
 800d564:	bd38      	pop	{r3, r4, r5, pc}
 800d566:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d568:	b112      	cbz	r2, 800d570 <_raise_r+0x1e>
 800d56a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d56e:	b94b      	cbnz	r3, 800d584 <_raise_r+0x32>
 800d570:	4628      	mov	r0, r5
 800d572:	f000 f831 	bl	800d5d8 <_getpid_r>
 800d576:	4622      	mov	r2, r4
 800d578:	4601      	mov	r1, r0
 800d57a:	4628      	mov	r0, r5
 800d57c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d580:	f000 b818 	b.w	800d5b4 <_kill_r>
 800d584:	2b01      	cmp	r3, #1
 800d586:	d00a      	beq.n	800d59e <_raise_r+0x4c>
 800d588:	1c59      	adds	r1, r3, #1
 800d58a:	d103      	bne.n	800d594 <_raise_r+0x42>
 800d58c:	2316      	movs	r3, #22
 800d58e:	6003      	str	r3, [r0, #0]
 800d590:	2001      	movs	r0, #1
 800d592:	e7e7      	b.n	800d564 <_raise_r+0x12>
 800d594:	2100      	movs	r1, #0
 800d596:	4620      	mov	r0, r4
 800d598:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d59c:	4798      	blx	r3
 800d59e:	2000      	movs	r0, #0
 800d5a0:	e7e0      	b.n	800d564 <_raise_r+0x12>
	...

0800d5a4 <raise>:
 800d5a4:	4b02      	ldr	r3, [pc, #8]	@ (800d5b0 <raise+0xc>)
 800d5a6:	4601      	mov	r1, r0
 800d5a8:	6818      	ldr	r0, [r3, #0]
 800d5aa:	f7ff bfd2 	b.w	800d552 <_raise_r>
 800d5ae:	bf00      	nop
 800d5b0:	20000188 	.word	0x20000188

0800d5b4 <_kill_r>:
 800d5b4:	b538      	push	{r3, r4, r5, lr}
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	4d06      	ldr	r5, [pc, #24]	@ (800d5d4 <_kill_r+0x20>)
 800d5ba:	4604      	mov	r4, r0
 800d5bc:	4608      	mov	r0, r1
 800d5be:	4611      	mov	r1, r2
 800d5c0:	602b      	str	r3, [r5, #0]
 800d5c2:	f7f8 fc83 	bl	8005ecc <_kill>
 800d5c6:	1c43      	adds	r3, r0, #1
 800d5c8:	d102      	bne.n	800d5d0 <_kill_r+0x1c>
 800d5ca:	682b      	ldr	r3, [r5, #0]
 800d5cc:	b103      	cbz	r3, 800d5d0 <_kill_r+0x1c>
 800d5ce:	6023      	str	r3, [r4, #0]
 800d5d0:	bd38      	pop	{r3, r4, r5, pc}
 800d5d2:	bf00      	nop
 800d5d4:	20000cf8 	.word	0x20000cf8

0800d5d8 <_getpid_r>:
 800d5d8:	f7f8 bc76 	b.w	8005ec8 <_getpid>

0800d5dc <_init>:
 800d5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5de:	bf00      	nop
 800d5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5e2:	bc08      	pop	{r3}
 800d5e4:	469e      	mov	lr, r3
 800d5e6:	4770      	bx	lr

0800d5e8 <_fini>:
 800d5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ea:	bf00      	nop
 800d5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ee:	bc08      	pop	{r3}
 800d5f0:	469e      	mov	lr, r3
 800d5f2:	4770      	bx	lr
