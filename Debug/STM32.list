
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee2c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e98  0800ef40  0800ef40  0000ff40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdd8  0800fdd8  000111d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fdd8  0800fdd8  00010dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fde0  0800fde0  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fde0  0800fde0  00010de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fde4  0800fde4  00010de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800fde8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b38  200001d8  0800ffc0  000111d8  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  20000d10  0800ffc0  00011d10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000280fe  00000000  00000000  00011201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005aaf  00000000  00000000  000392ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00010bc5  00000000  00000000  0003edae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  0004f978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001787  00000000  00000000  000510a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e4c1  00000000  00000000  00052827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d5d5  00000000  00000000  00070ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a335  00000000  00000000  0009e2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001385f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005984  00000000  00000000  00138638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  0013dfbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ef24 	.word	0x0800ef24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800ef24 	.word	0x0800ef24

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	@ 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__gesf2>:
 8000d98:	f04f 3cff 	mov.w	ip, #4294967295
 8000d9c:	e006      	b.n	8000dac <__cmpsf2+0x4>
 8000d9e:	bf00      	nop

08000da0 <__lesf2>:
 8000da0:	f04f 0c01 	mov.w	ip, #1
 8000da4:	e002      	b.n	8000dac <__cmpsf2+0x4>
 8000da6:	bf00      	nop

08000da8 <__cmpsf2>:
 8000da8:	f04f 0c01 	mov.w	ip, #1
 8000dac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000db0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000db4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000db8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dbc:	bf18      	it	ne
 8000dbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dc2:	d011      	beq.n	8000de8 <__cmpsf2+0x40>
 8000dc4:	b001      	add	sp, #4
 8000dc6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dca:	bf18      	it	ne
 8000dcc:	ea90 0f01 	teqne	r0, r1
 8000dd0:	bf58      	it	pl
 8000dd2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dd6:	bf88      	it	hi
 8000dd8:	17c8      	asrhi	r0, r1, #31
 8000dda:	bf38      	it	cc
 8000ddc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000de0:	bf18      	it	ne
 8000de2:	f040 0001 	orrne.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dec:	d102      	bne.n	8000df4 <__cmpsf2+0x4c>
 8000dee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000df2:	d105      	bne.n	8000e00 <__cmpsf2+0x58>
 8000df4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000df8:	d1e4      	bne.n	8000dc4 <__cmpsf2+0x1c>
 8000dfa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dfe:	d0e1      	beq.n	8000dc4 <__cmpsf2+0x1c>
 8000e00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <__aeabi_cfrcmple>:
 8000e08:	4684      	mov	ip, r0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	4661      	mov	r1, ip
 8000e0e:	e7ff      	b.n	8000e10 <__aeabi_cfcmpeq>

08000e10 <__aeabi_cfcmpeq>:
 8000e10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e12:	f7ff ffc9 	bl	8000da8 <__cmpsf2>
 8000e16:	2800      	cmp	r0, #0
 8000e18:	bf48      	it	mi
 8000e1a:	f110 0f00 	cmnmi.w	r0, #0
 8000e1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e20 <__aeabi_fcmpeq>:
 8000e20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e24:	f7ff fff4 	bl	8000e10 <__aeabi_cfcmpeq>
 8000e28:	bf0c      	ite	eq
 8000e2a:	2001      	moveq	r0, #1
 8000e2c:	2000      	movne	r0, #0
 8000e2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e32:	bf00      	nop

08000e34 <__aeabi_fcmplt>:
 8000e34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e38:	f7ff ffea 	bl	8000e10 <__aeabi_cfcmpeq>
 8000e3c:	bf34      	ite	cc
 8000e3e:	2001      	movcc	r0, #1
 8000e40:	2000      	movcs	r0, #0
 8000e42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e46:	bf00      	nop

08000e48 <__aeabi_fcmple>:
 8000e48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e4c:	f7ff ffe0 	bl	8000e10 <__aeabi_cfcmpeq>
 8000e50:	bf94      	ite	ls
 8000e52:	2001      	movls	r0, #1
 8000e54:	2000      	movhi	r0, #0
 8000e56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e5a:	bf00      	nop

08000e5c <__aeabi_fcmpge>:
 8000e5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e60:	f7ff ffd2 	bl	8000e08 <__aeabi_cfrcmple>
 8000e64:	bf94      	ite	ls
 8000e66:	2001      	movls	r0, #1
 8000e68:	2000      	movhi	r0, #0
 8000e6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e6e:	bf00      	nop

08000e70 <__aeabi_fcmpgt>:
 8000e70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e74:	f7ff ffc8 	bl	8000e08 <__aeabi_cfrcmple>
 8000e78:	bf34      	ite	cc
 8000e7a:	2001      	movcc	r0, #1
 8000e7c:	2000      	movcs	r0, #0
 8000e7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e82:	bf00      	nop

08000e84 <__aeabi_uldivmod>:
 8000e84:	b953      	cbnz	r3, 8000e9c <__aeabi_uldivmod+0x18>
 8000e86:	b94a      	cbnz	r2, 8000e9c <__aeabi_uldivmod+0x18>
 8000e88:	2900      	cmp	r1, #0
 8000e8a:	bf08      	it	eq
 8000e8c:	2800      	cmpeq	r0, #0
 8000e8e:	bf1c      	itt	ne
 8000e90:	f04f 31ff 	movne.w	r1, #4294967295
 8000e94:	f04f 30ff 	movne.w	r0, #4294967295
 8000e98:	f000 b99e 	b.w	80011d8 <__aeabi_idiv0>
 8000e9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ea0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ea4:	f000 f83c 	bl	8000f20 <__udivmoddi4>
 8000ea8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eb0:	b004      	add	sp, #16
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_d2lz>:
 8000eb4:	b538      	push	{r3, r4, r5, lr}
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2300      	movs	r3, #0
 8000eba:	4604      	mov	r4, r0
 8000ebc:	460d      	mov	r5, r1
 8000ebe:	f7ff fd87 	bl	80009d0 <__aeabi_dcmplt>
 8000ec2:	b928      	cbnz	r0, 8000ed0 <__aeabi_d2lz+0x1c>
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	4629      	mov	r1, r5
 8000ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ecc:	f000 b80a 	b.w	8000ee4 <__aeabi_d2ulz>
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ed6:	f000 f805 	bl	8000ee4 <__aeabi_d2ulz>
 8000eda:	4240      	negs	r0, r0
 8000edc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ee0:	bd38      	pop	{r3, r4, r5, pc}
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_d2ulz>:
 8000ee4:	b5d0      	push	{r4, r6, r7, lr}
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <__aeabi_d2ulz+0x34>)
 8000eea:	4606      	mov	r6, r0
 8000eec:	460f      	mov	r7, r1
 8000eee:	f7ff fafd 	bl	80004ec <__aeabi_dmul>
 8000ef2:	f7ff fdd3 	bl	8000a9c <__aeabi_d2uiz>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	f7ff fa7e 	bl	80003f8 <__aeabi_ui2d>
 8000efc:	2200      	movs	r2, #0
 8000efe:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <__aeabi_d2ulz+0x38>)
 8000f00:	f7ff faf4 	bl	80004ec <__aeabi_dmul>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4630      	mov	r0, r6
 8000f0a:	4639      	mov	r1, r7
 8000f0c:	f7ff f936 	bl	800017c <__aeabi_dsub>
 8000f10:	f7ff fdc4 	bl	8000a9c <__aeabi_d2uiz>
 8000f14:	4621      	mov	r1, r4
 8000f16:	bdd0      	pop	{r4, r6, r7, pc}
 8000f18:	3df00000 	.word	0x3df00000
 8000f1c:	41f00000 	.word	0x41f00000

08000f20 <__udivmoddi4>:
 8000f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f24:	9d08      	ldr	r5, [sp, #32]
 8000f26:	460c      	mov	r4, r1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d14e      	bne.n	8000fca <__udivmoddi4+0xaa>
 8000f2c:	4694      	mov	ip, r2
 8000f2e:	458c      	cmp	ip, r1
 8000f30:	4686      	mov	lr, r0
 8000f32:	fab2 f282 	clz	r2, r2
 8000f36:	d962      	bls.n	8000ffe <__udivmoddi4+0xde>
 8000f38:	b14a      	cbz	r2, 8000f4e <__udivmoddi4+0x2e>
 8000f3a:	f1c2 0320 	rsb	r3, r2, #32
 8000f3e:	4091      	lsls	r1, r2
 8000f40:	fa20 f303 	lsr.w	r3, r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	4319      	orrs	r1, r3
 8000f4a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f56:	fb07 1114 	mls	r1, r7, r4, r1
 8000f5a:	fa1f f68c 	uxth.w	r6, ip
 8000f5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb04 f106 	mul.w	r1, r4, r6
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d90a      	bls.n	8000f84 <__udivmoddi4+0x64>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f104 30ff 	add.w	r0, r4, #4294967295
 8000f76:	f080 8110 	bcs.w	800119a <__udivmoddi4+0x27a>
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	f240 810d 	bls.w	800119a <__udivmoddi4+0x27a>
 8000f80:	3c02      	subs	r4, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1a59      	subs	r1, r3, r1
 8000f86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000f8e:	fb00 f606 	mul.w	r6, r0, r6
 8000f92:	fa1f f38e 	uxth.w	r3, lr
 8000f96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	d90a      	bls.n	8000fb4 <__udivmoddi4+0x94>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa6:	f080 80fa 	bcs.w	800119e <__udivmoddi4+0x27e>
 8000faa:	429e      	cmp	r6, r3
 8000fac:	f240 80f7 	bls.w	800119e <__udivmoddi4+0x27e>
 8000fb0:	4463      	add	r3, ip
 8000fb2:	3802      	subs	r0, #2
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	1b9b      	subs	r3, r3, r6
 8000fb8:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000fbc:	b11d      	cbz	r5, 8000fc6 <__udivmoddi4+0xa6>
 8000fbe:	40d3      	lsrs	r3, r2
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	d905      	bls.n	8000fda <__udivmoddi4+0xba>
 8000fce:	b10d      	cbz	r5, 8000fd4 <__udivmoddi4+0xb4>
 8000fd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e7f5      	b.n	8000fc6 <__udivmoddi4+0xa6>
 8000fda:	fab3 f183 	clz	r1, r3
 8000fde:	2900      	cmp	r1, #0
 8000fe0:	d146      	bne.n	8001070 <__udivmoddi4+0x150>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d302      	bcc.n	8000fec <__udivmoddi4+0xcc>
 8000fe6:	4290      	cmp	r0, r2
 8000fe8:	f0c0 80ee 	bcc.w	80011c8 <__udivmoddi4+0x2a8>
 8000fec:	1a86      	subs	r6, r0, r2
 8000fee:	eb64 0303 	sbc.w	r3, r4, r3
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	2d00      	cmp	r5, #0
 8000ff6:	d0e6      	beq.n	8000fc6 <__udivmoddi4+0xa6>
 8000ff8:	e9c5 6300 	strd	r6, r3, [r5]
 8000ffc:	e7e3      	b.n	8000fc6 <__udivmoddi4+0xa6>
 8000ffe:	2a00      	cmp	r2, #0
 8001000:	f040 808f 	bne.w	8001122 <__udivmoddi4+0x202>
 8001004:	eba1 040c 	sub.w	r4, r1, ip
 8001008:	2101      	movs	r1, #1
 800100a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800100e:	fa1f f78c 	uxth.w	r7, ip
 8001012:	fbb4 f6f8 	udiv	r6, r4, r8
 8001016:	fb08 4416 	mls	r4, r8, r6, r4
 800101a:	fb07 f006 	mul.w	r0, r7, r6
 800101e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001022:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001026:	4298      	cmp	r0, r3
 8001028:	d908      	bls.n	800103c <__udivmoddi4+0x11c>
 800102a:	eb1c 0303 	adds.w	r3, ip, r3
 800102e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001032:	d202      	bcs.n	800103a <__udivmoddi4+0x11a>
 8001034:	4298      	cmp	r0, r3
 8001036:	f200 80cb 	bhi.w	80011d0 <__udivmoddi4+0x2b0>
 800103a:	4626      	mov	r6, r4
 800103c:	1a1c      	subs	r4, r3, r0
 800103e:	fbb4 f0f8 	udiv	r0, r4, r8
 8001042:	fb08 4410 	mls	r4, r8, r0, r4
 8001046:	fb00 f707 	mul.w	r7, r0, r7
 800104a:	fa1f f38e 	uxth.w	r3, lr
 800104e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001052:	429f      	cmp	r7, r3
 8001054:	d908      	bls.n	8001068 <__udivmoddi4+0x148>
 8001056:	eb1c 0303 	adds.w	r3, ip, r3
 800105a:	f100 34ff 	add.w	r4, r0, #4294967295
 800105e:	d202      	bcs.n	8001066 <__udivmoddi4+0x146>
 8001060:	429f      	cmp	r7, r3
 8001062:	f200 80ae 	bhi.w	80011c2 <__udivmoddi4+0x2a2>
 8001066:	4620      	mov	r0, r4
 8001068:	1bdb      	subs	r3, r3, r7
 800106a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800106e:	e7a5      	b.n	8000fbc <__udivmoddi4+0x9c>
 8001070:	f1c1 0720 	rsb	r7, r1, #32
 8001074:	408b      	lsls	r3, r1
 8001076:	fa22 fc07 	lsr.w	ip, r2, r7
 800107a:	ea4c 0c03 	orr.w	ip, ip, r3
 800107e:	fa24 f607 	lsr.w	r6, r4, r7
 8001082:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001086:	fbb6 f8f9 	udiv	r8, r6, r9
 800108a:	fa1f fe8c 	uxth.w	lr, ip
 800108e:	fb09 6618 	mls	r6, r9, r8, r6
 8001092:	fa20 f307 	lsr.w	r3, r0, r7
 8001096:	408c      	lsls	r4, r1
 8001098:	fa00 fa01 	lsl.w	sl, r0, r1
 800109c:	fb08 f00e 	mul.w	r0, r8, lr
 80010a0:	431c      	orrs	r4, r3
 80010a2:	0c23      	lsrs	r3, r4, #16
 80010a4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010a8:	4298      	cmp	r0, r3
 80010aa:	fa02 f201 	lsl.w	r2, r2, r1
 80010ae:	d90a      	bls.n	80010c6 <__udivmoddi4+0x1a6>
 80010b0:	eb1c 0303 	adds.w	r3, ip, r3
 80010b4:	f108 36ff 	add.w	r6, r8, #4294967295
 80010b8:	f080 8081 	bcs.w	80011be <__udivmoddi4+0x29e>
 80010bc:	4298      	cmp	r0, r3
 80010be:	d97e      	bls.n	80011be <__udivmoddi4+0x29e>
 80010c0:	f1a8 0802 	sub.w	r8, r8, #2
 80010c4:	4463      	add	r3, ip
 80010c6:	1a1e      	subs	r6, r3, r0
 80010c8:	fbb6 f3f9 	udiv	r3, r6, r9
 80010cc:	fb09 6613 	mls	r6, r9, r3, r6
 80010d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80010d4:	b2a4      	uxth	r4, r4
 80010d6:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80010da:	45a6      	cmp	lr, r4
 80010dc:	d908      	bls.n	80010f0 <__udivmoddi4+0x1d0>
 80010de:	eb1c 0404 	adds.w	r4, ip, r4
 80010e2:	f103 30ff 	add.w	r0, r3, #4294967295
 80010e6:	d266      	bcs.n	80011b6 <__udivmoddi4+0x296>
 80010e8:	45a6      	cmp	lr, r4
 80010ea:	d964      	bls.n	80011b6 <__udivmoddi4+0x296>
 80010ec:	3b02      	subs	r3, #2
 80010ee:	4464      	add	r4, ip
 80010f0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80010f4:	fba0 8302 	umull	r8, r3, r0, r2
 80010f8:	eba4 040e 	sub.w	r4, r4, lr
 80010fc:	429c      	cmp	r4, r3
 80010fe:	46c6      	mov	lr, r8
 8001100:	461e      	mov	r6, r3
 8001102:	d350      	bcc.n	80011a6 <__udivmoddi4+0x286>
 8001104:	d04d      	beq.n	80011a2 <__udivmoddi4+0x282>
 8001106:	b155      	cbz	r5, 800111e <__udivmoddi4+0x1fe>
 8001108:	ebba 030e 	subs.w	r3, sl, lr
 800110c:	eb64 0406 	sbc.w	r4, r4, r6
 8001110:	fa04 f707 	lsl.w	r7, r4, r7
 8001114:	40cb      	lsrs	r3, r1
 8001116:	431f      	orrs	r7, r3
 8001118:	40cc      	lsrs	r4, r1
 800111a:	e9c5 7400 	strd	r7, r4, [r5]
 800111e:	2100      	movs	r1, #0
 8001120:	e751      	b.n	8000fc6 <__udivmoddi4+0xa6>
 8001122:	fa0c fc02 	lsl.w	ip, ip, r2
 8001126:	f1c2 0320 	rsb	r3, r2, #32
 800112a:	40d9      	lsrs	r1, r3
 800112c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001130:	fa20 f303 	lsr.w	r3, r0, r3
 8001134:	fa00 fe02 	lsl.w	lr, r0, r2
 8001138:	fbb1 f0f8 	udiv	r0, r1, r8
 800113c:	fb08 1110 	mls	r1, r8, r0, r1
 8001140:	4094      	lsls	r4, r2
 8001142:	431c      	orrs	r4, r3
 8001144:	fa1f f78c 	uxth.w	r7, ip
 8001148:	0c23      	lsrs	r3, r4, #16
 800114a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800114e:	fb00 f107 	mul.w	r1, r0, r7
 8001152:	4299      	cmp	r1, r3
 8001154:	d908      	bls.n	8001168 <__udivmoddi4+0x248>
 8001156:	eb1c 0303 	adds.w	r3, ip, r3
 800115a:	f100 36ff 	add.w	r6, r0, #4294967295
 800115e:	d22c      	bcs.n	80011ba <__udivmoddi4+0x29a>
 8001160:	4299      	cmp	r1, r3
 8001162:	d92a      	bls.n	80011ba <__udivmoddi4+0x29a>
 8001164:	3802      	subs	r0, #2
 8001166:	4463      	add	r3, ip
 8001168:	1a5b      	subs	r3, r3, r1
 800116a:	fbb3 f1f8 	udiv	r1, r3, r8
 800116e:	fb08 3311 	mls	r3, r8, r1, r3
 8001172:	b2a4      	uxth	r4, r4
 8001174:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001178:	fb01 f307 	mul.w	r3, r1, r7
 800117c:	42a3      	cmp	r3, r4
 800117e:	d908      	bls.n	8001192 <__udivmoddi4+0x272>
 8001180:	eb1c 0404 	adds.w	r4, ip, r4
 8001184:	f101 36ff 	add.w	r6, r1, #4294967295
 8001188:	d213      	bcs.n	80011b2 <__udivmoddi4+0x292>
 800118a:	42a3      	cmp	r3, r4
 800118c:	d911      	bls.n	80011b2 <__udivmoddi4+0x292>
 800118e:	3902      	subs	r1, #2
 8001190:	4464      	add	r4, ip
 8001192:	1ae4      	subs	r4, r4, r3
 8001194:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001198:	e73b      	b.n	8001012 <__udivmoddi4+0xf2>
 800119a:	4604      	mov	r4, r0
 800119c:	e6f2      	b.n	8000f84 <__udivmoddi4+0x64>
 800119e:	4608      	mov	r0, r1
 80011a0:	e708      	b.n	8000fb4 <__udivmoddi4+0x94>
 80011a2:	45c2      	cmp	sl, r8
 80011a4:	d2af      	bcs.n	8001106 <__udivmoddi4+0x1e6>
 80011a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80011aa:	eb63 060c 	sbc.w	r6, r3, ip
 80011ae:	3801      	subs	r0, #1
 80011b0:	e7a9      	b.n	8001106 <__udivmoddi4+0x1e6>
 80011b2:	4631      	mov	r1, r6
 80011b4:	e7ed      	b.n	8001192 <__udivmoddi4+0x272>
 80011b6:	4603      	mov	r3, r0
 80011b8:	e79a      	b.n	80010f0 <__udivmoddi4+0x1d0>
 80011ba:	4630      	mov	r0, r6
 80011bc:	e7d4      	b.n	8001168 <__udivmoddi4+0x248>
 80011be:	46b0      	mov	r8, r6
 80011c0:	e781      	b.n	80010c6 <__udivmoddi4+0x1a6>
 80011c2:	4463      	add	r3, ip
 80011c4:	3802      	subs	r0, #2
 80011c6:	e74f      	b.n	8001068 <__udivmoddi4+0x148>
 80011c8:	4606      	mov	r6, r0
 80011ca:	4623      	mov	r3, r4
 80011cc:	4608      	mov	r0, r1
 80011ce:	e711      	b.n	8000ff4 <__udivmoddi4+0xd4>
 80011d0:	3e02      	subs	r6, #2
 80011d2:	4463      	add	r3, ip
 80011d4:	e732      	b.n	800103c <__udivmoddi4+0x11c>
 80011d6:	bf00      	nop

080011d8 <__aeabi_idiv0>:
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop

080011dc <AD24C02_Write2Byte>:
//
//    I2C_WriteData( AD24C02_ADDRESS, buffer, 3);
//
//}

void AD24C02_Write2Byte(uint8_t memAddress, uint16_t *data) {
 80011dc:	b507      	push	{r0, r1, r2, lr}
    uint8_t buffer[3];
    buffer[0] = memAddress;          // Memory address
    buffer[1] = (uint8_t)(*data);    // Low byte of data
 80011de:	880b      	ldrh	r3, [r1, #0]
    buffer[0] = memAddress;          // Memory address
 80011e0:	f88d 0004 	strb.w	r0, [sp, #4]
    buffer[1] = (uint8_t)(*data);    // Low byte of data
 80011e4:	f88d 3005 	strb.w	r3, [sp, #5]
    buffer[2] = (uint8_t)(*data >> 8); // High byte of data
    I2C_WriteData(AD24C02_ADDRESS, buffer, 3); // Write address + 2 bytes
 80011e8:	2203      	movs	r2, #3
    buffer[2] = (uint8_t)(*data >> 8); // High byte of data
 80011ea:	0a1b      	lsrs	r3, r3, #8
    I2C_WriteData(AD24C02_ADDRESS, buffer, 3); // Write address + 2 bytes
 80011ec:	a901      	add	r1, sp, #4
 80011ee:	20a0      	movs	r0, #160	@ 0xa0
    buffer[2] = (uint8_t)(*data >> 8); // High byte of data
 80011f0:	f88d 3006 	strb.w	r3, [sp, #6]
    I2C_WriteData(AD24C02_ADDRESS, buffer, 3); // Write address + 2 bytes
 80011f4:	f005 fc76 	bl	8006ae4 <I2C_WriteData>
}
 80011f8:	b003      	add	sp, #12
 80011fa:	f85d fb04 	ldr.w	pc, [sp], #4

080011fe <AD24C02_Read2Byte>:

void AD24C02_Read2Byte(uint8_t memAddress, uint16_t *data) {
 80011fe:	b513      	push	{r0, r1, r4, lr}
 8001200:	460c      	mov	r4, r1
 8001202:	f88d 0007 	strb.w	r0, [sp, #7]
   I2C_WriteData(AD24C02_ADDRESS, &memAddress, 1);
 8001206:	f10d 0107 	add.w	r1, sp, #7
 800120a:	2201      	movs	r2, #1
 800120c:	20a0      	movs	r0, #160	@ 0xa0
 800120e:	f005 fc69 	bl	8006ae4 <I2C_WriteData>
   I2C_ReadData(AD24C02_ADDRESS, (uint8_t*)data, 2);
 8001212:	2202      	movs	r2, #2
 8001214:	4621      	mov	r1, r4
 8001216:	20a0      	movs	r0, #160	@ 0xa0
 8001218:	f005 fc84 	bl	8006b24 <I2C_ReadData>
}
 800121c:	b002      	add	sp, #8
 800121e:	bd10      	pop	{r4, pc}

08001220 <READOUT_SAVE_DATA>:

void READOUT_SAVE_DATA(void){
 8001220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	AD24C02_Read2Byte(SUM_DOSAGE_ADDRESS,&total_inject_Dosage);
 8001222:	4e19      	ldr	r6, [pc, #100]	@ (8001288 <READOUT_SAVE_DATA+0x68>)
	HAL_Delay(10);
	AD24C02_Read2Byte(TOTAL_TREE_ADDRESS,&total_Times);
 8001224:	4f19      	ldr	r7, [pc, #100]	@ (800128c <READOUT_SAVE_DATA+0x6c>)
	AD24C02_Read2Byte(SUM_DOSAGE_ADDRESS,&total_inject_Dosage);
 8001226:	4631      	mov	r1, r6
 8001228:	2020      	movs	r0, #32
 800122a:	f7ff ffe8 	bl	80011fe <AD24C02_Read2Byte>
	HAL_Delay(10);
 800122e:	200a      	movs	r0, #10
 8001230:	f007 f918 	bl	8008464 <HAL_Delay>
	HAL_Delay(10);
	AD24C02_Read2Byte(CURRENT_TREE_NUMBER,&current_TreeNo);
 8001234:	4d16      	ldr	r5, [pc, #88]	@ (8001290 <READOUT_SAVE_DATA+0x70>)
	AD24C02_Read2Byte(TOTAL_TREE_ADDRESS,&total_Times);
 8001236:	4639      	mov	r1, r7
 8001238:	2030      	movs	r0, #48	@ 0x30
 800123a:	f7ff ffe0 	bl	80011fe <AD24C02_Read2Byte>
	HAL_Delay(10);
 800123e:	200a      	movs	r0, #10
	HAL_Delay(10);
//	Refresh_counter();
	sprintf(Tx_Buffer,"Main.n2.val=%d\xff\xff\xff",total_Times);
 8001240:	4c14      	ldr	r4, [pc, #80]	@ (8001294 <READOUT_SAVE_DATA+0x74>)
	HAL_Delay(10);
 8001242:	f007 f90f 	bl	8008464 <HAL_Delay>
	AD24C02_Read2Byte(CURRENT_TREE_NUMBER,&current_TreeNo);
 8001246:	4629      	mov	r1, r5
 8001248:	2040      	movs	r0, #64	@ 0x40
 800124a:	f7ff ffd8 	bl	80011fe <AD24C02_Read2Byte>
	HAL_Delay(10);
 800124e:	200a      	movs	r0, #10
 8001250:	f007 f908 	bl	8008464 <HAL_Delay>
	sprintf(Tx_Buffer,"Main.n2.val=%d\xff\xff\xff",total_Times);
 8001254:	883a      	ldrh	r2, [r7, #0]
 8001256:	4910      	ldr	r1, [pc, #64]	@ (8001298 <READOUT_SAVE_DATA+0x78>)
 8001258:	4620      	mov	r0, r4
 800125a:	f00b f8f7 	bl	800c44c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800125e:	4620      	mov	r0, r4
 8001260:	f006 ffc0 	bl	80081e4 <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"Main.n3.val=%d\xff\xff\xff",total_inject_Dosage);
 8001264:	8832      	ldrh	r2, [r6, #0]
 8001266:	490d      	ldr	r1, [pc, #52]	@ (800129c <READOUT_SAVE_DATA+0x7c>)
 8001268:	4620      	mov	r0, r4
 800126a:	f00b f8ef 	bl	800c44c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800126e:	4620      	mov	r0, r4
 8001270:	f006 ffb8 	bl	80081e4 <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"Main.n1.val=%d\xff\xff\xff",current_TreeNo);
 8001274:	4620      	mov	r0, r4
 8001276:	882a      	ldrh	r2, [r5, #0]
 8001278:	4909      	ldr	r1, [pc, #36]	@ (80012a0 <READOUT_SAVE_DATA+0x80>)
 800127a:	f00b f8e7 	bl	800c44c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800127e:	4620      	mov	r0, r4
}
 8001280:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001284:	f006 bfae 	b.w	80081e4 <USART1_Tx_HMIdata>
 8001288:	20000a50 	.word	0x20000a50
 800128c:	20000a4e 	.word	0x20000a4e
 8001290:	200008c2 	.word	0x200008c2
 8001294:	20000b8e 	.word	0x20000b8e
 8001298:	0800ef43 	.word	0x0800ef43
 800129c:	0800ef55 	.word	0x0800ef55
 80012a0:	0800ef67 	.word	0x0800ef67

080012a4 <AD24C02_DataCheck>:

void AD24C02_DataCheck(void){
 80012a4:	b508      	push	{r3, lr}
	if(total_inject_Dosage > 9999){
 80012a6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80012aa:	4911      	ldr	r1, [pc, #68]	@ (80012f0 <AD24C02_DataCheck+0x4c>)
 80012ac:	880a      	ldrh	r2, [r1, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d904      	bls.n	80012bc <AD24C02_DataCheck+0x18>
		total_inject_Dosage = 0;
 80012b2:	2300      	movs	r3, #0
		AD24C02_Write2Byte(SUM_DOSAGE_ADDRESS,&total_inject_Dosage);
 80012b4:	2020      	movs	r0, #32
		total_inject_Dosage = 0;
 80012b6:	800b      	strh	r3, [r1, #0]
		AD24C02_Write2Byte(SUM_DOSAGE_ADDRESS,&total_inject_Dosage);
 80012b8:	f7ff ff90 	bl	80011dc <AD24C02_Write2Byte>
	}
	if(total_Times > 9999){
 80012bc:	f242 730f 	movw	r3, #9999	@ 0x270f
 80012c0:	490c      	ldr	r1, [pc, #48]	@ (80012f4 <AD24C02_DataCheck+0x50>)
 80012c2:	880a      	ldrh	r2, [r1, #0]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d904      	bls.n	80012d2 <AD24C02_DataCheck+0x2e>
		total_Times = 0;
 80012c8:	2300      	movs	r3, #0
		AD24C02_Write2Byte(TOTAL_TREE_ADDRESS,&total_Times);
 80012ca:	2030      	movs	r0, #48	@ 0x30
		total_Times = 0;
 80012cc:	800b      	strh	r3, [r1, #0]
		AD24C02_Write2Byte(TOTAL_TREE_ADDRESS,&total_Times);
 80012ce:	f7ff ff85 	bl	80011dc <AD24C02_Write2Byte>
	}
	if(current_TreeNo > 9999){
 80012d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80012d6:	4908      	ldr	r1, [pc, #32]	@ (80012f8 <AD24C02_DataCheck+0x54>)
 80012d8:	880a      	ldrh	r2, [r1, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d906      	bls.n	80012ec <AD24C02_DataCheck+0x48>
		current_TreeNo = 0;
 80012de:	2300      	movs	r3, #0
		AD24C02_Write2Byte(CURRENT_TREE_NUMBER,&current_TreeNo);
 80012e0:	2040      	movs	r0, #64	@ 0x40
		current_TreeNo = 0;
 80012e2:	800b      	strh	r3, [r1, #0]
	}
}
 80012e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		AD24C02_Write2Byte(CURRENT_TREE_NUMBER,&current_TreeNo);
 80012e8:	f7ff bf78 	b.w	80011dc <AD24C02_Write2Byte>
}
 80012ec:	bd08      	pop	{r3, pc}
 80012ee:	bf00      	nop
 80012f0:	20000a50 	.word	0x20000a50
 80012f4:	20000a4e 	.word	0x20000a4e
 80012f8:	200008c2 	.word	0x200008c2

080012fc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80012fc:	b507      	push	{r0, r1, r2, lr}
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
PUTCHAR_PROTOTYPE {
 8001302:	9001      	str	r0, [sp, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001304:	2201      	movs	r2, #1
 8001306:	a901      	add	r1, sp, #4
 8001308:	4803      	ldr	r0, [pc, #12]	@ (8001318 <__io_putchar+0x1c>)
 800130a:	f008 fe7a 	bl	800a002 <HAL_UART_Transmit>
    return ch;
}
 800130e:	9801      	ldr	r0, [sp, #4]
 8001310:	b003      	add	sp, #12
 8001312:	f85d fb04 	ldr.w	pc, [sp], #4
 8001316:	bf00      	nop
 8001318:	20000b44 	.word	0x20000b44

0800131c <process_gps_data>:



/* 解析GPS-GGA数据 */
int process_gps_data(const char *data, GPS_Data* result) {
 800131c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001320:	460c      	mov	r4, r1
    if (!data || !result) return -1;
 8001322:	4605      	mov	r5, r0
int process_gps_data(const char *data, GPS_Data* result) {
 8001324:	b0a2      	sub	sp, #136	@ 0x88
    if (!data || !result) return -1;
 8001326:	b920      	cbnz	r0, 8001332 <process_gps_data+0x16>
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
        }
        token = strtok_r(NULL, ",", &saveptr);
        field_index++;
    }
    return 0; // 成功
}
 800132c:	b022      	add	sp, #136	@ 0x88
 800132e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!data || !result) return -1;
 8001332:	2900      	cmp	r1, #0
 8001334:	d0f8      	beq.n	8001328 <process_gps_data+0xc>
    memset(result, 0, sizeof(GPS_Data));
 8001336:	223c      	movs	r2, #60	@ 0x3c
 8001338:	2100      	movs	r1, #0
 800133a:	4620      	mov	r0, r4
 800133c:	f00b f98e 	bl	800c65c <memset>
    char *checksum_ptr = strchr(data, '*');
 8001340:	212a      	movs	r1, #42	@ 0x2a
 8001342:	4628      	mov	r0, r5
 8001344:	f00b f9a1 	bl	800c68a <strchr>
    if (!checksum_ptr) return -1; // 无校验和
 8001348:	4606      	mov	r6, r0
 800134a:	2800      	cmp	r0, #0
 800134c:	d0ec      	beq.n	8001328 <process_gps_data+0xc>
    uint8_t checksum_recv = strtol(checksum_ptr + 1, NULL, 16);
 800134e:	2210      	movs	r2, #16
 8001350:	2100      	movs	r1, #0
 8001352:	3001      	adds	r0, #1
 8001354:	f00a f89e 	bl	800b494 <strtol>
    for (const char *p = data + 1; p < checksum_ptr; p++) {
 8001358:	1c6f      	adds	r7, r5, #1
 800135a:	463a      	mov	r2, r7
    uint8_t checksum_calc = 0;
 800135c:	2300      	movs	r3, #0
    uint8_t checksum_recv = strtol(checksum_ptr + 1, NULL, 16);
 800135e:	b2c0      	uxtb	r0, r0
    for (const char *p = data + 1; p < checksum_ptr; p++) {
 8001360:	42b2      	cmp	r2, r6
 8001362:	d32a      	bcc.n	80013ba <process_gps_data+0x9e>
    if (checksum_calc != checksum_recv) {
 8001364:	4283      	cmp	r3, r0
 8001366:	f040 80b4 	bne.w	80014d2 <process_gps_data+0x1b6>
    if (strncmp(data + 1, "GNGGA", 5) != 0 && strncmp(data + 1, "GNRMC", 5) != 0) {
 800136a:	2205      	movs	r2, #5
 800136c:	4638      	mov	r0, r7
 800136e:	495c      	ldr	r1, [pc, #368]	@ (80014e0 <process_gps_data+0x1c4>)
 8001370:	f00b f998 	bl	800c6a4 <strncmp>
 8001374:	b138      	cbz	r0, 8001386 <process_gps_data+0x6a>
 8001376:	2205      	movs	r2, #5
 8001378:	4638      	mov	r0, r7
 800137a:	495a      	ldr	r1, [pc, #360]	@ (80014e4 <process_gps_data+0x1c8>)
 800137c:	f00b f992 	bl	800c6a4 <strncmp>
 8001380:	2800      	cmp	r0, #0
 8001382:	f040 80a9 	bne.w	80014d8 <process_gps_data+0x1bc>
    result->header[5] = '\0';
 8001386:	2600      	movs	r6, #0
    strncpy(result->header, data + 1, 5);
 8001388:	4639      	mov	r1, r7
 800138a:	2205      	movs	r2, #5
 800138c:	4620      	mov	r0, r4
 800138e:	f00b f99b 	bl	800c6c8 <strncpy>
    strncpy(data_copy, data, sizeof(data_copy));
 8001392:	4629      	mov	r1, r5
 8001394:	2280      	movs	r2, #128	@ 0x80
    result->header[5] = '\0';
 8001396:	7166      	strb	r6, [r4, #5]
    strncpy(data_copy, data, sizeof(data_copy));
 8001398:	a802      	add	r0, sp, #8
 800139a:	f00b f995 	bl	800c6c8 <strncpy>
    token = strtok_r(data_copy, ",", &saveptr);
 800139e:	4952      	ldr	r1, [pc, #328]	@ (80014e8 <process_gps_data+0x1cc>)
 80013a0:	aa01      	add	r2, sp, #4
 80013a2:	a802      	add	r0, sp, #8
 80013a4:	f00b f9cb 	bl	800c73e <strtok_r>
 80013a8:	4605      	mov	r5, r0
                if (strcmp(result->header, "GNGGA") == 0) {
 80013aa:	4f4d      	ldr	r7, [pc, #308]	@ (80014e0 <process_gps_data+0x1c4>)
        token = strtok_r(NULL, ",", &saveptr);
 80013ac:	f8df a138 	ldr.w	sl, [pc, #312]	@ 80014e8 <process_gps_data+0x1cc>
                strncpy(result->time, token, sizeof(result->time) - 1);
 80013b0:	f104 0907 	add.w	r9, r4, #7
    while (token) {
 80013b4:	b92d      	cbnz	r5, 80013c2 <process_gps_data+0xa6>
    return 0; // 成功
 80013b6:	4628      	mov	r0, r5
 80013b8:	e7b8      	b.n	800132c <process_gps_data+0x10>
        checksum_calc ^= *p;
 80013ba:	f812 1b01 	ldrb.w	r1, [r2], #1
 80013be:	404b      	eors	r3, r1
    for (const char *p = data + 1; p < checksum_ptr; p++) {
 80013c0:	e7ce      	b.n	8001360 <process_gps_data+0x44>
        switch (field_index) {
 80013c2:	1e73      	subs	r3, r6, #1
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	d80d      	bhi.n	80013e4 <process_gps_data+0xc8>
 80013c8:	e8df f003 	tbb	[pc, r3]
 80013cc:	2e241405 	.word	0x2e241405
 80013d0:	0c0c5544 	.word	0x0c0c5544
 80013d4:	67          	.byte	0x67
 80013d5:	00          	.byte	0x00
                strncpy(result->time, token, sizeof(result->time) - 1);
 80013d6:	220b      	movs	r2, #11
 80013d8:	4629      	mov	r1, r5
 80013da:	4648      	mov	r0, r9
 80013dc:	f00b f974 	bl	800c6c8 <strncpy>
                result->time[sizeof(result->time) - 1] = '\0';
 80013e0:	2300      	movs	r3, #0
 80013e2:	74a3      	strb	r3, [r4, #18]
        token = strtok_r(NULL, ",", &saveptr);
 80013e4:	4651      	mov	r1, sl
 80013e6:	2000      	movs	r0, #0
 80013e8:	aa01      	add	r2, sp, #4
 80013ea:	f00b f9a8 	bl	800c73e <strtok_r>
        field_index++;
 80013ee:	3601      	adds	r6, #1
        token = strtok_r(NULL, ",", &saveptr);
 80013f0:	4605      	mov	r5, r0
        field_index++;
 80013f2:	e7df      	b.n	80013b4 <process_gps_data+0x98>
								if (strcmp(result->header, "GNGGA") == 0){
 80013f4:	4639      	mov	r1, r7
            		} else if (strcmp(result->header, "GNRMC") == 0) {
 80013f6:	4620      	mov	r0, r4
 80013f8:	f7fe feaa 	bl	8000150 <strcmp>
 80013fc:	4680      	mov	r8, r0
 80013fe:	2800      	cmp	r0, #0
 8001400:	d1f0      	bne.n	80013e4 <process_gps_data+0xc8>
										strncpy(result->latitude, token, sizeof(result->latitude) - 1);
 8001402:	220b      	movs	r2, #11
 8001404:	4629      	mov	r1, r5
 8001406:	f104 0013 	add.w	r0, r4, #19
 800140a:	f00b f95d 	bl	800c6c8 <strncpy>
										result->latitude[sizeof(result->latitude) - 1] = '\0';
 800140e:	f884 801e 	strb.w	r8, [r4, #30]
 8001412:	e7e7      	b.n	80013e4 <process_gps_data+0xc8>
            		if (strcmp(result->header, "GNGGA") == 0){
 8001414:	4639      	mov	r1, r7
 8001416:	4620      	mov	r0, r4
 8001418:	f7fe fe9a 	bl	8000150 <strcmp>
 800141c:	b910      	cbnz	r0, 8001424 <process_gps_data+0x108>
										result->lat_dir = *token;
 800141e:	782b      	ldrb	r3, [r5, #0]
 8001420:	77e3      	strb	r3, [r4, #31]
 8001422:	e7df      	b.n	80013e4 <process_gps_data+0xc8>
            		} else if (strcmp(result->header, "GNRMC") == 0) {
 8001424:	492f      	ldr	r1, [pc, #188]	@ (80014e4 <process_gps_data+0x1c8>)
 8001426:	e7e6      	b.n	80013f6 <process_gps_data+0xda>
								if (strcmp(result->header, "GNGGA") == 0){
 8001428:	4639      	mov	r1, r7
 800142a:	4620      	mov	r0, r4
 800142c:	f7fe fe90 	bl	8000150 <strcmp>
 8001430:	4680      	mov	r8, r0
 8001432:	b940      	cbnz	r0, 8001446 <process_gps_data+0x12a>
										strncpy(result->longitude, token, sizeof(result->longitude) - 1);
 8001434:	220b      	movs	r2, #11
 8001436:	4629      	mov	r1, r5
 8001438:	f104 0020 	add.w	r0, r4, #32
 800143c:	f00b f944 	bl	800c6c8 <strncpy>
										result->longitude[sizeof(result->longitude) - 1] = '\0';
 8001440:	f884 802b 	strb.w	r8, [r4, #43]	@ 0x2b
 8001444:	e7ce      	b.n	80013e4 <process_gps_data+0xc8>
								}else if (strcmp(result->header, "GNRMC") == 0) {
 8001446:	4620      	mov	r0, r4
 8001448:	4926      	ldr	r1, [pc, #152]	@ (80014e4 <process_gps_data+0x1c8>)
 800144a:	f7fe fe81 	bl	8000150 <strcmp>
 800144e:	2800      	cmp	r0, #0
 8001450:	d1c8      	bne.n	80013e4 <process_gps_data+0xc8>
 8001452:	e7e4      	b.n	800141e <process_gps_data+0x102>
								if (strcmp(result->header, "GNGGA") == 0){
 8001454:	4639      	mov	r1, r7
 8001456:	4620      	mov	r0, r4
 8001458:	f7fe fe7a 	bl	8000150 <strcmp>
 800145c:	b918      	cbnz	r0, 8001466 <process_gps_data+0x14a>
										result->lon_dir = *token;
 800145e:	782b      	ldrb	r3, [r5, #0]
 8001460:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8001464:	e7be      	b.n	80013e4 <process_gps_data+0xc8>
								}else if (strcmp(result->header, "GNRMC") == 0) {
 8001466:	4620      	mov	r0, r4
 8001468:	491e      	ldr	r1, [pc, #120]	@ (80014e4 <process_gps_data+0x1c8>)
 800146a:	f7fe fe71 	bl	8000150 <strcmp>
 800146e:	4680      	mov	r8, r0
 8001470:	2800      	cmp	r0, #0
 8001472:	d1b7      	bne.n	80013e4 <process_gps_data+0xc8>
 8001474:	e7de      	b.n	8001434 <process_gps_data+0x118>
								if (strcmp(result->header, "GNGGA") == 0){
 8001476:	4639      	mov	r1, r7
 8001478:	4620      	mov	r0, r4
 800147a:	f7fe fe69 	bl	8000150 <strcmp>
 800147e:	b928      	cbnz	r0, 800148c <process_gps_data+0x170>
										result->fix_status = (uint8_t)atoi(token);
 8001480:	4628      	mov	r0, r5
 8001482:	f009 f8bd 	bl	800a600 <atoi>
 8001486:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800148a:	e7ab      	b.n	80013e4 <process_gps_data+0xc8>
								}else if (strcmp(result->header, "GNRMC") == 0) {
 800148c:	4620      	mov	r0, r4
 800148e:	4915      	ldr	r1, [pc, #84]	@ (80014e4 <process_gps_data+0x1c8>)
 8001490:	f7fe fe5e 	bl	8000150 <strcmp>
 8001494:	2800      	cmp	r0, #0
 8001496:	d1a5      	bne.n	80013e4 <process_gps_data+0xc8>
 8001498:	e7e1      	b.n	800145e <process_gps_data+0x142>
                if (strcmp(result->header, "GNGGA") == 0) {
 800149a:	4639      	mov	r1, r7
 800149c:	4620      	mov	r0, r4
 800149e:	f7fe fe57 	bl	8000150 <strcmp>
 80014a2:	b930      	cbnz	r0, 80014b2 <process_gps_data+0x196>
                    result->altitude = atof(token);
 80014a4:	4628      	mov	r0, r5
 80014a6:	f009 f8a8 	bl	800a5fa <atof>
 80014aa:	f7ff fb17 	bl	8000adc <__aeabi_d2f>
 80014ae:	6320      	str	r0, [r4, #48]	@ 0x30
 80014b0:	e798      	b.n	80013e4 <process_gps_data+0xc8>
                } else if (strcmp(result->header, "GNRMC") == 0) {
 80014b2:	4620      	mov	r0, r4
 80014b4:	490b      	ldr	r1, [pc, #44]	@ (80014e4 <process_gps_data+0x1c8>)
 80014b6:	f7fe fe4b 	bl	8000150 <strcmp>
 80014ba:	4680      	mov	r8, r0
 80014bc:	2800      	cmp	r0, #0
 80014be:	d191      	bne.n	80013e4 <process_gps_data+0xc8>
                    strncpy(result->date, token, sizeof(result->date) - 1);
 80014c0:	2206      	movs	r2, #6
 80014c2:	4629      	mov	r1, r5
 80014c4:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80014c8:	f00b f8fe 	bl	800c6c8 <strncpy>
                    result->date[sizeof(result->date) - 1] = '\0';
 80014cc:	f884 803a 	strb.w	r8, [r4, #58]	@ 0x3a
 80014d0:	e788      	b.n	80013e4 <process_gps_data+0xc8>
        return -2; // 校验和错误
 80014d2:	f06f 0001 	mvn.w	r0, #1
 80014d6:	e729      	b.n	800132c <process_gps_data+0x10>
        return -3; // 不支持的消息类型
 80014d8:	f06f 0002 	mvn.w	r0, #2
 80014dc:	e726      	b.n	800132c <process_gps_data+0x10>
 80014de:	bf00      	nop
 80014e0:	0800ef79 	.word	0x0800ef79
 80014e4:	0800ef7f 	.word	0x0800ef7f
 80014e8:	0800f234 	.word	0x0800f234

080014ec <Format_GPS_Date>:
//格式化日期字符串
void Format_GPS_Date(char* DateResault,char* time,char* date){
 80014ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014f0:	4615      	mov	r5, r2
		char Resault[12] = {0};
 80014f2:	2400      	movs	r4, #0
		// 解析日期字符串
		char dd_part[3] = {0};
 80014f4:	4b29      	ldr	r3, [pc, #164]	@ (800159c <Format_GPS_Date+0xb0>)
void Format_GPS_Date(char* DateResault,char* time,char* date){
 80014f6:	b08a      	sub	sp, #40	@ 0x28
		char dd_part[3] = {0};
 80014f8:	f8b3 a000 	ldrh.w	sl, [r3]
void Format_GPS_Date(char* DateResault,char* time,char* date){
 80014fc:	4606      	mov	r6, r0
 80014fe:	4689      	mov	r9, r1
		char mm_part[3] = {0};
		char yy_part[3] = {0};

		strncpy(dd_part, date, 2);
 8001500:	2202      	movs	r2, #2
 8001502:	4629      	mov	r1, r5
 8001504:	a803      	add	r0, sp, #12
		char Resault[12] = {0};
 8001506:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800150a:	9409      	str	r4, [sp, #36]	@ 0x24
		char dd_part[3] = {0};
 800150c:	f8ad a00c 	strh.w	sl, [sp, #12]
 8001510:	f88d 400e 	strb.w	r4, [sp, #14]
		char mm_part[3] = {0};
 8001514:	f8ad a010 	strh.w	sl, [sp, #16]
 8001518:	f88d 4012 	strb.w	r4, [sp, #18]
		char yy_part[3] = {0};
 800151c:	f8ad a014 	strh.w	sl, [sp, #20]
 8001520:	f88d 4016 	strb.w	r4, [sp, #22]
		strncpy(dd_part, date, 2);
 8001524:	f00b f8d0 	bl	800c6c8 <strncpy>
		strncpy(mm_part, date + 2, 2);
 8001528:	2202      	movs	r2, #2
 800152a:	a804      	add	r0, sp, #16
 800152c:	18a9      	adds	r1, r5, r2
 800152e:	f00b f8cb 	bl	800c6c8 <strncpy>
		strncpy(yy_part, date + 4, 2);
 8001532:	1d29      	adds	r1, r5, #4
 8001534:	2202      	movs	r2, #2
 8001536:	a805      	add	r0, sp, #20
 8001538:	f00b f8c6 	bl	800c6c8 <strncpy>

		int dd = atoi(dd_part);
 800153c:	a803      	add	r0, sp, #12
 800153e:	f009 f85f 	bl	800a600 <atoi>
 8001542:	4680      	mov	r8, r0
		int mm = atoi(mm_part);
 8001544:	a804      	add	r0, sp, #16
 8001546:	f009 f85b 	bl	800a600 <atoi>
 800154a:	4607      	mov	r7, r0
		int yy = atoi(yy_part);
 800154c:	a805      	add	r0, sp, #20
 800154e:	f009 f857 	bl	800a600 <atoi>

		// 解析时间字符串
		char hh_part[3] = {0};
		strncpy(hh_part, time, 2);
 8001552:	4649      	mov	r1, r9
		int yy = atoi(yy_part);
 8001554:	4605      	mov	r5, r0
		strncpy(hh_part, time, 2);
 8001556:	2202      	movs	r2, #2
 8001558:	a806      	add	r0, sp, #24
		char hh_part[3] = {0};
 800155a:	f8ad a018 	strh.w	sl, [sp, #24]
 800155e:	f88d 401a 	strb.w	r4, [sp, #26]
		strncpy(hh_part, time, 2);
 8001562:	f00b f8b1 	bl	800c6c8 <strncpy>
		int hh = atoi(hh_part);
 8001566:	a806      	add	r0, sp, #24
 8001568:	f009 f84a 	bl	800a600 <atoi>

		// 格式化输出
		snprintf(Resault,12,"%4d/%02d/%02d", 2000 + yy, mm, dd+((hh+8)/24));
 800156c:	2318      	movs	r3, #24
 800156e:	f100 0208 	add.w	r2, r0, #8
 8001572:	fb92 f2f3 	sdiv	r2, r2, r3
 8001576:	4442      	add	r2, r8
 8001578:	e9cd 7200 	strd	r7, r2, [sp]
 800157c:	f505 63fa 	add.w	r3, r5, #2000	@ 0x7d0
 8001580:	210c      	movs	r1, #12
 8001582:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <Format_GPS_Date+0xb4>)
 8001584:	a807      	add	r0, sp, #28
 8001586:	f00a ff2d 	bl	800c3e4 <sniprintf>
		strncpy(DateResault, Resault, 15);
 800158a:	220f      	movs	r2, #15
 800158c:	4630      	mov	r0, r6
 800158e:	a907      	add	r1, sp, #28
 8001590:	f00b f89a 	bl	800c6c8 <strncpy>
}
 8001594:	b00a      	add	sp, #40	@ 0x28
 8001596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800159a:	bf00      	nop
 800159c:	0800ef40 	.word	0x0800ef40
 80015a0:	0800ef85 	.word	0x0800ef85

080015a4 <Format_GPS_Time>:

//格式化日期时间字符串
void Format_GPS_Time(char* TimeResault,char* time){
		char Resault[10] = {0};
 80015a4:	2300      	movs	r3, #0
void Format_GPS_Time(char* TimeResault,char* time){
 80015a6:	b570      	push	{r4, r5, r6, lr}
		// 解析时间字符串
		char hh_part[3] = {0};
 80015a8:	4a20      	ldr	r2, [pc, #128]	@ (800162c <Format_GPS_Time+0x88>)
void Format_GPS_Time(char* TimeResault,char* time){
 80015aa:	b088      	sub	sp, #32
		char hh_part[3] = {0};
 80015ac:	8812      	ldrh	r2, [r2, #0]
void Format_GPS_Time(char* TimeResault,char* time){
 80015ae:	4605      	mov	r5, r0
		char hh_part[3] = {0};
 80015b0:	f8ad 2008 	strh.w	r2, [sp, #8]
		char mi_part[3] = {0};
 80015b4:	f8ad 200c 	strh.w	r2, [sp, #12]
		char ss_part[3] = {0};
 80015b8:	f8ad 2010 	strh.w	r2, [sp, #16]

		strncpy(hh_part, time, 2);
 80015bc:	a802      	add	r0, sp, #8
 80015be:	2202      	movs	r2, #2
		char Resault[10] = {0};
 80015c0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80015c4:	f8ad 301c 	strh.w	r3, [sp, #28]
		char hh_part[3] = {0};
 80015c8:	f88d 300a 	strb.w	r3, [sp, #10]
		char mi_part[3] = {0};
 80015cc:	f88d 300e 	strb.w	r3, [sp, #14]
		char ss_part[3] = {0};
 80015d0:	f88d 3012 	strb.w	r3, [sp, #18]
void Format_GPS_Time(char* TimeResault,char* time){
 80015d4:	460c      	mov	r4, r1
		strncpy(hh_part, time, 2);
 80015d6:	f00b f877 	bl	800c6c8 <strncpy>
		strncpy(mi_part, time + 2, 2);
 80015da:	2202      	movs	r2, #2
 80015dc:	a803      	add	r0, sp, #12
 80015de:	18a1      	adds	r1, r4, r2
 80015e0:	f00b f872 	bl	800c6c8 <strncpy>
		strncpy(ss_part, time + 4, 2);
 80015e4:	1d21      	adds	r1, r4, #4
 80015e6:	2202      	movs	r2, #2
 80015e8:	a804      	add	r0, sp, #16
 80015ea:	f00b f86d 	bl	800c6c8 <strncpy>

		int hh = atoi(hh_part);
 80015ee:	a802      	add	r0, sp, #8
 80015f0:	f009 f806 	bl	800a600 <atoi>
 80015f4:	4604      	mov	r4, r0
		int mi = atoi(mi_part);
 80015f6:	a803      	add	r0, sp, #12
 80015f8:	f009 f802 	bl	800a600 <atoi>
 80015fc:	4606      	mov	r6, r0
		int ss = atoi(ss_part);
 80015fe:	a804      	add	r0, sp, #16
 8001600:	f008 fffe 	bl	800a600 <atoi>

		// 格式化输出
		sprintf(Resault,"%02d:%02d:%02d", (hh+8)%24, mi, ss);
 8001604:	2218      	movs	r2, #24
 8001606:	f104 0108 	add.w	r1, r4, #8
 800160a:	fb91 f4f2 	sdiv	r4, r1, r2
 800160e:	4633      	mov	r3, r6
 8001610:	fb02 1214 	mls	r2, r2, r4, r1
 8001614:	9000      	str	r0, [sp, #0]
 8001616:	4906      	ldr	r1, [pc, #24]	@ (8001630 <Format_GPS_Time+0x8c>)
 8001618:	a805      	add	r0, sp, #20
 800161a:	f00a ff17 	bl	800c44c <siprintf>
		strncpy(TimeResault, Resault, 12);
 800161e:	220c      	movs	r2, #12
 8001620:	4628      	mov	r0, r5
 8001622:	a905      	add	r1, sp, #20
 8001624:	f00b f850 	bl	800c6c8 <strncpy>
}
 8001628:	b008      	add	sp, #32
 800162a:	bd70      	pop	{r4, r5, r6, pc}
 800162c:	0800ef40 	.word	0x0800ef40
 8001630:	0800ef93 	.word	0x0800ef93

08001634 <Format_FileName_Date>:

//格式化日期字符串(2025-02-22)
void Format_FileName_Date(char* NameResault,char* time,char* date){
 8001634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001638:	4614      	mov	r4, r2
//		char Resault[21] = {0};
		// 解析日期字符串
		char dd_part[3] = {0};
 800163a:	2500      	movs	r5, #0
 800163c:	4b25      	ldr	r3, [pc, #148]	@ (80016d4 <Format_FileName_Date+0xa0>)
void Format_FileName_Date(char* NameResault,char* time,char* date){
 800163e:	b086      	sub	sp, #24
		char dd_part[3] = {0};
 8001640:	f8b3 a000 	ldrh.w	sl, [r3]
void Format_FileName_Date(char* NameResault,char* time,char* date){
 8001644:	4606      	mov	r6, r0
 8001646:	4689      	mov	r9, r1
		char mm_part[3] = {0};
		char yy_part[3] = {0};

		strncpy(dd_part, date, 2);
 8001648:	2202      	movs	r2, #2
 800164a:	4621      	mov	r1, r4
 800164c:	a802      	add	r0, sp, #8
		char dd_part[3] = {0};
 800164e:	f8ad a008 	strh.w	sl, [sp, #8]
 8001652:	f88d 500a 	strb.w	r5, [sp, #10]
		char mm_part[3] = {0};
 8001656:	f8ad a00c 	strh.w	sl, [sp, #12]
 800165a:	f88d 500e 	strb.w	r5, [sp, #14]
		char yy_part[3] = {0};
 800165e:	f8ad a010 	strh.w	sl, [sp, #16]
 8001662:	f88d 5012 	strb.w	r5, [sp, #18]
		strncpy(dd_part, date, 2);
 8001666:	f00b f82f 	bl	800c6c8 <strncpy>
		strncpy(mm_part, date + 2, 2);
 800166a:	2202      	movs	r2, #2
 800166c:	a803      	add	r0, sp, #12
 800166e:	18a1      	adds	r1, r4, r2
 8001670:	f00b f82a 	bl	800c6c8 <strncpy>
		strncpy(yy_part, date + 4, 2);
 8001674:	1d21      	adds	r1, r4, #4
 8001676:	2202      	movs	r2, #2
 8001678:	a804      	add	r0, sp, #16
 800167a:	f00b f825 	bl	800c6c8 <strncpy>

		int dd = atoi(dd_part);
 800167e:	a802      	add	r0, sp, #8
 8001680:	f008 ffbe 	bl	800a600 <atoi>
 8001684:	4680      	mov	r8, r0
		int mm = atoi(mm_part);
 8001686:	a803      	add	r0, sp, #12
 8001688:	f008 ffba 	bl	800a600 <atoi>
 800168c:	4607      	mov	r7, r0
		int yy = atoi(yy_part);
 800168e:	a804      	add	r0, sp, #16
 8001690:	f008 ffb6 	bl	800a600 <atoi>

		// 解析时间字符串
		char hh_part[3] = {0};
		strncpy(hh_part, time, 2);
 8001694:	4649      	mov	r1, r9
		int yy = atoi(yy_part);
 8001696:	4604      	mov	r4, r0
		strncpy(hh_part, time, 2);
 8001698:	2202      	movs	r2, #2
 800169a:	a805      	add	r0, sp, #20
		char hh_part[3] = {0};
 800169c:	f8ad a014 	strh.w	sl, [sp, #20]
 80016a0:	f88d 5016 	strb.w	r5, [sp, #22]
		strncpy(hh_part, time, 2);
 80016a4:	f00b f810 	bl	800c6c8 <strncpy>
		int hh = atoi(hh_part);
 80016a8:	a805      	add	r0, sp, #20
 80016aa:	f008 ffa9 	bl	800a600 <atoi>
		// 格式化输出
		snprintf(NameResault,12,"%4d%02d%02d", 2000 + yy, mm, dd+((hh+8)/24));
 80016ae:	2318      	movs	r3, #24
 80016b0:	f100 0208 	add.w	r2, r0, #8
 80016b4:	fb92 f2f3 	sdiv	r2, r2, r3
 80016b8:	4442      	add	r2, r8
 80016ba:	e9cd 7200 	strd	r7, r2, [sp]
 80016be:	210c      	movs	r1, #12
 80016c0:	4630      	mov	r0, r6
 80016c2:	4a05      	ldr	r2, [pc, #20]	@ (80016d8 <Format_FileName_Date+0xa4>)
 80016c4:	f504 63fa 	add.w	r3, r4, #2000	@ 0x7d0
 80016c8:	f00a fe8c 	bl	800c3e4 <sniprintf>
//		strncpy(NameResault, Resault, 8);
}
 80016cc:	b006      	add	sp, #24
 80016ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016d2:	bf00      	nop
 80016d4:	0800ef40 	.word	0x0800ef40
 80016d8:	0800efa2 	.word	0x0800efa2

080016dc <FormatLongitude>:

//格式化经度字符串
void FormatLongitude(char* LongitudeStr, char* Longitude, char Lon_dir) {
 80016dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    // 解析输入字符串格式：DDDMM.MMMMM
    char dd_part[4] = {0};      // 度（3位）
 80016de:	2300      	movs	r3, #0
void FormatLongitude(char* LongitudeStr, char* Longitude, char Lon_dir) {
 80016e0:	460e      	mov	r6, r1
 80016e2:	4615      	mov	r5, r2
    char mm_part[3] = {0};      // 分（2位）
 80016e4:	4a10      	ldr	r2, [pc, #64]	@ (8001728 <FormatLongitude+0x4c>)
void FormatLongitude(char* LongitudeStr, char* Longitude, char Lon_dir) {
 80016e6:	4604      	mov	r4, r0
    char mm_part[3] = {0};      // 分（2位）
 80016e8:	8812      	ldrh	r2, [r2, #0]
    char decimal_part[6] = {0}; // 小数分（最多5位）

    // 分割字符串
    strncpy(dd_part, Longitude, 3);
 80016ea:	a803      	add	r0, sp, #12
    char mm_part[3] = {0};      // 分（2位）
 80016ec:	f8ad 2008 	strh.w	r2, [sp, #8]
    strncpy(dd_part, Longitude, 3);
 80016f0:	2203      	movs	r2, #3
    char dd_part[4] = {0};      // 度（3位）
 80016f2:	9303      	str	r3, [sp, #12]
    char mm_part[3] = {0};      // 分（2位）
 80016f4:	f88d 300a 	strb.w	r3, [sp, #10]
    strncpy(dd_part, Longitude, 3);
 80016f8:	f00a ffe6 	bl	800c6c8 <strncpy>
    strncpy(mm_part, Longitude + 3, 2);
 80016fc:	1cf1      	adds	r1, r6, #3
 80016fe:	2202      	movs	r2, #2
 8001700:	a802      	add	r0, sp, #8
 8001702:	f00a ffe1 	bl	800c6c8 <strncpy>
    if (dot_ptr) {
        strncpy(decimal_part, dot_ptr + 1, 5); // 取小数点后最多5位
    }

    // 转换为数值
    int dd = atoi(dd_part);
 8001706:	a803      	add	r0, sp, #12
 8001708:	f008 ff7a 	bl	800a600 <atoi>
 800170c:	4606      	mov	r6, r0
    int mm = atoi(mm_part);
 800170e:	a802      	add	r0, sp, #8
 8001710:	f008 ff76 	bl	800a600 <atoi>
//    int ss = (int)total_seconds;
//    int decimals = (int)((total_seconds - ss) * 1000.0 + 0.5); // 四舍五入到三位小数

    // 格式化输出到缓冲区（最大长度示例：E123°45'67.890）
//    snprintf(LongitudeStr, 20, "%c%03d°%02d’%02d.%03d\"", Lon_dir, dd, mm, ss, decimals);
    snprintf(LongitudeStr, 20, "%c%d°%02d’", Lon_dir, dd, mm);
 8001714:	462b      	mov	r3, r5
 8001716:	e9cd 6000 	strd	r6, r0, [sp]
 800171a:	2114      	movs	r1, #20
 800171c:	4620      	mov	r0, r4
 800171e:	4a03      	ldr	r2, [pc, #12]	@ (800172c <FormatLongitude+0x50>)
 8001720:	f00a fe60 	bl	800c3e4 <sniprintf>
}
 8001724:	b004      	add	sp, #16
 8001726:	bd70      	pop	{r4, r5, r6, pc}
 8001728:	0800ef40 	.word	0x0800ef40
 800172c:	0800efae 	.word	0x0800efae

08001730 <FormatLatitude>:

//格式化纬度字符串
void FormatLatitude(char* LatitudeStr, char* Latitude, char Lat_dir) {
 8001730:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    // 解析输入字符串格式：DDMM.MMMMM
    char dd_part[3] = {0};      // 度（2位）
 8001732:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <FormatLatitude+0x54>)
void FormatLatitude(char* LatitudeStr, char* Latitude, char Lat_dir) {
 8001734:	4615      	mov	r5, r2
    char dd_part[3] = {0};      // 度（2位）
 8001736:	881a      	ldrh	r2, [r3, #0]
 8001738:	2300      	movs	r3, #0
void FormatLatitude(char* LatitudeStr, char* Latitude, char Lat_dir) {
 800173a:	4604      	mov	r4, r0
    char dd_part[3] = {0};      // 度（2位）
 800173c:	f8ad 2008 	strh.w	r2, [sp, #8]
    char mm_part[3] = {0};      // 分（2位）
 8001740:	f8ad 200c 	strh.w	r2, [sp, #12]
    char decimal_part[6] = {0}; // 小数分（最多5位）

    // 分割字符串
    strncpy(dd_part, Latitude, 2);
 8001744:	a802      	add	r0, sp, #8
 8001746:	2202      	movs	r2, #2
    char dd_part[3] = {0};      // 度（2位）
 8001748:	f88d 300a 	strb.w	r3, [sp, #10]
    char mm_part[3] = {0};      // 分（2位）
 800174c:	f88d 300e 	strb.w	r3, [sp, #14]
void FormatLatitude(char* LatitudeStr, char* Latitude, char Lat_dir) {
 8001750:	460e      	mov	r6, r1
    strncpy(dd_part, Latitude, 2);
 8001752:	f00a ffb9 	bl	800c6c8 <strncpy>
    strncpy(mm_part, Latitude + 2, 2);
 8001756:	2202      	movs	r2, #2
 8001758:	a803      	add	r0, sp, #12
 800175a:	18b1      	adds	r1, r6, r2
 800175c:	f00a ffb4 	bl	800c6c8 <strncpy>
    if (dot_ptr) {
        strncpy(decimal_part, dot_ptr + 1, 5); // 取小数点后最多5位
    }

    // 转换为数值
    int dd = atoi(dd_part);
 8001760:	a802      	add	r0, sp, #8
 8001762:	f008 ff4d 	bl	800a600 <atoi>
 8001766:	4606      	mov	r6, r0
    int mm = atoi(mm_part);
 8001768:	a803      	add	r0, sp, #12
 800176a:	f008 ff49 	bl	800a600 <atoi>
//    int ss = (int)total_seconds;
//    int decimals = (int)((total_seconds - ss) * 1000.0 + 0.5); // 四舍五入到三位小数

    // 格式化输出到缓冲区（最大长度示例：N23°45'67.890）
//    snprintf(LatitudeStr, 20, "%c%02d°%02d’%02d.%03d\"", Lat_dir, dd, mm, ss, decimals);
    snprintf(LatitudeStr, 20, "%c%d°%02d’", Lat_dir, dd, mm);
 800176e:	462b      	mov	r3, r5
 8001770:	e9cd 6000 	strd	r6, r0, [sp]
 8001774:	2114      	movs	r1, #20
 8001776:	4620      	mov	r0, r4
 8001778:	4a03      	ldr	r2, [pc, #12]	@ (8001788 <FormatLatitude+0x58>)
 800177a:	f00a fe33 	bl	800c3e4 <sniprintf>
}
 800177e:	b004      	add	sp, #16
 8001780:	bd70      	pop	{r4, r5, r6, pc}
 8001782:	bf00      	nop
 8001784:	0800ef40 	.word	0x0800ef40
 8001788:	0800efae 	.word	0x0800efae

0800178c <FormatAltitude>:

//海拔数据格式化（-9999.9~99999.9）
void FormatAltitude(char* AltitudeStr, float Altitude){
 800178c:	b513      	push	{r0, r1, r4, lr}
 800178e:	4604      	mov	r4, r0
	snprintf(AltitudeStr, 10, "%.1f", Altitude);
 8001790:	4608      	mov	r0, r1
 8001792:	f7fe fe53 	bl	800043c <__aeabi_f2d>
 8001796:	4a04      	ldr	r2, [pc, #16]	@ (80017a8 <FormatAltitude+0x1c>)
 8001798:	e9cd 0100 	strd	r0, r1, [sp]
 800179c:	210a      	movs	r1, #10
 800179e:	4620      	mov	r0, r4
 80017a0:	f00a fe20 	bl	800c3e4 <sniprintf>
}
 80017a4:	b002      	add	sp, #8
 80017a6:	bd10      	pop	{r4, pc}
 80017a8:	0800efbc 	.word	0x0800efbc

080017ac <HMI_init>:
uint8_t focus_key_pressed = 0;

enum HMI_PAGE page_location;
enum CONFIRM_RESAULT sec_confirm_resault;

void HMI_init(void){
 80017ac:	b538      	push	{r3, r4, r5, lr}
  refresh_bat_vlt();

	sprintf(Tx_Buffer,"Main.n0.val=0\xff\xff\xff");
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
	memset(Tx_Buffer,'\0',sizeof(Tx_Buffer));
 80017ae:	2532      	movs	r5, #50	@ 0x32
	sprintf(Tx_Buffer,"Main.n0.val=0\xff\xff\xff");
 80017b0:	4c1d      	ldr	r4, [pc, #116]	@ (8001828 <HMI_init+0x7c>)
  refresh_bat_vlt();
 80017b2:	f001 faa5 	bl	8002d00 <refresh_bat_vlt>
	sprintf(Tx_Buffer,"Main.n0.val=0\xff\xff\xff");
 80017b6:	491d      	ldr	r1, [pc, #116]	@ (800182c <HMI_init+0x80>)
 80017b8:	4620      	mov	r0, r4
 80017ba:	f00b f84a 	bl	800c852 <strcpy>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80017be:	4620      	mov	r0, r4
 80017c0:	f006 fd10 	bl	80081e4 <USART1_Tx_HMIdata>
	memset(Tx_Buffer,'\0',sizeof(Tx_Buffer));
 80017c4:	462a      	mov	r2, r5
 80017c6:	2100      	movs	r1, #0
 80017c8:	4620      	mov	r0, r4
 80017ca:	f00a ff47 	bl	800c65c <memset>

	sprintf(Tx_Buffer,"Main.t3.txt=\"0.0\"\xff\xff\xff");
 80017ce:	4918      	ldr	r1, [pc, #96]	@ (8001830 <HMI_init+0x84>)
 80017d0:	4620      	mov	r0, r4
 80017d2:	f00b f83e 	bl	800c852 <strcpy>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80017d6:	4620      	mov	r0, r4
 80017d8:	f006 fd04 	bl	80081e4 <USART1_Tx_HMIdata>
	memset(Tx_Buffer,'\0',sizeof(Tx_Buffer));
 80017dc:	462a      	mov	r2, r5
 80017de:	2100      	movs	r1, #0
 80017e0:	4620      	mov	r0, r4
 80017e2:	f00a ff3b 	bl	800c65c <memset>

	sprintf(Tx_Buffer,"Main.t0.txt=\"启动中...\"\xff\xff\xff");
 80017e6:	4913      	ldr	r1, [pc, #76]	@ (8001834 <HMI_init+0x88>)
 80017e8:	4620      	mov	r0, r4
 80017ea:	f00b f832 	bl	800c852 <strcpy>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80017ee:	4620      	mov	r0, r4
 80017f0:	f006 fcf8 	bl	80081e4 <USART1_Tx_HMIdata>
	memset(Tx_Buffer,'\0',sizeof(Tx_Buffer));
 80017f4:	462a      	mov	r2, r5
 80017f6:	2100      	movs	r1, #0
 80017f8:	4620      	mov	r0, r4
 80017fa:	f00a ff2f 	bl	800c65c <memset>

	sprintf(Tx_Buffer,"Main.t8.txt=\"\"\xff\xff\xff");
 80017fe:	490e      	ldr	r1, [pc, #56]	@ (8001838 <HMI_init+0x8c>)
 8001800:	4620      	mov	r0, r4
 8001802:	f00b f826 	bl	800c852 <strcpy>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001806:	4620      	mov	r0, r4
 8001808:	f006 fcec 	bl	80081e4 <USART1_Tx_HMIdata>
	memset(Tx_Buffer,'\0',sizeof(Tx_Buffer));
 800180c:	462a      	mov	r2, r5
 800180e:	2100      	movs	r1, #0
 8001810:	4620      	mov	r0, r4
 8001812:	f00a ff23 	bl	800c65c <memset>

	sprintf(Tx_Buffer,"page Main\xff\xff\xff");
 8001816:	4620      	mov	r0, r4
 8001818:	4908      	ldr	r1, [pc, #32]	@ (800183c <HMI_init+0x90>)
 800181a:	f00b f81a 	bl	800c852 <strcpy>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800181e:	4620      	mov	r0, r4
}
 8001820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001824:	f006 bcde 	b.w	80081e4 <USART1_Tx_HMIdata>
 8001828:	20000b8e 	.word	0x20000b8e
 800182c:	0800efc1 	.word	0x0800efc1
 8001830:	0800efd2 	.word	0x0800efd2
 8001834:	0800efe7 	.word	0x0800efe7
 8001838:	0800f005 	.word	0x0800f005
 800183c:	0800f017 	.word	0x0800f017

08001840 <Send_To_HMI>:

void Send_To_HMI(uint8_t index,uint8_t* name) {
 8001840:	b510      	push	{r4, lr}
    /* 构造HMI指令并发送 */
    sprintf(Tx_Buffer, "File_M.t%d.txt=\"%s\"\xff\xff\xff", index, name);
 8001842:	4c06      	ldr	r4, [pc, #24]	@ (800185c <Send_To_HMI+0x1c>)
void Send_To_HMI(uint8_t index,uint8_t* name) {
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
    sprintf(Tx_Buffer, "File_M.t%d.txt=\"%s\"\xff\xff\xff", index, name);
 8001848:	4620      	mov	r0, r4
 800184a:	4905      	ldr	r1, [pc, #20]	@ (8001860 <Send_To_HMI+0x20>)
 800184c:	f00a fdfe 	bl	800c44c <siprintf>
    USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001850:	4620      	mov	r0, r4
}
 8001852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001856:	f006 bcc5 	b.w	80081e4 <USART1_Tx_HMIdata>
 800185a:	bf00      	nop
 800185c:	20000b8e 	.word	0x20000b8e
 8001860:	0800f024 	.word	0x0800f024

08001864 <Clear_HMI_Item>:

void Clear_HMI_Item(uint8_t index) {
 8001864:	b510      	push	{r4, lr}
    /* 清空指定位置的显示 */
    sprintf(Tx_Buffer, "File_M.t%d.txt=\"\"\xff\xff\xff", index);
 8001866:	4c05      	ldr	r4, [pc, #20]	@ (800187c <Clear_HMI_Item+0x18>)
void Clear_HMI_Item(uint8_t index) {
 8001868:	4602      	mov	r2, r0
    sprintf(Tx_Buffer, "File_M.t%d.txt=\"\"\xff\xff\xff", index);
 800186a:	4905      	ldr	r1, [pc, #20]	@ (8001880 <Clear_HMI_Item+0x1c>)
 800186c:	4620      	mov	r0, r4
 800186e:	f00a fded 	bl	800c44c <siprintf>
    USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001872:	4620      	mov	r0, r4
}
 8001874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001878:	f006 bcb4 	b.w	80081e4 <USART1_Tx_HMIdata>
 800187c:	20000b8e 	.word	0x20000b8e
 8001880:	0800f03b 	.word	0x0800f03b

08001884 <Back_to_MainPage>:

void Back_to_MainPage(void){
	page_location = Main_page;
 8001884:	2200      	movs	r2, #0
void Back_to_MainPage(void){
 8001886:	b510      	push	{r4, lr}
	sprintf(Tx_Buffer,"page Main\xff\xff\xff");
 8001888:	4c13      	ldr	r4, [pc, #76]	@ (80018d8 <Back_to_MainPage+0x54>)
	page_location = Main_page;
 800188a:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <Back_to_MainPage+0x58>)
	sprintf(Tx_Buffer,"page Main\xff\xff\xff");
 800188c:	4914      	ldr	r1, [pc, #80]	@ (80018e0 <Back_to_MainPage+0x5c>)
 800188e:	4620      	mov	r0, r4
	page_location = Main_page;
 8001890:	701a      	strb	r2, [r3, #0]
	sprintf(Tx_Buffer,"page Main\xff\xff\xff");
 8001892:	f00a ffde 	bl	800c852 <strcpy>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001896:	4620      	mov	r0, r4
 8001898:	f006 fca4 	bl	80081e4 <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"Main.n2.val=%d\xff\xff\xff",total_Times);
 800189c:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <Back_to_MainPage+0x60>)
 800189e:	4912      	ldr	r1, [pc, #72]	@ (80018e8 <Back_to_MainPage+0x64>)
 80018a0:	881a      	ldrh	r2, [r3, #0]
 80018a2:	4620      	mov	r0, r4
 80018a4:	f00a fdd2 	bl	800c44c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80018a8:	4620      	mov	r0, r4
 80018aa:	f006 fc9b 	bl	80081e4 <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"Main.n3.val=%d\xff\xff\xff",total_inject_Dosage);
 80018ae:	4b0f      	ldr	r3, [pc, #60]	@ (80018ec <Back_to_MainPage+0x68>)
 80018b0:	490f      	ldr	r1, [pc, #60]	@ (80018f0 <Back_to_MainPage+0x6c>)
 80018b2:	881a      	ldrh	r2, [r3, #0]
 80018b4:	4620      	mov	r0, r4
 80018b6:	f00a fdc9 	bl	800c44c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80018ba:	4620      	mov	r0, r4
 80018bc:	f006 fc92 	bl	80081e4 <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"Main.n1.val=%d\xff\xff\xff",current_TreeNo);
 80018c0:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <Back_to_MainPage+0x70>)
 80018c2:	4620      	mov	r0, r4
 80018c4:	881a      	ldrh	r2, [r3, #0]
 80018c6:	490c      	ldr	r1, [pc, #48]	@ (80018f8 <Back_to_MainPage+0x74>)
 80018c8:	f00a fdc0 	bl	800c44c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80018cc:	4620      	mov	r0, r4
}
 80018ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80018d2:	f006 bc87 	b.w	80081e4 <USART1_Tx_HMIdata>
 80018d6:	bf00      	nop
 80018d8:	20000b8e 	.word	0x20000b8e
 80018dc:	20000370 	.word	0x20000370
 80018e0:	0800f017 	.word	0x0800f017
 80018e4:	20000a4e 	.word	0x20000a4e
 80018e8:	0800ef43 	.word	0x0800ef43
 80018ec:	20000a50 	.word	0x20000a50
 80018f0:	0800ef55 	.word	0x0800ef55
 80018f4:	200008c2 	.word	0x200008c2
 80018f8:	0800ef67 	.word	0x0800ef67

080018fc <Refresh_Display>:

void Refresh_Display() {
 80018fc:	b570      	push	{r4, r5, r6, lr}
    // 计算显示标志
    paging.show_prev_more = (paging.start_index > 0);
 80018fe:	4c1e      	ldr	r4, [pc, #120]	@ (8001978 <Refresh_Display+0x7c>)
    paging.show_next_more = (paging.start_index + MAX_DISPLAY_ITEMS < paging.file_count);
 8001900:	2500      	movs	r5, #0
    paging.show_prev_more = (paging.start_index > 0);
 8001902:	8863      	ldrh	r3, [r4, #2]
 8001904:	1e1a      	subs	r2, r3, #0
 8001906:	bf18      	it	ne
 8001908:	2201      	movne	r2, #1
 800190a:	7322      	strb	r2, [r4, #12]
    paging.show_next_more = (paging.start_index + MAX_DISPLAY_ITEMS < paging.file_count);
 800190c:	8822      	ldrh	r2, [r4, #0]
 800190e:	3306      	adds	r3, #6
 8001910:	4293      	cmp	r3, r2
 8001912:	bfac      	ite	ge
 8001914:	2300      	movge	r3, #0
 8001916:	2301      	movlt	r3, #1
 8001918:	7363      	strb	r3, [r4, #13]

    // 清空显示
    for(uint8_t i=0; i<MAX_DISPLAY_ITEMS; i++)
        Clear_HMI_Item(i);
 800191a:	b2e8      	uxtb	r0, r5
    for(uint8_t i=0; i<MAX_DISPLAY_ITEMS; i++)
 800191c:	3501      	adds	r5, #1
        Clear_HMI_Item(i);
 800191e:	f7ff ffa1 	bl	8001864 <Clear_HMI_Item>
    for(uint8_t i=0; i<MAX_DISPLAY_ITEMS; i++)
 8001922:	2d06      	cmp	r5, #6
 8001924:	d1f9      	bne.n	800191a <Refresh_Display+0x1e>

    uint8_t display_pos = 0;

    // 显示前页提示
    if(paging.show_prev_more) {
 8001926:	7b20      	ldrb	r0, [r4, #12]
 8001928:	b120      	cbz	r0, 8001934 <Refresh_Display+0x38>
        Send_To_HMI(display_pos++, "...");
 800192a:	2000      	movs	r0, #0
 800192c:	4913      	ldr	r1, [pc, #76]	@ (800197c <Refresh_Display+0x80>)
 800192e:	f7ff ff87 	bl	8001840 <Send_To_HMI>
 8001932:	2001      	movs	r0, #1

    // 显示当前页文件
    for(uint8_t i=0; i < MAX_DISPLAY_ITEMS - paging.show_prev_more - paging.show_next_more; i++) {
        uint16_t actual_index = paging.start_index + i;
        if(actual_index < paging.file_count) {
            Send_To_HMI(display_pos++, paging.file_list[actual_index]);
 8001934:	2500      	movs	r5, #0
    for(uint8_t i=0; i < MAX_DISPLAY_ITEMS - paging.show_prev_more - paging.show_next_more; i++) {
 8001936:	7b22      	ldrb	r2, [r4, #12]
 8001938:	7b61      	ldrb	r1, [r4, #13]
 800193a:	f1c2 0206 	rsb	r2, r2, #6
 800193e:	b2eb      	uxtb	r3, r5
 8001940:	1a52      	subs	r2, r2, r1
 8001942:	4293      	cmp	r3, r2
 8001944:	db06      	blt.n	8001954 <Refresh_Display+0x58>
        }
    }

    // 显示后页提示
    if(paging.show_next_more) {
 8001946:	b1a9      	cbz	r1, 8001974 <Refresh_Display+0x78>
        Send_To_HMI(MAX_DISPLAY_ITEMS-1, "...");
    }
}
 8001948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        Send_To_HMI(MAX_DISPLAY_ITEMS-1, "...");
 800194c:	2005      	movs	r0, #5
 800194e:	490b      	ldr	r1, [pc, #44]	@ (800197c <Refresh_Display+0x80>)
 8001950:	f7ff bf76 	b.w	8001840 <Send_To_HMI>
        uint16_t actual_index = paging.start_index + i;
 8001954:	8862      	ldrh	r2, [r4, #2]
 8001956:	4413      	add	r3, r2
        if(actual_index < paging.file_count) {
 8001958:	8822      	ldrh	r2, [r4, #0]
        uint16_t actual_index = paging.start_index + i;
 800195a:	b29b      	uxth	r3, r3
        if(actual_index < paging.file_count) {
 800195c:	429a      	cmp	r2, r3
 800195e:	d907      	bls.n	8001970 <Refresh_Display+0x74>
            Send_To_HMI(display_pos++, paging.file_list[actual_index]);
 8001960:	68a2      	ldr	r2, [r4, #8]
 8001962:	1c46      	adds	r6, r0, #1
 8001964:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001968:	b2f6      	uxtb	r6, r6
 800196a:	f7ff ff69 	bl	8001840 <Send_To_HMI>
 800196e:	4630      	mov	r0, r6
    for(uint8_t i=0; i < MAX_DISPLAY_ITEMS - paging.show_prev_more - paging.show_next_more; i++) {
 8001970:	3501      	adds	r5, #1
 8001972:	e7e0      	b.n	8001936 <Refresh_Display+0x3a>
}
 8001974:	bd70      	pop	{r4, r5, r6, pc}
 8001976:	bf00      	nop
 8001978:	20000374 	.word	0x20000374
 800197c:	0800f050 	.word	0x0800f050

08001980 <Cache_File_List>:

void Cache_File_List() {
 8001980:	b570      	push	{r4, r5, r6, lr}
    DIR dir;
    FILINFO fno;
    uint16_t count = 0;

    // 释放旧内存
    if(paging.file_list != NULL) {
 8001982:	4c2f      	ldr	r4, [pc, #188]	@ (8001a40 <Cache_File_List+0xc0>)
void Cache_File_List() {
 8001984:	b0de      	sub	sp, #376	@ 0x178
    if(paging.file_list != NULL) {
 8001986:	68a3      	ldr	r3, [r4, #8]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d13e      	bne.n	8001a0a <Cache_File_List+0x8a>
            free(paging.file_list[i]);
        free(paging.file_list);
    }
    // 第一次遍历统计数量
//    f_mount(&fs, "0:", 1);
    f_opendir(&dir, "/");
 800198c:	4668      	mov	r0, sp
 800198e:	492d      	ldr	r1, [pc, #180]	@ (8001a44 <Cache_File_List+0xc4>)
 8001990:	f003 fe8c 	bl	80056ac <f_opendir>
    uint16_t count = 0;
 8001994:	2500      	movs	r5, #0
    while(f_readdir(&dir, &fno) == FR_OK && fno.fname[0]) {
 8001996:	4668      	mov	r0, sp
 8001998:	a916      	add	r1, sp, #88	@ 0x58
 800199a:	f003 fef2 	bl	8005782 <f_readdir>
 800199e:	b910      	cbnz	r0, 80019a6 <Cache_File_List+0x26>
 80019a0:	f89d 3072 	ldrb.w	r3, [sp, #114]	@ 0x72
 80019a4:	bb9b      	cbnz	r3, 8001a0e <Cache_File_List+0x8e>
        if(!(fno.fattrib & AM_DIR))
            count++;
    }
    f_closedir(&dir);
 80019a6:	4668      	mov	r0, sp
 80019a8:	f003 fed7 	bl	800575a <f_closedir>

    // 分配内存
    paging.file_list = malloc(count * sizeof(char*));
 80019ac:	00a8      	lsls	r0, r5, #2
 80019ae:	f008 fe2b 	bl	800a608 <malloc>
    paging.file_count = 0;
 80019b2:	2300      	movs	r3, #0
    paging.file_list = malloc(count * sizeof(char*));
 80019b4:	60a0      	str	r0, [r4, #8]

    // 第二次遍历存储文件名
    f_opendir(&dir, "/");
 80019b6:	4923      	ldr	r1, [pc, #140]	@ (8001a44 <Cache_File_List+0xc4>)
 80019b8:	4668      	mov	r0, sp
    paging.file_count = 0;
 80019ba:	8023      	strh	r3, [r4, #0]
    f_opendir(&dir, "/");
 80019bc:	f003 fe76 	bl	80056ac <f_opendir>
    while(f_readdir(&dir, &fno) == FR_OK && fno.fname[0]) {
 80019c0:	4668      	mov	r0, sp
 80019c2:	a916      	add	r1, sp, #88	@ 0x58
 80019c4:	f003 fedd 	bl	8005782 <f_readdir>
 80019c8:	b910      	cbnz	r0, 80019d0 <Cache_File_List+0x50>
 80019ca:	f89d 3072 	ldrb.w	r3, [sp, #114]	@ 0x72
 80019ce:	bb2b      	cbnz	r3, 8001a1c <Cache_File_List+0x9c>
            paging.file_list[paging.file_count] = malloc(FF_MAX_LFN);
            strcpy(paging.file_list[paging.file_count], fno.fname);
            paging.file_count++;
        }
    }
    f_closedir(&dir);
 80019d0:	4668      	mov	r0, sp
 80019d2:	f003 fec2 	bl	800575a <f_closedir>
//    f_mount(NULL, "0:", 0);

    // 计算分页
    paging.total_pages = (paging.file_count + MAX_DISPLAY_ITEMS-1) / MAX_DISPLAY_ITEMS;
 80019d6:	2206      	movs	r2, #6
 80019d8:	8823      	ldrh	r3, [r4, #0]
 80019da:	3305      	adds	r3, #5
 80019dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80019e0:	7163      	strb	r3, [r4, #5]
    paging.start_index = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	8063      	strh	r3, [r4, #2]
    paging.current_page = 1;
 80019e6:	2301      	movs	r3, #1
 80019e8:	7123      	strb	r3, [r4, #4]
}
 80019ea:	b05e      	add	sp, #376	@ 0x178
 80019ec:	bd70      	pop	{r4, r5, r6, pc}
            free(paging.file_list[i]);
 80019ee:	b2ab      	uxth	r3, r5
 80019f0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80019f4:	f008 fe10 	bl	800a618 <free>
        for(uint16_t i=0; i<paging.file_count; i++)
 80019f8:	3501      	adds	r5, #1
 80019fa:	8822      	ldrh	r2, [r4, #0]
 80019fc:	b2ab      	uxth	r3, r5
 80019fe:	429a      	cmp	r2, r3
            free(paging.file_list[i]);
 8001a00:	68a0      	ldr	r0, [r4, #8]
        for(uint16_t i=0; i<paging.file_count; i++)
 8001a02:	d8f4      	bhi.n	80019ee <Cache_File_List+0x6e>
        free(paging.file_list);
 8001a04:	f008 fe08 	bl	800a618 <free>
 8001a08:	e7c0      	b.n	800198c <Cache_File_List+0xc>
 8001a0a:	2500      	movs	r5, #0
 8001a0c:	e7f5      	b.n	80019fa <Cache_File_List+0x7a>
        if(!(fno.fattrib & AM_DIR))
 8001a0e:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8001a12:	06da      	lsls	r2, r3, #27
            count++;
 8001a14:	bf5c      	itt	pl
 8001a16:	3501      	addpl	r5, #1
 8001a18:	b2ad      	uxthpl	r5, r5
 8001a1a:	e7bc      	b.n	8001996 <Cache_File_List+0x16>
        if(!(fno.fattrib & AM_DIR)) {
 8001a1c:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8001a20:	06db      	lsls	r3, r3, #27
 8001a22:	d4cd      	bmi.n	80019c0 <Cache_File_List+0x40>
            paging.file_list[paging.file_count] = malloc(FF_MAX_LFN);
 8001a24:	2012      	movs	r0, #18
 8001a26:	8825      	ldrh	r5, [r4, #0]
 8001a28:	68a6      	ldr	r6, [r4, #8]
 8001a2a:	f008 fded 	bl	800a608 <malloc>
            strcpy(paging.file_list[paging.file_count], fno.fname);
 8001a2e:	f10d 0172 	add.w	r1, sp, #114	@ 0x72
            paging.file_list[paging.file_count] = malloc(FF_MAX_LFN);
 8001a32:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
            paging.file_count++;
 8001a36:	3501      	adds	r5, #1
            strcpy(paging.file_list[paging.file_count], fno.fname);
 8001a38:	f00a ff0b 	bl	800c852 <strcpy>
            paging.file_count++;
 8001a3c:	8025      	strh	r5, [r4, #0]
 8001a3e:	e7bf      	b.n	80019c0 <Cache_File_List+0x40>
 8001a40:	20000374 	.word	0x20000374
 8001a44:	0800f054 	.word	0x0800f054

08001a48 <delete_file>:


FRESULT delete_file(const char* path) {
 8001a48:	b510      	push	{r4, lr}
 8001a4a:	b0c8      	sub	sp, #288	@ 0x120
    FRESULT res;

    // 检查文件是否存在
    FILINFO fno;
    if((res = f_stat(path, &fno)) != FR_OK) {
 8001a4c:	4669      	mov	r1, sp
FRESULT delete_file(const char* path) {
 8001a4e:	4604      	mov	r4, r0
    if((res = f_stat(path, &fno)) != FR_OK) {
 8001a50:	f003 febf 	bl	80057d2 <f_stat>
 8001a54:	b910      	cbnz	r0, 8001a5c <delete_file+0x14>

        return res; // 返回错误码：FR_NO_FILE等
    }

    // 执行删除
    if((res = f_unlink(path)) != FR_OK) {
 8001a56:	4620      	mov	r0, r4
 8001a58:	f003 fedf 	bl	800581a <f_unlink>
        return res; // 返回错误码：FR_DENIED（写保护）等
    }

    return FR_OK;
}
 8001a5c:	b048      	add	sp, #288	@ 0x120
 8001a5e:	bd10      	pop	{r4, pc}

08001a60 <page_turning>:

void page_turning(void){
	// 在翻页操作前范围检查
	if(paging.start_index < 0) paging.start_index = 0;
	if(paging.start_index >= paging.file_count)
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <page_turning+0x4c>)
 8001a62:	885a      	ldrh	r2, [r3, #2]
 8001a64:	8819      	ldrh	r1, [r3, #0]
 8001a66:	428a      	cmp	r2, r1
			paging.start_index = paging.file_count - MAX_DISPLAY_ITEMS;
 8001a68:	bf24      	itt	cs
 8001a6a:	1f8a      	subcs	r2, r1, #6
 8001a6c:	805a      	strhcs	r2, [r3, #2]

	// 处理前页翻页
	if(current_focus_line == 0 && paging.show_prev_more) {
 8001a6e:	4a10      	ldr	r2, [pc, #64]	@ (8001ab0 <page_turning+0x50>)
 8001a70:	7812      	ldrb	r2, [r2, #0]
 8001a72:	b962      	cbnz	r2, 8001a8e <page_turning+0x2e>
 8001a74:	7b1a      	ldrb	r2, [r3, #12]
 8001a76:	b1ba      	cbz	r2, 8001aa8 <page_turning+0x48>
			paging.start_index = (paging.start_index >= (MAX_DISPLAY_ITEMS-1)) ?
 8001a78:	885a      	ldrh	r2, [r3, #2]
 8001a7a:	2a05      	cmp	r2, #5
 8001a7c:	bf38      	it	cc
 8001a7e:	2205      	movcc	r2, #5
 8001a80:	3a05      	subs	r2, #5
 8001a82:	805a      	strh	r2, [r3, #2]
													paging.start_index - (MAX_DISPLAY_ITEMS-1) : 0;
			paging.current_page--;
 8001a84:	791a      	ldrb	r2, [r3, #4]
 8001a86:	3a01      	subs	r2, #1
	// 处理后页翻页
	else
	if(current_focus_line == (MAX_DISPLAY_ITEMS-1) && paging.show_next_more) {
		if(paging.start_index + MAX_DISPLAY_ITEMS < paging.file_count) {
				paging.start_index += (MAX_DISPLAY_ITEMS-1);
				paging.current_page++;
 8001a88:	711a      	strb	r2, [r3, #4]
				Refresh_Display();
 8001a8a:	f7ff bf37 	b.w	80018fc <Refresh_Display>
	if(current_focus_line == (MAX_DISPLAY_ITEMS-1) && paging.show_next_more) {
 8001a8e:	2a05      	cmp	r2, #5
 8001a90:	d10a      	bne.n	8001aa8 <page_turning+0x48>
 8001a92:	7b5a      	ldrb	r2, [r3, #13]
 8001a94:	b142      	cbz	r2, 8001aa8 <page_turning+0x48>
		if(paging.start_index + MAX_DISPLAY_ITEMS < paging.file_count) {
 8001a96:	885a      	ldrh	r2, [r3, #2]
 8001a98:	1d90      	adds	r0, r2, #6
 8001a9a:	4288      	cmp	r0, r1
 8001a9c:	da04      	bge.n	8001aa8 <page_turning+0x48>
				paging.start_index += (MAX_DISPLAY_ITEMS-1);
 8001a9e:	3205      	adds	r2, #5
 8001aa0:	805a      	strh	r2, [r3, #2]
				paging.current_page++;
 8001aa2:	791a      	ldrb	r2, [r3, #4]
 8001aa4:	3201      	adds	r2, #1
 8001aa6:	e7ef      	b.n	8001a88 <page_turning+0x28>
		}
	}
}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000374 	.word	0x20000374
 8001ab0:	20000385 	.word	0x20000385

08001ab4 <On_Delete_Key_Pressed>:

void On_Delete_Key_Pressed(){
 8001ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if((paging.show_prev_more && current_focus_line == 0) || (paging.show_next_more && current_focus_line == 5))
 8001ab6:	4d41      	ldr	r5, [pc, #260]	@ (8001bbc <On_Delete_Key_Pressed+0x108>)
 8001ab8:	4a41      	ldr	r2, [pc, #260]	@ (8001bc0 <On_Delete_Key_Pressed+0x10c>)
 8001aba:	7b2b      	ldrb	r3, [r5, #12]
 8001abc:	7814      	ldrb	r4, [r2, #0]
void On_Delete_Key_Pressed(){
 8001abe:	f5ad 7d1d 	sub.w	sp, sp, #628	@ 0x274
	if((paging.show_prev_more && current_focus_line == 0) || (paging.show_next_more && current_focus_line == 5))
 8001ac2:	b10b      	cbz	r3, 8001ac8 <On_Delete_Key_Pressed+0x14>
 8001ac4:	2c00      	cmp	r4, #0
 8001ac6:	d067      	beq.n	8001b98 <On_Delete_Key_Pressed+0xe4>
 8001ac8:	7b6a      	ldrb	r2, [r5, #13]
 8001aca:	b10a      	cbz	r2, 8001ad0 <On_Delete_Key_Pressed+0x1c>
 8001acc:	2c05      	cmp	r4, #5
 8001ace:	d063      	beq.n	8001b98 <On_Delete_Key_Pressed+0xe4>
		return 1;
	// 计算实际文件索引（需考虑分页提示符）
	uint16_t actual_index = paging.start_index + current_focus_line;
 8001ad0:	886a      	ldrh	r2, [r5, #2]
 8001ad2:	4414      	add	r4, r2
 8001ad4:	b2a4      	uxth	r4, r4
	if(paging.show_prev_more) actual_index -= 1; // 排除"..."行
 8001ad6:	b10b      	cbz	r3, 8001adc <On_Delete_Key_Pressed+0x28>
 8001ad8:	3c01      	subs	r4, #1
 8001ada:	b2a4      	uxth	r4, r4

	// 构造完整路径
	char full_path[FF_MAX_LFN + 3] = "0:/";
 8001adc:	4b39      	ldr	r3, [pc, #228]	@ (8001bc4 <On_Delete_Key_Pressed+0x110>)
 8001ade:	2211      	movs	r2, #17
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	a801      	add	r0, sp, #4
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	f00a fdb9 	bl	800c65c <memset>
	strcat(full_path, paging.file_list[actual_index]);
 8001aea:	68ae      	ldr	r6, [r5, #8]
 8001aec:	4668      	mov	r0, sp
 8001aee:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8001af2:	f00a fdbb 	bl	800c66c <strcat>

	sprintf(Tx_Buffer, "File_M.t7.txt=\"确认删除%s?\"\xff\xff\xff",paging.file_list[actual_index]);
 8001af6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8001afa:	4933      	ldr	r1, [pc, #204]	@ (8001bc8 <On_Delete_Key_Pressed+0x114>)
 8001afc:	4833      	ldr	r0, [pc, #204]	@ (8001bcc <On_Delete_Key_Pressed+0x118>)
 8001afe:	f00a fca5 	bl	800c44c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001b02:	4832      	ldr	r0, [pc, #200]	@ (8001bcc <On_Delete_Key_Pressed+0x118>)
 8001b04:	f006 fb6e 	bl	80081e4 <USART1_Tx_HMIdata>
	Confirm_Msg.display = 1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	4e31      	ldr	r6, [pc, #196]	@ (8001bd0 <On_Delete_Key_Pressed+0x11c>)
	strcat(full_path, paging.file_list[actual_index]);
 8001b0c:	00a7      	lsls	r7, r4, #2
	Confirm_Msg.display = 1;
 8001b0e:	7033      	strb	r3, [r6, #0]
	Confirm_Msg.type = CONFIRM_DELETE_FILE;
 8001b10:	2302      	movs	r3, #2

	while(1){
		if(key_code == KEY_CONFIRM){
 8001b12:	4c30      	ldr	r4, [pc, #192]	@ (8001bd4 <On_Delete_Key_Pressed+0x120>)
	Confirm_Msg.type = CONFIRM_DELETE_FILE;
 8001b14:	7073      	strb	r3, [r6, #1]
		if(key_code == KEY_CONFIRM){
 8001b16:	7823      	ldrb	r3, [r4, #0]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d12f      	bne.n	8001b7c <On_Delete_Key_Pressed+0xc8>
			key_code = KEY_NULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	7023      	strb	r3, [r4, #0]
			key_code = KEY_NULL;
			return;
		}
	}

	sprintf(Tx_Buffer, "File_M.t7.txt=\"正在删除%s\"\xff\xff\xff",paging.file_list[actual_index]);
 8001b20:	68ab      	ldr	r3, [r5, #8]
 8001b22:	492d      	ldr	r1, [pc, #180]	@ (8001bd8 <On_Delete_Key_Pressed+0x124>)
 8001b24:	59da      	ldr	r2, [r3, r7]
 8001b26:	4829      	ldr	r0, [pc, #164]	@ (8001bcc <On_Delete_Key_Pressed+0x118>)
 8001b28:	f00a fc90 	bl	800c44c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001b2c:	4827      	ldr	r0, [pc, #156]	@ (8001bcc <On_Delete_Key_Pressed+0x118>)
 8001b2e:	f006 fb59 	bl	80081e4 <USART1_Tx_HMIdata>

	FIL fp;
	if(f_open(&fp, full_path, FA_READ) == FR_OK) {
 8001b32:	2201      	movs	r2, #1
 8001b34:	4669      	mov	r1, sp
 8001b36:	a806      	add	r0, sp, #24
 8001b38:	f003 f9ca 	bl	8004ed0 <f_open>
 8001b3c:	b910      	cbnz	r0, 8001b44 <On_Delete_Key_Pressed+0x90>
			f_close(&fp); // 确保文件未被占用
 8001b3e:	a806      	add	r0, sp, #24
 8001b40:	f003 fda3 	bl	800568a <f_close>
	}
	// 执行删除
	FRESULT res = delete_file(full_path);
 8001b44:	4668      	mov	r0, sp
 8001b46:	f7ff ff7f 	bl	8001a48 <delete_file>

	// 处理结果
	if(res == FR_OK) {
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	b928      	cbnz	r0, 8001b5a <On_Delete_Key_Pressed+0xa6>
		// 在删除成功后更新缓存前释放旧内存
		if(paging.file_list != NULL) {
 8001b4e:	68ab      	ldr	r3, [r5, #8]
 8001b50:	bb5b      	cbnz	r3, 8001baa <On_Delete_Key_Pressed+0xf6>
			for(uint16_t i=0; i<paging.file_count; i++)
					free(paging.file_list[i]);
			free(paging.file_list);
		}
			// 更新文件列表缓存
			Cache_File_List();
 8001b52:	f7ff ff15 	bl	8001980 <Cache_File_List>
			Refresh_Display();
 8001b56:	f7ff fed1 	bl	80018fc <Refresh_Display>
	else {
//			sprintf(Tx_Buffer, "File_M.t7.txt=\"错误:%d\"\xff\xff\xff", res);
	}
//	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);

	HAL_Delay(1000);
 8001b5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b5e:	f006 fc81 	bl	8008464 <HAL_Delay>

	sprintf(Tx_Buffer, "File_M.t7.txt=\"\"\xff\xff\xff",paging.file_list[actual_index]);
 8001b62:	68ab      	ldr	r3, [r5, #8]
 8001b64:	491d      	ldr	r1, [pc, #116]	@ (8001bdc <On_Delete_Key_Pressed+0x128>)
 8001b66:	59da      	ldr	r2, [r3, r7]
 8001b68:	4818      	ldr	r0, [pc, #96]	@ (8001bcc <On_Delete_Key_Pressed+0x118>)
 8001b6a:	f00a fc6f 	bl	800c44c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001b6e:	4817      	ldr	r0, [pc, #92]	@ (8001bcc <On_Delete_Key_Pressed+0x118>)
 8001b70:	f006 fb38 	bl	80081e4 <USART1_Tx_HMIdata>
	Confirm_Msg.display = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	7033      	strb	r3, [r6, #0]
	Confirm_Msg.type = CONFIRM_NULL;
 8001b78:	7073      	strb	r3, [r6, #1]
 8001b7a:	e00d      	b.n	8001b98 <On_Delete_Key_Pressed+0xe4>
		if(key_code == KEY_CANCEL){
 8001b7c:	7823      	ldrb	r3, [r4, #0]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d1c9      	bne.n	8001b16 <On_Delete_Key_Pressed+0x62>
			sprintf(Tx_Buffer, "File_M.t7.txt=\"\"\xff\xff\xff");
 8001b82:	4916      	ldr	r1, [pc, #88]	@ (8001bdc <On_Delete_Key_Pressed+0x128>)
 8001b84:	4811      	ldr	r0, [pc, #68]	@ (8001bcc <On_Delete_Key_Pressed+0x118>)
 8001b86:	f00a fe64 	bl	800c852 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001b8a:	4810      	ldr	r0, [pc, #64]	@ (8001bcc <On_Delete_Key_Pressed+0x118>)
 8001b8c:	f006 fb2a 	bl	80081e4 <USART1_Tx_HMIdata>
			Confirm_Msg.display = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	7033      	strb	r3, [r6, #0]
			Confirm_Msg.type = CONFIRM_NULL;
 8001b94:	7073      	strb	r3, [r6, #1]
			key_code = KEY_NULL;
 8001b96:	7023      	strb	r3, [r4, #0]
}
 8001b98:	f50d 7d1d 	add.w	sp, sp, #628	@ 0x274
 8001b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					free(paging.file_list[i]);
 8001b9e:	b2a3      	uxth	r3, r4
 8001ba0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8001ba4:	f008 fd38 	bl	800a618 <free>
			for(uint16_t i=0; i<paging.file_count; i++)
 8001ba8:	3401      	adds	r4, #1
 8001baa:	882a      	ldrh	r2, [r5, #0]
 8001bac:	b2a3      	uxth	r3, r4
 8001bae:	429a      	cmp	r2, r3
					free(paging.file_list[i]);
 8001bb0:	68a8      	ldr	r0, [r5, #8]
			for(uint16_t i=0; i<paging.file_count; i++)
 8001bb2:	d8f4      	bhi.n	8001b9e <On_Delete_Key_Pressed+0xea>
			free(paging.file_list);
 8001bb4:	f008 fd30 	bl	800a618 <free>
 8001bb8:	e7cb      	b.n	8001b52 <On_Delete_Key_Pressed+0x9e>
 8001bba:	bf00      	nop
 8001bbc:	20000374 	.word	0x20000374
 8001bc0:	20000385 	.word	0x20000385
 8001bc4:	002f3a30 	.word	0x002f3a30
 8001bc8:	0800f056 	.word	0x0800f056
 8001bcc:	20000b8e 	.word	0x20000b8e
 8001bd0:	20000372 	.word	0x20000372
 8001bd4:	20000920 	.word	0x20000920
 8001bd8:	0800f079 	.word	0x0800f079
 8001bdc:	0800f09b 	.word	0x0800f09b

08001be0 <sendFile_key_pressed>:

void sendFile_key_pressed(){
 8001be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if((paging.show_prev_more && current_focus_line == 0) || (paging.show_next_more && current_focus_line == 5))
 8001be4:	4d51      	ldr	r5, [pc, #324]	@ (8001d2c <sendFile_key_pressed+0x14c>)
 8001be6:	4a52      	ldr	r2, [pc, #328]	@ (8001d30 <sendFile_key_pressed+0x150>)
 8001be8:	7b2b      	ldrb	r3, [r5, #12]
 8001bea:	7814      	ldrb	r4, [r2, #0]
void sendFile_key_pressed(){
 8001bec:	f5ad 7d37 	sub.w	sp, sp, #732	@ 0x2dc
	if((paging.show_prev_more && current_focus_line == 0) || (paging.show_next_more && current_focus_line == 5))
 8001bf0:	b10b      	cbz	r3, 8001bf6 <sendFile_key_pressed+0x16>
 8001bf2:	2c00      	cmp	r4, #0
 8001bf4:	d037      	beq.n	8001c66 <sendFile_key_pressed+0x86>
 8001bf6:	7b6a      	ldrb	r2, [r5, #13]
 8001bf8:	b10a      	cbz	r2, 8001bfe <sendFile_key_pressed+0x1e>
 8001bfa:	2c05      	cmp	r4, #5
 8001bfc:	d033      	beq.n	8001c66 <sendFile_key_pressed+0x86>
		return 1;
	// 计算实际文件索引（需考虑分页提示符）
	uint16_t actual_index = paging.start_index + current_focus_line;
 8001bfe:	886a      	ldrh	r2, [r5, #2]
 8001c00:	4414      	add	r4, r2
 8001c02:	b2a4      	uxth	r4, r4
	if(paging.show_prev_more) actual_index -= 1; // 排除"..."行
 8001c04:	b10b      	cbz	r3, 8001c0a <sendFile_key_pressed+0x2a>
 8001c06:	3c01      	subs	r4, #1
 8001c08:	b2a4      	uxth	r4, r4

	// 构造完整路径
	char full_path[FF_MAX_LFN + 3] = "0:/";
 8001c0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d34 <sendFile_key_pressed+0x154>)
 8001c0c:	2211      	movs	r2, #17
 8001c0e:	2100      	movs	r1, #0
 8001c10:	a802      	add	r0, sp, #8
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	f00a fd22 	bl	800c65c <memset>
	strcat(full_path, paging.file_list[actual_index]);
 8001c18:	68ab      	ldr	r3, [r5, #8]
 8001c1a:	a801      	add	r0, sp, #4
 8001c1c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8001c20:	f00a fd24 	bl	800c66c <strcat>

	while(1){
		if(HAL_GPIO_ReadPin(BLE_LED_GPIO_Port, BLE_LED_Pin) == GPIO_PIN_RESET)
 8001c24:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 8001d38 <sendFile_key_pressed+0x158>
 8001c28:	4e44      	ldr	r6, [pc, #272]	@ (8001d3c <sendFile_key_pressed+0x15c>)
		{
			sprintf(Tx_Buffer, "File_M.t7.txt=\"蓝牙未连接\"\xff\xff\xff");
 8001c2a:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 8001d40 <sendFile_key_pressed+0x160>
	strcat(full_path, paging.file_list[actual_index]);
 8001c2e:	00a7      	lsls	r7, r4, #2
		if(HAL_GPIO_ReadPin(BLE_LED_GPIO_Port, BLE_LED_Pin) == GPIO_PIN_RESET)
 8001c30:	2104      	movs	r1, #4
 8001c32:	4648      	mov	r0, r9
 8001c34:	f007 f9d8 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8001c38:	4604      	mov	r4, r0
 8001c3a:	b9c0      	cbnz	r0, 8001c6e <sendFile_key_pressed+0x8e>
			sprintf(Tx_Buffer, "File_M.t7.txt=\"蓝牙未连接\"\xff\xff\xff");
 8001c3c:	4641      	mov	r1, r8
 8001c3e:	4841      	ldr	r0, [pc, #260]	@ (8001d44 <sendFile_key_pressed+0x164>)
 8001c40:	f00a fe07 	bl	800c852 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001c44:	483f      	ldr	r0, [pc, #252]	@ (8001d44 <sendFile_key_pressed+0x164>)
 8001c46:	f006 facd 	bl	80081e4 <USART1_Tx_HMIdata>
		}else
			break;

		if(key_code == KEY_CANCEL){
 8001c4a:	7833      	ldrb	r3, [r6, #0]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d1ef      	bne.n	8001c30 <sendFile_key_pressed+0x50>
			sprintf(Tx_Buffer, "File_M.t7.txt=\"\"\xff\xff\xff");
 8001c50:	493d      	ldr	r1, [pc, #244]	@ (8001d48 <sendFile_key_pressed+0x168>)
 8001c52:	483c      	ldr	r0, [pc, #240]	@ (8001d44 <sendFile_key_pressed+0x164>)
 8001c54:	f00a fdfd 	bl	800c852 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001c58:	483a      	ldr	r0, [pc, #232]	@ (8001d44 <sendFile_key_pressed+0x164>)
 8001c5a:	f006 fac3 	bl	80081e4 <USART1_Tx_HMIdata>
			Confirm_Msg.display = 0;
 8001c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d4c <sendFile_key_pressed+0x16c>)
			Confirm_Msg.type = CONFIRM_NULL;
			key_code = KEY_NULL;
 8001c60:	7034      	strb	r4, [r6, #0]
			Confirm_Msg.display = 0;
 8001c62:	701c      	strb	r4, [r3, #0]
			Confirm_Msg.type = CONFIRM_NULL;
 8001c64:	705c      	strb	r4, [r3, #1]

	sprintf(Tx_Buffer, "File_M.t7.txt=\"\"\xff\xff\xff",paging.file_list[actual_index]);
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
	Confirm_Msg.display = 0;
	Confirm_Msg.type = CONFIRM_NULL;
}
 8001c66:	f50d 7d37 	add.w	sp, sp, #732	@ 0x2dc
 8001c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sprintf(Tx_Buffer, "File_M.t7.txt=\"确认发送%s?\"\xff\xff\xff",paging.file_list[actual_index]);
 8001c6e:	68ab      	ldr	r3, [r5, #8]
 8001c70:	4937      	ldr	r1, [pc, #220]	@ (8001d50 <sendFile_key_pressed+0x170>)
 8001c72:	59da      	ldr	r2, [r3, r7]
 8001c74:	4833      	ldr	r0, [pc, #204]	@ (8001d44 <sendFile_key_pressed+0x164>)
 8001c76:	f00a fbe9 	bl	800c44c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001c7a:	4832      	ldr	r0, [pc, #200]	@ (8001d44 <sendFile_key_pressed+0x164>)
 8001c7c:	f006 fab2 	bl	80081e4 <USART1_Tx_HMIdata>
	Confirm_Msg.display = 1;
 8001c80:	2301      	movs	r3, #1
 8001c82:	4c32      	ldr	r4, [pc, #200]	@ (8001d4c <sendFile_key_pressed+0x16c>)
 8001c84:	7023      	strb	r3, [r4, #0]
	Confirm_Msg.type = CONFIRM_SEND_FILE;
 8001c86:	7063      	strb	r3, [r4, #1]
		if(key_code == KEY_CONFIRM){
 8001c88:	7833      	ldrb	r3, [r6, #0]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d13b      	bne.n	8001d06 <sendFile_key_pressed+0x126>
			key_code = KEY_NULL;
 8001c8e:	f04f 0800 	mov.w	r8, #0
	res = check_file_exists(full_path);
 8001c92:	a801      	add	r0, sp, #4
			key_code = KEY_NULL;
 8001c94:	f886 8000 	strb.w	r8, [r6]
	res = check_file_exists(full_path);
 8001c98:	f000 f8e8 	bl	8001e6c <check_file_exists>
	} else if (res == FR_NO_FILE) {
 8001c9c:	2804      	cmp	r0, #4
 8001c9e:	d0e2      	beq.n	8001c66 <sendFile_key_pressed+0x86>
	sprintf(Tx_Buffer, "File_M.t7.txt=\"正在发送%s\"\xff\xff\xff",paging.file_list[actual_index]);
 8001ca0:	68ab      	ldr	r3, [r5, #8]
 8001ca2:	492c      	ldr	r1, [pc, #176]	@ (8001d54 <sendFile_key_pressed+0x174>)
 8001ca4:	59da      	ldr	r2, [r3, r7]
 8001ca6:	4827      	ldr	r0, [pc, #156]	@ (8001d44 <sendFile_key_pressed+0x164>)
 8001ca8:	f00a fbd0 	bl	800c44c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001cac:	4825      	ldr	r0, [pc, #148]	@ (8001d44 <sendFile_key_pressed+0x164>)
 8001cae:	f006 fa99 	bl	80081e4 <USART1_Tx_HMIdata>
	uint8_t line_buf[100] = {0};
 8001cb2:	2260      	movs	r2, #96	@ 0x60
 8001cb4:	4641      	mov	r1, r8
 8001cb6:	a808      	add	r0, sp, #32
 8001cb8:	f8cd 801c 	str.w	r8, [sp, #28]
 8001cbc:	f00a fcce 	bl	800c65c <memset>
	res = f_open(&fp, full_path, FA_READ);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	a901      	add	r1, sp, #4
 8001cc4:	a820      	add	r0, sp, #128	@ 0x80
 8001cc6:	f003 f903 	bl	8004ed0 <f_open>
	if(res != FR_OK)
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	d1cb      	bne.n	8001c66 <sendFile_key_pressed+0x86>
	while(f_gets(line_buf,sizeof(line_buf),&fp)!= NULL){
 8001cce:	2164      	movs	r1, #100	@ 0x64
 8001cd0:	aa20      	add	r2, sp, #128	@ 0x80
 8001cd2:	a807      	add	r0, sp, #28
 8001cd4:	f004 fc22 	bl	800651c <f_gets>
 8001cd8:	bb20      	cbnz	r0, 8001d24 <sendFile_key_pressed+0x144>
	res = f_close(&fp);
 8001cda:	a820      	add	r0, sp, #128	@ 0x80
 8001cdc:	f003 fcd5 	bl	800568a <f_close>
	if(res != FR_OK)
 8001ce0:	4606      	mov	r6, r0
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	d1bf      	bne.n	8001c66 <sendFile_key_pressed+0x86>
	HAL_Delay(1000);
 8001ce6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cea:	f006 fbbb 	bl	8008464 <HAL_Delay>
	sprintf(Tx_Buffer, "File_M.t7.txt=\"\"\xff\xff\xff",paging.file_list[actual_index]);
 8001cee:	68ab      	ldr	r3, [r5, #8]
 8001cf0:	4915      	ldr	r1, [pc, #84]	@ (8001d48 <sendFile_key_pressed+0x168>)
 8001cf2:	59da      	ldr	r2, [r3, r7]
 8001cf4:	4813      	ldr	r0, [pc, #76]	@ (8001d44 <sendFile_key_pressed+0x164>)
 8001cf6:	f00a fba9 	bl	800c44c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001cfa:	4812      	ldr	r0, [pc, #72]	@ (8001d44 <sendFile_key_pressed+0x164>)
 8001cfc:	f006 fa72 	bl	80081e4 <USART1_Tx_HMIdata>
	Confirm_Msg.display = 0;
 8001d00:	7026      	strb	r6, [r4, #0]
	Confirm_Msg.type = CONFIRM_NULL;
 8001d02:	7066      	strb	r6, [r4, #1]
 8001d04:	e7af      	b.n	8001c66 <sendFile_key_pressed+0x86>
		if(key_code == KEY_CANCEL){
 8001d06:	7833      	ldrb	r3, [r6, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d1bd      	bne.n	8001c88 <sendFile_key_pressed+0xa8>
			sprintf(Tx_Buffer, "File_M.t7.txt=\"\"\xff\xff\xff");
 8001d0c:	490e      	ldr	r1, [pc, #56]	@ (8001d48 <sendFile_key_pressed+0x168>)
 8001d0e:	480d      	ldr	r0, [pc, #52]	@ (8001d44 <sendFile_key_pressed+0x164>)
 8001d10:	f00a fd9f 	bl	800c852 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001d14:	480b      	ldr	r0, [pc, #44]	@ (8001d44 <sendFile_key_pressed+0x164>)
 8001d16:	f006 fa65 	bl	80081e4 <USART1_Tx_HMIdata>
			Confirm_Msg.display = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	7023      	strb	r3, [r4, #0]
			Confirm_Msg.type = CONFIRM_NULL;
 8001d1e:	7063      	strb	r3, [r4, #1]
			key_code = KEY_NULL;
 8001d20:	7033      	strb	r3, [r6, #0]
			return;
 8001d22:	e7a0      	b.n	8001c66 <sendFile_key_pressed+0x86>
		USART2_Tx_BLEdata(line_buf);
 8001d24:	a807      	add	r0, sp, #28
 8001d26:	f006 fa6d 	bl	8008204 <USART2_Tx_BLEdata>
 8001d2a:	e7d0      	b.n	8001cce <sendFile_key_pressed+0xee>
 8001d2c:	20000374 	.word	0x20000374
 8001d30:	20000385 	.word	0x20000385
 8001d34:	002f3a30 	.word	0x002f3a30
 8001d38:	40010c00 	.word	0x40010c00
 8001d3c:	20000920 	.word	0x20000920
 8001d40:	0800f0af 	.word	0x0800f0af
 8001d44:	20000b8e 	.word	0x20000b8e
 8001d48:	0800f09b 	.word	0x0800f09b
 8001d4c:	20000372 	.word	0x20000372
 8001d50:	0800f0d2 	.word	0x0800f0d2
 8001d54:	0800f0f5 	.word	0x0800f0f5

08001d58 <scroll_focus_line>:

 void scroll_focus_line(void){
 8001d58:	b538      	push	{r3, r4, r5, lr}
	sprintf(Tx_Buffer,"File_M.t%d.bco=65535\xff\xff\xff",last_focus_line);
 8001d5a:	4c12      	ldr	r4, [pc, #72]	@ (8001da4 <scroll_focus_line+0x4c>)
 8001d5c:	4d12      	ldr	r5, [pc, #72]	@ (8001da8 <scroll_focus_line+0x50>)
 8001d5e:	4913      	ldr	r1, [pc, #76]	@ (8001dac <scroll_focus_line+0x54>)
 8001d60:	782a      	ldrb	r2, [r5, #0]
 8001d62:	4620      	mov	r0, r4
 8001d64:	f00a fb72 	bl	800c44c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f006 fa3b 	bl	80081e4 <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"File_M.t%d.pco=0\xff\xff\xff",last_focus_line);
 8001d6e:	782a      	ldrb	r2, [r5, #0]
 8001d70:	490f      	ldr	r1, [pc, #60]	@ (8001db0 <scroll_focus_line+0x58>)
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);

	sprintf(Tx_Buffer,"File_M.t%d.bco=825\xff\xff\xff",current_focus_line);
 8001d72:	4d10      	ldr	r5, [pc, #64]	@ (8001db4 <scroll_focus_line+0x5c>)
	sprintf(Tx_Buffer,"File_M.t%d.pco=0\xff\xff\xff",last_focus_line);
 8001d74:	4620      	mov	r0, r4
 8001d76:	f00a fb69 	bl	800c44c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	f006 fa32 	bl	80081e4 <USART1_Tx_HMIdata>
	sprintf(Tx_Buffer,"File_M.t%d.bco=825\xff\xff\xff",current_focus_line);
 8001d80:	782a      	ldrb	r2, [r5, #0]
 8001d82:	490d      	ldr	r1, [pc, #52]	@ (8001db8 <scroll_focus_line+0x60>)
 8001d84:	4620      	mov	r0, r4
 8001d86:	f00a fb61 	bl	800c44c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f006 fa2a 	bl	80081e4 <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"File_M.t%d.pco=65535\xff\xff\xff",current_focus_line);
 8001d90:	4620      	mov	r0, r4
 8001d92:	782a      	ldrb	r2, [r5, #0]
 8001d94:	4909      	ldr	r1, [pc, #36]	@ (8001dbc <scroll_focus_line+0x64>)
 8001d96:	f00a fb59 	bl	800c44c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001d9a:	4620      	mov	r0, r4
}
 8001d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001da0:	f006 ba20 	b.w	80081e4 <USART1_Tx_HMIdata>
 8001da4:	20000b8e 	.word	0x20000b8e
 8001da8:	20000384 	.word	0x20000384
 8001dac:	0800f117 	.word	0x0800f117
 8001db0:	0800f12f 	.word	0x0800f12f
 8001db4:	20000385 	.word	0x20000385
 8001db8:	0800f143 	.word	0x0800f143
 8001dbc:	0800f159 	.word	0x0800f159

08001dc0 <f_write_retry>:
// 增加写入超时
#define SD_WRITE_TIMEOUT 10000  // 10秒
int SDCard_states = 0;
uint16_t csv_crt_line_No = 0;

FRESULT f_write_retry(FIL* fp, const void* buff, UINT btw) {
 8001dc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001dc4:	4607      	mov	r7, r0
 8001dc6:	4688      	mov	r8, r1
 8001dc8:	4615      	mov	r5, r2
  UINT bw;
  FRESULT res;
  uint32_t start = HAL_GetTick();
 8001dca:	f006 fb45 	bl	8008458 <HAL_GetTick>

  do {
    res = f_write(fp, buff, btw, &bw);

    if(res != FR_OK) break;
    if(HAL_GetTick() - start > SD_WRITE_TIMEOUT) {
 8001dce:	f242 7910 	movw	r9, #10000	@ 0x2710
  uint32_t start = HAL_GetTick();
 8001dd2:	4606      	mov	r6, r0
    res = f_write(fp, buff, btw, &bw);
 8001dd4:	462a      	mov	r2, r5
 8001dd6:	4641      	mov	r1, r8
 8001dd8:	4638      	mov	r0, r7
 8001dda:	ab01      	add	r3, sp, #4
 8001ddc:	f003 fab8 	bl	8005350 <f_write>
    if(res != FR_OK) break;
 8001de0:	4604      	mov	r4, r0
 8001de2:	b938      	cbnz	r0, 8001df4 <f_write_retry+0x34>
    if(HAL_GetTick() - start > SD_WRITE_TIMEOUT) {
 8001de4:	f006 fb38 	bl	8008458 <HAL_GetTick>
 8001de8:	1b80      	subs	r0, r0, r6
 8001dea:	4548      	cmp	r0, r9
 8001dec:	d806      	bhi.n	8001dfc <f_write_retry+0x3c>
      res = FR_TIMEOUT;
      break;
    }
  } while(bw != btw);
 8001dee:	9b01      	ldr	r3, [sp, #4]
 8001df0:	42ab      	cmp	r3, r5
 8001df2:	d1ef      	bne.n	8001dd4 <f_write_retry+0x14>

  return res;
}
 8001df4:	4620      	mov	r0, r4
 8001df6:	b003      	add	sp, #12
 8001df8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      res = FR_TIMEOUT;
 8001dfc:	240f      	movs	r4, #15
 8001dfe:	e7f9      	b.n	8001df4 <f_write_retry+0x34>

08001e00 <SD_FS_Init>:
  }
  return SDCard_states;
}

uint8_t SD_FS_Init(void)
{
 8001e00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    static FATFS sd_fs;
    uint32_t ret = 0;
    MKFS_PARM opt = {0};
 8001e02:	2210      	movs	r2, #16
 8001e04:	2100      	movs	r1, #0
 8001e06:	4668      	mov	r0, sp
 8001e08:	f00a fc28 	bl	800c65c <memset>
    opt.fmt = FM_FAT;
 8001e0c:	2201      	movs	r2, #1
    static uint8_t work_buf[512] = {0};
    ret = f_mount(&sd_fs, DISK_SD, 1);
 8001e0e:	490b      	ldr	r1, [pc, #44]	@ (8001e3c <SD_FS_Init+0x3c>)
 8001e10:	480b      	ldr	r0, [pc, #44]	@ (8001e40 <SD_FS_Init+0x40>)
    opt.fmt = FM_FAT;
 8001e12:	f88d 2000 	strb.w	r2, [sp]
    ret = f_mount(&sd_fs, DISK_SD, 1);
 8001e16:	f003 f831 	bl	8004e7c <f_mount>

    if(ret != FR_OK)
 8001e1a:	b158      	cbz	r0, 8001e34 <SD_FS_Init+0x34>
    {
        switch(ret)
 8001e1c:	f1a0 030d 	sub.w	r3, r0, #13
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d806      	bhi.n	8001e34 <SD_FS_Init+0x34>
        {
            case FR_NO_FILESYSTEM:
            {
                ret = f_mkfs(DISK_SD, &opt, work_buf, sizeof(work_buf));
 8001e26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e2a:	4669      	mov	r1, sp
 8001e2c:	4a05      	ldr	r2, [pc, #20]	@ (8001e44 <SD_FS_Init+0x44>)
 8001e2e:	4803      	ldr	r0, [pc, #12]	@ (8001e3c <SD_FS_Init+0x3c>)
 8001e30:	f003 fd56 	bl	80058e0 <f_mkfs>
    else
    {
//    	printf("sd fs f_mkfs success!\r\n");
    }
    return ret;
}
 8001e34:	b2c0      	uxtb	r0, r0
 8001e36:	b005      	add	sp, #20
 8001e38:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e3c:	0800f171 	.word	0x0800f171
 8001e40:	20000588 	.word	0x20000588
 8001e44:	20000388 	.word	0x20000388

08001e48 <SDCard_InsertCheck>:
int SDCard_InsertCheck(void){
 8001e48:	b508      	push	{r3, lr}
  if(SD_INSERT){
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	4806      	ldr	r0, [pc, #24]	@ (8001e68 <SDCard_InsertCheck+0x20>)
 8001e4e:	f007 f8cb 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8001e52:	b930      	cbnz	r0, 8001e62 <SDCard_InsertCheck+0x1a>
		ret = SD_FS_Init();
 8001e54:	f7ff ffd4 	bl	8001e00 <SD_FS_Init>
  	if(ret == 0){
 8001e58:	3800      	subs	r0, #0
 8001e5a:	bf18      	it	ne
 8001e5c:	2001      	movne	r0, #1
 8001e5e:	4240      	negs	r0, r0
}
 8001e60:	bd08      	pop	{r3, pc}
  	SDCard_states = -2;//未插入SD卡
 8001e62:	f06f 0001 	mvn.w	r0, #1
  return SDCard_states;
 8001e66:	e7fb      	b.n	8001e60 <SDCard_InsertCheck+0x18>
 8001e68:	40011400 	.word	0x40011400

08001e6c <check_file_exists>:

FRESULT check_file_exists(const char* path) {
 8001e6c:	b500      	push	{lr}
 8001e6e:	b0c9      	sub	sp, #292	@ 0x124
    FILINFO fno;
    return f_stat(path, &fno);
 8001e70:	4669      	mov	r1, sp
 8001e72:	f003 fcae 	bl	80057d2 <f_stat>
}
 8001e76:	b049      	add	sp, #292	@ 0x124
 8001e78:	f85d fb04 	ldr.w	pc, [sp], #4

08001e7c <CSV_sheet_Init>:

int CSV_sheet_Init(void){
 8001e7c:	b530      	push	{r4, r5, lr}

	if(SDCard_states == 0){
 8001e7e:	4b31      	ldr	r3, [pc, #196]	@ (8001f44 <CSV_sheet_Init+0xc8>)
int CSV_sheet_Init(void){
 8001e80:	f5ad 7d3f 	sub.w	sp, sp, #764	@ 0x2fc
	if(SDCard_states == 0){
 8001e84:	681c      	ldr	r4, [r3, #0]
 8001e86:	2c00      	cmp	r4, #0
 8001e88:	d158      	bne.n	8001f3c <CSV_sheet_Init+0xc0>
    FIL fp;
    FRESULT res;
    uint16_t File_Num = 1;

    char USER_FILE_NAME[20] = {0};
 8001e8a:	2210      	movs	r2, #16
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	eb0d 0002 	add.w	r0, sp, r2
 8001e92:	9403      	str	r4, [sp, #12]
 8001e94:	f00a fbe2 	bl	800c65c <memset>
    char file_name_buf[20] = {0};
 8001e98:	2210      	movs	r2, #16
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	a809      	add	r0, sp, #36	@ 0x24
 8001e9e:	9408      	str	r4, [sp, #32]
 8001ea0:	f00a fbdc 	bl	800c65c <memset>

    if(GPS_GGA_Data.fix_status == 1){
 8001ea4:	4b28      	ldr	r3, [pc, #160]	@ (8001f48 <CSV_sheet_Init+0xcc>)
 8001ea6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d119      	bne.n	8001ee2 <CSV_sheet_Init+0x66>
    	Format_FileName_Date(file_name_buf, GPS_RMC_Data.time, GPS_RMC_Data.date);
 8001eae:	4a27      	ldr	r2, [pc, #156]	@ (8001f4c <CSV_sheet_Init+0xd0>)
 8001eb0:	a808      	add	r0, sp, #32
 8001eb2:	f1a2 012d 	sub.w	r1, r2, #45	@ 0x2d
 8001eb6:	f7ff fbbd 	bl	8001634 <Format_FileName_Date>
    }
    else{
    	sprintf(file_name_buf,"20250101");
    }
    snprintf(USER_FILE_NAME,20,"0:/%s%03d.csv", file_name_buf, File_Num);
 8001eba:	2501      	movs	r5, #1
 8001ebc:	2114      	movs	r1, #20
 8001ebe:	4a24      	ldr	r2, [pc, #144]	@ (8001f50 <CSV_sheet_Init+0xd4>)
 8001ec0:	9500      	str	r5, [sp, #0]
 8001ec2:	ab08      	add	r3, sp, #32
 8001ec4:	a803      	add	r0, sp, #12
 8001ec6:	f00a fa8d 	bl	800c3e4 <sniprintf>

    res = check_file_exists(USER_FILE_NAME);
 8001eca:	a803      	add	r0, sp, #12
 8001ecc:	f7ff ffce 	bl	8001e6c <check_file_exists>

    if (res == FR_OK) {//文件存在
 8001ed0:	b960      	cbnz	r0, 8001eec <CSV_sheet_Init+0x70>
    	AD24C02_Read2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);
 8001ed2:	2050      	movs	r0, #80	@ 0x50
 8001ed4:	491f      	ldr	r1, [pc, #124]	@ (8001f54 <CSV_sheet_Init+0xd8>)
 8001ed6:	f7ff f992 	bl	80011fe <AD24C02_Read2Byte>
	}
	else
	{
		return -1;//没发现SDCard
	}
}
 8001eda:	4620      	mov	r0, r4
 8001edc:	f50d 7d3f 	add.w	sp, sp, #764	@ 0x2fc
 8001ee0:	bd30      	pop	{r4, r5, pc}
    	sprintf(file_name_buf,"20250101");
 8001ee2:	491d      	ldr	r1, [pc, #116]	@ (8001f58 <CSV_sheet_Init+0xdc>)
 8001ee4:	a808      	add	r0, sp, #32
 8001ee6:	f00a fcb4 	bl	800c852 <strcpy>
 8001eea:	e7e6      	b.n	8001eba <CSV_sheet_Init+0x3e>
    else if (res == FR_NO_FILE) {//文件不存在
 8001eec:	2804      	cmp	r0, #4
 8001eee:	d105      	bne.n	8001efc <CSV_sheet_Init+0x80>
        FRESULT ret = f_open(&fp, USER_FILE_NAME, FA_WRITE | FA_OPEN_APPEND);
 8001ef0:	2232      	movs	r2, #50	@ 0x32
 8001ef2:	a903      	add	r1, sp, #12
 8001ef4:	a828      	add	r0, sp, #160	@ 0xa0
 8001ef6:	f002 ffeb 	bl	8004ed0 <f_open>
        if(ret != FR_OK)
 8001efa:	b108      	cbz	r0, 8001f00 <CSV_sheet_Init+0x84>
          return 1;
 8001efc:	2401      	movs	r4, #1
 8001efe:	e7ec      	b.n	8001eda <CSV_sheet_Init+0x5e>
    		char header[] = {0xE5,0xBA,0x8F,0xE5,0x8F,0xB7,0x2C,0xE6,0x97,0xA5,0xE6
 8001f00:	226a      	movs	r2, #106	@ 0x6a
 8001f02:	4916      	ldr	r1, [pc, #88]	@ (8001f5c <CSV_sheet_Init+0xe0>)
 8001f04:	a80d      	add	r0, sp, #52	@ 0x34
 8001f06:	f00a fcba 	bl	800c87e <memcpy>
        ret = f_write_retry(&fp, header, strlen(header));
 8001f0a:	a80d      	add	r0, sp, #52	@ 0x34
 8001f0c:	f7fe f92a 	bl	8000164 <strlen>
 8001f10:	a90d      	add	r1, sp, #52	@ 0x34
 8001f12:	4602      	mov	r2, r0
 8001f14:	a828      	add	r0, sp, #160	@ 0xa0
 8001f16:	f7ff ff53 	bl	8001dc0 <f_write_retry>
 8001f1a:	4605      	mov	r5, r0
        f_sync(&fp);
 8001f1c:	a828      	add	r0, sp, #160	@ 0xa0
 8001f1e:	f003 fb03 	bl	8005528 <f_sync>
        if(ret != FR_OK)
 8001f22:	2d00      	cmp	r5, #0
 8001f24:	d1ea      	bne.n	8001efc <CSV_sheet_Init+0x80>
        ret = f_close(&fp);
 8001f26:	a828      	add	r0, sp, #160	@ 0xa0
 8001f28:	f003 fbaf 	bl	800568a <f_close>
        if(ret != FR_OK)
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	d1e5      	bne.n	8001efc <CSV_sheet_Init+0x80>
        csv_crt_line_No = 0;
 8001f30:	4908      	ldr	r1, [pc, #32]	@ (8001f54 <CSV_sheet_Init+0xd8>)
 8001f32:	8008      	strh	r0, [r1, #0]
        AD24C02_Write2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);
 8001f34:	2050      	movs	r0, #80	@ 0x50
 8001f36:	f7ff f951 	bl	80011dc <AD24C02_Write2Byte>
        return 0;
 8001f3a:	e7ce      	b.n	8001eda <CSV_sheet_Init+0x5e>
		return -1;//没发现SDCard
 8001f3c:	f04f 34ff 	mov.w	r4, #4294967295
 8001f40:	e7cb      	b.n	8001eda <CSV_sheet_Init+0x5e>
 8001f42:	bf00      	nop
 8001f44:	200007c8 	.word	0x200007c8
 8001f48:	20000230 	.word	0x20000230
 8001f4c:	20000228 	.word	0x20000228
 8001f50:	0800f17d 	.word	0x0800f17d
 8001f54:	200007c4 	.word	0x200007c4
 8001f58:	0800f174 	.word	0x0800f174
 8001f5c:	0800f18b 	.word	0x0800f18b

08001f60 <SDCard_Write_log>:

int SDCard_Write_log(GPS_Data GGA_Result_Data, GPS_Data RMC_Result_Data){
 8001f60:	b084      	sub	sp, #16
 8001f62:	b530      	push	{r4, r5, lr}
 8001f64:	f5ad 7d5b 	sub.w	sp, sp, #876	@ 0x36c
 8001f68:	acde      	add	r4, sp, #888	@ 0x378
 8001f6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(SDCard_states == 0){
 8001f6e:	4b55      	ldr	r3, [pc, #340]	@ (80020c4 <SDCard_Write_log+0x164>)
 8001f70:	681c      	ldr	r4, [r3, #0]
 8001f72:	2c00      	cmp	r4, #0
 8001f74:	f040 8207 	bne.w	8002386 <SDCard_Write_log+0x426>
    FIL fp;
    FRESULT res;
    uint16_t File_Num = 1;
    char USER_FILE_NAME[20] = {0};
 8001f78:	2210      	movs	r2, #16
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	eb0d 0002 	add.w	r0, sp, r2
 8001f80:	9403      	str	r4, [sp, #12]
 8001f82:	f00a fb6b 	bl	800c65c <memset>
    char file_name_buf[20] = {0};
 8001f86:	2210      	movs	r2, #16
 8001f88:	4621      	mov	r1, r4
 8001f8a:	a809      	add	r0, sp, #36	@ 0x24
 8001f8c:	9408      	str	r4, [sp, #32]
 8001f8e:	f00a fb65 	bl	800c65c <memset>
    SD_LogData LogBuf;

    if(GGA_Result_Data.fix_status == 1){    //按日期格式化文件名
 8001f92:	f89d 33a5 	ldrb.w	r3, [sp, #933]	@ 0x3a5
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	f040 808e 	bne.w	80020b8 <SDCard_Write_log+0x158>
    	Format_FileName_Date(file_name_buf, GPS_RMC_Data.time, GPS_RMC_Data.date);
 8001f9c:	4a4a      	ldr	r2, [pc, #296]	@ (80020c8 <SDCard_Write_log+0x168>)
 8001f9e:	a808      	add	r0, sp, #32
 8001fa0:	f1a2 012d 	sub.w	r1, r2, #45	@ 0x2d
 8001fa4:	f7ff fb46 	bl	8001634 <Format_FileName_Date>
    }
    else{
    	sprintf(file_name_buf,"20250101");
    }
    snprintf(USER_FILE_NAME,20,"0:/%s%03d.csv", file_name_buf, File_Num);
 8001fa8:	2301      	movs	r3, #1
 8001faa:	2114      	movs	r1, #20
 8001fac:	4a47      	ldr	r2, [pc, #284]	@ (80020cc <SDCard_Write_log+0x16c>)
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	a803      	add	r0, sp, #12
 8001fb2:	ab08      	add	r3, sp, #32
 8001fb4:	f00a fa16 	bl	800c3e4 <sniprintf>

    res = check_file_exists(USER_FILE_NAME);    //检查文件是否存在
 8001fb8:	a803      	add	r0, sp, #12
 8001fba:	f7ff ff57 	bl	8001e6c <check_file_exists>
    FRESULT ret = f_open(&fp, USER_FILE_NAME, FA_WRITE | FA_OPEN_APPEND);    //打开文件，若文件不存在则创建新文件，并定位到文件末尾
 8001fbe:	2232      	movs	r2, #50	@ 0x32
    res = check_file_exists(USER_FILE_NAME);    //检查文件是否存在
 8001fc0:	4605      	mov	r5, r0
    FRESULT ret = f_open(&fp, USER_FILE_NAME, FA_WRITE | FA_OPEN_APPEND);    //打开文件，若文件不存在则创建新文件，并定位到文件末尾
 8001fc2:	a903      	add	r1, sp, #12
 8001fc4:	a844      	add	r0, sp, #272	@ 0x110
 8001fc6:	f002 ff83 	bl	8004ed0 <f_open>
    if(ret != FR_OK)
 8001fca:	4604      	mov	r4, r0
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	d171      	bne.n	80020b4 <SDCard_Write_log+0x154>
    {
//    	printf("f_open fail: %s\r\n", USER_FILE_NAME);
      return 1;
    }

    switch(res){
 8001fd0:	b1bd      	cbz	r5, 8002002 <SDCard_Write_log+0xa2>
 8001fd2:	2d04      	cmp	r5, #4
 8001fd4:	f040 81a9 	bne.w	800232a <SDCard_Write_log+0x3ca>
    case FR_NO_FILE://文件不存在，先向文件中写入列名称：序号,日期,时间,树木编号,注射剂量,经度,纬度,海拔,累计剂量,累计数量
    		char header[] = {0xE5,0xBA,0x8F,0xE5,0x8F,0xB7,0x2C,0xE6,0x97,0xA5,0xE6,0x9C,0x9F,
 8001fd8:	226a      	movs	r2, #106	@ 0x6a
 8001fda:	493d      	ldr	r1, [pc, #244]	@ (80020d0 <SDCard_Write_log+0x170>)
 8001fdc:	a829      	add	r0, sp, #164	@ 0xa4
 8001fde:	f00a fc4e 	bl	800c87e <memcpy>
						0xBC,0x96,0xE5,0x8F,0xB7,0x2C,0xE6,0xB3,0xA8,0xE5,0xB0,0x84,0xE9,0x87,0x8F,
						0x2F,0x6D,0x4C,0x2C,0xE7,0xBB,0x8F,0xE5,0xBA,0xA6,0x2C,0xE7,0xBA,0xAC,0xE5,
						0xBA,0xA6,0x2C,0xE6,0xB5,0xB7,0xE6,0x8B,0x94,0x2F,0x6D,0x2C,0xE7,0xB4,0xAF,
						0xE8,0xAE,0xA1,0xE6,0xB3,0xA8,0xE8,0x8D,0xAF,0xE9,0x87,0x8F,0x2F,0x6D,0x4C,
						0x2C,0xE7,0xB4,0xAF,0xE8,0xAE,0xA1,0xE6,0xB3,0xA8,0xE8,0x8D,0xAF,0xE6,0x95,0xB0,0x0D,0X0A};
        ret = f_write_retry(&fp, header, strlen(header));
 8001fe2:	a829      	add	r0, sp, #164	@ 0xa4
 8001fe4:	f7fe f8be 	bl	8000164 <strlen>
 8001fe8:	a929      	add	r1, sp, #164	@ 0xa4
 8001fea:	4602      	mov	r2, r0
 8001fec:	a844      	add	r0, sp, #272	@ 0x110
 8001fee:	f7ff fee7 	bl	8001dc0 <f_write_retry>
        f_sync(&fp);
 8001ff2:	a844      	add	r0, sp, #272	@ 0x110
 8001ff4:	f003 fa98 	bl	8005528 <f_sync>
        csv_crt_line_No = 0;
 8001ff8:	4936      	ldr	r1, [pc, #216]	@ (80020d4 <SDCard_Write_log+0x174>)
        AD24C02_Write2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);
 8001ffa:	2050      	movs	r0, #80	@ 0x50
        csv_crt_line_No = 0;
 8001ffc:	800c      	strh	r4, [r1, #0]
        AD24C02_Write2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);
 8001ffe:	f7ff f8ed 	bl	80011dc <AD24C02_Write2Byte>
    case FR_OK://文件存在
    		char write_bf[50];
				LogBuf.No = csv_crt_line_No++;
 8002002:	4c34      	ldr	r4, [pc, #208]	@ (80020d4 <SDCard_Write_log+0x174>)
				Format_GPS_Date(LogBuf.Date,RMC_Result_Data.time,RMC_Result_Data.date);
 8002004:	f20d 31bb 	addw	r1, sp, #955	@ 0x3bb
				LogBuf.No = csv_crt_line_No++;
 8002008:	8823      	ldrh	r3, [r4, #0]
				Format_GPS_Date(LogBuf.Date,RMC_Result_Data.time,RMC_Result_Data.date);
 800200a:	f10d 006a 	add.w	r0, sp, #106	@ 0x6a
				LogBuf.No = csv_crt_line_No++;
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	8022      	strh	r2, [r4, #0]
				Format_GPS_Date(LogBuf.Date,RMC_Result_Data.time,RMC_Result_Data.date);
 8002012:	aafa      	add	r2, sp, #1000	@ 0x3e8
				LogBuf.No = csv_crt_line_No++;
 8002014:	f8ad 3068 	strh.w	r3, [sp, #104]	@ 0x68
				Format_GPS_Date(LogBuf.Date,RMC_Result_Data.time,RMC_Result_Data.date);
 8002018:	f7ff fa68 	bl	80014ec <Format_GPS_Date>
				Format_GPS_Time(LogBuf.Time,RMC_Result_Data.time);
 800201c:	f20d 31bb 	addw	r1, sp, #955	@ 0x3bb
 8002020:	f10d 0075 	add.w	r0, sp, #117	@ 0x75
 8002024:	f7ff fabe 	bl	80015a4 <Format_GPS_Time>
				LogBuf.TreeSN = current_TreeNo;
 8002028:	4b2b      	ldr	r3, [pc, #172]	@ (80020d8 <SDCard_Write_log+0x178>)
				LogBuf.TreeDose = InjectTimes*2;
				FormatLongitude(LogBuf.Lng, GGA_Result_Data.longitude, GGA_Result_Data.lon_dir);
 800202a:	f89d 23a4 	ldrb.w	r2, [sp, #932]	@ 0x3a4
				LogBuf.TreeSN = current_TreeNo;
 800202e:	881b      	ldrh	r3, [r3, #0]
				FormatLongitude(LogBuf.Lng, GGA_Result_Data.longitude, GGA_Result_Data.lon_dir);
 8002030:	a9e6      	add	r1, sp, #920	@ 0x398
				LogBuf.TreeSN = current_TreeNo;
 8002032:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
				LogBuf.TreeDose = InjectTimes*2;
 8002036:	4b29      	ldr	r3, [pc, #164]	@ (80020dc <SDCard_Write_log+0x17c>)
				FormatLongitude(LogBuf.Lng, GGA_Result_Data.longitude, GGA_Result_Data.lon_dir);
 8002038:	a821      	add	r0, sp, #132	@ 0x84
				LogBuf.TreeDose = InjectTimes*2;
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	f8ad 3082 	strh.w	r3, [sp, #130]	@ 0x82
				FormatLongitude(LogBuf.Lng, GGA_Result_Data.longitude, GGA_Result_Data.lon_dir);
 8002042:	f7ff fb4b 	bl	80016dc <FormatLongitude>
				FormatLatitude(LogBuf.Lat, GGA_Result_Data.latitude, GGA_Result_Data.lat_dir);
 8002046:	f89d 2397 	ldrb.w	r2, [sp, #919]	@ 0x397
 800204a:	f20d 318b 	addw	r1, sp, #907	@ 0x38b
 800204e:	f10d 008e 	add.w	r0, sp, #142	@ 0x8e
 8002052:	f7ff fb6d 	bl	8001730 <FormatLatitude>
				FormatAltitude(LogBuf.Alt, GGA_Result_Data.altitude);
 8002056:	98ea      	ldr	r0, [sp, #936]	@ 0x3a8
 8002058:	f7fe f9f0 	bl	800043c <__aeabi_f2d>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	a826      	add	r0, sp, #152	@ 0x98
 8002062:	f7ff fb93 	bl	800178c <FormatAltitude>
				LogBuf.CumDose = total_inject_Dosage;
 8002066:	4b1e      	ldr	r3, [pc, #120]	@ (80020e0 <SDCard_Write_log+0x180>)
				LogBuf.CumQuty = total_Times;

				AD24C02_Write2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);
 8002068:	4621      	mov	r1, r4
				LogBuf.CumDose = total_inject_Dosage;
 800206a:	881b      	ldrh	r3, [r3, #0]
				AD24C02_Write2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);
 800206c:	2050      	movs	r0, #80	@ 0x50
				LogBuf.CumDose = total_inject_Dosage;
 800206e:	f8ad 30a0 	strh.w	r3, [sp, #160]	@ 0xa0
				LogBuf.CumQuty = total_Times;
 8002072:	4b1c      	ldr	r3, [pc, #112]	@ (80020e4 <SDCard_Write_log+0x184>)
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	f8ad 30a2 	strh.w	r3, [sp, #162]	@ 0xa2
				AD24C02_Write2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);
 800207a:	f7ff f8af 	bl	80011dc <AD24C02_Write2Byte>
				printf("\r\n");
 800207e:	481a      	ldr	r0, [pc, #104]	@ (80020e8 <SDCard_Write_log+0x188>)
 8002080:	f00a f9a8 	bl	800c3d4 <puts>

				printf("%04d,",LogBuf.No);//第1列：序号 0001
 8002084:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8002088:	4818      	ldr	r0, [pc, #96]	@ (80020ec <SDCard_Write_log+0x18c>)
 800208a:	f00a f93b 	bl	800c304 <iprintf>
				sprintf(write_bf,"%4d,",LogBuf.No);
 800208e:	f8bd 2068 	ldrh.w	r2, [sp, #104]	@ 0x68
 8002092:	4917      	ldr	r1, [pc, #92]	@ (80020f0 <SDCard_Write_log+0x190>)
 8002094:	a80d      	add	r0, sp, #52	@ 0x34
 8002096:	f00a f9d9 	bl	800c44c <siprintf>
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 800209a:	a80d      	add	r0, sp, #52	@ 0x34
 800209c:	f7fe f862 	bl	8000164 <strlen>
 80020a0:	a90d      	add	r1, sp, #52	@ 0x34
 80020a2:	4602      	mov	r2, r0
 80020a4:	a844      	add	r0, sp, #272	@ 0x110
 80020a6:	f7ff fe8b 	bl	8001dc0 <f_write_retry>
				if (ret != FR_OK) {
 80020aa:	4601      	mov	r1, r0
 80020ac:	b320      	cbz	r0, 80020f8 <SDCard_Write_log+0x198>
//				    printf("Write failed: %d\n", ret);
				    f_close(&fp);
 80020ae:	a844      	add	r0, sp, #272	@ 0x110
 80020b0:	f003 faeb 	bl	800568a <f_close>
      return 1;
 80020b4:	2001      	movs	r0, #1
 80020b6:	e138      	b.n	800232a <SDCard_Write_log+0x3ca>
    	sprintf(file_name_buf,"20250101");
 80020b8:	490e      	ldr	r1, [pc, #56]	@ (80020f4 <SDCard_Write_log+0x194>)
 80020ba:	a808      	add	r0, sp, #32
 80020bc:	f00a fbc9 	bl	800c852 <strcpy>
 80020c0:	e772      	b.n	8001fa8 <SDCard_Write_log+0x48>
 80020c2:	bf00      	nop
 80020c4:	200007c8 	.word	0x200007c8
 80020c8:	20000228 	.word	0x20000228
 80020cc:	0800f17d 	.word	0x0800f17d
 80020d0:	0800f18b 	.word	0x0800f18b
 80020d4:	200007c4 	.word	0x200007c4
 80020d8:	200008c2 	.word	0x200008c2
 80020dc:	20000945 	.word	0x20000945
 80020e0:	20000a50 	.word	0x20000a50
 80020e4:	20000a4e 	.word	0x20000a4e
 80020e8:	0800f1f6 	.word	0x0800f1f6
 80020ec:	0800f1f8 	.word	0x0800f1f8
 80020f0:	0800f1fe 	.word	0x0800f1fe
 80020f4:	0800f174 	.word	0x0800f174
				    return 1;
				}
				memset(write_bf,'\0',sizeof(write_bf));
 80020f8:	2232      	movs	r2, #50	@ 0x32
 80020fa:	a80d      	add	r0, sp, #52	@ 0x34
 80020fc:	f00a faae 	bl	800c65c <memset>

				if(GGA_Result_Data.fix_status == 1){
 8002100:	f89d 33a5 	ldrb.w	r3, [sp, #933]	@ 0x3a5
 8002104:	2b01      	cmp	r3, #1
 8002106:	f040 8116 	bne.w	8002336 <SDCard_Write_log+0x3d6>
					printf("%s,",LogBuf.Date);//第2列：日期 2025/02/25
 800210a:	f10d 016a 	add.w	r1, sp, #106	@ 0x6a
 800210e:	489f      	ldr	r0, [pc, #636]	@ (800238c <SDCard_Write_log+0x42c>)
 8002110:	f00a f8f8 	bl	800c304 <iprintf>
					sprintf(write_bf,"%s,",LogBuf.Date);//第2列：日期 2025/02/25
 8002114:	499d      	ldr	r1, [pc, #628]	@ (800238c <SDCard_Write_log+0x42c>)
 8002116:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 800211a:	a80d      	add	r0, sp, #52	@ 0x34
 800211c:	f00a f996 	bl	800c44c <siprintf>
				}
				else{
					printf("2025/01/01,");//第2列：日期 2025/01/01
					sprintf(write_bf,"2025/01/01,");//第2列：日期 2025/01/01
				}
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 8002120:	a80d      	add	r0, sp, #52	@ 0x34
 8002122:	f7fe f81f 	bl	8000164 <strlen>
 8002126:	a90d      	add	r1, sp, #52	@ 0x34
 8002128:	4602      	mov	r2, r0
 800212a:	a844      	add	r0, sp, #272	@ 0x110
 800212c:	f7ff fe48 	bl	8001dc0 <f_write_retry>
				if (ret != FR_OK) {
 8002130:	4601      	mov	r1, r0
 8002132:	2800      	cmp	r0, #0
 8002134:	d1bb      	bne.n	80020ae <SDCard_Write_log+0x14e>
//				    printf("Write failed: %d\n", ret);
				    f_close(&fp);
				    return 1;
				}
				memset(write_bf,'\0',sizeof(write_bf));
 8002136:	2232      	movs	r2, #50	@ 0x32
 8002138:	a80d      	add	r0, sp, #52	@ 0x34
 800213a:	f00a fa8f 	bl	800c65c <memset>

				if(GGA_Result_Data.fix_status == 1){
 800213e:	f89d 33a5 	ldrb.w	r3, [sp, #933]	@ 0x3a5
 8002142:	2b01      	cmp	r3, #1
 8002144:	f040 80ff 	bne.w	8002346 <SDCard_Write_log+0x3e6>
					printf("%s,",LogBuf.Time);//第3列：时间 18:21:21
 8002148:	f10d 0175 	add.w	r1, sp, #117	@ 0x75
 800214c:	488f      	ldr	r0, [pc, #572]	@ (800238c <SDCard_Write_log+0x42c>)
 800214e:	f00a f8d9 	bl	800c304 <iprintf>
					sprintf(write_bf,"%s,",LogBuf.Time);//第3列：时间 18:21:21
 8002152:	498e      	ldr	r1, [pc, #568]	@ (800238c <SDCard_Write_log+0x42c>)
 8002154:	f10d 0275 	add.w	r2, sp, #117	@ 0x75
 8002158:	a80d      	add	r0, sp, #52	@ 0x34
 800215a:	f00a f977 	bl	800c44c <siprintf>
				}
				else{
					printf("12:00:00,");//第3列：时间 12:00:00
					sprintf(write_bf,"12:00:00,");//第3列：时间 12:00:00
				}
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 800215e:	a80d      	add	r0, sp, #52	@ 0x34
 8002160:	f7fe f800 	bl	8000164 <strlen>
 8002164:	a90d      	add	r1, sp, #52	@ 0x34
 8002166:	4602      	mov	r2, r0
 8002168:	a844      	add	r0, sp, #272	@ 0x110
 800216a:	f7ff fe29 	bl	8001dc0 <f_write_retry>
				if (ret != FR_OK) {
 800216e:	4601      	mov	r1, r0
 8002170:	2800      	cmp	r0, #0
 8002172:	d19c      	bne.n	80020ae <SDCard_Write_log+0x14e>
//				    printf("Write failed: %d\n", ret);
				    f_close(&fp);
				    return 1;
				}
				memset(write_bf,'\0',sizeof(write_bf));
 8002174:	2232      	movs	r2, #50	@ 0x32
 8002176:	a80d      	add	r0, sp, #52	@ 0x34
 8002178:	f00a fa70 	bl	800c65c <memset>

				printf("%04d,",LogBuf.TreeSN);//第4列：序号 0001
 800217c:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8002180:	4883      	ldr	r0, [pc, #524]	@ (8002390 <SDCard_Write_log+0x430>)
 8002182:	f00a f8bf 	bl	800c304 <iprintf>
				sprintf(write_bf,"%4d,",LogBuf.TreeSN);
 8002186:	f8bd 2080 	ldrh.w	r2, [sp, #128]	@ 0x80
 800218a:	4982      	ldr	r1, [pc, #520]	@ (8002394 <SDCard_Write_log+0x434>)
 800218c:	a80d      	add	r0, sp, #52	@ 0x34
 800218e:	f00a f95d 	bl	800c44c <siprintf>
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 8002192:	a80d      	add	r0, sp, #52	@ 0x34
 8002194:	f7fd ffe6 	bl	8000164 <strlen>
 8002198:	a90d      	add	r1, sp, #52	@ 0x34
 800219a:	4602      	mov	r2, r0
 800219c:	a844      	add	r0, sp, #272	@ 0x110
 800219e:	f7ff fe0f 	bl	8001dc0 <f_write_retry>
				if (ret != FR_OK) {
 80021a2:	4601      	mov	r1, r0
 80021a4:	2800      	cmp	r0, #0
 80021a6:	d182      	bne.n	80020ae <SDCard_Write_log+0x14e>
//				    printf("Write failed: %d\n", ret);
				    f_close(&fp);
				    return 1;
				}
				memset(write_bf,'\0',sizeof(write_bf));
 80021a8:	2232      	movs	r2, #50	@ 0x32
 80021aa:	a80d      	add	r0, sp, #52	@ 0x34
 80021ac:	f00a fa56 	bl	800c65c <memset>

				printf("%d,",LogBuf.TreeDose);//第5列：注射剂量 30
 80021b0:	f8bd 1082 	ldrh.w	r1, [sp, #130]	@ 0x82
 80021b4:	4878      	ldr	r0, [pc, #480]	@ (8002398 <SDCard_Write_log+0x438>)
 80021b6:	f00a f8a5 	bl	800c304 <iprintf>
				sprintf(write_bf,"%d,",LogBuf.TreeDose);
 80021ba:	f8bd 2082 	ldrh.w	r2, [sp, #130]	@ 0x82
 80021be:	4976      	ldr	r1, [pc, #472]	@ (8002398 <SDCard_Write_log+0x438>)
 80021c0:	a80d      	add	r0, sp, #52	@ 0x34
 80021c2:	f00a f943 	bl	800c44c <siprintf>
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 80021c6:	a80d      	add	r0, sp, #52	@ 0x34
 80021c8:	f7fd ffcc 	bl	8000164 <strlen>
 80021cc:	a90d      	add	r1, sp, #52	@ 0x34
 80021ce:	4602      	mov	r2, r0
 80021d0:	a844      	add	r0, sp, #272	@ 0x110
 80021d2:	f7ff fdf5 	bl	8001dc0 <f_write_retry>
				if (ret != FR_OK) {
 80021d6:	4601      	mov	r1, r0
 80021d8:	2800      	cmp	r0, #0
 80021da:	f47f af68 	bne.w	80020ae <SDCard_Write_log+0x14e>
//				    printf("Write failed: %d\n", ret);
				    f_close(&fp);
				    return 1;
				}
				memset(write_bf,'\0',sizeof(write_bf));
 80021de:	2232      	movs	r2, #50	@ 0x32
 80021e0:	a80d      	add	r0, sp, #52	@ 0x34
 80021e2:	f00a fa3b 	bl	800c65c <memset>

				if(GGA_Result_Data.fix_status == 1){
 80021e6:	f89d 33a5 	ldrb.w	r3, [sp, #933]	@ 0x3a5
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	f040 80b3 	bne.w	8002356 <SDCard_Write_log+0x3f6>
					printf("%s,",LogBuf.Lng);//第6列：经度 E118°48'
 80021f0:	a921      	add	r1, sp, #132	@ 0x84
 80021f2:	4866      	ldr	r0, [pc, #408]	@ (800238c <SDCard_Write_log+0x42c>)
 80021f4:	f00a f886 	bl	800c304 <iprintf>
					sprintf(write_bf,"%s,",LogBuf.Lng);//第6列：经度 E118°48'
 80021f8:	4964      	ldr	r1, [pc, #400]	@ (800238c <SDCard_Write_log+0x42c>)
 80021fa:	aa21      	add	r2, sp, #132	@ 0x84
 80021fc:	a80d      	add	r0, sp, #52	@ 0x34
 80021fe:	f00a f925 	bl	800c44c <siprintf>
				}
				else{
					printf("E118°48',");//第6列：经度 E118°48'
					sprintf(write_bf,"E118°48',");//第6列：经度 E118°48
				}
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 8002202:	a80d      	add	r0, sp, #52	@ 0x34
 8002204:	f7fd ffae 	bl	8000164 <strlen>
 8002208:	a90d      	add	r1, sp, #52	@ 0x34
 800220a:	4602      	mov	r2, r0
 800220c:	a844      	add	r0, sp, #272	@ 0x110
 800220e:	f7ff fdd7 	bl	8001dc0 <f_write_retry>
				if (ret != FR_OK) {
 8002212:	4601      	mov	r1, r0
 8002214:	2800      	cmp	r0, #0
 8002216:	f47f af4a 	bne.w	80020ae <SDCard_Write_log+0x14e>
//				    printf("Write failed: %d\n", ret);
				    f_close(&fp);
				    return 1;
				}
				memset(write_bf,'\0',sizeof(write_bf));
 800221a:	2232      	movs	r2, #50	@ 0x32
 800221c:	a80d      	add	r0, sp, #52	@ 0x34
 800221e:	f00a fa1d 	bl	800c65c <memset>

				if(GGA_Result_Data.fix_status == 1){
 8002222:	f89d 33a5 	ldrb.w	r3, [sp, #933]	@ 0x3a5
 8002226:	2b01      	cmp	r3, #1
 8002228:	f040 809d 	bne.w	8002366 <SDCard_Write_log+0x406>
					printf("%s,",LogBuf.Lat);//第7列：纬度 N31°50'
 800222c:	f10d 018e 	add.w	r1, sp, #142	@ 0x8e
 8002230:	4856      	ldr	r0, [pc, #344]	@ (800238c <SDCard_Write_log+0x42c>)
 8002232:	f00a f867 	bl	800c304 <iprintf>
					sprintf(write_bf,"%s,",LogBuf.Lat);//第7列：纬度 N31°50'
 8002236:	4955      	ldr	r1, [pc, #340]	@ (800238c <SDCard_Write_log+0x42c>)
 8002238:	f10d 028e 	add.w	r2, sp, #142	@ 0x8e
 800223c:	a80d      	add	r0, sp, #52	@ 0x34
 800223e:	f00a f905 	bl	800c44c <siprintf>
				}
				else{
					printf("N31°50',");//第7列：纬度 N31°50'
					sprintf(write_bf,"N31°50',");//第7列：纬度 N31°50'
				}
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 8002242:	a80d      	add	r0, sp, #52	@ 0x34
 8002244:	f7fd ff8e 	bl	8000164 <strlen>
 8002248:	a90d      	add	r1, sp, #52	@ 0x34
 800224a:	4602      	mov	r2, r0
 800224c:	a844      	add	r0, sp, #272	@ 0x110
 800224e:	f7ff fdb7 	bl	8001dc0 <f_write_retry>
				if (ret != FR_OK) {
 8002252:	4601      	mov	r1, r0
 8002254:	2800      	cmp	r0, #0
 8002256:	f47f af2a 	bne.w	80020ae <SDCard_Write_log+0x14e>
//				    printf("Write failed: %d\n", ret);
				    f_close(&fp);
				    return 1;
				}
				memset(write_bf,'\0',sizeof(write_bf));
 800225a:	2232      	movs	r2, #50	@ 0x32
 800225c:	a80d      	add	r0, sp, #52	@ 0x34
 800225e:	f00a f9fd 	bl	800c65c <memset>

				if(GGA_Result_Data.fix_status == 1){
 8002262:	f89d 33a5 	ldrb.w	r3, [sp, #933]	@ 0x3a5
 8002266:	2b01      	cmp	r3, #1
 8002268:	f040 8085 	bne.w	8002376 <SDCard_Write_log+0x416>
					printf("%s,",LogBuf.Alt);//第8列：海拔 88.9
 800226c:	a926      	add	r1, sp, #152	@ 0x98
 800226e:	4847      	ldr	r0, [pc, #284]	@ (800238c <SDCard_Write_log+0x42c>)
 8002270:	f00a f848 	bl	800c304 <iprintf>
					sprintf(write_bf,"%s,",LogBuf.Alt);//第8列：海拔 88.9
 8002274:	4945      	ldr	r1, [pc, #276]	@ (800238c <SDCard_Write_log+0x42c>)
 8002276:	aa26      	add	r2, sp, #152	@ 0x98
 8002278:	a80d      	add	r0, sp, #52	@ 0x34
 800227a:	f00a f8e7 	bl	800c44c <siprintf>
				}
				else{
					printf("88.9,");//第8列：海拔 88.9
					sprintf(write_bf,"88.9,");//第8列：海拔 88.9
				}
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 800227e:	a80d      	add	r0, sp, #52	@ 0x34
 8002280:	f7fd ff70 	bl	8000164 <strlen>
 8002284:	a90d      	add	r1, sp, #52	@ 0x34
 8002286:	4602      	mov	r2, r0
 8002288:	a844      	add	r0, sp, #272	@ 0x110
 800228a:	f7ff fd99 	bl	8001dc0 <f_write_retry>
				if (ret != FR_OK) {
 800228e:	4601      	mov	r1, r0
 8002290:	2800      	cmp	r0, #0
 8002292:	f47f af0c 	bne.w	80020ae <SDCard_Write_log+0x14e>
//				    printf("Write failed: %d\n", ret);
				    f_close(&fp);
				    return 1;
				}
				memset(write_bf,'\0',sizeof(write_bf));
 8002296:	2232      	movs	r2, #50	@ 0x32
 8002298:	a80d      	add	r0, sp, #52	@ 0x34
 800229a:	f00a f9df 	bl	800c65c <memset>

				printf("%d,",LogBuf.CumDose);//第9列，累计剂量 892
 800229e:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	@ 0xa0
 80022a2:	483d      	ldr	r0, [pc, #244]	@ (8002398 <SDCard_Write_log+0x438>)
 80022a4:	f00a f82e 	bl	800c304 <iprintf>
				sprintf(write_bf,"%d,",LogBuf.CumDose);
 80022a8:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	@ 0xa0
 80022ac:	493a      	ldr	r1, [pc, #232]	@ (8002398 <SDCard_Write_log+0x438>)
 80022ae:	a80d      	add	r0, sp, #52	@ 0x34
 80022b0:	f00a f8cc 	bl	800c44c <siprintf>
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 80022b4:	a80d      	add	r0, sp, #52	@ 0x34
 80022b6:	f7fd ff55 	bl	8000164 <strlen>
 80022ba:	a90d      	add	r1, sp, #52	@ 0x34
 80022bc:	4602      	mov	r2, r0
 80022be:	a844      	add	r0, sp, #272	@ 0x110
 80022c0:	f7ff fd7e 	bl	8001dc0 <f_write_retry>
				if (ret != FR_OK) {
 80022c4:	4601      	mov	r1, r0
 80022c6:	2800      	cmp	r0, #0
 80022c8:	f47f aef1 	bne.w	80020ae <SDCard_Write_log+0x14e>
//				    printf("Write failed: %d\n", ret);
				    f_close(&fp);
				    return 1;
				}
				memset(write_bf,'\0',sizeof(write_bf));
 80022cc:	2232      	movs	r2, #50	@ 0x32
 80022ce:	a80d      	add	r0, sp, #52	@ 0x34
 80022d0:	f00a f9c4 	bl	800c65c <memset>

				printf("%d\r\n",LogBuf.CumQuty);//第10列，累计数量 112
 80022d4:	f8bd 10a2 	ldrh.w	r1, [sp, #162]	@ 0xa2
 80022d8:	4830      	ldr	r0, [pc, #192]	@ (800239c <SDCard_Write_log+0x43c>)
 80022da:	f00a f813 	bl	800c304 <iprintf>
				sprintf(write_bf,"%d\r\n",LogBuf.CumQuty);
 80022de:	f8bd 20a2 	ldrh.w	r2, [sp, #162]	@ 0xa2
 80022e2:	492e      	ldr	r1, [pc, #184]	@ (800239c <SDCard_Write_log+0x43c>)
 80022e4:	a80d      	add	r0, sp, #52	@ 0x34
 80022e6:	f00a f8b1 	bl	800c44c <siprintf>
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 80022ea:	a80d      	add	r0, sp, #52	@ 0x34
 80022ec:	f7fd ff3a 	bl	8000164 <strlen>
 80022f0:	a90d      	add	r1, sp, #52	@ 0x34
 80022f2:	4602      	mov	r2, r0
 80022f4:	a844      	add	r0, sp, #272	@ 0x110
 80022f6:	f7ff fd63 	bl	8001dc0 <f_write_retry>
				if (ret != FR_OK) {
 80022fa:	4601      	mov	r1, r0
 80022fc:	2800      	cmp	r0, #0
 80022fe:	f47f aed6 	bne.w	80020ae <SDCard_Write_log+0x14e>
//				    printf("Write failed: %d\n", ret);
				    f_close(&fp);
				    return 1;
				}
				memset(write_bf,'\0',sizeof(write_bf));
 8002302:	2232      	movs	r2, #50	@ 0x32
 8002304:	a80d      	add	r0, sp, #52	@ 0x34
 8002306:	f00a f9a9 	bl	800c65c <memset>

				f_sync(&fp);
 800230a:	a844      	add	r0, sp, #272	@ 0x110
 800230c:	f003 f90c 	bl	8005528 <f_sync>

        ret = f_close(&fp);
 8002310:	a844      	add	r0, sp, #272	@ 0x110
 8002312:	f003 f9ba 	bl	800568a <f_close>
        if(ret != FR_OK)
 8002316:	2800      	cmp	r0, #0
 8002318:	f47f aecc 	bne.w	80020b4 <SDCard_Write_log+0x154>
        {
//        	printf("f_close fail:%d\r\n", ret);
          return 1;
        }else{
        	sprintf(Tx_Buffer,"Main.t0.txt=\"SDCard write success！\"\xff\xff\xff");
 800231c:	4920      	ldr	r1, [pc, #128]	@ (80023a0 <SDCard_Write_log+0x440>)
 800231e:	4821      	ldr	r0, [pc, #132]	@ (80023a4 <SDCard_Write_log+0x444>)
 8002320:	f00a fa97 	bl	800c852 <strcpy>
        	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002324:	481f      	ldr	r0, [pc, #124]	@ (80023a4 <SDCard_Write_log+0x444>)
 8002326:	f005 ff5d 	bl	80081e4 <USART1_Tx_HMIdata>
	}
	else
	{
		return -1;//没发现SDCard
	}
}
 800232a:	f50d 7d5b 	add.w	sp, sp, #876	@ 0x36c
 800232e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002332:	b004      	add	sp, #16
 8002334:	4770      	bx	lr
					printf("2025/01/01,");//第2列：日期 2025/01/01
 8002336:	481c      	ldr	r0, [pc, #112]	@ (80023a8 <SDCard_Write_log+0x448>)
 8002338:	f009 ffe4 	bl	800c304 <iprintf>
					sprintf(write_bf,"2025/01/01,");//第2列：日期 2025/01/01
 800233c:	491a      	ldr	r1, [pc, #104]	@ (80023a8 <SDCard_Write_log+0x448>)
 800233e:	a80d      	add	r0, sp, #52	@ 0x34
 8002340:	f00a fa87 	bl	800c852 <strcpy>
 8002344:	e6ec      	b.n	8002120 <SDCard_Write_log+0x1c0>
					printf("12:00:00,");//第3列：时间 12:00:00
 8002346:	4819      	ldr	r0, [pc, #100]	@ (80023ac <SDCard_Write_log+0x44c>)
 8002348:	f009 ffdc 	bl	800c304 <iprintf>
					sprintf(write_bf,"12:00:00,");//第3列：时间 12:00:00
 800234c:	4917      	ldr	r1, [pc, #92]	@ (80023ac <SDCard_Write_log+0x44c>)
 800234e:	a80d      	add	r0, sp, #52	@ 0x34
 8002350:	f00a fa7f 	bl	800c852 <strcpy>
 8002354:	e703      	b.n	800215e <SDCard_Write_log+0x1fe>
					printf("E118°48',");//第6列：经度 E118°48'
 8002356:	4816      	ldr	r0, [pc, #88]	@ (80023b0 <SDCard_Write_log+0x450>)
 8002358:	f009 ffd4 	bl	800c304 <iprintf>
					sprintf(write_bf,"E118°48',");//第6列：经度 E118°48
 800235c:	4914      	ldr	r1, [pc, #80]	@ (80023b0 <SDCard_Write_log+0x450>)
 800235e:	a80d      	add	r0, sp, #52	@ 0x34
 8002360:	f00a fa77 	bl	800c852 <strcpy>
 8002364:	e74d      	b.n	8002202 <SDCard_Write_log+0x2a2>
					printf("N31°50',");//第7列：纬度 N31°50'
 8002366:	4813      	ldr	r0, [pc, #76]	@ (80023b4 <SDCard_Write_log+0x454>)
 8002368:	f009 ffcc 	bl	800c304 <iprintf>
					sprintf(write_bf,"N31°50',");//第7列：纬度 N31°50'
 800236c:	4911      	ldr	r1, [pc, #68]	@ (80023b4 <SDCard_Write_log+0x454>)
 800236e:	a80d      	add	r0, sp, #52	@ 0x34
 8002370:	f00a fa6f 	bl	800c852 <strcpy>
 8002374:	e765      	b.n	8002242 <SDCard_Write_log+0x2e2>
					printf("88.9,");//第8列：海拔 88.9
 8002376:	4810      	ldr	r0, [pc, #64]	@ (80023b8 <SDCard_Write_log+0x458>)
 8002378:	f009 ffc4 	bl	800c304 <iprintf>
					sprintf(write_bf,"88.9,");//第8列：海拔 88.9
 800237c:	490e      	ldr	r1, [pc, #56]	@ (80023b8 <SDCard_Write_log+0x458>)
 800237e:	a80d      	add	r0, sp, #52	@ 0x34
 8002380:	f00a fa67 	bl	800c852 <strcpy>
 8002384:	e77b      	b.n	800227e <SDCard_Write_log+0x31e>
		return -1;//没发现SDCard
 8002386:	f04f 30ff 	mov.w	r0, #4294967295
 800238a:	e7ce      	b.n	800232a <SDCard_Write_log+0x3ca>
 800238c:	0800f203 	.word	0x0800f203
 8002390:	0800f1f8 	.word	0x0800f1f8
 8002394:	0800f1fe 	.word	0x0800f1fe
 8002398:	0800f21d 	.word	0x0800f21d
 800239c:	0800f23c 	.word	0x0800f23c
 80023a0:	0800f241 	.word	0x0800f241
 80023a4:	20000b8e 	.word	0x20000b8e
 80023a8:	0800f207 	.word	0x0800f207
 80023ac:	0800f213 	.word	0x0800f213
 80023b0:	0800f221 	.word	0x0800f221
 80023b4:	0800f22c 	.word	0x0800f22c
 80023b8:	0800f236 	.word	0x0800f236

080023bc <SD_WriteByte>:
//  /*!< Return the byte read from the SPI bus */
//  return SPI_I2S_ReceiveData(SD_SPI);
//}

// SPI单字节传输
uint8_t SD_WriteByte(uint8_t data) {
 80023bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t rx;
  HAL_SPI_TransmitReceive(&hspi1, &data, &rx, 1, 100);
 80023be:	2364      	movs	r3, #100	@ 0x64
uint8_t SD_WriteByte(uint8_t data) {
 80023c0:	f88d 000f 	strb.w	r0, [sp, #15]
  HAL_SPI_TransmitReceive(&hspi1, &data, &rx, 1, 100);
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	f10d 0217 	add.w	r2, sp, #23
 80023ca:	2301      	movs	r3, #1
 80023cc:	f10d 010f 	add.w	r1, sp, #15
 80023d0:	4803      	ldr	r0, [pc, #12]	@ (80023e0 <SD_WriteByte+0x24>)
 80023d2:	f007 fa4f 	bl	8009874 <HAL_SPI_TransmitReceive>
  return rx;
}
 80023d6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80023da:	b007      	add	sp, #28
 80023dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80023e0:	20000948 	.word	0x20000948

080023e4 <SD_SendCmd>:
{
 80023e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  for (i = 0; i < 6; i++)
 80023e6:	2400      	movs	r4, #0
 80023e8:	466d      	mov	r5, sp
  Frame[1] = (uint8_t)(Arg >> 24); /*!< Construct byte 2 */
 80023ea:	0e0b      	lsrs	r3, r1, #24
 80023ec:	f88d 3001 	strb.w	r3, [sp, #1]
  Frame[2] = (uint8_t)(Arg >> 16); /*!< Construct byte 3 */
 80023f0:	0c0b      	lsrs	r3, r1, #16
  Frame[0] = (Cmd | 0x40); /*!< Construct byte 1 */
 80023f2:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
  Frame[2] = (uint8_t)(Arg >> 16); /*!< Construct byte 3 */
 80023f6:	f88d 3002 	strb.w	r3, [sp, #2]
  Frame[3] = (uint8_t)(Arg >> 8); /*!< Construct byte 4 */
 80023fa:	0a0b      	lsrs	r3, r1, #8
  Frame[0] = (Cmd | 0x40); /*!< Construct byte 1 */
 80023fc:	f88d 0000 	strb.w	r0, [sp]
  Frame[3] = (uint8_t)(Arg >> 8); /*!< Construct byte 4 */
 8002400:	f88d 3003 	strb.w	r3, [sp, #3]
  Frame[4] = (uint8_t)(Arg); /*!< Construct byte 5 */
 8002404:	f88d 1004 	strb.w	r1, [sp, #4]
  Frame[5] = (Crc); /*!< Construct CRC: byte 6 */
 8002408:	f88d 2005 	strb.w	r2, [sp, #5]
    SD_WriteByte(Frame[i]); /*!< Send the Cmd bytes */
 800240c:	f815 0b01 	ldrb.w	r0, [r5], #1
  for (i = 0; i < 6; i++)
 8002410:	3401      	adds	r4, #1
    SD_WriteByte(Frame[i]); /*!< Send the Cmd bytes */
 8002412:	f7ff ffd3 	bl	80023bc <SD_WriteByte>
  for (i = 0; i < 6; i++)
 8002416:	2c06      	cmp	r4, #6
 8002418:	d1f8      	bne.n	800240c <SD_SendCmd+0x28>
}
 800241a:	b003      	add	sp, #12
 800241c:	bd30      	pop	{r4, r5, pc}

0800241e <SD_ReadByte>:
  */
uint8_t SD_ReadByte(void)
{
  uint8_t Data = 0;

  Data = SD_WriteByte(SD_DUMMY_BYTE);
 800241e:	20ff      	movs	r0, #255	@ 0xff
 8002420:	f7ff bfcc 	b.w	80023bc <SD_WriteByte>

08002424 <SD_GetDataResponse>:
{
 8002424:	b538      	push	{r3, r4, r5, lr}
 8002426:	2541      	movs	r5, #65	@ 0x41
    response = SD_ReadByte();
 8002428:	f7ff fff9 	bl	800241e <SD_ReadByte>
    response &= 0x1F;
 800242c:	f000 041f 	and.w	r4, r0, #31
    switch (response)
 8002430:	2c0b      	cmp	r4, #11
 8002432:	d009      	beq.n	8002448 <SD_GetDataResponse+0x24>
 8002434:	2c0d      	cmp	r4, #13
 8002436:	d007      	beq.n	8002448 <SD_GetDataResponse+0x24>
 8002438:	2c05      	cmp	r4, #5
 800243a:	d001      	beq.n	8002440 <SD_GetDataResponse+0x1c>
  while (i <= 64)
 800243c:	3d01      	subs	r5, #1
 800243e:	d1f3      	bne.n	8002428 <SD_GetDataResponse+0x4>
  while (SD_ReadByte() == 0);
 8002440:	f7ff ffed 	bl	800241e <SD_ReadByte>
 8002444:	2800      	cmp	r0, #0
 8002446:	d0fb      	beq.n	8002440 <SD_GetDataResponse+0x1c>
}
 8002448:	4620      	mov	r0, r4
 800244a:	bd38      	pop	{r3, r4, r5, pc}

0800244c <SD_GetResponse>:
{
 800244c:	b538      	push	{r3, r4, r5, lr}
 800244e:	4605      	mov	r5, r0
  uint32_t Count = 0xFFF;
 8002450:	f640 74ff 	movw	r4, #4095	@ 0xfff
  while ((SD_ReadByte() != Response) && Count)
 8002454:	f7ff ffe3 	bl	800241e <SD_ReadByte>
 8002458:	42a8      	cmp	r0, r5
 800245a:	d000      	beq.n	800245e <SD_GetResponse+0x12>
 800245c:	b92c      	cbnz	r4, 800246a <SD_GetResponse+0x1e>
  if (Count == 0)
 800245e:	fab4 f484 	clz	r4, r4
 8002462:	0964      	lsrs	r4, r4, #5
 8002464:	4264      	negs	r4, r4
}
 8002466:	b2e0      	uxtb	r0, r4
 8002468:	bd38      	pop	{r3, r4, r5, pc}
    Count--;
 800246a:	3c01      	subs	r4, #1
 800246c:	e7f2      	b.n	8002454 <SD_GetResponse+0x8>
	...

08002470 <SD_GoIdleState>:
{
 8002470:	b510      	push	{r4, lr}
  SD_CS_LOW();
 8002472:	2200      	movs	r2, #0
 8002474:	2110      	movs	r1, #16
 8002476:	480c      	ldr	r0, [pc, #48]	@ (80024a8 <SD_GoIdleState+0x38>)
 8002478:	f006 fdbc 	bl	8008ff4 <HAL_GPIO_WritePin>
  SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95);
 800247c:	2100      	movs	r1, #0
 800247e:	2295      	movs	r2, #149	@ 0x95
 8002480:	4608      	mov	r0, r1
 8002482:	f7ff ffaf 	bl	80023e4 <SD_SendCmd>
  if (SD_GetResponse(SD_IN_IDLE_STATE))
 8002486:	2001      	movs	r0, #1
 8002488:	f7ff ffe0 	bl	800244c <SD_GetResponse>
 800248c:	4604      	mov	r4, r0
 800248e:	b948      	cbnz	r0, 80024a4 <SD_GoIdleState+0x34>
	SD_CS_HIGH();
 8002490:	4805      	ldr	r0, [pc, #20]	@ (80024a8 <SD_GoIdleState+0x38>)
 8002492:	2201      	movs	r2, #1
 8002494:	2110      	movs	r1, #16
 8002496:	f006 fdad 	bl	8008ff4 <HAL_GPIO_WritePin>
	SD_WriteByte(SD_DUMMY_BYTE);
 800249a:	20ff      	movs	r0, #255	@ 0xff
 800249c:	f7ff ff8e 	bl	80023bc <SD_WriteByte>
}
 80024a0:	4620      	mov	r0, r4
 80024a2:	bd10      	pop	{r4, pc}
    return SD_RESPONSE_FAILURE;
 80024a4:	24ff      	movs	r4, #255	@ 0xff
 80024a6:	e7fb      	b.n	80024a0 <SD_GoIdleState+0x30>
 80024a8:	40010800 	.word	0x40010800

080024ac <SD_ReadMultiBlocks>:
{
 80024ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024b0:	4615      	mov	r5, r2
	if (SD_Type == SD_TYPE_V2HC)
 80024b2:	4a24      	ldr	r2, [pc, #144]	@ (8002544 <SD_ReadMultiBlocks+0x98>)
{
 80024b4:	4606      	mov	r6, r0
	if (SD_Type == SD_TYPE_V2HC)
 80024b6:	7812      	ldrb	r2, [r2, #0]
  SD_CS_LOW();
 80024b8:	2110      	movs	r1, #16
	if (SD_Type == SD_TYPE_V2HC)
 80024ba:	2a04      	cmp	r2, #4
    ReadAddr /= 512;
 80024bc:	bf08      	it	eq
 80024be:	0a6d      	lsreq	r5, r5, #9
  SD_CS_LOW();
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	4820      	ldr	r0, [pc, #128]	@ (8002548 <SD_ReadMultiBlocks+0x9c>)
{
 80024c6:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 80024ca:	9f09      	ldr	r7, [sp, #36]	@ 0x24
    BlockSize = 512;
 80024cc:	bf04      	itt	eq
 80024ce:	f44f 7900 	moveq.w	r9, #512	@ 0x200
    ReadAddr /= 512;
 80024d2:	ea45 55c3 	orreq.w	r5, r5, r3, lsl #23
  SD_Error rvalue = SD_RESPONSE_FAILURE;
 80024d6:	24ff      	movs	r4, #255	@ 0xff
  SD_CS_LOW();
 80024d8:	f006 fd8c 	bl	8008ff4 <HAL_GPIO_WritePin>
  uint32_t i = 0, Offset = 0;
 80024dc:	f04f 0800 	mov.w	r8, #0
  while (NumberOfBlocks--)
 80024e0:	b957      	cbnz	r7, 80024f8 <SD_ReadMultiBlocks+0x4c>
  SD_CS_HIGH();
 80024e2:	4819      	ldr	r0, [pc, #100]	@ (8002548 <SD_ReadMultiBlocks+0x9c>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	2110      	movs	r1, #16
 80024e8:	f006 fd84 	bl	8008ff4 <HAL_GPIO_WritePin>
  SD_WriteByte(SD_DUMMY_BYTE);
 80024ec:	20ff      	movs	r0, #255	@ 0xff
 80024ee:	f7ff ff65 	bl	80023bc <SD_WriteByte>
}
 80024f2:	4620      	mov	r0, r4
 80024f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SD_SendCmd (SD_CMD_READ_SINGLE_BLOCK, ReadAddr + Offset, 0xFF);
 80024f8:	2011      	movs	r0, #17
 80024fa:	22ff      	movs	r2, #255	@ 0xff
 80024fc:	eb08 0105 	add.w	r1, r8, r5
 8002500:	f7ff ff70 	bl	80023e4 <SD_SendCmd>
    if (SD_GetResponse(SD_RESPONSE_NO_ERROR))
 8002504:	2000      	movs	r0, #0
 8002506:	f7ff ffa1 	bl	800244c <SD_GetResponse>
 800250a:	b9c8      	cbnz	r0, 8002540 <SD_ReadMultiBlocks+0x94>
    if (!SD_GetResponse(SD_START_DATA_SINGLE_BLOCK_READ))
 800250c:	20fe      	movs	r0, #254	@ 0xfe
 800250e:	f7ff ff9d 	bl	800244c <SD_GetResponse>
 8002512:	4604      	mov	r4, r0
 8002514:	b990      	cbnz	r0, 800253c <SD_ReadMultiBlocks+0x90>
 8002516:	eb06 0a09 	add.w	sl, r6, r9
      for (i = 0; i < BlockSize; i++)
 800251a:	4556      	cmp	r6, sl
 800251c:	d109      	bne.n	8002532 <SD_ReadMultiBlocks+0x86>
      Offset += BlockSize;
 800251e:	44c8      	add	r8, r9
      SD_ReadByte();
 8002520:	f7ff ff7d 	bl	800241e <SD_ReadByte>
      SD_ReadByte();
 8002524:	f7ff ff7b 	bl	800241e <SD_ReadByte>
    SD_WriteByte(SD_DUMMY_BYTE);
 8002528:	20ff      	movs	r0, #255	@ 0xff
 800252a:	f7ff ff47 	bl	80023bc <SD_WriteByte>
 800252e:	3f01      	subs	r7, #1
 8002530:	e7d6      	b.n	80024e0 <SD_ReadMultiBlocks+0x34>
        *pBuffer = SD_ReadByte();
 8002532:	f7ff ff74 	bl	800241e <SD_ReadByte>
 8002536:	f806 0b01 	strb.w	r0, [r6], #1
      for (i = 0; i < BlockSize; i++)
 800253a:	e7ee      	b.n	800251a <SD_ReadMultiBlocks+0x6e>
      rvalue = SD_RESPONSE_FAILURE;
 800253c:	24ff      	movs	r4, #255	@ 0xff
 800253e:	e7f3      	b.n	8002528 <SD_ReadMultiBlocks+0x7c>
      return  SD_RESPONSE_FAILURE;
 8002540:	24ff      	movs	r4, #255	@ 0xff
 8002542:	e7d6      	b.n	80024f2 <SD_ReadMultiBlocks+0x46>
 8002544:	20000828 	.word	0x20000828
 8002548:	40010800 	.word	0x40010800

0800254c <SD_WriteMultiBlocks>:
{
 800254c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002550:	4615      	mov	r5, r2
	if (SD_Type == SD_TYPE_V2HC)
 8002552:	4a25      	ldr	r2, [pc, #148]	@ (80025e8 <SD_WriteMultiBlocks+0x9c>)
{
 8002554:	4606      	mov	r6, r0
	if (SD_Type == SD_TYPE_V2HC)
 8002556:	7812      	ldrb	r2, [r2, #0]
  SD_CS_LOW();
 8002558:	2110      	movs	r1, #16
	if (SD_Type == SD_TYPE_V2HC)
 800255a:	2a04      	cmp	r2, #4
    WriteAddr /= 512;
 800255c:	bf08      	it	eq
 800255e:	0a6d      	lsreq	r5, r5, #9
  SD_CS_LOW();
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	4821      	ldr	r0, [pc, #132]	@ (80025ec <SD_WriteMultiBlocks+0xa0>)
{
 8002566:	f8bd 8018 	ldrh.w	r8, [sp, #24]
    WriteAddr /= 512;
 800256a:	bf04      	itt	eq
 800256c:	ea45 55c3 	orreq.w	r5, r5, r3, lsl #23
    BlockSize = 512;
 8002570:	f44f 7800 	moveq.w	r8, #512	@ 0x200
{
 8002574:	9f07      	ldr	r7, [sp, #28]
  SD_Error rvalue = SD_RESPONSE_FAILURE;
 8002576:	24ff      	movs	r4, #255	@ 0xff
  SD_CS_LOW();
 8002578:	f006 fd3c 	bl	8008ff4 <HAL_GPIO_WritePin>
    SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, WriteAddr + Offset, 0xFF);
 800257c:	1bad      	subs	r5, r5, r6
  while (NumberOfBlocks--)
 800257e:	b957      	cbnz	r7, 8002596 <SD_WriteMultiBlocks+0x4a>
  SD_CS_HIGH();
 8002580:	481a      	ldr	r0, [pc, #104]	@ (80025ec <SD_WriteMultiBlocks+0xa0>)
 8002582:	2201      	movs	r2, #1
 8002584:	2110      	movs	r1, #16
 8002586:	f006 fd35 	bl	8008ff4 <HAL_GPIO_WritePin>
  SD_WriteByte(SD_DUMMY_BYTE);
 800258a:	20ff      	movs	r0, #255	@ 0xff
 800258c:	f7ff ff16 	bl	80023bc <SD_WriteByte>
}
 8002590:	4620      	mov	r0, r4
 8002592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, WriteAddr + Offset, 0xFF);
 8002596:	2018      	movs	r0, #24
 8002598:	22ff      	movs	r2, #255	@ 0xff
 800259a:	1971      	adds	r1, r6, r5
 800259c:	f7ff ff22 	bl	80023e4 <SD_SendCmd>
    if (SD_GetResponse(SD_RESPONSE_NO_ERROR))
 80025a0:	2000      	movs	r0, #0
 80025a2:	f7ff ff53 	bl	800244c <SD_GetResponse>
 80025a6:	b9e0      	cbnz	r0, 80025e2 <SD_WriteMultiBlocks+0x96>
    SD_WriteByte(SD_DUMMY_BYTE);
 80025a8:	20ff      	movs	r0, #255	@ 0xff
 80025aa:	f7ff ff07 	bl	80023bc <SD_WriteByte>
    SD_WriteByte(SD_START_DATA_SINGLE_BLOCK_WRITE);
 80025ae:	20fe      	movs	r0, #254	@ 0xfe
 80025b0:	f7ff ff04 	bl	80023bc <SD_WriteByte>
    for (i = 0; i < BlockSize; i++)
 80025b4:	4634      	mov	r4, r6
 80025b6:	4446      	add	r6, r8
 80025b8:	42b4      	cmp	r4, r6
 80025ba:	d10d      	bne.n	80025d8 <SD_WriteMultiBlocks+0x8c>
    SD_ReadByte();
 80025bc:	f7ff ff2f 	bl	800241e <SD_ReadByte>
    SD_ReadByte();
 80025c0:	f7ff ff2d 	bl	800241e <SD_ReadByte>
    if (SD_GetDataResponse() == SD_DATA_OK)
 80025c4:	f7ff ff2e 	bl	8002424 <SD_GetDataResponse>
 80025c8:	4626      	mov	r6, r4
 80025ca:	1f44      	subs	r4, r0, #5
 80025cc:	bf18      	it	ne
 80025ce:	f04f 34ff 	movne.w	r4, #4294967295
 80025d2:	3f01      	subs	r7, #1
 80025d4:	b2e4      	uxtb	r4, r4
 80025d6:	e7d2      	b.n	800257e <SD_WriteMultiBlocks+0x32>
      SD_WriteByte(*pBuffer);
 80025d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80025dc:	f7ff feee 	bl	80023bc <SD_WriteByte>
    for (i = 0; i < BlockSize; i++)
 80025e0:	e7ea      	b.n	80025b8 <SD_WriteMultiBlocks+0x6c>
      return SD_RESPONSE_FAILURE;
 80025e2:	24ff      	movs	r4, #255	@ 0xff
 80025e4:	e7d4      	b.n	8002590 <SD_WriteMultiBlocks+0x44>
 80025e6:	bf00      	nop
 80025e8:	20000828 	.word	0x20000828
 80025ec:	40010800 	.word	0x40010800

080025f0 <SD_GetCSDRegister>:
{
 80025f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  SD_CS_LOW();
 80025f2:	2200      	movs	r2, #0
{
 80025f4:	b085      	sub	sp, #20
  SD_CS_LOW();
 80025f6:	2110      	movs	r1, #16
{
 80025f8:	4604      	mov	r4, r0
  SD_CS_LOW();
 80025fa:	4879      	ldr	r0, [pc, #484]	@ (80027e0 <SD_GetCSDRegister+0x1f0>)
 80025fc:	f006 fcfa 	bl	8008ff4 <HAL_GPIO_WritePin>
  SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF);
 8002600:	22ff      	movs	r2, #255	@ 0xff
 8002602:	2100      	movs	r1, #0
 8002604:	2009      	movs	r0, #9
 8002606:	f7ff feed 	bl	80023e4 <SD_SendCmd>
  if (!SD_GetResponse(SD_RESPONSE_NO_ERROR))
 800260a:	2000      	movs	r0, #0
 800260c:	f7ff ff1e 	bl	800244c <SD_GetResponse>
 8002610:	4605      	mov	r5, r0
 8002612:	2800      	cmp	r0, #0
 8002614:	f040 80cd 	bne.w	80027b2 <SD_GetCSDRegister+0x1c2>
    if (!SD_GetResponse(SD_START_DATA_SINGLE_BLOCK_READ))
 8002618:	20fe      	movs	r0, #254	@ 0xfe
 800261a:	f7ff ff17 	bl	800244c <SD_GetResponse>
 800261e:	2800      	cmp	r0, #0
 8002620:	f000 80bd 	beq.w	800279e <SD_GetCSDRegister+0x1ae>
    SD_WriteByte(SD_DUMMY_BYTE);
 8002624:	20ff      	movs	r0, #255	@ 0xff
 8002626:	f7ff fec9 	bl	80023bc <SD_WriteByte>
    SD_WriteByte(SD_DUMMY_BYTE);
 800262a:	20ff      	movs	r0, #255	@ 0xff
 800262c:	f7ff fec6 	bl	80023bc <SD_WriteByte>
  SD_CS_HIGH();
 8002630:	2201      	movs	r2, #1
 8002632:	2110      	movs	r1, #16
 8002634:	486a      	ldr	r0, [pc, #424]	@ (80027e0 <SD_GetCSDRegister+0x1f0>)
 8002636:	f006 fcdd 	bl	8008ff4 <HAL_GPIO_WritePin>
  SD_WriteByte(SD_DUMMY_BYTE);
 800263a:	20ff      	movs	r0, #255	@ 0xff
 800263c:	f7ff febe 	bl	80023bc <SD_WriteByte>
  SD_csd->CSDStruct = (CSD_Tab[0] & 0xC0) >> 6;
 8002640:	f89d 3000 	ldrb.w	r3, [sp]
 8002644:	099a      	lsrs	r2, r3, #6
 8002646:	7022      	strb	r2, [r4, #0]
  SD_csd->SysSpecVersion = (CSD_Tab[0] & 0x3C) >> 2;
 8002648:	f3c3 0283 	ubfx	r2, r3, #2, #4
  SD_csd->Reserved1 = CSD_Tab[0] & 0x03;
 800264c:	f003 0303 	and.w	r3, r3, #3
  SD_csd->SysSpecVersion = (CSD_Tab[0] & 0x3C) >> 2;
 8002650:	7062      	strb	r2, [r4, #1]
  SD_csd->Reserved1 = CSD_Tab[0] & 0x03;
 8002652:	70a3      	strb	r3, [r4, #2]
  SD_csd->TAAC = CSD_Tab[1];
 8002654:	f89d 3001 	ldrb.w	r3, [sp, #1]
  SD_csd->CardComdClasses |= (CSD_Tab[5] & 0xF0) >> 4;
 8002658:	f89d 2005 	ldrb.w	r2, [sp, #5]
  SD_csd->TAAC = CSD_Tab[1];
 800265c:	70e3      	strb	r3, [r4, #3]
  SD_csd->NSAC = CSD_Tab[2];
 800265e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002662:	7123      	strb	r3, [r4, #4]
  SD_csd->MaxBusClkFrec = CSD_Tab[3];
 8002664:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002668:	7163      	strb	r3, [r4, #5]
  SD_csd->CardComdClasses = CSD_Tab[4] << 4;
 800266a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	80e3      	strh	r3, [r4, #6]
  SD_csd->CardComdClasses |= (CSD_Tab[5] & 0xF0) >> 4;
 8002672:	88e3      	ldrh	r3, [r4, #6]
 8002674:	b29b      	uxth	r3, r3
 8002676:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 800267a:	80e3      	strh	r3, [r4, #6]
  SD_csd->PartBlockRead = (CSD_Tab[6] & 0x80) >> 7;
 800267c:	f89d 3006 	ldrb.w	r3, [sp, #6]
  SD_csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 8002680:	f002 020f 	and.w	r2, r2, #15
 8002684:	7222      	strb	r2, [r4, #8]
  SD_csd->PartBlockRead = (CSD_Tab[6] & 0x80) >> 7;
 8002686:	09da      	lsrs	r2, r3, #7
 8002688:	7262      	strb	r2, [r4, #9]
  SD_csd->WrBlockMisalign = (CSD_Tab[6] & 0x40) >> 6;
 800268a:	f3c3 1280 	ubfx	r2, r3, #6, #1
 800268e:	72a2      	strb	r2, [r4, #10]
  SD_csd->RdBlockMisalign = (CSD_Tab[6] & 0x20) >> 5;
 8002690:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8002694:	72e2      	strb	r2, [r4, #11]
  SD_csd->DSRImpl = (CSD_Tab[6] & 0x10) >> 4;
 8002696:	f3c3 1200 	ubfx	r2, r3, #4, #1
 800269a:	7322      	strb	r2, [r4, #12]
  SD_csd->Reserved2 = 0; /*!< Reserved */
 800269c:	2200      	movs	r2, #0
  SD_csd->DeviceSize = (CSD_Tab[6] & 0x03) << 10;
 800269e:	029b      	lsls	r3, r3, #10
 80026a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
  SD_csd->Reserved2 = 0; /*!< Reserved */
 80026a4:	7362      	strb	r2, [r4, #13]
  SD_csd->DeviceSize = (CSD_Tab[6] & 0x03) << 10;
 80026a6:	6123      	str	r3, [r4, #16]
  if ((SD_Type == SD_TYPE_V1) || (SD_Type == SD_TYPE_V2))
 80026a8:	4b4e      	ldr	r3, [pc, #312]	@ (80027e4 <SD_GetCSDRegister+0x1f4>)
 80026aa:	781a      	ldrb	r2, [r3, #0]
		SD_csd->DeviceSizeMul |= (CSD_Tab[10] & 0x80) >> 7;
 80026ac:	f89d 300a 	ldrb.w	r3, [sp, #10]
  if ((SD_Type == SD_TYPE_V1) || (SD_Type == SD_TYPE_V2))
 80026b0:	1e51      	subs	r1, r2, #1
 80026b2:	2901      	cmp	r1, #1
 80026b4:	d87f      	bhi.n	80027b6 <SD_GetCSDRegister+0x1c6>
		SD_csd->DeviceSize |= (CSD_Tab[7]) << 2;
 80026b6:	6922      	ldr	r2, [r4, #16]
 80026b8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80026bc:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 80026c0:	6122      	str	r2, [r4, #16]
		SD_csd->DeviceSize |= (CSD_Tab[8] & 0xC0) >> 6;
 80026c2:	6921      	ldr	r1, [r4, #16]
 80026c4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80026c8:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 80026cc:	6121      	str	r1, [r4, #16]
		SD_csd->MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 80026ce:	f3c2 01c2 	ubfx	r1, r2, #3, #3
		SD_csd->MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07);
 80026d2:	f002 0207 	and.w	r2, r2, #7
		SD_csd->MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 80026d6:	7521      	strb	r1, [r4, #20]
		SD_csd->MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07);
 80026d8:	7562      	strb	r2, [r4, #21]
		SD_csd->MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 80026da:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80026de:	0951      	lsrs	r1, r2, #5
 80026e0:	75a1      	strb	r1, [r4, #22]
		SD_csd->MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 80026e2:	f3c2 0182 	ubfx	r1, r2, #2, #3
		SD_csd->DeviceSizeMul = (CSD_Tab[9] & 0x03) << 1;
 80026e6:	0052      	lsls	r2, r2, #1
 80026e8:	f002 0206 	and.w	r2, r2, #6
		SD_csd->MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 80026ec:	75e1      	strb	r1, [r4, #23]
		SD_csd->DeviceSizeMul = (CSD_Tab[9] & 0x03) << 1;
 80026ee:	7622      	strb	r2, [r4, #24]
		SD_csd->DeviceSizeMul |= (CSD_Tab[10] & 0x80) >> 7;
 80026f0:	7e22      	ldrb	r2, [r4, #24]
 80026f2:	ea42 12d3 	orr.w	r2, r2, r3, lsr #7
 80026f6:	7622      	strb	r2, [r4, #24]
  SD_csd->EraseGrSize = (CSD_Tab[10] & 0x40) >> 6;
 80026f8:	f3c3 1280 	ubfx	r2, r3, #6, #1
  SD_csd->EraseGrMul = (CSD_Tab[10] & 0x3F) << 1;
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
  SD_csd->EraseGrSize = (CSD_Tab[10] & 0x40) >> 6;
 8002702:	7662      	strb	r2, [r4, #25]
  SD_csd->EraseGrMul = (CSD_Tab[10] & 0x3F) << 1;
 8002704:	76a3      	strb	r3, [r4, #26]
  SD_csd->EraseGrMul |= (CSD_Tab[11] & 0x80) >> 7;
 8002706:	7ea2      	ldrb	r2, [r4, #26]
 8002708:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
 800270c:	4628      	mov	r0, r5
  SD_csd->EraseGrMul |= (CSD_Tab[11] & 0x80) >> 7;
 800270e:	ea42 12d3 	orr.w	r2, r2, r3, lsr #7
  SD_csd->WrProtectGrSize = (CSD_Tab[11] & 0x7F);
 8002712:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
  SD_csd->EraseGrMul |= (CSD_Tab[11] & 0x80) >> 7;
 8002716:	76a2      	strb	r2, [r4, #26]
  SD_csd->WrProtectGrSize = (CSD_Tab[11] & 0x7F);
 8002718:	76e3      	strb	r3, [r4, #27]
  SD_csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 800271a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800271e:	09da      	lsrs	r2, r3, #7
 8002720:	7722      	strb	r2, [r4, #28]
  SD_csd->ManDeflECC = (CSD_Tab[12] & 0x60) >> 5;
 8002722:	f3c3 1241 	ubfx	r2, r3, #5, #2
 8002726:	7762      	strb	r2, [r4, #29]
  SD_csd->WrSpeedFact = (CSD_Tab[12] & 0x1C) >> 2;
 8002728:	f3c3 0282 	ubfx	r2, r3, #2, #3
  SD_csd->MaxWrBlockLen = (CSD_Tab[12] & 0x03) << 2;
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	f003 030c 	and.w	r3, r3, #12
  SD_csd->WrSpeedFact = (CSD_Tab[12] & 0x1C) >> 2;
 8002732:	77a2      	strb	r2, [r4, #30]
  SD_csd->MaxWrBlockLen = (CSD_Tab[12] & 0x03) << 2;
 8002734:	77e3      	strb	r3, [r4, #31]
  SD_csd->MaxWrBlockLen |= (CSD_Tab[13] & 0xC0) >> 6;
 8002736:	7fe2      	ldrb	r2, [r4, #31]
 8002738:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800273c:	ea42 1293 	orr.w	r2, r2, r3, lsr #6
 8002740:	77e2      	strb	r2, [r4, #31]
  SD_csd->WriteBlockPaPartial = (CSD_Tab[13] & 0x20) >> 5;
 8002742:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8002746:	f884 2020 	strb.w	r2, [r4, #32]
  SD_csd->Reserved3 = 0;
 800274a:	2200      	movs	r2, #0
  SD_csd->ContentProtectAppli = (CSD_Tab[13] & 0x01);
 800274c:	f003 0301 	and.w	r3, r3, #1
  SD_csd->Reserved3 = 0;
 8002750:	f884 2021 	strb.w	r2, [r4, #33]	@ 0x21
  SD_csd->ContentProtectAppli = (CSD_Tab[13] & 0x01);
 8002754:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  SD_csd->FileFormatGrouop = (CSD_Tab[14] & 0x80) >> 7;
 8002758:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800275c:	09da      	lsrs	r2, r3, #7
 800275e:	f884 2023 	strb.w	r2, [r4, #35]	@ 0x23
  SD_csd->CopyFlag = (CSD_Tab[14] & 0x40) >> 6;
 8002762:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8002766:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
  SD_csd->PermWrProtect = (CSD_Tab[14] & 0x20) >> 5;
 800276a:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800276e:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
  SD_csd->TempWrProtect = (CSD_Tab[14] & 0x10) >> 4;
 8002772:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8002776:	f884 2026 	strb.w	r2, [r4, #38]	@ 0x26
  SD_csd->FileFormat = (CSD_Tab[14] & 0x0C) >> 2;
 800277a:	f3c3 0281 	ubfx	r2, r3, #2, #2
  SD_csd->ECC = (CSD_Tab[14] & 0x03);
 800277e:	f003 0303 	and.w	r3, r3, #3
  SD_csd->FileFormat = (CSD_Tab[14] & 0x0C) >> 2;
 8002782:	f884 2027 	strb.w	r2, [r4, #39]	@ 0x27
  SD_csd->ECC = (CSD_Tab[14] & 0x03);
 8002786:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
  SD_csd->CSD_CRC = (CSD_Tab[15] & 0xFE) >> 1;
 800278a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800278e:	085b      	lsrs	r3, r3, #1
 8002790:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
  SD_csd->Reserved4 = 1;
 8002794:	2301      	movs	r3, #1
 8002796:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
}
 800279a:	b005      	add	sp, #20
 800279c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800279e:	466f      	mov	r7, sp
      for (i = 0; i < 16; i++)
 80027a0:	462e      	mov	r6, r5
        CSD_Tab[i] = SD_ReadByte();
 80027a2:	f7ff fe3c 	bl	800241e <SD_ReadByte>
      for (i = 0; i < 16; i++)
 80027a6:	3601      	adds	r6, #1
 80027a8:	2e10      	cmp	r6, #16
        CSD_Tab[i] = SD_ReadByte();
 80027aa:	f807 0b01 	strb.w	r0, [r7], #1
      for (i = 0; i < 16; i++)
 80027ae:	d1f8      	bne.n	80027a2 <SD_GetCSDRegister+0x1b2>
 80027b0:	e738      	b.n	8002624 <SD_GetCSDRegister+0x34>
  SD_Error rvalue = SD_RESPONSE_FAILURE;
 80027b2:	25ff      	movs	r5, #255	@ 0xff
 80027b4:	e73c      	b.n	8002630 <SD_GetCSDRegister+0x40>
	else if (SD_Type == SD_TYPE_V2HC)
 80027b6:	2a04      	cmp	r2, #4
 80027b8:	d19e      	bne.n	80026f8 <SD_GetCSDRegister+0x108>
		SD_csd->DeviceSize = (CSD_Tab[7] & 0x3F) << 16;
 80027ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
		SD_csd->DeviceSize |= (CSD_Tab[8] << 8);
 80027be:	f89d 1008 	ldrb.w	r1, [sp, #8]
		SD_csd->DeviceSize = (CSD_Tab[7] & 0x3F) << 16;
 80027c2:	0412      	lsls	r2, r2, #16
 80027c4:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 80027c8:	6122      	str	r2, [r4, #16]
		SD_csd->DeviceSize |= (CSD_Tab[8] << 8);
 80027ca:	6922      	ldr	r2, [r4, #16]
 80027cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80027d0:	6122      	str	r2, [r4, #16]
		SD_csd->DeviceSize |= (CSD_Tab[9]);
 80027d2:	6921      	ldr	r1, [r4, #16]
 80027d4:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80027d8:	430a      	orrs	r2, r1
 80027da:	6122      	str	r2, [r4, #16]
 80027dc:	e78c      	b.n	80026f8 <SD_GetCSDRegister+0x108>
 80027de:	bf00      	nop
 80027e0:	40010800 	.word	0x40010800
 80027e4:	20000828 	.word	0x20000828

080027e8 <SD_GetCIDRegister>:
{
 80027e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  SD_CS_LOW();
 80027ea:	2200      	movs	r2, #0
{
 80027ec:	b085      	sub	sp, #20
  SD_CS_LOW();
 80027ee:	2110      	movs	r1, #16
{
 80027f0:	4604      	mov	r4, r0
  SD_CS_LOW();
 80027f2:	4840      	ldr	r0, [pc, #256]	@ (80028f4 <SD_GetCIDRegister+0x10c>)
 80027f4:	f006 fbfe 	bl	8008ff4 <HAL_GPIO_WritePin>
  SD_SendCmd(SD_CMD_SEND_CID, 0, 0xFF);
 80027f8:	22ff      	movs	r2, #255	@ 0xff
 80027fa:	2100      	movs	r1, #0
 80027fc:	200a      	movs	r0, #10
 80027fe:	f7ff fdf1 	bl	80023e4 <SD_SendCmd>
  if (!SD_GetResponse(SD_RESPONSE_NO_ERROR))
 8002802:	2000      	movs	r0, #0
 8002804:	f7ff fe22 	bl	800244c <SD_GetResponse>
 8002808:	4605      	mov	r5, r0
 800280a:	2800      	cmp	r0, #0
 800280c:	d170      	bne.n	80028f0 <SD_GetCIDRegister+0x108>
    if (!SD_GetResponse(SD_START_DATA_SINGLE_BLOCK_READ))
 800280e:	20fe      	movs	r0, #254	@ 0xfe
 8002810:	f7ff fe1c 	bl	800244c <SD_GetResponse>
 8002814:	b940      	cbnz	r0, 8002828 <SD_GetCIDRegister+0x40>
 8002816:	466f      	mov	r7, sp
      for (i = 0; i < 16; i++)
 8002818:	462e      	mov	r6, r5
        CID_Tab[i] = SD_ReadByte();
 800281a:	f7ff fe00 	bl	800241e <SD_ReadByte>
      for (i = 0; i < 16; i++)
 800281e:	3601      	adds	r6, #1
 8002820:	2e10      	cmp	r6, #16
        CID_Tab[i] = SD_ReadByte();
 8002822:	f807 0b01 	strb.w	r0, [r7], #1
      for (i = 0; i < 16; i++)
 8002826:	d1f8      	bne.n	800281a <SD_GetCIDRegister+0x32>
    SD_WriteByte(SD_DUMMY_BYTE);
 8002828:	20ff      	movs	r0, #255	@ 0xff
 800282a:	f7ff fdc7 	bl	80023bc <SD_WriteByte>
    SD_WriteByte(SD_DUMMY_BYTE);
 800282e:	20ff      	movs	r0, #255	@ 0xff
 8002830:	f7ff fdc4 	bl	80023bc <SD_WriteByte>
  SD_CS_HIGH();
 8002834:	2201      	movs	r2, #1
 8002836:	2110      	movs	r1, #16
 8002838:	482e      	ldr	r0, [pc, #184]	@ (80028f4 <SD_GetCIDRegister+0x10c>)
 800283a:	f006 fbdb 	bl	8008ff4 <HAL_GPIO_WritePin>
  SD_WriteByte(SD_DUMMY_BYTE);
 800283e:	20ff      	movs	r0, #255	@ 0xff
 8002840:	f7ff fdbc 	bl	80023bc <SD_WriteByte>
  SD_cid->ManufacturerID = CID_Tab[0];
 8002844:	f89d 3000 	ldrb.w	r3, [sp]
  SD_cid->OEM_AppliID |= CID_Tab[2];
 8002848:	f89d 2002 	ldrb.w	r2, [sp, #2]
  SD_cid->ManufacturerID = CID_Tab[0];
 800284c:	7023      	strb	r3, [r4, #0]
  SD_cid->OEM_AppliID = CID_Tab[1] << 8;
 800284e:	f89d 3001 	ldrb.w	r3, [sp, #1]
}
 8002852:	4628      	mov	r0, r5
  SD_cid->OEM_AppliID = CID_Tab[1] << 8;
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	8063      	strh	r3, [r4, #2]
  SD_cid->OEM_AppliID |= CID_Tab[2];
 8002858:	8863      	ldrh	r3, [r4, #2]
 800285a:	b29b      	uxth	r3, r3
 800285c:	4313      	orrs	r3, r2
 800285e:	8063      	strh	r3, [r4, #2]
  SD_cid->ProdName1 = CID_Tab[3] << 24;
 8002860:	f89d 3003 	ldrb.w	r3, [sp, #3]
  SD_cid->ProdName1 |= CID_Tab[4] << 16;
 8002864:	f89d 2004 	ldrb.w	r2, [sp, #4]
  SD_cid->ProdName1 = CID_Tab[3] << 24;
 8002868:	061b      	lsls	r3, r3, #24
 800286a:	6063      	str	r3, [r4, #4]
  SD_cid->ProdName1 |= CID_Tab[4] << 16;
 800286c:	6863      	ldr	r3, [r4, #4]
 800286e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002872:	6063      	str	r3, [r4, #4]
  SD_cid->ProdName1 |= CID_Tab[5] << 8;
 8002874:	6863      	ldr	r3, [r4, #4]
 8002876:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800287a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800287e:	6063      	str	r3, [r4, #4]
  SD_cid->ProdName1 |= CID_Tab[6];
 8002880:	6862      	ldr	r2, [r4, #4]
 8002882:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002886:	4313      	orrs	r3, r2
 8002888:	6063      	str	r3, [r4, #4]
  SD_cid->ProdName2 = CID_Tab[7];
 800288a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  SD_cid->ProdSN |= CID_Tab[10] << 16;
 800288e:	f89d 200a 	ldrb.w	r2, [sp, #10]
  SD_cid->ProdName2 = CID_Tab[7];
 8002892:	7223      	strb	r3, [r4, #8]
  SD_cid->ProdRev = CID_Tab[8];
 8002894:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002898:	7263      	strb	r3, [r4, #9]
  SD_cid->ProdSN = CID_Tab[9] << 24;
 800289a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800289e:	061b      	lsls	r3, r3, #24
 80028a0:	60e3      	str	r3, [r4, #12]
  SD_cid->ProdSN |= CID_Tab[10] << 16;
 80028a2:	68e3      	ldr	r3, [r4, #12]
 80028a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80028a8:	60e3      	str	r3, [r4, #12]
  SD_cid->ProdSN |= CID_Tab[11] << 8;
 80028aa:	68e3      	ldr	r3, [r4, #12]
 80028ac:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80028b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80028b4:	60e3      	str	r3, [r4, #12]
  SD_cid->ProdSN |= CID_Tab[12];
 80028b6:	68e2      	ldr	r2, [r4, #12]
 80028b8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80028bc:	4313      	orrs	r3, r2
 80028be:	60e3      	str	r3, [r4, #12]
  SD_cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 80028c0:	7c22      	ldrb	r2, [r4, #16]
 80028c2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80028c6:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
  SD_cid->ManufactDate = (CID_Tab[13] & 0x0F) << 8;
 80028ca:	021b      	lsls	r3, r3, #8
 80028cc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
  SD_cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 80028d0:	7422      	strb	r2, [r4, #16]
  SD_cid->ManufactDate = (CID_Tab[13] & 0x0F) << 8;
 80028d2:	8263      	strh	r3, [r4, #18]
  SD_cid->ManufactDate |= CID_Tab[14];
 80028d4:	8a63      	ldrh	r3, [r4, #18]
 80028d6:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	4313      	orrs	r3, r2
 80028de:	8263      	strh	r3, [r4, #18]
  SD_cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 80028e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80028e4:	085b      	lsrs	r3, r3, #1
 80028e6:	7523      	strb	r3, [r4, #20]
  SD_cid->Reserved2 = 1;
 80028e8:	2301      	movs	r3, #1
 80028ea:	7563      	strb	r3, [r4, #21]
}
 80028ec:	b005      	add	sp, #20
 80028ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  SD_Error rvalue = SD_RESPONSE_FAILURE;
 80028f0:	25ff      	movs	r5, #255	@ 0xff
 80028f2:	e79f      	b.n	8002834 <SD_GetCIDRegister+0x4c>
 80028f4:	40010800 	.word	0x40010800

080028f8 <SD_GetCardInfo>:
{
 80028f8:	b570      	push	{r4, r5, r6, lr}
 80028fa:	4604      	mov	r4, r0
  status = SD_GetCSDRegister(&(cardinfo->SD_csd));
 80028fc:	f7ff fe78 	bl	80025f0 <SD_GetCSDRegister>
  status = SD_GetCIDRegister(&(cardinfo->SD_cid));
 8002900:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8002904:	f7ff ff70 	bl	80027e8 <SD_GetCIDRegister>
	if ((SD_Type == SD_TYPE_V1) || (SD_Type == SD_TYPE_V2))
 8002908:	4b13      	ldr	r3, [pc, #76]	@ (8002958 <SD_GetCardInfo+0x60>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	1e5a      	subs	r2, r3, #1
 800290e:	2a01      	cmp	r2, #1
 8002910:	d816      	bhi.n	8002940 <SD_GetCardInfo+0x48>
  cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 8002912:	2301      	movs	r3, #1
  cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
 8002914:	6925      	ldr	r5, [r4, #16]
  cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 8002916:	7e22      	ldrb	r2, [r4, #24]
  cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 8002918:	7a21      	ldrb	r1, [r4, #8]
  cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 800291a:	3202      	adds	r2, #2
  cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 800291c:	fa03 f101 	lsl.w	r1, r3, r1
  cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 8002920:	4093      	lsls	r3, r2
 8002922:	17de      	asrs	r6, r3, #31
  cardinfo->CardCapacity *= cardinfo->CardBlockSize;
 8002924:	fba3 3201 	umull	r3, r2, r3, r1
 8002928:	fb01 2206 	mla	r2, r1, r6, r2
  cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 800292c:	6521      	str	r1, [r4, #80]	@ 0x50
  cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
 800292e:	1c69      	adds	r1, r5, #1
  cardinfo->CardCapacity *= cardinfo->CardBlockSize;
 8002930:	fba3 3101 	umull	r3, r1, r3, r1
 8002934:	fb05 2202 	mla	r2, r5, r2, r2
 8002938:	440a      	add	r2, r1
 800293a:	e9c4 3212 	strd	r3, r2, [r4, #72]	@ 0x48
}
 800293e:	bd70      	pop	{r4, r5, r6, pc}
	else if (SD_Type == SD_TYPE_V2HC)
 8002940:	2b04      	cmp	r3, #4
 8002942:	d1fc      	bne.n	800293e <SD_GetCardInfo+0x46>
	  cardinfo->CardCapacity = (uint64_t)(cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
 8002944:	6923      	ldr	r3, [r4, #16]
 8002946:	3301      	adds	r3, #1
 8002948:	0b5a      	lsrs	r2, r3, #13
 800294a:	04db      	lsls	r3, r3, #19
 800294c:	e9c4 3212 	strd	r3, r2, [r4, #72]	@ 0x48
    cardinfo->CardBlockSize = 512;
 8002950:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002954:	6523      	str	r3, [r4, #80]	@ 0x50
 8002956:	e7f2      	b.n	800293e <SD_GetCardInfo+0x46>
 8002958:	20000828 	.word	0x20000828

0800295c <SD_GetCardType>:
{
 800295c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	SD_CS_HIGH();
 800295e:	2201      	movs	r2, #1
 8002960:	2110      	movs	r1, #16
 8002962:	4854      	ldr	r0, [pc, #336]	@ (8002ab4 <SD_GetCardType+0x158>)
 8002964:	f006 fb46 	bl	8008ff4 <HAL_GPIO_WritePin>
	SD_WriteByte(SD_DUMMY_BYTE);
 8002968:	20ff      	movs	r0, #255	@ 0xff
 800296a:	f7ff fd27 	bl	80023bc <SD_WriteByte>
	SD_CS_LOW();
 800296e:	2200      	movs	r2, #0
 8002970:	2110      	movs	r1, #16
 8002972:	4850      	ldr	r0, [pc, #320]	@ (8002ab4 <SD_GetCardType+0x158>)
 8002974:	f006 fb3e 	bl	8008ff4 <HAL_GPIO_WritePin>
  SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AA, 0x87);
 8002978:	2287      	movs	r2, #135	@ 0x87
 800297a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800297e:	2008      	movs	r0, #8
 8002980:	f7ff fd30 	bl	80023e4 <SD_SendCmd>
	uint32_t Count = 0xFFF;
 8002984:	f640 74ff 	movw	r4, #4095	@ 0xfff
  while (( (R1_Resp = SD_ReadByte()) == 0xFF) && Count)
 8002988:	f7ff fd49 	bl	800241e <SD_ReadByte>
 800298c:	28ff      	cmp	r0, #255	@ 0xff
 800298e:	d105      	bne.n	800299c <SD_GetCardType+0x40>
 8002990:	b914      	cbnz	r4, 8002998 <SD_GetCardType+0x3c>
    return SD_RESPONSE_FAILURE;
 8002992:	20ff      	movs	r0, #255	@ 0xff
}
 8002994:	b002      	add	sp, #8
 8002996:	bd70      	pop	{r4, r5, r6, pc}
    Count--;
 8002998:	3c01      	subs	r4, #1
 800299a:	e7f5      	b.n	8002988 <SD_GetCardType+0x2c>
  if (Count == 0)
 800299c:	2c00      	cmp	r4, #0
 800299e:	d0f8      	beq.n	8002992 <SD_GetCardType+0x36>
	if(R1_Resp == (SD_IN_IDLE_STATE|SD_ILLEGAL_COMMAND))
 80029a0:	2805      	cmp	r0, #5
 80029a2:	d11b      	bne.n	80029dc <SD_GetCardType+0x80>
			SD_CS_HIGH();
 80029a4:	4c43      	ldr	r4, [pc, #268]	@ (8002ab4 <SD_GetCardType+0x158>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	2110      	movs	r1, #16
 80029aa:	4620      	mov	r0, r4
 80029ac:	f006 fb22 	bl	8008ff4 <HAL_GPIO_WritePin>
			SD_WriteByte(SD_DUMMY_BYTE);
 80029b0:	20ff      	movs	r0, #255	@ 0xff
 80029b2:	f7ff fd03 	bl	80023bc <SD_WriteByte>
			SD_CS_LOW();
 80029b6:	2200      	movs	r2, #0
 80029b8:	2110      	movs	r1, #16
 80029ba:	4620      	mov	r0, r4
 80029bc:	f006 fb1a 	bl	8008ff4 <HAL_GPIO_WritePin>
			SD_SendCmd(SD_CMD_SEND_OP_COND, 0, 0xFF);
 80029c0:	2001      	movs	r0, #1
 80029c2:	22ff      	movs	r2, #255	@ 0xff
 80029c4:	2100      	movs	r1, #0
 80029c6:	f7ff fd0d 	bl	80023e4 <SD_SendCmd>
		while (SD_GetResponse(SD_RESPONSE_NO_ERROR));
 80029ca:	2000      	movs	r0, #0
 80029cc:	f7ff fd3e 	bl	800244c <SD_GetResponse>
 80029d0:	2800      	cmp	r0, #0
 80029d2:	d1e8      	bne.n	80029a6 <SD_GetCardType+0x4a>
		SD_Type = SD_TYPE_V1;
 80029d4:	2201      	movs	r2, #1
 80029d6:	4b38      	ldr	r3, [pc, #224]	@ (8002ab8 <SD_GetCardType+0x15c>)
                SD_Type = SD_TYPE_V2;
 80029d8:	701a      	strb	r2, [r3, #0]
 80029da:	e05f      	b.n	8002a9c <SD_GetCardType+0x140>
  else if (R1_Resp == SD_IN_IDLE_STATE)
 80029dc:	2801      	cmp	r0, #1
 80029de:	d15d      	bne.n	8002a9c <SD_GetCardType+0x140>
 80029e0:	ad01      	add	r5, sp, #4
 80029e2:	462e      	mov	r6, r5
      for (i = 0; i < 4; i++)
 80029e4:	2400      	movs	r4, #0
        R7R3_Resp[i] = SD_ReadByte();
 80029e6:	f7ff fd1a 	bl	800241e <SD_ReadByte>
      for (i = 0; i < 4; i++)
 80029ea:	3401      	adds	r4, #1
 80029ec:	2c04      	cmp	r4, #4
        R7R3_Resp[i] = SD_ReadByte();
 80029ee:	f806 0b01 	strb.w	r0, [r6], #1
      for (i = 0; i < 4; i++)
 80029f2:	d1f8      	bne.n	80029e6 <SD_GetCardType+0x8a>
			SD_CS_HIGH();
 80029f4:	2201      	movs	r2, #1
 80029f6:	2110      	movs	r1, #16
 80029f8:	482e      	ldr	r0, [pc, #184]	@ (8002ab4 <SD_GetCardType+0x158>)
 80029fa:	f006 fafb 	bl	8008ff4 <HAL_GPIO_WritePin>
			SD_WriteByte(SD_DUMMY_BYTE);
 80029fe:	20ff      	movs	r0, #255	@ 0xff
 8002a00:	f7ff fcdc 	bl	80023bc <SD_WriteByte>
			SD_CS_LOW();
 8002a04:	2200      	movs	r2, #0
 8002a06:	2110      	movs	r1, #16
 8002a08:	482a      	ldr	r0, [pc, #168]	@ (8002ab4 <SD_GetCardType+0x158>)
 8002a0a:	f006 faf3 	bl	8008ff4 <HAL_GPIO_WritePin>
			if(R7R3_Resp[2]==0x01 && R7R3_Resp[3]==0xAA)
 8002a0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d142      	bne.n	8002a9c <SD_GetCardType+0x140>
 8002a16:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002a1a:	2baa      	cmp	r3, #170	@ 0xaa
 8002a1c:	d13e      	bne.n	8002a9c <SD_GetCardType+0x140>
 8002a1e:	24c9      	movs	r4, #201	@ 0xc9
    			SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF);
 8002a20:	2037      	movs	r0, #55	@ 0x37
 8002a22:	22ff      	movs	r2, #255	@ 0xff
 8002a24:	2100      	movs	r1, #0
 8002a26:	f7ff fcdd 	bl	80023e4 <SD_SendCmd>
					if (!SD_GetResponse(SD_RESPONSE_NO_ERROR)) // SD_IN_IDLE_STATE
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f7ff fd0e 	bl	800244c <SD_GetResponse>
 8002a30:	2800      	cmp	r0, #0
 8002a32:	d0ae      	beq.n	8002992 <SD_GetCardType+0x36>
    			SD_SendCmd(SD_ACMD_SD_SEND_OP_COND, 0x40000000, 0xFF);
 8002a34:	22ff      	movs	r2, #255	@ 0xff
 8002a36:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002a3a:	2029      	movs	r0, #41	@ 0x29
 8002a3c:	f7ff fcd2 	bl	80023e4 <SD_SendCmd>
					if(Count-- == 0)
 8002a40:	3c01      	subs	r4, #1
 8002a42:	d0a6      	beq.n	8002992 <SD_GetCardType+0x36>
         }while(SD_GetResponse(SD_RESPONSE_NO_ERROR));
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7ff fd01 	bl	800244c <SD_GetResponse>
 8002a4a:	2800      	cmp	r0, #0
 8002a4c:	d1e8      	bne.n	8002a20 <SD_GetCardType+0xc4>
						SD_CS_HIGH();
 8002a4e:	4e19      	ldr	r6, [pc, #100]	@ (8002ab4 <SD_GetCardType+0x158>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	2110      	movs	r1, #16
 8002a54:	4630      	mov	r0, r6
 8002a56:	f006 facd 	bl	8008ff4 <HAL_GPIO_WritePin>
						SD_WriteByte(SD_DUMMY_BYTE);
 8002a5a:	20ff      	movs	r0, #255	@ 0xff
 8002a5c:	f7ff fcae 	bl	80023bc <SD_WriteByte>
						SD_CS_LOW();
 8002a60:	2200      	movs	r2, #0
 8002a62:	2110      	movs	r1, #16
 8002a64:	4630      	mov	r0, r6
 8002a66:	f006 fac5 	bl	8008ff4 <HAL_GPIO_WritePin>
						SD_SendCmd(SD_CMD_READ_OCR, 0, 0xFF);
 8002a6a:	22ff      	movs	r2, #255	@ 0xff
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	203a      	movs	r0, #58	@ 0x3a
 8002a70:	f7ff fcb8 	bl	80023e4 <SD_SendCmd>
					while ( SD_GetResponse(SD_RESPONSE_NO_ERROR) || Count-- == 0);
 8002a74:	2000      	movs	r0, #0
 8002a76:	f7ff fce9 	bl	800244c <SD_GetResponse>
 8002a7a:	4604      	mov	r4, r0
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	d1e7      	bne.n	8002a50 <SD_GetCardType+0xf4>
							R7R3_Resp[i] = SD_ReadByte();
 8002a80:	f7ff fccd 	bl	800241e <SD_ReadByte>
						for (i = 0; i < 4; i++)
 8002a84:	3401      	adds	r4, #1
 8002a86:	2c04      	cmp	r4, #4
							R7R3_Resp[i] = SD_ReadByte();
 8002a88:	f805 0b01 	strb.w	r0, [r5], #1
						for (i = 0; i < 4; i++)
 8002a8c:	d1f8      	bne.n	8002a80 <SD_GetCardType+0x124>
            if(R7R3_Resp[0]&0x40)    //检查CCS标志
 8002a8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a92:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002a96:	4b08      	ldr	r3, [pc, #32]	@ (8002ab8 <SD_GetCardType+0x15c>)
 8002a98:	d00a      	beq.n	8002ab0 <SD_GetCardType+0x154>
                SD_Type = SD_TYPE_V2HC;
 8002a9a:	701c      	strb	r4, [r3, #0]
  SD_CS_HIGH();
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	2110      	movs	r1, #16
 8002aa0:	4804      	ldr	r0, [pc, #16]	@ (8002ab4 <SD_GetCardType+0x158>)
 8002aa2:	f006 faa7 	bl	8008ff4 <HAL_GPIO_WritePin>
  SD_WriteByte(SD_DUMMY_BYTE);
 8002aa6:	20ff      	movs	r0, #255	@ 0xff
 8002aa8:	f7ff fc88 	bl	80023bc <SD_WriteByte>
	return SD_RESPONSE_NO_ERROR;
 8002aac:	2000      	movs	r0, #0
 8002aae:	e771      	b.n	8002994 <SD_GetCardType+0x38>
                SD_Type = SD_TYPE_V2;
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	e791      	b.n	80029d8 <SD_GetCardType+0x7c>
 8002ab4:	40010800 	.word	0x40010800
 8002ab8:	20000828 	.word	0x20000828

08002abc <SD_Init>:
{
 8002abc:	b510      	push	{r4, lr}
  SD_CS_HIGH();
 8002abe:	2201      	movs	r2, #1
 8002ac0:	2110      	movs	r1, #16
 8002ac2:	480b      	ldr	r0, [pc, #44]	@ (8002af0 <SD_Init+0x34>)
 8002ac4:	f006 fa96 	bl	8008ff4 <HAL_GPIO_WritePin>
 8002ac8:	240a      	movs	r4, #10
    SD_WriteByte(SD_DUMMY_BYTE);
 8002aca:	20ff      	movs	r0, #255	@ 0xff
 8002acc:	f7ff fc76 	bl	80023bc <SD_WriteByte>
  for (i = 0; i <= 9; i++)
 8002ad0:	3c01      	subs	r4, #1
 8002ad2:	d1fa      	bne.n	8002aca <SD_Init+0xe>
		SD_GoIdleState();
 8002ad4:	f7ff fccc 	bl	8002470 <SD_GoIdleState>
		SD_GetCardType();
 8002ad8:	f7ff ff40 	bl	800295c <SD_GetCardType>
	}while(SD_Type == SD_TYPE_NOT_SD && i++ >10);
 8002adc:	4b05      	ldr	r3, [pc, #20]	@ (8002af4 <SD_Init+0x38>)
	if(SD_Type == SD_TYPE_NOT_SD)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	b123      	cbz	r3, 8002aec <SD_Init+0x30>
}
 8002ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return SD_GetCardInfo(&SDCardInfo);
 8002ae6:	4804      	ldr	r0, [pc, #16]	@ (8002af8 <SD_Init+0x3c>)
 8002ae8:	f7ff bf06 	b.w	80028f8 <SD_GetCardInfo>
}
 8002aec:	20ff      	movs	r0, #255	@ 0xff
 8002aee:	bd10      	pop	{r4, pc}
 8002af0:	40010800 	.word	0x40010800
 8002af4:	20000828 	.word	0x20000828
 8002af8:	200007d0 	.word	0x200007d0

08002afc <MX_ADC1_Init>:

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002afc:	4823      	ldr	r0, [pc, #140]	@ (8002b8c <MX_ADC1_Init+0x90>)
 8002afe:	4b24      	ldr	r3, [pc, #144]	@ (8002b90 <MX_ADC1_Init+0x94>)
{
 8002b00:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 8002b02:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002b04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b08:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b0a:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b0e:	2400      	movs	r4, #0
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002b10:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b12:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 8002b14:	2304      	movs	r3, #4
{
 8002b16:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b18:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002b1c:	9403      	str	r4, [sp, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002b1e:	7305      	strb	r5, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b20:	7504      	strb	r4, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b22:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 4;
 8002b24:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b26:	f005 fecb 	bl	80088c0 <HAL_ADC_Init>
 8002b2a:	b108      	cbz	r0, 8002b30 <MX_ADC1_Init+0x34>
  {
    Error_Handler();
 8002b2c:	f004 fbaa 	bl	8007284 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b30:	e9cd 4501 	strd	r4, r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002b34:	2402      	movs	r4, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b36:	4815      	ldr	r0, [pc, #84]	@ (8002b8c <MX_ADC1_Init+0x90>)
 8002b38:	a901      	add	r1, sp, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002b3a:	9403      	str	r4, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b3c:	f005 fd52 	bl	80085e4 <HAL_ADC_ConfigChannel>
 8002b40:	b108      	cbz	r0, 8002b46 <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 8002b42:	f004 fb9f 	bl	8007284 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002b46:	2301      	movs	r3, #1
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b48:	4810      	ldr	r0, [pc, #64]	@ (8002b8c <MX_ADC1_Init+0x90>)
 8002b4a:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002b4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b50:	f005 fd48 	bl	80085e4 <HAL_ADC_ConfigChannel>
 8002b54:	b108      	cbz	r0, 8002b5a <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 8002b56:	f004 fb95 	bl	8007284 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002b5a:	2108      	movs	r1, #8
 8002b5c:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b5e:	480b      	ldr	r0, [pc, #44]	@ (8002b8c <MX_ADC1_Init+0x90>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002b60:	e9cd 1301 	strd	r1, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b64:	a901      	add	r1, sp, #4
 8002b66:	f005 fd3d 	bl	80085e4 <HAL_ADC_ConfigChannel>
 8002b6a:	b108      	cbz	r0, 8002b70 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002b6c:	f004 fb8a 	bl	8007284 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002b70:	2304      	movs	r3, #4
 8002b72:	2209      	movs	r2, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b74:	4805      	ldr	r0, [pc, #20]	@ (8002b8c <MX_ADC1_Init+0x90>)
 8002b76:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002b7a:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b7e:	f005 fd31 	bl	80085e4 <HAL_ADC_ConfigChannel>
 8002b82:	b108      	cbz	r0, 8002b88 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8002b84:	f004 fb7e 	bl	8007284 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002b88:	b005      	add	sp, #20
 8002b8a:	bd30      	pop	{r4, r5, pc}
 8002b8c:	20000884 	.word	0x20000884
 8002b90:	40012400 	.word	0x40012400

08002b94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	2210      	movs	r2, #16
{
 8002b96:	b530      	push	{r4, r5, lr}
 8002b98:	4605      	mov	r5, r0
 8002b9a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b9c:	eb0d 0002 	add.w	r0, sp, r2
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	f009 fd5b 	bl	800c65c <memset>
  if(adcHandle->Instance==ADC1)
 8002ba6:	682a      	ldr	r2, [r5, #0]
 8002ba8:	4b27      	ldr	r3, [pc, #156]	@ (8002c48 <HAL_ADC_MspInit+0xb4>)
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d14a      	bne.n	8002c44 <HAL_ADC_MspInit+0xb0>
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPS_PPS_Pin|ADC_GASP_Pin;
 8002bae:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bb0:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8002bb4:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb6:	4825      	ldr	r0, [pc, #148]	@ (8002c4c <HAL_ADC_MspInit+0xb8>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bbc:	619a      	str	r2, [r3, #24]
 8002bbe:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc0:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bc2:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8002bc6:	9201      	str	r2, [sp, #4]
 8002bc8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bca:	699a      	ldr	r2, [r3, #24]
 8002bcc:	f042 0204 	orr.w	r2, r2, #4
 8002bd0:	619a      	str	r2, [r3, #24]
 8002bd2:	699a      	ldr	r2, [r3, #24]
 8002bd4:	f002 0204 	and.w	r2, r2, #4
 8002bd8:	9202      	str	r2, [sp, #8]
 8002bda:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	f042 0208 	orr.w	r2, r2, #8
 8002be2:	619a      	str	r2, [r3, #24]
 8002be4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002be6:	e9cd 4404 	strd	r4, r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	9303      	str	r3, [sp, #12]
 8002bf0:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf2:	f006 f921 	bl	8008e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VADC_BDC1_Pin|ADC_BAT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf6:	4816      	ldr	r0, [pc, #88]	@ (8002c50 <HAL_ADC_MspInit+0xbc>)
 8002bf8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bfa:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bfe:	f006 f91b 	bl	8008e38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c02:	2300      	movs	r3, #0
    hdma_adc1.Instance = DMA1_Channel1;
 8002c04:	4c13      	ldr	r4, [pc, #76]	@ (8002c54 <HAL_ADC_MspInit+0xc0>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c06:	4a14      	ldr	r2, [pc, #80]	@ (8002c58 <HAL_ADC_MspInit+0xc4>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c08:	2180      	movs	r1, #128	@ 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c0a:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002c12:	f44f 6080 	mov.w	r0, #1024	@ 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c16:	e9c4 1203 	strd	r1, r2, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	e9c4 0205 	strd	r0, r2, [r4, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c20:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c22:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c24:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c26:	f005 ff9f 	bl	8008b68 <HAL_DMA_Init>
 8002c2a:	b108      	cbz	r0, 8002c30 <HAL_ADC_MspInit+0x9c>
    {
      Error_Handler();
 8002c2c:	f004 fb2a 	bl	8007284 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 12, 0);
 8002c30:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002c32:	622c      	str	r4, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 12, 0);
 8002c34:	2200      	movs	r2, #0
 8002c36:	210c      	movs	r1, #12
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002c38:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 12, 0);
 8002c3a:	f005 ff43 	bl	8008ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002c3e:	2012      	movs	r0, #18
 8002c40:	f005 ff70 	bl	8008b24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002c44:	b009      	add	sp, #36	@ 0x24
 8002c46:	bd30      	pop	{r4, r5, pc}
 8002c48:	40012400 	.word	0x40012400
 8002c4c:	40010800 	.word	0x40010800
 8002c50:	40010c00 	.word	0x40010c00
 8002c54:	20000840 	.word	0x20000840
 8002c58:	40020008 	.word	0x40020008

08002c5c <HAL_ADC_ConvCpltCallback>:
{
    // 处理 ADC 转换结果
	static uint32_t adc_buf[4] = {0};
	static uint8_t i = 0;

	if(hadc->Instance == ADC1){
 8002c5c:	6802      	ldr	r2, [r0, #0]
 8002c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002cdc <HAL_ADC_ConvCpltCallback+0x80>)
{
 8002c60:	b530      	push	{r4, r5, lr}
	if(hadc->Instance == ADC1){
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d117      	bne.n	8002c96 <HAL_ADC_ConvCpltCallback+0x3a>
		if(i <= 9){
 8002c66:	481e      	ldr	r0, [pc, #120]	@ (8002ce0 <HAL_ADC_ConvCpltCallback+0x84>)
 8002c68:	7803      	ldrb	r3, [r0, #0]
 8002c6a:	2b09      	cmp	r3, #9
 8002c6c:	d814      	bhi.n	8002c98 <HAL_ADC_ConvCpltCallback+0x3c>
			adc_buf[0] += ADC_rslt[0];
 8002c6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ce4 <HAL_ADC_ConvCpltCallback+0x88>)
 8002c70:	491d      	ldr	r1, [pc, #116]	@ (8002ce8 <HAL_ADC_ConvCpltCallback+0x8c>)
 8002c72:	6814      	ldr	r4, [r2, #0]
 8002c74:	880d      	ldrh	r5, [r1, #0]
			adc_buf[1] += ADC_rslt[1];
			adc_buf[2] += ADC_rslt[2];
			adc_buf[3] += ADC_rslt[3];
			i++;
 8002c76:	3301      	adds	r3, #1
			adc_buf[0] += ADC_rslt[0];
 8002c78:	442c      	add	r4, r5
 8002c7a:	6014      	str	r4, [r2, #0]
			adc_buf[1] += ADC_rslt[1];
 8002c7c:	884d      	ldrh	r5, [r1, #2]
 8002c7e:	6854      	ldr	r4, [r2, #4]
			i++;
 8002c80:	7003      	strb	r3, [r0, #0]
			adc_buf[1] += ADC_rslt[1];
 8002c82:	442c      	add	r4, r5
 8002c84:	6054      	str	r4, [r2, #4]
			adc_buf[2] += ADC_rslt[2];
 8002c86:	888d      	ldrh	r5, [r1, #4]
 8002c88:	6894      	ldr	r4, [r2, #8]
 8002c8a:	442c      	add	r4, r5
 8002c8c:	6094      	str	r4, [r2, #8]
			adc_buf[3] += ADC_rslt[3];
 8002c8e:	88cc      	ldrh	r4, [r1, #6]
 8002c90:	68d1      	ldr	r1, [r2, #12]
 8002c92:	4421      	add	r1, r4
 8002c94:	60d1      	str	r1, [r2, #12]
			adc_buf[2]= 0;
			adc_buf[3]= 0;
			ADC_CONV_cplt = 1;
		}
	}
}
 8002c96:	bd30      	pop	{r4, r5, pc}
		else if(i == 10)
 8002c98:	2b0a      	cmp	r3, #10
 8002c9a:	d1fc      	bne.n	8002c96 <HAL_ADC_ConvCpltCallback+0x3a>
			motor1_adc_val 	= adc_buf[0]/10;
 8002c9c:	4a11      	ldr	r2, [pc, #68]	@ (8002ce4 <HAL_ADC_ConvCpltCallback+0x88>)
 8002c9e:	4c13      	ldr	r4, [pc, #76]	@ (8002cec <HAL_ADC_ConvCpltCallback+0x90>)
 8002ca0:	6811      	ldr	r1, [r2, #0]
 8002ca2:	fbb1 f1f3 	udiv	r1, r1, r3
 8002ca6:	8021      	strh	r1, [r4, #0]
			motor2_adc_val 	= adc_buf[1]/10;
 8002ca8:	6851      	ldr	r1, [r2, #4]
 8002caa:	4c11      	ldr	r4, [pc, #68]	@ (8002cf0 <HAL_ADC_ConvCpltCallback+0x94>)
 8002cac:	fbb1 f1f3 	udiv	r1, r1, r3
 8002cb0:	8021      	strh	r1, [r4, #0]
			bat_adc_val 		= adc_buf[2]/10;
 8002cb2:	6891      	ldr	r1, [r2, #8]
 8002cb4:	4c0f      	ldr	r4, [pc, #60]	@ (8002cf4 <HAL_ADC_ConvCpltCallback+0x98>)
 8002cb6:	fbb1 f1f3 	udiv	r1, r1, r3
 8002cba:	8021      	strh	r1, [r4, #0]
			gaspres_adc_val = adc_buf[3]/10;
 8002cbc:	68d1      	ldr	r1, [r2, #12]
 8002cbe:	fbb1 f1f3 	udiv	r1, r1, r3
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf8 <HAL_ADC_ConvCpltCallback+0x9c>)
 8002cc4:	8019      	strh	r1, [r3, #0]
			i = 0;
 8002cc6:	2300      	movs	r3, #0
			adc_buf[1]= 0;
 8002cc8:	e9c2 3300 	strd	r3, r3, [r2]
			adc_buf[3]= 0;
 8002ccc:	e9c2 3302 	strd	r3, r3, [r2, #8]
			ADC_CONV_cplt = 1;
 8002cd0:	2201      	movs	r2, #1
			i = 0;
 8002cd2:	7003      	strb	r3, [r0, #0]
			ADC_CONV_cplt = 1;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	@ (8002cfc <HAL_ADC_ConvCpltCallback+0xa0>)
 8002cd6:	701a      	strb	r2, [r3, #0]
}
 8002cd8:	e7dd      	b.n	8002c96 <HAL_ADC_ConvCpltCallback+0x3a>
 8002cda:	bf00      	nop
 8002cdc:	40012400 	.word	0x40012400
 8002ce0:	2000083c 	.word	0x2000083c
 8002ce4:	2000082c 	.word	0x2000082c
 8002ce8:	200008b6 	.word	0x200008b6
 8002cec:	20000940 	.word	0x20000940
 8002cf0:	2000093e 	.word	0x2000093e
 8002cf4:	200008be 	.word	0x200008be
 8002cf8:	2000091a 	.word	0x2000091a
 8002cfc:	200008b4 	.word	0x200008b4

08002d00 <refresh_bat_vlt>:

uint8_t low_power =0;
uint16_t bat_adc_val = 0;
uint8_t bat_val_refreshed = 0;

void refresh_bat_vlt(){
 8002d00:	b510      	push	{r4, lr}
	level_20 = (uint16_t)(20.4/20/VREF*4095);//20.4V
	level_40 = (uint16_t)(21.0/20/VREF*4095);//21V
	level_60 = (uint16_t)(22.0/20/VREF*4095);//22V
	level_80 = (uint16_t)(24.0/20/VREF*4095);//24V

	bat_adc_val = (uint16_t)(bat_adc_val*1.01);
 8002d02:	4c3d      	ldr	r4, [pc, #244]	@ (8002df8 <refresh_bat_vlt+0xf8>)
 8002d04:	8820      	ldrh	r0, [r4, #0]
 8002d06:	f7fd fb87 	bl	8000418 <__aeabi_i2d>
 8002d0a:	a339      	add	r3, pc, #228	@ (adr r3, 8002df0 <refresh_bat_vlt+0xf0>)
 8002d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d10:	f7fd fbec 	bl	80004ec <__aeabi_dmul>
 8002d14:	f7fd fec2 	bl	8000a9c <__aeabi_d2uiz>
	if(bat_adc_val <= level_0){
 8002d18:	f240 43a3 	movw	r3, #1187	@ 0x4a3
	bat_adc_val = (uint16_t)(bat_adc_val*1.01);
 8002d1c:	b280      	uxth	r0, r0
	if(bat_adc_val <= level_0){
 8002d1e:	4298      	cmp	r0, r3
	bat_adc_val = (uint16_t)(bat_adc_val*1.01);
 8002d20:	8020      	strh	r0, [r4, #0]
	if(bat_adc_val <= level_0){
 8002d22:	4b36      	ldr	r3, [pc, #216]	@ (8002dfc <refresh_bat_vlt+0xfc>)
 8002d24:	d818      	bhi.n	8002d58 <refresh_bat_vlt+0x58>
		low_power = 1;
 8002d26:	2201      	movs	r2, #1

		//请立即充电，0%
		sprintf(Tx_Buffer,"Main.n4.val=0\xff\xff\xff");
 8002d28:	4935      	ldr	r1, [pc, #212]	@ (8002e00 <refresh_bat_vlt+0x100>)
 8002d2a:	4836      	ldr	r0, [pc, #216]	@ (8002e04 <refresh_bat_vlt+0x104>)
		low_power = 1;
 8002d2c:	701a      	strb	r2, [r3, #0]
		sprintf(Tx_Buffer,"Main.n4.val=0\xff\xff\xff");
 8002d2e:	f009 fd90 	bl	800c852 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002d32:	4834      	ldr	r0, [pc, #208]	@ (8002e04 <refresh_bat_vlt+0x104>)
 8002d34:	f005 fa56 	bl	80081e4 <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.j0.val=0\xff\xff\xff");
 8002d38:	4933      	ldr	r1, [pc, #204]	@ (8002e08 <refresh_bat_vlt+0x108>)
 8002d3a:	4832      	ldr	r0, [pc, #200]	@ (8002e04 <refresh_bat_vlt+0x104>)
 8002d3c:	f009 fd89 	bl	800c852 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002d40:	4830      	ldr	r0, [pc, #192]	@ (8002e04 <refresh_bat_vlt+0x104>)
 8002d42:	f005 fa4f 	bl	80081e4 <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.t0.txt=\"请立即\r\n 充电\"\xff\xff\xff");
 8002d46:	4931      	ldr	r1, [pc, #196]	@ (8002e0c <refresh_bat_vlt+0x10c>)
		//100%
		low_power = 0;

		sprintf(Tx_Buffer,"Main.n4.val=100\xff\xff\xff");
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
		sprintf(Tx_Buffer,"Main.j0.val=100\xff\xff\xff");
 8002d48:	482e      	ldr	r0, [pc, #184]	@ (8002e04 <refresh_bat_vlt+0x104>)
 8002d4a:	f009 fd82 	bl	800c852 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
	}

}
 8002d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002d52:	482c      	ldr	r0, [pc, #176]	@ (8002e04 <refresh_bat_vlt+0x104>)
 8002d54:	f005 ba46 	b.w	80081e4 <USART1_Tx_HMIdata>
	}else if(bat_adc_val > level_0 && bat_adc_val <= level_20){
 8002d58:	f240 42ed 	movw	r2, #1261	@ 0x4ed
 8002d5c:	4290      	cmp	r0, r2
 8002d5e:	d811      	bhi.n	8002d84 <refresh_bat_vlt+0x84>
		low_power = 0;
 8002d60:	2200      	movs	r2, #0
		sprintf(Tx_Buffer,"Main.n4.val=20\xff\xff\xff");
 8002d62:	492b      	ldr	r1, [pc, #172]	@ (8002e10 <refresh_bat_vlt+0x110>)
 8002d64:	4827      	ldr	r0, [pc, #156]	@ (8002e04 <refresh_bat_vlt+0x104>)
		low_power = 0;
 8002d66:	701a      	strb	r2, [r3, #0]
		sprintf(Tx_Buffer,"Main.n4.val=20\xff\xff\xff");
 8002d68:	f009 fd73 	bl	800c852 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002d6c:	4825      	ldr	r0, [pc, #148]	@ (8002e04 <refresh_bat_vlt+0x104>)
 8002d6e:	f005 fa39 	bl	80081e4 <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.j0.val=20\xff\xff\xff");
 8002d72:	4928      	ldr	r1, [pc, #160]	@ (8002e14 <refresh_bat_vlt+0x114>)
 8002d74:	4823      	ldr	r0, [pc, #140]	@ (8002e04 <refresh_bat_vlt+0x104>)
 8002d76:	f009 fd6c 	bl	800c852 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002d7a:	4822      	ldr	r0, [pc, #136]	@ (8002e04 <refresh_bat_vlt+0x104>)
 8002d7c:	f005 fa32 	bl	80081e4 <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.t0.txt=\"请尽快\r\n 充电\"\xff\xff\xff");
 8002d80:	4925      	ldr	r1, [pc, #148]	@ (8002e18 <refresh_bat_vlt+0x118>)
 8002d82:	e7e1      	b.n	8002d48 <refresh_bat_vlt+0x48>
	}else if(bat_adc_val > level_20 && bat_adc_val <= level_40){
 8002d84:	f240 5213 	movw	r2, #1299	@ 0x513
 8002d88:	4290      	cmp	r0, r2
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	d809      	bhi.n	8002da4 <refresh_bat_vlt+0xa4>
		sprintf(Tx_Buffer,"Main.n4.val=40\xff\xff\xff");
 8002d90:	4922      	ldr	r1, [pc, #136]	@ (8002e1c <refresh_bat_vlt+0x11c>)
 8002d92:	481c      	ldr	r0, [pc, #112]	@ (8002e04 <refresh_bat_vlt+0x104>)
		low_power = 0;
 8002d94:	701a      	strb	r2, [r3, #0]
		sprintf(Tx_Buffer,"Main.n4.val=40\xff\xff\xff");
 8002d96:	f009 fd5c 	bl	800c852 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002d9a:	481a      	ldr	r0, [pc, #104]	@ (8002e04 <refresh_bat_vlt+0x104>)
 8002d9c:	f005 fa22 	bl	80081e4 <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.j0.val=40\xff\xff\xff");
 8002da0:	491f      	ldr	r1, [pc, #124]	@ (8002e20 <refresh_bat_vlt+0x120>)
 8002da2:	e7d1      	b.n	8002d48 <refresh_bat_vlt+0x48>
	}else if(bat_adc_val > level_40 && bat_adc_val <= level_60){
 8002da4:	f5b0 6faa 	cmp.w	r0, #1360	@ 0x550
 8002da8:	d809      	bhi.n	8002dbe <refresh_bat_vlt+0xbe>
		sprintf(Tx_Buffer,"Main.n4.val=60\xff\xff\xff");
 8002daa:	491e      	ldr	r1, [pc, #120]	@ (8002e24 <refresh_bat_vlt+0x124>)
 8002dac:	4815      	ldr	r0, [pc, #84]	@ (8002e04 <refresh_bat_vlt+0x104>)
		low_power = 0;
 8002dae:	701a      	strb	r2, [r3, #0]
		sprintf(Tx_Buffer,"Main.n4.val=60\xff\xff\xff");
 8002db0:	f009 fd4f 	bl	800c852 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002db4:	4813      	ldr	r0, [pc, #76]	@ (8002e04 <refresh_bat_vlt+0x104>)
 8002db6:	f005 fa15 	bl	80081e4 <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.j0.val=60\xff\xff\xff");
 8002dba:	491b      	ldr	r1, [pc, #108]	@ (8002e28 <refresh_bat_vlt+0x128>)
 8002dbc:	e7c4      	b.n	8002d48 <refresh_bat_vlt+0x48>
	}else if(bat_adc_val > level_60 && bat_adc_val <= level_80){
 8002dbe:	f240 51cc 	movw	r1, #1484	@ 0x5cc
 8002dc2:	4288      	cmp	r0, r1
		low_power = 0;
 8002dc4:	701a      	strb	r2, [r3, #0]
	}else if(bat_adc_val > level_60 && bat_adc_val <= level_80){
 8002dc6:	d808      	bhi.n	8002dda <refresh_bat_vlt+0xda>
		sprintf(Tx_Buffer,"Main.n4.val=80\xff\xff\xff");
 8002dc8:	4918      	ldr	r1, [pc, #96]	@ (8002e2c <refresh_bat_vlt+0x12c>)
 8002dca:	480e      	ldr	r0, [pc, #56]	@ (8002e04 <refresh_bat_vlt+0x104>)
 8002dcc:	f009 fd41 	bl	800c852 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002dd0:	480c      	ldr	r0, [pc, #48]	@ (8002e04 <refresh_bat_vlt+0x104>)
 8002dd2:	f005 fa07 	bl	80081e4 <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.j0.val=80\xff\xff\xff");
 8002dd6:	4916      	ldr	r1, [pc, #88]	@ (8002e30 <refresh_bat_vlt+0x130>)
 8002dd8:	e7b6      	b.n	8002d48 <refresh_bat_vlt+0x48>
		sprintf(Tx_Buffer,"Main.n4.val=100\xff\xff\xff");
 8002dda:	4916      	ldr	r1, [pc, #88]	@ (8002e34 <refresh_bat_vlt+0x134>)
 8002ddc:	4809      	ldr	r0, [pc, #36]	@ (8002e04 <refresh_bat_vlt+0x104>)
 8002dde:	f009 fd38 	bl	800c852 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002de2:	4808      	ldr	r0, [pc, #32]	@ (8002e04 <refresh_bat_vlt+0x104>)
 8002de4:	f005 f9fe 	bl	80081e4 <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.j0.val=100\xff\xff\xff");
 8002de8:	4913      	ldr	r1, [pc, #76]	@ (8002e38 <refresh_bat_vlt+0x138>)
 8002dea:	e7ad      	b.n	8002d48 <refresh_bat_vlt+0x48>
 8002dec:	f3af 8000 	nop.w
 8002df0:	c28f5c29 	.word	0xc28f5c29
 8002df4:	3ff028f5 	.word	0x3ff028f5
 8002df8:	200008be 	.word	0x200008be
 8002dfc:	200008c0 	.word	0x200008c0
 8002e00:	0800f26a 	.word	0x0800f26a
 8002e04:	20000b8e 	.word	0x20000b8e
 8002e08:	0800f27b 	.word	0x0800f27b
 8002e0c:	0800f28c 	.word	0x0800f28c
 8002e10:	0800f2b0 	.word	0x0800f2b0
 8002e14:	0800f2c2 	.word	0x0800f2c2
 8002e18:	0800f2d4 	.word	0x0800f2d4
 8002e1c:	0800f2f8 	.word	0x0800f2f8
 8002e20:	0800f30a 	.word	0x0800f30a
 8002e24:	0800f31c 	.word	0x0800f31c
 8002e28:	0800f32e 	.word	0x0800f32e
 8002e2c:	0800f340 	.word	0x0800f340
 8002e30:	0800f352 	.word	0x0800f352
 8002e34:	0800f364 	.word	0x0800f364
 8002e38:	0800f377 	.word	0x0800f377

08002e3c <Buzzer>:
#include "buzzer.h"

void Buzzer(uint16_t beep_ms){
 8002e3c:	b538      	push	{r3, r4, r5, lr}
 8002e3e:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002e40:	4d08      	ldr	r5, [pc, #32]	@ (8002e64 <Buzzer+0x28>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e48:	4628      	mov	r0, r5
 8002e4a:	f006 f8d3 	bl	8008ff4 <HAL_GPIO_WritePin>
	HAL_Delay(beep_ms);
 8002e4e:	4620      	mov	r0, r4
 8002e50:	f005 fb08 	bl	8008464 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002e54:	4628      	mov	r0, r5
}
 8002e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e60:	f006 b8c8 	b.w	8008ff4 <HAL_GPIO_WritePin>
 8002e64:	40010c00 	.word	0x40010c00

08002e68 <disk_status>:

  default:
      status = STA_NOINIT;
  }
  return status;
}
 8002e68:	3800      	subs	r0, #0
 8002e6a:	bf18      	it	ne
 8002e6c:	2001      	movne	r0, #1
 8002e6e:	4770      	bx	lr

08002e70 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002e70:	b508      	push	{r3, lr}
  DSTATUS status = STA_NOINIT;
  switch (pdrv) {
 8002e72:	b928      	cbnz	r0, 8002e80 <disk_initialize+0x10>
  case DEV_SPI_SD:          /* SD CARD */
      if (SD_Init()==SD_RESPONSE_NO_ERROR) {
 8002e74:	f7ff fe22 	bl	8002abc <SD_Init>
 8002e78:	3800      	subs	r0, #0
 8002e7a:	bf18      	it	ne
 8002e7c:	2001      	movne	r0, #1

  default:
      status = STA_NOINIT;
  }
  return status;
}
 8002e7e:	bd08      	pop	{r3, pc}
          status = STA_NOINIT;
 8002e80:	2001      	movs	r0, #1
 8002e82:	e7fc      	b.n	8002e7e <disk_initialize+0xe>

08002e84 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002e84:	b513      	push	{r0, r1, r4, lr}
 8002e86:	4604      	mov	r4, r0
 8002e88:	4608      	mov	r0, r1
 8002e8a:	4619      	mov	r1, r3
  DRESULT status = RES_PARERR;
  SD_Error SD_state = SD_RESPONSE_NO_ERROR;

  switch (pdrv) {
 8002e8c:	4623      	mov	r3, r4
 8002e8e:	b964      	cbnz	r4, 8002eaa <disk_read+0x26>
  case DEV_SPI_SD: /* SD CARD */
      SD_state=SD_ReadMultiBlocks(buff,sector *SD_BLOCK_SIZE,SD_BLOCK_SIZE,count);
 8002e90:	9101      	str	r1, [sp, #4]
 8002e92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e96:	0252      	lsls	r2, r2, #9
 8002e98:	9100      	str	r1, [sp, #0]
 8002e9a:	f7ff fb07 	bl	80024ac <SD_ReadMultiBlocks>

      if (SD_state!=SD_RESPONSE_NO_ERROR)
 8002e9e:	3800      	subs	r0, #0
 8002ea0:	bf18      	it	ne
 8002ea2:	2001      	movne	r0, #1
 8002ea4:	0080      	lsls	r0, r0, #2

  default:
      status = RES_PARERR;
  }
  return status;
}
 8002ea6:	b002      	add	sp, #8
 8002ea8:	bd10      	pop	{r4, pc}
  DRESULT status = RES_PARERR;
 8002eaa:	2004      	movs	r0, #4
 8002eac:	e7fb      	b.n	8002ea6 <disk_read+0x22>

08002eae <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8002eae:	b513      	push	{r0, r1, r4, lr}
 8002eb0:	4604      	mov	r4, r0
 8002eb2:	4608      	mov	r0, r1
  DRESULT status = RES_PARERR;
  SD_Error SD_state = SD_RESPONSE_NO_ERROR;

  if (!count) {
 8002eb4:	b173      	cbz	r3, 8002ed4 <disk_write+0x26>
      return RES_PARERR;    /* Check parameter */
  }

  switch (pdrv) {
 8002eb6:	b96c      	cbnz	r4, 8002ed4 <disk_write+0x26>
  case DEV_SPI_SD: /* SD CARD */

      SD_state=SD_WriteMultiBlocks((uint8_t *)buff,sector*SD_BLOCK_SIZE,SD_BLOCK_SIZE,count);
 8002eb8:	9301      	str	r3, [sp, #4]
 8002eba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ebe:	0252      	lsls	r2, r2, #9
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	4623      	mov	r3, r4
 8002ec4:	f7ff fb42 	bl	800254c <SD_WriteMultiBlocks>

      if (SD_state!=SD_RESPONSE_NO_ERROR)
 8002ec8:	3800      	subs	r0, #0
 8002eca:	bf18      	it	ne
 8002ecc:	2001      	movne	r0, #1
 8002ece:	0080      	lsls	r0, r0, #2

  default:
      status = RES_PARERR;
  }
  return status;
}
 8002ed0:	b002      	add	sp, #8
 8002ed2:	bd10      	pop	{r4, pc}
      return RES_PARERR;    /* Check parameter */
 8002ed4:	2004      	movs	r0, #4
 8002ed6:	e7fb      	b.n	8002ed0 <disk_write+0x22>

08002ed8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002ed8:	b538      	push	{r3, r4, r5, lr}
 8002eda:	4615      	mov	r5, r2
  DRESULT status = RES_PARERR;
  switch (pdrv) {
 8002edc:	4604      	mov	r4, r0
 8002ede:	b9b0      	cbnz	r0, 8002f0e <disk_ioctl+0x36>
  case DEV_SPI_SD: /* SD CARD */
      switch (cmd) {
 8002ee0:	2902      	cmp	r1, #2
 8002ee2:	d00c      	beq.n	8002efe <disk_ioctl+0x26>
 8002ee4:	2903      	cmp	r1, #3
 8002ee6:	d00f      	beq.n	8002f08 <disk_ioctl+0x30>
 8002ee8:	2901      	cmp	r1, #1
 8002eea:	d10b      	bne.n	8002f04 <disk_ioctl+0x2c>
      case GET_BLOCK_SIZE :
          *(DWORD * )buff = 1;
          break;

      case GET_SECTOR_COUNT:
  *(DWORD*)buff = SDCardInfo.CardCapacity/SDCardInfo.CardBlockSize;
 8002eec:	4909      	ldr	r1, [pc, #36]	@ (8002f14 <disk_ioctl+0x3c>)
 8002eee:	4603      	mov	r3, r0
 8002ef0:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8002ef2:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	@ 0x48
 8002ef6:	f7fd ffc5 	bl	8000e84 <__aeabi_uldivmod>
 8002efa:	6028      	str	r0, [r5, #0]
          break;
 8002efc:	e002      	b.n	8002f04 <disk_ioctl+0x2c>
          *(WORD * )buff = SD_BLOCK_SIZE;
 8002efe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f02:	8013      	strh	r3, [r2, #0]

  default:
      status = RES_PARERR;
  }
  return status;
}
 8002f04:	4620      	mov	r0, r4
 8002f06:	bd38      	pop	{r3, r4, r5, pc}
          *(DWORD * )buff = 1;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	6013      	str	r3, [r2, #0]
          break;
 8002f0c:	e7fa      	b.n	8002f04 <disk_ioctl+0x2c>
  DRESULT status = RES_PARERR;
 8002f0e:	2404      	movs	r4, #4
 8002f10:	e7f8      	b.n	8002f04 <disk_ioctl+0x2c>
 8002f12:	bf00      	nop
 8002f14:	200007d0 	.word	0x200007d0

08002f18 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f18:	4b0e      	ldr	r3, [pc, #56]	@ (8002f54 <MX_DMA_Init+0x3c>)
{
 8002f1a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f1c:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 8002f1e:	2106      	movs	r1, #6
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f20:	f042 0201 	orr.w	r2, r2, #1
 8002f24:	615a      	str	r2, [r3, #20]
 8002f26:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 8002f28:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 8002f30:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f32:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 8002f34:	f005 fdc6 	bl	8008ac4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002f38:	200b      	movs	r0, #11
 8002f3a:	f005 fdf3 	bl	8008b24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	200d      	movs	r0, #13
 8002f42:	4611      	mov	r1, r2
 8002f44:	f005 fdbe 	bl	8008ac4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002f48:	200d      	movs	r0, #13

}
 8002f4a:	b003      	add	sp, #12
 8002f4c:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002f50:	f005 bde8 	b.w	8008b24 <HAL_NVIC_EnableIRQ>
 8002f54:	40021000 	.word	0x40021000

08002f58 <Set_Dosage>:
uint8_t read_i2c = 0;
uint16_t Dosage_set;
uint16_t Dosage_load;
uint16_t current_TreeNo = 0;

void Set_Dosage(){
 8002f58:	b538      	push	{r3, r4, r5, lr}
	//刷新注药量设定值
		if(key_value_Refresh){
 8002f5a:	4c37      	ldr	r4, [pc, #220]	@ (8003038 <Set_Dosage+0xe0>)
 8002f5c:	7823      	ldrb	r3, [r4, #0]
 8002f5e:	b18b      	cbz	r3, 8002f84 <Set_Dosage+0x2c>
			sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",Dosage_set);
 8002f60:	4b36      	ldr	r3, [pc, #216]	@ (800303c <Set_Dosage+0xe4>)
 8002f62:	4937      	ldr	r1, [pc, #220]	@ (8003040 <Set_Dosage+0xe8>)
 8002f64:	881a      	ldrh	r2, [r3, #0]
 8002f66:	4837      	ldr	r0, [pc, #220]	@ (8003044 <Set_Dosage+0xec>)
 8002f68:	f009 fa70 	bl	800c44c <siprintf>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002f6c:	4835      	ldr	r0, [pc, #212]	@ (8003044 <Set_Dosage+0xec>)
 8002f6e:	f005 f939 	bl	80081e4 <USART1_Tx_HMIdata>
			key_value_Refresh = 0;
 8002f72:	2300      	movs	r3, #0

			sprintf(Tx_Buffer,"Main.t0.txt=\"\"\xff\xff\xff");
 8002f74:	4934      	ldr	r1, [pc, #208]	@ (8003048 <Set_Dosage+0xf0>)
 8002f76:	4833      	ldr	r0, [pc, #204]	@ (8003044 <Set_Dosage+0xec>)
			key_value_Refresh = 0;
 8002f78:	7023      	strb	r3, [r4, #0]
			sprintf(Tx_Buffer,"Main.t0.txt=\"\"\xff\xff\xff");
 8002f7a:	f009 fc6a 	bl	800c852 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002f7e:	4831      	ldr	r0, [pc, #196]	@ (8003044 <Set_Dosage+0xec>)
 8002f80:	f005 f930 	bl	80081e4 <USART1_Tx_HMIdata>
		}
	//确认键按下，等待启动按键按下
		if(confirm_pressed && waiting_start){
 8002f84:	4a31      	ldr	r2, [pc, #196]	@ (800304c <Set_Dosage+0xf4>)
 8002f86:	4c32      	ldr	r4, [pc, #200]	@ (8003050 <Set_Dosage+0xf8>)
 8002f88:	7811      	ldrb	r1, [r2, #0]
 8002f8a:	7823      	ldrb	r3, [r4, #0]
 8002f8c:	2900      	cmp	r1, #0
 8002f8e:	d030      	beq.n	8002ff2 <Set_Dosage+0x9a>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d030      	beq.n	8002ff6 <Set_Dosage+0x9e>
			confirm_pressed = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	7013      	strb	r3, [r2, #0]
		}
	//等待START状态下START按键被按下，显示√
		if(waiting_start && start_pressed){
 8002f98:	4b2e      	ldr	r3, [pc, #184]	@ (8003054 <Set_Dosage+0xfc>)
 8002f9a:	781a      	ldrb	r2, [r3, #0]
 8002f9c:	b35a      	cbz	r2, 8002ff6 <Set_Dosage+0x9e>
			waiting_start = 0;
 8002f9e:	2200      	movs	r2, #0
			start_pressed = 0;
 8002fa0:	701a      	strb	r2, [r3, #0]
			Injecting = 1;
 8002fa2:	2301      	movs	r3, #1
			waiting_start = 0;
 8002fa4:	7022      	strb	r2, [r4, #0]
			Injecting = 1;
 8002fa6:	4a2c      	ldr	r2, [pc, #176]	@ (8003058 <Set_Dosage+0x100>)
			first_run_clcDos = 1;
			current_TreeNo++;
 8002fa8:	4d2c      	ldr	r5, [pc, #176]	@ (800305c <Set_Dosage+0x104>)
			Injecting = 1;
 8002faa:	7013      	strb	r3, [r2, #0]
			first_run_clcDos = 1;
 8002fac:	4a2c      	ldr	r2, [pc, #176]	@ (8003060 <Set_Dosage+0x108>)

			AD24C02_Write2Byte(DOSAGE_SET_ADDRESS,&Dosage_load);
 8002fae:	492d      	ldr	r1, [pc, #180]	@ (8003064 <Set_Dosage+0x10c>)
			first_run_clcDos = 1;
 8002fb0:	7013      	strb	r3, [r2, #0]
			current_TreeNo++;
 8002fb2:	882b      	ldrh	r3, [r5, #0]
			AD24C02_Write2Byte(DOSAGE_SET_ADDRESS,&Dosage_load);
 8002fb4:	2010      	movs	r0, #16
			current_TreeNo++;
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	802b      	strh	r3, [r5, #0]
			AD24C02_Write2Byte(DOSAGE_SET_ADDRESS,&Dosage_load);
 8002fba:	f7fe f90f 	bl	80011dc <AD24C02_Write2Byte>
			HAL_Delay(10);
 8002fbe:	200a      	movs	r0, #10
 8002fc0:	f005 fa50 	bl	8008464 <HAL_Delay>

			sprintf(Tx_Buffer,"Main.t8.txt=\"√\"\xff\xff\xff");
 8002fc4:	4928      	ldr	r1, [pc, #160]	@ (8003068 <Set_Dosage+0x110>)
 8002fc6:	481f      	ldr	r0, [pc, #124]	@ (8003044 <Set_Dosage+0xec>)
 8002fc8:	f009 fc43 	bl	800c852 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002fcc:	481d      	ldr	r0, [pc, #116]	@ (8003044 <Set_Dosage+0xec>)
 8002fce:	f005 f909 	bl	80081e4 <USART1_Tx_HMIdata>

			sprintf(Tx_Buffer,"Main.t0.txt=\"\"\xff\xff\xff");
 8002fd2:	491d      	ldr	r1, [pc, #116]	@ (8003048 <Set_Dosage+0xf0>)
 8002fd4:	481b      	ldr	r0, [pc, #108]	@ (8003044 <Set_Dosage+0xec>)
 8002fd6:	f009 fc3c 	bl	800c852 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002fda:	481a      	ldr	r0, [pc, #104]	@ (8003044 <Set_Dosage+0xec>)
 8002fdc:	f005 f902 	bl	80081e4 <USART1_Tx_HMIdata>

			sprintf(Tx_Buffer,"Main.t19.txt=\"%04d\"\xff\xff\xff",current_TreeNo);
 8002fe0:	882a      	ldrh	r2, [r5, #0]
 8002fe2:	4922      	ldr	r1, [pc, #136]	@ (800306c <Set_Dosage+0x114>)
 8002fe4:	4817      	ldr	r0, [pc, #92]	@ (8003044 <Set_Dosage+0xec>)
 8002fe6:	f009 fa31 	bl	800c44c <siprintf>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002fea:	4816      	ldr	r0, [pc, #88]	@ (8003044 <Set_Dosage+0xec>)
 8002fec:	f005 f8fa 	bl	80081e4 <USART1_Tx_HMIdata>
 8002ff0:	e001      	b.n	8002ff6 <Set_Dosage+0x9e>
		if(waiting_start && start_pressed){
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1d0      	bne.n	8002f98 <Set_Dosage+0x40>
		}
	//等待START时间超时，√消失，需要重新按下确认键
		if(waiting_start_timeout){
 8002ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8003070 <Set_Dosage+0x118>)
 8002ff8:	7813      	ldrb	r3, [r2, #0]
 8002ffa:	b113      	cbz	r3, 8003002 <Set_Dosage+0xaa>
			waiting_start_timeout = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	7013      	strb	r3, [r2, #0]
			waiting_start = 0;
 8003000:	7023      	strb	r3, [r4, #0]
		}

		//Q_SET按键按下，读取上次保存的剂量值
		if(read_i2c && !waiting_start && !Injecting){
 8003002:	4a1c      	ldr	r2, [pc, #112]	@ (8003074 <Set_Dosage+0x11c>)
 8003004:	7813      	ldrb	r3, [r2, #0]
 8003006:	b1b3      	cbz	r3, 8003036 <Set_Dosage+0xde>
 8003008:	4913      	ldr	r1, [pc, #76]	@ (8003058 <Set_Dosage+0x100>)
 800300a:	7823      	ldrb	r3, [r4, #0]
 800300c:	7809      	ldrb	r1, [r1, #0]
 800300e:	430b      	orrs	r3, r1
 8003010:	d111      	bne.n	8003036 <Set_Dosage+0xde>
			read_i2c = 0;
			AD24C02_Read2Byte(DOSAGE_SET_ADDRESS,&Dosage_val);
 8003012:	4c19      	ldr	r4, [pc, #100]	@ (8003078 <Set_Dosage+0x120>)
 8003014:	2010      	movs	r0, #16
 8003016:	4621      	mov	r1, r4
			read_i2c = 0;
 8003018:	7013      	strb	r3, [r2, #0]
			AD24C02_Read2Byte(DOSAGE_SET_ADDRESS,&Dosage_val);
 800301a:	f7fe f8f0 	bl	80011fe <AD24C02_Read2Byte>
			Dosage_set = Dosage_val;
 800301e:	8822      	ldrh	r2, [r4, #0]
 8003020:	4b06      	ldr	r3, [pc, #24]	@ (800303c <Set_Dosage+0xe4>)
			sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",Dosage_set);
 8003022:	4907      	ldr	r1, [pc, #28]	@ (8003040 <Set_Dosage+0xe8>)
 8003024:	4807      	ldr	r0, [pc, #28]	@ (8003044 <Set_Dosage+0xec>)
			Dosage_set = Dosage_val;
 8003026:	801a      	strh	r2, [r3, #0]
			sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",Dosage_set);
 8003028:	f009 fa10 	bl	800c44c <siprintf>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
		}
}
 800302c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8003030:	4804      	ldr	r0, [pc, #16]	@ (8003044 <Set_Dosage+0xec>)
 8003032:	f005 b8d7 	b.w	80081e4 <USART1_Tx_HMIdata>
}
 8003036:	bd38      	pop	{r3, r4, r5, pc}
 8003038:	20000927 	.word	0x20000927
 800303c:	200008c6 	.word	0x200008c6
 8003040:	0800f38a 	.word	0x0800f38a
 8003044:	20000b8e 	.word	0x20000b8e
 8003048:	0800f39c 	.word	0x0800f39c
 800304c:	2000092f 	.word	0x2000092f
 8003050:	20000930 	.word	0x20000930
 8003054:	2000092e 	.word	0x2000092e
 8003058:	20000944 	.word	0x20000944
 800305c:	200008c2 	.word	0x200008c2
 8003060:	200008c9 	.word	0x200008c9
 8003064:	200008c4 	.word	0x200008c4
 8003068:	0800f3ae 	.word	0x0800f3ae
 800306c:	0800f3c3 	.word	0x0800f3c3
 8003070:	20000a4d 	.word	0x20000a4d
 8003074:	200008c8 	.word	0x200008c8
 8003078:	200008ca 	.word	0x200008ca

0800307c <Refresh_counter>:

void Refresh_counter(){
 800307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	AD24C02_Write2Byte(SUM_DOSAGE_ADDRESS,&total_inject_Dosage);
 800307e:	4e18      	ldr	r6, [pc, #96]	@ (80030e0 <Refresh_counter+0x64>)
	HAL_Delay(10);
	AD24C02_Write2Byte(TOTAL_TREE_ADDRESS,&total_Times);
 8003080:	4f18      	ldr	r7, [pc, #96]	@ (80030e4 <Refresh_counter+0x68>)
	AD24C02_Write2Byte(SUM_DOSAGE_ADDRESS,&total_inject_Dosage);
 8003082:	4631      	mov	r1, r6
 8003084:	2020      	movs	r0, #32
 8003086:	f7fe f8a9 	bl	80011dc <AD24C02_Write2Byte>
	HAL_Delay(10);
 800308a:	200a      	movs	r0, #10
 800308c:	f005 f9ea 	bl	8008464 <HAL_Delay>
	HAL_Delay(10);
	AD24C02_Write2Byte(CURRENT_TREE_NUMBER,&current_TreeNo);
 8003090:	4d15      	ldr	r5, [pc, #84]	@ (80030e8 <Refresh_counter+0x6c>)
	AD24C02_Write2Byte(TOTAL_TREE_ADDRESS,&total_Times);
 8003092:	4639      	mov	r1, r7
 8003094:	2030      	movs	r0, #48	@ 0x30

	sprintf(Tx_Buffer,"Main.n2.val=%d\xff\xff\xff",total_Times);
 8003096:	4c15      	ldr	r4, [pc, #84]	@ (80030ec <Refresh_counter+0x70>)
	AD24C02_Write2Byte(TOTAL_TREE_ADDRESS,&total_Times);
 8003098:	f7fe f8a0 	bl	80011dc <AD24C02_Write2Byte>
	HAL_Delay(10);
 800309c:	200a      	movs	r0, #10
 800309e:	f005 f9e1 	bl	8008464 <HAL_Delay>
	AD24C02_Write2Byte(CURRENT_TREE_NUMBER,&current_TreeNo);
 80030a2:	4629      	mov	r1, r5
 80030a4:	2040      	movs	r0, #64	@ 0x40
 80030a6:	f7fe f899 	bl	80011dc <AD24C02_Write2Byte>
	sprintf(Tx_Buffer,"Main.n2.val=%d\xff\xff\xff",total_Times);
 80030aa:	883a      	ldrh	r2, [r7, #0]
 80030ac:	4910      	ldr	r1, [pc, #64]	@ (80030f0 <Refresh_counter+0x74>)
 80030ae:	4620      	mov	r0, r4
 80030b0:	f009 f9cc 	bl	800c44c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80030b4:	4620      	mov	r0, r4
 80030b6:	f005 f895 	bl	80081e4 <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"Main.n3.val=%d\xff\xff\xff",total_inject_Dosage);
 80030ba:	8832      	ldrh	r2, [r6, #0]
 80030bc:	490d      	ldr	r1, [pc, #52]	@ (80030f4 <Refresh_counter+0x78>)
 80030be:	4620      	mov	r0, r4
 80030c0:	f009 f9c4 	bl	800c44c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80030c4:	4620      	mov	r0, r4
 80030c6:	f005 f88d 	bl	80081e4 <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"Main.t19.txt=\"%04d\"\xff\xff\xff",current_TreeNo);
 80030ca:	4620      	mov	r0, r4
 80030cc:	882a      	ldrh	r2, [r5, #0]
 80030ce:	490a      	ldr	r1, [pc, #40]	@ (80030f8 <Refresh_counter+0x7c>)
 80030d0:	f009 f9bc 	bl	800c44c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80030d4:	4620      	mov	r0, r4
}
 80030d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80030da:	f005 b883 	b.w	80081e4 <USART1_Tx_HMIdata>
 80030de:	bf00      	nop
 80030e0:	20000a50 	.word	0x20000a50
 80030e4:	20000a4e 	.word	0x20000a4e
 80030e8:	200008c2 	.word	0x200008c2
 80030ec:	20000b8e 	.word	0x20000b8e
 80030f0:	0800ef43 	.word	0x0800ef43
 80030f4:	0800ef55 	.word	0x0800ef55
 80030f8:	0800f3c3 	.word	0x0800f3c3

080030fc <Refresh_Dosage>:

void Refresh_Dosage(){
 80030fc:	b508      	push	{r3, lr}
	uint16_t RemainingDosage = 0;
	RemainingDosage = RemainingTimes * 2;

	if(Injecting){
 80030fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003130 <Refresh_Dosage+0x34>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	b1a3      	cbz	r3, 800312e <Refresh_Dosage+0x32>
	RemainingDosage = RemainingTimes * 2;
 8003104:	4b0b      	ldr	r3, [pc, #44]	@ (8003134 <Refresh_Dosage+0x38>)
		sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",RemainingDosage);
 8003106:	490c      	ldr	r1, [pc, #48]	@ (8003138 <Refresh_Dosage+0x3c>)
	RemainingDosage = RemainingTimes * 2;
 8003108:	781a      	ldrb	r2, [r3, #0]
		sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",RemainingDosage);
 800310a:	480c      	ldr	r0, [pc, #48]	@ (800313c <Refresh_Dosage+0x40>)
 800310c:	0052      	lsls	r2, r2, #1
 800310e:	f009 f99d 	bl	800c44c <siprintf>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8003112:	480a      	ldr	r0, [pc, #40]	@ (800313c <Refresh_Dosage+0x40>)
 8003114:	f005 f866 	bl	80081e4 <USART1_Tx_HMIdata>

		sprintf(Tx_Buffer,"Main.t0.txt=\"正在注药\"\xff\xff\xff");
 8003118:	4909      	ldr	r1, [pc, #36]	@ (8003140 <Refresh_Dosage+0x44>)
 800311a:	4808      	ldr	r0, [pc, #32]	@ (800313c <Refresh_Dosage+0x40>)
 800311c:	f009 fb99 	bl	800c852 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8003120:	4806      	ldr	r0, [pc, #24]	@ (800313c <Refresh_Dosage+0x40>)
 8003122:	f005 f85f 	bl	80081e4 <USART1_Tx_HMIdata>

		Refresh_counter();
	}
}
 8003126:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Refresh_counter();
 800312a:	f7ff bfa7 	b.w	800307c <Refresh_counter>
}
 800312e:	bd08      	pop	{r3, pc}
 8003130:	20000944 	.word	0x20000944
 8003134:	20000a54 	.word	0x20000a54
 8003138:	0800f38a 	.word	0x0800f38a
 800313c:	20000b8e 	.word	0x20000b8e
 8003140:	0800f3da 	.word	0x0800f3da

08003144 <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 8003144:	6800      	ldr	r0, [r0, #0]
 8003146:	4770      	bx	lr

08003148 <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8003148:	4603      	mov	r3, r0
	rv = rv << 8 | ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 800314a:	6800      	ldr	r0, [r0, #0]
 800314c:	6859      	ldr	r1, [r3, #4]
 800314e:	4770      	bx	lr

08003150 <st_dword>:
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8003150:	0a0b      	lsrs	r3, r1, #8
 8003152:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003154:	7043      	strb	r3, [r0, #1]
 8003156:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8003158:	0e09      	lsrs	r1, r1, #24
 800315a:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 800315c:	70c1      	strb	r1, [r0, #3]
}
 800315e:	4770      	bx	lr

08003160 <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8003160:	0a11      	lsrs	r1, r2, #8
 8003162:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003164:	7041      	strb	r1, [r0, #1]
 8003166:	0c11      	lsrs	r1, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8003168:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800316a:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 800316c:	0a1a      	lsrs	r2, r3, #8
 800316e:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8003170:	7142      	strb	r2, [r0, #5]
 8003172:	0c1a      	lsrs	r2, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8003174:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8003176:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003178:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
 800317a:	71c3      	strb	r3, [r0, #7]
}
 800317c:	4770      	bx	lr
	...

08003180 <chk_share>:

static FRESULT chk_share (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read mode open, 1:Write mode open, 2:Delete or rename) */
)
{
 8003180:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search open object table for the object */
	be = 0;
 8003182:	2400      	movs	r4, #0
 8003184:	4b14      	ldr	r3, [pc, #80]	@ (80031d8 <chk_share+0x58>)
	for (i = 0; i < FF_FS_LOCK; i++) {
 8003186:	4622      	mov	r2, r4
 8003188:	461d      	mov	r5, r3
		if (Files[i].fs) {	/* Existing entry */
 800318a:	681e      	ldr	r6, [r3, #0]
 800318c:	b16e      	cbz	r6, 80031aa <chk_share+0x2a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 800318e:	6807      	ldr	r7, [r0, #0]
 8003190:	42be      	cmp	r6, r7
 8003192:	d10b      	bne.n	80031ac <chk_share+0x2c>
 8003194:	685f      	ldr	r7, [r3, #4]
 8003196:	6886      	ldr	r6, [r0, #8]
 8003198:	42b7      	cmp	r7, r6
 800319a:	d107      	bne.n	80031ac <chk_share+0x2c>
				Files[i].clu == dp->obj.sclust &&
 800319c:	689f      	ldr	r7, [r3, #8]
 800319e:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80031a0:	42b7      	cmp	r7, r6
 80031a2:	d103      	bne.n	80031ac <chk_share+0x2c>
	if (i == FF_FS_LOCK) {	/* The object has not been opened */
		return (!be && acc != 2) ? FR_TOO_MANY_OPEN_FILES : FR_OK;	/* Is there a blank entry for new object? */
	}

	/* The object was opened. Reject any open against writing file and all write mode open */
	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80031a4:	b179      	cbz	r1, 80031c6 <chk_share+0x46>
 80031a6:	2010      	movs	r0, #16
 80031a8:	e00c      	b.n	80031c4 <chk_share+0x44>
			be = 1;
 80031aa:	2401      	movs	r4, #1
	for (i = 0; i < FF_FS_LOCK; i++) {
 80031ac:	3201      	adds	r2, #1
 80031ae:	2a04      	cmp	r2, #4
 80031b0:	f103 0310 	add.w	r3, r3, #16
 80031b4:	d1e9      	bne.n	800318a <chk_share+0xa>
		return (!be && acc != 2) ? FR_TOO_MANY_OPEN_FILES : FR_OK;	/* Is there a blank entry for new object? */
 80031b6:	b10c      	cbz	r4, 80031bc <chk_share+0x3c>
 80031b8:	2000      	movs	r0, #0
 80031ba:	e003      	b.n	80031c4 <chk_share+0x44>
 80031bc:	2902      	cmp	r1, #2
 80031be:	bf0c      	ite	eq
 80031c0:	2000      	moveq	r0, #0
 80031c2:	2012      	movne	r0, #18
}
 80031c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80031c6:	eb05 1302 	add.w	r3, r5, r2, lsl #4
 80031ca:	68d8      	ldr	r0, [r3, #12]
 80031cc:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 80031d0:	4258      	negs	r0, r3
 80031d2:	4158      	adcs	r0, r3
 80031d4:	0100      	lsls	r0, r0, #4
 80031d6:	e7f5      	b.n	80031c4 <chk_share+0x44>
 80031d8:	200008cc 	.word	0x200008cc

080031dc <inc_share>:

static UINT inc_share (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80031dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031de:	4c1d      	ldr	r4, [pc, #116]	@ (8003254 <inc_share+0x78>)
	UINT i;


	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 80031e0:	2300      	movs	r3, #0
 80031e2:	4622      	mov	r2, r4
		if (Files[i].fs == dp->obj.fs
 80031e4:	6807      	ldr	r7, [r0, #0]
 80031e6:	6825      	ldr	r5, [r4, #0]
 80031e8:	42bd      	cmp	r5, r7
 80031ea:	d107      	bne.n	80031fc <inc_share+0x20>
		 && Files[i].clu == dp->obj.sclust
 80031ec:	6866      	ldr	r6, [r4, #4]
 80031ee:	6885      	ldr	r5, [r0, #8]
 80031f0:	42ae      	cmp	r6, r5
 80031f2:	d103      	bne.n	80031fc <inc_share+0x20>
		 && Files[i].ofs == dp->dptr) break;
 80031f4:	68a6      	ldr	r6, [r4, #8]
 80031f6:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 80031f8:	42ae      	cmp	r6, r5
 80031fa:	d015      	beq.n	8003228 <inc_share+0x4c>
	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 80031fc:	3301      	adds	r3, #1
 80031fe:	2b04      	cmp	r3, #4
 8003200:	f104 0410 	add.w	r4, r4, #16
 8003204:	d1ef      	bne.n	80031e6 <inc_share+0xa>
 8003206:	2300      	movs	r3, #0
	}

	if (i == FF_FS_LOCK) {			/* Not opened. Register it as new. */
		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 8003208:	011e      	lsls	r6, r3, #4
 800320a:	5995      	ldr	r5, [r2, r6]
 800320c:	eb02 1403 	add.w	r4, r2, r3, lsl #4
 8003210:	b9c5      	cbnz	r5, 8003244 <inc_share+0x68>
		if (i == FF_FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8003212:	5197      	str	r7, [r2, r6]
		Files[i].clu = dp->obj.sclust;
 8003214:	6886      	ldr	r6, [r0, #8]
		Files[i].ofs = dp->dptr;
 8003216:	6b00      	ldr	r0, [r0, #48]	@ 0x30
		Files[i].ctr = 0;
	}

	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003218:	2901      	cmp	r1, #1
		Files[i].ctr = 0;
 800321a:	e9c4 0502 	strd	r0, r5, [r4, #8]
		Files[i].clu = dp->obj.sclust;
 800321e:	6066      	str	r6, [r4, #4]
	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003220:	d107      	bne.n	8003232 <inc_share+0x56>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003222:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003226:	e008      	b.n	800323a <inc_share+0x5e>
	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003228:	eb02 1003 	add.w	r0, r2, r3, lsl #4
 800322c:	2901      	cmp	r1, #1
 800322e:	68c0      	ldr	r0, [r0, #12]
 8003230:	d00d      	beq.n	800324e <inc_share+0x72>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003232:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8003236:	68c9      	ldr	r1, [r1, #12]
 8003238:	3101      	adds	r1, #1
 800323a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800323e:	60d1      	str	r1, [r2, #12]

	return i + 1;	/* Index number origin from 1 */
 8003240:	1c58      	adds	r0, r3, #1
}
 8003242:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 8003244:	3301      	adds	r3, #1
 8003246:	2b04      	cmp	r3, #4
 8003248:	d1de      	bne.n	8003208 <inc_share+0x2c>
		if (i == FF_FS_LOCK) return 0;	/* No free entry to register (int err) */
 800324a:	2000      	movs	r0, #0
 800324c:	e7f9      	b.n	8003242 <inc_share+0x66>
	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 800324e:	2800      	cmp	r0, #0
 8003250:	d0e7      	beq.n	8003222 <inc_share+0x46>
 8003252:	e7fa      	b.n	800324a <inc_share+0x6e>
 8003254:	200008cc 	.word	0x200008cc

08003258 <dec_share>:
{
	UINT n;
	FRESULT res;


	if (--i < FF_FS_LOCK) {	/* Index number origin from 0 */
 8003258:	3801      	subs	r0, #1
 800325a:	2803      	cmp	r0, #3
 800325c:	d814      	bhi.n	8003288 <dec_share+0x30>
		n = Files[i].ctr;
 800325e:	4a0b      	ldr	r2, [pc, #44]	@ (800328c <dec_share+0x34>)
 8003260:	0101      	lsls	r1, r0, #4
 8003262:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8003266:	68c3      	ldr	r3, [r0, #12]
		if (n == 0x100) n = 0;	/* If write mode open, delete the object semaphore */
 8003268:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800326c:	d104      	bne.n	8003278 <dec_share+0x20>
		if (n > 0) n--;			/* Decrement read mode open count */
		Files[i].ctr = n;
 800326e:	2300      	movs	r3, #0
 8003270:	60c3      	str	r3, [r0, #12]
		if (n == 0) {			/* Delete the object semaphore if open count becomes zero */
			Files[i].fs = 0;	/* Free the entry <<<If this memory write operation is not in atomic, FF_FS_REENTRANT == 1 and FF_VOLUMES > 1, there is a potential error in this process >>> */
 8003272:	2300      	movs	r3, #0
 8003274:	5053      	str	r3, [r2, r1]
 8003276:	e005      	b.n	8003284 <dec_share+0x2c>
		if (n > 0) n--;			/* Decrement read mode open count */
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0fa      	beq.n	8003272 <dec_share+0x1a>
 800327c:	3b01      	subs	r3, #1
		Files[i].ctr = n;
 800327e:	60c3      	str	r3, [r0, #12]
		if (n == 0) {			/* Delete the object semaphore if open count becomes zero */
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0f6      	beq.n	8003272 <dec_share+0x1a>
		}
		res = FR_OK;
 8003284:	2000      	movs	r0, #0
 8003286:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;		/* Invalid index number */
 8003288:	2002      	movs	r0, #2
	}
	return res;
}
 800328a:	4770      	bx	lr
 800328c:	200008cc 	.word	0x200008cc

08003290 <clear_share>:


static void clear_share (	/* Clear all lock entries of the volume */
	FATFS* fs
)
{
 8003290:	2300      	movs	r3, #0
	UINT i;

	for (i = 0; i < FF_FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003292:	4619      	mov	r1, r3
{
 8003294:	b510      	push	{r4, lr}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003296:	4a05      	ldr	r2, [pc, #20]	@ (80032ac <clear_share+0x1c>)
 8003298:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800329c:	4284      	cmp	r4, r0
 800329e:	bf08      	it	eq
 80032a0:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < FF_FS_LOCK; i++) {
 80032a4:	3304      	adds	r3, #4
 80032a6:	2b10      	cmp	r3, #16
 80032a8:	d1f6      	bne.n	8003298 <clear_share+0x8>
	}
}
 80032aa:	bd10      	pop	{r4, pc}
 80032ac:	200008cc 	.word	0x200008cc

080032b0 <clst2sect>:
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 80032b0:	69c3      	ldr	r3, [r0, #28]
	clst -= 2;		/* Cluster number is origin from 2 */
 80032b2:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 80032b4:	3b02      	subs	r3, #2
 80032b6:	428b      	cmp	r3, r1
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 80032b8:	bf83      	ittte	hi
 80032ba:	8943      	ldrhhi	r3, [r0, #10]
 80032bc:	6b00      	ldrhi	r0, [r0, #48]	@ 0x30
 80032be:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 80032c2:	2000      	movls	r0, #0
}
 80032c4:	4770      	bx	lr

080032c6 <clmt_clust>:

static DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80032c6:	4619      	mov	r1, r3
 80032c8:	b538      	push	{r3, r4, r5, lr}
	DWORD *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80032ca:	6803      	ldr	r3, [r0, #0]
 80032cc:	0a55      	lsrs	r5, r2, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80032ce:	6d04      	ldr	r4, [r0, #80]	@ 0x50
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80032d0:	895a      	ldrh	r2, [r3, #10]
 80032d2:	ea45 50c1 	orr.w	r0, r5, r1, lsl #23
 80032d6:	2300      	movs	r3, #0
 80032d8:	0a49      	lsrs	r1, r1, #9
 80032da:	f7fd fdd3 	bl	8000e84 <__aeabi_uldivmod>
 80032de:	4602      	mov	r2, r0
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80032e0:	3404      	adds	r4, #4
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80032e2:	6820      	ldr	r0, [r4, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80032e4:	b130      	cbz	r0, 80032f4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80032e6:	4282      	cmp	r2, r0
 80032e8:	d302      	bcc.n	80032f0 <clmt_clust+0x2a>
		cl -= ncl; tbl++;		/* Next fragment */
 80032ea:	1a12      	subs	r2, r2, r0
 80032ec:	3408      	adds	r4, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80032ee:	e7f8      	b.n	80032e2 <clmt_clust+0x1c>
	}
	return cl + *tbl;	/* Return the cluster number */
 80032f0:	6860      	ldr	r0, [r4, #4]
 80032f2:	4410      	add	r0, r2
}
 80032f4:	bd38      	pop	{r3, r4, r5, pc}

080032f6 <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80032f6:	4603      	mov	r3, r0
 80032f8:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 80032fc:	2000      	movs	r0, #0
	UINT n = 11;

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80032fe:	01c2      	lsls	r2, r0, #7
 8003300:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
 8003304:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003308:	4402      	add	r2, r0
	} while (--n);
 800330a:	428b      	cmp	r3, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800330c:	f002 00ff 	and.w	r0, r2, #255	@ 0xff
	} while (--n);
 8003310:	d1f5      	bne.n	80032fe <sum_sfn+0x8>
	return sum;
}
 8003312:	4770      	bx	lr

08003314 <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8003314:	b510      	push	{r4, lr}
 8003316:	4604      	mov	r4, r0
	UINT i, szblk;
	WORD sum;


	szblk = ((UINT)dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 8003318:	7841      	ldrb	r1, [r0, #1]
	for (i = sum = 0; i < szblk; i++) {
 800331a:	2000      	movs	r0, #0
 800331c:	4602      	mov	r2, r0
	szblk = ((UINT)dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 800331e:	3101      	adds	r1, #1
 8003320:	0149      	lsls	r1, r1, #5
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 8003322:	2a02      	cmp	r2, #2
			i++;
 8003324:	bf0c      	ite	eq
 8003326:	2203      	moveq	r2, #3
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8003328:	5ca3      	ldrbne	r3, [r4, r2]
	for (i = sum = 0; i < szblk; i++) {
 800332a:	f102 0201 	add.w	r2, r2, #1
 800332e:	bf1f      	itttt	ne
 8003330:	eb03 33c0 	addne.w	r3, r3, r0, lsl #15
 8003334:	b29b      	uxthne	r3, r3
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8003336:	eb03 0350 	addne.w	r3, r3, r0, lsr #1
 800333a:	b298      	uxthne	r0, r3
	for (i = sum = 0; i < szblk; i++) {
 800333c:	4291      	cmp	r1, r2
 800333e:	d8f0      	bhi.n	8003322 <xdir_sum+0xe>
		}
	}
	return sum;
}
 8003340:	bd10      	pop	{r4, pc}

08003342 <get_ldnumber>:
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *vsp;
	char vchr;
#endif

	tt = tp = *path;
 8003342:	6802      	ldr	r2, [r0, #0]
{
 8003344:	b510      	push	{r4, lr}
 8003346:	4604      	mov	r4, r0
	if (!tp) return -1;		/* Invalid path name? */
 8003348:	b162      	cbz	r2, 8003364 <get_ldnumber+0x22>
 800334a:	4611      	mov	r1, r2
	do {					/* Find a colon in the path */
		chr = *tt++;
 800334c:	f811 3b01 	ldrb.w	r3, [r1], #1
	} while (!IsTerminator(chr) && chr != ':');
 8003350:	2b1f      	cmp	r3, #31
 8003352:	d911      	bls.n	8003378 <get_ldnumber+0x36>
 8003354:	2b3a      	cmp	r3, #58	@ 0x3a
 8003356:	d1f9      	bne.n	800334c <get_ldnumber+0xa>

	if (chr == ':') {	/* Is there a DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is it a numeric volume ID + colon? */
 8003358:	7813      	ldrb	r3, [r2, #0]
 800335a:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 800335e:	b2c3      	uxtb	r3, r0
 8003360:	2b09      	cmp	r3, #9
 8003362:	d902      	bls.n	800336a <get_ldnumber+0x28>
	if (!tp) return -1;		/* Invalid path name? */
 8003364:	f04f 30ff 	mov.w	r0, #4294967295
 8003368:	e005      	b.n	8003376 <get_ldnumber+0x34>
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is it a numeric volume ID + colon? */
 800336a:	3202      	adds	r2, #2
 800336c:	4291      	cmp	r1, r2
 800336e:	d1f9      	bne.n	8003364 <get_ldnumber+0x22>
					if (IsLower(chr)) chr -= 0x20;
				} while (vchr && (TCHAR)vchr == chr);
			} while ((vchr || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i >= FF_VOLUMES) return -1;	/* Not found or invalid volume ID */
 8003370:	2801      	cmp	r0, #1
 8003372:	dcf7      	bgt.n	8003364 <get_ldnumber+0x22>
		*path = tt;		/* Snip the drive prefix off */
 8003374:	6021      	str	r1, [r4, #0]
#if FF_FS_RPATH != 0
	return (int)CurrVol;	/* Default drive is current drive */
#else
	return 0;				/* Default drive is 0 */
#endif
}
 8003376:	bd10      	pop	{r4, pc}
	return 0;				/* Default drive is 0 */
 8003378:	2000      	movs	r0, #0
 800337a:	e7fc      	b.n	8003376 <get_ldnumber+0x34>

0800337c <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 800337c:	b538      	push	{r3, r4, r5, lr}
 800337e:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8003380:	4604      	mov	r4, r0
 8003382:	b918      	cbnz	r0, 800338c <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 8003384:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8003386:	2300      	movs	r3, #0
 8003388:	602b      	str	r3, [r5, #0]
	return res;
}
 800338a:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800338c:	6803      	ldr	r3, [r0, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f8      	beq.n	8003384 <validate+0x8>
 8003392:	781a      	ldrb	r2, [r3, #0]
 8003394:	2a00      	cmp	r2, #0
 8003396:	d0f5      	beq.n	8003384 <validate+0x8>
 8003398:	8881      	ldrh	r1, [r0, #4]
 800339a:	88da      	ldrh	r2, [r3, #6]
 800339c:	4291      	cmp	r1, r2
 800339e:	d1f1      	bne.n	8003384 <validate+0x8>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
 80033a0:	7858      	ldrb	r0, [r3, #1]
 80033a2:	f7ff fd61 	bl	8002e68 <disk_status>
 80033a6:	f010 0001 	ands.w	r0, r0, #1
 80033aa:	d1eb      	bne.n	8003384 <validate+0x8>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 80033ac:	6823      	ldr	r3, [r4, #0]
 80033ae:	e7eb      	b.n	8003388 <validate+0xc>

080033b0 <sync_window>:
{
 80033b0:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 80033b2:	7903      	ldrb	r3, [r0, #4]
{
 80033b4:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
 80033b6:	b1c3      	cbz	r3, 80033ea <sync_window+0x3a>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 80033b8:	f100 053c 	add.w	r5, r0, #60	@ 0x3c
 80033bc:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80033be:	2301      	movs	r3, #1
 80033c0:	4629      	mov	r1, r5
 80033c2:	7840      	ldrb	r0, [r0, #1]
 80033c4:	f7ff fd73 	bl	8002eae <disk_write>
 80033c8:	b988      	cbnz	r0, 80033ee <sync_window+0x3e>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 80033ca:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80033cc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80033ce:	6a22      	ldr	r2, [r4, #32]
 80033d0:	1acb      	subs	r3, r1, r3
 80033d2:	4293      	cmp	r3, r2
			fs->wflag = 0;	/* Clear window dirty flag */
 80033d4:	7120      	strb	r0, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 80033d6:	d208      	bcs.n	80033ea <sync_window+0x3a>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 80033d8:	78e3      	ldrb	r3, [r4, #3]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d105      	bne.n	80033ea <sync_window+0x3a>
 80033de:	440a      	add	r2, r1
 80033e0:	2301      	movs	r3, #1
 80033e2:	4629      	mov	r1, r5
 80033e4:	7860      	ldrb	r0, [r4, #1]
 80033e6:	f7ff fd62 	bl	8002eae <disk_write>
	FRESULT res = FR_OK;
 80033ea:	2000      	movs	r0, #0
}
 80033ec:	bd38      	pop	{r3, r4, r5, pc}
			res = FR_DISK_ERR;
 80033ee:	2001      	movs	r0, #1
 80033f0:	e7fc      	b.n	80033ec <sync_window+0x3c>

080033f2 <put_utf>:
{
 80033f2:	b538      	push	{r3, r4, r5, lr}
 80033f4:	460d      	mov	r5, r1
	wc = ff_uni2oem(chr, CODEPAGE);
 80033f6:	f240 11b5 	movw	r1, #437	@ 0x1b5
{
 80033fa:	4614      	mov	r4, r2
	wc = ff_uni2oem(chr, CODEPAGE);
 80033fc:	f003 f8b4 	bl	8006568 <ff_uni2oem>
	if (wc >= 0x100) {	/* Is this a DBC? */
 8003400:	28ff      	cmp	r0, #255	@ 0xff
 8003402:	d907      	bls.n	8003414 <put_utf+0x22>
		if (szb < 2) return 0;
 8003404:	2c01      	cmp	r4, #1
 8003406:	d90b      	bls.n	8003420 <put_utf+0x2e>
		return 2;
 8003408:	2402      	movs	r4, #2
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 800340a:	0a03      	lsrs	r3, r0, #8
 800340c:	702b      	strb	r3, [r5, #0]
		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 800340e:	7068      	strb	r0, [r5, #1]
}
 8003410:	4620      	mov	r0, r4
 8003412:	bd38      	pop	{r3, r4, r5, pc}
	if (wc == 0 || szb < 1) return 0;	/* Invalid character or buffer overflow? */
 8003414:	b130      	cbz	r0, 8003424 <put_utf+0x32>
 8003416:	2c00      	cmp	r4, #0
 8003418:	d0fa      	beq.n	8003410 <put_utf+0x1e>
	return 1;
 800341a:	2401      	movs	r4, #1
	*buf++ = (TCHAR)wc;					/* Store the character */
 800341c:	7028      	strb	r0, [r5, #0]
	return 1;
 800341e:	e7f7      	b.n	8003410 <put_utf+0x1e>
		if (szb < 2) return 0;
 8003420:	2400      	movs	r4, #0
 8003422:	e7f5      	b.n	8003410 <put_utf+0x1e>
 8003424:	4604      	mov	r4, r0
 8003426:	e7f3      	b.n	8003410 <put_utf+0x1e>

08003428 <get_fileinfo>:
{
 8003428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	fno->fname[0] = 0;			/* Invaidate file info */
 800342c:	2500      	movs	r5, #0
	FATFS *fs = dp->obj.fs;
 800342e:	6807      	ldr	r7, [r0, #0]
	fno->fname[0] = 0;			/* Invaidate file info */
 8003430:	768d      	strb	r5, [r1, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8003432:	6b83      	ldr	r3, [r0, #56]	@ 0x38
{
 8003434:	4606      	mov	r6, r0
 8003436:	460c      	mov	r4, r1
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8003438:	2b00      	cmp	r3, #0
 800343a:	d047      	beq.n	80034cc <get_fileinfo+0xa4>
	if (fs->fs_type == FS_EXFAT) {	/* exFAT volume */
 800343c:	783b      	ldrb	r3, [r7, #0]
 800343e:	2b04      	cmp	r3, #4
 8003440:	d149      	bne.n	80034d6 <get_fileinfo+0xae>
		hs = 0;
 8003442:	462b      	mov	r3, r5
		si = SZDIRE * 2; di = 0;	/* 1st C1 entry in the entry block */
 8003444:	462e      	mov	r6, r5
 8003446:	f04f 0840 	mov.w	r8, #64	@ 0x40
 800344a:	e020      	b.n	800348e <get_fileinfo+0x66>
			if (si >= MAXDIRB(FF_MAX_LFN)) {	/* Truncated directory block? */
 800344c:	f1b8 0f7f 	cmp.w	r8, #127	@ 0x7f
 8003450:	d824      	bhi.n	800349c <get_fileinfo+0x74>
			if ((si % SZDIRE) == 0) si += 2;	/* Skip entry type field */
 8003452:	f018 0f1f 	tst.w	r8, #31
 8003456:	bf08      	it	eq
 8003458:	f108 0802 	addeq.w	r8, r8, #2
			wc = ld_word(fs->dirbuf + si); si += 2; nc++;	/* Get a character */
 800345c:	f832 0008 	ldrh.w	r0, [r2, r8]
 8003460:	3501      	adds	r5, #1
 8003462:	f108 0802 	add.w	r8, r8, #2
			if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 8003466:	b92b      	cbnz	r3, 8003474 <get_fileinfo+0x4c>
 8003468:	f500 5220 	add.w	r2, r0, #10240	@ 0x2800
 800346c:	b292      	uxth	r2, r2
 800346e:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8003472:	d30b      	bcc.n	800348c <get_fileinfo+0x64>
			nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 8003474:	f106 011a 	add.w	r1, r6, #26
 8003478:	f1c6 02ff 	rsb	r2, r6, #255	@ 0xff
 800347c:	4421      	add	r1, r4
 800347e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003482:	f7ff ffb6 	bl	80033f2 <put_utf>
			if (nw == 0) {						/* Buffer overflow or wrong char? */
 8003486:	b148      	cbz	r0, 800349c <get_fileinfo+0x74>
			di += nw;
 8003488:	4406      	add	r6, r0
			hs = 0;
 800348a:	2000      	movs	r0, #0
 800348c:	4603      	mov	r3, r0
		while (nc < fs->dirbuf[XDIR_NumName]) {
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	f892 1023 	ldrb.w	r1, [r2, #35]	@ 0x23
 8003494:	42a9      	cmp	r1, r5
 8003496:	d8d9      	bhi.n	800344c <get_fileinfo+0x24>
		if (hs != 0) di = 0;					/* Broken surrogate pair? */
 8003498:	b903      	cbnz	r3, 800349c <get_fileinfo+0x74>
		if (di == 0) fno->fname[di++] = '\?';	/* Inaccessible object name? */
 800349a:	b916      	cbnz	r6, 80034a2 <get_fileinfo+0x7a>
 800349c:	233f      	movs	r3, #63	@ 0x3f
 800349e:	2601      	movs	r6, #1
 80034a0:	76a3      	strb	r3, [r4, #26]
		fno->fname[di] = 0;						/* Terminate the name */
 80034a2:	2300      	movs	r3, #0
 80034a4:	4426      	add	r6, r4
 80034a6:	76b3      	strb	r3, [r6, #26]
		fno->altname[0] = 0;					/* exFAT does not support SFN */
 80034a8:	7363      	strb	r3, [r4, #13]
		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	7913      	ldrb	r3, [r2, #4]
 80034ae:	f003 0137 	and.w	r1, r3, #55	@ 0x37
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 80034b2:	06db      	lsls	r3, r3, #27
		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
 80034b4:	7321      	strb	r1, [r4, #12]
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 80034b6:	d40b      	bmi.n	80034d0 <get_fileinfo+0xa8>
 80034b8:	f102 0038 	add.w	r0, r2, #56	@ 0x38
 80034bc:	f7ff fe44 	bl	8003148 <ld_qword>
 80034c0:	e9c4 0100 	strd	r0, r1, [r4]
		fno->ftime = ld_word(fs->dirbuf + XDIR_ModTime + 0);	/* Time */
 80034c4:	8993      	ldrh	r3, [r2, #12]
 80034c6:	8163      	strh	r3, [r4, #10]
		fno->fdate = ld_word(fs->dirbuf + XDIR_ModTime + 2);	/* Date */
 80034c8:	89d3      	ldrh	r3, [r2, #14]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 80034ca:	8123      	strh	r3, [r4, #8]
}
 80034cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 80034d0:	2000      	movs	r0, #0
 80034d2:	4601      	mov	r1, r0
 80034d4:	e7f4      	b.n	80034c0 <get_fileinfo+0x98>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80034d6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80034d8:	3301      	adds	r3, #1
 80034da:	d14d      	bne.n	8003578 <get_fileinfo+0x150>
		wc = dp->dir[si++];			/* Get a char */
 80034dc:	2300      	movs	r3, #0
 80034de:	6bf1      	ldr	r1, [r6, #60]	@ 0x3c
 80034e0:	4618      	mov	r0, r3
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 80034e2:	262e      	movs	r6, #46	@ 0x2e
 80034e4:	1e4d      	subs	r5, r1, #1
		wc = dp->dir[si++];			/* Get a char */
 80034e6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80034ea:	3001      	adds	r0, #1
		if (wc == ' ') continue;	/* Skip padding spaces */
 80034ec:	2a20      	cmp	r2, #32
 80034ee:	d00c      	beq.n	800350a <get_fileinfo+0xe2>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 80034f0:	2a05      	cmp	r2, #5
 80034f2:	bf08      	it	eq
 80034f4:	22e5      	moveq	r2, #229	@ 0xe5
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 80034f6:	2809      	cmp	r0, #9
 80034f8:	d104      	bne.n	8003504 <get_fileinfo+0xdc>
 80034fa:	2b0b      	cmp	r3, #11
 80034fc:	bf9e      	ittt	ls
 80034fe:	18e7      	addls	r7, r4, r3
 8003500:	737e      	strbls	r6, [r7, #13]
 8003502:	3301      	addls	r3, #1
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
 8003504:	18e7      	adds	r7, r4, r3
 8003506:	737a      	strb	r2, [r7, #13]
 8003508:	3301      	adds	r3, #1
	while (si < 11) {		/* Get SFN from SFN entry */
 800350a:	280b      	cmp	r0, #11
 800350c:	d1eb      	bne.n	80034e6 <get_fileinfo+0xbe>
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
 800350e:	2000      	movs	r0, #0
 8003510:	18e2      	adds	r2, r4, r3
 8003512:	7350      	strb	r0, [r2, #13]
	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
 8003514:	7ea2      	ldrb	r2, [r4, #26]
 8003516:	2a00      	cmp	r2, #0
 8003518:	d13a      	bne.n	8003590 <get_fileinfo+0x168>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccessible */
 800351a:	b383      	cbz	r3, 800357e <get_fileinfo+0x156>
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 800351c:	2508      	movs	r5, #8
 800351e:	f104 030c 	add.w	r3, r4, #12
 8003522:	785a      	ldrb	r2, [r3, #1]
 8003524:	1c58      	adds	r0, r3, #1
 8003526:	2a00      	cmp	r2, #0
 8003528:	d141      	bne.n	80035ae <get_fileinfo+0x186>
 800352a:	1b1b      	subs	r3, r3, r4
 800352c:	3b0c      	subs	r3, #12
 800352e:	e029      	b.n	8003584 <get_fileinfo+0x15c>
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 8003530:	f1b9 0f00 	cmp.w	r9, #0
 8003534:	d105      	bne.n	8003542 <get_fileinfo+0x11a>
 8003536:	f500 5320 	add.w	r3, r0, #10240	@ 0x2800
 800353a:	b29b      	uxth	r3, r3
 800353c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003540:	d30b      	bcc.n	800355a <get_fileinfo+0x132>
				nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 8003542:	f108 011a 	add.w	r1, r8, #26
 8003546:	f1c8 02ff 	rsb	r2, r8, #255	@ 0xff
 800354a:	4421      	add	r1, r4
 800354c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8003550:	f7ff ff4f 	bl	80033f2 <put_utf>
				if (nw == 0) {				/* Buffer overflow or wrong char? */
 8003554:	b140      	cbz	r0, 8003568 <get_fileinfo+0x140>
				di += nw;
 8003556:	4480      	add	r8, r0
				hs = 0;
 8003558:	2000      	movs	r0, #0
 800355a:	4681      	mov	r9, r0
 800355c:	3502      	adds	r5, #2
			while (fs->lfnbuf[si] != 0) {
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	5b58      	ldrh	r0, [r3, r5]
 8003562:	2800      	cmp	r0, #0
 8003564:	d1e4      	bne.n	8003530 <get_fileinfo+0x108>
 8003566:	4640      	mov	r0, r8
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 8003568:	f1b9 0f00 	cmp.w	r9, #0
 800356c:	bf18      	it	ne
 800356e:	2000      	movne	r0, #0
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 8003570:	2200      	movs	r2, #0
 8003572:	1823      	adds	r3, r4, r0
 8003574:	769a      	strb	r2, [r3, #26]
	while (si < 11) {		/* Get SFN from SFN entry */
 8003576:	e7b1      	b.n	80034dc <get_fileinfo+0xb4>
			hs = 0;
 8003578:	46a9      	mov	r9, r5
			si = di = 0;
 800357a:	46a8      	mov	r8, r5
 800357c:	e7ef      	b.n	800355e <get_fileinfo+0x136>
			fno->fname[di++] = '\?';
 800357e:	233f      	movs	r3, #63	@ 0x3f
 8003580:	76a3      	strb	r3, [r4, #26]
 8003582:	2301      	movs	r3, #1
		fno->fname[di] = 0;	/* Terminate the LFN */
 8003584:	2200      	movs	r2, #0
 8003586:	4423      	add	r3, r4
 8003588:	769a      	strb	r2, [r3, #26]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
 800358a:	7b0b      	ldrb	r3, [r1, #12]
 800358c:	b903      	cbnz	r3, 8003590 <get_fileinfo+0x168>
 800358e:	7363      	strb	r3, [r4, #13]
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 8003590:	7acb      	ldrb	r3, [r1, #11]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8003592:	f101 001c 	add.w	r0, r1, #28
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 8003596:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800359a:	7323      	strb	r3, [r4, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 800359c:	f7ff fdd2 	bl	8003144 <ld_dword>
 80035a0:	2300      	movs	r3, #0
 80035a2:	6020      	str	r0, [r4, #0]
 80035a4:	6063      	str	r3, [r4, #4]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 80035a6:	8acb      	ldrh	r3, [r1, #22]
 80035a8:	8163      	strh	r3, [r4, #10]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 80035aa:	8b0b      	ldrh	r3, [r1, #24]
 80035ac:	e78d      	b.n	80034ca <get_fileinfo+0xa2>
				if (wc == '.') lcf = NS_EXT;
 80035ae:	2a2e      	cmp	r2, #46	@ 0x2e
 80035b0:	d00a      	beq.n	80035c8 <get_fileinfo+0x1a0>
				wc = (WCHAR)fno->altname[si];
 80035b2:	4613      	mov	r3, r2
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 80035b4:	3a41      	subs	r2, #65	@ 0x41
 80035b6:	2a19      	cmp	r2, #25
 80035b8:	d803      	bhi.n	80035c2 <get_fileinfo+0x19a>
 80035ba:	7b0a      	ldrb	r2, [r1, #12]
 80035bc:	4215      	tst	r5, r2
 80035be:	d000      	beq.n	80035c2 <get_fileinfo+0x19a>
 80035c0:	3320      	adds	r3, #32
				fno->fname[di] = (TCHAR)wc;
 80035c2:	7343      	strb	r3, [r0, #13]
 80035c4:	4603      	mov	r3, r0
 80035c6:	e7ac      	b.n	8003522 <get_fileinfo+0xfa>
				if (wc == '.') lcf = NS_EXT;
 80035c8:	2510      	movs	r5, #16
 80035ca:	4613      	mov	r3, r2
 80035cc:	e7f9      	b.n	80035c2 <get_fileinfo+0x19a>

080035ce <xname_sum>:
{
 80035ce:	b538      	push	{r3, r4, r5, lr}
 80035d0:	4605      	mov	r5, r0
	WORD sum = 0;
 80035d2:	2400      	movs	r4, #0
	while ((chr = *name++) != 0) {
 80035d4:	f835 0b02 	ldrh.w	r0, [r5], #2
 80035d8:	b908      	cbnz	r0, 80035de <xname_sum+0x10>
}
 80035da:	4620      	mov	r0, r4
 80035dc:	bd38      	pop	{r3, r4, r5, pc}
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 80035de:	f002 fff5 	bl	80065cc <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 80035e2:	0862      	lsrs	r2, r4, #1
 80035e4:	eb02 32c4 	add.w	r2, r2, r4, lsl #15
 80035e8:	b2c3      	uxtb	r3, r0
 80035ea:	441a      	add	r2, r3
 80035ec:	b292      	uxth	r2, r2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 80035ee:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80035f2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80035f6:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 80035fa:	b29c      	uxth	r4, r3
 80035fc:	e7ea      	b.n	80035d4 <xname_sum+0x6>

080035fe <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 80035fe:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8003602:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8003604:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8003606:	7803      	ldrb	r3, [r0, #0]
 8003608:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800360a:	bf01      	itttt	eq
 800360c:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800360e:	750a      	strbeq	r2, [r1, #20]
 8003610:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8003612:	754a      	strbeq	r2, [r1, #21]
}
 8003614:	4770      	bx	lr

08003616 <move_window>:
{
 8003616:	b538      	push	{r3, r4, r5, lr}
	if (sect != fs->winsect) {	/* Window offset changed? */
 8003618:	6b83      	ldr	r3, [r0, #56]	@ 0x38
{
 800361a:	4605      	mov	r5, r0
	if (sect != fs->winsect) {	/* Window offset changed? */
 800361c:	428b      	cmp	r3, r1
{
 800361e:	460c      	mov	r4, r1
	if (sect != fs->winsect) {	/* Window offset changed? */
 8003620:	d010      	beq.n	8003644 <move_window+0x2e>
		res = sync_window(fs);		/* Flush the window */
 8003622:	f7ff fec5 	bl	80033b0 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003626:	b960      	cbnz	r0, 8003642 <move_window+0x2c>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8003628:	4622      	mov	r2, r4
 800362a:	2301      	movs	r3, #1
 800362c:	7868      	ldrb	r0, [r5, #1]
 800362e:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
 8003632:	f7ff fc27 	bl	8002e84 <disk_read>
				res = FR_DISK_ERR;
 8003636:	2800      	cmp	r0, #0
 8003638:	bf1c      	itt	ne
 800363a:	f04f 34ff 	movne.w	r4, #4294967295
 800363e:	2001      	movne	r0, #1
			fs->winsect = sect;
 8003640:	63ac      	str	r4, [r5, #56]	@ 0x38
}
 8003642:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 8003644:	2000      	movs	r0, #0
 8003646:	e7fc      	b.n	8003642 <move_window+0x2c>

08003648 <check_fs>:
{
 8003648:	b538      	push	{r3, r4, r5, lr}
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800364a:	2300      	movs	r3, #0
 800364c:	7103      	strb	r3, [r0, #4]
 800364e:	f04f 33ff 	mov.w	r3, #4294967295
 8003652:	6383      	str	r3, [r0, #56]	@ 0x38
{
 8003654:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8003656:	f7ff ffde 	bl	8003616 <move_window>
 800365a:	2800      	cmp	r0, #0
 800365c:	d14b      	bne.n	80036f6 <check_fs+0xae>
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 800365e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8003662:	f8b4 523a 	ldrh.w	r5, [r4, #570]	@ 0x23a
 8003666:	429d      	cmp	r5, r3
 8003668:	d107      	bne.n	800367a <check_fs+0x32>
 800366a:	220b      	movs	r2, #11
 800366c:	4925      	ldr	r1, [pc, #148]	@ (8003704 <check_fs+0xbc>)
 800366e:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 8003672:	f008 ffe3 	bl	800c63c <memcmp>
 8003676:	2800      	cmp	r0, #0
 8003678:	d03f      	beq.n	80036fa <check_fs+0xb2>
	b = fs->win[BS_JmpBoot];
 800367a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 800367e:	2beb      	cmp	r3, #235	@ 0xeb
 8003680:	d003      	beq.n	800368a <check_fs+0x42>
 8003682:	3318      	adds	r3, #24
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	d82e      	bhi.n	80036e8 <check_fs+0xa0>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800368a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800368e:	429d      	cmp	r5, r3
 8003690:	d106      	bne.n	80036a0 <check_fs+0x58>
 8003692:	2208      	movs	r2, #8
 8003694:	491c      	ldr	r1, [pc, #112]	@ (8003708 <check_fs+0xc0>)
 8003696:	f104 008e 	add.w	r0, r4, #142	@ 0x8e
 800369a:	f008 ffcf 	bl	800c63c <memcmp>
 800369e:	b348      	cbz	r0, 80036f4 <check_fs+0xac>
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 80036a0:	f8b4 3047 	ldrh.w	r3, [r4, #71]	@ 0x47
 80036a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036a8:	d11e      	bne.n	80036e8 <check_fs+0xa0>
		b = fs->win[BPB_SecPerClus];
 80036aa:	f894 3049 	ldrb.w	r3, [r4, #73]	@ 0x49
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 80036ae:	b1db      	cbz	r3, 80036e8 <check_fs+0xa0>
 80036b0:	1e5a      	subs	r2, r3, #1
 80036b2:	421a      	tst	r2, r3
 80036b4:	d118      	bne.n	80036e8 <check_fs+0xa0>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of number of reserved sectors (MNBZ) */
 80036b6:	f8b4 304a 	ldrh.w	r3, [r4, #74]	@ 0x4a
 80036ba:	b1ab      	cbz	r3, 80036e8 <check_fs+0xa0>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of number of FATs (1 or 2) */
 80036bc:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 80036c0:	3b01      	subs	r3, #1
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d810      	bhi.n	80036e8 <check_fs+0xa0>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir size (MNBZ) */
 80036c6:	f8b4 304d 	ldrh.w	r3, [r4, #77]	@ 0x4d
 80036ca:	b16b      	cbz	r3, 80036e8 <check_fs+0xa0>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume size (>=128) */
 80036cc:	f8b4 304f 	ldrh.w	r3, [r4, #79]	@ 0x4f
 80036d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80036d2:	d806      	bhi.n	80036e2 <check_fs+0x9a>
 80036d4:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 80036d8:	f7ff fd34 	bl	8003144 <ld_dword>
 80036dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80036e0:	d302      	bcc.n	80036e8 <check_fs+0xa0>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 80036e2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 80036e6:	b953      	cbnz	r3, 80036fe <check_fs+0xb6>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (with valid or invalid BS) */
 80036e8:	f64a 2055 	movw	r0, #43605	@ 0xaa55
 80036ec:	4285      	cmp	r5, r0
 80036ee:	bf14      	ite	ne
 80036f0:	2003      	movne	r0, #3
 80036f2:	2002      	moveq	r0, #2
}
 80036f4:	bd38      	pop	{r3, r4, r5, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 80036f6:	2004      	movs	r0, #4
 80036f8:	e7fc      	b.n	80036f4 <check_fs+0xac>
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 80036fa:	2001      	movs	r0, #1
 80036fc:	e7fa      	b.n	80036f4 <check_fs+0xac>
			return 0;	/* It is an FAT32 VBR */
 80036fe:	2000      	movs	r0, #0
 8003700:	e7f8      	b.n	80036f4 <check_fs+0xac>
 8003702:	bf00      	nop
 8003704:	0800f3f8 	.word	0x0800f3f8
 8003708:	0800f42b 	.word	0x0800f42b

0800370c <change_bitmap>:
{
 800370c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 8003710:	f04f 0a01 	mov.w	sl, #1
{
 8003714:	4605      	mov	r5, r0
 8003716:	4617      	mov	r7, r2
 8003718:	4698      	mov	r8, r3
	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800371a:	3902      	subs	r1, #2
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 800371c:	6b46      	ldr	r6, [r0, #52]	@ 0x34
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800371e:	f001 0407 	and.w	r4, r1, #7
 8003722:	fa0a f404 	lsl.w	r4, sl, r4
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 8003726:	eb06 3611 	add.w	r6, r6, r1, lsr #12
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 800372a:	f3c1 09c8 	ubfx	r9, r1, #3, #9
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800372e:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8003730:	4631      	mov	r1, r6
 8003732:	4628      	mov	r0, r5
 8003734:	3601      	adds	r6, #1
 8003736:	f7ff ff6e 	bl	8003616 <move_window>
 800373a:	b118      	cbz	r0, 8003744 <change_bitmap+0x38>
 800373c:	2001      	movs	r0, #1
}
 800373e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003742:	4699      	mov	r9, r3
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8003744:	eb05 0209 	add.w	r2, r5, r9
 8003748:	f892 303c 	ldrb.w	r3, [r2, #60]	@ 0x3c
 800374c:	4223      	tst	r3, r4
 800374e:	bf14      	ite	ne
 8003750:	2101      	movne	r1, #1
 8003752:	2100      	moveq	r1, #0
 8003754:	4541      	cmp	r1, r8
 8003756:	d014      	beq.n	8003782 <change_bitmap+0x76>
				fs->win[i] ^= bm;	/* Flip the bit */
 8003758:	4063      	eors	r3, r4
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800375a:	3f01      	subs	r7, #1
				fs->win[i] ^= bm;	/* Flip the bit */
 800375c:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
				fs->wflag = 1;
 8003760:	f885 a004 	strb.w	sl, [r5, #4]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8003764:	d0eb      	beq.n	800373e <change_bitmap+0x32>
			} while (bm <<= 1);		/* Next bit */
 8003766:	0064      	lsls	r4, r4, #1
 8003768:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 800376c:	d1ea      	bne.n	8003744 <change_bitmap+0x38>
		} while (++i < SS(fs));		/* Next byte */
 800376e:	f109 0301 	add.w	r3, r9, #1
 8003772:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
			bm = 1;
 8003776:	f04f 0401 	mov.w	r4, #1
		i = 0;
 800377a:	f04f 0900 	mov.w	r9, #0
		} while (++i < SS(fs));		/* Next byte */
 800377e:	d1e0      	bne.n	8003742 <change_bitmap+0x36>
 8003780:	e7d6      	b.n	8003730 <change_bitmap+0x24>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8003782:	2002      	movs	r0, #2
 8003784:	e7db      	b.n	800373e <change_bitmap+0x32>

08003786 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003786:	2901      	cmp	r1, #1
{
 8003788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378a:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800378c:	f240 808b 	bls.w	80038a6 <get_fat+0x120>
	FATFS *fs = obj->fs;
 8003790:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003792:	69f3      	ldr	r3, [r6, #28]
 8003794:	428b      	cmp	r3, r1
 8003796:	f240 8086 	bls.w	80038a6 <get_fat+0x120>
		switch (fs->fs_type) {
 800379a:	7833      	ldrb	r3, [r6, #0]
 800379c:	3b01      	subs	r3, #1
 800379e:	2b03      	cmp	r3, #3
 80037a0:	f200 8081 	bhi.w	80038a6 <get_fat+0x120>
 80037a4:	e8df f003 	tbb	[pc, r3]
 80037a8:	4a372902 	.word	0x4a372902
			bc = (UINT)clst; bc += bc / 2;
 80037ac:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80037b0:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 80037b2:	4630      	mov	r0, r6
 80037b4:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 80037b8:	f7ff ff2d 	bl	8003616 <move_window>
 80037bc:	b110      	cbz	r0, 80037c4 <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80037be:	f04f 30ff 	mov.w	r0, #4294967295
}
 80037c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80037c4:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80037c6:	1c6f      	adds	r7, r5, #1
 80037c8:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80037cc:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80037ce:	4630      	mov	r0, r6
 80037d0:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80037d4:	f895 503c 	ldrb.w	r5, [r5, #60]	@ 0x3c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80037d8:	f7ff ff1d 	bl	8003616 <move_window>
 80037dc:	2800      	cmp	r0, #0
 80037de:	d1ee      	bne.n	80037be <get_fat+0x38>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 80037e0:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80037e4:	4437      	add	r7, r6
 80037e6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80037ea:	ea45 2003 	orr.w	r0, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 80037ee:	07e3      	lsls	r3, r4, #31
 80037f0:	bf4c      	ite	mi
 80037f2:	0900      	lsrmi	r0, r0, #4
 80037f4:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80037f8:	e7e3      	b.n	80037c2 <get_fat+0x3c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80037fa:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 80037fc:	4630      	mov	r0, r6
 80037fe:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8003802:	f7ff ff08 	bl	8003616 <move_window>
 8003806:	2800      	cmp	r0, #0
 8003808:	d1d9      	bne.n	80037be <get_fat+0x38>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800380a:	0064      	lsls	r4, r4, #1
 800380c:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 8003810:	4434      	add	r4, r6
 8003812:	8fa0      	ldrh	r0, [r4, #60]	@ 0x3c
			break;
 8003814:	e7d5      	b.n	80037c2 <get_fat+0x3c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003816:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 8003818:	4630      	mov	r0, r6
 800381a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800381e:	f7ff fefa 	bl	8003616 <move_window>
 8003822:	2800      	cmp	r0, #0
 8003824:	d1cb      	bne.n	80037be <get_fat+0x38>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8003826:	00a4      	lsls	r4, r4, #2
 8003828:	f106 003c 	add.w	r0, r6, #60	@ 0x3c
 800382c:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 8003830:	4420      	add	r0, r4
 8003832:	f7ff fc87 	bl	8003144 <ld_dword>
 8003836:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 800383a:	e7c2      	b.n	80037c2 <get_fat+0x3c>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800383c:	e9d0 3104 	ldrd	r3, r1, [r0, #16]
 8003840:	ea53 0201 	orrs.w	r2, r3, r1
 8003844:	79c5      	ldrb	r5, [r0, #7]
 8003846:	d001      	beq.n	800384c <get_fat+0xc6>
 8003848:	6882      	ldr	r2, [r0, #8]
 800384a:	b902      	cbnz	r2, 800384e <get_fat+0xc8>
 800384c:	bb5d      	cbnz	r5, 80038a6 <get_fat+0x120>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800384e:	6882      	ldr	r2, [r0, #8]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8003850:	2d02      	cmp	r5, #2
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 8003852:	8977      	ldrh	r7, [r6, #10]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8003854:	eba4 0202 	sub.w	r2, r4, r2
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8003858:	d10c      	bne.n	8003874 <get_fat+0xee>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800385a:	3b01      	subs	r3, #1
 800385c:	f141 31ff 	adc.w	r1, r1, #4294967295
 8003860:	0a5b      	lsrs	r3, r3, #9
 8003862:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8003866:	fbb3 f3f7 	udiv	r3, r3, r7
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800386a:	429a      	cmp	r2, r3
 800386c:	d81b      	bhi.n	80038a6 <get_fat+0x120>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 800386e:	d01c      	beq.n	80038aa <get_fat+0x124>
 8003870:	1c60      	adds	r0, r4, #1
 8003872:	e7a6      	b.n	80037c2 <get_fat+0x3c>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8003874:	2d03      	cmp	r5, #3
 8003876:	d102      	bne.n	800387e <get_fat+0xf8>
 8003878:	6983      	ldr	r3, [r0, #24]
 800387a:	4293      	cmp	r3, r2
 800387c:	d8f8      	bhi.n	8003870 <get_fat+0xea>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800387e:	69c3      	ldr	r3, [r0, #28]
 8003880:	b99b      	cbnz	r3, 80038aa <get_fat+0x124>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003882:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 8003884:	4630      	mov	r0, r6
 8003886:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800388a:	f7ff fec4 	bl	8003616 <move_window>
 800388e:	2800      	cmp	r0, #0
 8003890:	d195      	bne.n	80037be <get_fat+0x38>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8003892:	00a0      	lsls	r0, r4, #2
 8003894:	363c      	adds	r6, #60	@ 0x3c
 8003896:	f400 70fe 	and.w	r0, r0, #508	@ 0x1fc
 800389a:	4430      	add	r0, r6
 800389c:	f7ff fc52 	bl	8003144 <ld_dword>
 80038a0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80038a4:	e78d      	b.n	80037c2 <get_fat+0x3c>
 80038a6:	2001      	movs	r0, #1
 80038a8:	e78b      	b.n	80037c2 <get_fat+0x3c>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 80038aa:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
	return val;
 80038ae:	e788      	b.n	80037c2 <get_fat+0x3c>

080038b0 <dir_sdi>:
{
 80038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = dp->obj.fs;
 80038b2:	6805      	ldr	r5, [r0, #0]
{
 80038b4:	4606      	mov	r6, r0
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80038b6:	782b      	ldrb	r3, [r5, #0]
{
 80038b8:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	bf0c      	ite	eq
 80038be:	f04f 5280 	moveq.w	r2, #268435456	@ 0x10000000
 80038c2:	f44f 1200 	movne.w	r2, #2097152	@ 0x200000
 80038c6:	428a      	cmp	r2, r1
 80038c8:	d801      	bhi.n	80038ce <dir_sdi+0x1e>
		return FR_INT_ERR;
 80038ca:	2002      	movs	r0, #2
}
 80038cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80038ce:	06ca      	lsls	r2, r1, #27
 80038d0:	d1fb      	bne.n	80038ca <dir_sdi+0x1a>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80038d2:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 80038d4:	6301      	str	r1, [r0, #48]	@ 0x30
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80038d6:	bb12      	cbnz	r2, 800391e <dir_sdi+0x6e>
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d812      	bhi.n	8003902 <dir_sdi+0x52>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 80038dc:	892b      	ldrh	r3, [r5, #8]
 80038de:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 80038e2:	d9f2      	bls.n	80038ca <dir_sdi+0x1a>
		dp->sect = fs->dirbase;
 80038e4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
	dp->clust = clst;					/* Current cluster# */
 80038e6:	e9c6 200d 	strd	r2, r0, [r6, #52]	@ 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 80038ea:	2800      	cmp	r0, #0
 80038ec:	d0ed      	beq.n	80038ca <dir_sdi+0x1a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80038ee:	eb00 2054 	add.w	r0, r0, r4, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80038f2:	353c      	adds	r5, #60	@ 0x3c
 80038f4:	f3c4 0408 	ubfx	r4, r4, #0, #9
 80038f8:	4425      	add	r5, r4
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80038fa:	63b0      	str	r0, [r6, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80038fc:	63f5      	str	r5, [r6, #60]	@ 0x3c
	return FR_OK;
 80038fe:	2000      	movs	r0, #0
 8003900:	e7e4      	b.n	80038cc <dir_sdi+0x1c>
		clst = (DWORD)fs->dirbase;
 8003902:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8003904:	71c2      	strb	r2, [r0, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0e8      	beq.n	80038dc <dir_sdi+0x2c>
		while (ofs >= csz) {				/* Follow cluster chain */
 800390a:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800390c:	896f      	ldrh	r7, [r5, #10]
 800390e:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8003910:	42bc      	cmp	r4, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003912:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 8003914:	d205      	bcs.n	8003922 <dir_sdi+0x72>
		dp->sect = clst2sect(fs, clst);
 8003916:	4628      	mov	r0, r5
 8003918:	f7ff fcca 	bl	80032b0 <clst2sect>
 800391c:	e7e3      	b.n	80038e6 <dir_sdi+0x36>
 800391e:	4613      	mov	r3, r2
 8003920:	e7f3      	b.n	800390a <dir_sdi+0x5a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003922:	4630      	mov	r0, r6
 8003924:	f7ff ff2f 	bl	8003786 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003928:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800392a:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800392c:	d006      	beq.n	800393c <dir_sdi+0x8c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800392e:	2801      	cmp	r0, #1
 8003930:	d9cb      	bls.n	80038ca <dir_sdi+0x1a>
 8003932:	69eb      	ldr	r3, [r5, #28]
 8003934:	4283      	cmp	r3, r0
 8003936:	d9c8      	bls.n	80038ca <dir_sdi+0x1a>
			ofs -= csz;
 8003938:	1be4      	subs	r4, r4, r7
 800393a:	e7e9      	b.n	8003910 <dir_sdi+0x60>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800393c:	2001      	movs	r0, #1
 800393e:	e7c5      	b.n	80038cc <dir_sdi+0x1c>

08003940 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003940:	2901      	cmp	r1, #1
{
 8003942:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003946:	4606      	mov	r6, r0
 8003948:	460c      	mov	r4, r1
 800394a:	4615      	mov	r5, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800394c:	d908      	bls.n	8003960 <put_fat+0x20>
 800394e:	69c3      	ldr	r3, [r0, #28]
 8003950:	428b      	cmp	r3, r1
 8003952:	d905      	bls.n	8003960 <put_fat+0x20>
		switch (fs->fs_type) {
 8003954:	7803      	ldrb	r3, [r0, #0]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d05e      	beq.n	8003a18 <put_fat+0xd8>
 800395a:	d803      	bhi.n	8003964 <put_fat+0x24>
 800395c:	2b01      	cmp	r3, #1
 800395e:	d021      	beq.n	80039a4 <put_fat+0x64>
	FRESULT res = FR_INT_ERR;
 8003960:	2002      	movs	r0, #2
 8003962:	e04f      	b.n	8003a04 <put_fat+0xc4>
		switch (fs->fs_type) {
 8003964:	3b03      	subs	r3, #3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d8fa      	bhi.n	8003960 <put_fat+0x20>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800396a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800396c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8003970:	f7ff fe51 	bl	8003616 <move_window>
			if (res != FR_OK) break;
 8003974:	2800      	cmp	r0, #0
 8003976:	d145      	bne.n	8003a04 <put_fat+0xc4>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8003978:	7832      	ldrb	r2, [r6, #0]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800397a:	00a4      	lsls	r4, r4, #2
			p = fs->win + bc++ % SS(fs);
 800397c:	f106 033c 	add.w	r3, r6, #60	@ 0x3c
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003980:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8003984:	2a04      	cmp	r2, #4
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003986:	4423      	add	r3, r4
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8003988:	d007      	beq.n	800399a <put_fat+0x5a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fbda 	bl	8003144 <ld_dword>
 8003990:	f025 4570 	bic.w	r5, r5, #4026531840	@ 0xf0000000
 8003994:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 8003998:	4305      	orrs	r5, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800399a:	4629      	mov	r1, r5
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fbd7 	bl	8003150 <st_dword>
			break;
 80039a2:	e02c      	b.n	80039fe <put_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80039a4:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80039a8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80039aa:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80039ae:	f7ff fe32 	bl	8003616 <move_window>
			if (res != FR_OK) break;
 80039b2:	bb38      	cbnz	r0, 8003a04 <put_fat+0xc4>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 80039b4:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 80039b8:	f106 083c 	add.w	r8, r6, #60	@ 0x3c
 80039bc:	f107 0901 	add.w	r9, r7, #1
 80039c0:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 80039c4:	bf1f      	itttt	ne
 80039c6:	f818 2007 	ldrbne.w	r2, [r8, r7]
 80039ca:	012b      	lslne	r3, r5, #4
 80039cc:	f003 03f0 	andne.w	r3, r3, #240	@ 0xf0
 80039d0:	f002 020f 	andne.w	r2, r2, #15
 80039d4:	bf14      	ite	ne
 80039d6:	4313      	orrne	r3, r2
 80039d8:	b2eb      	uxtbeq	r3, r5
 80039da:	f808 3007 	strb.w	r3, [r8, r7]
			fs->wflag = 1;
 80039de:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80039e0:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 80039e2:	4630      	mov	r0, r6
			fs->wflag = 1;
 80039e4:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80039e6:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 80039ea:	f7ff fe14 	bl	8003616 <move_window>
			if (res != FR_OK) break;
 80039ee:	b948      	cbnz	r0, 8003a04 <put_fat+0xc4>
			p = fs->win + bc % SS(fs);
 80039f0:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 80039f4:	b144      	cbz	r4, 8003a08 <put_fat+0xc8>
 80039f6:	f3c5 1507 	ubfx	r5, r5, #4, #8
 80039fa:	f808 5009 	strb.w	r5, [r8, r9]
			fs->wflag = 1;
 80039fe:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003a00:	2000      	movs	r0, #0
			fs->wflag = 1;
 8003a02:	7133      	strb	r3, [r6, #4]
}
 8003a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8003a08:	f818 3009 	ldrb.w	r3, [r8, r9]
 8003a0c:	f3c5 2503 	ubfx	r5, r5, #8, #4
 8003a10:	f023 030f 	bic.w	r3, r3, #15
 8003a14:	431d      	orrs	r5, r3
 8003a16:	e7f0      	b.n	80039fa <put_fat+0xba>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003a18:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8003a1a:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8003a1e:	f7ff fdfa 	bl	8003616 <move_window>
			if (res != FR_OK) break;
 8003a22:	2800      	cmp	r0, #0
 8003a24:	d1ee      	bne.n	8003a04 <put_fat+0xc4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8003a26:	0064      	lsls	r4, r4, #1
 8003a28:	f106 033c 	add.w	r3, r6, #60	@ 0x3c
 8003a2c:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 8003a30:	551d      	strb	r5, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8003a32:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8003a34:	f3c5 2507 	ubfx	r5, r5, #8, #8
	*ptr++ = (BYTE)val;
 8003a38:	7055      	strb	r5, [r2, #1]
			break;
 8003a3a:	e7e0      	b.n	80039fe <put_fat+0xbe>

08003a3c <fill_last_frag>:
{
 8003a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3e:	4604      	mov	r4, r0
 8003a40:	460e      	mov	r6, r1
 8003a42:	4617      	mov	r7, r2
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 8003a44:	69e3      	ldr	r3, [r4, #28]
 8003a46:	b90b      	cbnz	r3, 8003a4c <fill_last_frag+0x10>
	return FR_OK;
 8003a48:	4618      	mov	r0, r3
}
 8003a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	eba6 0503 	sub.w	r5, r6, r3
 8003a52:	bf0c      	ite	eq
 8003a54:	463a      	moveq	r2, r7
 8003a56:	1caa      	addne	r2, r5, #2
 8003a58:	6820      	ldr	r0, [r4, #0]
 8003a5a:	1c69      	adds	r1, r5, #1
 8003a5c:	f7ff ff70 	bl	8003940 <put_fat>
		if (res != FR_OK) return res;
 8003a60:	2800      	cmp	r0, #0
 8003a62:	d1f2      	bne.n	8003a4a <fill_last_frag+0xe>
		obj->n_frag--;
 8003a64:	69e3      	ldr	r3, [r4, #28]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	61e3      	str	r3, [r4, #28]
 8003a6a:	e7eb      	b.n	8003a44 <fill_last_frag+0x8>

08003a6c <fill_first_frag>:
{
 8003a6c:	b570      	push	{r4, r5, r6, lr}
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 8003a6e:	79c3      	ldrb	r3, [r0, #7]
{
 8003a70:	4604      	mov	r4, r0
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d001      	beq.n	8003a7a <fill_first_frag+0xe>
	return FR_OK;
 8003a76:	2000      	movs	r0, #0
}
 8003a78:	bd70      	pop	{r4, r5, r6, pc}
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8003a7a:	6881      	ldr	r1, [r0, #8]
 8003a7c:	6983      	ldr	r3, [r0, #24]
 8003a7e:	18cd      	adds	r5, r1, r3
 8003a80:	42a9      	cmp	r1, r5
 8003a82:	d102      	bne.n	8003a8a <fill_first_frag+0x1e>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8003a84:	2300      	movs	r3, #0
 8003a86:	71e3      	strb	r3, [r4, #7]
 8003a88:	e7f5      	b.n	8003a76 <fill_first_frag+0xa>
			res = put_fat(obj->fs, cl, cl + 1);
 8003a8a:	1c4e      	adds	r6, r1, #1
 8003a8c:	4632      	mov	r2, r6
 8003a8e:	6820      	ldr	r0, [r4, #0]
 8003a90:	f7ff ff56 	bl	8003940 <put_fat>
			if (res != FR_OK) return res;
 8003a94:	2800      	cmp	r0, #0
 8003a96:	d1ef      	bne.n	8003a78 <fill_first_frag+0xc>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8003a98:	4631      	mov	r1, r6
 8003a9a:	e7f1      	b.n	8003a80 <fill_first_frag+0x14>

08003a9c <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003a9c:	2901      	cmp	r1, #1
{
 8003a9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003aa2:	4606      	mov	r6, r0
 8003aa4:	460c      	mov	r4, r1
 8003aa6:	4617      	mov	r7, r2
	FATFS *fs = obj->fs;
 8003aa8:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003aaa:	d802      	bhi.n	8003ab2 <remove_chain+0x16>
 8003aac:	2002      	movs	r0, #2
}
 8003aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003ab2:	69eb      	ldr	r3, [r5, #28]
 8003ab4:	428b      	cmp	r3, r1
 8003ab6:	d9f9      	bls.n	8003aac <remove_chain+0x10>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003ab8:	b97a      	cbnz	r2, 8003ada <remove_chain+0x3e>
{
 8003aba:	46a1      	mov	r9, r4
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003abc:	4621      	mov	r1, r4
 8003abe:	4630      	mov	r0, r6
 8003ac0:	f7ff fe61 	bl	8003786 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8003ac4:	46a0      	mov	r8, r4
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	b9b0      	cbnz	r0, 8003af8 <remove_chain+0x5c>
	if (fs->fs_type == FS_EXFAT) {
 8003aca:	782b      	ldrb	r3, [r5, #0]
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d102      	bne.n	8003ad6 <remove_chain+0x3a>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 8003ad0:	2f00      	cmp	r7, #0
 8003ad2:	d144      	bne.n	8003b5e <remove_chain+0xc2>
			obj->stat = 0;		/* Change the chain status 'initial' */
 8003ad4:	71f7      	strb	r7, [r6, #7]
	return FR_OK;
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	e7e9      	b.n	8003aae <remove_chain+0x12>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003ada:	782b      	ldrb	r3, [r5, #0]
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d102      	bne.n	8003ae6 <remove_chain+0x4a>
 8003ae0:	79c3      	ldrb	r3, [r0, #7]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d0e9      	beq.n	8003aba <remove_chain+0x1e>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aea:	4639      	mov	r1, r7
 8003aec:	4628      	mov	r0, r5
 8003aee:	f7ff ff27 	bl	8003940 <put_fat>
		if (res != FR_OK) return res;
 8003af2:	2800      	cmp	r0, #0
 8003af4:	d0e1      	beq.n	8003aba <remove_chain+0x1e>
 8003af6:	e7da      	b.n	8003aae <remove_chain+0x12>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003af8:	2801      	cmp	r0, #1
 8003afa:	d0d7      	beq.n	8003aac <remove_chain+0x10>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003afc:	1c42      	adds	r2, r0, #1
 8003afe:	d101      	bne.n	8003b04 <remove_chain+0x68>
 8003b00:	2001      	movs	r0, #1
 8003b02:	e7d4      	b.n	8003aae <remove_chain+0x12>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8003b04:	782b      	ldrb	r3, [r5, #0]
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d110      	bne.n	8003b2c <remove_chain+0x90>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update allocation information if it is valid */
 8003b0a:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 8003b0e:	3a02      	subs	r2, #2
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d313      	bcc.n	8003b3c <remove_chain+0xa0>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8003b14:	f108 0201 	add.w	r2, r8, #1
 8003b18:	42a2      	cmp	r2, r4
 8003b1a:	d003      	beq.n	8003b24 <remove_chain+0x88>
			if (fs->fs_type == FS_EXFAT) {
 8003b1c:	782b      	ldrb	r3, [r5, #0]
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d013      	beq.n	8003b4a <remove_chain+0xae>
{
 8003b22:	46a1      	mov	r9, r4
	} while (clst < fs->n_fatent);	/* Repeat until the last link */
 8003b24:	69eb      	ldr	r3, [r5, #28]
 8003b26:	42a3      	cmp	r3, r4
 8003b28:	d8c8      	bhi.n	8003abc <remove_chain+0x20>
 8003b2a:	e7ce      	b.n	8003aca <remove_chain+0x2e>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	4641      	mov	r1, r8
 8003b30:	4628      	mov	r0, r5
 8003b32:	f7ff ff05 	bl	8003940 <put_fat>
			if (res != FR_OK) return res;
 8003b36:	2800      	cmp	r0, #0
 8003b38:	d0e7      	beq.n	8003b0a <remove_chain+0x6e>
 8003b3a:	e7b8      	b.n	8003aae <remove_chain+0x12>
			fs->free_clst++;
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	61ab      	str	r3, [r5, #24]
			fs->fsi_flag |= 1;
 8003b40:	796b      	ldrb	r3, [r5, #5]
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	716b      	strb	r3, [r5, #5]
 8003b48:	e7e4      	b.n	8003b14 <remove_chain+0x78>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	4649      	mov	r1, r9
 8003b4e:	4628      	mov	r0, r5
 8003b50:	eba2 0209 	sub.w	r2, r2, r9
 8003b54:	f7ff fdda 	bl	800370c <change_bitmap>
				if (res != FR_OK) return res;
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	d0e2      	beq.n	8003b22 <remove_chain+0x86>
 8003b5c:	e7a7      	b.n	8003aae <remove_chain+0x12>
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 8003b5e:	79f3      	ldrb	r3, [r6, #7]
 8003b60:	b98b      	cbnz	r3, 8003b86 <remove_chain+0xea>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 8003b62:	68b4      	ldr	r4, [r6, #8]
				while (clst != pclst) {
 8003b64:	42bc      	cmp	r4, r7
 8003b66:	d102      	bne.n	8003b6e <remove_chain+0xd2>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
 8003b68:	2302      	movs	r3, #2
 8003b6a:	71f3      	strb	r3, [r6, #7]
 8003b6c:	e7b3      	b.n	8003ad6 <remove_chain+0x3a>
					nxt = get_fat(obj, clst);
 8003b6e:	4621      	mov	r1, r4
 8003b70:	4630      	mov	r0, r6
 8003b72:	f7ff fe08 	bl	8003786 <get_fat>
					if (nxt < 2) return FR_INT_ERR;
 8003b76:	2801      	cmp	r0, #1
 8003b78:	d998      	bls.n	8003aac <remove_chain+0x10>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 8003b7a:	1c43      	adds	r3, r0, #1
 8003b7c:	d0c0      	beq.n	8003b00 <remove_chain+0x64>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 8003b7e:	3401      	adds	r4, #1
 8003b80:	4284      	cmp	r4, r0
 8003b82:	d0ef      	beq.n	8003b64 <remove_chain+0xc8>
 8003b84:	e7a7      	b.n	8003ad6 <remove_chain+0x3a>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d1a5      	bne.n	8003ad6 <remove_chain+0x3a>
 8003b8a:	68b3      	ldr	r3, [r6, #8]
 8003b8c:	42bb      	cmp	r3, r7
 8003b8e:	d8a2      	bhi.n	8003ad6 <remove_chain+0x3a>
 8003b90:	69b2      	ldr	r2, [r6, #24]
 8003b92:	4413      	add	r3, r2
 8003b94:	42bb      	cmp	r3, r7
 8003b96:	d2e7      	bcs.n	8003b68 <remove_chain+0xcc>
 8003b98:	e79d      	b.n	8003ad6 <remove_chain+0x3a>

08003b9a <dir_clear>:
{
 8003b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9c:	4605      	mov	r5, r0
 8003b9e:	460e      	mov	r6, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003ba0:	f7ff fc06 	bl	80033b0 <sync_window>
 8003ba4:	4604      	mov	r4, r0
 8003ba6:	b9f8      	cbnz	r0, 8003be8 <dir_clear+0x4e>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8003ba8:	4631      	mov	r1, r6
 8003baa:	4628      	mov	r0, r5
 8003bac:	f7ff fb80 	bl	80032b0 <clst2sect>
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8003bb0:	f105 073c 	add.w	r7, r5, #60	@ 0x3c
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8003bb4:	4606      	mov	r6, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
 8003bb6:	63a8      	str	r0, [r5, #56]	@ 0x38
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8003bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	4638      	mov	r0, r7
 8003bc0:	f008 fd4c 	bl	800c65c <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8003bc4:	896b      	ldrh	r3, [r5, #10]
 8003bc6:	429c      	cmp	r4, r3
 8003bc8:	d304      	bcc.n	8003bd4 <dir_clear+0x3a>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8003bca:	8968      	ldrh	r0, [r5, #10]
 8003bcc:	1b00      	subs	r0, r0, r4
 8003bce:	bf18      	it	ne
 8003bd0:	2001      	movne	r0, #1
}
 8003bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	4639      	mov	r1, r7
 8003bd8:	7868      	ldrb	r0, [r5, #1]
 8003bda:	1932      	adds	r2, r6, r4
 8003bdc:	f7ff f967 	bl	8002eae <disk_write>
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d1f2      	bne.n	8003bca <dir_clear+0x30>
 8003be4:	3401      	adds	r4, #1
 8003be6:	e7ed      	b.n	8003bc4 <dir_clear+0x2a>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003be8:	2001      	movs	r0, #1
 8003bea:	e7f2      	b.n	8003bd2 <dir_clear+0x38>

08003bec <sync_fs>:
{
 8003bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bee:	4604      	mov	r4, r0
	res = sync_window(fs);
 8003bf0:	f7ff fbde 	bl	80033b0 <sync_window>
 8003bf4:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8003bf6:	2800      	cmp	r0, #0
 8003bf8:	d146      	bne.n	8003c88 <sync_fs+0x9c>
		if (fs->fsi_flag == 1) {	/* Allocation changed? */
 8003bfa:	7967      	ldrb	r7, [r4, #5]
 8003bfc:	2f01      	cmp	r7, #1
 8003bfe:	d13b      	bne.n	8003c78 <sync_fs+0x8c>
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
 8003c00:	7823      	ldrb	r3, [r4, #0]
			fs->fsi_flag = 0;
 8003c02:	7160      	strb	r0, [r4, #5]
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d140      	bne.n	8003c8a <sync_fs+0x9e>
				memset(fs->win, 0, sizeof fs->win);
 8003c08:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 8003c0c:	4601      	mov	r1, r0
 8003c0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c12:	4630      	mov	r0, r6
 8003c14:	f008 fd22 	bl	800c65c <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8003c18:	2352      	movs	r3, #82	@ 0x52
	*ptr++ = (BYTE)val;
 8003c1a:	2241      	movs	r2, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8003c1c:	2172      	movs	r1, #114	@ 0x72
 8003c1e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
 8003c22:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
	*ptr++ = (BYTE)val; val >>= 8;
 8003c26:	2361      	movs	r3, #97	@ 0x61
	*ptr++ = (BYTE)val;
 8003c28:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
	*ptr++ = (BYTE)val; val >>= 8;
 8003c2c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
	*ptr++ = (BYTE)val;
 8003c30:	f884 3223 	strb.w	r3, [r4, #547]	@ 0x223
	*ptr++ = (BYTE)val; val >>= 8;
 8003c34:	f884 1220 	strb.w	r1, [r4, #544]	@ 0x220
	*ptr++ = (BYTE)val; val >>= 8;
 8003c38:	f884 1221 	strb.w	r1, [r4, #545]	@ 0x221
	*ptr++ = (BYTE)val; val >>= 8;
 8003c3c:	f884 2222 	strb.w	r2, [r4, #546]	@ 0x222
				st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8003c40:	69a1      	ldr	r1, [r4, #24]
 8003c42:	f504 7009 	add.w	r0, r4, #548	@ 0x224
 8003c46:	f7ff fa83 	bl	8003150 <st_dword>
				st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8003c4a:	6961      	ldr	r1, [r4, #20]
 8003c4c:	f504 700a 	add.w	r0, r4, #552	@ 0x228
 8003c50:	f7ff fa7e 	bl	8003150 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 8003c54:	2355      	movs	r3, #85	@ 0x55
 8003c56:	f884 3230 	strb.w	r3, [r4, #560]	@ 0x230
	*ptr++ = (BYTE)val;
 8003c5a:	23aa      	movs	r3, #170	@ 0xaa
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 8003c5c:	4631      	mov	r1, r6
	*ptr++ = (BYTE)val;
 8003c5e:	f884 3231 	strb.w	r3, [r4, #561]	@ 0x231
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 8003c62:	463b      	mov	r3, r7
 8003c64:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003c66:	7860      	ldrb	r0, [r4, #1]
 8003c68:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8003c6a:	f884 522e 	strb.w	r5, [r4, #558]	@ 0x22e
	*ptr++ = (BYTE)val; val >>= 8;
 8003c6e:	f884 522f 	strb.w	r5, [r4, #559]	@ 0x22f
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 8003c72:	63a2      	str	r2, [r4, #56]	@ 0x38
						disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8003c74:	f7ff f91b 	bl	8002eae <disk_write>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003c78:	2200      	movs	r2, #0
 8003c7a:	7860      	ldrb	r0, [r4, #1]
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	f7ff f92b 	bl	8002ed8 <disk_ioctl>
 8003c82:	3800      	subs	r0, #0
 8003c84:	bf18      	it	ne
 8003c86:	2001      	movne	r0, #1
}
 8003c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else if (fs->fs_type == FS_EXFAT) {	/* exFAT: Update PercInUse field in BPB */
 8003c8a:	2b04      	cmp	r3, #4
				if (disk_read(fs->pdrv, fs->win, fs->winsect = fs->volbase, 1) == RES_OK) {	/* Load VBR */
 8003c8c:	7860      	ldrb	r0, [r4, #1]
			else if (fs->fs_type == FS_EXFAT) {	/* exFAT: Update PercInUse field in BPB */
 8003c8e:	d1f3      	bne.n	8003c78 <sync_fs+0x8c>
				if (disk_read(fs->pdrv, fs->win, fs->winsect = fs->volbase, 1) == RES_OK) {	/* Load VBR */
 8003c90:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003c92:	f104 053c 	add.w	r5, r4, #60	@ 0x3c
 8003c96:	463b      	mov	r3, r7
 8003c98:	4629      	mov	r1, r5
 8003c9a:	63a2      	str	r2, [r4, #56]	@ 0x38
 8003c9c:	f7ff f8f2 	bl	8002e84 <disk_read>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2800      	cmp	r0, #0
 8003ca4:	d1e8      	bne.n	8003c78 <sync_fs+0x8c>
					BYTE perc_inuse = (fs->free_clst <= fs->n_fatent - 2) ? (BYTE)((QWORD)(fs->n_fatent - 2 - fs->free_clst) * 100 / (fs->n_fatent - 2)) : 0xFF;	/* Precent in use 0-100 or 0xFF(unknown) */
 8003ca6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8003caa:	3a02      	subs	r2, #2
 8003cac:	4291      	cmp	r1, r2
 8003cae:	d811      	bhi.n	8003cd4 <sync_fs+0xe8>
 8003cb0:	2064      	movs	r0, #100	@ 0x64
 8003cb2:	1a51      	subs	r1, r2, r1
 8003cb4:	fba1 0100 	umull	r0, r1, r1, r0
 8003cb8:	f7fd f8e4 	bl	8000e84 <__aeabi_uldivmod>
 8003cbc:	b2c3      	uxtb	r3, r0
					if (fs->win[BPB_PercInUseEx] != perc_inuse) {	/* Write it back into VBR if needed */
 8003cbe:	f894 20ac 	ldrb.w	r2, [r4, #172]	@ 0xac
						disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8003cc2:	7860      	ldrb	r0, [r4, #1]
					if (fs->win[BPB_PercInUseEx] != perc_inuse) {	/* Write it back into VBR if needed */
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d0d7      	beq.n	8003c78 <sync_fs+0x8c>
						fs->win[BPB_PercInUseEx] = perc_inuse;
 8003cc8:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
						disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8003ccc:	4629      	mov	r1, r5
 8003cce:	2301      	movs	r3, #1
 8003cd0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003cd2:	e7cf      	b.n	8003c74 <sync_fs+0x88>
					BYTE perc_inuse = (fs->free_clst <= fs->n_fatent - 2) ? (BYTE)((QWORD)(fs->n_fatent - 2 - fs->free_clst) * 100 / (fs->n_fatent - 2)) : 0xFF;	/* Precent in use 0-100 or 0xFF(unknown) */
 8003cd4:	23ff      	movs	r3, #255	@ 0xff
 8003cd6:	e7f2      	b.n	8003cbe <sync_fs+0xd2>

08003cd8 <mount_volume>:
{
 8003cd8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	600b      	str	r3, [r1, #0]
{
 8003ce0:	460e      	mov	r6, r1
 8003ce2:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8003ce4:	f7ff fb2d 	bl	8003342 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	f2c0 81b9 	blt.w	8004060 <mount_volume+0x388>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8003cee:	4b7f      	ldr	r3, [pc, #508]	@ (8003eec <mount_volume+0x214>)
 8003cf0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8003cf4:	2c00      	cmp	r4, #0
 8003cf6:	f000 81b5 	beq.w	8004064 <mount_volume+0x38c>
	*rfs = fs;							/* Return pointer to the filesystem object */
 8003cfa:	6034      	str	r4, [r6, #0]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8003cfc:	7823      	ldrb	r3, [r4, #0]
		stat = disk_status(fs->pdrv);
 8003cfe:	7860      	ldrb	r0, [r4, #1]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8003d00:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8003d04:	b163      	cbz	r3, 8003d20 <mount_volume+0x48>
		stat = disk_status(fs->pdrv);
 8003d06:	f7ff f8af 	bl	8002e68 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003d0a:	07c3      	lsls	r3, r0, #31
 8003d0c:	d408      	bmi.n	8003d20 <mount_volume+0x48>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8003d0e:	b10d      	cbz	r5, 8003d14 <mount_volume+0x3c>
 8003d10:	0747      	lsls	r7, r0, #29
 8003d12:	d403      	bmi.n	8003d1c <mount_volume+0x44>
			return FR_OK;				/* The filesystem object is already valid */
 8003d14:	2000      	movs	r0, #0
}
 8003d16:	b004      	add	sp, #16
 8003d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return FR_WRITE_PROTECTED;
 8003d1c:	200a      	movs	r0, #10
 8003d1e:	e7fa      	b.n	8003d16 <mount_volume+0x3e>
	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8003d20:	2300      	movs	r3, #0
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8003d22:	7860      	ldrb	r0, [r4, #1]
	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8003d24:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8003d26:	f7ff f8a3 	bl	8002e70 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003d2a:	07c6      	lsls	r6, r0, #31
 8003d2c:	f100 819c 	bmi.w	8004068 <mount_volume+0x390>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8003d30:	b10d      	cbz	r5, 8003d36 <mount_volume+0x5e>
 8003d32:	0741      	lsls	r1, r0, #29
 8003d34:	d4f2      	bmi.n	8003d1c <mount_volume+0x44>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 8003d36:	2100      	movs	r1, #0
 8003d38:	4620      	mov	r0, r4
 8003d3a:	f7ff fc85 	bl	8003648 <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 8003d3e:	2802      	cmp	r0, #2
 8003d40:	f040 8095 	bne.w	8003e6e <mount_volume+0x196>
 8003d44:	466e      	mov	r6, sp
 8003d46:	4632      	mov	r2, r6
 8003d48:	f204 2302 	addw	r3, r4, #514	@ 0x202
 8003d4c:	f204 2142 	addw	r1, r4, #578	@ 0x242
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff f9f7 	bl	8003144 <ld_dword>
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8003d56:	3310      	adds	r3, #16
 8003d58:	428b      	cmp	r3, r1
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8003d5a:	f842 0b04 	str.w	r0, [r2], #4
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8003d5e:	d1f7      	bne.n	8003d50 <mount_volume+0x78>
 8003d60:	2500      	movs	r5, #0
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8003d62:	f856 1b04 	ldr.w	r1, [r6], #4
 8003d66:	2900      	cmp	r1, #0
 8003d68:	d078      	beq.n	8003e5c <mount_volume+0x184>
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f7ff fc6c 	bl	8003648 <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8003d70:	2801      	cmp	r0, #1
 8003d72:	d874      	bhi.n	8003e5e <mount_volume+0x186>
	if (fmt == 1) {
 8003d74:	2801      	cmp	r0, #1
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 8003d76:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
	if (fmt == 1) {
 8003d78:	f040 80be 	bne.w	8003ef8 <mount_volume+0x220>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8003d7c:	230b      	movs	r3, #11
 8003d7e:	f104 0146 	add.w	r1, r4, #70	@ 0x46
 8003d82:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8003d86:	2d00      	cmp	r5, #0
 8003d88:	d176      	bne.n	8003e78 <mount_volume+0x1a0>
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	2b40      	cmp	r3, #64	@ 0x40
 8003d8e:	d1f8      	bne.n	8003d82 <mount_volume+0xaa>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 8003d90:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8003d94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d98:	d16e      	bne.n	8003e78 <mount_volume+0x1a0>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8003d9a:	f894 30a8 	ldrb.w	r3, [r4, #168]	@ 0xa8
 8003d9e:	2b09      	cmp	r3, #9
 8003da0:	d16a      	bne.n	8003e78 <mount_volume+0x1a0>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 8003da2:	f104 0084 	add.w	r0, r4, #132	@ 0x84
 8003da6:	f7ff f9cf 	bl	8003148 <ld_qword>
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
 8003daa:	f04f 33ff 	mov.w	r3, #4294967295
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 8003dae:	1816      	adds	r6, r2, r0
 8003db0:	f141 0100 	adc.w	r1, r1, #0
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
 8003db4:	42b3      	cmp	r3, r6
 8003db6:	eb75 0301 	sbcs.w	r3, r5, r1
 8003dba:	d35d      	bcc.n	8003e78 <mount_volume+0x1a0>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8003dbc:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8003dc0:	f7ff f9c0 	bl	8003144 <ld_dword>
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8003dc4:	f894 30aa 	ldrb.w	r3, [r4, #170]	@ 0xaa
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8003dc8:	6220      	str	r0, [r4, #32]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8003dca:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8003dcc:	70e3      	strb	r3, [r4, #3]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8003dce:	d153      	bne.n	8003e78 <mount_volume+0x1a0>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8003dd0:	f894 00a9 	ldrb.w	r0, [r4, #169]	@ 0xa9
 8003dd4:	4083      	lsls	r3, r0
 8003dd6:	b298      	uxth	r0, r3
 8003dd8:	8160      	strh	r0, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	d04c      	beq.n	8003e78 <mount_volume+0x1a0>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8003dde:	f104 0098 	add.w	r0, r4, #152	@ 0x98
 8003de2:	f7ff f9af 	bl	8003144 <ld_dword>
 8003de6:	4680      	mov	r8, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8003de8:	4841      	ldr	r0, [pc, #260]	@ (8003ef0 <mount_volume+0x218>)
 8003dea:	4580      	cmp	r8, r0
 8003dec:	d844      	bhi.n	8003e78 <mount_volume+0x1a0>
		fs->n_fatent = nclst + 2;
 8003dee:	f108 0002 	add.w	r0, r8, #2
 8003df2:	61e0      	str	r0, [r4, #28]
		fs->volbase = bsect;
 8003df4:	6262      	str	r2, [r4, #36]	@ 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8003df6:	f104 0094 	add.w	r0, r4, #148	@ 0x94
 8003dfa:	f7ff f9a3 	bl	8003144 <ld_dword>
 8003dfe:	1887      	adds	r7, r0, r2
 8003e00:	6327      	str	r7, [r4, #48]	@ 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8003e02:	f104 008c 	add.w	r0, r4, #140	@ 0x8c
 8003e06:	f7ff f99d 	bl	8003144 <ld_dword>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 8003e0a:	b29b      	uxth	r3, r3
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8003e0c:	4402      	add	r2, r0
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 8003e0e:	fb08 f003 	mul.w	r0, r8, r3
 8003e12:	19c0      	adds	r0, r0, r7
 8003e14:	eb45 0305 	adc.w	r3, r5, r5
 8003e18:	4286      	cmp	r6, r0
 8003e1a:	eb71 0303 	sbcs.w	r3, r1, r3
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8003e1e:	62a2      	str	r2, [r4, #40]	@ 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 8003e20:	d32a      	bcc.n	8003e78 <mount_volume+0x1a0>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8003e22:	f104 009c 	add.w	r0, r4, #156	@ 0x9c
 8003e26:	f7ff f98d 	bl	8003144 <ld_dword>
		so = i = 0;
 8003e2a:	462e      	mov	r6, r5
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8003e2c:	62e0      	str	r0, [r4, #44]	@ 0x2c
			if (i == 0) {
 8003e2e:	b965      	cbnz	r5, 8003e4a <mount_volume+0x172>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 8003e30:	8963      	ldrh	r3, [r4, #10]
 8003e32:	42b3      	cmp	r3, r6
 8003e34:	d920      	bls.n	8003e78 <mount_volume+0x1a0>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 8003e36:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f7ff fa39 	bl	80032b0 <clst2sect>
 8003e3e:	1981      	adds	r1, r0, r6
 8003e40:	4620      	mov	r0, r4
 8003e42:	f7ff fbe8 	bl	8003616 <move_window>
 8003e46:	b980      	cbnz	r0, 8003e6a <mount_volume+0x192>
				so++;
 8003e48:	3601      	adds	r6, #1
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 8003e4a:	1963      	adds	r3, r4, r5
 8003e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e50:	2b81      	cmp	r3, #129	@ 0x81
 8003e52:	d013      	beq.n	8003e7c <mount_volume+0x1a4>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 8003e54:	3520      	adds	r5, #32
 8003e56:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (i == 0) {
 8003e5a:	e7e8      	b.n	8003e2e <mount_volume+0x156>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8003e5c:	2003      	movs	r0, #3
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8003e5e:	3501      	adds	r5, #1
 8003e60:	2d04      	cmp	r5, #4
 8003e62:	f47f af7e 	bne.w	8003d62 <mount_volume+0x8a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8003e66:	2804      	cmp	r0, #4
 8003e68:	d106      	bne.n	8003e78 <mount_volume+0x1a0>
 8003e6a:	2001      	movs	r0, #1
 8003e6c:	e753      	b.n	8003d16 <mount_volume+0x3e>
 8003e6e:	2804      	cmp	r0, #4
 8003e70:	d0fb      	beq.n	8003e6a <mount_volume+0x192>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8003e72:	2801      	cmp	r0, #1
 8003e74:	f67f af7e 	bls.w	8003d74 <mount_volume+0x9c>
 8003e78:	200d      	movs	r0, #13
 8003e7a:	e74c      	b.n	8003d16 <mount_volume+0x3e>
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
 8003e7c:	f105 0014 	add.w	r0, r5, #20
 8003e80:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 8003e84:	4430      	add	r0, r6
 8003e86:	f7ff f95d 	bl	8003144 <ld_dword>
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
 8003e8a:	2801      	cmp	r0, #1
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
 8003e8c:	4605      	mov	r5, r0
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
 8003e8e:	d9f3      	bls.n	8003e78 <mount_volume+0x1a0>
 8003e90:	69e3      	ldr	r3, [r4, #28]
 8003e92:	4283      	cmp	r3, r0
 8003e94:	d9f0      	bls.n	8003e78 <mount_volume+0x1a0>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 8003e96:	8961      	ldrh	r1, [r4, #10]
 8003e98:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003e9a:	1e82      	subs	r2, r0, #2
 8003e9c:	fb02 3301 	mla	r3, r2, r1, r3
 8003ea0:	6363      	str	r3, [r4, #52]	@ 0x34
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 8003ea2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8003eaa:	f7ff fbb4 	bl	8003616 <move_window>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	d1da      	bne.n	8003e6a <mount_volume+0x192>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 8003eb4:	f005 007f 	and.w	r0, r5, #127	@ 0x7f
 8003eb8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8003ebc:	f7ff f942 	bl	8003144 <ld_dword>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 8003ec0:	1c42      	adds	r2, r0, #1
 8003ec2:	d003      	beq.n	8003ecc <mount_volume+0x1f4>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented bitmap? */
 8003ec4:	3501      	adds	r5, #1
 8003ec6:	42a8      	cmp	r0, r5
 8003ec8:	d0eb      	beq.n	8003ea2 <mount_volume+0x1ca>
 8003eca:	e7d5      	b.n	8003e78 <mount_volume+0x1a0>
		fmt = FS_EXFAT;			/* FAT sub-type */
 8003ecc:	2504      	movs	r5, #4
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 8003ece:	e9c4 0005 	strd	r0, r0, [r4, #20]
		fs->fsi_flag = 0;	/* Enable to sync PercInUse value in VBR */
 8003ed2:	7163      	strb	r3, [r4, #5]
	fs->id = ++Fsid;		/* Volume mount ID */
 8003ed4:	4a07      	ldr	r2, [pc, #28]	@ (8003ef4 <mount_volume+0x21c>)
	clear_share(fs);
 8003ed6:	4620      	mov	r0, r4
	fs->id = ++Fsid;		/* Volume mount ID */
 8003ed8:	8813      	ldrh	r3, [r2, #0]
	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 8003eda:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8003edc:	3301      	adds	r3, #1
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	80e3      	strh	r3, [r4, #6]
 8003ee2:	8013      	strh	r3, [r2, #0]
	clear_share(fs);
 8003ee4:	f7ff f9d4 	bl	8003290 <clear_share>
	return FR_OK;
 8003ee8:	e714      	b.n	8003d14 <mount_volume+0x3c>
 8003eea:	bf00      	nop
 8003eec:	20000910 	.word	0x20000910
 8003ef0:	7ffffffd 	.word	0x7ffffffd
 8003ef4:	2000090c 	.word	0x2000090c
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003ef8:	f8b4 3047 	ldrh.w	r3, [r4, #71]	@ 0x47
 8003efc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f00:	d1ba      	bne.n	8003e78 <mount_volume+0x1a0>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8003f02:	f8b4 1052 	ldrh.w	r1, [r4, #82]	@ 0x52
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003f06:	b921      	cbnz	r1, 8003f12 <mount_volume+0x23a>
 8003f08:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 8003f0c:	f7ff f91a 	bl	8003144 <ld_dword>
 8003f10:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003f12:	f894 504c 	ldrb.w	r5, [r4, #76]	@ 0x4c
		fs->fsize = fasize;
 8003f16:	6221      	str	r1, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003f18:	1e6b      	subs	r3, r5, #1
 8003f1a:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003f1c:	70e5      	strb	r5, [r4, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003f1e:	d8ab      	bhi.n	8003e78 <mount_volume+0x1a0>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8003f20:	f894 8049 	ldrb.w	r8, [r4, #73]	@ 0x49
 8003f24:	f8a4 800a 	strh.w	r8, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8003f28:	f1b8 0f00 	cmp.w	r8, #0
 8003f2c:	d0a4      	beq.n	8003e78 <mount_volume+0x1a0>
 8003f2e:	f108 33ff 	add.w	r3, r8, #4294967295
 8003f32:	ea13 0f08 	tst.w	r3, r8
 8003f36:	d19f      	bne.n	8003e78 <mount_volume+0x1a0>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003f38:	f8b4 704d 	ldrh.w	r7, [r4, #77]	@ 0x4d
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003f3c:	073b      	lsls	r3, r7, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003f3e:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003f40:	d19a      	bne.n	8003e78 <mount_volume+0x1a0>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8003f42:	f8b4 004f 	ldrh.w	r0, [r4, #79]	@ 0x4f
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8003f46:	b918      	cbnz	r0, 8003f50 <mount_volume+0x278>
 8003f48:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8003f4c:	f7ff f8fa 	bl	8003144 <ld_dword>
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8003f50:	f8b4 304a 	ldrh.w	r3, [r4, #74]	@ 0x4a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d08f      	beq.n	8003e78 <mount_volume+0x1a0>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003f58:	fb01 fc05 	mul.w	ip, r1, r5
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8003f5c:	eb03 1e17 	add.w	lr, r3, r7, lsr #4
 8003f60:	44e6      	add	lr, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8003f62:	4570      	cmp	r0, lr
 8003f64:	d388      	bcc.n	8003e78 <mount_volume+0x1a0>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003f66:	eba0 050e 	sub.w	r5, r0, lr
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003f6a:	4545      	cmp	r5, r8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003f6c:	fbb5 f6f8 	udiv	r6, r5, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003f70:	d382      	bcc.n	8003e78 <mount_volume+0x1a0>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8003f72:	483e      	ldr	r0, [pc, #248]	@ (800406c <mount_volume+0x394>)
 8003f74:	4286      	cmp	r6, r0
 8003f76:	f63f af7f 	bhi.w	8003e78 <mount_volume+0x1a0>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003f7a:	f64f 70f5 	movw	r0, #65525	@ 0xfff5
 8003f7e:	4286      	cmp	r6, r0
 8003f80:	d85d      	bhi.n	800403e <mount_volume+0x366>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003f82:	f640 75f5 	movw	r5, #4085	@ 0xff5
 8003f86:	42ae      	cmp	r6, r5
 8003f88:	bf8c      	ite	hi
 8003f8a:	2502      	movhi	r5, #2
 8003f8c:	2501      	movls	r5, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003f8e:	3602      	adds	r6, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003f90:	4413      	add	r3, r2
		fs->database = bsect + sysect;					/* Data start sector */
 8003f92:	eb02 000e 	add.w	r0, r2, lr
		if (fmt == FS_FAT32) {
 8003f96:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003f98:	61e6      	str	r6, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8003f9a:	6262      	str	r2, [r4, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003f9c:	62a3      	str	r3, [r4, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8003f9e:	6320      	str	r0, [r4, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8003fa0:	d14f      	bne.n	8004042 <mount_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8003fa2:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 8003fa6:	433b      	orrs	r3, r7
 8003fa8:	f47f af66 	bne.w	8003e78 <mount_volume+0x1a0>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003fac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003fb0:	f7ff f8c8 	bl	8003144 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8003fb4:	00b3      	lsls	r3, r6, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003fb6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8003fba:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003fbe:	62e0      	str	r0, [r4, #44]	@ 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003fc0:	f4ff af5a 	bcc.w	8003e78 <mount_volume+0x1a0>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 8003fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc8:	e9c4 3305 	strd	r3, r3, [r4, #20]
		fs->fsi_flag = 0x80;	/* Disable FSInfo by default */
 8003fcc:	2380      	movs	r3, #128	@ 0x80
		if (fmt == FS_FAT32
 8003fce:	2d03      	cmp	r5, #3
		fs->fsi_flag = 0x80;	/* Disable FSInfo by default */
 8003fd0:	7163      	strb	r3, [r4, #5]
		if (fmt == FS_FAT32
 8003fd2:	f47f af7f 	bne.w	8003ed4 <mount_volume+0x1fc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1	/* FAT32: Enable FSInfo feature only if FSInfo sector is next to VBR */
 8003fd6:	f8b4 306c 	ldrh.w	r3, [r4, #108]	@ 0x6c
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	f47f af7a 	bne.w	8003ed4 <mount_volume+0x1fc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	1c51      	adds	r1, r2, #1
 8003fe4:	f7ff fb17 	bl	8003616 <move_window>
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	f47f af73 	bne.w	8003ed4 <mount_volume+0x1fc>
			fs->fsi_flag = 0;
 8003fee:	7160      	strb	r0, [r4, #5]
			if (   ld_dword(fs->win + FSI_LeadSig) == 0x41615252	/* Load FSInfo data if available */
 8003ff0:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 8003ff4:	f7ff f8a6 	bl	8003144 <ld_dword>
 8003ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8004070 <mount_volume+0x398>)
 8003ffa:	4298      	cmp	r0, r3
 8003ffc:	f47f af6a 	bne.w	8003ed4 <mount_volume+0x1fc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272
 8004000:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 8004004:	f7ff f89e 	bl	8003144 <ld_dword>
 8004008:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
 800400c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004010:	3320      	adds	r3, #32
 8004012:	4298      	cmp	r0, r3
 8004014:	f47f af5e 	bne.w	8003ed4 <mount_volume+0x1fc>
				&& ld_dword(fs->win + FSI_TrailSig) == 0xAA550000)
 8004018:	f204 202e 	addw	r0, r4, #558	@ 0x22e
 800401c:	f7ff f892 	bl	8003144 <ld_dword>
 8004020:	4b14      	ldr	r3, [pc, #80]	@ (8004074 <mount_volume+0x39c>)
 8004022:	4298      	cmp	r0, r3
 8004024:	f47f af56 	bne.w	8003ed4 <mount_volume+0x1fc>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004028:	f504 7009 	add.w	r0, r4, #548	@ 0x224
 800402c:	f7ff f88a 	bl	8003144 <ld_dword>
 8004030:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004032:	f504 700a 	add.w	r0, r4, #552	@ 0x228
 8004036:	f7ff f885 	bl	8003144 <ld_dword>
 800403a:	6160      	str	r0, [r4, #20]
 800403c:	e74a      	b.n	8003ed4 <mount_volume+0x1fc>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800403e:	2503      	movs	r5, #3
 8004040:	e7a5      	b.n	8003f8e <mount_volume+0x2b6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8004042:	2f00      	cmp	r7, #0
 8004044:	f43f af18 	beq.w	8003e78 <mount_volume+0x1a0>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004048:	2d02      	cmp	r5, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800404a:	eb03 000c 	add.w	r0, r3, ip
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800404e:	ea4f 0346 	mov.w	r3, r6, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004052:	bf1e      	ittt	ne
 8004054:	199b      	addne	r3, r3, r6
 8004056:	f006 0601 	andne.w	r6, r6, #1
 800405a:	eb06 0353 	addne.w	r3, r6, r3, lsr #1
 800405e:	e7aa      	b.n	8003fb6 <mount_volume+0x2de>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004060:	200b      	movs	r0, #11
 8004062:	e658      	b.n	8003d16 <mount_volume+0x3e>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8004064:	200c      	movs	r0, #12
 8004066:	e656      	b.n	8003d16 <mount_volume+0x3e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004068:	2003      	movs	r0, #3
 800406a:	e654      	b.n	8003d16 <mount_volume+0x3e>
 800406c:	0ffffff5 	.word	0x0ffffff5
 8004070:	41615252 	.word	0x41615252
 8004074:	aa550000 	.word	0xaa550000

08004078 <create_chain>:
{
 8004078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800407c:	4606      	mov	r6, r0
	if (clst == 0) {	/* Create a new chain */
 800407e:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
 8004080:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8004082:	b949      	cbnz	r1, 8004098 <create_chain+0x20>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8004084:	696f      	ldr	r7, [r5, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004086:	b1c7      	cbz	r7, 80040ba <create_chain+0x42>
 8004088:	69eb      	ldr	r3, [r5, #28]
 800408a:	42bb      	cmp	r3, r7
 800408c:	bf98      	it	ls
 800408e:	2701      	movls	r7, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8004090:	69ab      	ldr	r3, [r5, #24]
 8004092:	b9a3      	cbnz	r3, 80040be <create_chain+0x46>
 8004094:	2400      	movs	r4, #0
 8004096:	e005      	b.n	80040a4 <create_chain+0x2c>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004098:	f7ff fb75 	bl	8003786 <get_fat>
		if (cs < 2) return 1;				/* Test for insanity */
 800409c:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800409e:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Test for insanity */
 80040a0:	d803      	bhi.n	80040aa <create_chain+0x32>
 80040a2:	2401      	movs	r4, #1
}
 80040a4:	4620      	mov	r0, r4
 80040a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 80040aa:	1c42      	adds	r2, r0, #1
 80040ac:	f000 80d8 	beq.w	8004260 <create_chain+0x1e8>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80040b0:	69eb      	ldr	r3, [r5, #28]
 80040b2:	4283      	cmp	r3, r0
 80040b4:	d8f6      	bhi.n	80040a4 <create_chain+0x2c>
 80040b6:	4647      	mov	r7, r8
 80040b8:	e7ea      	b.n	8004090 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80040ba:	2701      	movs	r7, #1
 80040bc:	e7e8      	b.n	8004090 <create_chain+0x18>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80040be:	782a      	ldrb	r2, [r5, #0]
	if (clst >= fs->n_fatent - 2) clst = 0;
 80040c0:	69eb      	ldr	r3, [r5, #28]
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80040c2:	2a04      	cmp	r2, #4
 80040c4:	f040 8086 	bne.w	80041d4 <create_chain+0x15c>
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 80040c8:	f1a7 0a02 	sub.w	sl, r7, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
 80040cc:	3b02      	subs	r3, #2
 80040ce:	459a      	cmp	sl, r3
 80040d0:	bf28      	it	cs
 80040d2:	f04f 0a00 	movcs.w	sl, #0
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80040d6:	f04f 0b01 	mov.w	fp, #1
	scl = val = clst; ctr = 0;
 80040da:	46d1      	mov	r9, sl
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 80040dc:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80040de:	4628      	mov	r0, r5
 80040e0:	eb01 3119 	add.w	r1, r1, r9, lsr #12
 80040e4:	f7ff fa97 	bl	8003616 <move_window>
 80040e8:	2800      	cmp	r0, #0
 80040ea:	d13b      	bne.n	8004164 <create_chain+0xec>
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80040ec:	69ea      	ldr	r2, [r5, #28]
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80040ee:	f009 0307 	and.w	r3, r9, #7
 80040f2:	fa0b f303 	lsl.w	r3, fp, r3
 80040f6:	f3c9 01c8 	ubfx	r1, r9, #3, #9
 80040fa:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80040fc:	1e90      	subs	r0, r2, #2
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80040fe:	186a      	adds	r2, r5, r1
			bm = 1;
 8004100:	464c      	mov	r4, r9
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8004102:	f892 203c 	ldrb.w	r2, [r2, #60]	@ 0x3c
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8004106:	f109 0901 	add.w	r9, r9, #1
 800410a:	4581      	cmp	r9, r0
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800410c:	ea02 0203 	and.w	r2, r2, r3
					val = 0; bm = 0; i = SS(fs);
 8004110:	bf29      	itett	cs
 8004112:	2300      	movcs	r3, #0
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8004114:	005b      	lslcc	r3, r3, #1
					val = 0; bm = 0; i = SS(fs);
 8004116:	4699      	movcs	r9, r3
 8004118:	f44f 7100 	movcs.w	r1, #512	@ 0x200
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800411c:	bf38      	it	cc
 800411e:	b2db      	uxtbcc	r3, r3
				if (bv == 0) {	/* Is it a free cluster? */
 8004120:	b9b2      	cbnz	r2, 8004150 <create_chain+0xd8>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8004122:	3402      	adds	r4, #2
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8004124:	1e63      	subs	r3, r4, #1
 8004126:	3303      	adds	r3, #3
 8004128:	d8bc      	bhi.n	80040a4 <create_chain+0x2c>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800412a:	2301      	movs	r3, #1
 800412c:	4621      	mov	r1, r4
 800412e:	461a      	mov	r2, r3
 8004130:	4628      	mov	r0, r5
 8004132:	f7ff faeb 	bl	800370c <change_bitmap>
		if (res == FR_INT_ERR) return 1;
 8004136:	2802      	cmp	r0, #2
 8004138:	d0b3      	beq.n	80040a2 <create_chain+0x2a>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800413a:	2801      	cmp	r0, #1
 800413c:	f000 8090 	beq.w	8004260 <create_chain+0x1e8>
		if (clst == 0) {							/* Is it a new chain? */
 8004140:	f1b8 0f00 	cmp.w	r8, #0
 8004144:	d113      	bne.n	800416e <create_chain+0xf6>
			obj->stat = 2;							/* Set status 'contiguous' */
 8004146:	2302      	movs	r3, #2
 8004148:	71f3      	strb	r3, [r6, #7]
	if (res == FR_OK) {			/* Update allocation information if the function succeeded */
 800414a:	2800      	cmp	r0, #0
 800414c:	d1a9      	bne.n	80040a2 <create_chain+0x2a>
 800414e:	e030      	b.n	80041b2 <create_chain+0x13a>
				if (val == clst) return 0;	/* All cluster scanned? */
 8004150:	45ca      	cmp	sl, r9
 8004152:	d00a      	beq.n	800416a <create_chain+0xf2>
			} while (bm != 0);
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1d2      	bne.n	80040fe <create_chain+0x86>
		} while (++i < SS(fs));
 8004158:	3101      	adds	r1, #1
 800415a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800415e:	d2bd      	bcs.n	80040dc <create_chain+0x64>
			bm = 1;
 8004160:	2301      	movs	r3, #1
 8004162:	e7cc      	b.n	80040fe <create_chain+0x86>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8004164:	f04f 34ff 	mov.w	r4, #4294967295
 8004168:	e7dc      	b.n	8004124 <create_chain+0xac>
				if (val == clst) return 0;	/* All cluster scanned? */
 800416a:	2400      	movs	r4, #0
 800416c:	e7da      	b.n	8004124 <create_chain+0xac>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800416e:	79f3      	ldrb	r3, [r6, #7]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d107      	bne.n	8004184 <create_chain+0x10c>
 8004174:	1c7b      	adds	r3, r7, #1
 8004176:	42a3      	cmp	r3, r4
 8004178:	d0e7      	beq.n	800414a <create_chain+0xd2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800417a:	68b3      	ldr	r3, [r6, #8]
 800417c:	1afb      	subs	r3, r7, r3
 800417e:	61b3      	str	r3, [r6, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8004180:	2303      	movs	r3, #3
 8004182:	71f3      	strb	r3, [r6, #7]
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8004184:	f108 0201 	add.w	r2, r8, #1
 8004188:	42a2      	cmp	r2, r4
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800418a:	69f3      	ldr	r3, [r6, #28]
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800418c:	d105      	bne.n	800419a <create_chain+0x122>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800418e:	b113      	cbz	r3, 8004196 <create_chain+0x11e>
 8004190:	3301      	adds	r3, #1
 8004192:	61f3      	str	r3, [r6, #28]
 8004194:	e7d9      	b.n	800414a <create_chain+0xd2>
 8004196:	2302      	movs	r3, #2
 8004198:	e7fb      	b.n	8004192 <create_chain+0x11a>
				if (obj->n_frag == 0) obj->n_frag = 1;
 800419a:	b90b      	cbnz	r3, 80041a0 <create_chain+0x128>
 800419c:	2301      	movs	r3, #1
 800419e:	61f3      	str	r3, [r6, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80041a0:	4622      	mov	r2, r4
 80041a2:	4641      	mov	r1, r8
 80041a4:	4630      	mov	r0, r6
 80041a6:	f7ff fc49 	bl	8003a3c <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
 80041aa:	2800      	cmp	r0, #0
 80041ac:	d155      	bne.n	800425a <create_chain+0x1e2>
 80041ae:	2301      	movs	r3, #1
 80041b0:	61f3      	str	r3, [r6, #28]
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
 80041b2:	69ab      	ldr	r3, [r5, #24]
		fs->last_clst = ncl;
 80041b4:	616c      	str	r4, [r5, #20]
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f43f af74 	beq.w	80040a4 <create_chain+0x2c>
 80041bc:	69ea      	ldr	r2, [r5, #28]
 80041be:	3a02      	subs	r2, #2
 80041c0:	4293      	cmp	r3, r2
 80041c2:	f63f af6f 	bhi.w	80040a4 <create_chain+0x2c>
			fs->free_clst--;
 80041c6:	3b01      	subs	r3, #1
 80041c8:	61ab      	str	r3, [r5, #24]
			fs->fsi_flag |= 1;
 80041ca:	796b      	ldrb	r3, [r5, #5]
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	716b      	strb	r3, [r5, #5]
 80041d2:	e767      	b.n	80040a4 <create_chain+0x2c>
		if (scl == clst) {						/* Stretching an existing chain? */
 80041d4:	4547      	cmp	r7, r8
 80041d6:	d115      	bne.n	8004204 <create_chain+0x18c>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 80041d8:	1c7c      	adds	r4, r7, #1
			if (ncl >= fs->n_fatent) ncl = 2;
 80041da:	42a3      	cmp	r3, r4
 80041dc:	bf98      	it	ls
 80041de:	2402      	movls	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 80041e0:	4630      	mov	r0, r6
 80041e2:	4621      	mov	r1, r4
 80041e4:	f7ff facf 	bl	8003786 <get_fat>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80041e8:	2801      	cmp	r0, #1
 80041ea:	f43f af5a 	beq.w	80040a2 <create_chain+0x2a>
 80041ee:	1c43      	adds	r3, r0, #1
 80041f0:	d036      	beq.n	8004260 <create_chain+0x1e8>
			if (cs != 0) {						/* Not free? */
 80041f2:	b1f8      	cbz	r0, 8004234 <create_chain+0x1bc>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 80041f4:	f8d5 9014 	ldr.w	r9, [r5, #20]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 80041f8:	f1b9 0f01 	cmp.w	r9, #1
 80041fc:	d902      	bls.n	8004204 <create_chain+0x18c>
 80041fe:	69eb      	ldr	r3, [r5, #28]
 8004200:	454b      	cmp	r3, r9
 8004202:	d800      	bhi.n	8004206 <create_chain+0x18e>
			if (ncl >= fs->n_fatent) ncl = 2;
 8004204:	46b9      	mov	r9, r7
 8004206:	464c      	mov	r4, r9
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004208:	69eb      	ldr	r3, [r5, #28]
				ncl++;							/* Next cluster */
 800420a:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800420c:	42a3      	cmp	r3, r4
 800420e:	d804      	bhi.n	800421a <create_chain+0x1a2>
					if (ncl > scl) return 0;	/* No free cluster found? */
 8004210:	f1b9 0f01 	cmp.w	r9, #1
 8004214:	f43f af3e 	beq.w	8004094 <create_chain+0x1c>
					ncl = 2;
 8004218:	2402      	movs	r4, #2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800421a:	4621      	mov	r1, r4
 800421c:	4630      	mov	r0, r6
 800421e:	f7ff fab2 	bl	8003786 <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
 8004222:	b148      	cbz	r0, 8004238 <create_chain+0x1c0>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8004224:	2801      	cmp	r0, #1
 8004226:	f43f af3c 	beq.w	80040a2 <create_chain+0x2a>
 800422a:	3001      	adds	r0, #1
 800422c:	d018      	beq.n	8004260 <create_chain+0x1e8>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800422e:	454c      	cmp	r4, r9
 8004230:	d1ea      	bne.n	8004208 <create_chain+0x190>
 8004232:	e72f      	b.n	8004094 <create_chain+0x1c>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8004234:	2c00      	cmp	r4, #0
 8004236:	d0e5      	beq.n	8004204 <create_chain+0x18c>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8004238:	f04f 32ff 	mov.w	r2, #4294967295
 800423c:	4621      	mov	r1, r4
 800423e:	4628      	mov	r0, r5
 8004240:	f7ff fb7e 	bl	8003940 <put_fat>
		if (res == FR_OK && clst != 0) {
 8004244:	b948      	cbnz	r0, 800425a <create_chain+0x1e2>
 8004246:	f1b8 0f00 	cmp.w	r8, #0
 800424a:	d0b2      	beq.n	80041b2 <create_chain+0x13a>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 800424c:	4622      	mov	r2, r4
 800424e:	4641      	mov	r1, r8
 8004250:	4628      	mov	r0, r5
 8004252:	f7ff fb75 	bl	8003940 <put_fat>
	if (res == FR_OK) {			/* Update allocation information if the function succeeded */
 8004256:	2800      	cmp	r0, #0
 8004258:	d0ab      	beq.n	80041b2 <create_chain+0x13a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800425a:	2801      	cmp	r0, #1
 800425c:	f47f af21 	bne.w	80040a2 <create_chain+0x2a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8004260:	f04f 34ff 	mov.w	r4, #4294967295
 8004264:	e71e      	b.n	80040a4 <create_chain+0x2c>

08004266 <dir_next>:
{
 8004266:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 800426a:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800426c:	6b07      	ldr	r7, [r0, #48]	@ 0x30
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800426e:	7833      	ldrb	r3, [r6, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004270:	3720      	adds	r7, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8004272:	2b04      	cmp	r3, #4
 8004274:	bf14      	ite	ne
 8004276:	f44f 1300 	movne.w	r3, #2097152	@ 0x200000
 800427a:	f04f 5380 	moveq.w	r3, #268435456	@ 0x10000000
 800427e:	42bb      	cmp	r3, r7
 8004280:	bf9c      	itt	ls
 8004282:	2300      	movls	r3, #0
 8004284:	6383      	strls	r3, [r0, #56]	@ 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8004286:	6b83      	ldr	r3, [r0, #56]	@ 0x38
{
 8004288:	4604      	mov	r4, r0
 800428a:	4689      	mov	r9, r1
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800428c:	b173      	cbz	r3, 80042ac <dir_next+0x46>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800428e:	f3c7 0808 	ubfx	r8, r7, #0, #9
 8004292:	f1b8 0f00 	cmp.w	r8, #0
 8004296:	d13c      	bne.n	8004312 <dir_next+0xac>
		if (dp->clust == 0) {	/* Static table */
 8004298:	6b41      	ldr	r1, [r0, #52]	@ 0x34
		dp->sect++;				/* Next sector */
 800429a:	3301      	adds	r3, #1
 800429c:	6383      	str	r3, [r0, #56]	@ 0x38
		if (dp->clust == 0) {	/* Static table */
 800429e:	b941      	cbnz	r1, 80042b2 <dir_next+0x4c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80042a0:	8933      	ldrh	r3, [r6, #8]
 80042a2:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 80042a6:	d834      	bhi.n	8004312 <dir_next+0xac>
				dp->sect = 0; return FR_NO_FILE;
 80042a8:	2300      	movs	r3, #0
 80042aa:	63a3      	str	r3, [r4, #56]	@ 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80042ac:	2004      	movs	r0, #4
}
 80042ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80042b2:	8973      	ldrh	r3, [r6, #10]
 80042b4:	3b01      	subs	r3, #1
 80042b6:	ea13 2357 	ands.w	r3, r3, r7, lsr #9
 80042ba:	d12a      	bne.n	8004312 <dir_next+0xac>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 80042bc:	f7ff fa63 	bl	8003786 <get_fat>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 80042c0:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 80042c2:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 80042c4:	d801      	bhi.n	80042ca <dir_next+0x64>
 80042c6:	2002      	movs	r0, #2
 80042c8:	e7f1      	b.n	80042ae <dir_next+0x48>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80042ca:	1c42      	adds	r2, r0, #1
 80042cc:	d101      	bne.n	80042d2 <dir_next+0x6c>
 80042ce:	2001      	movs	r0, #1
 80042d0:	e7ed      	b.n	80042ae <dir_next+0x48>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 80042d2:	69f3      	ldr	r3, [r6, #28]
 80042d4:	4283      	cmp	r3, r0
 80042d6:	d816      	bhi.n	8004306 <dir_next+0xa0>
					if (!stretch) {								/* If no stretch, report EOT */
 80042d8:	f1b9 0f00 	cmp.w	r9, #0
 80042dc:	d0e4      	beq.n	80042a8 <dir_next+0x42>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80042de:	4620      	mov	r0, r4
 80042e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80042e2:	f7ff fec9 	bl	8004078 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80042e6:	4605      	mov	r5, r0
 80042e8:	b1c8      	cbz	r0, 800431e <dir_next+0xb8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80042ea:	2801      	cmp	r0, #1
 80042ec:	d0eb      	beq.n	80042c6 <dir_next+0x60>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80042ee:	1c43      	adds	r3, r0, #1
 80042f0:	d0ed      	beq.n	80042ce <dir_next+0x68>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 80042f2:	4601      	mov	r1, r0
 80042f4:	4630      	mov	r0, r6
 80042f6:	f7ff fc50 	bl	8003b9a <dir_clear>
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d1e7      	bne.n	80042ce <dir_next+0x68>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 80042fe:	79e3      	ldrb	r3, [r4, #7]
 8004300:	f043 0304 	orr.w	r3, r3, #4
 8004304:	71e3      	strb	r3, [r4, #7]
				dp->sect = clst2sect(fs, clst);
 8004306:	4629      	mov	r1, r5
 8004308:	4630      	mov	r0, r6
				dp->clust = clst;		/* Initialize data for new cluster */
 800430a:	6365      	str	r5, [r4, #52]	@ 0x34
				dp->sect = clst2sect(fs, clst);
 800430c:	f7fe ffd0 	bl	80032b0 <clst2sect>
 8004310:	63a0      	str	r0, [r4, #56]	@ 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004312:	363c      	adds	r6, #60	@ 0x3c
 8004314:	4446      	add	r6, r8
	return FR_OK;
 8004316:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 8004318:	6327      	str	r7, [r4, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800431a:	63e6      	str	r6, [r4, #60]	@ 0x3c
	return FR_OK;
 800431c:	e7c7      	b.n	80042ae <dir_next+0x48>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800431e:	2007      	movs	r0, #7
 8004320:	e7c5      	b.n	80042ae <dir_next+0x48>

08004322 <dir_alloc>:
{
 8004322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004324:	460e      	mov	r6, r1
	res = dir_sdi(dp, 0);
 8004326:	2100      	movs	r1, #0
{
 8004328:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800432a:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 800432c:	f7ff fac0 	bl	80038b0 <dir_sdi>
	if (res == FR_OK) {
 8004330:	b998      	cbnz	r0, 800435a <dir_alloc+0x38>
		n = 0;
 8004332:	4605      	mov	r5, r0
			res = move_window(fs, dp->sect);
 8004334:	4638      	mov	r0, r7
 8004336:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004338:	f7ff f96d 	bl	8003616 <move_window>
			if (res != FR_OK) break;
 800433c:	b968      	cbnz	r0, 800435a <dir_alloc+0x38>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 800433e:	783a      	ldrb	r2, [r7, #0]
 8004340:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004342:	2a04      	cmp	r2, #4
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	d10c      	bne.n	8004362 <dir_alloc+0x40>
 8004348:	061b      	lsls	r3, r3, #24
 800434a:	d50e      	bpl.n	800436a <dir_alloc+0x48>
				n = 0;				/* Not a free entry, restart to search */
 800434c:	4605      	mov	r5, r0
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 800434e:	2101      	movs	r1, #1
 8004350:	4620      	mov	r0, r4
 8004352:	f7ff ff88 	bl	8004266 <dir_next>
		} while (res == FR_OK);
 8004356:	2800      	cmp	r0, #0
 8004358:	d0ec      	beq.n	8004334 <dir_alloc+0x12>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800435a:	2804      	cmp	r0, #4
 800435c:	bf08      	it	eq
 800435e:	2007      	moveq	r0, #7
 8004360:	e006      	b.n	8004370 <dir_alloc+0x4e>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 8004362:	2be5      	cmp	r3, #229	@ 0xe5
 8004364:	d001      	beq.n	800436a <dir_alloc+0x48>
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <dir_alloc+0x2a>
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 800436a:	3501      	adds	r5, #1
 800436c:	42b5      	cmp	r5, r6
 800436e:	d1ee      	bne.n	800434e <dir_alloc+0x2c>
}
 8004370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004372 <dir_remove>:
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8004372:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
{
 8004374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8004376:	1c4b      	adds	r3, r1, #1
{
 8004378:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800437a:	6805      	ldr	r5, [r0, #0]
	DWORD last = dp->dptr;
 800437c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800437e:	d11c      	bne.n	80043ba <dir_remove+0x48>
			fs->wflag = 1;
 8004380:	2701      	movs	r7, #1
			res = move_window(fs, dp->sect);
 8004382:	4628      	mov	r0, r5
 8004384:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004386:	f7ff f946 	bl	8003616 <move_window>
			if (res != FR_OK) break;
 800438a:	b990      	cbnz	r0, 80043b2 <dir_remove+0x40>
			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800438c:	782b      	ldrb	r3, [r5, #0]
				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
 800438e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8004390:	2b04      	cmp	r3, #4
				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
 8004392:	bf12      	itee	ne
 8004394:	23e5      	movne	r3, #229	@ 0xe5
 8004396:	7813      	ldrbeq	r3, [r2, #0]
 8004398:	f003 037f 	andeq.w	r3, r3, #127	@ 0x7f
 800439c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800439e:	712f      	strb	r7, [r5, #4]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80043a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80043a2:	42b3      	cmp	r3, r6
 80043a4:	d20d      	bcs.n	80043c2 <dir_remove+0x50>
			res = dir_next(dp, 0);	/* Next entry */
 80043a6:	2100      	movs	r1, #0
 80043a8:	4620      	mov	r0, r4
 80043aa:	f7ff ff5c 	bl	8004266 <dir_next>
		} while (res == FR_OK);
 80043ae:	2800      	cmp	r0, #0
 80043b0:	d0e7      	beq.n	8004382 <dir_remove+0x10>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 80043b2:	2804      	cmp	r0, #4
 80043b4:	bf08      	it	eq
 80043b6:	2002      	moveq	r0, #2
 80043b8:	e003      	b.n	80043c2 <dir_remove+0x50>
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80043ba:	f7ff fa79 	bl	80038b0 <dir_sdi>
	if (res == FR_OK) {
 80043be:	2800      	cmp	r0, #0
 80043c0:	d0de      	beq.n	8004380 <dir_remove+0xe>
}
 80043c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080043c4 <load_xdir>:
{
 80043c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c6:	4604      	mov	r4, r0
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 80043c8:	6800      	ldr	r0, [r0, #0]
	res = move_window(dp->obj.fs, dp->sect);
 80043ca:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 80043cc:	6905      	ldr	r5, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
 80043ce:	f7ff f922 	bl	8003616 <move_window>
	if (res != FR_OK) return res;
 80043d2:	b920      	cbnz	r0, 80043de <load_xdir+0x1a>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order? */
 80043d4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80043d6:	781a      	ldrb	r2, [r3, #0]
 80043d8:	2a85      	cmp	r2, #133	@ 0x85
 80043da:	d001      	beq.n	80043e0 <load_xdir+0x1c>
 80043dc:	2002      	movs	r0, #2
}
 80043de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 80043e0:	462a      	mov	r2, r5
 80043e2:	f103 0120 	add.w	r1, r3, #32
 80043e6:	f853 0b04 	ldr.w	r0, [r3], #4
 80043ea:	428b      	cmp	r3, r1
 80043ec:	f842 0b04 	str.w	r0, [r2], #4
 80043f0:	d1f9      	bne.n	80043e6 <load_xdir+0x22>
	sz_ent = ((UINT)dirb[XDIR_NumSec] + 1) * SZDIRE;	/* Size of this entry block */
 80043f2:	786e      	ldrb	r6, [r5, #1]
 80043f4:	3601      	adds	r6, #1
 80043f6:	0176      	lsls	r6, r6, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;	/* Invalid block size? */
 80043f8:	f1a6 0360 	sub.w	r3, r6, #96	@ 0x60
 80043fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004400:	d8ec      	bhi.n	80043dc <load_xdir+0x18>
	res = dir_next(dp, 0);
 8004402:	2100      	movs	r1, #0
 8004404:	4620      	mov	r0, r4
 8004406:	f7ff ff2e 	bl	8004266 <dir_next>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800440a:	2804      	cmp	r0, #4
 800440c:	d0e6      	beq.n	80043dc <load_xdir+0x18>
	if (res != FR_OK) return res;
 800440e:	2800      	cmp	r0, #0
 8004410:	d1e5      	bne.n	80043de <load_xdir+0x1a>
	res = move_window(dp->obj.fs, dp->sect);
 8004412:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004414:	6820      	ldr	r0, [r4, #0]
 8004416:	f7ff f8fe 	bl	8003616 <move_window>
	if (res != FR_OK) return res;
 800441a:	2800      	cmp	r0, #0
 800441c:	d1df      	bne.n	80043de <load_xdir+0x1a>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order? */
 800441e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004420:	781a      	ldrb	r2, [r3, #0]
 8004422:	2ac0      	cmp	r2, #192	@ 0xc0
 8004424:	d1da      	bne.n	80043dc <load_xdir+0x18>
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 8004426:	f105 0220 	add.w	r2, r5, #32
 800442a:	f103 0120 	add.w	r1, r3, #32
 800442e:	f853 0b04 	ldr.w	r0, [r3], #4
 8004432:	428b      	cmp	r3, r1
 8004434:	f842 0b04 	str.w	r0, [r2], #4
 8004438:	d1f9      	bne.n	800442e <load_xdir+0x6a>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;	/* Invalid block size for the name? */
 800443a:	220f      	movs	r2, #15
 800443c:	f895 3023 	ldrb.w	r3, [r5, #35]	@ 0x23
 8004440:	332c      	adds	r3, #44	@ 0x2c
 8004442:	fbb3 f3f2 	udiv	r3, r3, r2
 8004446:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 800444a:	d3c7      	bcc.n	80043dc <load_xdir+0x18>
	i = 2 * SZDIRE;	/* Name offset to load */
 800444c:	2740      	movs	r7, #64	@ 0x40
		res = dir_next(dp, 0);
 800444e:	2100      	movs	r1, #0
 8004450:	4620      	mov	r0, r4
 8004452:	f7ff ff08 	bl	8004266 <dir_next>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8004456:	2804      	cmp	r0, #4
 8004458:	d0c0      	beq.n	80043dc <load_xdir+0x18>
		if (res != FR_OK) return res;
 800445a:	2800      	cmp	r0, #0
 800445c:	d1bf      	bne.n	80043de <load_xdir+0x1a>
		res = move_window(dp->obj.fs, dp->sect);
 800445e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004460:	6820      	ldr	r0, [r4, #0]
 8004462:	f7ff f8d8 	bl	8003616 <move_window>
		if (res != FR_OK) return res;
 8004466:	2800      	cmp	r0, #0
 8004468:	d1b9      	bne.n	80043de <load_xdir+0x1a>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order? */
 800446a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800446c:	781a      	ldrb	r2, [r3, #0]
 800446e:	2ac1      	cmp	r2, #193	@ 0xc1
 8004470:	d1b4      	bne.n	80043dc <load_xdir+0x18>
		if (i < MAXDIRB(FF_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);	/* Load name entries only if the object is accessible */
 8004472:	2f7f      	cmp	r7, #127	@ 0x7f
 8004474:	d808      	bhi.n	8004488 <load_xdir+0xc4>
 8004476:	19ea      	adds	r2, r5, r7
 8004478:	f103 0120 	add.w	r1, r3, #32
 800447c:	f853 cb04 	ldr.w	ip, [r3], #4
 8004480:	428b      	cmp	r3, r1
 8004482:	f842 cb04 	str.w	ip, [r2], #4
 8004486:	d1f9      	bne.n	800447c <load_xdir+0xb8>
	} while ((i += SZDIRE) < sz_ent);
 8004488:	3720      	adds	r7, #32
 800448a:	42be      	cmp	r6, r7
 800448c:	d8df      	bhi.n	800444e <load_xdir+0x8a>
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 800448e:	2f80      	cmp	r7, #128	@ 0x80
 8004490:	d8a5      	bhi.n	80043de <load_xdir+0x1a>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8004492:	4628      	mov	r0, r5
 8004494:	f7fe ff3e 	bl	8003314 <xdir_sum>
 8004498:	886b      	ldrh	r3, [r5, #2]
 800449a:	1a18      	subs	r0, r3, r0
 800449c:	bf18      	it	ne
 800449e:	2001      	movne	r0, #1
 80044a0:	0040      	lsls	r0, r0, #1
 80044a2:	e79c      	b.n	80043de <load_xdir+0x1a>

080044a4 <store_xdir>:
{
 80044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the entry set 85+C0+C1s */
 80044a6:	6803      	ldr	r3, [r0, #0]
{
 80044a8:	4605      	mov	r5, r0
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the entry set 85+C0+C1s */
 80044aa:	691c      	ldr	r4, [r3, #16]
		dp->obj.fs->wflag = 1;
 80044ac:	2701      	movs	r7, #1
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));	/* Create check sum */
 80044ae:	4620      	mov	r0, r4
 80044b0:	f7fe ff30 	bl	8003314 <xdir_sum>
	*ptr++ = (BYTE)val; val >>= 8;
 80044b4:	70a0      	strb	r0, [r4, #2]
 80044b6:	0a00      	lsrs	r0, r0, #8
	*ptr++ = (BYTE)val;
 80044b8:	70e0      	strb	r0, [r4, #3]
	res = dir_sdi(dp, dp->blk_ofs);	/* Top of the entry set */
 80044ba:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80044bc:	4628      	mov	r0, r5
	nent = dirb[XDIR_NumSec] + 1;	/* Number of entries */
 80044be:	7866      	ldrb	r6, [r4, #1]
	res = dir_sdi(dp, dp->blk_ofs);	/* Top of the entry set */
 80044c0:	f7ff f9f6 	bl	80038b0 <dir_sdi>
	while (res == FR_OK) {
 80044c4:	b120      	cbz	r0, 80044d0 <store_xdir+0x2c>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 80044c6:	2802      	cmp	r0, #2
 80044c8:	bf28      	it	cs
 80044ca:	2002      	movcs	r0, #2
}
 80044cc:	b2c0      	uxtb	r0, r0
 80044ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		res = move_window(dp->obj.fs, dp->sect);
 80044d0:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 80044d2:	6828      	ldr	r0, [r5, #0]
 80044d4:	f7ff f89f 	bl	8003616 <move_window>
		if (res != FR_OK) break;
 80044d8:	2800      	cmp	r0, #0
 80044da:	d1f4      	bne.n	80044c6 <store_xdir+0x22>
		memcpy(dp->dir, dirb, SZDIRE);
 80044dc:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80044de:	f104 0220 	add.w	r2, r4, #32
 80044e2:	f854 1b04 	ldr.w	r1, [r4], #4
 80044e6:	4294      	cmp	r4, r2
 80044e8:	f843 1b04 	str.w	r1, [r3], #4
 80044ec:	d1f9      	bne.n	80044e2 <store_xdir+0x3e>
		dp->obj.fs->wflag = 1;
 80044ee:	682b      	ldr	r3, [r5, #0]
 80044f0:	711f      	strb	r7, [r3, #4]
		if (--nent == 0) break;	/* All done? */
 80044f2:	2e00      	cmp	r6, #0
 80044f4:	d0e7      	beq.n	80044c6 <store_xdir+0x22>
		res = dir_next(dp, 0);	/* Next entry */
 80044f6:	2100      	movs	r1, #0
 80044f8:	4628      	mov	r0, r5
 80044fa:	f7ff feb4 	bl	8004266 <dir_next>
 80044fe:	3e01      	subs	r6, #1
 8004500:	e7e0      	b.n	80044c4 <store_xdir+0x20>
	...

08004504 <dir_read.constprop.0>:
static FRESULT dir_read (
 8004504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BYTE ord = 0xFF, sum = 0xFF;
 8004508:	27ff      	movs	r7, #255	@ 0xff
static FRESULT dir_read (
 800450a:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800450c:	6806      	ldr	r6, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 800450e:	463d      	mov	r5, r7
	FRESULT res = FR_NO_FILE;
 8004510:	2004      	movs	r0, #4
	while (dp->sect) {
 8004512:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004514:	b911      	cbnz	r1, 800451c <dir_read.constprop.0+0x18>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8004516:	b1d8      	cbz	r0, 8004550 <dir_read.constprop.0+0x4c>
 8004518:	2004      	movs	r0, #4
 800451a:	e062      	b.n	80045e2 <dir_read.constprop.0+0xde>
		res = move_window(fs, dp->sect);
 800451c:	4630      	mov	r0, r6
 800451e:	f7ff f87a 	bl	8003616 <move_window>
		if (res != FR_OK) break;
 8004522:	2800      	cmp	r0, #0
 8004524:	d15d      	bne.n	80045e2 <dir_read.constprop.0+0xde>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 8004526:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004528:	7803      	ldrb	r3, [r0, #0]
		if (b == 0) {
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0f4      	beq.n	8004518 <dir_read.constprop.0+0x14>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800452e:	7832      	ldrb	r2, [r6, #0]
 8004530:	2a04      	cmp	r2, #4
 8004532:	d110      	bne.n	8004556 <dir_read.constprop.0+0x52>
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 8004534:	2b85      	cmp	r3, #133	@ 0x85
 8004536:	d14e      	bne.n	80045d6 <dir_read.constprop.0+0xd2>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8004538:	6b23      	ldr	r3, [r4, #48]	@ 0x30
					res = load_xdir(dp);	/* Load the entry block */
 800453a:	4620      	mov	r0, r4
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800453c:	64e3      	str	r3, [r4, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800453e:	f7ff ff41 	bl	80043c4 <load_xdir>
					if (res == FR_OK) {
 8004542:	2800      	cmp	r0, #0
 8004544:	d14d      	bne.n	80045e2 <dir_read.constprop.0+0xde>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8004546:	6933      	ldr	r3, [r6, #16]
 8004548:	791b      	ldrb	r3, [r3, #4]
 800454a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800454e:	71a3      	strb	r3, [r4, #6]
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8004550:	2000      	movs	r0, #0
}
 8004552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8004556:	7ac2      	ldrb	r2, [r0, #11]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8004558:	2be5      	cmp	r3, #229	@ 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800455a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800455e:	71a2      	strb	r2, [r4, #6]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8004560:	d044      	beq.n	80045ec <dir_read.constprop.0+0xe8>
 8004562:	2b2e      	cmp	r3, #46	@ 0x2e
 8004564:	d042      	beq.n	80045ec <dir_read.constprop.0+0xe8>
 8004566:	f022 0120 	bic.w	r1, r2, #32
 800456a:	2908      	cmp	r1, #8
 800456c:	d03e      	beq.n	80045ec <dir_read.constprop.0+0xe8>
				if (attr == AM_LFN) {	/* An LFN entry is found */
 800456e:	2a0f      	cmp	r2, #15
 8004570:	d141      	bne.n	80045f6 <dir_read.constprop.0+0xf2>
					if (b & LLEF) {		/* Is it start of an LFN sequence? */
 8004572:	0659      	lsls	r1, r3, #25
 8004574:	d538      	bpl.n	80045e8 <dir_read.constprop.0+0xe4>
						b &= (BYTE)~LLEF; ord = b;
 8004576:	f003 05bf 	and.w	r5, r3, #191	@ 0xbf
						dp->blk_ofs = dp->dptr;
 800457a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
						sum = dp->dir[LDIR_Chksum];
 800457c:	7b47      	ldrb	r7, [r0, #13]
						dp->blk_ofs = dp->dptr;
 800457e:	64e3      	str	r3, [r4, #76]	@ 0x4c
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004580:	7b43      	ldrb	r3, [r0, #13]
 8004582:	42bb      	cmp	r3, r7
 8004584:	d132      	bne.n	80045ec <dir_read.constprop.0+0xe8>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check if LDIR_FstClusLO is 0 */
 8004586:	8b42      	ldrh	r2, [r0, #26]
 8004588:	bb82      	cbnz	r2, 80045ec <dir_read.constprop.0+0xe8>
	ni = (UINT)((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the name buffer */
 800458a:	210d      	movs	r1, #13
 800458c:	7803      	ldrb	r3, [r0, #0]
			if (chr != 0xFFFF) return 0;		/* Check filler */
 800458e:	f64f 79ff 	movw	r9, #65535	@ 0xffff
	ni = (UINT)((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the name buffer */
 8004592:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004596:	3b01      	subs	r3, #1
 8004598:	434b      	muls	r3, r1
	for (pchr = 1, di = 0; di < 13; di++) {		/* Process all characters in the entry */
 800459a:	2101      	movs	r1, #1
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800459c:	f8d6 e00c 	ldr.w	lr, [r6, #12]
	for (pchr = 1, di = 0; di < 13; di++) {		/* Process all characters in the entry */
 80045a0:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 8004608 <dir_read.constprop.0+0x104>
		chr = ld_word(dir + LfnOfs[di]);		/* Pick a character from the entry */
 80045a4:	f818 cb01 	ldrb.w	ip, [r8], #1
	rv = ptr[1];
 80045a8:	f830 c00c 	ldrh.w	ip, [r0, ip]
		if (pchr != 0) {
 80045ac:	b301      	cbz	r1, 80045f0 <dir_read.constprop.0+0xec>
			if (ni >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 80045ae:	2b12      	cmp	r3, #18
 80045b0:	d81c      	bhi.n	80045ec <dir_read.constprop.0+0xe8>
	rv = rv << 8 | ptr[0];
 80045b2:	4661      	mov	r1, ip
			lfnbuf[ni++] = pchr = chr;			/* Store it */
 80045b4:	f82e c013 	strh.w	ip, [lr, r3, lsl #1]
 80045b8:	3301      	adds	r3, #1
	for (pchr = 1, di = 0; di < 13; di++) {		/* Process all characters in the entry */
 80045ba:	3201      	adds	r2, #1
 80045bc:	2a0d      	cmp	r2, #13
 80045be:	d1f1      	bne.n	80045a4 <dir_read.constprop.0+0xa0>
	if (dir[LDIR_Ord] & LLEF && pchr != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 80045c0:	7802      	ldrb	r2, [r0, #0]
 80045c2:	0652      	lsls	r2, r2, #25
 80045c4:	d505      	bpl.n	80045d2 <dir_read.constprop.0+0xce>
 80045c6:	b121      	cbz	r1, 80045d2 <dir_read.constprop.0+0xce>
		if (ni >= FF_MAX_LFN + 1) return 0;		/* Buffer overflow? */
 80045c8:	2b12      	cmp	r3, #18
 80045ca:	d80f      	bhi.n	80045ec <dir_read.constprop.0+0xe8>
		lfnbuf[ni] = 0;
 80045cc:	2200      	movs	r2, #0
 80045ce:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80045d2:	3d01      	subs	r5, #1
 80045d4:	b2ed      	uxtb	r5, r5
		res = dir_next(dp, 0);		/* Next entry */
 80045d6:	2100      	movs	r1, #0
 80045d8:	4620      	mov	r0, r4
 80045da:	f7ff fe44 	bl	8004266 <dir_next>
		if (res != FR_OK) break;
 80045de:	2800      	cmp	r0, #0
 80045e0:	d097      	beq.n	8004512 <dir_read.constprop.0+0xe>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80045e2:	2300      	movs	r3, #0
 80045e4:	63a3      	str	r3, [r4, #56]	@ 0x38
	return res;
 80045e6:	e7b4      	b.n	8004552 <dir_read.constprop.0+0x4e>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80045e8:	42ab      	cmp	r3, r5
 80045ea:	d0c9      	beq.n	8004580 <dir_read.constprop.0+0x7c>
				ord = 0xFF;
 80045ec:	25ff      	movs	r5, #255	@ 0xff
 80045ee:	e7f2      	b.n	80045d6 <dir_read.constprop.0+0xd2>
			if (chr != 0xFFFF) return 0;		/* Check filler */
 80045f0:	45cc      	cmp	ip, r9
 80045f2:	d0e2      	beq.n	80045ba <dir_read.constprop.0+0xb6>
 80045f4:	e7fa      	b.n	80045ec <dir_read.constprop.0+0xe8>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80045f6:	b91d      	cbnz	r5, 8004600 <dir_read.constprop.0+0xfc>
 80045f8:	f7fe fe7d 	bl	80032f6 <sum_sfn>
 80045fc:	42b8      	cmp	r0, r7
 80045fe:	d0a7      	beq.n	8004550 <dir_read.constprop.0+0x4c>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 8004600:	f04f 33ff 	mov.w	r3, #4294967295
 8004604:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8004606:	e7a3      	b.n	8004550 <dir_read.constprop.0+0x4c>
 8004608:	0800f4f4 	.word	0x0800f4f4

0800460c <dir_find>:
{
 800460c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004610:	2100      	movs	r1, #0
{
 8004612:	b087      	sub	sp, #28
 8004614:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8004616:	f8d0 9000 	ldr.w	r9, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800461a:	f7ff f949 	bl	80038b0 <dir_sdi>
	if (res != FR_OK) return res;
 800461e:	4680      	mov	r8, r0
 8004620:	bb10      	cbnz	r0, 8004668 <dir_find+0x5c>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8004622:	f899 3000 	ldrb.w	r3, [r9]
 8004626:	2b04      	cmp	r3, #4
 8004628:	d13f      	bne.n	80046aa <dir_find+0x9e>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800462a:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800462e:	f7fe ffce 	bl	80035ce <xname_sum>
 8004632:	4607      	mov	r7, r0
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 8004634:	4620      	mov	r0, r4
 8004636:	f7ff ff65 	bl	8004504 <dir_read.constprop.0>
 800463a:	4605      	mov	r5, r0
 800463c:	b108      	cbz	r0, 8004642 <dir_find+0x36>
 800463e:	4680      	mov	r8, r0
 8004640:	e012      	b.n	8004668 <dir_find+0x5c>
			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;		/* Skip comparison if inaccessible object name */
 8004642:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004646:	f893 6023 	ldrb.w	r6, [r3, #35]	@ 0x23
 800464a:	2e12      	cmp	r6, #18
 800464c:	d8f2      	bhi.n	8004634 <dir_find+0x28>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800464e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004650:	42bb      	cmp	r3, r7
 8004652:	d1ef      	bne.n	8004634 <dir_find+0x28>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8004654:	f04f 0a40 	mov.w	sl, #64	@ 0x40
 8004658:	42b5      	cmp	r5, r6
 800465a:	d109      	bne.n	8004670 <dir_find+0x64>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800465c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004660:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e5      	bne.n	8004634 <dir_find+0x28>
}
 8004668:	4640      	mov	r0, r8
 800466a:	b007      	add	sp, #28
 800466c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if ((di % SZDIRE) == 0) di += 2;
 8004670:	f01a 0f1f 	tst.w	sl, #31
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8004674:	f8d9 3010 	ldr.w	r3, [r9, #16]
				if ((di % SZDIRE) == 0) di += 2;
 8004678:	bf08      	it	eq
 800467a:	f10a 0a02 	addeq.w	sl, sl, #2
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800467e:	f833 000a 	ldrh.w	r0, [r3, sl]
 8004682:	f001 ffa3 	bl	80065cc <ff_wtoupper>
 8004686:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800468a:	4683      	mov	fp, r0
 800468c:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8004690:	f001 ff9c 	bl	80065cc <ff_wtoupper>
 8004694:	4583      	cmp	fp, r0
 8004696:	d103      	bne.n	80046a0 <dir_find+0x94>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8004698:	f10a 0a02 	add.w	sl, sl, #2
 800469c:	3501      	adds	r5, #1
 800469e:	e7db      	b.n	8004658 <dir_find+0x4c>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80046a0:	1b76      	subs	r6, r6, r5
 80046a2:	b2f6      	uxtb	r6, r6
 80046a4:	2e00      	cmp	r6, #0
 80046a6:	d1c5      	bne.n	8004634 <dir_find+0x28>
 80046a8:	e7d8      	b.n	800465c <dir_find+0x50>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80046aa:	f04f 0aff 	mov.w	sl, #255	@ 0xff
 80046ae:	f04f 33ff 	mov.w	r3, #4294967295
 80046b2:	4655      	mov	r5, sl
 80046b4:	64e3      	str	r3, [r4, #76]	@ 0x4c
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80046b6:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80046ba:	9302      	str	r3, [sp, #8]
		res = move_window(fs, dp->sect);
 80046bc:	4648      	mov	r0, r9
 80046be:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80046c0:	f7fe ffa9 	bl	8003616 <move_window>
		if (res != FR_OK) break;
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d15a      	bne.n	800477e <dir_find+0x172>
		c = dp->dir[DIR_Name];
 80046c8:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 80046ca:	7837      	ldrb	r7, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached end of directory table */
 80046cc:	2f00      	cmp	r7, #0
 80046ce:	d077      	beq.n	80047c0 <dir_find+0x1b4>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80046d0:	7af2      	ldrb	r2, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80046d2:	2fe5      	cmp	r7, #229	@ 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80046d4:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
 80046d8:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80046da:	d003      	beq.n	80046e4 <dir_find+0xd8>
 80046dc:	0712      	lsls	r2, r2, #28
 80046de:	d505      	bpl.n	80046ec <dir_find+0xe0>
 80046e0:	2b0f      	cmp	r3, #15
 80046e2:	d005      	beq.n	80046f0 <dir_find+0xe4>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Not matched, reset LFN sequence */
 80046e4:	f04f 33ff 	mov.w	r3, #4294967295
 80046e8:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80046ea:	e04f      	b.n	800478c <dir_find+0x180>
			if (a == AM_LFN) {			/* Is it an LFN entry? */
 80046ec:	2b0f      	cmp	r3, #15
 80046ee:	d154      	bne.n	800479a <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80046f0:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 80046f4:	065b      	lsls	r3, r3, #25
 80046f6:	d43c      	bmi.n	8004772 <dir_find+0x166>
					if (c & LLEF) {		/* Is it start of an entry set? */
 80046f8:	0678      	lsls	r0, r7, #25
 80046fa:	d542      	bpl.n	8004782 <dir_find+0x176>
						dp->blk_ofs = dp->dptr;		/* Start offset of LFN */
 80046fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
						c &= (BYTE)~LLEF;
 80046fe:	f007 07bf 	and.w	r7, r7, #191	@ 0xbf
						dp->blk_ofs = dp->dptr;		/* Start offset of LFN */
 8004702:	64e3      	str	r3, [r4, #76]	@ 0x4c
						sum = dp->dir[LDIR_Chksum];	/* Sum of the SFN */
 8004704:	f896 a00d 	ldrb.w	sl, [r6, #13]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check if LDIR_FstClusLO is 0 */
 8004708:	8b73      	ldrh	r3, [r6, #26]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d13e      	bne.n	800478c <dir_find+0x180>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800470e:	f8d9 300c 	ldr.w	r3, [r9, #12]
	for (pchr = 1, di = 0; di < 13; di++) {	/* Process all characters in the entry */
 8004712:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004714:	9301      	str	r3, [sp, #4]
	ni = (UINT)((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the name to be compared */
 8004716:	230d      	movs	r3, #13
 8004718:	7835      	ldrb	r5, [r6, #0]
 800471a:	f8df b0ac 	ldr.w	fp, [pc, #172]	@ 80047c8 <dir_find+0x1bc>
 800471e:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 8004722:	3d01      	subs	r5, #1
 8004724:	435d      	muls	r5, r3
		chr = ld_word(dir + LfnOfs[di]);	/* Pick a character from the entry */
 8004726:	f81b 3b01 	ldrb.w	r3, [fp], #1
	rv = ptr[1];
 800472a:	5af3      	ldrh	r3, [r6, r3]
		if (pchr != 0) {
 800472c:	b382      	cbz	r2, 8004790 <dir_find+0x184>
			if (ni >= FF_MAX_LFN + 1 || ff_wtoupper(chr) != ff_wtoupper(lfnbuf[ni++])) {	/* Compare it with name */
 800472e:	2d12      	cmp	r5, #18
 8004730:	d82c      	bhi.n	800478c <dir_find+0x180>
 8004732:	4618      	mov	r0, r3
 8004734:	9305      	str	r3, [sp, #20]
 8004736:	f001 ff49 	bl	80065cc <ff_wtoupper>
 800473a:	9b01      	ldr	r3, [sp, #4]
 800473c:	9004      	str	r0, [sp, #16]
 800473e:	1c69      	adds	r1, r5, #1
 8004740:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8004744:	9103      	str	r1, [sp, #12]
 8004746:	f001 ff41 	bl	80065cc <ff_wtoupper>
 800474a:	9a04      	ldr	r2, [sp, #16]
 800474c:	4282      	cmp	r2, r0
 800474e:	d11d      	bne.n	800478c <dir_find+0x180>
	rv = rv << 8 | ptr[0];
 8004750:	9b05      	ldr	r3, [sp, #20]
			if (ni >= FF_MAX_LFN + 1 || ff_wtoupper(chr) != ff_wtoupper(lfnbuf[ni++])) {	/* Compare it with name */
 8004752:	9903      	ldr	r1, [sp, #12]
	rv = rv << 8 | ptr[0];
 8004754:	461a      	mov	r2, r3
			if (ni >= FF_MAX_LFN + 1 || ff_wtoupper(chr) != ff_wtoupper(lfnbuf[ni++])) {	/* Compare it with name */
 8004756:	460d      	mov	r5, r1
	for (pchr = 1, di = 0; di < 13; di++) {	/* Process all characters in the entry */
 8004758:	4b1c      	ldr	r3, [pc, #112]	@ (80047cc <dir_find+0x1c0>)
 800475a:	459b      	cmp	fp, r3
 800475c:	d1e3      	bne.n	8004726 <dir_find+0x11a>
	if ((dir[LDIR_Ord] & LLEF) && pchr && lfnbuf[ni]) return 0;	/* Last name segment matched but different length */
 800475e:	7833      	ldrb	r3, [r6, #0]
 8004760:	0659      	lsls	r1, r3, #25
 8004762:	d504      	bpl.n	800476e <dir_find+0x162>
 8004764:	b11a      	cbz	r2, 800476e <dir_find+0x162>
 8004766:	9b01      	ldr	r3, [sp, #4]
 8004768:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800476c:	b973      	cbnz	r3, 800478c <dir_find+0x180>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800476e:	3f01      	subs	r7, #1
 8004770:	b2fd      	uxtb	r5, r7
		res = dir_next(dp, 0);	/* Next entry */
 8004772:	2100      	movs	r1, #0
 8004774:	4620      	mov	r0, r4
 8004776:	f7ff fd76 	bl	8004266 <dir_next>
	} while (res == FR_OK);
 800477a:	2800      	cmp	r0, #0
 800477c:	d09e      	beq.n	80046bc <dir_find+0xb0>
		res = move_window(fs, dp->sect);
 800477e:	4680      	mov	r8, r0
 8004780:	e772      	b.n	8004668 <dir_find+0x5c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004782:	42bd      	cmp	r5, r7
 8004784:	d102      	bne.n	800478c <dir_find+0x180>
 8004786:	7b73      	ldrb	r3, [r6, #13]
 8004788:	4553      	cmp	r3, sl
 800478a:	d0bd      	beq.n	8004708 <dir_find+0xfc>
 800478c:	25ff      	movs	r5, #255	@ 0xff
 800478e:	e7f0      	b.n	8004772 <dir_find+0x166>
			if (chr != 0xFFFF) return 0;	/* Check filler */
 8004790:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004794:	428b      	cmp	r3, r1
 8004796:	d0df      	beq.n	8004758 <dir_find+0x14c>
 8004798:	e7f8      	b.n	800478c <dir_find+0x180>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800479a:	b92d      	cbnz	r5, 80047a8 <dir_find+0x19c>
 800479c:	4630      	mov	r0, r6
 800479e:	f7fe fdaa 	bl	80032f6 <sum_sfn>
 80047a2:	4550      	cmp	r0, sl
 80047a4:	f43f af60 	beq.w	8004668 <dir_find+0x5c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80047a8:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 80047ac:	07db      	lsls	r3, r3, #31
 80047ae:	d499      	bmi.n	80046e4 <dir_find+0xd8>
 80047b0:	220b      	movs	r2, #11
 80047b2:	4630      	mov	r0, r6
 80047b4:	9902      	ldr	r1, [sp, #8]
 80047b6:	f007 ff41 	bl	800c63c <memcmp>
 80047ba:	2800      	cmp	r0, #0
 80047bc:	d192      	bne.n	80046e4 <dir_find+0xd8>
 80047be:	e753      	b.n	8004668 <dir_find+0x5c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached end of directory table */
 80047c0:	f04f 0804 	mov.w	r8, #4
 80047c4:	e750      	b.n	8004668 <dir_find+0x5c>
 80047c6:	bf00      	nop
 80047c8:	0800f4f4 	.word	0x0800f4f4
 80047cc:	0800f501 	.word	0x0800f501

080047d0 <dir_register>:
{
 80047d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80047d4:	f890 b04b 	ldrb.w	fp, [r0, #75]	@ 0x4b
{
 80047d8:	4604      	mov	r4, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80047da:	f01b 05a0 	ands.w	r5, fp, #160	@ 0xa0
{
 80047de:	b09b      	sub	sp, #108	@ 0x6c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80047e0:	f040 81b8 	bne.w	8004b54 <dir_register+0x384>
	FATFS *fs = dp->obj.fs;
 80047e4:	6806      	ldr	r6, [r0, #0]
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 80047e6:	68f2      	ldr	r2, [r6, #12]
 80047e8:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d160      	bne.n	80048b2 <dir_register+0xe2>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80047f0:	7833      	ldrb	r3, [r6, #0]
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	f040 809c 	bne.w	8004930 <dir_register+0x160>
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 80047f8:	230f      	movs	r3, #15
 80047fa:	350e      	adds	r5, #14
 80047fc:	fbb5 f5f3 	udiv	r5, r5, r3
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
 8004800:	4620      	mov	r0, r4
 8004802:	1ca9      	adds	r1, r5, #2
 8004804:	f7ff fd8d 	bl	8004322 <dir_alloc>
		if (res != FR_OK) return res;
 8004808:	4681      	mov	r9, r0
 800480a:	2800      	cmp	r0, #0
 800480c:	f040 808a 	bne.w	8004924 <dir_register+0x154>
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
 8004810:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004812:	3501      	adds	r5, #1
 8004814:	eba3 1345 	sub.w	r3, r3, r5, lsl #5
 8004818:	64e3      	str	r3, [r4, #76]	@ 0x4c
		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 800481a:	79e3      	ldrb	r3, [r4, #7]
 800481c:	075f      	lsls	r7, r3, #29
 800481e:	d54a      	bpl.n	80048b6 <dir_register+0xe6>
			dp->obj.stat &= ~4;
 8004820:	f023 0304 	bic.w	r3, r3, #4
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 8004824:	4620      	mov	r0, r4
			dp->obj.stat &= ~4;
 8004826:	71e3      	strb	r3, [r4, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 8004828:	f7ff f920 	bl	8003a6c <fill_first_frag>
			if (res != FR_OK) return res;
 800482c:	2800      	cmp	r0, #0
 800482e:	d13e      	bne.n	80048ae <dir_register+0xde>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 8004830:	f04f 32ff 	mov.w	r2, #4294967295
 8004834:	4620      	mov	r0, r4
 8004836:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004838:	f7ff f900 	bl	8003a3c <fill_last_frag>
			if (res != FR_OK) return res;
 800483c:	2800      	cmp	r0, #0
 800483e:	d136      	bne.n	80048ae <dir_register+0xde>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 8004840:	68a3      	ldr	r3, [r4, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d037      	beq.n	80048b6 <dir_register+0xe6>
	dp->obj.fs = obj->fs;
 8004846:	6823      	ldr	r3, [r4, #0]
	dp->blk_ofs = obj->c_ofs;
 8004848:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
	dp->obj.fs = obj->fs;
 800484a:	9304      	str	r3, [sp, #16]
	dp->obj.sclust = obj->c_scl;
 800484c:	6a23      	ldr	r3, [r4, #32]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800484e:	a804      	add	r0, sp, #16
	dp->obj.sclust = obj->c_scl;
 8004850:	9306      	str	r3, [sp, #24]
	dp->obj.stat = (BYTE)obj->c_size;
 8004852:	6a63      	ldr	r3, [r4, #36]	@ 0x24
	dp->obj.n_frag = 0;
 8004854:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
	dp->obj.stat = (BYTE)obj->c_size;
 8004858:	f88d 3017 	strb.w	r3, [sp, #23]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800485c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004860:	e9cd 3908 	strd	r3, r9, [sp, #32]
	dp->blk_ofs = obj->c_ofs;
 8004864:	9117      	str	r1, [sp, #92]	@ 0x5c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8004866:	f7ff f823 	bl	80038b0 <dir_sdi>
	if (res == FR_OK) {
 800486a:	bb00      	cbnz	r0, 80048ae <dir_register+0xde>
		res = load_xdir(dp);		/* Load the object's entry block */
 800486c:	a804      	add	r0, sp, #16
 800486e:	f7ff fda9 	bl	80043c4 <load_xdir>
				if (res != FR_OK) return res;
 8004872:	b9e0      	cbnz	r0, 80048ae <dir_register+0xde>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 8004874:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8004878:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800487c:	8970      	ldrh	r0, [r6, #10]
 800487e:	fbe0 2301 	umlal	r2, r3, r0, r1
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 8004882:	6930      	ldr	r0, [r6, #16]
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 8004884:	e9c4 2304 	strd	r2, r3, [r4, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 8004888:	3038      	adds	r0, #56	@ 0x38
 800488a:	f7fe fc69 	bl	8003160 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800488e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8004892:	6930      	ldr	r0, [r6, #16]
 8004894:	3028      	adds	r0, #40	@ 0x28
 8004896:	f7fe fc63 	bl	8003160 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
 800489a:	79e3      	ldrb	r3, [r4, #7]
 800489c:	6932      	ldr	r2, [r6, #16]
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
				res = store_xdir(&dj);				/* Store the object status */
 80048a6:	a804      	add	r0, sp, #16
 80048a8:	f7ff fdfc 	bl	80044a4 <store_xdir>
				if (res != FR_OK) return res;
 80048ac:	b118      	cbz	r0, 80048b6 <dir_register+0xe6>
 80048ae:	4681      	mov	r9, r0
 80048b0:	e038      	b.n	8004924 <dir_register+0x154>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 80048b2:	3501      	adds	r5, #1
 80048b4:	e798      	b.n	80047e8 <dir_register+0x18>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 80048b6:	e9d6 5403 	ldrd	r5, r4, [r6, #12]
	memset(dirb, 0, 2 * SZDIRE);
 80048ba:	1c67      	adds	r7, r4, #1
 80048bc:	223f      	movs	r2, #63	@ 0x3f
 80048be:	2100      	movs	r1, #0
 80048c0:	4638      	mov	r0, r7
 80048c2:	f007 fecb 	bl	800c65c <memset>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 80048c6:	2385      	movs	r3, #133	@ 0x85
 80048c8:	7023      	strb	r3, [r4, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 80048ca:	23c0      	movs	r3, #192	@ 0xc0
 80048cc:	f884 3020 	strb.w	r3, [r4, #32]
	nlen = n_c1 = 0; chr = 1;
 80048d0:	2300      	movs	r3, #0
 80048d2:	2001      	movs	r0, #1
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 80048d4:	4619      	mov	r1, r3
	i = SZDIRE * 2;	/* Top of file name entries */
 80048d6:	2240      	movs	r2, #64	@ 0x40
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 80048d8:	f04f 0ec1 	mov.w	lr, #193	@ 0xc1
 80048dc:	4698      	mov	r8, r3
 80048de:	1c56      	adds	r6, r2, #1
 80048e0:	f804 e002 	strb.w	lr, [r4, r2]
 80048e4:	f804 8006 	strb.w	r8, [r4, r6]
 80048e8:	3202      	adds	r2, #2
			if (chr != 0 && (chr = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 80048ea:	b120      	cbz	r0, 80048f6 <dir_register+0x126>
 80048ec:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
 80048f0:	b108      	cbz	r0, 80048f6 <dir_register+0x126>
 80048f2:	3301      	adds	r3, #1
 80048f4:	b2db      	uxtb	r3, r3
	*ptr++ = (BYTE)val; val >>= 8;
 80048f6:	0a06      	lsrs	r6, r0, #8
 80048f8:	54a0      	strb	r0, [r4, r2]
	*ptr++ = (BYTE)val;
 80048fa:	54be      	strb	r6, [r7, r2]
			i += 2;
 80048fc:	3202      	adds	r2, #2
		} while (i % SZDIRE != 0);
 80048fe:	06d6      	lsls	r6, r2, #27
 8004900:	d1f3      	bne.n	80048ea <dir_register+0x11a>
	} while (lfn[nlen]);	/* Fill next C1 entry if any char follows */
 8004902:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
 8004906:	f101 0c01 	add.w	ip, r1, #1
 800490a:	b97e      	cbnz	r6, 800492c <dir_register+0x15c>
	dirb[XDIR_NumSec] = 1 + n_c1;	/* Set secondary count (C0 + C1s) */
 800490c:	3102      	adds	r1, #2
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800490e:	4628      	mov	r0, r5
	dirb[XDIR_NumName] = nlen;		/* Set name length */
 8004910:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
	dirb[XDIR_NumSec] = 1 + n_c1;	/* Set secondary count (C0 + C1s) */
 8004914:	7061      	strb	r1, [r4, #1]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8004916:	f7fe fe5a 	bl	80035ce <xname_sum>
	*ptr++ = (BYTE)val; val >>= 8;
 800491a:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
 800491e:	0a00      	lsrs	r0, r0, #8
	*ptr++ = (BYTE)val;
 8004920:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
}
 8004924:	4648      	mov	r0, r9
 8004926:	b01b      	add	sp, #108	@ 0x6c
 8004928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492c:	4661      	mov	r1, ip
 800492e:	e7d6      	b.n	80048de <dir_register+0x10e>
	memcpy(sn, dp->fn, 12);
 8004930:	f10d 0810 	add.w	r8, sp, #16
 8004934:	f104 0740 	add.w	r7, r4, #64	@ 0x40
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004938:	f01b 0f01 	tst.w	fp, #1
	memcpy(sn, dp->fn, 12);
 800493c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004940:	e888 0007 	stmia.w	r8, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004944:	d07b      	beq.n	8004a3e <dir_register+0x26e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8004946:	2340      	movs	r3, #64	@ 0x40
		for (n = 1; n < 100; n++) {
 8004948:	f04f 0a01 	mov.w	sl, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800494c:	f884 304b 	strb.w	r3, [r4, #75]	@ 0x4b
	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 8004950:	46bc      	mov	ip, r7
 8004952:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8004956:	68f3      	ldr	r3, [r6, #12]
	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 8004958:	e8ac 0003 	stmia.w	ip!, {r0, r1}
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800495c:	f1ba 0f05 	cmp.w	sl, #5
	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 8004960:	f82c 2b02 	strh.w	r2, [ip], #2
 8004964:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8004968:	f88c 2000 	strb.w	r2, [ip]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800496c:	d95e      	bls.n	8004a2c <dir_register+0x25c>
 800496e:	4652      	mov	r2, sl
 8004970:	1e98      	subs	r0, r3, #2
		while (*lfn) {	/* Create a CRC value as a hash of LFN */
 8004972:	f830 1f02 	ldrh.w	r1, [r0, #2]!
 8004976:	2900      	cmp	r1, #0
 8004978:	d146      	bne.n	8004a08 <dir_register+0x238>
 800497a:	46c4      	mov	ip, r8
 800497c:	2107      	movs	r1, #7
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800497e:	f002 0e0f 	and.w	lr, r2, #15
 8004982:	f10e 0030 	add.w	r0, lr, #48	@ 0x30
		if (c > '9') c += 7;
 8004986:	2839      	cmp	r0, #57	@ 0x39
 8004988:	bf88      	it	hi
 800498a:	f10e 0037 	addhi.w	r0, lr, #55	@ 0x37
	} while (i && seq);
 800498e:	3901      	subs	r1, #1
 8004990:	4691      	mov	r9, r2
		ns[i--] = c;
 8004992:	f80c 0d01 	strb.w	r0, [ip, #-1]!
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 8004996:	ea4f 1212 	mov.w	r2, r2, lsr #4
	} while (i && seq);
 800499a:	d002      	beq.n	80049a2 <dir_register+0x1d2>
 800499c:	f1b9 0f0f 	cmp.w	r9, #15
 80049a0:	d8ed      	bhi.n	800497e <dir_register+0x1ae>
	ns[i] = '~';
 80049a2:	207e      	movs	r0, #126	@ 0x7e
 80049a4:	f101 0368 	add.w	r3, r1, #104	@ 0x68
 80049a8:	eb0d 0203 	add.w	r2, sp, r3
 80049ac:	f802 0c60 	strb.w	r0, [r2, #-96]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 80049b0:	2200      	movs	r2, #0
 80049b2:	f104 003f 	add.w	r0, r4, #63	@ 0x3f
 80049b6:	428a      	cmp	r2, r1
 80049b8:	d006      	beq.n	80049c8 <dir_register+0x1f8>
 80049ba:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 80049be:	f102 0e01 	add.w	lr, r2, #1
 80049c2:	f1bc 0f20 	cmp.w	ip, #32
 80049c6:	d133      	bne.n	8004a30 <dir_register+0x260>
 80049c8:	323f      	adds	r2, #63	@ 0x3f
 80049ca:	4422      	add	r2, r4
 80049cc:	f104 0c47 	add.w	ip, r4, #71	@ 0x47
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80049d0:	2907      	cmp	r1, #7
 80049d2:	bf8f      	iteee	hi
 80049d4:	2020      	movhi	r0, #32
 80049d6:	f101 0368 	addls.w	r3, r1, #104	@ 0x68
 80049da:	eb0d 0003 	addls.w	r0, sp, r3
 80049de:	f810 0c60 	ldrbls.w	r0, [r0, #-96]
 80049e2:	bf98      	it	ls
 80049e4:	3101      	addls	r1, #1
 80049e6:	f802 0f01 	strb.w	r0, [r2, #1]!
	} while (j < 8);
 80049ea:	4594      	cmp	ip, r2
 80049ec:	d1f0      	bne.n	80049d0 <dir_register+0x200>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80049ee:	4620      	mov	r0, r4
 80049f0:	f7ff fe0c 	bl	800460c <dir_find>
			if (res != FR_OK) break;
 80049f4:	4681      	mov	r9, r0
 80049f6:	b9e8      	cbnz	r0, 8004a34 <dir_register+0x264>
		for (n = 1; n < 100; n++) {
 80049f8:	f10a 0a01 	add.w	sl, sl, #1
 80049fc:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 8004a00:	d1a6      	bne.n	8004950 <dir_register+0x180>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004a02:	f04f 0907 	mov.w	r9, #7
 8004a06:	e78d      	b.n	8004924 <dir_register+0x154>
 8004a08:	f04f 0c10 	mov.w	ip, #16
				crc_sreg = (crc_sreg << 1) + (wc & 1);
 8004a0c:	f001 0e01 	and.w	lr, r1, #1
 8004a10:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
				if (crc_sreg & 0x10000) crc_sreg ^= 0x11021;
 8004a14:	03d3      	lsls	r3, r2, #15
 8004a16:	bf44      	itt	mi
 8004a18:	f482 3288 	eormi.w	r2, r2, #69632	@ 0x11000
 8004a1c:	f082 0221 	eormi.w	r2, r2, #33	@ 0x21
			for (i = 0; i < 16; i++) {
 8004a20:	f1bc 0c01 	subs.w	ip, ip, #1
				wc >>= 1;
 8004a24:	ea4f 0151 	mov.w	r1, r1, lsr #1
			for (i = 0; i < 16; i++) {
 8004a28:	d1f0      	bne.n	8004a0c <dir_register+0x23c>
 8004a2a:	e7a2      	b.n	8004972 <dir_register+0x1a2>
 8004a2c:	4652      	mov	r2, sl
 8004a2e:	e7a4      	b.n	800497a <dir_register+0x1aa>
 8004a30:	4672      	mov	r2, lr
 8004a32:	e7c0      	b.n	80049b6 <dir_register+0x1e6>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004a34:	2804      	cmp	r0, #4
 8004a36:	f47f af75 	bne.w	8004924 <dir_register+0x154>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8004a3a:	f884 b04b 	strb.w	fp, [r4, #75]	@ 0x4b
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8004a3e:	f01b 0f02 	tst.w	fp, #2
 8004a42:	bf1d      	ittte	ne
 8004a44:	230d      	movne	r3, #13
 8004a46:	350c      	addne	r5, #12
 8004a48:	fbb5 f5f3 	udivne	r5, r5, r3
 8004a4c:	2501      	moveq	r5, #1
 8004a4e:	bf18      	it	ne
 8004a50:	3501      	addne	r5, #1
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 8004a52:	4629      	mov	r1, r5
 8004a54:	4620      	mov	r0, r4
 8004a56:	f7ff fc64 	bl	8004322 <dir_alloc>
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 8004a5a:	4681      	mov	r9, r0
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	f47f af61 	bne.w	8004924 <dir_register+0x154>
 8004a62:	3d01      	subs	r5, #1
 8004a64:	d11d      	bne.n	8004aa2 <dir_register+0x2d2>
		res = move_window(fs, dp->sect);
 8004a66:	4630      	mov	r0, r6
 8004a68:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004a6a:	f7fe fdd4 	bl	8003616 <move_window>
		if (res == FR_OK) {
 8004a6e:	4681      	mov	r9, r0
 8004a70:	2800      	cmp	r0, #0
 8004a72:	f47f af57 	bne.w	8004924 <dir_register+0x154>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004a76:	4601      	mov	r1, r0
 8004a78:	2220      	movs	r2, #32
 8004a7a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004a7c:	f007 fdee 	bl	800c65c <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004a80:	cf03      	ldmia	r7!, {r0, r1}
 8004a82:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004a84:	6018      	str	r0, [r3, #0]
 8004a86:	6059      	str	r1, [r3, #4]
 8004a88:	78ba      	ldrb	r2, [r7, #2]
 8004a8a:	8839      	ldrh	r1, [r7, #0]
 8004a8c:	729a      	strb	r2, [r3, #10]
 8004a8e:	8119      	strh	r1, [r3, #8]
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004a90:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8004a94:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004a96:	f003 0318 	and.w	r3, r3, #24
 8004a9a:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	7133      	strb	r3, [r6, #4]
 8004aa0:	e740      	b.n	8004924 <dir_register+0x154>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 8004aa2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 8004aaa:	f7fe ff01 	bl	80038b0 <dir_sdi>
		if (res == FR_OK) {
 8004aae:	4681      	mov	r9, r0
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	f47f af37 	bne.w	8004924 <dir_register+0x154>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8004ab6:	4638      	mov	r0, r7
 8004ab8:	f7fe fc1d 	bl	80032f6 <sum_sfn>
		if (chr != 0xFFFF) chr = lfn[ni++];	/* Get an effective character */
 8004abc:	f64f 78ff 	movw	r8, #65535	@ 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8004ac0:	9001      	str	r0, [sp, #4]
				res = move_window(fs, dp->sect);
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004ac6:	f7fe fda6 	bl	8003616 <move_window>
 8004aca:	4681      	mov	r9, r0
				if (res != FR_OK) break;
 8004acc:	2800      	cmp	r0, #0
 8004ace:	f47f af29 	bne.w	8004924 <dir_register+0x154>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 8004ad2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8004ad4:	9a01      	ldr	r2, [sp, #4]
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 8004ad6:	f8d6 e00c 	ldr.w	lr, [r6, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8004ada:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute */
 8004adc:	f04f 020f 	mov.w	r2, #15
	ni = (UINT)(ord - 1) * 13;		/* Offset in the name */
 8004ae0:	f04f 0c0d 	mov.w	ip, #13
 8004ae4:	b2e9      	uxtb	r1, r5
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute */
 8004ae6:	72da      	strb	r2, [r3, #11]
	ni = (UINT)(ord - 1) * 13;		/* Offset in the name */
 8004ae8:	1e4a      	subs	r2, r1, #1
 8004aea:	fb0c f202 	mul.w	r2, ip, r2
	di = chr = 0;
 8004aee:	4684      	mov	ip, r0
 8004af0:	f8df a068 	ldr.w	sl, [pc, #104]	@ 8004b5c <dir_register+0x38c>
	dir[LDIR_Type] = 0;
 8004af4:	7318      	strb	r0, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8004af6:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
 8004af8:	76d8      	strb	r0, [r3, #27]
		if (chr != 0xFFFF) chr = lfn[ni++];	/* Get an effective character */
 8004afa:	4540      	cmp	r0, r8
 8004afc:	bf18      	it	ne
 8004afe:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
		st_word(dir + LfnOfs[di], chr);	/* Set it */
 8004b02:	f81a 9b01 	ldrb.w	r9, [sl], #1
	} while (++di < 13);
 8004b06:	f10c 0c01 	add.w	ip, ip, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8004b0a:	f803 0009 	strb.w	r0, [r3, r9]
		if (chr != 0xFFFF) chr = lfn[ni++];	/* Get an effective character */
 8004b0e:	bf18      	it	ne
 8004b10:	3201      	addne	r2, #1
		st_word(dir + LfnOfs[di], chr);	/* Set it */
 8004b12:	eb03 0b09 	add.w	fp, r3, r9
	*ptr++ = (BYTE)val; val >>= 8;
 8004b16:	ea4f 2910 	mov.w	r9, r0, lsr #8
		if (chr == 0) chr = 0xFFFF;		/* Padding characters after the terminator */
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	bf08      	it	eq
 8004b1e:	4640      	moveq	r0, r8
	} while (++di < 13);
 8004b20:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
 8004b24:	f88b 9001 	strb.w	r9, [fp, #1]
	} while (++di < 13);
 8004b28:	d1e7      	bne.n	8004afa <dir_register+0x32a>
	if (chr == 0xFFFF || !lfn[ni]) ord |= LLEF;	/* Last LFN part is the start of an enrty set */
 8004b2a:	4540      	cmp	r0, r8
 8004b2c:	d002      	beq.n	8004b34 <dir_register+0x364>
 8004b2e:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8004b32:	b90a      	cbnz	r2, 8004b38 <dir_register+0x368>
 8004b34:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
	dir[LDIR_Ord] = ord;			/* Set order in the entry set */
 8004b38:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
 8004b3a:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4620      	mov	r0, r4
				fs->wflag = 1;
 8004b40:	7133      	strb	r3, [r6, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8004b42:	f7ff fb90 	bl	8004266 <dir_next>
			} while (res == FR_OK && --n_ent);
 8004b46:	4681      	mov	r9, r0
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	f47f aeeb 	bne.w	8004924 <dir_register+0x154>
 8004b4e:	3d01      	subs	r5, #1
 8004b50:	d1b7      	bne.n	8004ac2 <dir_register+0x2f2>
 8004b52:	e788      	b.n	8004a66 <dir_register+0x296>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8004b54:	f04f 0906 	mov.w	r9, #6
 8004b58:	e6e4      	b.n	8004924 <dir_register+0x154>
 8004b5a:	bf00      	nop
 8004b5c:	0800f4f4 	.word	0x0800f4f4

08004b60 <init_alloc_info.isra.0>:
static void init_alloc_info (
 8004b60:	b510      	push	{r4, lr}
 8004b62:	4604      	mov	r4, r0
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 8004b64:	3034      	adds	r0, #52	@ 0x34
 8004b66:	f7fe faed 	bl	8003144 <ld_dword>
 8004b6a:	6088      	str	r0, [r1, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 8004b6c:	f104 0038 	add.w	r0, r4, #56	@ 0x38
static void init_alloc_info (
 8004b70:	460a      	mov	r2, r1
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 8004b72:	f7fe fae9 	bl	8003148 <ld_qword>
 8004b76:	e9c2 0104 	strd	r0, r1, [r2, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 8004b7a:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	71d3      	strb	r3, [r2, #7]
	obj->n_frag = 0;										/* No last fragment info */
 8004b84:	2300      	movs	r3, #0
 8004b86:	61d3      	str	r3, [r2, #28]
}
 8004b88:	bd10      	pop	{r4, pc}

08004b8a <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 8004b8a:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8004b8c:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004b8e:	bf04      	itt	eq
 8004b90:	8a8a      	ldrheq	r2, [r1, #20]
 8004b92:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	4770      	bx	lr
	...

08004b9c <follow_path>:
{
 8004b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba0:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8004ba2:	6803      	ldr	r3, [r0, #0]
{
 8004ba4:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 8004ba6:	9301      	str	r3, [sp, #4]
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8004ba8:	468a      	mov	sl, r1
 8004baa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bae:	2b2f      	cmp	r3, #47	@ 0x2f
 8004bb0:	d0fa      	beq.n	8004ba8 <follow_path+0xc>
 8004bb2:	2b5c      	cmp	r3, #92	@ 0x5c
 8004bb4:	d0f8      	beq.n	8004ba8 <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from the root directory */
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60ab      	str	r3, [r5, #8]
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 8004bba:	61eb      	str	r3, [r5, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004bbc:	f89a 3000 	ldrb.w	r3, [sl]
 8004bc0:	2b1f      	cmp	r3, #31
 8004bc2:	f200 80d6 	bhi.w	8004d72 <follow_path+0x1d6>
		dp->fn[NSFLAG] = NS_NONAME;
 8004bc6:	2380      	movs	r3, #128	@ 0x80
		res = dir_sdi(dp, 0);
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4628      	mov	r0, r5
		dp->fn[NSFLAG] = NS_NONAME;
 8004bcc:	f885 304b 	strb.w	r3, [r5, #75]	@ 0x4b
}
 8004bd0:	b005      	add	sp, #20
 8004bd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8004bd6:	f7fe be6b 	b.w	80038b0 <dir_sdi>
		cf = NS_LAST;			/* Last segment */
 8004bda:	2404      	movs	r4, #4
 8004bdc:	e109      	b.n	8004df2 <follow_path+0x256>
		wc = lfn[di - 1];
 8004bde:	f832 3017 	ldrh.w	r3, [r2, r7, lsl #1]
		if (wc != ' ' && wc != '.') break;
 8004be2:	2b20      	cmp	r3, #32
 8004be4:	d002      	beq.n	8004bec <follow_path+0x50>
 8004be6:	2b2e      	cmp	r3, #46	@ 0x2e
 8004be8:	f040 8108 	bne.w	8004dfc <follow_path+0x260>
		di--;
 8004bec:	3f01      	subs	r7, #1
 8004bee:	e102      	b.n	8004df6 <follow_path+0x25a>
		if (i >= ni || si == di) {		/* End of field? */
 8004bf0:	4599      	cmp	r9, r3
 8004bf2:	d204      	bcs.n	8004bfe <follow_path+0x62>
 8004bf4:	42ba      	cmp	r2, r7
 8004bf6:	d14f      	bne.n	8004c98 <follow_path+0xfc>
			if (ni == 11) {				/* Name extension overflow? */
 8004bf8:	2b0b      	cmp	r3, #11
 8004bfa:	d144      	bne.n	8004c86 <follow_path+0xea>
 8004bfc:	e001      	b.n	8004c02 <follow_path+0x66>
 8004bfe:	2b0b      	cmp	r3, #11
 8004c00:	d13b      	bne.n	8004c7a <follow_path+0xde>
				break;
 8004c02:	230b      	movs	r3, #11
				cf |= NS_LOSS | NS_LFN;
 8004c04:	f044 0403 	orr.w	r4, r4, #3
 8004c08:	b2e4      	uxtb	r4, r4
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004c0a:	f895 2040 	ldrb.w	r2, [r5, #64]	@ 0x40
 8004c0e:	2ae5      	cmp	r2, #229	@ 0xe5
 8004c10:	bf04      	itt	eq
 8004c12:	2205      	moveq	r2, #5
 8004c14:	f885 2040 	strbeq.w	r2, [r5, #64]	@ 0x40
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	bf04      	itt	eq
 8004c1c:	ea4f 0888 	moveq.w	r8, r8, lsl #2
 8004c20:	fa5f f888 	uxtbeq.w	r8, r8
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 8004c24:	f008 030c 	and.w	r3, r8, #12
 8004c28:	2b0c      	cmp	r3, #12
 8004c2a:	d003      	beq.n	8004c34 <follow_path+0x98>
 8004c2c:	f008 0303 	and.w	r3, r8, #3
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d102      	bne.n	8004c3a <follow_path+0x9e>
 8004c34:	f044 0402 	orr.w	r4, r4, #2
 8004c38:	b2e4      	uxtb	r4, r4
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004c3a:	07a1      	lsls	r1, r4, #30
 8004c3c:	d40b      	bmi.n	8004c56 <follow_path+0xba>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 8004c3e:	f018 0f01 	tst.w	r8, #1
 8004c42:	bf1c      	itt	ne
 8004c44:	f044 0410 	orrne.w	r4, r4, #16
 8004c48:	b2e4      	uxtbne	r4, r4
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 8004c4a:	f018 0f04 	tst.w	r8, #4
 8004c4e:	bf1c      	itt	ne
 8004c50:	f044 0408 	orrne.w	r4, r4, #8
 8004c54:	b2e4      	uxtbne	r4, r4
			res = dir_find(dp);				/* Find an object with the segment name */
 8004c56:	4628      	mov	r0, r5
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 8004c58:	f885 404b 	strb.w	r4, [r5, #75]	@ 0x4b
			res = dir_find(dp);				/* Find an object with the segment name */
 8004c5c:	f7ff fcd6 	bl	800460c <dir_find>
			ns = dp->fn[NSFLAG];
 8004c60:	f895 304b 	ldrb.w	r3, [r5, #75]	@ 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 8004c64:	2800      	cmp	r0, #0
 8004c66:	d06c      	beq.n	8004d42 <follow_path+0x1a6>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004c68:	2804      	cmp	r0, #4
 8004c6a:	d103      	bne.n	8004c74 <follow_path+0xd8>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004c6c:	f013 0f04 	tst.w	r3, #4
 8004c70:	bf08      	it	eq
 8004c72:	2005      	moveq	r0, #5
}
 8004c74:	b005      	add	sp, #20
 8004c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 8004c7a:	42ba      	cmp	r2, r7
 8004c7c:	d003      	beq.n	8004c86 <follow_path+0xea>
 8004c7e:	f044 0403 	orr.w	r4, r4, #3
 8004c82:	b2e4      	uxtb	r4, r4
			if (si > di) break;						/* No name extension? */
 8004c84:	d8c1      	bhi.n	8004c0a <follow_path+0x6e>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 8004c86:	ea4f 0888 	mov.w	r8, r8, lsl #2
			continue;
 8004c8a:	463a      	mov	r2, r7
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 8004c8c:	230b      	movs	r3, #11
 8004c8e:	f04f 0908 	mov.w	r9, #8
 8004c92:	fa5f f888 	uxtb.w	r8, r8
			continue;
 8004c96:	e0e8      	b.n	8004e6a <follow_path+0x2ce>
		if (wc >= 0x80) {	/* Is this an extended character? */
 8004c98:	2e7f      	cmp	r6, #127	@ 0x7f
 8004c9a:	d93e      	bls.n	8004d1a <follow_path+0x17e>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 8004c9c:	f044 0102 	orr.w	r1, r4, #2
 8004ca0:	e9cd 2302 	strd	r2, r3, [sp, #8]
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 8004ca4:	4630      	mov	r0, r6
			cf |= NS_LFN;	/* LFN entry needs to be created */
 8004ca6:	b2cb      	uxtb	r3, r1
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 8004ca8:	f240 11b5 	movw	r1, #437	@ 0x1b5
			cf |= NS_LFN;	/* LFN entry needs to be created */
 8004cac:	9300      	str	r3, [sp, #0]
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 8004cae:	f001 fc5b 	bl	8006568 <ff_uni2oem>
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 8004cb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cb6:	f010 0f80 	tst.w	r0, #128	@ 0x80
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 8004cba:	4606      	mov	r6, r0
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 8004cbc:	d014      	beq.n	8004ce8 <follow_path+0x14c>
 8004cbe:	496c      	ldr	r1, [pc, #432]	@ (8004e70 <follow_path+0x2d4>)
 8004cc0:	f000 067f 	and.w	r6, r0, #127	@ 0x7f
 8004cc4:	5d8e      	ldrb	r6, [r1, r6]
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 8004cc6:	b146      	cbz	r6, 8004cda <follow_path+0x13e>
 8004cc8:	4631      	mov	r1, r6
 8004cca:	486a      	ldr	r0, [pc, #424]	@ (8004e74 <follow_path+0x2d8>)
 8004ccc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004cd0:	f007 fcdb 	bl	800c68a <strchr>
 8004cd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cd8:	b308      	cbz	r0, 8004d1e <follow_path+0x182>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004cda:	9900      	ldr	r1, [sp, #0]
 8004cdc:	265f      	movs	r6, #95	@ 0x5f
 8004cde:	f041 0103 	orr.w	r1, r1, #3
 8004ce2:	b2c9      	uxtb	r1, r1
 8004ce4:	9100      	str	r1, [sp, #0]
 8004ce6:	e010      	b.n	8004d0a <follow_path+0x16e>
		if (wc >= 0x100) {				/* Is this a DBC? */
 8004ce8:	28ff      	cmp	r0, #255	@ 0xff
 8004cea:	d9ec      	bls.n	8004cc6 <follow_path+0x12a>
			if (i >= ni - 1) {			/* Field overflow? */
 8004cec:	1e59      	subs	r1, r3, #1
 8004cee:	4589      	cmp	r9, r1
 8004cf0:	d304      	bcc.n	8004cfc <follow_path+0x160>
				cf |= NS_LOSS | NS_LFN;
 8004cf2:	f044 0403 	orr.w	r4, r4, #3
				i = ni; continue;		/* Next field */
 8004cf6:	4699      	mov	r9, r3
				cf |= NS_LOSS | NS_LFN;
 8004cf8:	b2e4      	uxtb	r4, r4
				i = ni; continue;		/* Next field */
 8004cfa:	e0b6      	b.n	8004e6a <follow_path+0x2ce>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 8004cfc:	eb05 0109 	add.w	r1, r5, r9
 8004d00:	0a00      	lsrs	r0, r0, #8
 8004d02:	f881 0040 	strb.w	r0, [r1, #64]	@ 0x40
 8004d06:	f109 0901 	add.w	r9, r9, #1
		dp->fn[i++] = (BYTE)wc;
 8004d0a:	eb05 0109 	add.w	r1, r5, r9
 8004d0e:	9c00      	ldr	r4, [sp, #0]
 8004d10:	f881 6040 	strb.w	r6, [r1, #64]	@ 0x40
 8004d14:	f109 0901 	add.w	r9, r9, #1
 8004d18:	e0a7      	b.n	8004e6a <follow_path+0x2ce>
 8004d1a:	9400      	str	r4, [sp, #0]
 8004d1c:	e7d4      	b.n	8004cc8 <follow_path+0x12c>
				if (IsUpper(wc)) {		/* ASCII upper case? */
 8004d1e:	f1a6 0141 	sub.w	r1, r6, #65	@ 0x41
 8004d22:	b289      	uxth	r1, r1
 8004d24:	2919      	cmp	r1, #25
 8004d26:	d802      	bhi.n	8004d2e <follow_path+0x192>
					b |= 2;
 8004d28:	f048 0802 	orr.w	r8, r8, #2
				if (IsLower(wc)) {		/* ASCII lower case? */
 8004d2c:	e7ed      	b.n	8004d0a <follow_path+0x16e>
 8004d2e:	f1a6 0161 	sub.w	r1, r6, #97	@ 0x61
 8004d32:	b289      	uxth	r1, r1
 8004d34:	2919      	cmp	r1, #25
					b |= 1; wc -= 0x20;
 8004d36:	bf9e      	ittt	ls
 8004d38:	3e20      	subls	r6, #32
 8004d3a:	f048 0801 	orrls.w	r8, r8, #1
 8004d3e:	b2b6      	uxthls	r6, r6
 8004d40:	e7e3      	b.n	8004d0a <follow_path+0x16e>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8004d42:	075a      	lsls	r2, r3, #29
 8004d44:	d496      	bmi.n	8004c74 <follow_path+0xd8>
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004d46:	79ab      	ldrb	r3, [r5, #6]
 8004d48:	06db      	lsls	r3, r3, #27
 8004d4a:	d542      	bpl.n	8004dd2 <follow_path+0x236>
			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
 8004d4c:	9b01      	ldr	r3, [sp, #4]
 8004d4e:	7818      	ldrb	r0, [r3, #0]
 8004d50:	2804      	cmp	r0, #4
 8004d52:	d131      	bne.n	8004db8 <follow_path+0x21c>
				dp->obj.c_scl = dp->obj.sclust;
 8004d54:	68ab      	ldr	r3, [r5, #8]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8004d56:	79ea      	ldrb	r2, [r5, #7]
				dp->obj.c_scl = dp->obj.sclust;
 8004d58:	622b      	str	r3, [r5, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8004d5a:	692b      	ldr	r3, [r5, #16]
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 8004d5c:	4629      	mov	r1, r5
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8004d5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d62:	4313      	orrs	r3, r2
 8004d64:	626b      	str	r3, [r5, #36]	@ 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 8004d66:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8004d68:	62ab      	str	r3, [r5, #40]	@ 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 8004d6a:	9b01      	ldr	r3, [sp, #4]
 8004d6c:	6918      	ldr	r0, [r3, #16]
 8004d6e:	f7ff fef7 	bl	8004b60 <init_alloc_info.isra.0>
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 8004d72:	2700      	movs	r7, #0
 8004d74:	682b      	ldr	r3, [r5, #0]
 8004d76:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	wc = (BYTE)*p++;			/* Get a byte */
 8004d7a:	f81a 0b01 	ldrb.w	r0, [sl], #1
	if (wc != 0) {
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	f43f af2b 	beq.w	8004bda <follow_path+0x3e>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 8004d84:	f240 11b5 	movw	r1, #437	@ 0x1b5
 8004d88:	f001 fc0c 	bl	80065a4 <ff_oem2uni>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	b1f0      	cbz	r0, 8004dce <follow_path+0x232>
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 8004d90:	281f      	cmp	r0, #31
 8004d92:	f67f af22 	bls.w	8004bda <follow_path+0x3e>
 8004d96:	282f      	cmp	r0, #47	@ 0x2f
 8004d98:	d01d      	beq.n	8004dd6 <follow_path+0x23a>
 8004d9a:	285c      	cmp	r0, #92	@ 0x5c
 8004d9c:	d01b      	beq.n	8004dd6 <follow_path+0x23a>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8004d9e:	287f      	cmp	r0, #127	@ 0x7f
 8004da0:	d804      	bhi.n	8004dac <follow_path+0x210>
 8004da2:	4601      	mov	r1, r0
 8004da4:	4834      	ldr	r0, [pc, #208]	@ (8004e78 <follow_path+0x2dc>)
 8004da6:	f007 fc70 	bl	800c68a <strchr>
 8004daa:	b980      	cbnz	r0, 8004dce <follow_path+0x232>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8004dac:	2f12      	cmp	r7, #18
 8004dae:	d00e      	beq.n	8004dce <follow_path+0x232>
		lfn[di++] = wc;				/* Store the Unicode character */
 8004db0:	f82b 4017 	strh.w	r4, [fp, r7, lsl #1]
	for (;;) {
 8004db4:	3701      	adds	r7, #1
		uc = tchar2uni(&p);			/* Get a character */
 8004db6:	e7e0      	b.n	8004d7a <follow_path+0x1de>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004db8:	9b01      	ldr	r3, [sp, #4]
 8004dba:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8004dbe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc4:	4419      	add	r1, r3
 8004dc6:	f7ff fee0 	bl	8004b8a <ld_clust.isra.0>
 8004dca:	60a8      	str	r0, [r5, #8]
 8004dcc:	e7d1      	b.n	8004d72 <follow_path+0x1d6>
				break;
 8004dce:	2006      	movs	r0, #6
 8004dd0:	e750      	b.n	8004c74 <follow_path+0xd8>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004dd2:	2005      	movs	r0, #5
	return res;
 8004dd4:	e74e      	b.n	8004c74 <follow_path+0xd8>
	if (wc < ' ') {				/* Stopped at end of the path? */
 8004dd6:	4653      	mov	r3, sl
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
 8004dd8:	781c      	ldrb	r4, [r3, #0]
 8004dda:	469a      	mov	sl, r3
 8004ddc:	2c2f      	cmp	r4, #47	@ 0x2f
 8004dde:	f103 0301 	add.w	r3, r3, #1
 8004de2:	d0f9      	beq.n	8004dd8 <follow_path+0x23c>
 8004de4:	2c5c      	cmp	r4, #92	@ 0x5c
 8004de6:	d0f7      	beq.n	8004dd8 <follow_path+0x23c>
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 8004de8:	2c1f      	cmp	r4, #31
 8004dea:	bf8c      	ite	hi
 8004dec:	2400      	movhi	r4, #0
 8004dee:	2401      	movls	r4, #1
 8004df0:	00a4      	lsls	r4, r4, #2
		wc = lfn[di - 1];
 8004df2:	f1ab 0202 	sub.w	r2, fp, #2
	while (di) {					/* Snip off trailing spaces and dots if exist */
 8004df6:	2f00      	cmp	r7, #0
 8004df8:	f47f aef1 	bne.w	8004bde <follow_path+0x42>
	lfn[di] = 0;							/* LFN is created into the working buffer */
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	f82b 3017 	strh.w	r3, [fp, r7, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 8004e04:	2f00      	cmp	r7, #0
 8004e06:	d0e2      	beq.n	8004dce <follow_path+0x232>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f83b 2013 	ldrh.w	r2, [fp, r3, lsl #1]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	2a20      	cmp	r2, #32
 8004e12:	f103 0301 	add.w	r3, r3, #1
 8004e16:	d0f8      	beq.n	8004e0a <follow_path+0x26e>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8004e18:	b909      	cbnz	r1, 8004e1e <follow_path+0x282>
 8004e1a:	2a2e      	cmp	r2, #46	@ 0x2e
 8004e1c:	d102      	bne.n	8004e24 <follow_path+0x288>
 8004e1e:	f044 0403 	orr.w	r4, r4, #3
 8004e22:	b2e4      	uxtb	r4, r4
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 8004e24:	f1ab 0202 	sub.w	r2, fp, #2
 8004e28:	f832 3017 	ldrh.w	r3, [r2, r7, lsl #1]
 8004e2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e2e:	d001      	beq.n	8004e34 <follow_path+0x298>
 8004e30:	3f01      	subs	r7, #1
 8004e32:	d1f9      	bne.n	8004e28 <follow_path+0x28c>
	memset(dp->fn, ' ', 11);
 8004e34:	f04f 3320 	mov.w	r3, #538976288	@ 0x20202020
	i = b = 0; ni = 8;
 8004e38:	f04f 0900 	mov.w	r9, #0
	memset(dp->fn, ' ', 11);
 8004e3c:	646b      	str	r3, [r5, #68]	@ 0x44
 8004e3e:	642b      	str	r3, [r5, #64]	@ 0x40
 8004e40:	f8c5 3047 	str.w	r3, [r5, #71]	@ 0x47
	i = b = 0; ni = 8;
 8004e44:	46c8      	mov	r8, r9
 8004e46:	2308      	movs	r3, #8
		wc = lfn[si++];					/* Get an LFN character */
 8004e48:	f83b 6011 	ldrh.w	r6, [fp, r1, lsl #1]
 8004e4c:	1c4a      	adds	r2, r1, #1
		if (wc == 0) break;				/* Break on end of the LFN */
 8004e4e:	2e00      	cmp	r6, #0
 8004e50:	f43f aedb 	beq.w	8004c0a <follow_path+0x6e>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8004e54:	2e20      	cmp	r6, #32
 8004e56:	d005      	beq.n	8004e64 <follow_path+0x2c8>
 8004e58:	2e2e      	cmp	r6, #46	@ 0x2e
 8004e5a:	f47f aec9 	bne.w	8004bf0 <follow_path+0x54>
 8004e5e:	42ba      	cmp	r2, r7
 8004e60:	f43f aec6 	beq.w	8004bf0 <follow_path+0x54>
			cf |= NS_LOSS | NS_LFN;
 8004e64:	f044 0403 	orr.w	r4, r4, #3
 8004e68:	b2e4      	uxtb	r4, r4
		dp->fn[i++] = (BYTE)wc;
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	e7ec      	b.n	8004e48 <follow_path+0x2ac>
 8004e6e:	bf00      	nop
 8004e70:	0800f474 	.word	0x0800f474
 8004e74:	0800f40d 	.word	0x0800f40d
 8004e78:	0800f404 	.word	0x0800f404

08004e7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8004e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 8004e84:	a803      	add	r0, sp, #12
{
 8004e86:	4614      	mov	r4, r2
	const TCHAR *rp = path;
 8004e88:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8004e8a:	f7fe fa5a 	bl	8003342 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004e8e:	1e05      	subs	r5, r0, #0
 8004e90:	db1a      	blt.n	8004ec8 <f_mount+0x4c>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8004e92:	4e0e      	ldr	r6, [pc, #56]	@ (8004ecc <f_mount+0x50>)
 8004e94:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]

	if (cfs) {					/* Unregister current filesystem object if registered */
 8004e98:	b128      	cbz	r0, 8004ea6 <f_mount+0x2a>
		FatFs[vol] = 0;
 8004e9a:	2700      	movs	r7, #0
 8004e9c:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
#if FF_FS_LOCK
		clear_share(cfs);
 8004ea0:	f7fe f9f6 	bl	8003290 <clear_share>
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 8004ea4:	7007      	strb	r7, [r0, #0]
	}

	if (fs) {					/* Register new filesystem object */
 8004ea6:	9b01      	ldr	r3, [sp, #4]
 8004ea8:	b123      	cbz	r3, 8004eb4 <f_mount+0x38>
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8004eaa:	2200      	movs	r2, #0
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 8004eac:	705d      	strb	r5, [r3, #1]
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8004eae:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 8004eb0:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 8004eb4:	b12c      	cbz	r4, 8004ec2 <f_mount+0x46>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	4668      	mov	r0, sp
 8004eba:	a901      	add	r1, sp, #4
 8004ebc:	f7fe ff0c 	bl	8003cd8 <mount_volume>
 8004ec0:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
}
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	b005      	add	sp, #20
 8004ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8004ec8:	240b      	movs	r4, #11
 8004eca:	e7fa      	b.n	8004ec2 <f_mount+0x46>
 8004ecc:	20000910 	.word	0x20000910

08004ed0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 8004ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed4:	b0c5      	sub	sp, #276	@ 0x114
 8004ed6:	4690      	mov	r8, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004ed8:	4605      	mov	r5, r0
{
 8004eda:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8004edc:	2800      	cmp	r0, #0
 8004ede:	f000 8164 	beq.w	80051aa <f_open+0x2da>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8004ee2:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = mount_volume(&path, &fs, mode);
 8004ee6:	463a      	mov	r2, r7
 8004ee8:	a903      	add	r1, sp, #12
 8004eea:	a801      	add	r0, sp, #4
 8004eec:	f7fe fef4 	bl	8003cd8 <mount_volume>
	if (res == FR_OK) {
 8004ef0:	4681      	mov	r9, r0
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	f040 8151 	bne.w	800519a <f_open+0x2ca>
		dj.obj.fs = fs;
 8004ef8:	9e03      	ldr	r6, [sp, #12]
		INIT_NAMBUF(fs);
 8004efa:	ab04      	add	r3, sp, #16
 8004efc:	60f3      	str	r3, [r6, #12]
 8004efe:	ab24      	add	r3, sp, #144	@ 0x90
		res = follow_path(&dj, path);	/* Follow the file path */
 8004f00:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 8004f02:	6133      	str	r3, [r6, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8004f04:	a80e      	add	r0, sp, #56	@ 0x38
		dj.obj.fs = fs;
 8004f06:	960e      	str	r6, [sp, #56]	@ 0x38
		res = follow_path(&dj, path);	/* Follow the file path */
 8004f08:	f7ff fe48 	bl	8004b9c <follow_path>
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	b960      	cbnz	r0, 8004f2a <f_open+0x5a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004f10:	f99d 3083 	ldrsb.w	r3, [sp, #131]	@ 0x83
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	db5d      	blt.n	8004fd4 <f_open+0x104>
				res = FR_INVALID_NAME;
			}
#if FF_FS_LOCK
			else {
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
 8004f18:	f018 0f3e 	tst.w	r8, #62	@ 0x3e
 8004f1c:	bf14      	ite	ne
 8004f1e:	2101      	movne	r1, #1
 8004f20:	2100      	moveq	r1, #0
 8004f22:	a80e      	add	r0, sp, #56	@ 0x38
 8004f24:	f7fe f92c 	bl	8003180 <chk_share>
 8004f28:	4604      	mov	r4, r0
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004f2a:	f018 0f1c 	tst.w	r8, #28
 8004f2e:	f000 8098 	beq.w	8005062 <f_open+0x192>
			if (res != FR_OK) {					/* No file, create new */
 8004f32:	2c00      	cmp	r4, #0
 8004f34:	d055      	beq.n	8004fe2 <f_open+0x112>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004f36:	2c04      	cmp	r4, #4
 8004f38:	d145      	bne.n	8004fc6 <f_open+0xf6>
	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	499c      	ldr	r1, [pc, #624]	@ (80051b0 <f_open+0x2e0>)
 8004f3e:	011a      	lsls	r2, r3, #4
 8004f40:	588a      	ldr	r2, [r1, r2]
 8004f42:	2a00      	cmp	r2, #0
 8004f44:	d148      	bne.n	8004fd8 <f_open+0x108>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004f46:	a80e      	add	r0, sp, #56	@ 0x38
 8004f48:	f7ff fc42 	bl	80047d0 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	d139      	bne.n	8004fc6 <f_open+0xf6>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004f52:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8004f56:	0738      	lsls	r0, r7, #28
 8004f58:	f140 8094 	bpl.w	8005084 <f_open+0x1b4>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8004f5c:	7833      	ldrb	r3, [r6, #0]
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d14a      	bne.n	8004ff8 <f_open+0x128>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8004f62:	6934      	ldr	r4, [r6, #16]
					init_alloc_info(fs, &fp->obj);
 8004f64:	4629      	mov	r1, r5
 8004f66:	4620      	mov	r0, r4
					fp->obj.fs = fs;
 8004f68:	602e      	str	r6, [r5, #0]
					init_alloc_info(fs, &fp->obj);
 8004f6a:	f7ff fdf9 	bl	8004b60 <init_alloc_info.isra.0>
					/* Set directory entry block initial state */
					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
 8004f6e:	221e      	movs	r2, #30
 8004f70:	2100      	movs	r1, #0
 8004f72:	1ca0      	adds	r0, r4, #2
 8004f74:	f007 fb72 	bl	800c65c <memset>
					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 8004f78:	6930      	ldr	r0, [r6, #16]
 8004f7a:	221a      	movs	r2, #26
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	3026      	adds	r0, #38	@ 0x26
 8004f80:	f007 fb6c 	bl	800c65c <memset>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 8004f84:	2220      	movs	r2, #32
 8004f86:	6933      	ldr	r3, [r6, #16]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
					fs->dirbuf[XDIR_GenFlags] = 1;
					res = store_xdir(&dj);
 8004f88:	a80e      	add	r0, sp, #56	@ 0x38
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 8004f8a:	711a      	strb	r2, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8004f8c:	2200      	movs	r2, #0
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 8004f8e:	6933      	ldr	r3, [r6, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8004f90:	721a      	strb	r2, [r3, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8004f92:	725a      	strb	r2, [r3, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 8004f94:	2261      	movs	r2, #97	@ 0x61
 8004f96:	729a      	strb	r2, [r3, #10]
	*ptr++ = (BYTE)val;
 8004f98:	225b      	movs	r2, #91	@ 0x5b
 8004f9a:	72da      	strb	r2, [r3, #11]
					fs->dirbuf[XDIR_GenFlags] = 1;
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	6933      	ldr	r3, [r6, #16]
 8004fa0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					res = store_xdir(&dj);
 8004fa4:	f7ff fa7e 	bl	80044a4 <store_xdir>
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 8004fa8:	4604      	mov	r4, r0
 8004faa:	b960      	cbnz	r0, 8004fc6 <f_open+0xf6>
 8004fac:	68a9      	ldr	r1, [r5, #8]
 8004fae:	2900      	cmp	r1, #0
 8004fb0:	d064      	beq.n	800507c <f_open+0x1ac>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	f7fe fd71 	bl	8003a9c <remove_chain>
 8004fba:	4604      	mov	r4, r0
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8004fbc:	68ab      	ldr	r3, [r5, #8]
 8004fbe:	3b01      	subs	r3, #1
					if (cl != 0) {						/* Remove the cluster chain if exist */
						sc = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
						if (res == FR_OK) {
							res = move_window(fs, sc);
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004fc0:	6173      	str	r3, [r6, #20]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 8004fc2:	2c00      	cmp	r4, #0
 8004fc4:	d05a      	beq.n	800507c <f_open+0x1ac>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	46a1      	mov	r9, r4
 8004fca:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 8004fcc:	4648      	mov	r0, r9
 8004fce:	b045      	add	sp, #276	@ 0x114
 8004fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				res = FR_INVALID_NAME;
 8004fd4:	2406      	movs	r4, #6
 8004fd6:	e7a8      	b.n	8004f2a <f_open+0x5a>
	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 8004fd8:	3301      	adds	r3, #1
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d1af      	bne.n	8004f3e <f_open+0x6e>
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004fde:	2412      	movs	r4, #18
 8004fe0:	e7f1      	b.n	8004fc6 <f_open+0xf6>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004fe2:	f89d 303e 	ldrb.w	r3, [sp, #62]	@ 0x3e
 8004fe6:	f013 0f11 	tst.w	r3, #17
 8004fea:	f040 80da 	bne.w	80051a2 <f_open+0x2d2>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004fee:	f018 0f04 	tst.w	r8, #4
 8004ff2:	d0b0      	beq.n	8004f56 <f_open+0x86>
 8004ff4:	2408      	movs	r4, #8
 8004ff6:	e7e6      	b.n	8004fc6 <f_open+0xf6>
	*ptr++ = (BYTE)val; val >>= 8;
 8004ff8:	2400      	movs	r4, #0
	*ptr++ = (BYTE)val;
 8004ffa:	225b      	movs	r2, #91	@ 0x5b
	*ptr++ = (BYTE)val; val >>= 8;
 8004ffc:	2161      	movs	r1, #97	@ 0x61
					st_dword(dj.dir + DIR_CrtTime, tm);
 8004ffe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
	*ptr++ = (BYTE)val;
 8005000:	745a      	strb	r2, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8005002:	739c      	strb	r4, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8005004:	73dc      	strb	r4, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 8005006:	7419      	strb	r1, [r3, #16]
					st_dword(dj.dir + DIR_ModTime, tm);
 8005008:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
	*ptr++ = (BYTE)val;
 800500a:	765a      	strb	r2, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 800500c:	759c      	strb	r4, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 800500e:	75dc      	strb	r4, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8005010:	7619      	strb	r1, [r3, #24]
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8005012:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8005014:	7830      	ldrb	r0, [r6, #0]
 8005016:	f7ff fdb8 	bl	8004b8a <ld_clust.isra.0>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800501a:	2320      	movs	r3, #32
 800501c:	72cb      	strb	r3, [r1, #11]
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 800501e:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005020:	4622      	mov	r2, r4
 8005022:	4630      	mov	r0, r6
 8005024:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8005026:	f7fe faea 	bl	80035fe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800502a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
	*ptr++ = (BYTE)val; val >>= 8;
 800502c:	771c      	strb	r4, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800502e:	775c      	strb	r4, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8005030:	779c      	strb	r4, [r3, #30]
	*ptr++ = (BYTE)val;
 8005032:	77dc      	strb	r4, [r3, #31]
					fs->wflag = 1;
 8005034:	2301      	movs	r3, #1
 8005036:	7133      	strb	r3, [r6, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8005038:	f1b8 0f00 	cmp.w	r8, #0
 800503c:	d01e      	beq.n	800507c <f_open+0x1ac>
						res = remove_chain(&dj.obj, cl, 0);
 800503e:	4622      	mov	r2, r4
 8005040:	4641      	mov	r1, r8
 8005042:	a80e      	add	r0, sp, #56	@ 0x38
						sc = fs->winsect;
 8005044:	f8d6 a038 	ldr.w	sl, [r6, #56]	@ 0x38
						res = remove_chain(&dj.obj, cl, 0);
 8005048:	f7fe fd28 	bl	8003a9c <remove_chain>
						if (res == FR_OK) {
 800504c:	4604      	mov	r4, r0
 800504e:	2800      	cmp	r0, #0
 8005050:	d1b9      	bne.n	8004fc6 <f_open+0xf6>
							res = move_window(fs, sc);
 8005052:	4651      	mov	r1, sl
 8005054:	4630      	mov	r0, r6
 8005056:	f7fe fade 	bl	8003616 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800505a:	f108 33ff 	add.w	r3, r8, #4294967295
							res = move_window(fs, sc);
 800505e:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005060:	e7ae      	b.n	8004fc0 <f_open+0xf0>
			if (res == FR_OK) {					/* Is the object exsiting? */
 8005062:	2c00      	cmp	r4, #0
 8005064:	d1af      	bne.n	8004fc6 <f_open+0xf6>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8005066:	f89d 303e 	ldrb.w	r3, [sp, #62]	@ 0x3e
 800506a:	06da      	lsls	r2, r3, #27
 800506c:	f100 8097 	bmi.w	800519e <f_open+0x2ce>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8005070:	f018 0f02 	tst.w	r8, #2
 8005074:	d002      	beq.n	800507c <f_open+0x1ac>
 8005076:	07dc      	lsls	r4, r3, #31
 8005078:	f100 8093 	bmi.w	80051a2 <f_open+0x2d2>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800507c:	0738      	lsls	r0, r7, #28
 800507e:	bf48      	it	mi
 8005080:	f047 0740 	orrmi.w	r7, r7, #64	@ 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005084:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
			fp->dir_ptr = dj.dir;
 8005086:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 8005088:	2f01      	cmp	r7, #1
 800508a:	bf94      	ite	ls
 800508c:	2100      	movls	r1, #0
 800508e:	2101      	movhi	r1, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005090:	64ab      	str	r3, [r5, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 8005092:	64ec      	str	r4, [r5, #76]	@ 0x4c
			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 8005094:	a80e      	add	r0, sp, #56	@ 0x38
 8005096:	f7fe f8a1 	bl	80031dc <inc_share>
 800509a:	62e8      	str	r0, [r5, #44]	@ 0x2c
			if (fp->obj.lockid == 0) res = FR_INT_ERR;
 800509c:	2800      	cmp	r0, #0
 800509e:	f000 8082 	beq.w	80051a6 <f_open+0x2d6>
			if (fs->fs_type == FS_EXFAT) {
 80050a2:	7830      	ldrb	r0, [r6, #0]
 80050a4:	2804      	cmp	r0, #4
 80050a6:	d166      	bne.n	8005176 <f_open+0x2a6>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80050a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80050aa:	f89d 203f 	ldrb.w	r2, [sp, #63]	@ 0x3f
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80050ae:	622b      	str	r3, [r5, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80050b0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
				init_alloc_info(fs, &fp->obj);
 80050b2:	4629      	mov	r1, r5
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80050b4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80050b8:	4313      	orrs	r3, r2
 80050ba:	626b      	str	r3, [r5, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80050bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
				init_alloc_info(fs, &fp->obj);
 80050be:	6930      	ldr	r0, [r6, #16]
				fp->obj.c_ofs = dj.blk_ofs;
 80050c0:	62ab      	str	r3, [r5, #40]	@ 0x28
				init_alloc_info(fs, &fp->obj);
 80050c2:	f7ff fd4d 	bl	8004b60 <init_alloc_info.isra.0>
			fp->obj.id = fs->id;
 80050c6:	88f3      	ldrh	r3, [r6, #6]
			fp->cltbl = 0;		/* Disable fast seek mode */
 80050c8:	2400      	movs	r4, #0
			fp->fptr = 0;		/* Set file pointer top of the file */
 80050ca:	2200      	movs	r2, #0
			fp->obj.id = fs->id;
 80050cc:	80ab      	strh	r3, [r5, #4]
			fp->fptr = 0;		/* Set file pointer top of the file */
 80050ce:	2300      	movs	r3, #0
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 80050d0:	f105 0854 	add.w	r8, r5, #84	@ 0x54
			fp->fptr = 0;		/* Set file pointer top of the file */
 80050d4:	e9c5 230e 	strd	r2, r3, [r5, #56]	@ 0x38
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 80050d8:	4621      	mov	r1, r4
 80050da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050de:	4640      	mov	r0, r8
			fp->cltbl = 0;		/* Disable fast seek mode */
 80050e0:	652c      	str	r4, [r5, #80]	@ 0x50
			fp->obj.fs = fs;	/* Validate the file object */
 80050e2:	602e      	str	r6, [r5, #0]
			fp->flag = mode;	/* Set file access mode */
 80050e4:	f885 7030 	strb.w	r7, [r5, #48]	@ 0x30
			fp->err = 0;		/* Clear error flag */
 80050e8:	f885 4031 	strb.w	r4, [r5, #49]	@ 0x31
			fp->sect = 0;		/* Invalidate current data sector */
 80050ec:	646c      	str	r4, [r5, #68]	@ 0x44
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 80050ee:	f007 fab5 	bl	800c65c <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80050f2:	06ba      	lsls	r2, r7, #26
 80050f4:	f57f af6a 	bpl.w	8004fcc <f_open+0xfc>
 80050f8:	e9d5 7a04 	ldrd	r7, sl, [r5, #16]
 80050fc:	ea57 030a 	orrs.w	r3, r7, sl
 8005100:	f43f af64 	beq.w	8004fcc <f_open+0xfc>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005104:	f8b6 b00a 	ldrh.w	fp, [r6, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005108:	e9c5 7a0e 	strd	r7, sl, [r5, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800510c:	ea4f 2b4b 	mov.w	fp, fp, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005110:	45bb      	cmp	fp, r7
 8005112:	eb74 030a 	sbcs.w	r3, r4, sl
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005116:	68a9      	ldr	r1, [r5, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005118:	d210      	bcs.n	800513c <f_open+0x26c>
					clst = get_fat(&fp->obj, clst);
 800511a:	4628      	mov	r0, r5
 800511c:	f7fe fb33 	bl	8003786 <get_fat>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005120:	ebb7 070b 	subs.w	r7, r7, fp
 8005124:	f16a 0a00 	sbc.w	sl, sl, #0
					if (clst <= 1) res = FR_INT_ERR;
 8005128:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800512a:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800512c:	d92f      	bls.n	800518e <f_open+0x2be>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800512e:	1c43      	adds	r3, r0, #1
 8005130:	d02f      	beq.n	8005192 <f_open+0x2c2>
 8005132:	45bb      	cmp	fp, r7
 8005134:	eb74 030a 	sbcs.w	r3, r4, sl
 8005138:	d3ef      	bcc.n	800511a <f_open+0x24a>
 800513a:	2400      	movs	r4, #0
				fp->clust = clst;
 800513c:	6429      	str	r1, [r5, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800513e:	b9b4      	cbnz	r4, 800516e <f_open+0x29e>
 8005140:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8005144:	2b00      	cmp	r3, #0
 8005146:	f43f af41 	beq.w	8004fcc <f_open+0xfc>
					sc = clst2sect(fs, clst);
 800514a:	4630      	mov	r0, r6
 800514c:	f7fe f8b0 	bl	80032b0 <clst2sect>
					if (sc == 0) {
 8005150:	b308      	cbz	r0, 8005196 <f_open+0x2c6>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005152:	0a7f      	lsrs	r7, r7, #9
 8005154:	ea47 57ca 	orr.w	r7, r7, sl, lsl #23
 8005158:	19c2      	adds	r2, r0, r7
 800515a:	646a      	str	r2, [r5, #68]	@ 0x44
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800515c:	2301      	movs	r3, #1
 800515e:	4641      	mov	r1, r8
 8005160:	7870      	ldrb	r0, [r6, #1]
 8005162:	f7fd fe8f 	bl	8002e84 <disk_read>
 8005166:	2800      	cmp	r0, #0
 8005168:	f43f af30 	beq.w	8004fcc <f_open+0xfc>
 800516c:	2401      	movs	r4, #1
				if (res != FR_OK) dec_share(fp->obj.lockid); /* Decrement file open counter if seek failed */
 800516e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8005170:	f7fe f872 	bl	8003258 <dec_share>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005174:	e727      	b.n	8004fc6 <f_open+0xf6>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005176:	4621      	mov	r1, r4
 8005178:	f7ff fd07 	bl	8004b8a <ld_clust.isra.0>
 800517c:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800517e:	f104 001c 	add.w	r0, r4, #28
 8005182:	f7fd ffdf 	bl	8003144 <ld_dword>
 8005186:	2300      	movs	r3, #0
 8005188:	6128      	str	r0, [r5, #16]
 800518a:	616b      	str	r3, [r5, #20]
 800518c:	e79b      	b.n	80050c6 <f_open+0x1f6>
					if (clst <= 1) res = FR_INT_ERR;
 800518e:	2402      	movs	r4, #2
 8005190:	e7d4      	b.n	800513c <f_open+0x26c>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005192:	2401      	movs	r4, #1
 8005194:	e7d2      	b.n	800513c <f_open+0x26c>
						res = FR_INT_ERR;
 8005196:	2402      	movs	r4, #2
 8005198:	e7e9      	b.n	800516e <f_open+0x29e>
 800519a:	4604      	mov	r4, r0
 800519c:	e713      	b.n	8004fc6 <f_open+0xf6>
					res = FR_NO_FILE;
 800519e:	2404      	movs	r4, #4
 80051a0:	e711      	b.n	8004fc6 <f_open+0xf6>
					res = FR_DENIED;
 80051a2:	2407      	movs	r4, #7
 80051a4:	e70f      	b.n	8004fc6 <f_open+0xf6>
			if (fp->obj.lockid == 0) res = FR_INT_ERR;
 80051a6:	2402      	movs	r4, #2
 80051a8:	e70d      	b.n	8004fc6 <f_open+0xf6>
	if (!fp) return FR_INVALID_OBJECT;
 80051aa:	f04f 0909 	mov.w	r9, #9
 80051ae:	e70d      	b.n	8004fcc <f_open+0xfc>
 80051b0:	200008cc 	.word	0x200008cc

080051b4 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 80051b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b8:	469b      	mov	fp, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80051ba:	2300      	movs	r3, #0
{
 80051bc:	b087      	sub	sp, #28
 80051be:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 80051c0:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80051c4:	a905      	add	r1, sp, #20
{
 80051c6:	4604      	mov	r4, r0
 80051c8:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80051ca:	f7fe f8d7 	bl	800337c <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80051ce:	4605      	mov	r5, r0
 80051d0:	bba8      	cbnz	r0, 800523e <f_read+0x8a>
 80051d2:	f894 5031 	ldrb.w	r5, [r4, #49]	@ 0x31
 80051d6:	bb95      	cbnz	r5, 800523e <f_read+0x8a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80051d8:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80051dc:	f013 0301 	ands.w	r3, r3, #1
 80051e0:	9301      	str	r3, [sp, #4]
 80051e2:	f000 80b3 	beq.w	800534c <f_read+0x198>
	remain = fp->obj.objsize - fp->fptr;
 80051e6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80051ea:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
 80051ee:	1a1b      	subs	r3, r3, r0
 80051f0:	eb62 0201 	sbc.w	r2, r2, r1
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80051f4:	42b3      	cmp	r3, r6
 80051f6:	f172 0200 	sbcs.w	r2, r2, #0
 80051fa:	bf38      	it	cc
 80051fc:	461e      	movcc	r6, r3
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80051fe:	f104 0354 	add.w	r3, r4, #84	@ 0x54
 8005202:	9302      	str	r3, [sp, #8]
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8005204:	b1de      	cbz	r6, 800523e <f_read+0x8a>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005206:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800520a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800520e:	2900      	cmp	r1, #0
 8005210:	f040 808d 	bne.w	800532e <f_read+0x17a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005214:	f8dd a014 	ldr.w	sl, [sp, #20]
 8005218:	0a51      	lsrs	r1, r2, #9
 800521a:	f8ba 800a 	ldrh.w	r8, [sl, #10]
 800521e:	ea41 51c3 	orr.w	r1, r1, r3, lsl #23
 8005222:	f108 38ff 	add.w	r8, r8, #4294967295
			if (csect == 0) {					/* On the cluster boundary? */
 8005226:	ea18 0801 	ands.w	r8, r8, r1
 800522a:	d11f      	bne.n	800526c <f_read+0xb8>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800522c:	ea52 0103 	orrs.w	r1, r2, r3
 8005230:	d109      	bne.n	8005246 <f_read+0x92>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005232:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005234:	2801      	cmp	r0, #1
 8005236:	d811      	bhi.n	800525c <f_read+0xa8>
 8005238:	2502      	movs	r5, #2
 800523a:	f884 5031 	strb.w	r5, [r4, #49]	@ 0x31
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800523e:	4628      	mov	r0, r5
 8005240:	b007      	add	sp, #28
 8005242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 8005246:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8005248:	b119      	cbz	r1, 8005252 <f_read+0x9e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800524a:	4620      	mov	r0, r4
 800524c:	f7fe f83b 	bl	80032c6 <clmt_clust>
 8005250:	e7f0      	b.n	8005234 <f_read+0x80>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005252:	4620      	mov	r0, r4
 8005254:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8005256:	f7fe fa96 	bl	8003786 <get_fat>
 800525a:	e7eb      	b.n	8005234 <f_read+0x80>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800525c:	1c43      	adds	r3, r0, #1
 800525e:	d104      	bne.n	800526a <f_read+0xb6>
 8005260:	2301      	movs	r3, #1
 8005262:	9d01      	ldr	r5, [sp, #4]
 8005264:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
 8005268:	e7e9      	b.n	800523e <f_read+0x8a>
				fp->clust = clst;				/* Update current cluster */
 800526a:	6420      	str	r0, [r4, #64]	@ 0x40
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800526c:	4650      	mov	r0, sl
 800526e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8005270:	f7fe f81e 	bl	80032b0 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8005274:	2800      	cmp	r0, #0
 8005276:	d0df      	beq.n	8005238 <f_read+0x84>
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8005278:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
			sect += csect;
 800527c:	eb08 0700 	add.w	r7, r8, r0
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8005280:	d334      	bcc.n	80052ec <f_read+0x138>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005282:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 8005286:	eb08 2156 	add.w	r1, r8, r6, lsr #9
 800528a:	4291      	cmp	r1, r2
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800528c:	ea4f 2356 	mov.w	r3, r6, lsr #9
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005290:	4649      	mov	r1, r9
					cc = fs->csize - csect;
 8005292:	bf88      	it	hi
 8005294:	eba2 0308 	subhi.w	r3, r2, r8
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005298:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800529c:	463a      	mov	r2, r7
 800529e:	9303      	str	r3, [sp, #12]
 80052a0:	f7fd fdf0 	bl	8002e84 <disk_read>
 80052a4:	2800      	cmp	r0, #0
 80052a6:	d1db      	bne.n	8005260 <f_read+0xac>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80052a8:	f994 2030 	ldrsb.w	r2, [r4, #48]	@ 0x30
 80052ac:	9b03      	ldr	r3, [sp, #12]
 80052ae:	2a00      	cmp	r2, #0
 80052b0:	da0c      	bge.n	80052cc <f_read+0x118>
 80052b2:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80052b4:	1bc0      	subs	r0, r0, r7
 80052b6:	4298      	cmp	r0, r3
 80052b8:	d208      	bcs.n	80052cc <f_read+0x118>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80052ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052be:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 80052c2:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 80052c6:	f007 fada 	bl	800c87e <memcpy>
 80052ca:	9b03      	ldr	r3, [sp, #12]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80052cc:	025f      	lsls	r7, r3, #9
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 80052ce:	f8db 3000 	ldr.w	r3, [fp]
 80052d2:	1bf6      	subs	r6, r6, r7
 80052d4:	443b      	add	r3, r7
 80052d6:	f8cb 3000 	str.w	r3, [fp]
 80052da:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	@ 0x38
 80052de:	19db      	adds	r3, r3, r7
 80052e0:	f142 0200 	adc.w	r2, r2, #0
 80052e4:	e9c4 320e 	strd	r3, r2, [r4, #56]	@ 0x38
 80052e8:	44b9      	add	r9, r7
 80052ea:	e78b      	b.n	8005204 <f_read+0x50>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80052ec:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80052ee:	42ba      	cmp	r2, r7
 80052f0:	d01c      	beq.n	800532c <f_read+0x178>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80052f2:	f994 3030 	ldrsb.w	r3, [r4, #48]	@ 0x30
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80052f6:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80052fa:	2b00      	cmp	r3, #0
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80052fc:	f104 0854 	add.w	r8, r4, #84	@ 0x54
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005300:	da0b      	bge.n	800531a <f_read+0x166>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005302:	2301      	movs	r3, #1
 8005304:	4641      	mov	r1, r8
 8005306:	f7fd fdd2 	bl	8002eae <disk_write>
 800530a:	2800      	cmp	r0, #0
 800530c:	d1a8      	bne.n	8005260 <f_read+0xac>
					fp->flag &= (BYTE)~FA_DIRTY;
 800530e:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8005312:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005316:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800531a:	2301      	movs	r3, #1
 800531c:	463a      	mov	r2, r7
 800531e:	4641      	mov	r1, r8
 8005320:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8005324:	f7fd fdae 	bl	8002e84 <disk_read>
 8005328:	2800      	cmp	r0, #0
 800532a:	d199      	bne.n	8005260 <f_read+0xac>
			fp->sect = sect;
 800532c:	6467      	str	r7, [r4, #68]	@ 0x44
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800532e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005330:	9b02      	ldr	r3, [sp, #8]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8005332:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005336:	f5c1 7700 	rsb	r7, r1, #512	@ 0x200
 800533a:	42b7      	cmp	r7, r6
 800533c:	bf28      	it	cs
 800533e:	4637      	movcs	r7, r6
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005340:	4648      	mov	r0, r9
 8005342:	463a      	mov	r2, r7
 8005344:	4419      	add	r1, r3
 8005346:	f007 fa9a 	bl	800c87e <memcpy>
 800534a:	e7c0      	b.n	80052ce <f_read+0x11a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800534c:	2507      	movs	r5, #7
 800534e:	e776      	b.n	800523e <f_read+0x8a>

08005350 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 8005350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005354:	469a      	mov	sl, r3
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8005356:	2300      	movs	r3, #0
{
 8005358:	b085      	sub	sp, #20
 800535a:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 800535c:	f8ca 3000 	str.w	r3, [sl]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005360:	a903      	add	r1, sp, #12
{
 8005362:	4604      	mov	r4, r0
 8005364:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005366:	f7fe f809 	bl	800337c <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800536a:	4605      	mov	r5, r0
 800536c:	2800      	cmp	r0, #0
 800536e:	d13a      	bne.n	80053e6 <f_write+0x96>
 8005370:	f894 5031 	ldrb.w	r5, [r4, #49]	@ 0x31
 8005374:	bbbd      	cbnz	r5, 80053e6 <f_write+0x96>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005376:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800537a:	079a      	lsls	r2, r3, #30
 800537c:	f140 80d2 	bpl.w	8005524 <f_write+0x1d4>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005380:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005384:	f898 3000 	ldrb.w	r3, [r8]
 8005388:	2b04      	cmp	r3, #4
 800538a:	d003      	beq.n	8005394 <f_write+0x44>
 800538c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800538e:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005390:	bf28      	it	cs
 8005392:	43de      	mvncs	r6, r3
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005394:	f104 0354 	add.w	r3, r4, #84	@ 0x54
 8005398:	9300      	str	r3, [sp, #0]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800539a:	b1f6      	cbz	r6, 80053da <f_write+0x8a>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800539c:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80053a0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80053a4:	2900      	cmp	r1, #0
 80053a6:	f040 80a8 	bne.w	80054fa <f_write+0x1aa>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80053aa:	f8b8 700a 	ldrh.w	r7, [r8, #10]
 80053ae:	0a51      	lsrs	r1, r2, #9
 80053b0:	3f01      	subs	r7, #1
 80053b2:	ea41 51c3 	orr.w	r1, r1, r3, lsl #23
			if (csect == 0) {				/* On the cluster boundary? */
 80053b6:	400f      	ands	r7, r1
 80053b8:	d129      	bne.n	800540e <f_write+0xbe>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80053ba:	ea52 0103 	orrs.w	r1, r2, r3
 80053be:	d106      	bne.n	80053ce <f_write+0x7e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80053c0:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80053c2:	b9b0      	cbnz	r0, 80053f2 <f_write+0xa2>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80053c4:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80053c6:	4620      	mov	r0, r4
 80053c8:	f7fe fe56 	bl	8004078 <create_chain>
 80053cc:	e004      	b.n	80053d8 <f_write+0x88>
					if (fp->cltbl) {
 80053ce:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80053d0:	b169      	cbz	r1, 80053ee <f_write+0x9e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80053d2:	4620      	mov	r0, r4
 80053d4:	f7fd ff77 	bl	80032c6 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80053d8:	b958      	cbnz	r0, 80053f2 <f_write+0xa2>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80053da:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80053de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053e2:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
}
 80053e6:	4628      	mov	r0, r5
 80053e8:	b005      	add	sp, #20
 80053ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80053ee:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80053f0:	e7e9      	b.n	80053c6 <f_write+0x76>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80053f2:	2801      	cmp	r0, #1
 80053f4:	d103      	bne.n	80053fe <f_write+0xae>
 80053f6:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80053f8:	f884 5031 	strb.w	r5, [r4, #49]	@ 0x31
 80053fc:	e7f3      	b.n	80053e6 <f_write+0x96>
 80053fe:	1c43      	adds	r3, r0, #1
 8005400:	d101      	bne.n	8005406 <f_write+0xb6>
 8005402:	2501      	movs	r5, #1
 8005404:	e7f8      	b.n	80053f8 <f_write+0xa8>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005406:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8005408:	6420      	str	r0, [r4, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800540a:	b903      	cbnz	r3, 800540e <f_write+0xbe>
 800540c:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800540e:	f994 3030 	ldrsb.w	r3, [r4, #48]	@ 0x30
 8005412:	2b00      	cmp	r3, #0
 8005414:	da0f      	bge.n	8005436 <f_write+0xe6>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005416:	2301      	movs	r3, #1
 8005418:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800541a:	f898 0001 	ldrb.w	r0, [r8, #1]
 800541e:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 8005422:	f7fd fd44 	bl	8002eae <disk_write>
 8005426:	2800      	cmp	r0, #0
 8005428:	d1eb      	bne.n	8005402 <f_write+0xb2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800542a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800542e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005432:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8005436:	4640      	mov	r0, r8
 8005438:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800543a:	f7fd ff39 	bl	80032b0 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800543e:	2800      	cmp	r0, #0
 8005440:	d0d9      	beq.n	80053f6 <f_write+0xa6>
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8005442:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
			sect += csect;
 8005446:	eb07 0b00 	add.w	fp, r7, r0
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800544a:	d340      	bcc.n	80054ce <f_write+0x17e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800544c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 8005450:	eb07 2056 	add.w	r0, r7, r6, lsr #9
 8005454:	4288      	cmp	r0, r1
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005456:	ea4f 2356 	mov.w	r3, r6, lsr #9
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800545a:	465a      	mov	r2, fp
					cc = fs->csize - csect;
 800545c:	bf88      	it	hi
 800545e:	1bcb      	subhi	r3, r1, r7
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005460:	f898 0001 	ldrb.w	r0, [r8, #1]
 8005464:	4649      	mov	r1, r9
 8005466:	9301      	str	r3, [sp, #4]
 8005468:	f7fd fd21 	bl	8002eae <disk_write>
 800546c:	2800      	cmp	r0, #0
 800546e:	d1c8      	bne.n	8005402 <f_write+0xb2>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005470:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005472:	9b01      	ldr	r3, [sp, #4]
 8005474:	eba1 010b 	sub.w	r1, r1, fp
 8005478:	4299      	cmp	r1, r3
 800547a:	d20e      	bcs.n	800549a <f_write+0x14a>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800547c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005480:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8005484:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8005488:	f007 f9f9 	bl	800c87e <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800548c:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
 8005490:	9b01      	ldr	r3, [sp, #4]
 8005492:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005496:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800549a:	025f      	lsls	r7, r3, #9
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800549c:	f8da 3000 	ldr.w	r3, [sl]
 80054a0:	1bf6      	subs	r6, r6, r7
 80054a2:	443b      	add	r3, r7
 80054a4:	f8ca 3000 	str.w	r3, [sl]
 80054a8:	44b9      	add	r9, r7
 80054aa:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80054ae:	18bf      	adds	r7, r7, r2
 80054b0:	f143 0300 	adc.w	r3, r3, #0
 80054b4:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 80054b8:	42b9      	cmp	r1, r7
 80054ba:	eb72 0003 	sbcs.w	r0, r2, r3
 80054be:	bf3c      	itt	cc
 80054c0:	4639      	movcc	r1, r7
 80054c2:	461a      	movcc	r2, r3
 80054c4:	e9c4 730e 	strd	r7, r3, [r4, #56]	@ 0x38
 80054c8:	e9c4 1204 	strd	r1, r2, [r4, #16]
 80054cc:	e765      	b.n	800539a <f_write+0x4a>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80054ce:	6c61      	ldr	r1, [r4, #68]	@ 0x44
				fp->fptr < fp->obj.objsize &&
 80054d0:	e9d4 730e 	ldrd	r7, r3, [r4, #56]	@ 0x38
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80054d4:	4559      	cmp	r1, fp
 80054d6:	d00e      	beq.n	80054f6 <f_write+0x1a6>
 80054d8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 80054dc:	4287      	cmp	r7, r0
 80054de:	418b      	sbcs	r3, r1
 80054e0:	d209      	bcs.n	80054f6 <f_write+0x1a6>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 80054e2:	2301      	movs	r3, #1
 80054e4:	465a      	mov	r2, fp
 80054e6:	f898 0001 	ldrb.w	r0, [r8, #1]
 80054ea:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 80054ee:	f7fd fcc9 	bl	8002e84 <disk_read>
				fp->fptr < fp->obj.objsize &&
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d185      	bne.n	8005402 <f_write+0xb2>
			fp->sect = sect;
 80054f6:	f8c4 b044 	str.w	fp, [r4, #68]	@ 0x44
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 80054fa:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80054fc:	9b00      	ldr	r3, [sp, #0]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 80054fe:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8005502:	f5c0 7700 	rsb	r7, r0, #512	@ 0x200
 8005506:	42b7      	cmp	r7, r6
 8005508:	bf28      	it	cs
 800550a:	4637      	movcs	r7, r6
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800550c:	4418      	add	r0, r3
 800550e:	463a      	mov	r2, r7
 8005510:	4649      	mov	r1, r9
 8005512:	f007 f9b4 	bl	800c87e <memcpy>
		fp->flag |= FA_DIRTY;
 8005516:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800551a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800551e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8005522:	e7bb      	b.n	800549c <f_write+0x14c>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005524:	2507      	movs	r5, #7
 8005526:	e75e      	b.n	80053e6 <f_write+0x96>

08005528 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 8005528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800552a:	b0c3      	sub	sp, #268	@ 0x10c
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800552c:	a901      	add	r1, sp, #4
{
 800552e:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005530:	f7fd ff24 	bl	800337c <validate>
	if (res == FR_OK) {
 8005534:	4604      	mov	r4, r0
 8005536:	2800      	cmp	r0, #0
 8005538:	f040 8081 	bne.w	800563e <f_sync+0x116>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800553c:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 8005540:	f013 0440 	ands.w	r4, r3, #64	@ 0x40
 8005544:	d07b      	beq.n	800563e <f_sync+0x116>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005546:	061b      	lsls	r3, r3, #24
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005548:	9e01      	ldr	r6, [sp, #4]
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800554a:	d50f      	bpl.n	800556c <f_sync+0x44>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800554c:	2301      	movs	r3, #1
 800554e:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8005550:	7870      	ldrb	r0, [r6, #1]
 8005552:	f105 0154 	add.w	r1, r5, #84	@ 0x54
 8005556:	f7fd fcaa 	bl	8002eae <disk_write>
 800555a:	2800      	cmp	r0, #0
 800555c:	f040 8093 	bne.w	8005686 <f_sync+0x15e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005560:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 8005564:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005568:	f885 3030 	strb.w	r3, [r5, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800556c:	7833      	ldrb	r3, [r6, #0]
 800556e:	2b04      	cmp	r3, #4
 8005570:	d168      	bne.n	8005644 <f_sync+0x11c>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8005572:	4628      	mov	r0, r5
 8005574:	f7fe fa7a 	bl	8003a6c <fill_first_frag>
				if (res == FR_OK) {
 8005578:	4604      	mov	r4, r0
 800557a:	2800      	cmp	r0, #0
 800557c:	d15f      	bne.n	800563e <f_sync+0x116>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800557e:	f04f 32ff 	mov.w	r2, #4294967295
 8005582:	4628      	mov	r0, r5
 8005584:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8005586:	f7fe fa59 	bl	8003a3c <fill_last_frag>
				}
				if (res == FR_OK) {
 800558a:	4604      	mov	r4, r0
 800558c:	2800      	cmp	r0, #0
 800558e:	d156      	bne.n	800563e <f_sync+0x116>
					DIR dj;
					DEF_NAMBUF

					INIT_NAMBUF(fs);
 8005590:	ab02      	add	r3, sp, #8
 8005592:	60f3      	str	r3, [r6, #12]
 8005594:	ab22      	add	r3, sp, #136	@ 0x88
 8005596:	6133      	str	r3, [r6, #16]
	dp->obj.fs = obj->fs;
 8005598:	682b      	ldr	r3, [r5, #0]
	dp->blk_ofs = obj->c_ofs;
 800559a:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
	dp->obj.fs = obj->fs;
 800559c:	930c      	str	r3, [sp, #48]	@ 0x30
	dp->obj.sclust = obj->c_scl;
 800559e:	6a2b      	ldr	r3, [r5, #32]
	dp->obj.n_frag = 0;
 80055a0:	9013      	str	r0, [sp, #76]	@ 0x4c
	dp->obj.sclust = obj->c_scl;
 80055a2:	930e      	str	r3, [sp, #56]	@ 0x38
	dp->obj.stat = (BYTE)obj->c_size;
 80055a4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
	dp->blk_ofs = obj->c_ofs;
 80055a6:	911f      	str	r1, [sp, #124]	@ 0x7c
	dp->obj.stat = (BYTE)obj->c_size;
 80055a8:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 80055ac:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80055b0:	e9cd 3010 	strd	r3, r0, [sp, #64]	@ 0x40
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80055b4:	a80c      	add	r0, sp, #48	@ 0x30
 80055b6:	f7fe f97b 	bl	80038b0 <dir_sdi>
	if (res == FR_OK) {
 80055ba:	4604      	mov	r4, r0
 80055bc:	2800      	cmp	r0, #0
 80055be:	d13e      	bne.n	800563e <f_sync+0x116>
		res = load_xdir(dp);		/* Load the object's entry block */
 80055c0:	a80c      	add	r0, sp, #48	@ 0x30
 80055c2:	f7fe feff 	bl	80043c4 <load_xdir>
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
					if (res == FR_OK) {
 80055c6:	4604      	mov	r4, r0
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d138      	bne.n	800563e <f_sync+0x116>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 80055cc:	6932      	ldr	r2, [r6, #16]
 80055ce:	7913      	ldrb	r3, [r2, #4]
 80055d0:	f043 0320 	orr.w	r3, r3, #32
 80055d4:	7113      	strb	r3, [r2, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 80055d6:	79eb      	ldrb	r3, [r5, #7]
 80055d8:	6932      	ldr	r2, [r6, #16]
 80055da:	f043 0301 	orr.w	r3, r3, #1
 80055de:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
 80055e2:	6930      	ldr	r0, [r6, #16]
 80055e4:	68a9      	ldr	r1, [r5, #8]
 80055e6:	3034      	adds	r0, #52	@ 0x34
 80055e8:	f7fd fdb2 	bl	8003150 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
 80055ec:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80055f0:	6930      	ldr	r0, [r6, #16]
 80055f2:	3038      	adds	r0, #56	@ 0x38
 80055f4:	f7fd fdb4 	bl	8003160 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 80055f8:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80055fc:	6930      	ldr	r0, [r6, #16]
 80055fe:	3028      	adds	r0, #40	@ 0x28
 8005600:	f7fd fdae 	bl	8003160 <st_qword>
	*ptr++ = (BYTE)val; val >>= 8;
 8005604:	2261      	movs	r2, #97	@ 0x61
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8005606:	6933      	ldr	r3, [r6, #16]
						fs->dirbuf[XDIR_ModTime10] = 0;
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
						res = store_xdir(&dj);	/* Restore it to the directory */
 8005608:	a80c      	add	r0, sp, #48	@ 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800560a:	739a      	strb	r2, [r3, #14]
	*ptr++ = (BYTE)val;
 800560c:	225b      	movs	r2, #91	@ 0x5b
	*ptr++ = (BYTE)val; val >>= 8;
 800560e:	731c      	strb	r4, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8005610:	735c      	strb	r4, [r3, #13]
	*ptr++ = (BYTE)val;
 8005612:	73da      	strb	r2, [r3, #15]
						fs->dirbuf[XDIR_ModTime10] = 0;
 8005614:	6933      	ldr	r3, [r6, #16]
 8005616:	755c      	strb	r4, [r3, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8005618:	6933      	ldr	r3, [r6, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 800561a:	741c      	strb	r4, [r3, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 800561c:	745c      	strb	r4, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 800561e:	749c      	strb	r4, [r3, #18]
	*ptr++ = (BYTE)val;
 8005620:	74dc      	strb	r4, [r3, #19]
						res = store_xdir(&dj);	/* Restore it to the directory */
 8005622:	f7fe ff3f 	bl	80044a4 <store_xdir>
						if (res == FR_OK) {
 8005626:	4604      	mov	r4, r0
 8005628:	b948      	cbnz	r0, 800563e <f_sync+0x116>
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
					res = sync_fs(fs);					/* Restore it to the directory */
 800562a:	4630      	mov	r0, r6
 800562c:	f7fe fade 	bl	8003bec <sync_fs>
 8005630:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005632:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 8005636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800563a:	f885 3030 	strb.w	r3, [r5, #48]	@ 0x30
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800563e:	4620      	mov	r0, r4
 8005640:	b043      	add	sp, #268	@ 0x10c
 8005642:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = move_window(fs, fp->dir_sect);
 8005644:	4630      	mov	r0, r6
 8005646:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 8005648:	f7fd ffe5 	bl	8003616 <move_window>
				if (res == FR_OK) {
 800564c:	4604      	mov	r4, r0
 800564e:	2800      	cmp	r0, #0
 8005650:	d1f5      	bne.n	800563e <f_sync+0x116>
					dir = fp->dir_ptr;
 8005652:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8005654:	7afb      	ldrb	r3, [r7, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8005656:	4639      	mov	r1, r7
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8005658:	f043 0320 	orr.w	r3, r3, #32
 800565c:	72fb      	strb	r3, [r7, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800565e:	6828      	ldr	r0, [r5, #0]
 8005660:	68aa      	ldr	r2, [r5, #8]
 8005662:	f7fd ffcc 	bl	80035fe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005666:	6929      	ldr	r1, [r5, #16]
 8005668:	f107 001c 	add.w	r0, r7, #28
 800566c:	f7fd fd70 	bl	8003150 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 8005670:	2361      	movs	r3, #97	@ 0x61
 8005672:	763b      	strb	r3, [r7, #24]
	*ptr++ = (BYTE)val;
 8005674:	235b      	movs	r3, #91	@ 0x5b
 8005676:	767b      	strb	r3, [r7, #25]
					fs->wflag = 1;
 8005678:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800567a:	75bc      	strb	r4, [r7, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 800567c:	75fc      	strb	r4, [r7, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 800567e:	74bc      	strb	r4, [r7, #18]
	*ptr++ = (BYTE)val;
 8005680:	74fc      	strb	r4, [r7, #19]
					fs->wflag = 1;
 8005682:	7133      	strb	r3, [r6, #4]
 8005684:	e7d1      	b.n	800562a <f_sync+0x102>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005686:	2401      	movs	r4, #1
 8005688:	e7d9      	b.n	800563e <f_sync+0x116>

0800568a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 800568a:	b513      	push	{r0, r1, r4, lr}
 800568c:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800568e:	f7ff ff4b 	bl	8005528 <f_sync>
	if (res == FR_OK)
 8005692:	b948      	cbnz	r0, 80056a8 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005694:	4620      	mov	r0, r4
 8005696:	a901      	add	r1, sp, #4
 8005698:	f7fd fe70 	bl	800337c <validate>
		if (res == FR_OK) {
 800569c:	b920      	cbnz	r0, 80056a8 <f_close+0x1e>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
 800569e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80056a0:	f7fd fdda 	bl	8003258 <dec_share>
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
 80056a4:	b900      	cbnz	r0, 80056a8 <f_close+0x1e>
 80056a6:	6020      	str	r0, [r4, #0]
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80056a8:	b002      	add	sp, #8
 80056aa:	bd10      	pop	{r4, pc}

080056ac <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	b0ae      	sub	sp, #184	@ 0xb8
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80056b0:	4604      	mov	r4, r0
{
 80056b2:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 80056b4:	2800      	cmp	r0, #0
 80056b6:	d04e      	beq.n	8005756 <f_opendir+0xaa>

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
 80056b8:	2200      	movs	r2, #0
 80056ba:	a903      	add	r1, sp, #12
 80056bc:	a801      	add	r0, sp, #4
 80056be:	f7fe fb0b 	bl	8003cd8 <mount_volume>
	if (res == FR_OK) {
 80056c2:	4605      	mov	r5, r0
 80056c4:	b9a0      	cbnz	r0, 80056f0 <f_opendir+0x44>
		dp->obj.fs = fs;
 80056c6:	9e03      	ldr	r6, [sp, #12]
		INIT_NAMBUF(fs);
 80056c8:	ab04      	add	r3, sp, #16
		dp->obj.fs = fs;
 80056ca:	6026      	str	r6, [r4, #0]
		INIT_NAMBUF(fs);
 80056cc:	60f3      	str	r3, [r6, #12]
 80056ce:	ab0e      	add	r3, sp, #56	@ 0x38
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80056d0:	4620      	mov	r0, r4
 80056d2:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 80056d4:	6133      	str	r3, [r6, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80056d6:	f7ff fa61 	bl	8004b9c <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 80056da:	4605      	mov	r5, r0
 80056dc:	2800      	cmp	r0, #0
 80056de:	d135      	bne.n	800574c <f_opendir+0xa0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80056e0:	f994 304b 	ldrsb.w	r3, [r4, #75]	@ 0x4b
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	db17      	blt.n	8005718 <f_opendir+0x6c>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 80056e8:	79a3      	ldrb	r3, [r4, #6]
 80056ea:	06db      	lsls	r3, r3, #27
 80056ec:	d403      	bmi.n	80056f6 <f_opendir+0x4a>
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80056ee:	2505      	movs	r5, #5
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function failed */
 80056f0:	2300      	movs	r3, #0
 80056f2:	6023      	str	r3, [r4, #0]
 80056f4:	e020      	b.n	8005738 <f_opendir+0x8c>
					if (fs->fs_type == FS_EXFAT) {
 80056f6:	7830      	ldrb	r0, [r6, #0]
 80056f8:	2804      	cmp	r0, #4
 80056fa:	d120      	bne.n	800573e <f_opendir+0x92>
						dp->obj.c_scl = dp->obj.sclust;	/* Get containing directory information */
 80056fc:	68a3      	ldr	r3, [r4, #8]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 80056fe:	79e2      	ldrb	r2, [r4, #7]
						dp->obj.c_scl = dp->obj.sclust;	/* Get containing directory information */
 8005700:	6223      	str	r3, [r4, #32]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8005702:	6923      	ldr	r3, [r4, #16]
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 8005704:	4621      	mov	r1, r4
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8005706:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800570a:	4313      	orrs	r3, r2
 800570c:	6263      	str	r3, [r4, #36]	@ 0x24
						dp->obj.c_ofs = dp->blk_ofs;
 800570e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 8005710:	6930      	ldr	r0, [r6, #16]
						dp->obj.c_ofs = dp->blk_ofs;
 8005712:	62a3      	str	r3, [r4, #40]	@ 0x28
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 8005714:	f7ff fa24 	bl	8004b60 <init_alloc_info.isra.0>
				dp->obj.id = fs->id;
 8005718:	88f3      	ldrh	r3, [r6, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800571a:	2100      	movs	r1, #0
 800571c:	4620      	mov	r0, r4
				dp->obj.id = fs->id;
 800571e:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8005720:	f7fe f8c6 	bl	80038b0 <dir_sdi>
				if (res == FR_OK) {
 8005724:	4605      	mov	r5, r0
 8005726:	b988      	cbnz	r0, 800574c <f_opendir+0xa0>
					if (dp->obj.sclust != 0) {
 8005728:	68a3      	ldr	r3, [r4, #8]
 800572a:	b16b      	cbz	r3, 8005748 <f_opendir+0x9c>
						dp->obj.lockid = inc_share(dp, 0);	/* Lock the sub directory */
 800572c:	4601      	mov	r1, r0
 800572e:	4620      	mov	r0, r4
 8005730:	f7fd fd54 	bl	80031dc <inc_share>
 8005734:	62e0      	str	r0, [r4, #44]	@ 0x2c
						if (!dp->obj.lockid) res = FR_TOO_MANY_OPEN_FILES;
 8005736:	b160      	cbz	r0, 8005752 <f_opendir+0xa6>

	LEAVE_FF(fs, res);
}
 8005738:	4628      	mov	r0, r5
 800573a:	b02e      	add	sp, #184	@ 0xb8
 800573c:	bd70      	pop	{r4, r5, r6, pc}
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800573e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8005740:	f7ff fa23 	bl	8004b8a <ld_clust.isra.0>
 8005744:	60a0      	str	r0, [r4, #8]
 8005746:	e7e7      	b.n	8005718 <f_opendir+0x6c>
						dp->obj.lockid = 0;	/* Root directory need not to be locked */
 8005748:	62e0      	str	r0, [r4, #44]	@ 0x2c
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function failed */
 800574a:	e7f5      	b.n	8005738 <f_opendir+0x8c>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800574c:	2d04      	cmp	r5, #4
 800574e:	d0ce      	beq.n	80056ee <f_opendir+0x42>
 8005750:	e7ce      	b.n	80056f0 <f_opendir+0x44>
						if (!dp->obj.lockid) res = FR_TOO_MANY_OPEN_FILES;
 8005752:	2512      	movs	r5, #18
 8005754:	e7cc      	b.n	80056f0 <f_opendir+0x44>
	if (!dp) return FR_INVALID_OBJECT;
 8005756:	2509      	movs	r5, #9
 8005758:	e7ee      	b.n	8005738 <f_opendir+0x8c>

0800575a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800575a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 800575c:	a901      	add	r1, sp, #4
{
 800575e:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8005760:	f7fd fe0c 	bl	800337c <validate>
	if (res == FR_OK) {
 8005764:	4604      	mov	r4, r0
 8005766:	b918      	cbnz	r0, 8005770 <f_closedir+0x16>
#if FF_FS_LOCK
		if (dp->obj.lockid) res = dec_share(dp->obj.lockid);	/* Decrement sub-directory open counter */
 8005768:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800576a:	b920      	cbnz	r0, 8005776 <f_closedir+0x1c>
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
 800576c:	2300      	movs	r3, #0
 800576e:	602b      	str	r3, [r5, #0]
#if FF_FS_REENTRANT
		unlock_volume(fs, FR_OK);	/* Unlock volume */
#endif
	}
	return res;
}
 8005770:	4620      	mov	r0, r4
 8005772:	b003      	add	sp, #12
 8005774:	bd30      	pop	{r4, r5, pc}
		if (dp->obj.lockid) res = dec_share(dp->obj.lockid);	/* Decrement sub-directory open counter */
 8005776:	f7fd fd6f 	bl	8003258 <dec_share>
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
 800577a:	2800      	cmp	r0, #0
 800577c:	d0f6      	beq.n	800576c <f_closedir+0x12>
 800577e:	4604      	mov	r4, r0
 8005780:	e7f6      	b.n	8005770 <f_closedir+0x16>

08005782 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8005782:	b570      	push	{r4, r5, r6, lr}
 8005784:	b0ac      	sub	sp, #176	@ 0xb0
 8005786:	460d      	mov	r5, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8005788:	a901      	add	r1, sp, #4
{
 800578a:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800578c:	f7fd fdf6 	bl	800337c <validate>
	if (res == FR_OK) {
 8005790:	b9e8      	cbnz	r0, 80057ce <f_readdir+0x4c>
		if (!fno) {
 8005792:	b935      	cbnz	r5, 80057a2 <f_readdir+0x20>
			res = dir_sdi(dp, 0);		/* Rewind the directory object */
 8005794:	4629      	mov	r1, r5
 8005796:	4620      	mov	r0, r4
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 8005798:	b02c      	add	sp, #176	@ 0xb0
 800579a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			res = dir_sdi(dp, 0);		/* Rewind the directory object */
 800579e:	f7fe b887 	b.w	80038b0 <dir_sdi>
			INIT_NAMBUF(fs);
 80057a2:	9b01      	ldr	r3, [sp, #4]
 80057a4:	aa02      	add	r2, sp, #8
 80057a6:	60da      	str	r2, [r3, #12]
 80057a8:	aa0c      	add	r2, sp, #48	@ 0x30
			res = DIR_READ_FILE(dp);		/* Read an item */
 80057aa:	4620      	mov	r0, r4
			INIT_NAMBUF(fs);
 80057ac:	611a      	str	r2, [r3, #16]
			res = DIR_READ_FILE(dp);		/* Read an item */
 80057ae:	f7fe fea9 	bl	8004504 <dir_read.constprop.0>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80057b2:	f010 06fb 	ands.w	r6, r0, #251	@ 0xfb
 80057b6:	d10a      	bne.n	80057ce <f_readdir+0x4c>
				get_fileinfo(dp, fno);		/* Get the object information */
 80057b8:	4629      	mov	r1, r5
 80057ba:	4620      	mov	r0, r4
 80057bc:	f7fd fe34 	bl	8003428 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80057c0:	4631      	mov	r1, r6
 80057c2:	4620      	mov	r0, r4
 80057c4:	f7fe fd4f 	bl	8004266 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80057c8:	2804      	cmp	r0, #4
 80057ca:	bf08      	it	eq
 80057cc:	2000      	moveq	r0, #0
}
 80057ce:	b02c      	add	sp, #176	@ 0xb0
 80057d0:	bd70      	pop	{r4, r5, r6, pc}

080057d2 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80057d2:	b530      	push	{r4, r5, lr}
 80057d4:	b0c3      	sub	sp, #268	@ 0x10c
 80057d6:	9001      	str	r0, [sp, #4]
 80057d8:	460d      	mov	r5, r1
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &dj.obj.fs, 0);
 80057da:	2200      	movs	r2, #0
 80057dc:	a90c      	add	r1, sp, #48	@ 0x30
 80057de:	a801      	add	r0, sp, #4
 80057e0:	f7fe fa7a 	bl	8003cd8 <mount_volume>
	if (res == FR_OK) {
 80057e4:	4604      	mov	r4, r0
 80057e6:	b998      	cbnz	r0, 8005810 <f_stat+0x3e>
		INIT_NAMBUF(dj.obj.fs);
 80057e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80057ea:	aa02      	add	r2, sp, #8
 80057ec:	60da      	str	r2, [r3, #12]
 80057ee:	aa22      	add	r2, sp, #136	@ 0x88
		res = follow_path(&dj, path);	/* Follow the file path */
 80057f0:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(dj.obj.fs);
 80057f2:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80057f4:	a80c      	add	r0, sp, #48	@ 0x30
 80057f6:	f7ff f9d1 	bl	8004b9c <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 80057fa:	4604      	mov	r4, r0
 80057fc:	b940      	cbnz	r0, 8005810 <f_stat+0x3e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80057fe:	f99d 307b 	ldrsb.w	r3, [sp, #123]	@ 0x7b
 8005802:	2b00      	cmp	r3, #0
 8005804:	db07      	blt.n	8005816 <f_stat+0x44>
				res = FR_INVALID_NAME;
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8005806:	b11d      	cbz	r5, 8005810 <f_stat+0x3e>
 8005808:	4629      	mov	r1, r5
 800580a:	a80c      	add	r0, sp, #48	@ 0x30
 800580c:	f7fd fe0c 	bl	8003428 <get_fileinfo>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 8005810:	4620      	mov	r0, r4
 8005812:	b043      	add	sp, #268	@ 0x10c
 8005814:	bd30      	pop	{r4, r5, pc}
				res = FR_INVALID_NAME;
 8005816:	2406      	movs	r4, #6
 8005818:	e7fa      	b.n	8005810 <f_stat+0x3e>

0800581a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800581a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800581c:	b0e7      	sub	sp, #412	@ 0x19c
 800581e:	9001      	str	r0, [sp, #4]
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
 8005820:	2202      	movs	r2, #2
 8005822:	a903      	add	r1, sp, #12
 8005824:	a801      	add	r0, sp, #4
 8005826:	f7fe fa57 	bl	8003cd8 <mount_volume>
	if (res == FR_OK) {
 800582a:	b9c0      	cbnz	r0, 800585e <f_unlink+0x44>
		dj.obj.fs = fs;
 800582c:	9c03      	ldr	r4, [sp, #12]
		INIT_NAMBUF(fs);
 800582e:	ab04      	add	r3, sp, #16
 8005830:	60e3      	str	r3, [r4, #12]
 8005832:	ab46      	add	r3, sp, #280	@ 0x118
		res = follow_path(&dj, path);		/* Follow the file path */
 8005834:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 8005836:	6123      	str	r3, [r4, #16]
		res = follow_path(&dj, path);		/* Follow the file path */
 8005838:	a81a      	add	r0, sp, #104	@ 0x68
		dj.obj.fs = fs;
 800583a:	941a      	str	r4, [sp, #104]	@ 0x68
		res = follow_path(&dj, path);		/* Follow the file path */
 800583c:	f7ff f9ae 	bl	8004b9c <follow_path>
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if FF_FS_LOCK
		if (res == FR_OK) res = chk_share(&dj, 2);	/* Check if it is an open object */
 8005840:	b968      	cbnz	r0, 800585e <f_unlink+0x44>
 8005842:	2102      	movs	r1, #2
 8005844:	a81a      	add	r0, sp, #104	@ 0x68
 8005846:	f7fd fc9b 	bl	8003180 <chk_share>
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800584a:	b940      	cbnz	r0, 800585e <f_unlink+0x44>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800584c:	f99d 30b3 	ldrsb.w	r3, [sp, #179]	@ 0xb3
 8005850:	2b00      	cmp	r3, #0
 8005852:	db43      	blt.n	80058dc <f_unlink+0xc2>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
 8005854:	f89d 706e 	ldrb.w	r7, [sp, #110]	@ 0x6e
 8005858:	07fa      	lsls	r2, r7, #31
 800585a:	d502      	bpl.n	8005862 <f_unlink+0x48>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800585c:	2007      	movs	r0, #7
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 800585e:	b067      	add	sp, #412	@ 0x19c
 8005860:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (fs->fs_type == FS_EXFAT) {
 8005862:	7826      	ldrb	r6, [r4, #0]
				obj.fs = fs;
 8005864:	940e      	str	r4, [sp, #56]	@ 0x38
				if (fs->fs_type == FS_EXFAT) {
 8005866:	2e04      	cmp	r6, #4
 8005868:	d110      	bne.n	800588c <f_unlink+0x72>
					init_alloc_info(fs, &obj);
 800586a:	6920      	ldr	r0, [r4, #16]
 800586c:	a90e      	add	r1, sp, #56	@ 0x38
 800586e:	f7ff f977 	bl	8004b60 <init_alloc_info.isra.0>
					dclst = obj.sclust;
 8005872:	9d10      	ldr	r5, [sp, #64]	@ 0x40
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8005874:	06fb      	lsls	r3, r7, #27
 8005876:	d40f      	bmi.n	8005898 <f_unlink+0x7e>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8005878:	a81a      	add	r0, sp, #104	@ 0x68
 800587a:	f7fe fd7a 	bl	8004372 <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 800587e:	2800      	cmp	r0, #0
 8005880:	d1ed      	bne.n	800585e <f_unlink+0x44>
 8005882:	bb1d      	cbnz	r5, 80058cc <f_unlink+0xb2>
				if (res == FR_OK) res = sync_fs(fs);
 8005884:	4620      	mov	r0, r4
 8005886:	f7fe f9b1 	bl	8003bec <sync_fs>
 800588a:	e7e8      	b.n	800585e <f_unlink+0x44>
					dclst = ld_clust(fs, dj.dir);
 800588c:	4630      	mov	r0, r6
 800588e:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8005890:	f7ff f97b 	bl	8004b8a <ld_clust.isra.0>
 8005894:	4605      	mov	r5, r0
 8005896:	e7ed      	b.n	8005874 <f_unlink+0x5a>
						if (fs->fs_type == FS_EXFAT) {
 8005898:	2e04      	cmp	r6, #4
						sdj.obj.fs = fs;			/* Open the sub-directory */
 800589a:	9430      	str	r4, [sp, #192]	@ 0xc0
						sdj.obj.sclust = dclst;
 800589c:	9532      	str	r5, [sp, #200]	@ 0xc8
						if (fs->fs_type == FS_EXFAT) {
 800589e:	d107      	bne.n	80058b0 <f_unlink+0x96>
							sdj.obj.objsize = obj.objsize;
 80058a0:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	@ 0x48
 80058a4:	e9cd 2334 	strd	r2, r3, [sp, #208]	@ 0xd0
							sdj.obj.stat = obj.stat;
 80058a8:	f89d 303f 	ldrb.w	r3, [sp, #63]	@ 0x3f
 80058ac:	f88d 30c7 	strb.w	r3, [sp, #199]	@ 0xc7
						res = dir_sdi(&sdj, 0);
 80058b0:	2100      	movs	r1, #0
 80058b2:	a830      	add	r0, sp, #192	@ 0xc0
 80058b4:	f7fd fffc 	bl	80038b0 <dir_sdi>
						if (res == FR_OK) {
 80058b8:	2800      	cmp	r0, #0
 80058ba:	d1d0      	bne.n	800585e <f_unlink+0x44>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
 80058bc:	a830      	add	r0, sp, #192	@ 0xc0
 80058be:	f7fe fe21 	bl	8004504 <dir_read.constprop.0>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80058c2:	2800      	cmp	r0, #0
 80058c4:	d0ca      	beq.n	800585c <f_unlink+0x42>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80058c6:	2804      	cmp	r0, #4
 80058c8:	d1c9      	bne.n	800585e <f_unlink+0x44>
 80058ca:	e7d5      	b.n	8005878 <f_unlink+0x5e>
					res = remove_chain(&obj, dclst, 0);
 80058cc:	4602      	mov	r2, r0
 80058ce:	4629      	mov	r1, r5
 80058d0:	a80e      	add	r0, sp, #56	@ 0x38
 80058d2:	f7fe f8e3 	bl	8003a9c <remove_chain>
				if (res == FR_OK) res = sync_fs(fs);
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d1c1      	bne.n	800585e <f_unlink+0x44>
 80058da:	e7d3      	b.n	8005884 <f_unlink+0x6a>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80058dc:	2006      	movs	r0, #6
 80058de:	e7be      	b.n	800585e <f_unlink+0x44>

080058e0 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 80058e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e4:	b099      	sub	sp, #100	@ 0x64
 80058e6:	9011      	str	r0, [sp, #68]	@ 0x44
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80058e8:	a811      	add	r0, sp, #68	@ 0x44
{
 80058ea:	460e      	mov	r6, r1
 80058ec:	4614      	mov	r4, r2
 80058ee:	9306      	str	r3, [sp, #24]
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80058f0:	f7fd fd27 	bl	8003342 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80058f4:	2800      	cmp	r0, #0
 80058f6:	f2c0 84d2 	blt.w	800629e <f_mkfs+0x9be>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 80058fa:	4baa      	ldr	r3, [pc, #680]	@ (8005ba4 <f_mkfs+0x2c4>)
 80058fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005900:	b10b      	cbz	r3, 8005906 <f_mkfs+0x26>
 8005902:	2200      	movs	r2, #0
 8005904:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 8005906:	b2c3      	uxtb	r3, r0
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 8005908:	4618      	mov	r0, r3
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 800590a:	9300      	str	r3, [sp, #0]
	ds = disk_initialize(pdrv);
 800590c:	f7fd fab0 	bl	8002e70 <disk_initialize>
	if (ds & STA_NOINIT) return FR_NOT_READY;
 8005910:	07c3      	lsls	r3, r0, #31
 8005912:	f100 84c6 	bmi.w	80062a2 <f_mkfs+0x9c2>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 8005916:	0747      	lsls	r7, r0, #29
 8005918:	f100 84c5 	bmi.w	80062a6 <f_mkfs+0x9c6>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800591c:	4ba2      	ldr	r3, [pc, #648]	@ (8005ba8 <f_mkfs+0x2c8>)
 800591e:	2e00      	cmp	r6, #0
 8005920:	bf08      	it	eq
 8005922:	461e      	moveq	r6, r3
	sz_blk = opt->align;
 8005924:	6873      	ldr	r3, [r6, #4]
 8005926:	9312      	str	r3, [sp, #72]	@ 0x48
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the parameter or lower layer */
 8005928:	b923      	cbnz	r3, 8005934 <f_mkfs+0x54>
 800592a:	2103      	movs	r1, #3
 800592c:	9800      	ldr	r0, [sp, #0]
 800592e:	aa12      	add	r2, sp, #72	@ 0x48
 8005930:	f7fd fad2 	bl	8002ed8 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 8005934:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005936:	1e53      	subs	r3, r2, #1
 8005938:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800593c:	d201      	bcs.n	8005942 <f_mkfs+0x62>
 800593e:	421a      	tst	r2, r3
 8005940:	d001      	beq.n	8005946 <f_mkfs+0x66>
 8005942:	2301      	movs	r3, #1
 8005944:	9312      	str	r3, [sp, #72]	@ 0x48
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 8005946:	7873      	ldrb	r3, [r6, #1]
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 8005948:	f8d6 9008 	ldr.w	r9, [r6, #8]
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800594c:	9302      	str	r3, [sp, #8]
 800594e:	3b01      	subs	r3, #1
 8005950:	2b01      	cmp	r3, #1
 8005952:	9b02      	ldr	r3, [sp, #8]
 8005954:	bf88      	it	hi
 8005956:	2301      	movhi	r3, #1
 8005958:	9302      	str	r3, [sp, #8]
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800595a:	f109 33ff 	add.w	r3, r9, #4294967295
 800595e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005962:	d22d      	bcs.n	80059c0 <f_mkfs+0xe0>
 8005964:	f019 0f0f 	tst.w	r9, #15
 8005968:	bf18      	it	ne
 800596a:	f44f 7900 	movne.w	r9, #512	@ 0x200
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800596e:	68f5      	ldr	r5, [r6, #12]
 8005970:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
 8005974:	d827      	bhi.n	80059c6 <f_mkfs+0xe6>
 8005976:	1e6b      	subs	r3, r5, #1
 8005978:	422b      	tst	r3, r5
 800597a:	bf18      	it	ne
 800597c:	2500      	movne	r5, #0
	sz_au /= ss;	/* Byte --> Sector */

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800597e:	9b06      	ldr	r3, [sp, #24]
 8005980:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005984:	f0c0 8491 	bcc.w	80062aa <f_mkfs+0x9ca>
	buf = (BYTE*)work;		/* Working buffer */
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 8005988:	2c00      	cmp	r4, #0
 800598a:	f000 848e 	beq.w	80062aa <f_mkfs+0x9ca>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 800598e:	2200      	movs	r2, #0
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 8005990:	7833      	ldrb	r3, [r6, #0]
	b_vol = sz_vol = 0;
 8005992:	9213      	str	r2, [sp, #76]	@ 0x4c
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005994:	2101      	movs	r1, #1
 8005996:	9800      	ldr	r0, [sp, #0]
 8005998:	aa13      	add	r2, sp, #76	@ 0x4c
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 800599a:	9301      	str	r3, [sp, #4]
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800599c:	f7fd fa9c 	bl	8002ed8 <disk_ioctl>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	f040 80fb 	bne.w	8005b9c <f_mkfs+0x2bc>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 80059a6:	9b01      	ldr	r3, [sp, #4]
 80059a8:	f013 0208 	ands.w	r2, r3, #8
 80059ac:	920a      	str	r2, [sp, #40]	@ 0x28
 80059ae:	d10c      	bne.n	80059ca <f_mkfs+0xea>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 80059b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80059b2:	2a3f      	cmp	r2, #63	@ 0x3f
 80059b4:	d94b      	bls.n	8005a4e <f_mkfs+0x16e>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 80059b6:	3a3f      	subs	r2, #63	@ 0x3f
 80059b8:	9213      	str	r2, [sp, #76]	@ 0x4c
 80059ba:	223f      	movs	r2, #63	@ 0x3f
	b_vol = sz_vol = 0;
 80059bc:	9201      	str	r2, [sp, #4]
 80059be:	e005      	b.n	80059cc <f_mkfs+0xec>
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 80059c0:	f44f 7900 	mov.w	r9, #512	@ 0x200
 80059c4:	e7d3      	b.n	800596e <f_mkfs+0x8e>
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 80059c6:	2500      	movs	r5, #0
 80059c8:	e7d9      	b.n	800597e <f_mkfs+0x9e>
	b_vol = sz_vol = 0;
 80059ca:	9001      	str	r0, [sp, #4]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128 sectors */
 80059cc:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80059ce:	2f7f      	cmp	r7, #127	@ 0x7f
 80059d0:	f240 8369 	bls.w	80060a6 <f_mkfs+0x7c6>

	/* Now start to create an FAT volume at b_vol and sz_vol */

	do {	/* Pre-determine the FAT type */
		if (FF_FS_EXFAT && (fsopt & FM_EXFAT)) {	/* exFAT possible? */
 80059d4:	075e      	lsls	r6, r3, #29
	sz_au /= ss;	/* Byte --> Sector */
 80059d6:	ea4f 2b55 	mov.w	fp, r5, lsr #9
		if (FF_FS_EXFAT && (fsopt & FM_EXFAT)) {	/* exFAT possible? */
 80059da:	d53a      	bpl.n	8005a52 <f_mkfs+0x172>
			if ((fsopt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || sz_au > 128) {	/* exFAT only, vol >= 64M sectors or sz_au > 128 sectors ? */
 80059dc:	f003 0207 	and.w	r2, r3, #7
 80059e0:	2a04      	cmp	r2, #4
 80059e2:	d00c      	beq.n	80059fe <f_mkfs+0x11e>
 80059e4:	f1b7 6f80 	cmp.w	r7, #67108864	@ 0x4000000
 80059e8:	d23e      	bcs.n	8005a68 <f_mkfs+0x188>
 80059ea:	f5b5 3f81 	cmp.w	r5, #66048	@ 0x10200
 80059ee:	d23b      	bcs.n	8005a68 <f_mkfs+0x188>
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 80059f0:	0798      	lsls	r0, r3, #30
 80059f2:	f003 0201 	and.w	r2, r3, #1
 80059f6:	d532      	bpl.n	8005a5e <f_mkfs+0x17e>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 80059f8:	f1c2 0203 	rsb	r2, r2, #3
 80059fc:	b2d2      	uxtb	r2, r2
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 80059fe:	9906      	ldr	r1, [sp, #24]
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */

#if FF_FS_EXFAT
	if (fsty == FS_EXFAT) {	/* Create an exFAT volume */
 8005a00:	2a04      	cmp	r2, #4
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 8005a02:	ea4f 2151 	mov.w	r1, r1, lsr #9
 8005a06:	9104      	str	r1, [sp, #16]
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 8005a08:	f107 41b6 	add.w	r1, r7, #1526726656	@ 0x5b000000
 8005a0c:	f501 01c2 	add.w	r1, r1, #6356992	@ 0x610000
 8005a10:	910b      	str	r1, [sp, #44]	@ 0x2c
	if (fsty == FS_EXFAT) {	/* Create an exFAT volume */
 8005a12:	d02b      	beq.n	8005a6c <f_mkfs+0x18c>
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8005a14:	9812      	ldr	r0, [sp, #72]	@ 0x48
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 8005a16:	f3c9 1116 	ubfx	r1, r9, #4, #23
 8005a1a:	910c      	str	r1, [sp, #48]	@ 0x30
 8005a1c:	1e41      	subs	r1, r0, #1
 8005a1e:	9109      	str	r1, [sp, #36]	@ 0x24
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 8005a20:	2a03      	cmp	r2, #3
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8005a22:	f1c0 0100 	rsb	r1, r0, #0
 8005a26:	9108      	str	r1, [sp, #32]
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 8005a28:	f040 8375 	bne.w	8006116 <f_mkfs+0x836>
				if (pau == 0) {	/* AU auto-selection */
 8005a2c:	f1bb 0f00 	cmp.w	fp, #0
 8005a30:	f040 833d 	bne.w	80060ae <f_mkfs+0x7ce>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8005a34:	2601      	movs	r6, #1
 8005a36:	495d      	ldr	r1, [pc, #372]	@ (8005bac <f_mkfs+0x2cc>)
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8005a38:	0c7d      	lsrs	r5, r7, #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8005a3a:	f831 2b02 	ldrh.w	r2, [r1], #2
 8005a3e:	2a00      	cmp	r2, #0
 8005a40:	f000 82e8 	beq.w	8006014 <f_mkfs+0x734>
 8005a44:	42aa      	cmp	r2, r5
 8005a46:	f200 82e5 	bhi.w	8006014 <f_mkfs+0x734>
 8005a4a:	0076      	lsls	r6, r6, #1
 8005a4c:	e7f5      	b.n	8005a3a <f_mkfs+0x15a>
	b_vol = sz_vol = 0;
 8005a4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a50:	e7b4      	b.n	80059bc <f_mkfs+0xdc>
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 8005a52:	f5b5 3f81 	cmp.w	r5, #66048	@ 0x10200
 8005a56:	bf28      	it	cs
 8005a58:	f04f 0b80 	movcs.w	fp, #128	@ 0x80
 8005a5c:	e7c8      	b.n	80059f0 <f_mkfs+0x110>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 8005a5e:	2a00      	cmp	r2, #0
 8005a60:	f000 8425 	beq.w	80062ae <f_mkfs+0x9ce>
		fsty = FS_FAT16;
 8005a64:	2202      	movs	r2, #2
 8005a66:	e7ca      	b.n	80059fe <f_mkfs+0x11e>
				fsty = FS_EXFAT; break;
 8005a68:	2204      	movs	r2, #4
 8005a6a:	e7c8      	b.n	80059fe <f_mkfs+0x11e>
		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume for exFAT? */
 8005a6c:	f5b7 5f80 	cmp.w	r7, #4096	@ 0x1000
 8005a70:	f0c0 8319 	bcc.w	80060a6 <f_mkfs+0x7c6>
		if (sz_au == 0) {	/* AU auto-selection */
 8005a74:	f1bb 0f00 	cmp.w	fp, #0
 8005a78:	d109      	bne.n	8005a8e <f_mkfs+0x1ae>
			if (sz_vol >= 0x80000) sz_au = 64;		/* >= 512Ks */
 8005a7a:	f5b7 2f00 	cmp.w	r7, #524288	@ 0x80000
 8005a7e:	d353      	bcc.n	8005b28 <f_mkfs+0x248>
			if (sz_vol >= 0x4000000) sz_au = 256;	/* >= 64Ms */
 8005a80:	f1b7 6f80 	cmp.w	r7, #67108864	@ 0x4000000
 8005a84:	bf34      	ite	cc
 8005a86:	f04f 0b40 	movcc.w	fp, #64	@ 0x40
 8005a8a:	f44f 7b80 	movcs.w	fp, #256	@ 0x100
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
 8005a8e:	9b01      	ldr	r3, [sp, #4]
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
 8005a90:	9912      	ldr	r1, [sp, #72]	@ 0x48
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
 8005a92:	3320      	adds	r3, #32
 8005a94:	9305      	str	r3, [sp, #20]
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
 8005a96:	fbb7 f3fb 	udiv	r3, r7, fp
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	f203 2307 	addw	r3, r3, #519	@ 0x207
 8005aa0:	0a5a      	lsrs	r2, r3, #9
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
 8005aa2:	9805      	ldr	r0, [sp, #20]
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
 8005aa4:	920e      	str	r2, [sp, #56]	@ 0x38
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
 8005aa6:	1e4a      	subs	r2, r1, #1
 8005aa8:	4402      	add	r2, r0
 8005aaa:	eb02 2353 	add.w	r3, r2, r3, lsr #9
 8005aae:	4249      	negs	r1, r1
		if (b_data - b_vol >= sz_vol / 2) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 8005ab0:	9a01      	ldr	r2, [sp, #4]
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
 8005ab2:	400b      	ands	r3, r1
 8005ab4:	9302      	str	r3, [sp, #8]
		if (b_data - b_vol >= sz_vol / 2) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 8005ab6:	1a9b      	subs	r3, r3, r2
 8005ab8:	ebb3 0f57 	cmp.w	r3, r7, lsr #1
 8005abc:	930d      	str	r3, [sp, #52]	@ 0x34
 8005abe:	f080 82f2 	bcs.w	80060a6 <f_mkfs+0x7c6>
		n_clst = (DWORD)((sz_vol - (b_data - b_vol)) / sz_au);	/* Number of clusters */
 8005ac2:	9b02      	ldr	r3, [sp, #8]
 8005ac4:	4417      	add	r7, r2
 8005ac6:	1aff      	subs	r7, r7, r3
 8005ac8:	fbb7 f3fb 	udiv	r3, r7, fp
		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORTED);			/* Too few clusters? */
 8005acc:	f1a3 0210 	sub.w	r2, r3, #16
		n_clst = (DWORD)((sz_vol - (b_data - b_vol)) / sz_au);	/* Number of clusters */
 8005ad0:	930c      	str	r3, [sp, #48]	@ 0x30
		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORTED);			/* Too few clusters? */
 8005ad2:	4b37      	ldr	r3, [pc, #220]	@ (8005bb0 <f_mkfs+0x2d0>)
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	f200 82e6 	bhi.w	80060a6 <f_mkfs+0x7c6>
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
 8005ada:	2600      	movs	r6, #0
		szb_bit = (n_clst + 7) / 8;								/* Size of allocation bitmap */
 8005adc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
 8005ade:	ea4f 284b 	mov.w	r8, fp, lsl #9
		szb_bit = (n_clst + 7) / 8;								/* Size of allocation bitmap */
 8005ae2:	3307      	adds	r3, #7
 8005ae4:	08da      	lsrs	r2, r3, #3
 8005ae6:	920f      	str	r2, [sp, #60]	@ 0x3c
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
 8005ae8:	f108 32ff 	add.w	r2, r8, #4294967295
 8005aec:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
 8005af0:	fbb3 f3f8 	udiv	r3, r3, r8
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
 8005af4:	4637      	mov	r7, r6
 8005af6:	4635      	mov	r5, r6
 8005af8:	46b1      	mov	r9, r6
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
 8005afa:	9303      	str	r3, [sp, #12]
 8005afc:	9210      	str	r2, [sp, #64]	@ 0x40
 8005afe:	9315      	str	r3, [sp, #84]	@ 0x54
		sect = b_data + sz_au * clen[0];	/* Table start sector */
 8005b00:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005b04:	fb0b 3302 	mla	r3, fp, r2, r3
 8005b08:	9308      	str	r3, [sp, #32]
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
 8005b0a:	9b06      	ldr	r3, [sp, #24]
		sum = 0;							/* Table checksum to be stored in the 82 entry */
 8005b0c:	9609      	str	r6, [sp, #36]	@ 0x24
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
 8005b0e:	f423 7aff 	bic.w	sl, r3, #510	@ 0x1fe
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
 8005b12:	9607      	str	r6, [sp, #28]
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
 8005b14:	f02a 0a01 	bic.w	sl, sl, #1
			switch (st) {
 8005b18:	b14e      	cbz	r6, 8005b2e <f_mkfs+0x24e>
 8005b1a:	2e01      	cmp	r6, #1
 8005b1c:	d016      	beq.n	8005b4c <f_mkfs+0x26c>
				ch = (WCHAR)j; si += (WCHAR)j;	/* Number of chars to skip */
 8005b1e:	b2b8      	uxth	r0, r7
 8005b20:	4405      	add	r5, r0
				st = 0;
 8005b22:	2600      	movs	r6, #0
				ch = (WCHAR)j; si += (WCHAR)j;	/* Number of chars to skip */
 8005b24:	b2ad      	uxth	r5, r5
				st = 0;
 8005b26:	e018      	b.n	8005b5a <f_mkfs+0x27a>
			sz_au = 8;
 8005b28:	f04f 0b08 	mov.w	fp, #8
 8005b2c:	e7af      	b.n	8005a8e <f_mkfs+0x1ae>
				ch = (WCHAR)ff_wtoupper(si);	/* Get an up-case char */
 8005b2e:	4628      	mov	r0, r5
 8005b30:	f000 fd4c 	bl	80065cc <ff_wtoupper>
 8005b34:	b280      	uxth	r0, r0
					si++; break;		/* Store the up-case char if exist */
 8005b36:	1c6a      	adds	r2, r5, #1
				if (ch != si) {
 8005b38:	4285      	cmp	r5, r0
					si++; break;		/* Store the up-case char if exist */
 8005b3a:	b292      	uxth	r2, r2
				if (ch != si) {
 8005b3c:	d141      	bne.n	8005bc2 <f_mkfs+0x2e2>
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
 8005b3e:	2701      	movs	r7, #1
 8005b40:	19ee      	adds	r6, r5, r7
 8005b42:	b2b6      	uxth	r6, r6
 8005b44:	2e00      	cmp	r6, #0
 8005b46:	d135      	bne.n	8005bb4 <f_mkfs+0x2d4>
				if (j >= 128) {
 8005b48:	2f7f      	cmp	r7, #127	@ 0x7f
 8005b4a:	d83c      	bhi.n	8005bc6 <f_mkfs+0x2e6>
				if (--j == 0) st = 0;
 8005b4c:	3f01      	subs	r7, #1
 8005b4e:	bf14      	ite	ne
 8005b50:	2601      	movne	r6, #1
 8005b52:	2600      	moveq	r6, #0
				ch = si++;		/* Fill the short run */
 8005b54:	1c6a      	adds	r2, r5, #1
				if (--j == 0) st = 0;
 8005b56:	4628      	mov	r0, r5
				ch = si++;		/* Fill the short run */
 8005b58:	b295      	uxth	r5, r2
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 8005b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);	/* Put it into the write buffer */
 8005b5c:	b2c2      	uxtb	r2, r0
 8005b5e:	f804 2009 	strb.w	r2, [r4, r9]
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
 8005b62:	f3c0 200f 	ubfx	r0, r0, #8, #16
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 8005b66:	eb02 0273 	add.w	r2, r2, r3, ror #1
 8005b6a:	eb00 0372 	add.w	r3, r0, r2, ror #1
 8005b6e:	9309      	str	r3, [sp, #36]	@ 0x24
			i += 2; szb_case += 2;
 8005b70:	9b07      	ldr	r3, [sp, #28]
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
 8005b72:	eb04 0109 	add.w	r1, r4, r9
			i += 2; szb_case += 2;
 8005b76:	3302      	adds	r3, #2
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
 8005b78:	7048      	strb	r0, [r1, #1]
			i += 2; szb_case += 2;
 8005b7a:	9307      	str	r3, [sp, #28]
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
 8005b7c:	b11d      	cbz	r5, 8005b86 <f_mkfs+0x2a6>
			i += 2; szb_case += 2;
 8005b7e:	f109 0002 	add.w	r0, r9, #2
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
 8005b82:	4582      	cmp	sl, r0
 8005b84:	d127      	bne.n	8005bd6 <f_mkfs+0x2f6>
				n = (i + ss - 1) / ss;
 8005b86:	f209 2301 	addw	r3, r9, #513	@ 0x201
 8005b8a:	ea4f 2953 	mov.w	r9, r3, lsr #9
				if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005b8e:	464b      	mov	r3, r9
 8005b90:	4621      	mov	r1, r4
 8005b92:	9a08      	ldr	r2, [sp, #32]
 8005b94:	9800      	ldr	r0, [sp, #0]
 8005b96:	f7fd f98a 	bl	8002eae <disk_write>
 8005b9a:	b1c0      	cbz	r0, 8005bce <f_mkfs+0x2ee>
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8005b9c:	2001      	movs	r0, #1
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);

	LEAVE_MKFS(FR_OK);
}
 8005b9e:	b019      	add	sp, #100	@ 0x64
 8005ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ba4:	20000910 	.word	0x20000910
 8005ba8:	0800f464 	.word	0x0800f464
 8005bac:	0800f456 	.word	0x0800f456
 8005bb0:	7fffffed 	.word	0x7fffffed
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f000 fd09 	bl	80065cc <ff_wtoupper>
 8005bba:	4286      	cmp	r6, r0
 8005bbc:	d1c4      	bne.n	8005b48 <f_mkfs+0x268>
 8005bbe:	3701      	adds	r7, #1
 8005bc0:	e7be      	b.n	8005b40 <f_mkfs+0x260>
					si++; break;		/* Store the up-case char if exist */
 8005bc2:	4615      	mov	r5, r2
 8005bc4:	e7c9      	b.n	8005b5a <f_mkfs+0x27a>
					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 chars */
 8005bc6:	2602      	movs	r6, #2
 8005bc8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005bcc:	e7c5      	b.n	8005b5a <f_mkfs+0x27a>
				sect += n; i = 0;
 8005bce:	9b08      	ldr	r3, [sp, #32]
 8005bd0:	444b      	add	r3, r9
 8005bd2:	9308      	str	r3, [sp, #32]
		} while (si);
 8005bd4:	b10d      	cbz	r5, 8005bda <f_mkfs+0x2fa>
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
 8005bd6:	4681      	mov	r9, r0
 8005bd8:	e79e      	b.n	8005b18 <f_mkfs+0x238>
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
 8005bda:	9a07      	ldr	r2, [sp, #28]
 8005bdc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
		clen[2] = 1;	/* Number of root directory clusters */
 8005bde:	f04f 0901 	mov.w	r9, #1
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
 8005be2:	4413      	add	r3, r2
 8005be4:	fbb3 f3f8 	udiv	r3, r3, r8
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
 8005be8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
 8005bea:	9316      	str	r3, [sp, #88]	@ 0x58
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
 8005bec:	f202 15ff 	addw	r5, r2, #511	@ 0x1ff
		nbit = clen[0] + clen[1] + clen[2];				/* Number of clusters in-use by system (bitmap, up-case and root-dir) */
 8005bf0:	9a03      	ldr	r2, [sp, #12]
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
 8005bf2:	f8dd 8008 	ldr.w	r8, [sp, #8]
		nbit = clen[0] + clen[1] + clen[2];				/* Number of clusters in-use by system (bitmap, up-case and root-dir) */
 8005bf6:	18d3      	adds	r3, r2, r3
 8005bf8:	9308      	str	r3, [sp, #32]
 8005bfa:	eb03 0a09 	add.w	sl, r3, r9
			memset(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
 8005bfe:	9b06      	ldr	r3, [sp, #24]
		clen[2] = 1;	/* Number of root directory clusters */
 8005c00:	f8cd 905c 	str.w	r9, [sp, #92]	@ 0x5c
			memset(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
 8005c04:	f423 77ff 	bic.w	r7, r3, #510	@ 0x1fe
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
 8005c08:	0a6d      	lsrs	r5, r5, #9
			memset(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
 8005c0a:	f027 0701 	bic.w	r7, r7, #1
 8005c0e:	463a      	mov	r2, r7
 8005c10:	2100      	movs	r1, #0
 8005c12:	4620      	mov	r0, r4
 8005c14:	f006 fd22 	bl	800c65c <memset>
			for (i = 0; nbit != 0 && i / 8 < sz_buf * ss; buf[i / 8] |= 1 << (i % 8), i++, nbit--) ;	/* Mark used clusters */
 8005c18:	4656      	mov	r6, sl
 8005c1a:	ebaa 0306 	sub.w	r3, sl, r6
 8005c1e:	b12e      	cbz	r6, 8005c2c <f_mkfs+0x34c>
 8005c20:	ebb7 0fd3 	cmp.w	r7, r3, lsr #3
 8005c24:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 8005c28:	f200 813c 	bhi.w	8005ea4 <f_mkfs+0x5c4>
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
 8005c2c:	f8dd a010 	ldr.w	sl, [sp, #16]
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005c30:	4642      	mov	r2, r8
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
 8005c32:	45aa      	cmp	sl, r5
 8005c34:	bf28      	it	cs
 8005c36:	46aa      	movcs	sl, r5
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005c38:	4621      	mov	r1, r4
 8005c3a:	4653      	mov	r3, sl
 8005c3c:	9800      	ldr	r0, [sp, #0]
 8005c3e:	f7fd f936 	bl	8002eae <disk_write>
 8005c42:	2800      	cmp	r0, #0
 8005c44:	d1aa      	bne.n	8005b9c <f_mkfs+0x2bc>
		} while (nsect);
 8005c46:	ebb5 050a 	subs.w	r5, r5, sl
			sect += n; nsect -= n;
 8005c4a:	44d0      	add	r8, sl
		} while (nsect);
 8005c4c:	f040 8128 	bne.w	8005ea0 <f_mkfs+0x5c0>
		j = nbit = clu = 0;
 8005c50:	46aa      	mov	sl, r5
 8005c52:	46a9      	mov	r9, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8005c54:	f04f 08ff 	mov.w	r8, #255	@ 0xff
		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
 8005c58:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
			memset(buf, 0, sz_buf * ss); i = 0;	/* Clear work area and reset write offset */
 8005c5a:	463a      	mov	r2, r7
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f006 fcfc 	bl	800c65c <memset>
			if (clu == 0) {	/* Initialize FAT [0] and FAT[1] */
 8005c64:	f1ba 0f00 	cmp.w	sl, #0
 8005c68:	f040 8135 	bne.w	8005ed6 <f_mkfs+0x5f6>
	*ptr++ = (BYTE)val; val >>= 8;
 8005c6c:	f06f 0307 	mvn.w	r3, #7
				st_dword(buf + i, 0xFFFFFFFF); i += 4; clu++;
 8005c70:	f04f 0a02 	mov.w	sl, #2
 8005c74:	2208      	movs	r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8005c76:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c78:	f884 8001 	strb.w	r8, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c7c:	f884 8002 	strb.w	r8, [r4, #2]
	*ptr++ = (BYTE)val;
 8005c80:	f884 8003 	strb.w	r8, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c84:	f884 8004 	strb.w	r8, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c88:	f884 8005 	strb.w	r8, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c8c:	f884 8006 	strb.w	r8, [r4, #6]
	*ptr++ = (BYTE)val;
 8005c90:	f884 8007 	strb.w	r8, [r4, #7]
					i += 4; clu++; nbit--;
 8005c94:	462b      	mov	r3, r5
				while (nbit != 0 && i < sz_buf * ss) {	/* Create a chain */
 8005c96:	f1b9 0f00 	cmp.w	r9, #0
 8005c9a:	f000 811e 	beq.w	8005eda <f_mkfs+0x5fa>
 8005c9e:	4297      	cmp	r7, r2
 8005ca0:	f200 8109 	bhi.w	8005eb6 <f_mkfs+0x5d6>
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
 8005ca4:	9b04      	ldr	r3, [sp, #16]
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005ca6:	4621      	mov	r1, r4
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
 8005ca8:	42b3      	cmp	r3, r6
 8005caa:	bf28      	it	cs
 8005cac:	4633      	movcs	r3, r6
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005cae:	9a05      	ldr	r2, [sp, #20]
 8005cb0:	9800      	ldr	r0, [sp, #0]
 8005cb2:	9306      	str	r3, [sp, #24]
 8005cb4:	f7fd f8fb 	bl	8002eae <disk_write>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	f47f af6f 	bne.w	8005b9c <f_mkfs+0x2bc>
			sect += n; nsect -= n;
 8005cbe:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8005cc2:	441a      	add	r2, r3
		} while (nsect);
 8005cc4:	1af6      	subs	r6, r6, r3
			sect += n; nsect -= n;
 8005cc6:	9205      	str	r2, [sp, #20]
		} while (nsect);
 8005cc8:	d1c7      	bne.n	8005c5a <f_mkfs+0x37a>
		memset(buf, 0, sz_buf * ss);
 8005cca:	4631      	mov	r1, r6
 8005ccc:	463a      	mov	r2, r7
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f006 fcc4 	bl	800c65c <memset>
		buf[SZDIRE * 0 + 0] = ET_VLABEL;				/* Volume label entry (no label) */
 8005cd4:	2383      	movs	r3, #131	@ 0x83
 8005cd6:	7023      	strb	r3, [r4, #0]
		buf[SZDIRE * 1 + 0] = ET_BITMAP;				/* Bitmap entry */
 8005cd8:	2381      	movs	r3, #129	@ 0x81
 8005cda:	f884 3020 	strb.w	r3, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 8005cde:	2302      	movs	r3, #2
		st_dword(buf + SZDIRE * 1 + 24, szb_bit);		/*  size */
 8005ce0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
 8005ce2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8005ce6:	f884 6035 	strb.w	r6, [r4, #53]	@ 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 8005cea:	f884 6036 	strb.w	r6, [r4, #54]	@ 0x36
	*ptr++ = (BYTE)val;
 8005cee:	f884 6037 	strb.w	r6, [r4, #55]	@ 0x37
		st_dword(buf + SZDIRE * 1 + 24, szb_bit);		/*  size */
 8005cf2:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8005cf6:	f7fd fa2b 	bl	8003150 <st_dword>
		buf[SZDIRE * 2 + 0] = ET_UPCASE;				/* Up-case table entry */
 8005cfa:	2382      	movs	r3, #130	@ 0x82
		sect = b_data + sz_au * (clen[0] + clen[1]); nsect = sz_au;	/* Start of the root directory and number of sectors */
 8005cfc:	465e      	mov	r6, fp
		st_dword(buf + SZDIRE * 2 + 4, sum);			/*  sum */
 8005cfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
		buf[SZDIRE * 2 + 0] = ET_UPCASE;				/* Up-case table entry */
 8005d00:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		st_dword(buf + SZDIRE * 2 + 4, sum);			/*  sum */
 8005d04:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 8005d08:	f7fd fa22 	bl	8003150 <st_dword>
		st_dword(buf + SZDIRE * 2 + 20, 2 + clen[0]);	/*  cluster */
 8005d0c:	9903      	ldr	r1, [sp, #12]
 8005d0e:	f104 0354 	add.w	r3, r4, #84	@ 0x54
 8005d12:	4618      	mov	r0, r3
 8005d14:	3102      	adds	r1, #2
 8005d16:	9305      	str	r3, [sp, #20]
 8005d18:	f7fd fa1a 	bl	8003150 <st_dword>
		st_dword(buf + SZDIRE * 2 + 24, szb_case);		/*  size */
 8005d1c:	f104 0358 	add.w	r3, r4, #88	@ 0x58
 8005d20:	4618      	mov	r0, r3
 8005d22:	9907      	ldr	r1, [sp, #28]
 8005d24:	9306      	str	r3, [sp, #24]
 8005d26:	f7fd fa13 	bl	8003150 <st_dword>
		sect = b_data + sz_au * (clen[0] + clen[1]); nsect = sz_au;	/* Start of the root directory and number of sectors */
 8005d2a:	9b02      	ldr	r3, [sp, #8]
 8005d2c:	9a08      	ldr	r2, [sp, #32]
 8005d2e:	fb0b 3502 	mla	r5, fp, r2, r3
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8005d32:	9f04      	ldr	r7, [sp, #16]
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005d34:	4621      	mov	r1, r4
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8005d36:	42b7      	cmp	r7, r6
 8005d38:	bf28      	it	cs
 8005d3a:	4637      	movcs	r7, r6
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005d3c:	462a      	mov	r2, r5
 8005d3e:	463b      	mov	r3, r7
 8005d40:	9800      	ldr	r0, [sp, #0]
 8005d42:	f7fd f8b4 	bl	8002eae <disk_write>
 8005d46:	4601      	mov	r1, r0
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	f47f af27 	bne.w	8005b9c <f_mkfs+0x2bc>
			memset(buf, 0, ss);	/* Rest of entries are filled with zero */
 8005d4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d52:	4620      	mov	r0, r4
 8005d54:	f006 fc82 	bl	800c65c <memset>
		} while (nsect);
 8005d58:	1bf6      	subs	r6, r6, r7
			sect += n; nsect -= n;
 8005d5a:	443d      	add	r5, r7
		} while (nsect);
 8005d5c:	d1e9      	bne.n	8005d32 <f_mkfs+0x452>
 8005d5e:	2302      	movs	r3, #2
		sect = b_vol;
 8005d60:	f8dd 8004 	ldr.w	r8, [sp, #4]
			memcpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 8005d64:	f8df a2a0 	ldr.w	sl, [pc, #672]	@ 8006008 <f_mkfs+0x728>
 8005d68:	9304      	str	r3, [sp, #16]
			memset(buf, 0, ss);
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d70:	4620      	mov	r0, r4
 8005d72:	f006 fc73 	bl	800c65c <memset>
			memcpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 8005d76:	f8da 3000 	ldr.w	r3, [sl]
			st_qword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
 8005d7a:	9a01      	ldr	r2, [sp, #4]
			memcpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 8005d7c:	6023      	str	r3, [r4, #0]
 8005d7e:	f8da 3004 	ldr.w	r3, [sl, #4]
			st_qword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
 8005d82:	f104 0040 	add.w	r0, r4, #64	@ 0x40
			memcpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 8005d86:	6063      	str	r3, [r4, #4]
 8005d88:	f8ba 3008 	ldrh.w	r3, [sl, #8]
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
 8005d8c:	465d      	mov	r5, fp
			memcpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 8005d8e:	8123      	strh	r3, [r4, #8]
 8005d90:	f89a 300a 	ldrb.w	r3, [sl, #10]
 8005d94:	72a3      	strb	r3, [r4, #10]
			st_qword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
 8005d96:	2300      	movs	r3, #0
 8005d98:	f7fd f9e2 	bl	8003160 <st_qword>
			st_qword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8005da2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005da4:	f7fd f9dc 	bl	8003160 <st_qword>
	*ptr++ = (BYTE)val; val >>= 8;
 8005da8:	2320      	movs	r3, #32
			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
 8005daa:	990e      	ldr	r1, [sp, #56]	@ 0x38
	*ptr++ = (BYTE)val; val >>= 8;
 8005dac:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
 8005db0:	9805      	ldr	r0, [sp, #20]
 8005db2:	f7fd f9cd 	bl	8003150 <st_dword>
			st_dword(buf + BPB_DataOfsEx, (DWORD)(b_data - b_vol));	/* Data offset [sector] */
 8005db6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005db8:	9806      	ldr	r0, [sp, #24]
 8005dba:	f7fd f9c9 	bl	8003150 <st_dword>
			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
 8005dbe:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005dc0:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8005dc4:	f7fd f9c4 	bl	8003150 <st_dword>
			st_dword(buf + BPB_RootClusEx, 2 + clen[0] + clen[1]);	/* Root directory cluster number */
 8005dc8:	9b08      	ldr	r3, [sp, #32]
 8005dca:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 8005dce:	1c99      	adds	r1, r3, #2
 8005dd0:	f7fd f9be 	bl	8003150 <st_dword>
			st_dword(buf + BPB_VolIDEx, vsn);						/* VSN */
 8005dd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005dd6:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8005dda:	f7fd f9b9 	bl	8003150 <st_dword>
	*ptr++ = (BYTE)val;
 8005dde:	f04f 0301 	mov.w	r3, #1
 8005de2:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;		/* Log2 of sector size [byte] */
 8005de6:	2309      	movs	r3, #9
 8005de8:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
 8005dec:	086d      	lsrs	r5, r5, #1
 8005dee:	f040 8088 	bne.w	8005f02 <f_mkfs+0x622>
			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
 8005df2:	f04f 0301 	mov.w	r3, #1
 8005df6:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
 8005dfa:	2380      	movs	r3, #128	@ 0x80
 8005dfc:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
	*ptr++ = (BYTE)val; val >>= 8;
 8005e00:	23eb      	movs	r3, #235	@ 0xeb
 8005e02:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
	*ptr++ = (BYTE)val;
 8005e06:	23fe      	movs	r3, #254	@ 0xfe
 8005e08:	f884 3079 	strb.w	r3, [r4, #121]	@ 0x79
	*ptr++ = (BYTE)val; val >>= 8;
 8005e0c:	2355      	movs	r3, #85	@ 0x55
 8005e0e:	f884 31fe 	strb.w	r3, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 8005e12:	23aa      	movs	r3, #170	@ 0xaa
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 8005e14:	462e      	mov	r6, r5
 8005e16:	462f      	mov	r7, r5
	*ptr++ = (BYTE)val;
 8005e18:	f884 31ff 	strb.w	r3, [r4, #511]	@ 0x1ff
				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], sum);
 8005e1c:	f1a7 036a 	sub.w	r3, r7, #106	@ 0x6a
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d904      	bls.n	8005e2e <f_mkfs+0x54e>
 8005e24:	2f70      	cmp	r7, #112	@ 0x70
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 8005e26:	bf1c      	itt	ne
 8005e28:	5de3      	ldrbne	r3, [r4, r7]
 8005e2a:	eb03 0676 	addne.w	r6, r3, r6, ror #1
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 8005e2e:	3701      	adds	r7, #1
 8005e30:	f5b7 7f00 	cmp.w	r7, #512	@ 0x200
 8005e34:	d1f2      	bne.n	8005e1c <f_mkfs+0x53c>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005e36:	4621      	mov	r1, r4
 8005e38:	2301      	movs	r3, #1
 8005e3a:	4642      	mov	r2, r8
 8005e3c:	9800      	ldr	r0, [sp, #0]
 8005e3e:	f7fd f836 	bl	8002eae <disk_write>
 8005e42:	f108 0901 	add.w	r9, r8, #1
 8005e46:	4601      	mov	r1, r0
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	f47f aea7 	bne.w	8005b9c <f_mkfs+0x2bc>
			memset(buf, 0, ss);
 8005e4e:	463a      	mov	r2, r7
 8005e50:	4620      	mov	r0, r4
 8005e52:	f006 fc03 	bl	800c65c <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8005e56:	2355      	movs	r3, #85	@ 0x55
 8005e58:	f884 31fe 	strb.w	r3, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 8005e5c:	23aa      	movs	r3, #170	@ 0xaa
 8005e5e:	f884 31ff 	strb.w	r3, [r4, #511]	@ 0x1ff
			for (j = 1; j < 9; j++) {
 8005e62:	1e63      	subs	r3, r4, #1
 8005e64:	9303      	str	r3, [sp, #12]
 8005e66:	f204 13ff 	addw	r3, r4, #511	@ 0x1ff
 8005e6a:	f108 0709 	add.w	r7, r8, #9
 8005e6e:	9302      	str	r3, [sp, #8]
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 8005e70:	9b03      	ldr	r3, [sp, #12]
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 8005e72:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005e76:	eb02 0676 	add.w	r6, r2, r6, ror #1
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 8005e7a:	9a02      	ldr	r2, [sp, #8]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d1f8      	bne.n	8005e72 <f_mkfs+0x592>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005e80:	4621      	mov	r1, r4
 8005e82:	2301      	movs	r3, #1
 8005e84:	464a      	mov	r2, r9
 8005e86:	9800      	ldr	r0, [sp, #0]
 8005e88:	f7fd f811 	bl	8002eae <disk_write>
 8005e8c:	f109 0801 	add.w	r8, r9, #1
 8005e90:	4601      	mov	r1, r0
 8005e92:	2800      	cmp	r0, #0
 8005e94:	f47f ae82 	bne.w	8005b9c <f_mkfs+0x2bc>
			for (j = 1; j < 9; j++) {
 8005e98:	4547      	cmp	r7, r8
 8005e9a:	d038      	beq.n	8005f0e <f_mkfs+0x62e>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005e9c:	46c1      	mov	r9, r8
 8005e9e:	e7e7      	b.n	8005e70 <f_mkfs+0x590>
 8005ea0:	46b2      	mov	sl, r6
 8005ea2:	e6b4      	b.n	8005c0e <f_mkfs+0x32e>
			for (i = 0; nbit != 0 && i / 8 < sz_buf * ss; buf[i / 8] |= 1 << (i % 8), i++, nbit--) ;	/* Mark used clusters */
 8005ea4:	5ca1      	ldrb	r1, [r4, r2]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	fa09 f303 	lsl.w	r3, r9, r3
 8005eae:	430b      	orrs	r3, r1
 8005eb0:	54a3      	strb	r3, [r4, r2]
 8005eb2:	3e01      	subs	r6, #1
 8005eb4:	e6b1      	b.n	8005c1a <f_mkfs+0x33a>
					st_dword(buf + i, (nbit > 1) ? clu + 1 : 0xFFFFFFFF);
 8005eb6:	f1b9 0f01 	cmp.w	r9, #1
 8005eba:	f10a 0a01 	add.w	sl, sl, #1
 8005ebe:	eb04 0002 	add.w	r0, r4, r2
 8005ec2:	bf14      	ite	ne
 8005ec4:	4651      	movne	r1, sl
 8005ec6:	f04f 31ff 	moveq.w	r1, #4294967295
 8005eca:	f7fd f941 	bl	8003150 <st_dword>
					i += 4; clu++; nbit--;
 8005ece:	3204      	adds	r2, #4
 8005ed0:	f109 39ff 	add.w	r9, r9, #4294967295
 8005ed4:	e6de      	b.n	8005c94 <f_mkfs+0x3b4>
			memset(buf, 0, sz_buf * ss); i = 0;	/* Clear work area and reset write offset */
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	e6dc      	b.n	8005c94 <f_mkfs+0x3b4>
				if (nbit == 0 && j < 3) nbit = clen[j++];	/* Get next chain length */
 8005eda:	2d02      	cmp	r5, #2
 8005edc:	f63f aee2 	bhi.w	8005ca4 <f_mkfs+0x3c4>
 8005ee0:	a918      	add	r1, sp, #96	@ 0x60
 8005ee2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005ee6:	f853 9c0c 	ldr.w	r9, [r3, #-12]
 8005eea:	3501      	adds	r5, #1
			} while (nbit != 0 && i < sz_buf * ss);
 8005eec:	f1b9 0f00 	cmp.w	r9, #0
 8005ef0:	f43f aed8 	beq.w	8005ca4 <f_mkfs+0x3c4>
 8005ef4:	4297      	cmp	r7, r2
 8005ef6:	f63f aecd 	bhi.w	8005c94 <f_mkfs+0x3b4>
 8005efa:	e6d3      	b.n	8005ca4 <f_mkfs+0x3c4>
 8005efc:	2301      	movs	r3, #1
 8005efe:	9304      	str	r3, [sp, #16]
 8005f00:	e733      	b.n	8005d6a <f_mkfs+0x48a>
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
 8005f02:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8005f06:	3301      	adds	r3, #1
 8005f08:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8005f0c:	e76e      	b.n	8005dec <f_mkfs+0x50c>
			memset(buf, 0, ss);
 8005f0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f12:	4620      	mov	r0, r4
 8005f14:	f006 fba2 	bl	800c65c <memset>
			for ( ; j < 11; j++) {
 8005f18:	f109 0903 	add.w	r9, r9, #3
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005f1c:	9b03      	ldr	r3, [sp, #12]
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 8005f1e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005f22:	eb02 0676 	add.w	r6, r2, r6, ror #1
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 8005f26:	9a02      	ldr	r2, [sp, #8]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d1f8      	bne.n	8005f1e <f_mkfs+0x63e>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	4642      	mov	r2, r8
 8005f30:	4621      	mov	r1, r4
 8005f32:	9800      	ldr	r0, [sp, #0]
 8005f34:	f108 0701 	add.w	r7, r8, #1
 8005f38:	f7fc ffb9 	bl	8002eae <disk_write>
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	f47f ae2d 	bne.w	8005b9c <f_mkfs+0x2bc>
			for ( ; j < 11; j++) {
 8005f42:	454f      	cmp	r7, r9
 8005f44:	d001      	beq.n	8005f4a <f_mkfs+0x66a>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005f46:	46b8      	mov	r8, r7
 8005f48:	e7e8      	b.n	8005f1c <f_mkfs+0x63c>
			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
 8005f4a:	1960      	adds	r0, r4, r5
 8005f4c:	4631      	mov	r1, r6
 8005f4e:	3504      	adds	r5, #4
 8005f50:	f7fd f8fe 	bl	8003150 <st_dword>
 8005f54:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8005f58:	d1f7      	bne.n	8005f4a <f_mkfs+0x66a>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	463a      	mov	r2, r7
 8005f5e:	4621      	mov	r1, r4
 8005f60:	9800      	ldr	r0, [sp, #0]
 8005f62:	f108 0802 	add.w	r8, r8, #2
 8005f66:	f7fc ffa2 	bl	8002eae <disk_write>
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	f47f ae16 	bne.w	8005b9c <f_mkfs+0x2bc>
		for (n = 0; n < 2; n++) {
 8005f70:	9b04      	ldr	r3, [sp, #16]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d1c2      	bne.n	8005efc <f_mkfs+0x61c>
		sys = 0x07;		/* exFAT */
 8005f76:	f04f 0907 	mov.w	r9, #7
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 8005f7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d13a      	bne.n	8005ff6 <f_mkfs+0x716>
			lba[0] = sz_vol; lba[1] = 0;
 8005f80:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8005f82:	2101      	movs	r1, #1
			lba[0] = sz_vol; lba[1] = 0;
 8005f84:	9315      	str	r3, [sp, #84]	@ 0x54
 8005f86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8005f88:	9800      	ldr	r0, [sp, #0]
 8005f8a:	aa14      	add	r2, sp, #80	@ 0x50
			lba[0] = sz_vol; lba[1] = 0;
 8005f8c:	9316      	str	r3, [sp, #88]	@ 0x58
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8005f8e:	f7fc ffa3 	bl	8002ed8 <disk_ioctl>
 8005f92:	2800      	cmp	r0, #0
 8005f94:	f47f ae02 	bne.w	8005b9c <f_mkfs+0x2bc>
		sz_drv32 = (DWORD)sz_drv;
 8005f98:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 8005f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800600c <f_mkfs+0x72c>)
 8005f9e:	4598      	cmp	r8, r3
 8005fa0:	f240 8117 	bls.w	80061d2 <f_mkfs+0x8f2>
 8005fa4:	2305      	movs	r3, #5
 8005fa6:	2508      	movs	r5, #8
 8005fa8:	f64f 423e 	movw	r2, #64574	@ 0xfc3e
 8005fac:	006d      	lsls	r5, r5, #1
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b2ed      	uxtb	r5, r5
 8005fb2:	f000 8110 	beq.w	80061d6 <f_mkfs+0x8f6>
 8005fb6:	fbb8 f1f5 	udiv	r1, r8, r5
 8005fba:	4291      	cmp	r1, r2
 8005fbc:	d8f6      	bhi.n	8005fac <f_mkfs+0x6cc>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 8005fbe:	2d00      	cmp	r5, #0
 8005fc0:	bf08      	it	eq
 8005fc2:	25ff      	moveq	r5, #255	@ 0xff
		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 8005fc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fc8:	2100      	movs	r1, #0
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f006 fb46 	bl	800c65c <memset>
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8005fd0:	f1b8 0f3f 	cmp.w	r8, #63	@ 0x3f
 8005fd4:	f200 8101 	bhi.w	80061da <f_mkfs+0x8fa>
	*ptr++ = (BYTE)val; val >>= 8;
 8005fd8:	2355      	movs	r3, #85	@ 0x55
 8005fda:	f884 31fe 	strb.w	r3, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 8005fde:	23aa      	movs	r3, #170	@ 0xaa
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8005fe0:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val;
 8005fe2:	f884 31ff 	strb.w	r3, [r4, #511]	@ 0x1ff
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	2301      	movs	r3, #1
 8005fea:	9800      	ldr	r0, [sp, #0]
 8005fec:	f7fc ff5f 	bl	8002eae <disk_write>
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	f47f add3 	bne.w	8005b9c <f_mkfs+0x2bc>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	9800      	ldr	r0, [sp, #0]
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	f7fc ff6c 	bl	8002ed8 <disk_ioctl>
 8006000:	3800      	subs	r0, #0
 8006002:	bf18      	it	ne
 8006004:	2001      	movne	r0, #1
 8006006:	e5ca      	b.n	8005b9e <f_mkfs+0x2be>
 8006008:	0800f3f8 	.word	0x0800f3f8
 800600c:	0007e1f7 	.word	0x0007e1f7
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8006010:	0876      	lsrs	r6, r6, #1
 8006012:	46b3      	mov	fp, r6
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 8006014:	fbb7 f2f6 	udiv	r2, r7, r6
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8006018:	49a6      	ldr	r1, [pc, #664]	@ (80062b4 <f_mkfs+0x9d4>)
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800601a:	0095      	lsls	r5, r2, #2
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800601c:	f5a2 427f 	sub.w	r2, r2, #65280	@ 0xff00
 8006020:	3af6      	subs	r2, #246	@ 0xf6
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8006022:	f205 2507 	addw	r5, r5, #519	@ 0x207
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8006026:	428a      	cmp	r2, r1
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8006028:	ea4f 2555 	mov.w	r5, r5, lsr #9
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800602c:	d83b      	bhi.n	80060a6 <f_mkfs+0x7c6>
				sz_dir = 0;		/* No static directory */
 800602e:	2200      	movs	r2, #0
 8006030:	9207      	str	r2, [sp, #28]
				sz_rsv = 32;	/* Number of reserved sectors */
 8006032:	2220      	movs	r2, #32
 8006034:	46dc      	mov	ip, fp
 8006036:	f04f 0803 	mov.w	r8, #3
 800603a:	9203      	str	r2, [sp, #12]
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800603c:	9a01      	ldr	r2, [sp, #4]
 800603e:	9903      	ldr	r1, [sp, #12]
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8006040:	9808      	ldr	r0, [sp, #32]
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8006042:	eb02 0a01 	add.w	sl, r2, r1
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 8006046:	9a02      	ldr	r2, [sp, #8]
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 8006048:	f1b8 0f03 	cmp.w	r8, #3
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800604c:	fb02 a105 	mla	r1, r2, r5, sl
 8006050:	9a07      	ldr	r2, [sp, #28]
 8006052:	4411      	add	r1, r2
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8006054:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006056:	440a      	add	r2, r1
 8006058:	ea02 0200 	and.w	r2, r2, r0
 800605c:	eba2 0201 	sub.w	r2, r2, r1
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 8006060:	d12b      	bne.n	80060ba <f_mkfs+0x7da>
				sz_rsv += n; b_fat += n;
 8006062:	9803      	ldr	r0, [sp, #12]
 8006064:	4492      	add	sl, r2
 8006066:	4410      	add	r0, r2
 8006068:	9003      	str	r0, [sp, #12]
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 800606a:	9a01      	ldr	r2, [sp, #4]
 800606c:	ebc2 1206 	rsb	r2, r2, r6, lsl #4
 8006070:	440a      	add	r2, r1
 8006072:	4297      	cmp	r7, r2
 8006074:	d317      	bcc.n	80060a6 <f_mkfs+0x7c6>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 8006076:	9a07      	ldr	r2, [sp, #28]
 8006078:	9903      	ldr	r1, [sp, #12]
 800607a:	1aba      	subs	r2, r7, r2
 800607c:	1a52      	subs	r2, r2, r1
 800607e:	9902      	ldr	r1, [sp, #8]
			if (fsty == FS_FAT32) {
 8006080:	f1b8 0f03 	cmp.w	r8, #3
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 8006084:	fb01 2215 	mls	r2, r1, r5, r2
 8006088:	fbb2 f2f6 	udiv	r2, r2, r6
 800608c:	9205      	str	r2, [sp, #20]
			if (fsty == FS_FAT32) {
 800608e:	d127      	bne.n	80060e0 <f_mkfs+0x800>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 8006090:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006094:	9905      	ldr	r1, [sp, #20]
 8006096:	4291      	cmp	r1, r2
 8006098:	f200 811a 	bhi.w	80062d0 <f_mkfs+0x9f0>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800609c:	f1bb 0f00 	cmp.w	fp, #0
 80060a0:	d101      	bne.n	80060a6 <f_mkfs+0x7c6>
 80060a2:	2e01      	cmp	r6, #1
 80060a4:	d8b4      	bhi.n	8006010 <f_mkfs+0x730>
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128 sectors */
 80060a6:	200e      	movs	r0, #14
 80060a8:	e579      	b.n	8005b9e <f_mkfs+0x2be>
 80060aa:	46e3      	mov	fp, ip
 80060ac:	e4be      	b.n	8005a2c <f_mkfs+0x14c>
 80060ae:	465e      	mov	r6, fp
 80060b0:	e7b0      	b.n	8006014 <f_mkfs+0x734>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80060b2:	0076      	lsls	r6, r6, #1
 80060b4:	e035      	b.n	8006122 <f_mkfs+0x842>
 80060b6:	465e      	mov	r6, fp
 80060b8:	e038      	b.n	800612c <f_mkfs+0x84c>
				if (n % n_fat) {	/* Adjust fractional error if needed */
 80060ba:	9802      	ldr	r0, [sp, #8]
 80060bc:	fbb2 fef0 	udiv	lr, r2, r0
 80060c0:	fb00 2e1e 	mls	lr, r0, lr, r2
 80060c4:	f1be 0f00 	cmp.w	lr, #0
 80060c8:	d005      	beq.n	80060d6 <f_mkfs+0x7f6>
					n--; sz_rsv++; b_fat++;
 80060ca:	9803      	ldr	r0, [sp, #12]
 80060cc:	3a01      	subs	r2, #1
 80060ce:	3001      	adds	r0, #1
 80060d0:	9003      	str	r0, [sp, #12]
 80060d2:	f10a 0a01 	add.w	sl, sl, #1
				sz_fat += n / n_fat;
 80060d6:	9802      	ldr	r0, [sp, #8]
 80060d8:	fbb2 f2f0 	udiv	r2, r2, r0
 80060dc:	4415      	add	r5, r2
 80060de:	e7c4      	b.n	800606a <f_mkfs+0x78a>
			if (fsty == FS_FAT16) {
 80060e0:	f1b8 0f02 	cmp.w	r8, #2
 80060e4:	f040 80ec 	bne.w	80062c0 <f_mkfs+0x9e0>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80060e8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80060ec:	9905      	ldr	r1, [sp, #20]
 80060ee:	4291      	cmp	r1, r2
 80060f0:	d93a      	bls.n	8006168 <f_mkfs+0x888>
					if (sz_au == 0 && (pau * 2) <= 64) {
 80060f2:	f1bb 0f00 	cmp.w	fp, #0
 80060f6:	d104      	bne.n	8006102 <f_mkfs+0x822>
 80060f8:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 80060fc:	f1bb 0f40 	cmp.w	fp, #64	@ 0x40
 8006100:	d909      	bls.n	8006116 <f_mkfs+0x836>
					if ((fsopt & FM_FAT32)) {
 8006102:	079a      	lsls	r2, r3, #30
 8006104:	d4d1      	bmi.n	80060aa <f_mkfs+0x7ca>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006106:	f1bc 0f00 	cmp.w	ip, #0
 800610a:	d1cc      	bne.n	80060a6 <f_mkfs+0x7c6>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800610c:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 8006110:	f1bb 0f80 	cmp.w	fp, #128	@ 0x80
 8006114:	d8c7      	bhi.n	80060a6 <f_mkfs+0x7c6>
				if (pau == 0) {	/* au auto-selection */
 8006116:	f1bb 0f00 	cmp.w	fp, #0
 800611a:	d1cc      	bne.n	80060b6 <f_mkfs+0x7d6>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800611c:	2601      	movs	r6, #1
 800611e:	4966      	ldr	r1, [pc, #408]	@ (80062b8 <f_mkfs+0x9d8>)
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8006120:	0b3d      	lsrs	r5, r7, #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8006122:	f831 2b02 	ldrh.w	r2, [r1], #2
 8006126:	b10a      	cbz	r2, 800612c <f_mkfs+0x84c>
 8006128:	42aa      	cmp	r2, r5
 800612a:	d9c2      	bls.n	80060b2 <f_mkfs+0x7d2>
				n_clst = (DWORD)sz_vol / pau;
 800612c:	fbb7 f5f6 	udiv	r5, r7, r6
				if (n_clst > MAX_FAT12) {
 8006130:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006134:	4295      	cmp	r5, r2
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 8006136:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8006138:	bf98      	it	ls
 800613a:	eb05 0545 	addls.w	r5, r5, r5, lsl #1
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 800613e:	9207      	str	r2, [sp, #28]
				sz_rsv = 1;						/* Number of reserved sectors */
 8006140:	f04f 0201 	mov.w	r2, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8006144:	bf95      	itete	ls
 8006146:	3501      	addls	r5, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8006148:	3502      	addhi	r5, #2
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800614a:	086d      	lsrls	r5, r5, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800614c:	006d      	lslhi	r5, r5, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800614e:	bf98      	it	ls
 8006150:	3503      	addls	r5, #3
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8006152:	f205 15ff 	addw	r5, r5, #511	@ 0x1ff
 8006156:	bf8c      	ite	hi
 8006158:	f04f 0802 	movhi.w	r8, #2
					fsty = FS_FAT12;
 800615c:	f04f 0801 	movls.w	r8, #1
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8006160:	46dc      	mov	ip, fp
 8006162:	0a6d      	lsrs	r5, r5, #9
				sz_rsv = 1;						/* Number of reserved sectors */
 8006164:	9203      	str	r2, [sp, #12]
 8006166:	e769      	b.n	800603c <f_mkfs+0x75c>
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8006168:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800616c:	9905      	ldr	r1, [sp, #20]
 800616e:	4291      	cmp	r1, r2
 8006170:	f200 80ae 	bhi.w	80062d0 <f_mkfs+0x9f0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006174:	f1bb 0f00 	cmp.w	fp, #0
 8006178:	d0c8      	beq.n	800610c <f_mkfs+0x82c>
 800617a:	e794      	b.n	80060a6 <f_mkfs+0x7c6>
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 800617c:	4639      	mov	r1, r7
 800617e:	f104 0020 	add.w	r0, r4, #32
 8006182:	f7fc ffe5 	bl	8003150 <st_dword>
 8006186:	e0d0      	b.n	800632a <f_mkfs+0xa4a>
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 8006188:	f104 0027 	add.w	r0, r4, #39	@ 0x27
 800618c:	f7fc ffe0 	bl	8003150 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 8006190:	f3c5 2307 	ubfx	r3, r5, #8, #8
	*ptr++ = (BYTE)val;
 8006194:	75e3      	strb	r3, [r4, #23]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8006196:	2380      	movs	r3, #128	@ 0x80
 8006198:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800619c:	2329      	movs	r3, #41	@ 0x29
 800619e:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80061a2:	4b46      	ldr	r3, [pc, #280]	@ (80062bc <f_mkfs+0x9dc>)
	*ptr++ = (BYTE)val; val >>= 8;
 80061a4:	75a5      	strb	r5, [r4, #22]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80061a6:	f104 022b 	add.w	r2, r4, #43	@ 0x2b
 80061aa:	f103 0110 	add.w	r1, r3, #16
 80061ae:	f853 0b04 	ldr.w	r0, [r3], #4
 80061b2:	428b      	cmp	r3, r1
 80061b4:	f842 0b04 	str.w	r0, [r2], #4
 80061b8:	d1f9      	bne.n	80061ae <f_mkfs+0x8ce>
 80061ba:	e0e9      	b.n	8006390 <f_mkfs+0xab0>
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 80061bc:	4620      	mov	r0, r4
 80061be:	9901      	ldr	r1, [sp, #4]
 80061c0:	f7fc ffc6 	bl	8003150 <st_dword>
 80061c4:	e15a      	b.n	800647c <f_mkfs+0xb9c>
		sys = 0x0C;		/* FAT32X */
 80061c6:	f04f 090c 	mov.w	r9, #12
 80061ca:	e6d6      	b.n	8005f7a <f_mkfs+0x69a>
		sys = 0x06;		/* FAT12/16 (large) */
 80061cc:	f04f 0906 	mov.w	r9, #6
 80061d0:	e6d3      	b.n	8005f7a <f_mkfs+0x69a>
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 80061d2:	2508      	movs	r5, #8
 80061d4:	e6f6      	b.n	8005fc4 <f_mkfs+0x6e4>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 80061d6:	25ff      	movs	r5, #255	@ 0xff
 80061d8:	e6f4      	b.n	8005fc4 <f_mkfs+0x6e4>
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 80061da:	223f      	movs	r2, #63	@ 0x3f
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Partitio start CHS cylinder */
 80061dc:	4693      	mov	fp, r2
 80061de:	f10d 0a54 	add.w	sl, sp, #84	@ 0x54
 80061e2:	f504 76e3 	add.w	r6, r4, #454	@ 0x1c6
 80061e6:	f504 73fb 	add.w	r3, r4, #502	@ 0x1f6
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 80061ea:	f85a 7b04 	ldr.w	r7, [sl], #4
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 80061ee:	2f64      	cmp	r7, #100	@ 0x64
 80061f0:	d805      	bhi.n	80061fe <f_mkfs+0x91e>
 80061f2:	bf1b      	ittet	ne
 80061f4:	2164      	movne	r1, #100	@ 0x64
 80061f6:	fbb8 f1f1 	udivne	r1, r8, r1
 80061fa:	4647      	moveq	r7, r8
 80061fc:	434f      	mulne	r7, r1
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 80061fe:	18b8      	adds	r0, r7, r2
 8006200:	bf2c      	ite	cs
 8006202:	2101      	movcs	r1, #1
 8006204:	2100      	movcc	r1, #0
 8006206:	4580      	cmp	r8, r0
 8006208:	d301      	bcc.n	800620e <f_mkfs+0x92e>
 800620a:	2900      	cmp	r1, #0
 800620c:	d044      	beq.n	8006298 <f_mkfs+0x9b8>
 800620e:	eba8 0702 	sub.w	r7, r8, r2
			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Partition start LBA sector */
 8006212:	4611      	mov	r1, r2
 8006214:	4630      	mov	r0, r6
 8006216:	9301      	str	r3, [sp, #4]
 8006218:	f7fc ff9a 	bl	8003150 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Size of partition [sector] */
 800621c:	4639      	mov	r1, r7
 800621e:	1d30      	adds	r0, r6, #4
 8006220:	f7fc ff96 	bl	8003150 <st_dword>
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Partitio start CHS cylinder */
 8006224:	fbb2 f1fb 	udiv	r1, r2, fp
 8006228:	fbb1 f0f5 	udiv	r0, r1, r5
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Partition start CHS head */
 800622c:	fb05 1c10 	mls	ip, r5, r0, r1
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Partition start CHS sector */
 8006230:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
 8006234:	1a51      	subs	r1, r2, r1
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Partition start CHS head */
 8006236:	f806 cc07 	strb.w	ip, [r6, #-7]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800623a:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 800623e:	f02c 0c3f 	bic.w	ip, ip, #63	@ 0x3f
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Partition start CHS sector */
 8006242:	3101      	adds	r1, #1
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8006244:	ea41 010c 	orr.w	r1, r1, ip
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* Partition end CHS cylinder */
 8006248:	443a      	add	r2, r7
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800624a:	f806 1c06 	strb.w	r1, [r6, #-6]
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* Partition end CHS cylinder */
 800624e:	1e51      	subs	r1, r2, #1
 8006250:	fbb1 f7fb 	udiv	r7, r1, fp
			pte[PTE_StCyl] = (BYTE)cy;
 8006254:	f806 0c05 	strb.w	r0, [r6, #-5]
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* Partition end CHS cylinder */
 8006258:	fbb7 f0f5 	udiv	r0, r7, r5
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* Partition end CHS head */
 800625c:	fb05 7c10 	mls	ip, r5, r0, r7
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* Partition end CHS sector */
 8006260:	ebc7 1787 	rsb	r7, r7, r7, lsl #6
 8006264:	1bc9      	subs	r1, r1, r7
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8006266:	9b01      	ldr	r3, [sp, #4]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8006268:	0887      	lsrs	r7, r0, #2
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* Partition end CHS sector */
 800626a:	3101      	adds	r1, #1
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800626c:	f027 073f 	bic.w	r7, r7, #63	@ 0x3f
 8006270:	4339      	orrs	r1, r7
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8006272:	42b3      	cmp	r3, r6
			pte[PTE_System] = sys;					/* System type */
 8006274:	f806 9c04 	strb.w	r9, [r6, #-4]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* Partition end CHS head */
 8006278:	f806 cc03 	strb.w	ip, [r6, #-3]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800627c:	f806 1c02 	strb.w	r1, [r6, #-2]
			pte[PTE_EdCyl] = (BYTE)cy;
 8006280:	f806 0c01 	strb.w	r0, [r6, #-1]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8006284:	f43f aea8 	beq.w	8005fd8 <f_mkfs+0x6f8>
 8006288:	2a00      	cmp	r2, #0
 800628a:	f43f aea5 	beq.w	8005fd8 <f_mkfs+0x6f8>
 800628e:	4590      	cmp	r8, r2
 8006290:	f106 0610 	add.w	r6, r6, #16
 8006294:	d8a9      	bhi.n	80061ea <f_mkfs+0x90a>
 8006296:	e69f      	b.n	8005fd8 <f_mkfs+0x6f8>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 8006298:	2f00      	cmp	r7, #0
 800629a:	d1ba      	bne.n	8006212 <f_mkfs+0x932>
 800629c:	e69c      	b.n	8005fd8 <f_mkfs+0x6f8>
	if (vol < 0) return FR_INVALID_DRIVE;
 800629e:	200b      	movs	r0, #11
 80062a0:	e47d      	b.n	8005b9e <f_mkfs+0x2be>
	if (ds & STA_NOINIT) return FR_NOT_READY;
 80062a2:	2003      	movs	r0, #3
 80062a4:	e47b      	b.n	8005b9e <f_mkfs+0x2be>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 80062a6:	200a      	movs	r0, #10
 80062a8:	e479      	b.n	8005b9e <f_mkfs+0x2be>
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 80062aa:	2011      	movs	r0, #17
 80062ac:	e477      	b.n	8005b9e <f_mkfs+0x2be>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 80062ae:	2013      	movs	r0, #19
 80062b0:	e475      	b.n	8005b9e <f_mkfs+0x2be>
 80062b2:	bf00      	nop
 80062b4:	0ffeffff 	.word	0x0ffeffff
 80062b8:	0800f448 	.word	0x0800f448
 80062bc:	0800f434 	.word	0x0800f434
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 80062c0:	f640 73f5 	movw	r3, #4085	@ 0xff5
 80062c4:	9a05      	ldr	r2, [sp, #20]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	f63f aeed 	bhi.w	80060a6 <f_mkfs+0x7c6>
 80062cc:	f04f 0801 	mov.w	r8, #1
		memset(buf, 0, ss);
 80062d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062d4:	2100      	movs	r1, #0
 80062d6:	4620      	mov	r0, r4
 80062d8:	f006 f9c0 	bl	800c65c <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 80062dc:	4b8c      	ldr	r3, [pc, #560]	@ (8006510 <f_mkfs+0xc30>)
 80062de:	f1b8 0f03 	cmp.w	r8, #3
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	bf08      	it	eq
 80062e6:	f04f 0900 	moveq.w	r9, #0
 80062ea:	6022      	str	r2, [r4, #0]
 80062ec:	685a      	ldr	r2, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80062ee:	f884 9011 	strb.w	r9, [r4, #17]
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 80062f2:	6062      	str	r2, [r4, #4]
 80062f4:	891a      	ldrh	r2, [r3, #8]
 80062f6:	7a9b      	ldrb	r3, [r3, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 80062f8:	f3c9 2907 	ubfx	r9, r9, #8, #8
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 80062fc:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 80062fe:	2302      	movs	r3, #2
 8006300:	7323      	strb	r3, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8006302:	9b03      	ldr	r3, [sp, #12]
		if (sz_vol < 0x10000) {
 8006304:	f5b7 3f80 	cmp.w	r7, #65536	@ 0x10000
	*ptr++ = (BYTE)val; val >>= 8;
 8006308:	f3c3 2b07 	ubfx	fp, r3, #8, #8
 800630c:	73a3      	strb	r3, [r4, #14]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 800630e:	9b02      	ldr	r3, [sp, #8]
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8006310:	8122      	strh	r2, [r4, #8]
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8006312:	7366      	strb	r6, [r4, #13]
	*ptr++ = (BYTE)val;
 8006314:	f884 b00f 	strb.w	fp, [r4, #15]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 8006318:	7423      	strb	r3, [r4, #16]
	*ptr++ = (BYTE)val;
 800631a:	f884 9012 	strb.w	r9, [r4, #18]
		if (sz_vol < 0x10000) {
 800631e:	f4bf af2d 	bcs.w	800617c <f_mkfs+0x89c>
	*ptr++ = (BYTE)val; val >>= 8;
 8006322:	74e7      	strb	r7, [r4, #19]
 8006324:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8006328:	7527      	strb	r7, [r4, #20]
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800632a:	23f8      	movs	r3, #248	@ 0xf8
 800632c:	7563      	strb	r3, [r4, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 800632e:	233f      	movs	r3, #63	@ 0x3f
 8006330:	7623      	strb	r3, [r4, #24]
 8006332:	23ff      	movs	r3, #255	@ 0xff
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 8006334:	9901      	ldr	r1, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8006336:	76a3      	strb	r3, [r4, #26]
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 8006338:	f104 001c 	add.w	r0, r4, #28
 800633c:	f7fc ff08 	bl	8003150 <st_dword>
		if (fsty == FS_FAT32) {
 8006340:	f1b8 0f03 	cmp.w	r8, #3
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 8006344:	990b      	ldr	r1, [sp, #44]	@ 0x2c
		if (fsty == FS_FAT32) {
 8006346:	f47f af1f 	bne.w	8006188 <f_mkfs+0x8a8>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800634a:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 800634e:	f7fc feff 	bl	8003150 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8006352:	4629      	mov	r1, r5
 8006354:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006358:	f7fc fefa 	bl	8003150 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800635c:	2302      	movs	r3, #2
 800635e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8006362:	2301      	movs	r3, #1
 8006364:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8006368:	2306      	movs	r3, #6
 800636a:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800636e:	2380      	movs	r3, #128	@ 0x80
 8006370:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8006374:	2329      	movs	r3, #41	@ 0x29
 8006376:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800637a:	4b66      	ldr	r3, [pc, #408]	@ (8006514 <f_mkfs+0xc34>)
 800637c:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8006380:	f103 0110 	add.w	r1, r3, #16
 8006384:	f853 0b04 	ldr.w	r0, [r3], #4
 8006388:	428b      	cmp	r3, r1
 800638a:	f842 0b04 	str.w	r0, [r2], #4
 800638e:	d1f9      	bne.n	8006384 <f_mkfs+0xaa4>
	*ptr++ = (BYTE)val; val >>= 8;
 8006390:	f04f 0b55 	mov.w	fp, #85	@ 0x55
	*ptr++ = (BYTE)val;
 8006394:	f04f 09aa 	mov.w	r9, #170	@ 0xaa
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8006398:	8819      	ldrh	r1, [r3, #0]
 800639a:	789b      	ldrb	r3, [r3, #2]
 800639c:	8011      	strh	r1, [r2, #0]
 800639e:	7093      	strb	r3, [r2, #2]
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 80063a0:	4621      	mov	r1, r4
 80063a2:	2301      	movs	r3, #1
 80063a4:	9a01      	ldr	r2, [sp, #4]
 80063a6:	9800      	ldr	r0, [sp, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80063a8:	f884 b1fe 	strb.w	fp, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 80063ac:	f884 91ff 	strb.w	r9, [r4, #511]	@ 0x1ff
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 80063b0:	f7fc fd7d 	bl	8002eae <disk_write>
 80063b4:	4607      	mov	r7, r0
 80063b6:	2800      	cmp	r0, #0
 80063b8:	f47f abf0 	bne.w	8005b9c <f_mkfs+0x2bc>
		if (fsty == FS_FAT32) {
 80063bc:	f1b8 0f03 	cmp.w	r8, #3
 80063c0:	d137      	bne.n	8006432 <f_mkfs+0xb52>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80063c2:	9a01      	ldr	r2, [sp, #4]
 80063c4:	2301      	movs	r3, #1
 80063c6:	4621      	mov	r1, r4
 80063c8:	3206      	adds	r2, #6
 80063ca:	9800      	ldr	r0, [sp, #0]
 80063cc:	f7fc fd6f 	bl	8002eae <disk_write>
			memset(buf, 0, ss);
 80063d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063d4:	4639      	mov	r1, r7
 80063d6:	4620      	mov	r0, r4
 80063d8:	f006 f940 	bl	800c65c <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 80063dc:	2352      	movs	r3, #82	@ 0x52
 80063de:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80063e0:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 80063e2:	2361      	movs	r3, #97	@ 0x61
	*ptr++ = (BYTE)val;
 80063e4:	2241      	movs	r2, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 80063e6:	2172      	movs	r1, #114	@ 0x72
	*ptr++ = (BYTE)val; val >>= 8;
 80063e8:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 80063ea:	f884 31e7 	strb.w	r3, [r4, #487]	@ 0x1e7
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80063ee:	9b05      	ldr	r3, [sp, #20]
	*ptr++ = (BYTE)val;
 80063f0:	70e2      	strb	r2, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 80063f2:	f884 11e4 	strb.w	r1, [r4, #484]	@ 0x1e4
	*ptr++ = (BYTE)val; val >>= 8;
 80063f6:	f884 11e5 	strb.w	r1, [r4, #485]	@ 0x1e5
	*ptr++ = (BYTE)val; val >>= 8;
 80063fa:	f884 21e6 	strb.w	r2, [r4, #486]	@ 0x1e6
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80063fe:	1e59      	subs	r1, r3, #1
 8006400:	f504 70f4 	add.w	r0, r4, #488	@ 0x1e8
 8006404:	f7fc fea4 	bl	8003150 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 8006408:	2302      	movs	r3, #2
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800640a:	9a01      	ldr	r2, [sp, #4]
 800640c:	4621      	mov	r1, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800640e:	f884 31ec 	strb.w	r3, [r4, #492]	@ 0x1ec
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8006412:	3207      	adds	r2, #7
 8006414:	2301      	movs	r3, #1
 8006416:	9800      	ldr	r0, [sp, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006418:	f884 b1fe 	strb.w	fp, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 800641c:	f884 91ff 	strb.w	r9, [r4, #511]	@ 0x1ff
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8006420:	f7fc fd45 	bl	8002eae <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8006424:	2301      	movs	r3, #1
 8006426:	9a01      	ldr	r2, [sp, #4]
 8006428:	4621      	mov	r1, r4
 800642a:	9800      	ldr	r0, [sp, #0]
 800642c:	441a      	add	r2, r3
 800642e:	f7fc fd3e 	bl	8002eae <disk_write>
		memset(buf, 0, sz_buf * ss);
 8006432:	9b06      	ldr	r3, [sp, #24]
 8006434:	2100      	movs	r1, #0
 8006436:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 800643a:	4620      	mov	r0, r4
 800643c:	f022 0201 	bic.w	r2, r2, #1
 8006440:	f006 f90c 	bl	800c65c <memset>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8006444:	f1b8 0f01 	cmp.w	r8, #1
 8006448:	4b33      	ldr	r3, [pc, #204]	@ (8006518 <f_mkfs+0xc38>)
 800644a:	bf18      	it	ne
 800644c:	f06f 0307 	mvnne.w	r3, #7
 8006450:	f04f 0b00 	mov.w	fp, #0
 8006454:	9301      	str	r3, [sp, #4]
			if (fsty == FS_FAT32) {
 8006456:	f1b8 0f03 	cmp.w	r8, #3
 800645a:	f47f aeaf 	bne.w	80061bc <f_mkfs+0x8dc>
	*ptr++ = (BYTE)val; val >>= 8;
 800645e:	23f8      	movs	r3, #248	@ 0xf8
 8006460:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006462:	23ff      	movs	r3, #255	@ 0xff
 8006464:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8006466:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 8006468:	70e3      	strb	r3, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 800646a:	7123      	strb	r3, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800646c:	7163      	strb	r3, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 800646e:	71a3      	strb	r3, [r4, #6]
	*ptr++ = (BYTE)val;
 8006470:	71e3      	strb	r3, [r4, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 8006472:	7223      	strb	r3, [r4, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8006474:	7263      	strb	r3, [r4, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 8006476:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 8006478:	230f      	movs	r3, #15
 800647a:	72e3      	strb	r3, [r4, #11]
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800647c:	462f      	mov	r7, r5
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800647e:	f8dd 9010 	ldr.w	r9, [sp, #16]
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006482:	4621      	mov	r1, r4
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8006484:	45b9      	cmp	r9, r7
 8006486:	bf28      	it	cs
 8006488:	46b9      	movcs	r9, r7
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800648a:	4652      	mov	r2, sl
 800648c:	464b      	mov	r3, r9
 800648e:	9800      	ldr	r0, [sp, #0]
 8006490:	f7fc fd0d 	bl	8002eae <disk_write>
 8006494:	4601      	mov	r1, r0
 8006496:	2800      	cmp	r0, #0
 8006498:	f47f ab80 	bne.w	8005b9c <f_mkfs+0x2bc>
				memset(buf, 0, ss);	/* Rest of FAT area is initially zero */
 800649c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064a0:	4620      	mov	r0, r4
 80064a2:	f006 f8db 	bl	800c65c <memset>
			} while (nsect);
 80064a6:	ebb7 0709 	subs.w	r7, r7, r9
				sect += n; nsect -= n;
 80064aa:	44ca      	add	sl, r9
			} while (nsect);
 80064ac:	d1e7      	bne.n	800647e <f_mkfs+0xb9e>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 80064ae:	f1bb 0f00 	cmp.w	fp, #0
 80064b2:	bf0c      	ite	eq
 80064b4:	2301      	moveq	r3, #1
 80064b6:	2302      	movne	r3, #2
 80064b8:	9a02      	ldr	r2, [sp, #8]
 80064ba:	f04f 0b01 	mov.w	fp, #1
 80064be:	429a      	cmp	r2, r3
 80064c0:	d8c9      	bhi.n	8006456 <f_mkfs+0xb76>
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80064c2:	9b07      	ldr	r3, [sp, #28]
 80064c4:	f1b8 0f03 	cmp.w	r8, #3
 80064c8:	bf18      	it	ne
 80064ca:	461e      	movne	r6, r3
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80064cc:	9d04      	ldr	r5, [sp, #16]
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80064ce:	4652      	mov	r2, sl
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80064d0:	42b5      	cmp	r5, r6
 80064d2:	bf28      	it	cs
 80064d4:	4635      	movcs	r5, r6
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80064d6:	4621      	mov	r1, r4
 80064d8:	462b      	mov	r3, r5
 80064da:	9800      	ldr	r0, [sp, #0]
 80064dc:	f7fc fce7 	bl	8002eae <disk_write>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	f47f ab5b 	bne.w	8005b9c <f_mkfs+0x2bc>
		} while (nsect);
 80064e6:	1b76      	subs	r6, r6, r5
			sect += n; nsect -= n;
 80064e8:	44aa      	add	sl, r5
		} while (nsect);
 80064ea:	d1ef      	bne.n	80064cc <f_mkfs+0xbec>
	} else if (fsty == FS_FAT32) {
 80064ec:	f1b8 0f03 	cmp.w	r8, #3
 80064f0:	f43f ae69 	beq.w	80061c6 <f_mkfs+0x8e6>
	} else if (sz_vol >= 0x10000) {
 80064f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80064f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064fa:	f4bf ae67 	bcs.w	80061cc <f_mkfs+0x8ec>
		sys = 0x04;		/* FAT16 */
 80064fe:	f1b8 0f02 	cmp.w	r8, #2
 8006502:	bf14      	ite	ne
 8006504:	f04f 0901 	movne.w	r9, #1
 8006508:	f04f 0904 	moveq.w	r9, #4
 800650c:	e535      	b.n	8005f7a <f_mkfs+0x69a>
 800650e:	bf00      	nop
 8006510:	0800f414 	.word	0x0800f414
 8006514:	0800f420 	.word	0x0800f420
 8006518:	00fffff8 	.word	0x00fffff8

0800651c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the buffer to store read string */
	int len,		/* Size of string buffer (items) */
	FIL* fp			/* Pointer to the file object */
)
{
 800651c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006520:	4604      	mov	r4, r0
 8006522:	4690      	mov	r8, r2
	int nc = 0;
	TCHAR *p = buff;
 8006524:	4606      	mov	r6, r0
	int nc = 0;
 8006526:	2500      	movs	r5, #0
		}
#endif
	}

#else			/* Byte-by-byte read without any conversion (ANSI/OEM API) */
	len -= 1;	/* Make a room for the terminator */
 8006528:	1e4f      	subs	r7, r1, #1
	while (nc < len) {
 800652a:	42bd      	cmp	r5, r7
 800652c:	da12      	bge.n	8006554 <f_gets+0x38>
		f_read(fp, s, 1, &rc);	/* Get a byte */
 800652e:	ab01      	add	r3, sp, #4
 8006530:	2201      	movs	r2, #1
 8006532:	4669      	mov	r1, sp
 8006534:	4640      	mov	r0, r8
 8006536:	f7fe fe3d 	bl	80051b4 <f_read>
		if (rc != 1) break;		/* EOF? */
 800653a:	9b01      	ldr	r3, [sp, #4]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d109      	bne.n	8006554 <f_gets+0x38>
		dc = s[0];
 8006540:	f89d 3000 	ldrb.w	r3, [sp]
		if (FF_USE_STRFUNC == 2 && dc == '\r') continue;
 8006544:	2b0d      	cmp	r3, #13
 8006546:	d0f0      	beq.n	800652a <f_gets+0xe>
		*p++ = (TCHAR)dc; nc++;
		if (dc == '\n') break;
 8006548:	2b0a      	cmp	r3, #10
		*p++ = (TCHAR)dc; nc++;
 800654a:	f806 3b01 	strb.w	r3, [r6], #1
 800654e:	f105 0501 	add.w	r5, r5, #1
		if (dc == '\n') break;
 8006552:	d1ea      	bne.n	800652a <f_gets+0xe>
	}
#endif

	*p = 0;		/* Terminate the string */
 8006554:	2300      	movs	r3, #0
	return nc ? buff : 0;	/* When no data read due to EOF or error, return with error. */
 8006556:	429d      	cmp	r5, r3
}
 8006558:	bf14      	ite	ne
 800655a:	4620      	movne	r0, r4
 800655c:	4618      	moveq	r0, r3
	*p = 0;		/* Terminate the string */
 800655e:	7033      	strb	r3, [r6, #0]
}
 8006560:	b002      	add	sp, #8
 8006562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006568 <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
 8006568:	287f      	cmp	r0, #127	@ 0x7f
 800656a:	d801      	bhi.n	8006570 <ff_uni2oem+0x8>
		c = (WCHAR)uni;
 800656c:	b280      	uxth	r0, r0
 800656e:	4770      	bx	lr

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 8006570:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006574:	d211      	bcs.n	800659a <ff_uni2oem+0x32>
 8006576:	f240 13b5 	movw	r3, #437	@ 0x1b5
 800657a:	4299      	cmp	r1, r3
 800657c:	d10d      	bne.n	800659a <ff_uni2oem+0x32>
 800657e:	2300      	movs	r3, #0
 8006580:	4a07      	ldr	r2, [pc, #28]	@ (80065a0 <ff_uni2oem+0x38>)
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 8006582:	f832 1b02 	ldrh.w	r1, [r2], #2
 8006586:	4281      	cmp	r1, r0
 8006588:	d101      	bne.n	800658e <ff_uni2oem+0x26>
 800658a:	b29b      	uxth	r3, r3
 800658c:	e002      	b.n	8006594 <ff_uni2oem+0x2c>
 800658e:	3301      	adds	r3, #1
 8006590:	2b80      	cmp	r3, #128	@ 0x80
 8006592:	d1f6      	bne.n	8006582 <ff_uni2oem+0x1a>
			c = (c + 0x80) & 0xFF;
 8006594:	3380      	adds	r3, #128	@ 0x80
 8006596:	b2d8      	uxtb	r0, r3
 8006598:	4770      	bx	lr
	WCHAR c = 0;
 800659a:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	0800f7b0 	.word	0x0800f7b0

080065a4 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
 80065a4:	287f      	cmp	r0, #127	@ 0x7f
 80065a6:	d90d      	bls.n	80065c4 <ff_oem2uni+0x20>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 80065a8:	f240 13b5 	movw	r3, #437	@ 0x1b5
 80065ac:	4299      	cmp	r1, r3
 80065ae:	d108      	bne.n	80065c2 <ff_oem2uni+0x1e>
			if (oem < 0x100) c = p[oem - 0x80];
 80065b0:	28ff      	cmp	r0, #255	@ 0xff
 80065b2:	d806      	bhi.n	80065c2 <ff_oem2uni+0x1e>
 80065b4:	4b04      	ldr	r3, [pc, #16]	@ (80065c8 <ff_oem2uni+0x24>)
 80065b6:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80065ba:	3880      	subs	r0, #128	@ 0x80
 80065bc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80065c0:	4770      	bx	lr
	WCHAR c = 0;
 80065c2:	2000      	movs	r0, #0
		}
	}

	return c;
}
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	0800f7b0 	.word	0x0800f7b0

080065cc <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 80065cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
{
 80065d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (uni < 0x10000) {	/* Is it in BMP? */
 80065d2:	d221      	bcs.n	8006618 <ff_wtoupper+0x4c>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
 80065d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006654 <ff_wtoupper+0x88>)
 80065d6:	4920      	ldr	r1, [pc, #128]	@ (8006658 <ff_wtoupper+0x8c>)
		uc = (WORD)uni;
 80065d8:	b283      	uxth	r3, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
 80065da:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80065de:	bf28      	it	cs
 80065e0:	460a      	movcs	r2, r1
 80065e2:	1d14      	adds	r4, r2, #4
		for (;;) {
			bc = *p++;								/* Get the block base */
 80065e4:	f834 2c04 	ldrh.w	r2, [r4, #-4]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 80065e8:	4621      	mov	r1, r4
 80065ea:	b1a2      	cbz	r2, 8006616 <ff_wtoupper+0x4a>
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d312      	bcc.n	8006616 <ff_wtoupper+0x4a>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80065f0:	f834 5c02 	ldrh.w	r5, [r4, #-2]
 80065f4:	0a2e      	lsrs	r6, r5, #8
 80065f6:	b2ed      	uxtb	r5, r5
			if (uc < bc + nc) {	/* In the block? */
 80065f8:	18af      	adds	r7, r5, r2
 80065fa:	42b8      	cmp	r0, r7
 80065fc:	da23      	bge.n	8006646 <ff_wtoupper+0x7a>
				switch (cmd) {
 80065fe:	2e08      	cmp	r6, #8
 8006600:	d809      	bhi.n	8006616 <ff_wtoupper+0x4a>
 8006602:	e8df f006 	tbb	[pc, r6]
 8006606:	0a05      	.short	0x0a05
 8006608:	17151310 	.word	0x17151310
 800660c:	1b19      	.short	0x1b19
 800660e:	1d          	.byte	0x1d
 800660f:	00          	.byte	0x00
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8006610:	1a80      	subs	r0, r0, r2
 8006612:	f834 3010 	ldrh.w	r3, [r4, r0, lsl #1]
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
		}
		uni = uc;
 8006616:	4618      	mov	r0, r3
	}

	return uni;
}
 8006618:	bdf0      	pop	{r4, r5, r6, r7, pc}
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 800661a:	1a9a      	subs	r2, r3, r2
 800661c:	f002 0201 	and.w	r2, r2, #1
 8006620:	1a9a      	subs	r2, r3, r2
 8006622:	b293      	uxth	r3, r2
 8006624:	e7f7      	b.n	8006616 <ff_wtoupper+0x4a>
				case 2: uc -= 16; break;			/* Shift -16 */
 8006626:	3b10      	subs	r3, #16
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8006628:	b29b      	uxth	r3, r3
 800662a:	e7f4      	b.n	8006616 <ff_wtoupper+0x4a>
				case 3:	uc -= 32; break;			/* Shift -32 */
 800662c:	3b20      	subs	r3, #32
 800662e:	e7fb      	b.n	8006628 <ff_wtoupper+0x5c>
				case 4:	uc -= 48; break;			/* Shift -48 */
 8006630:	3b30      	subs	r3, #48	@ 0x30
 8006632:	e7f9      	b.n	8006628 <ff_wtoupper+0x5c>
				case 5:	uc -= 26; break;			/* Shift -26 */
 8006634:	3b1a      	subs	r3, #26
 8006636:	e7f7      	b.n	8006628 <ff_wtoupper+0x5c>
				case 6:	uc += 8; break;				/* Shift +8 */
 8006638:	3308      	adds	r3, #8
 800663a:	e7f5      	b.n	8006628 <ff_wtoupper+0x5c>
				case 7: uc -= 80; break;			/* Shift -80 */
 800663c:	3b50      	subs	r3, #80	@ 0x50
 800663e:	e7f3      	b.n	8006628 <ff_wtoupper+0x5c>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8006640:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8006644:	e7f0      	b.n	8006628 <ff_wtoupper+0x5c>
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8006646:	3404      	adds	r4, #4
 8006648:	2e00      	cmp	r6, #0
 800664a:	d1cb      	bne.n	80065e4 <ff_wtoupper+0x18>
 800664c:	eb01 0245 	add.w	r2, r1, r5, lsl #1
 8006650:	e7c7      	b.n	80065e2 <ff_wtoupper+0x16>
 8006652:	bf00      	nop
 8006654:	0800f5be 	.word	0x0800f5be
 8006658:	0800f502 	.word	0x0800f502
 800665c:	00000000 	.word	0x00000000

08006660 <GasPrs_CLC>:
uint8_t gaspres_refreshed = 0;
uint16_t gaspres_adc_val = 0;
uint8_t GasPrs_LOW = 0;
uint8_t GasPrs_HIGH = 0;

float GasPrs_CLC(uint16_t adc_val){
 8006660:	b508      	push	{r3, lr}
	float GasPrs_val = 0.0;
	GasPrs_val = (float)adc_val/4095.0*VREF*102.0/51.0*2.5;
 8006662:	f7fa fb41 	bl	8000ce8 <__aeabi_ui2f>
 8006666:	f7f9 fee9 	bl	800043c <__aeabi_f2d>
 800666a:	a30d      	add	r3, pc, #52	@ (adr r3, 80066a0 <GasPrs_CLC+0x40>)
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	f7fa f866 	bl	8000740 <__aeabi_ddiv>
 8006674:	a30c      	add	r3, pc, #48	@ (adr r3, 80066a8 <GasPrs_CLC+0x48>)
 8006676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667a:	f7f9 ff37 	bl	80004ec <__aeabi_dmul>
 800667e:	2200      	movs	r2, #0
 8006680:	4b0b      	ldr	r3, [pc, #44]	@ (80066b0 <GasPrs_CLC+0x50>)
 8006682:	f7f9 ff33 	bl	80004ec <__aeabi_dmul>
 8006686:	2200      	movs	r2, #0
 8006688:	4b0a      	ldr	r3, [pc, #40]	@ (80066b4 <GasPrs_CLC+0x54>)
 800668a:	f7fa f859 	bl	8000740 <__aeabi_ddiv>
 800668e:	2200      	movs	r2, #0
 8006690:	4b09      	ldr	r3, [pc, #36]	@ (80066b8 <GasPrs_CLC+0x58>)
 8006692:	f7f9 ff2b 	bl	80004ec <__aeabi_dmul>
 8006696:	f7fa fa21 	bl	8000adc <__aeabi_d2f>
	return GasPrs_val;
}
 800669a:	bd08      	pop	{r3, pc}
 800669c:	f3af 8000 	nop.w
 80066a0:	00000000 	.word	0x00000000
 80066a4:	40affe00 	.word	0x40affe00
 80066a8:	40000000 	.word	0x40000000
 80066ac:	400a7ae1 	.word	0x400a7ae1
 80066b0:	40598000 	.word	0x40598000
 80066b4:	40498000 	.word	0x40498000
 80066b8:	40040000 	.word	0x40040000

080066bc <refresh_gasPrs>:

void refresh_gasPrs(){
	GasPressure = GasPrs_CLC(gaspres_adc_val);
 80066bc:	4b13      	ldr	r3, [pc, #76]	@ (800670c <refresh_gasPrs+0x50>)
void refresh_gasPrs(){
 80066be:	b510      	push	{r4, lr}
	GasPressure = GasPrs_CLC(gaspres_adc_val);
 80066c0:	8818      	ldrh	r0, [r3, #0]
 80066c2:	f7ff ffcd 	bl	8006660 <GasPrs_CLC>
 80066c6:	4b12      	ldr	r3, [pc, #72]	@ (8006710 <refresh_gasPrs+0x54>)

	if(GasPressure < 0.08f){
 80066c8:	4912      	ldr	r1, [pc, #72]	@ (8006714 <refresh_gasPrs+0x58>)
	GasPressure = GasPrs_CLC(gaspres_adc_val);
 80066ca:	6018      	str	r0, [r3, #0]
 80066cc:	4604      	mov	r4, r0
	if(GasPressure < 0.08f){
 80066ce:	f7fa fbb1 	bl	8000e34 <__aeabi_fcmplt>
 80066d2:	3800      	subs	r0, #0
 80066d4:	bf18      	it	ne
 80066d6:	2001      	movne	r0, #1
 80066d8:	4b0f      	ldr	r3, [pc, #60]	@ (8006718 <refresh_gasPrs+0x5c>)
		GasPrs_LOW = 1;
	}else{
		GasPrs_LOW = 0;
	}

	if(GasPressure > 8.0f){
 80066da:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80066de:	7018      	strb	r0, [r3, #0]
 80066e0:	4620      	mov	r0, r4
 80066e2:	f7fa fbc5 	bl	8000e70 <__aeabi_fcmpgt>
 80066e6:	3800      	subs	r0, #0
 80066e8:	bf18      	it	ne
 80066ea:	2001      	movne	r0, #1
 80066ec:	4b0b      	ldr	r3, [pc, #44]	@ (800671c <refresh_gasPrs+0x60>)
 80066ee:	7018      	strb	r0, [r3, #0]
		GasPrs_HIGH = 1;
	}else{
		GasPrs_HIGH = 0;
	}

	sprintf(Tx_Buffer,"Main.t3.txt=\"%.2f\"\xff\xff\xff",GasPressure);
 80066f0:	4620      	mov	r0, r4
 80066f2:	f7f9 fea3 	bl	800043c <__aeabi_f2d>
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	4809      	ldr	r0, [pc, #36]	@ (8006720 <refresh_gasPrs+0x64>)
 80066fc:	4909      	ldr	r1, [pc, #36]	@ (8006724 <refresh_gasPrs+0x68>)
 80066fe:	f005 fea5 	bl	800c44c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
}
 8006702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8006706:	4806      	ldr	r0, [pc, #24]	@ (8006720 <refresh_gasPrs+0x64>)
 8006708:	f001 bd6c 	b.w	80081e4 <USART1_Tx_HMIdata>
 800670c:	2000091a 	.word	0x2000091a
 8006710:	2000091c 	.word	0x2000091c
 8006714:	3da3d70a 	.word	0x3da3d70a
 8006718:	20000919 	.word	0x20000919
 800671c:	20000918 	.word	0x20000918
 8006720:	20000b8e 	.word	0x20000b8e
 8006724:	0800f8b0 	.word	0x0800f8b0

08006728 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800672c:	2410      	movs	r4, #16
{
 800672e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006730:	4622      	mov	r2, r4
 8006732:	eb0d 0004 	add.w	r0, sp, r4
 8006736:	2100      	movs	r1, #0
 8006738:	f005 ff90 	bl	800c65c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800673c:	4b5f      	ldr	r3, [pc, #380]	@ (80068bc <MX_GPIO_Init+0x194>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 800673e:	f8df a180 	ldr.w	sl, [pc, #384]	@ 80068c0 <MX_GPIO_Init+0x198>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006742:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8006744:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 80068c4 <MX_GPIO_Init+0x19c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006748:	4322      	orrs	r2, r4
 800674a:	619a      	str	r2, [r3, #24]
 800674c:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TF_CS_GPIO_Port, TF_CS_Pin, GPIO_PIN_SET);
 800674e:	f8df 8178 	ldr.w	r8, [pc, #376]	@ 80068c8 <MX_GPIO_Init+0x1a0>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006752:	4022      	ands	r2, r4
 8006754:	9200      	str	r2, [sp, #0]
 8006756:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006758:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 800675a:	4650      	mov	r0, sl
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800675c:	f042 0220 	orr.w	r2, r2, #32
 8006760:	619a      	str	r2, [r3, #24]
 8006762:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8006764:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006768:	f002 0220 	and.w	r2, r2, #32
 800676c:	9201      	str	r2, [sp, #4]
 800676e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006770:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PH1_Pin|BDC_EN2_Pin|LED_Y_Pin|SCL_Pin
 8006772:	4f56      	ldr	r7, [pc, #344]	@ (80068cc <MX_GPIO_Init+0x1a4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006774:	f042 0204 	orr.w	r2, r2, #4
 8006778:	619a      	str	r2, [r3, #24]
 800677a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800677c:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800677e:	f002 0204 	and.w	r2, r2, #4
 8006782:	9202      	str	r2, [sp, #8]
 8006784:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006786:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006788:	2602      	movs	r6, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800678a:	f042 0208 	orr.w	r2, r2, #8
 800678e:	619a      	str	r2, [r3, #24]
 8006790:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8006792:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006794:	f003 0308 	and.w	r3, r3, #8
 8006798:	9303      	str	r3, [sp, #12]
 800679a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 800679c:	f002 fc2a 	bl	8008ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80067a0:	4648      	mov	r0, r9
 80067a2:	2200      	movs	r2, #0
 80067a4:	2102      	movs	r1, #2
 80067a6:	f002 fc25 	bl	8008ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TF_CS_GPIO_Port, TF_CS_Pin, GPIO_PIN_SET);
 80067aa:	4621      	mov	r1, r4
 80067ac:	4640      	mov	r0, r8
 80067ae:	2201      	movs	r2, #1
 80067b0:	f002 fc20 	bl	8008ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, PH1_Pin|BDC_EN2_Pin|LED_Y_Pin|SCL_Pin
 80067b4:	4638      	mov	r0, r7
 80067b6:	2200      	movs	r2, #0
 80067b8:	f24c 21d0 	movw	r1, #49872	@ 0xc2d0
 80067bc:	f002 fc1a 	bl	8008ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BDC_EN1_GPIO_Port, BDC_EN1_Pin, GPIO_PIN_RESET);
 80067c0:	2200      	movs	r2, #0
 80067c2:	4640      	mov	r0, r8
 80067c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80067c8:	f002 fc14 	bl	8008ff4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067cc:	2400      	movs	r4, #0
 80067ce:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067d2:	4650      	mov	r0, sl
 80067d4:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067d6:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067da:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067dc:	f002 fb2c 	bl	8008e38 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80067e4:	4650      	mov	r0, sl
 80067e6:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067e8:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ec:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067ee:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80067f0:	f002 fb22 	bl	8008e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : TF_CD_Pin */
  GPIO_InitStruct.Pin = TF_CD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(TF_CD_GPIO_Port, &GPIO_InitStruct);
 80067f4:	4648      	mov	r0, r9
 80067f6:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067f8:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80067fc:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(TF_CD_GPIO_Port, &GPIO_InitStruct);
 80067fe:	f002 fb1b 	bl	8008e38 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED_G_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8006802:	4648      	mov	r0, r9
 8006804:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006806:	e9cd 6504 	strd	r6, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800680a:	e9cd 5606 	strd	r5, r6, [sp, #24]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 800680e:	f002 fb13 	bl	8008e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : TF_CS_Pin BDC_EN1_Pin */
  GPIO_InitStruct.Pin = TF_CS_Pin|BDC_EN1_Pin;
 8006812:	f44f 7388 	mov.w	r3, #272	@ 0x110
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006816:	4640      	mov	r0, r8
 8006818:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800681a:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800681e:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006822:	f002 fb09 	bl	8008e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_LED_Pin BDC1_STP_Pin NRESET_Pin INCREASE_Pin
                           EX_GAS_Pin */
  GPIO_InitStruct.Pin = BLE_LED_Pin|BDC1_STP_Pin|NRESET_Pin|INCREASE_Pin
 8006826:	f243 130c 	movw	r3, #12556	@ 0x310c
                          |EX_GAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800682a:	4638      	mov	r0, r7
 800682c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800682e:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006832:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006834:	f002 fb00 	bl	8008e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH1_Pin BDC_EN2_Pin LED_Y_Pin SCL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = PH1_Pin|BDC_EN2_Pin|LED_Y_Pin|SCL_Pin
 8006838:	f24c 2350 	movw	r3, #49744	@ 0xc250
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800683c:	4638      	mov	r0, r7
 800683e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006840:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006844:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006848:	f002 faf6 	bl	8008e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_EXTI11_Pin */
  GPIO_InitStruct.Pin = KEY_EXTI11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800684c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006850:	4b1f      	ldr	r3, [pc, #124]	@ (80068d0 <MX_GPIO_Init+0x1a8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(KEY_EXTI11_GPIO_Port, &GPIO_InitStruct);
 8006852:	4640      	mov	r0, r8
 8006854:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006856:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800685a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(KEY_EXTI11_GPIO_Port, &GPIO_InitStruct);
 800685c:	f002 faec 	bl	8008e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : Q_SET_Pin START_Pin */
  GPIO_InitStruct.Pin = Q_SET_Pin|START_Pin;
 8006860:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006864:	4640      	mov	r0, r8
 8006866:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006868:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800686c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800686e:	f002 fae3 	bl	8008e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONFIRM_Pin */
  GPIO_InitStruct.Pin = CONFIRM_Pin;
 8006872:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(CONFIRM_GPIO_Port, &GPIO_InitStruct);
 8006874:	4638      	mov	r0, r7
 8006876:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006878:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800687c:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(CONFIRM_GPIO_Port, &GPIO_InitStruct);
 800687e:	f002 fadb 	bl	8008e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDA_Pin */
  GPIO_InitStruct.Pin = SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8006882:	2311      	movs	r3, #17
 8006884:	2180      	movs	r1, #128	@ 0x80
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8006886:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8006888:	e9cd 1304 	strd	r1, r3, [sp, #16]
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 800688c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800688e:	e9cd 5606 	strd	r5, r6, [sp, #24]
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8006892:	f002 fad1 	bl	8008e38 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8006896:	4a0f      	ldr	r2, [pc, #60]	@ (80068d4 <MX_GPIO_Init+0x1ac>)

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 8006898:	210a      	movs	r1, #10
  __HAL_AFIO_REMAP_PD01_ENABLE();
 800689a:	6853      	ldr	r3, [r2, #4]
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 800689c:	2028      	movs	r0, #40	@ 0x28
  __HAL_AFIO_REMAP_PD01_ENABLE();
 800689e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80068a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068a6:	6053      	str	r3, [r2, #4]
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 80068a8:	4622      	mov	r2, r4
 80068aa:	f002 f90b 	bl	8008ac4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80068ae:	2028      	movs	r0, #40	@ 0x28
 80068b0:	f002 f938 	bl	8008b24 <HAL_NVIC_EnableIRQ>

}
 80068b4:	b008      	add	sp, #32
 80068b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ba:	bf00      	nop
 80068bc:	40021000 	.word	0x40021000
 80068c0:	40011000 	.word	0x40011000
 80068c4:	40011400 	.word	0x40011400
 80068c8:	40010800 	.word	0x40010800
 80068cc:	40010c00 	.word	0x40010c00
 80068d0:	10310000 	.word	0x10310000
 80068d4:	40010000 	.word	0x40010000

080068d8 <SDA_IN>:

/* USER CODE BEGIN 2 */
void SDA_IN(void) {
 80068d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068da:	2300      	movs	r3, #0
 80068dc:	9301      	str	r3, [sp, #4]
 80068de:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pin = SDA_Pin;
 80068e0:	2380      	movs	r3, #128	@ 0x80
 80068e2:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068e4:	2301      	movs	r3, #1
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 80068e6:	4669      	mov	r1, sp
 80068e8:	4803      	ldr	r0, [pc, #12]	@ (80068f8 <SDA_IN+0x20>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068ea:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 80068ec:	f002 faa4 	bl	8008e38 <HAL_GPIO_Init>
}
 80068f0:	b005      	add	sp, #20
 80068f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80068f6:	bf00      	nop
 80068f8:	40010c00 	.word	0x40010c00

080068fc <SDA_OUT>:

void SDA_OUT(void) {
 80068fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  GPIO_InitStruct.Pin = SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80068fe:	2280      	movs	r2, #128	@ 0x80
 8006900:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006902:	2101      	movs	r1, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8006904:	e9cd 2300 	strd	r2, r3, [sp]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006908:	2302      	movs	r3, #2
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 800690a:	4804      	ldr	r0, [pc, #16]	@ (800691c <SDA_OUT+0x20>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800690c:	e9cd 1302 	strd	r1, r3, [sp, #8]
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8006910:	4669      	mov	r1, sp
 8006912:	f002 fa91 	bl	8008e38 <HAL_GPIO_Init>
}
 8006916:	b005      	add	sp, #20
 8006918:	f85d fb04 	ldr.w	pc, [sp], #4
 800691c:	40010c00 	.word	0x40010c00

08006920 <I2C_Start>:
/**
 * @brief  I2C start signal
 * @param  None
 * @retval None
 */
void I2C_Start(void) {
 8006920:	b510      	push	{r4, lr}
  SDA_OUT();
  SDA_H();
 8006922:	4c0c      	ldr	r4, [pc, #48]	@ (8006954 <I2C_Start+0x34>)
  SDA_OUT();
 8006924:	f7ff ffea 	bl	80068fc <SDA_OUT>
  SDA_H();
 8006928:	4620      	mov	r0, r4
 800692a:	2201      	movs	r2, #1
 800692c:	2180      	movs	r1, #128	@ 0x80
 800692e:	f002 fb61 	bl	8008ff4 <HAL_GPIO_WritePin>
  SCL_H();
 8006932:	4620      	mov	r0, r4
 8006934:	2201      	movs	r2, #1
 8006936:	2140      	movs	r1, #64	@ 0x40
 8006938:	f002 fb5c 	bl	8008ff4 <HAL_GPIO_WritePin>
  I2C_Delay();
  SDA_L();
 800693c:	4620      	mov	r0, r4
 800693e:	2200      	movs	r2, #0
 8006940:	2180      	movs	r1, #128	@ 0x80
 8006942:	f002 fb57 	bl	8008ff4 <HAL_GPIO_WritePin>
  I2C_Delay();
  SCL_L();
 8006946:	4620      	mov	r0, r4
  I2C_Delay();
}
 8006948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SCL_L();
 800694c:	2200      	movs	r2, #0
 800694e:	2140      	movs	r1, #64	@ 0x40
 8006950:	f002 bb50 	b.w	8008ff4 <HAL_GPIO_WritePin>
 8006954:	40010c00 	.word	0x40010c00

08006958 <I2C_Stop>:
/**
 * @brief  I2C stop signal
 * @param  None
 * @retval None
 */
void I2C_Stop(void) {
 8006958:	b510      	push	{r4, lr}
  SDA_OUT();
  SCL_L();
 800695a:	4c0c      	ldr	r4, [pc, #48]	@ (800698c <I2C_Stop+0x34>)
  SDA_OUT();
 800695c:	f7ff ffce 	bl	80068fc <SDA_OUT>
  SCL_L();
 8006960:	4620      	mov	r0, r4
 8006962:	2200      	movs	r2, #0
 8006964:	2140      	movs	r1, #64	@ 0x40
 8006966:	f002 fb45 	bl	8008ff4 <HAL_GPIO_WritePin>
  SDA_L();
 800696a:	4620      	mov	r0, r4
 800696c:	2200      	movs	r2, #0
 800696e:	2180      	movs	r1, #128	@ 0x80
 8006970:	f002 fb40 	bl	8008ff4 <HAL_GPIO_WritePin>
  I2C_Delay();
  SCL_H();
 8006974:	4620      	mov	r0, r4
 8006976:	2201      	movs	r2, #1
 8006978:	2140      	movs	r1, #64	@ 0x40
 800697a:	f002 fb3b 	bl	8008ff4 <HAL_GPIO_WritePin>
  SDA_H();
 800697e:	4620      	mov	r0, r4
  I2C_Delay();
}
 8006980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SDA_H();
 8006984:	2201      	movs	r2, #1
 8006986:	2180      	movs	r1, #128	@ 0x80
 8006988:	f002 bb34 	b.w	8008ff4 <HAL_GPIO_WritePin>
 800698c:	40010c00 	.word	0x40010c00

08006990 <I2C_Ack>:
/**
 * @brief  I2C send ACK signal
 * @param  None
 * @retval None
 */
void I2C_Ack(void) {
 8006990:	b510      	push	{r4, lr}
  SCL_L();
 8006992:	4c0c      	ldr	r4, [pc, #48]	@ (80069c4 <I2C_Ack+0x34>)
 8006994:	2200      	movs	r2, #0
 8006996:	4620      	mov	r0, r4
 8006998:	2140      	movs	r1, #64	@ 0x40
 800699a:	f002 fb2b 	bl	8008ff4 <HAL_GPIO_WritePin>
  SDA_OUT();
 800699e:	f7ff ffad 	bl	80068fc <SDA_OUT>
  SDA_L();
 80069a2:	4620      	mov	r0, r4
 80069a4:	2200      	movs	r2, #0
 80069a6:	2180      	movs	r1, #128	@ 0x80
 80069a8:	f002 fb24 	bl	8008ff4 <HAL_GPIO_WritePin>
  I2C_Delay();
  SCL_H();
 80069ac:	4620      	mov	r0, r4
 80069ae:	2201      	movs	r2, #1
 80069b0:	2140      	movs	r1, #64	@ 0x40
 80069b2:	f002 fb1f 	bl	8008ff4 <HAL_GPIO_WritePin>
  I2C_Delay();
  SCL_L();
 80069b6:	4620      	mov	r0, r4
  I2C_Delay();
}
 80069b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SCL_L();
 80069bc:	2200      	movs	r2, #0
 80069be:	2140      	movs	r1, #64	@ 0x40
 80069c0:	f002 bb18 	b.w	8008ff4 <HAL_GPIO_WritePin>
 80069c4:	40010c00 	.word	0x40010c00

080069c8 <I2C_NAck>:
/**
 * @brief  I2C send NACK signal
 * @param  None
 * @retval None
 */
void I2C_NAck(void) {
 80069c8:	b510      	push	{r4, lr}
  SCL_L();
 80069ca:	4c0c      	ldr	r4, [pc, #48]	@ (80069fc <I2C_NAck+0x34>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	4620      	mov	r0, r4
 80069d0:	2140      	movs	r1, #64	@ 0x40
 80069d2:	f002 fb0f 	bl	8008ff4 <HAL_GPIO_WritePin>
  SDA_OUT();
 80069d6:	f7ff ff91 	bl	80068fc <SDA_OUT>
  SDA_H();
 80069da:	4620      	mov	r0, r4
 80069dc:	2201      	movs	r2, #1
 80069de:	2180      	movs	r1, #128	@ 0x80
 80069e0:	f002 fb08 	bl	8008ff4 <HAL_GPIO_WritePin>
  I2C_Delay();
  SCL_H();
 80069e4:	4620      	mov	r0, r4
 80069e6:	2201      	movs	r2, #1
 80069e8:	2140      	movs	r1, #64	@ 0x40
 80069ea:	f002 fb03 	bl	8008ff4 <HAL_GPIO_WritePin>
  I2C_Delay();
  SCL_L();
 80069ee:	4620      	mov	r0, r4
  I2C_Delay();
}
 80069f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SCL_L();
 80069f4:	2200      	movs	r2, #0
 80069f6:	2140      	movs	r1, #64	@ 0x40
 80069f8:	f002 bafc 	b.w	8008ff4 <HAL_GPIO_WritePin>
 80069fc:	40010c00 	.word	0x40010c00

08006a00 <I2C_WaitAck>:
/**
 * @brief  I2C wait ACK signal
 * @param  None
 * @retval 1: ACK 0: NACK
 */
uint8_t I2C_WaitAck(void) {
 8006a00:	b538      	push	{r3, r4, r5, lr}
  uint8_t ucErrTime = 0;
  SDA_IN();
 8006a02:	f7ff ff69 	bl	80068d8 <SDA_IN>
  SDA_H();
 8006a06:	2201      	movs	r2, #1
 8006a08:	2180      	movs	r1, #128	@ 0x80
 8006a0a:	480f      	ldr	r0, [pc, #60]	@ (8006a48 <I2C_WaitAck+0x48>)
 8006a0c:	f002 faf2 	bl	8008ff4 <HAL_GPIO_WritePin>
  I2C_Delay();
  SCL_H();
 8006a10:	2201      	movs	r2, #1
 8006a12:	2140      	movs	r1, #64	@ 0x40
 8006a14:	480c      	ldr	r0, [pc, #48]	@ (8006a48 <I2C_WaitAck+0x48>)
 8006a16:	f002 faed 	bl	8008ff4 <HAL_GPIO_WritePin>
 8006a1a:	25fb      	movs	r5, #251	@ 0xfb
  I2C_Delay();
  while (SDA_READ()) {
 8006a1c:	2180      	movs	r1, #128	@ 0x80
 8006a1e:	480a      	ldr	r0, [pc, #40]	@ (8006a48 <I2C_WaitAck+0x48>)
 8006a20:	f002 fae2 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8006a24:	4604      	mov	r4, r0
 8006a26:	b928      	cbnz	r0, 8006a34 <I2C_WaitAck+0x34>
    if (ucErrTime > 250) {
      I2C_Stop();
      return 1;
    }
  }
  SCL_L();
 8006a28:	4602      	mov	r2, r0
 8006a2a:	2140      	movs	r1, #64	@ 0x40
 8006a2c:	4806      	ldr	r0, [pc, #24]	@ (8006a48 <I2C_WaitAck+0x48>)
 8006a2e:	f002 fae1 	bl	8008ff4 <HAL_GPIO_WritePin>
  I2C_Delay();
  return 0;
 8006a32:	e006      	b.n	8006a42 <I2C_WaitAck+0x42>
    if (ucErrTime > 250) {
 8006a34:	3d01      	subs	r5, #1
 8006a36:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 8006a3a:	d1ef      	bne.n	8006a1c <I2C_WaitAck+0x1c>
      I2C_Stop();
 8006a3c:	f7ff ff8c 	bl	8006958 <I2C_Stop>
      return 1;
 8006a40:	2401      	movs	r4, #1
}
 8006a42:	4620      	mov	r0, r4
 8006a44:	bd38      	pop	{r3, r4, r5, pc}
 8006a46:	bf00      	nop
 8006a48:	40010c00 	.word	0x40010c00

08006a4c <I2C_SendByte>:
/**
 * @brief  I2C send byte
 * @param  sendbyte: byte to send
 * @retval None
 */
void I2C_SendByte(uint8_t SendByte) {
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	4604      	mov	r4, r0
  uint8_t i = 0;
  SDA_OUT();
 8006a50:	f7ff ff54 	bl	80068fc <SDA_OUT>
  SCL_L();
 8006a54:	2200      	movs	r2, #0
 8006a56:	2140      	movs	r1, #64	@ 0x40
 8006a58:	480e      	ldr	r0, [pc, #56]	@ (8006a94 <I2C_SendByte+0x48>)
 8006a5a:	f002 facb 	bl	8008ff4 <HAL_GPIO_WritePin>
 8006a5e:	2508      	movs	r5, #8
  for (i = 0; i < 8; i++) {
    if (SendByte & 0x80)
      SDA_H();
    else
      SDA_L();
 8006a60:	4e0c      	ldr	r6, [pc, #48]	@ (8006a94 <I2C_SendByte+0x48>)
    if (SendByte & 0x80)
 8006a62:	0623      	lsls	r3, r4, #24
      SDA_H();
 8006a64:	bf4c      	ite	mi
 8006a66:	2201      	movmi	r2, #1
      SDA_L();
 8006a68:	2200      	movpl	r2, #0
 8006a6a:	2180      	movs	r1, #128	@ 0x80
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	f002 fac1 	bl	8008ff4 <HAL_GPIO_WritePin>
    SendByte <<= 1;
    I2C_Delay();
    SCL_H();
 8006a72:	2201      	movs	r2, #1
 8006a74:	2140      	movs	r1, #64	@ 0x40
 8006a76:	4630      	mov	r0, r6
 8006a78:	f002 fabc 	bl	8008ff4 <HAL_GPIO_WritePin>
  for (i = 0; i < 8; i++) {
 8006a7c:	3d01      	subs	r5, #1
    I2C_Delay();
    SCL_L();
 8006a7e:	2200      	movs	r2, #0
 8006a80:	2140      	movs	r1, #64	@ 0x40
 8006a82:	4630      	mov	r0, r6
 8006a84:	f002 fab6 	bl	8008ff4 <HAL_GPIO_WritePin>
    SendByte <<= 1;
 8006a88:	0064      	lsls	r4, r4, #1
  for (i = 0; i < 8; i++) {
 8006a8a:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
    SendByte <<= 1;
 8006a8e:	b2e4      	uxtb	r4, r4
  for (i = 0; i < 8; i++) {
 8006a90:	d1e7      	bne.n	8006a62 <I2C_SendByte+0x16>
    I2C_Delay();
  }
}
 8006a92:	bd70      	pop	{r4, r5, r6, pc}
 8006a94:	40010c00 	.word	0x40010c00

08006a98 <I2C_ReadByte>:
/**
 * @brief  I2C read byte
 * @param  None
 * @retval read byte
 */
uint8_t I2C_ReadByte(void) {
 8006a98:	b570      	push	{r4, r5, r6, lr}
  uint8_t i = 0, ReceiveByte = 0;
  SDA_IN();
 8006a9a:	f7ff ff1d 	bl	80068d8 <SDA_IN>
 8006a9e:	2508      	movs	r5, #8
  uint8_t i = 0, ReceiveByte = 0;
 8006aa0:	2400      	movs	r4, #0
  for (i = 0; i < 8; i++) {
    SCL_L();
 8006aa2:	4e0f      	ldr	r6, [pc, #60]	@ (8006ae0 <I2C_ReadByte+0x48>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2140      	movs	r1, #64	@ 0x40
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f002 faa3 	bl	8008ff4 <HAL_GPIO_WritePin>
    I2C_Delay();
    SCL_H();
 8006aae:	2140      	movs	r1, #64	@ 0x40
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f002 fa9e 	bl	8008ff4 <HAL_GPIO_WritePin>
    ReceiveByte <<= 1;
 8006ab8:	0064      	lsls	r4, r4, #1
    if (SDA_READ())
 8006aba:	2180      	movs	r1, #128	@ 0x80
 8006abc:	4630      	mov	r0, r6
    ReceiveByte <<= 1;
 8006abe:	b2e4      	uxtb	r4, r4
    if (SDA_READ())
 8006ac0:	f002 fa92 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8006ac4:	b108      	cbz	r0, 8006aca <I2C_ReadByte+0x32>
      ReceiveByte++;
 8006ac6:	3401      	adds	r4, #1
 8006ac8:	b2e4      	uxtb	r4, r4
  for (i = 0; i < 8; i++) {
 8006aca:	3d01      	subs	r5, #1
 8006acc:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 8006ad0:	d1e8      	bne.n	8006aa4 <I2C_ReadByte+0xc>
    I2C_Delay();
  }
  SCL_L();
 8006ad2:	462a      	mov	r2, r5
 8006ad4:	2140      	movs	r1, #64	@ 0x40
 8006ad6:	4802      	ldr	r0, [pc, #8]	@ (8006ae0 <I2C_ReadByte+0x48>)
 8006ad8:	f002 fa8c 	bl	8008ff4 <HAL_GPIO_WritePin>
  return ReceiveByte;
}
 8006adc:	4620      	mov	r0, r4
 8006ade:	bd70      	pop	{r4, r5, r6, pc}
 8006ae0:	40010c00 	.word	0x40010c00

08006ae4 <I2C_WriteData>:
 * @param  SlaveAddress: slave address
 * @param  Data: data buffer
 * @param  len: data length
 * @retval 0: success 1: fail
 */
uint8_t I2C_WriteData(uint8_t SlaveAddress, uint8_t *Data, uint8_t len) {
 8006ae4:	b570      	push	{r4, r5, r6, lr}
 8006ae6:	4605      	mov	r5, r0
 8006ae8:	460c      	mov	r4, r1
 8006aea:	4616      	mov	r6, r2
  uint8_t i = 0;
  I2C_Start();
 8006aec:	f7ff ff18 	bl	8006920 <I2C_Start>
  I2C_SendByte(SlaveAddress);
 8006af0:	4628      	mov	r0, r5
 8006af2:	f7ff ffab 	bl	8006a4c <I2C_SendByte>
  if (I2C_WaitAck()) {
 8006af6:	f7ff ff83 	bl	8006a00 <I2C_WaitAck>
 8006afa:	4605      	mov	r5, r0
 8006afc:	b968      	cbnz	r0, 8006b1a <I2C_WriteData+0x36>
 8006afe:	4426      	add	r6, r4
    I2C_Stop();
    return 1;
  }
  for (i = 0; i < len; i++) {
 8006b00:	42b4      	cmp	r4, r6
 8006b02:	d102      	bne.n	8006b0a <I2C_WriteData+0x26>
    if (I2C_WaitAck()) {
      I2C_Stop();
      return 1;
    }
  }
  I2C_Stop();
 8006b04:	f7ff ff28 	bl	8006958 <I2C_Stop>
  return 0;
 8006b08:	e00a      	b.n	8006b20 <I2C_WriteData+0x3c>
    I2C_SendByte(Data[i]);
 8006b0a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006b0e:	f7ff ff9d 	bl	8006a4c <I2C_SendByte>
    if (I2C_WaitAck()) {
 8006b12:	f7ff ff75 	bl	8006a00 <I2C_WaitAck>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d0f2      	beq.n	8006b00 <I2C_WriteData+0x1c>
    I2C_Stop();
 8006b1a:	f7ff ff1d 	bl	8006958 <I2C_Stop>
    return 1;
 8006b1e:	2501      	movs	r5, #1
}
 8006b20:	4628      	mov	r0, r5
 8006b22:	bd70      	pop	{r4, r5, r6, pc}

08006b24 <I2C_ReadData>:
 * @param  SlaveAddress: slave address
 * @param  Data: data buffer
 * @param  len: data length
 * @retval 0: success 1: fail
 */
uint8_t I2C_ReadData(uint8_t SlaveAddress, uint8_t *Data, uint8_t len) {
 8006b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b28:	4604      	mov	r4, r0
 8006b2a:	460f      	mov	r7, r1
 8006b2c:	4616      	mov	r6, r2
  uint8_t i = 0;
  I2C_Start();
 8006b2e:	f7ff fef7 	bl	8006920 <I2C_Start>
  I2C_SendByte(SlaveAddress + 1);
 8006b32:	1c60      	adds	r0, r4, #1
 8006b34:	b2c0      	uxtb	r0, r0
 8006b36:	f7ff ff89 	bl	8006a4c <I2C_SendByte>
  if (I2C_WaitAck()) {
 8006b3a:	f7ff ff61 	bl	8006a00 <I2C_WaitAck>
 8006b3e:	4604      	mov	r4, r0
 8006b40:	b938      	cbnz	r0, 8006b52 <I2C_ReadData+0x2e>
 8006b42:	4605      	mov	r5, r0
    I2C_Stop();
    return 1;
  }
  for (i = 0; i < len; i++) {
    Data[i] = I2C_ReadByte();
    if (i == (len - 1))
 8006b44:	f106 38ff 	add.w	r8, r6, #4294967295
  for (i = 0; i < len; i++) {
 8006b48:	42b5      	cmp	r5, r6
 8006b4a:	d108      	bne.n	8006b5e <I2C_ReadData+0x3a>
      I2C_NAck();
    else
      I2C_Ack();
  }
  I2C_Stop();
 8006b4c:	f7ff ff04 	bl	8006958 <I2C_Stop>
  return 0;
 8006b50:	e002      	b.n	8006b58 <I2C_ReadData+0x34>
    I2C_Stop();
 8006b52:	f7ff ff01 	bl	8006958 <I2C_Stop>
    return 1;
 8006b56:	2401      	movs	r4, #1
}
 8006b58:	4620      	mov	r0, r4
 8006b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Data[i] = I2C_ReadByte();
 8006b5e:	f7ff ff9b 	bl	8006a98 <I2C_ReadByte>
    if (i == (len - 1))
 8006b62:	45a8      	cmp	r8, r5
    Data[i] = I2C_ReadByte();
 8006b64:	5578      	strb	r0, [r7, r5]
    if (i == (len - 1))
 8006b66:	d103      	bne.n	8006b70 <I2C_ReadData+0x4c>
      I2C_NAck();
 8006b68:	f7ff ff2e 	bl	80069c8 <I2C_NAck>
  for (i = 0; i < len; i++) {
 8006b6c:	3501      	adds	r5, #1
 8006b6e:	e7eb      	b.n	8006b48 <I2C_ReadData+0x24>
      I2C_Ack();
 8006b70:	f7ff ff0e 	bl	8006990 <I2C_Ack>
 8006b74:	e7fa      	b.n	8006b6c <I2C_ReadData+0x48>
	...

08006b78 <key_scan>:
volatile uint16_t key_press_time = 0;

volatile enum KEY_VAL key_code;

//在按键中断中调用
uint8_t key_scan(){
 8006b78:	b508      	push	{r3, lr}

	if(KEY_EXTI11 == GPIO_PIN_RESET){
 8006b7a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006b7e:	4829      	ldr	r0, [pc, #164]	@ (8006c24 <key_scan+0xac>)
 8006b80:	f002 fa32 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8006b84:	b108      	cbz	r0, 8006b8a <key_scan+0x12>
			else if(!START_KEY) 		return START_KEY_PRESS;
			else if(!NRESET_KEY) 		return NRESET_KEY_PRESS;
			else if(!PAUSE_KEY) 		return PAUSE_KEY_PRESS;
		}
	}
	return 0;
 8006b86:	2000      	movs	r0, #0
}
 8006b88:	bd08      	pop	{r3, pc}
		HAL_Delay(20);
 8006b8a:	2014      	movs	r0, #20
 8006b8c:	f001 fc6a 	bl	8008464 <HAL_Delay>
		if(KEY_EXTI11 == GPIO_PIN_RESET){
 8006b90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006b94:	4823      	ldr	r0, [pc, #140]	@ (8006c24 <key_scan+0xac>)
 8006b96:	f002 fa27 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	d1f3      	bne.n	8006b86 <key_scan+0xe>
			if(!DECREASE_KEY) 			return DECREASE_KEY_PRESS;
 8006b9e:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 8006ba2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006ba6:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 8006baa:	f002 fa1d 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8006bae:	b358      	cbz	r0, 8006c08 <key_scan+0x90>
			else if(!CONFIRM_KEY) 	return CONFIRM_KEY_PRESS;
 8006bb0:	2120      	movs	r1, #32
 8006bb2:	481d      	ldr	r0, [pc, #116]	@ (8006c28 <key_scan+0xb0>)
 8006bb4:	f002 fa18 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8006bb8:	b340      	cbz	r0, 8006c0c <key_scan+0x94>
			else if(!INCREASE_KEY) 	return INCREASE_KEY_PRESS;
 8006bba:	2108      	movs	r1, #8
 8006bbc:	481a      	ldr	r0, [pc, #104]	@ (8006c28 <key_scan+0xb0>)
 8006bbe:	f002 fa13 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8006bc2:	b328      	cbz	r0, 8006c10 <key_scan+0x98>
			else if(!Q_SET_KEY) 		return Q_SET_KEY_PRESS;
 8006bc4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006bc8:	4816      	ldr	r0, [pc, #88]	@ (8006c24 <key_scan+0xac>)
 8006bca:	f002 fa0d 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8006bce:	b308      	cbz	r0, 8006c14 <key_scan+0x9c>
			else if(!EX_GAS_KEY) 		return EX_GAS_KEY_PRESS;
 8006bd0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006bd4:	4814      	ldr	r0, [pc, #80]	@ (8006c28 <key_scan+0xb0>)
 8006bd6:	f002 fa07 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8006bda:	b1e8      	cbz	r0, 8006c18 <key_scan+0xa0>
			else if(!START_KEY) 		return START_KEY_PRESS;
 8006bdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006be0:	4810      	ldr	r0, [pc, #64]	@ (8006c24 <key_scan+0xac>)
 8006be2:	f002 fa01 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8006be6:	b1c8      	cbz	r0, 8006c1c <key_scan+0xa4>
			else if(!NRESET_KEY) 		return NRESET_KEY_PRESS;
 8006be8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006bec:	480e      	ldr	r0, [pc, #56]	@ (8006c28 <key_scan+0xb0>)
 8006bee:	f002 f9fb 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8006bf2:	b1a8      	cbz	r0, 8006c20 <key_scan+0xa8>
			else if(!PAUSE_KEY) 		return PAUSE_KEY_PRESS;
 8006bf4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006bf8:	480c      	ldr	r0, [pc, #48]	@ (8006c2c <key_scan+0xb4>)
 8006bfa:	f002 f9f5 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8006bfe:	fab0 f080 	clz	r0, r0
 8006c02:	0940      	lsrs	r0, r0, #5
 8006c04:	00c0      	lsls	r0, r0, #3
 8006c06:	e7bf      	b.n	8006b88 <key_scan+0x10>
			if(!DECREASE_KEY) 			return DECREASE_KEY_PRESS;
 8006c08:	2001      	movs	r0, #1
 8006c0a:	e7bd      	b.n	8006b88 <key_scan+0x10>
			else if(!CONFIRM_KEY) 	return CONFIRM_KEY_PRESS;
 8006c0c:	2002      	movs	r0, #2
 8006c0e:	e7bb      	b.n	8006b88 <key_scan+0x10>
			else if(!INCREASE_KEY) 	return INCREASE_KEY_PRESS;
 8006c10:	2003      	movs	r0, #3
 8006c12:	e7b9      	b.n	8006b88 <key_scan+0x10>
			else if(!Q_SET_KEY) 		return Q_SET_KEY_PRESS;
 8006c14:	2004      	movs	r0, #4
 8006c16:	e7b7      	b.n	8006b88 <key_scan+0x10>
			else if(!EX_GAS_KEY) 		return EX_GAS_KEY_PRESS;
 8006c18:	2005      	movs	r0, #5
 8006c1a:	e7b5      	b.n	8006b88 <key_scan+0x10>
			else if(!START_KEY) 		return START_KEY_PRESS;
 8006c1c:	2006      	movs	r0, #6
 8006c1e:	e7b3      	b.n	8006b88 <key_scan+0x10>
			else if(!NRESET_KEY) 		return NRESET_KEY_PRESS;
 8006c20:	2007      	movs	r0, #7
 8006c22:	e7b1      	b.n	8006b88 <key_scan+0x10>
 8006c24:	40010800 	.word	0x40010800
 8006c28:	40010c00 	.word	0x40010c00
 8006c2c:	40011000 	.word	0x40011000

08006c30 <deal_key>:

void deal_key(){
		if(key_value && key_press_sigle){
 8006c30:	4b79      	ldr	r3, [pc, #484]	@ (8006e18 <deal_key+0x1e8>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d045      	beq.n	8006cc4 <deal_key+0x94>
 8006c38:	4a78      	ldr	r2, [pc, #480]	@ (8006e1c <deal_key+0x1ec>)
 8006c3a:	7811      	ldrb	r1, [r2, #0]
 8006c3c:	2900      	cmp	r1, #0
 8006c3e:	d041      	beq.n	8006cc4 <deal_key+0x94>
		key_press_sigle = 0;//清除单次按标记，防止重复执行
 8006c40:	2100      	movs	r1, #0

		switch(key_value){//检测按键值
 8006c42:	3b01      	subs	r3, #1
		key_press_sigle = 0;//清除单次按标记，防止重复执行
 8006c44:	7011      	strb	r1, [r2, #0]
		switch(key_value){//检测按键值
 8006c46:	2b07      	cmp	r3, #7
 8006c48:	d83c      	bhi.n	8006cc4 <deal_key+0x94>
 8006c4a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006c4e:	0008      	.short	0x0008
 8006c50:	0062002e 	.word	0x0062002e
 8006c54:	008e0084 	.word	0x008e0084
 8006c58:	00c30094 	.word	0x00c30094
 8006c5c:	00cd      	.short	0x00cd
			case DECREASE_KEY_PRESS://减小
			{
			if(page_location == Main_page){
 8006c5e:	4b70      	ldr	r3, [pc, #448]	@ (8006e20 <deal_key+0x1f0>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	b993      	cbnz	r3, 8006c8a <deal_key+0x5a>
				if(!waiting_start && !Injecting){//不处于已按确认等待按开始键状态
 8006c64:	4b6f      	ldr	r3, [pc, #444]	@ (8006e24 <deal_key+0x1f4>)
 8006c66:	4a70      	ldr	r2, [pc, #448]	@ (8006e28 <deal_key+0x1f8>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	7812      	ldrb	r2, [r2, #0]
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	d129      	bne.n	8006cc4 <deal_key+0x94>
					if(Dosage_set > 1000)
 8006c70:	496e      	ldr	r1, [pc, #440]	@ (8006e2c <deal_key+0x1fc>)
 8006c72:	880b      	ldrh	r3, [r1, #0]
 8006c74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c78:	d902      	bls.n	8006c80 <deal_key+0x50>
						Dosage_set = 0;
 8006c7a:	800a      	strh	r2, [r1, #0]
				if(!waiting_start && !Injecting){
					if(Dosage_set < 1000)
						Dosage_set+=2;
					else if(Dosage_set >= 1000)
						Dosage_set = 1000;
					key_value_Refresh = 1;
 8006c7c:	4b6c      	ldr	r3, [pc, #432]	@ (8006e30 <deal_key+0x200>)
 8006c7e:	e00f      	b.n	8006ca0 <deal_key+0x70>
					else if(Dosage_set > 0)
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0fb      	beq.n	8006c7c <deal_key+0x4c>
						Dosage_set -= 2;
 8006c84:	3b02      	subs	r3, #2
 8006c86:	800b      	strh	r3, [r1, #0]
					key_value_Refresh = 1;
 8006c88:	e7f8      	b.n	8006c7c <deal_key+0x4c>
			if(page_location == File_M_page){//光标下移
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d11a      	bne.n	8006cc4 <deal_key+0x94>
				last_focus_line = current_focus_line;
 8006c8e:	4a69      	ldr	r2, [pc, #420]	@ (8006e34 <deal_key+0x204>)
 8006c90:	4969      	ldr	r1, [pc, #420]	@ (8006e38 <deal_key+0x208>)
 8006c92:	7813      	ldrb	r3, [r2, #0]
 8006c94:	700b      	strb	r3, [r1, #0]
				if(current_focus_line > 0){
 8006c96:	b133      	cbz	r3, 8006ca6 <deal_key+0x76>
					current_focus_line--;
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	7013      	strb	r3, [r2, #0]
				dir_display_refresh = 1;
 8006c9e:	4b67      	ldr	r3, [pc, #412]	@ (8006e3c <deal_key+0x20c>)
 8006ca0:	2201      	movs	r2, #1
				pause_pressed = 1;
				if(Injecting && !pause_state){
					pause_state = 1;
				}
				else if(Injecting && pause_state && !cheat_flag){
					pause_state = 0;
 8006ca2:	701a      	strb	r2, [r3, #0]
			}
			}
			break;
		}
	}
}
 8006ca4:	e00e      	b.n	8006cc4 <deal_key+0x94>
					current_focus_line = 5;
 8006ca6:	2305      	movs	r3, #5
 8006ca8:	e7f8      	b.n	8006c9c <deal_key+0x6c>
				if(page_location == Main_page){
 8006caa:	4b5d      	ldr	r3, [pc, #372]	@ (8006e20 <deal_key+0x1f0>)
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d128      	bne.n	8006d04 <deal_key+0xd4>
					if(!Injecting && (Dosage_set != 0)){
 8006cb2:	4b5d      	ldr	r3, [pc, #372]	@ (8006e28 <deal_key+0x1f8>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	b133      	cbz	r3, 8006cc6 <deal_key+0x96>
					if(Injecting && cheat_flag){
 8006cb8:	4b61      	ldr	r3, [pc, #388]	@ (8006e40 <deal_key+0x210>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	b99b      	cbnz	r3, 8006ce6 <deal_key+0xb6>
					if(Injecting && over_pressure){
 8006cbe:	4b61      	ldr	r3, [pc, #388]	@ (8006e44 <deal_key+0x214>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	b933      	cbnz	r3, 8006cd2 <deal_key+0xa2>
}
 8006cc4:	4770      	bx	lr
					if(!Injecting && (Dosage_set != 0)){
 8006cc6:	4b59      	ldr	r3, [pc, #356]	@ (8006e2c <deal_key+0x1fc>)
 8006cc8:	881b      	ldrh	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d0fa      	beq.n	8006cc4 <deal_key+0x94>
						Dosage_load = Dosage_set;
 8006cce:	4a5e      	ldr	r2, [pc, #376]	@ (8006e48 <deal_key+0x218>)
 8006cd0:	8013      	strh	r3, [r2, #0]
						confirm_time = now_time;
 8006cd2:	4b5e      	ldr	r3, [pc, #376]	@ (8006e4c <deal_key+0x21c>)
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	4b5e      	ldr	r3, [pc, #376]	@ (8006e50 <deal_key+0x220>)
 8006cd8:	601a      	str	r2, [r3, #0]
						confirm_pressed = 1;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	4a5d      	ldr	r2, [pc, #372]	@ (8006e54 <deal_key+0x224>)
 8006cde:	7013      	strb	r3, [r2, #0]
						waiting_start = 1;
 8006ce0:	4a50      	ldr	r2, [pc, #320]	@ (8006e24 <deal_key+0x1f4>)
					key_code = KEY_CANCEL;
 8006ce2:	7013      	strb	r3, [r2, #0]
 8006ce4:	4770      	bx	lr
						Dosage_load = RemainingTimes*2;
 8006ce6:	4b5c      	ldr	r3, [pc, #368]	@ (8006e58 <deal_key+0x228>)
 8006ce8:	4a57      	ldr	r2, [pc, #348]	@ (8006e48 <deal_key+0x218>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	8013      	strh	r3, [r2, #0]
						confirm_time = now_time;
 8006cf0:	4b56      	ldr	r3, [pc, #344]	@ (8006e4c <deal_key+0x21c>)
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	4b56      	ldr	r3, [pc, #344]	@ (8006e50 <deal_key+0x220>)
 8006cf6:	601a      	str	r2, [r3, #0]
						confirm_pressed = 1;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	4a56      	ldr	r2, [pc, #344]	@ (8006e54 <deal_key+0x224>)
 8006cfc:	7013      	strb	r3, [r2, #0]
						waiting_start = 1;
 8006cfe:	4a49      	ldr	r2, [pc, #292]	@ (8006e24 <deal_key+0x1f4>)
 8006d00:	7013      	strb	r3, [r2, #0]
					if(Injecting && over_pressure){
 8006d02:	e7dc      	b.n	8006cbe <deal_key+0x8e>
				if(page_location == File_M_page){//确认、翻页
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d1dd      	bne.n	8006cc4 <deal_key+0x94>
					focus_key_pressed = 1;
 8006d08:	4a54      	ldr	r2, [pc, #336]	@ (8006e5c <deal_key+0x22c>)
 8006d0a:	7013      	strb	r3, [r2, #0]
					key_code = KEY_CONFIRM;
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	4b54      	ldr	r3, [pc, #336]	@ (8006e60 <deal_key+0x230>)
 8006d10:	e7c7      	b.n	8006ca2 <deal_key+0x72>
			if(page_location == Main_page){
 8006d12:	4b43      	ldr	r3, [pc, #268]	@ (8006e20 <deal_key+0x1f0>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	b983      	cbnz	r3, 8006d3a <deal_key+0x10a>
				if(!waiting_start && !Injecting){
 8006d18:	4b42      	ldr	r3, [pc, #264]	@ (8006e24 <deal_key+0x1f4>)
 8006d1a:	4a43      	ldr	r2, [pc, #268]	@ (8006e28 <deal_key+0x1f8>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	7812      	ldrb	r2, [r2, #0]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	d1cf      	bne.n	8006cc4 <deal_key+0x94>
					if(Dosage_set < 1000)
 8006d24:	4a41      	ldr	r2, [pc, #260]	@ (8006e2c <deal_key+0x1fc>)
 8006d26:	8813      	ldrh	r3, [r2, #0]
 8006d28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
						Dosage_set = 1000;
 8006d2c:	bf2e      	itee	cs
 8006d2e:	f44f 737a 	movcs.w	r3, #1000	@ 0x3e8
						Dosage_set+=2;
 8006d32:	3302      	addcc	r3, #2
 8006d34:	b29b      	uxthcc	r3, r3
 8006d36:	8013      	strh	r3, [r2, #0]
 8006d38:	e7a0      	b.n	8006c7c <deal_key+0x4c>
			if(page_location == File_M_page){//光标上移
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d1c2      	bne.n	8006cc4 <deal_key+0x94>
				last_focus_line = current_focus_line;
 8006d3e:	4a3d      	ldr	r2, [pc, #244]	@ (8006e34 <deal_key+0x204>)
 8006d40:	493d      	ldr	r1, [pc, #244]	@ (8006e38 <deal_key+0x208>)
 8006d42:	7813      	ldrb	r3, [r2, #0]
				if(current_focus_line < 5){
 8006d44:	2b04      	cmp	r3, #4
				last_focus_line = current_focus_line;
 8006d46:	700b      	strb	r3, [r1, #0]
				if(current_focus_line < 5){
 8006d48:	d801      	bhi.n	8006d4e <deal_key+0x11e>
					current_focus_line++;
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	e7a6      	b.n	8006c9c <deal_key+0x6c>
				}else if(current_focus_line == 5){
 8006d4e:	2b05      	cmp	r3, #5
 8006d50:	d1a5      	bne.n	8006c9e <deal_key+0x6e>
					current_focus_line = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	e7a2      	b.n	8006c9c <deal_key+0x6c>
			if(page_location == Main_page){
 8006d56:	4b32      	ldr	r3, [pc, #200]	@ (8006e20 <deal_key+0x1f0>)
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	b90b      	cbnz	r3, 8006d60 <deal_key+0x130>
				read_i2c = 1;
 8006d5c:	4b41      	ldr	r3, [pc, #260]	@ (8006e64 <deal_key+0x234>)
 8006d5e:	e79f      	b.n	8006ca0 <deal_key+0x70>
			if(page_location == File_M_page){//删除文件
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d1af      	bne.n	8006cc4 <deal_key+0x94>
				key_code = KEY_DELETE;
 8006d64:	2203      	movs	r2, #3
 8006d66:	4b3e      	ldr	r3, [pc, #248]	@ (8006e60 <deal_key+0x230>)
 8006d68:	e79b      	b.n	8006ca2 <deal_key+0x72>
			if(page_location == Main_page){
 8006d6a:	4b2d      	ldr	r3, [pc, #180]	@ (8006e20 <deal_key+0x1f0>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d12a      	bne.n	8006dc8 <deal_key+0x198>
				EX_GAS_pressed = 1;
 8006d72:	4b3d      	ldr	r3, [pc, #244]	@ (8006e68 <deal_key+0x238>)
 8006d74:	e794      	b.n	8006ca0 <deal_key+0x70>
			if(page_location == Main_page){
 8006d76:	4b2a      	ldr	r3, [pc, #168]	@ (8006e20 <deal_key+0x1f0>)
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	bb2b      	cbnz	r3, 8006dc8 <deal_key+0x198>
				if(waiting_start && (Dosage_load > 0) && !Injecting){
 8006d7c:	4b29      	ldr	r3, [pc, #164]	@ (8006e24 <deal_key+0x1f4>)
 8006d7e:	781a      	ldrb	r2, [r3, #0]
 8006d80:	4b3a      	ldr	r3, [pc, #232]	@ (8006e6c <deal_key+0x23c>)
 8006d82:	b1f2      	cbz	r2, 8006dc2 <deal_key+0x192>
 8006d84:	4a30      	ldr	r2, [pc, #192]	@ (8006e48 <deal_key+0x218>)
 8006d86:	8812      	ldrh	r2, [r2, #0]
 8006d88:	b1da      	cbz	r2, 8006dc2 <deal_key+0x192>
 8006d8a:	4a27      	ldr	r2, [pc, #156]	@ (8006e28 <deal_key+0x1f8>)
 8006d8c:	7812      	ldrb	r2, [r2, #0]
 8006d8e:	b9c2      	cbnz	r2, 8006dc2 <deal_key+0x192>
					start_pressed = 1;
 8006d90:	2101      	movs	r1, #1
 8006d92:	7019      	strb	r1, [r3, #0]
					Dosage_set = 0;
 8006d94:	4b25      	ldr	r3, [pc, #148]	@ (8006e2c <deal_key+0x1fc>)
 8006d96:	801a      	strh	r2, [r3, #0]
				if(cheat_flag){
 8006d98:	4a29      	ldr	r2, [pc, #164]	@ (8006e40 <deal_key+0x210>)
 8006d9a:	7813      	ldrb	r3, [r2, #0]
 8006d9c:	b13b      	cbz	r3, 8006dae <deal_key+0x17e>
					cheat_flag = 0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	7013      	strb	r3, [r2, #0]
					GasPrs_LOW_time = 0;
 8006da2:	4a33      	ldr	r2, [pc, #204]	@ (8006e70 <deal_key+0x240>)
 8006da4:	8013      	strh	r3, [r2, #0]
					GasPrs_LOW = 0;
 8006da6:	4a33      	ldr	r2, [pc, #204]	@ (8006e74 <deal_key+0x244>)
 8006da8:	7013      	strb	r3, [r2, #0]
					pause_state = 0;
 8006daa:	4a33      	ldr	r2, [pc, #204]	@ (8006e78 <deal_key+0x248>)
 8006dac:	7013      	strb	r3, [r2, #0]
				if(over_pressure){
 8006dae:	4a25      	ldr	r2, [pc, #148]	@ (8006e44 <deal_key+0x214>)
 8006db0:	7813      	ldrb	r3, [r2, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d086      	beq.n	8006cc4 <deal_key+0x94>
					over_pressure = 0;
 8006db6:	2300      	movs	r3, #0
 8006db8:	7013      	strb	r3, [r2, #0]
					GasPrs_HIGH = 0;
 8006dba:	4a30      	ldr	r2, [pc, #192]	@ (8006e7c <deal_key+0x24c>)
 8006dbc:	7013      	strb	r3, [r2, #0]
					pause_state = 0;
 8006dbe:	4a2e      	ldr	r2, [pc, #184]	@ (8006e78 <deal_key+0x248>)
 8006dc0:	e78f      	b.n	8006ce2 <deal_key+0xb2>
					start_pressed = 0;
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	e7e7      	b.n	8006d98 <deal_key+0x168>
			if(page_location == File_M_page){
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	f47f af7b 	bne.w	8006cc4 <deal_key+0x94>
				key_code = KEY_SENDFILE;
 8006dce:	2204      	movs	r2, #4
 8006dd0:	4b23      	ldr	r3, [pc, #140]	@ (8006e60 <deal_key+0x230>)
 8006dd2:	e766      	b.n	8006ca2 <deal_key+0x72>
				if(page_location == Main_page){
 8006dd4:	4b12      	ldr	r3, [pc, #72]	@ (8006e20 <deal_key+0x1f0>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	b90b      	cbnz	r3, 8006dde <deal_key+0x1ae>
					nReset_pressed = 1;
 8006dda:	4b29      	ldr	r3, [pc, #164]	@ (8006e80 <deal_key+0x250>)
 8006ddc:	e760      	b.n	8006ca0 <deal_key+0x70>
				if(page_location == File_M_page){
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	f47f af70 	bne.w	8006cc4 <deal_key+0x94>
					key_code = KEY_CANCEL;
 8006de4:	4a1e      	ldr	r2, [pc, #120]	@ (8006e60 <deal_key+0x230>)
 8006de6:	e77c      	b.n	8006ce2 <deal_key+0xb2>
			if(page_location == Main_page){
 8006de8:	4b0d      	ldr	r3, [pc, #52]	@ (8006e20 <deal_key+0x1f0>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f47f af69 	bne.w	8006cc4 <deal_key+0x94>
				pause_pressed = 1;
 8006df2:	2201      	movs	r2, #1
 8006df4:	4b23      	ldr	r3, [pc, #140]	@ (8006e84 <deal_key+0x254>)
 8006df6:	701a      	strb	r2, [r3, #0]
				if(Injecting && !pause_state){
 8006df8:	4b0b      	ldr	r3, [pc, #44]	@ (8006e28 <deal_key+0x1f8>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f43f af61 	beq.w	8006cc4 <deal_key+0x94>
 8006e02:	4b1d      	ldr	r3, [pc, #116]	@ (8006e78 <deal_key+0x248>)
 8006e04:	7819      	ldrb	r1, [r3, #0]
 8006e06:	2900      	cmp	r1, #0
 8006e08:	f43f af4b 	beq.w	8006ca2 <deal_key+0x72>
				else if(Injecting && pause_state && !cheat_flag){
 8006e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8006e40 <deal_key+0x210>)
 8006e0e:	7812      	ldrb	r2, [r2, #0]
 8006e10:	2a00      	cmp	r2, #0
 8006e12:	f47f af57 	bne.w	8006cc4 <deal_key+0x94>
 8006e16:	e744      	b.n	8006ca2 <deal_key+0x72>
 8006e18:	20000928 	.word	0x20000928
 8006e1c:	20000925 	.word	0x20000925
 8006e20:	20000370 	.word	0x20000370
 8006e24:	20000930 	.word	0x20000930
 8006e28:	20000944 	.word	0x20000944
 8006e2c:	200008c6 	.word	0x200008c6
 8006e30:	20000927 	.word	0x20000927
 8006e34:	20000385 	.word	0x20000385
 8006e38:	20000384 	.word	0x20000384
 8006e3c:	20000387 	.word	0x20000387
 8006e40:	20000a5d 	.word	0x20000a5d
 8006e44:	20000a5e 	.word	0x20000a5e
 8006e48:	200008c4 	.word	0x200008c4
 8006e4c:	20000a40 	.word	0x20000a40
 8006e50:	20000a58 	.word	0x20000a58
 8006e54:	2000092f 	.word	0x2000092f
 8006e58:	20000a54 	.word	0x20000a54
 8006e5c:	20000371 	.word	0x20000371
 8006e60:	20000920 	.word	0x20000920
 8006e64:	200008c8 	.word	0x200008c8
 8006e68:	20000929 	.word	0x20000929
 8006e6c:	2000092e 	.word	0x2000092e
 8006e70:	20000a62 	.word	0x20000a62
 8006e74:	20000919 	.word	0x20000919
 8006e78:	20000942 	.word	0x20000942
 8006e7c:	20000918 	.word	0x20000918
 8006e80:	2000092d 	.word	0x2000092d
 8006e84:	2000092c 	.word	0x2000092c

08006e88 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (HAL_GPIO_ReadPin(KEY_EXTI11_GPIO_Port, KEY_EXTI11_Pin) == GPIO_PIN_SET) {
 8006e88:	f44f 6100 	mov.w	r1, #2048	@ 0x800
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8006e8c:	b538      	push	{r3, r4, r5, lr}
	if (HAL_GPIO_ReadPin(KEY_EXTI11_GPIO_Port, KEY_EXTI11_Pin) == GPIO_PIN_SET) {
 8006e8e:	4833      	ldr	r0, [pc, #204]	@ (8006f5c <HAL_GPIO_EXTI_Callback+0xd4>)
 8006e90:	f002 f8aa 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8006e94:	2801      	cmp	r0, #1
 8006e96:	d134      	bne.n	8006f02 <HAL_GPIO_EXTI_Callback+0x7a>
	// 处理上升沿中断
		HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_RESET);
		key_pressed = 0;
 8006e98:	2400      	movs	r4, #0
		HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_RESET);
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	2110      	movs	r1, #16
 8006e9e:	4830      	ldr	r0, [pc, #192]	@ (8006f60 <HAL_GPIO_EXTI_Callback+0xd8>)
 8006ea0:	f002 f8a8 	bl	8008ff4 <HAL_GPIO_WritePin>
		key_pressed = 0;
 8006ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8006f64 <HAL_GPIO_EXTI_Callback+0xdc>)
		key_now_time = 0;
		key_value_Refresh = 0;
		key_press_time = 0;
		key_press_long = 0;

		if(HAL_GPIO_ReadPin(NRESET_GPIO_Port,NRESET_Pin) == GPIO_PIN_SET){
 8006ea6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
		key_pressed = 0;
 8006eaa:	701c      	strb	r4, [r3, #0]
		key_value = 0;
 8006eac:	4b2e      	ldr	r3, [pc, #184]	@ (8006f68 <HAL_GPIO_EXTI_Callback+0xe0>)
		if(HAL_GPIO_ReadPin(NRESET_GPIO_Port,NRESET_Pin) == GPIO_PIN_SET){
 8006eae:	482c      	ldr	r0, [pc, #176]	@ (8006f60 <HAL_GPIO_EXTI_Callback+0xd8>)
		key_value = 0;
 8006eb0:	701c      	strb	r4, [r3, #0]
		key_last_time = 0;
 8006eb2:	4b2e      	ldr	r3, [pc, #184]	@ (8006f6c <HAL_GPIO_EXTI_Callback+0xe4>)
 8006eb4:	601c      	str	r4, [r3, #0]
		key_now_time = 0;
 8006eb6:	4b2e      	ldr	r3, [pc, #184]	@ (8006f70 <HAL_GPIO_EXTI_Callback+0xe8>)
 8006eb8:	601c      	str	r4, [r3, #0]
		key_value_Refresh = 0;
 8006eba:	4b2e      	ldr	r3, [pc, #184]	@ (8006f74 <HAL_GPIO_EXTI_Callback+0xec>)
 8006ebc:	701c      	strb	r4, [r3, #0]
		key_press_time = 0;
 8006ebe:	4b2e      	ldr	r3, [pc, #184]	@ (8006f78 <HAL_GPIO_EXTI_Callback+0xf0>)
 8006ec0:	801c      	strh	r4, [r3, #0]
		key_press_long = 0;
 8006ec2:	4b2e      	ldr	r3, [pc, #184]	@ (8006f7c <HAL_GPIO_EXTI_Callback+0xf4>)
 8006ec4:	701c      	strb	r4, [r3, #0]
		if(HAL_GPIO_ReadPin(NRESET_GPIO_Port,NRESET_Pin) == GPIO_PIN_SET){
 8006ec6:	f002 f88f 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8006eca:	2801      	cmp	r0, #1
			nReset_pressed = 0;
 8006ecc:	bf08      	it	eq
 8006ece:	4b2c      	ldreq	r3, [pc, #176]	@ (8006f80 <HAL_GPIO_EXTI_Callback+0xf8>)
		}

		if(HAL_GPIO_ReadPin(PAUSE_GPIO_Port,PAUSE_Pin) == GPIO_PIN_SET){
 8006ed0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006ed4:	482b      	ldr	r0, [pc, #172]	@ (8006f84 <HAL_GPIO_EXTI_Callback+0xfc>)
			nReset_pressed = 0;
 8006ed6:	bf08      	it	eq
 8006ed8:	701c      	strbeq	r4, [r3, #0]
		if(HAL_GPIO_ReadPin(PAUSE_GPIO_Port,PAUSE_Pin) == GPIO_PIN_SET){
 8006eda:	f002 f885 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8006ede:	2801      	cmp	r0, #1
			pause_pressed = 0;
 8006ee0:	bf04      	itt	eq
 8006ee2:	2200      	moveq	r2, #0
 8006ee4:	4b28      	ldreq	r3, [pc, #160]	@ (8006f88 <HAL_GPIO_EXTI_Callback+0x100>)
		}

		if(HAL_GPIO_ReadPin(EX_GAS_GPIO_Port,EX_GAS_Pin) == GPIO_PIN_SET){
 8006ee6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006eea:	481d      	ldr	r0, [pc, #116]	@ (8006f60 <HAL_GPIO_EXTI_Callback+0xd8>)
			pause_pressed = 0;
 8006eec:	bf08      	it	eq
 8006eee:	701a      	strbeq	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(EX_GAS_GPIO_Port,EX_GAS_Pin) == GPIO_PIN_SET){
 8006ef0:	f002 f87a 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8006ef4:	2801      	cmp	r0, #1
 8006ef6:	d104      	bne.n	8006f02 <HAL_GPIO_EXTI_Callback+0x7a>
			EX_GAS_start = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	4a24      	ldr	r2, [pc, #144]	@ (8006f8c <HAL_GPIO_EXTI_Callback+0x104>)
 8006efc:	7013      	strb	r3, [r2, #0]
			EX_GAS_pressed = 0;
 8006efe:	4a24      	ldr	r2, [pc, #144]	@ (8006f90 <HAL_GPIO_EXTI_Callback+0x108>)
 8006f00:	7013      	strb	r3, [r2, #0]
		}
	}

	if (HAL_GPIO_ReadPin(KEY_EXTI11_GPIO_Port, KEY_EXTI11_Pin) == GPIO_PIN_RESET) {
 8006f02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006f06:	4815      	ldr	r0, [pc, #84]	@ (8006f5c <HAL_GPIO_EXTI_Callback+0xd4>)
 8006f08:	f002 f86e 	bl	8008fe8 <HAL_GPIO_ReadPin>
	// 处理下降沿中断
		if(!key_scan_lock){
 8006f0c:	4b21      	ldr	r3, [pc, #132]	@ (8006f94 <HAL_GPIO_EXTI_Callback+0x10c>)
 8006f0e:	781a      	ldrb	r2, [r3, #0]
 8006f10:	4310      	orrs	r0, r2
 8006f12:	f010 05ff 	ands.w	r5, r0, #255	@ 0xff
 8006f16:	d11f      	bne.n	8006f58 <HAL_GPIO_EXTI_Callback+0xd0>
			key_scan_lock = 1;//防止多次执行下降沿中断函数
 8006f18:	2401      	movs	r4, #1
 8006f1a:	701c      	strb	r4, [r3, #0]
			key_lock_time = now_time;
 8006f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8006f98 <HAL_GPIO_EXTI_Callback+0x110>)

			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_SET);
 8006f1e:	2110      	movs	r1, #16
			key_lock_time = now_time;
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	4b1e      	ldr	r3, [pc, #120]	@ (8006f9c <HAL_GPIO_EXTI_Callback+0x114>)
			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_SET);
 8006f24:	480e      	ldr	r0, [pc, #56]	@ (8006f60 <HAL_GPIO_EXTI_Callback+0xd8>)
			key_lock_time = now_time;
 8006f26:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_SET);
 8006f28:	4622      	mov	r2, r4
 8006f2a:	f002 f863 	bl	8008ff4 <HAL_GPIO_WritePin>
			key_pressed = 1;
 8006f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f64 <HAL_GPIO_EXTI_Callback+0xdc>)
 8006f30:	701c      	strb	r4, [r3, #0]
			key_value = key_scan();
 8006f32:	f7ff fe21 	bl	8006b78 <key_scan>
 8006f36:	4b0c      	ldr	r3, [pc, #48]	@ (8006f68 <HAL_GPIO_EXTI_Callback+0xe0>)
 8006f38:	7018      	strb	r0, [r3, #0]
			key_last_time = key_now_time;
 8006f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f70 <HAL_GPIO_EXTI_Callback+0xe8>)
			key_press_sigle = 1;

			deal_key();
			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_RESET);
 8006f3c:	4808      	ldr	r0, [pc, #32]	@ (8006f60 <HAL_GPIO_EXTI_Callback+0xd8>)
			key_last_time = key_now_time;
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	4b0a      	ldr	r3, [pc, #40]	@ (8006f6c <HAL_GPIO_EXTI_Callback+0xe4>)
 8006f42:	601a      	str	r2, [r3, #0]
			key_press_sigle = 1;
 8006f44:	4b16      	ldr	r3, [pc, #88]	@ (8006fa0 <HAL_GPIO_EXTI_Callback+0x118>)
 8006f46:	701c      	strb	r4, [r3, #0]
			deal_key();
 8006f48:	f7ff fe72 	bl	8006c30 <deal_key>
			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_RESET);
 8006f4c:	462a      	mov	r2, r5
		}
	}
}
 8006f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_RESET);
 8006f52:	2110      	movs	r1, #16
 8006f54:	f002 b84e 	b.w	8008ff4 <HAL_GPIO_WritePin>
}
 8006f58:	bd38      	pop	{r3, r4, r5, pc}
 8006f5a:	bf00      	nop
 8006f5c:	40010800 	.word	0x40010800
 8006f60:	40010c00 	.word	0x40010c00
 8006f64:	20000924 	.word	0x20000924
 8006f68:	20000928 	.word	0x20000928
 8006f6c:	20000a48 	.word	0x20000a48
 8006f70:	20000a44 	.word	0x20000a44
 8006f74:	20000927 	.word	0x20000927
 8006f78:	20000922 	.word	0x20000922
 8006f7c:	20000926 	.word	0x20000926
 8006f80:	2000092d 	.word	0x2000092d
 8006f84:	40011000 	.word	0x40011000
 8006f88:	2000092c 	.word	0x2000092c
 8006f8c:	20000a4c 	.word	0x20000a4c
 8006f90:	20000929 	.word	0x20000929
 8006f94:	20000938 	.word	0x20000938
 8006f98:	20000a40 	.word	0x20000a40
 8006f9c:	20000934 	.word	0x20000934
 8006fa0:	20000925 	.word	0x20000925

08006fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006fa4:	b530      	push	{r4, r5, lr}
 8006fa6:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006fa8:	2220      	movs	r2, #32
 8006faa:	2100      	movs	r1, #0
 8006fac:	a80b      	add	r0, sp, #44	@ 0x2c
 8006fae:	f005 fb55 	bl	800c65c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006fb2:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006fb4:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	eb0d 0002 	add.w	r0, sp, r2
 8006fbc:	f005 fb4e 	bl	800c65c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006fc0:	462a      	mov	r2, r5
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	a801      	add	r0, sp, #4
 8006fc6:	f005 fb49 	bl	800c65c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006fca:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006fcc:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006fce:	e9cd 350e 	strd	r3, r5, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8006fd2:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006fd6:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006fd8:	940a      	str	r4, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006fda:	9411      	str	r4, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8006fdc:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006fde:	f002 f823 	bl	8009028 <HAL_RCC_OscConfig>
 8006fe2:	b108      	cbz	r0, 8006fe8 <SystemClock_Config+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006fe4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006fe6:	e7fe      	b.n	8006fe6 <SystemClock_Config+0x42>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006fe8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006fea:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006fee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006ff2:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006ff4:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	a805      	add	r0, sp, #20
 8006ffc:	f002 f9d6 	bl	80093ac <HAL_RCC_ClockConfig>
 8007000:	b108      	cbz	r0, 8007006 <SystemClock_Config+0x62>
 8007002:	b672      	cpsid	i
  while (1)
 8007004:	e7fe      	b.n	8007004 <SystemClock_Config+0x60>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8007006:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800700a:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800700c:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800700e:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007010:	f002 fa88 	bl	8009524 <HAL_RCCEx_PeriphCLKConfig>
 8007014:	b108      	cbz	r0, 800701a <SystemClock_Config+0x76>
 8007016:	b672      	cpsid	i
  while (1)
 8007018:	e7fe      	b.n	8007018 <SystemClock_Config+0x74>
}
 800701a:	b015      	add	sp, #84	@ 0x54
 800701c:	bd30      	pop	{r4, r5, pc}
	...

08007020 <main>:
  first_run_clcDos = 1;
 8007020:	2401      	movs	r4, #1
{
 8007022:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
  HAL_Init();
 8007026:	f001 f9f9 	bl	800841c <HAL_Init>
  SystemClock_Config();
 800702a:	f7ff ffbb 	bl	8006fa4 <SystemClock_Config>
  MX_GPIO_Init();
 800702e:	f7ff fb7b 	bl	8006728 <MX_GPIO_Init>
  MX_DMA_Init();
 8007032:	f7fb ff71 	bl	8002f18 <MX_DMA_Init>
  MX_ADC1_Init();
 8007036:	f7fb fd61 	bl	8002afc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800703a:	f000 ffc1 	bl	8007fc0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800703e:	f000 fc3d 	bl	80078bc <MX_TIM4_Init>
  MX_TIM3_Init();
 8007042:	f000 fc05 	bl	8007850 <MX_TIM3_Init>
  MX_SPI1_Init();
 8007046:	f000 faf3 	bl	8007630 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800704a:	f000 ffd5 	bl	8007ff8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800704e:	f000 ffef 	bl	8008030 <MX_USART3_UART_Init>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8007052:	4872      	ldr	r0, [pc, #456]	@ (800721c <main+0x1fc>)
 8007054:	f001 fcb2 	bl	80089bc <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_rslt, 4);
 8007058:	4971      	ldr	r1, [pc, #452]	@ (8007220 <main+0x200>)
 800705a:	2204      	movs	r2, #4
 800705c:	486f      	ldr	r0, [pc, #444]	@ (800721c <main+0x1fc>)
 800705e:	f001 fb7b 	bl	8008758 <HAL_ADC_Start_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 8007062:	4b70      	ldr	r3, [pc, #448]	@ (8007224 <main+0x204>)
  HAL_Delay(10);
 8007064:	200a      	movs	r0, #10
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 8007066:	681a      	ldr	r2, [r3, #0]
  first_run_clcDos = 1;
 8007068:	4e6f      	ldr	r6, [pc, #444]	@ (8007228 <main+0x208>)
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 800706a:	6813      	ldr	r3, [r2, #0]
	page_location = Main_page;
 800706c:	4f6f      	ldr	r7, [pc, #444]	@ (800722c <main+0x20c>)
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 800706e:	f023 0304 	bic.w	r3, r3, #4
 8007072:	6013      	str	r3, [r2, #0]
  HAL_Delay(10);
 8007074:	f001 f9f6 	bl	8008464 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim3);
 8007078:	486d      	ldr	r0, [pc, #436]	@ (8007230 <main+0x210>)
 800707a:	f002 fcf7 	bl	8009a6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800707e:	486d      	ldr	r0, [pc, #436]	@ (8007234 <main+0x214>)
 8007080:	f002 fcf4 	bl	8009a6c <HAL_TIM_Base_Start_IT>
  HAL_Delay(10);
 8007084:	200a      	movs	r0, #10
 8007086:	f001 f9ed 	bl	8008464 <HAL_Delay>
  HMI_init();
 800708a:	f7fa fb8f 	bl	80017ac <HMI_init>
	HAL_Delay(100);
 800708e:	2064      	movs	r0, #100	@ 0x64
 8007090:	f001 f9e8 	bl	8008464 <HAL_Delay>
  Motor_init();
 8007094:	f000 f940 	bl	8007318 <Motor_init>
  first_run = 1;
 8007098:	4b67      	ldr	r3, [pc, #412]	@ (8007238 <main+0x218>)
  first_run_clcDos = 1;
 800709a:	7034      	strb	r4, [r6, #0]
  first_run = 1;
 800709c:	701c      	strb	r4, [r3, #0]
	READOUT_SAVE_DATA();
 800709e:	f7fa f8bf 	bl	8001220 <READOUT_SAVE_DATA>
	AD24C02_DataCheck();
 80070a2:	f7fa f8ff 	bl	80012a4 <AD24C02_DataCheck>
	HAL_Delay(10);
 80070a6:	200a      	movs	r0, #10
 80070a8:	f001 f9dc 	bl	8008464 <HAL_Delay>
	page_location = Main_page;
 80070ac:	2300      	movs	r3, #0
  HAL_UART_Receive_DMA(&huart3, &gps_rx_buffer[0], 1); // 启动接收
 80070ae:	4622      	mov	r2, r4
 80070b0:	4962      	ldr	r1, [pc, #392]	@ (800723c <main+0x21c>)
 80070b2:	4863      	ldr	r0, [pc, #396]	@ (8007240 <main+0x220>)
	page_location = Main_page;
 80070b4:	703b      	strb	r3, [r7, #0]
  HAL_UART_Receive_DMA(&huart3, &gps_rx_buffer[0], 1); // 启动接收
 80070b6:	f003 fa8f 	bl	800a5d8 <HAL_UART_Receive_DMA>
  SDCard_states = SDCard_InsertCheck();
 80070ba:	f7fa fec5 	bl	8001e48 <SDCard_InsertCheck>
 80070be:	4d61      	ldr	r5, [pc, #388]	@ (8007244 <main+0x224>)
 80070c0:	6028      	str	r0, [r5, #0]
  if(SDCard_states == 0){
 80070c2:	b908      	cbnz	r0, 80070c8 <main+0xa8>
    CSV_sheet_Init();
 80070c4:	f7fa feda 	bl	8001e7c <CSV_sheet_Init>
  AD24C02_Read2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);//读取最后一次保存的行号
 80070c8:	2050      	movs	r0, #80	@ 0x50
 80070ca:	495f      	ldr	r1, [pc, #380]	@ (8007248 <main+0x228>)
 80070cc:	f7fa f897 	bl	80011fe <AD24C02_Read2Byte>
  	if(i++ >=10000){
 80070d0:	f8df 8178 	ldr.w	r8, [pc, #376]	@ 800724c <main+0x22c>
			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin,GPIO_PIN_SET);
 80070d4:	f8df 9178 	ldr.w	r9, [pc, #376]	@ 8007250 <main+0x230>
  	if(i++ >=10000){
 80070d8:	f8b8 3000 	ldrh.w	r3, [r8]
 80070dc:	1c5a      	adds	r2, r3, #1
 80070de:	f8a8 2000 	strh.w	r2, [r8]
 80070e2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d916      	bls.n	8007118 <main+0xf8>
			if(SDCard_states != 0 || !SD_INSERT){
 80070ea:	682b      	ldr	r3, [r5, #0]
 80070ec:	b143      	cbz	r3, 8007100 <main+0xe0>
				SDCard_states = SDCard_InsertCheck();
 80070ee:	f7fa feab 	bl	8001e48 <SDCard_InsertCheck>
				HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_SET);
 80070f2:	2201      	movs	r2, #1
				SDCard_states = SDCard_InsertCheck();
 80070f4:	6028      	str	r0, [r5, #0]
				HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_RESET);
 80070f6:	2110      	movs	r1, #16
 80070f8:	4856      	ldr	r0, [pc, #344]	@ (8007254 <main+0x234>)
 80070fa:	f001 ff7b 	bl	8008ff4 <HAL_GPIO_WritePin>
 80070fe:	e008      	b.n	8007112 <main+0xf2>
			if(SDCard_states != 0 || !SD_INSERT){
 8007100:	2101      	movs	r1, #1
 8007102:	4855      	ldr	r0, [pc, #340]	@ (8007258 <main+0x238>)
 8007104:	f001 ff70 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8007108:	2800      	cmp	r0, #0
 800710a:	d1f0      	bne.n	80070ee <main+0xce>
			else if(SDCard_states == 0){
 800710c:	682a      	ldr	r2, [r5, #0]
 800710e:	2a00      	cmp	r2, #0
 8007110:	d0f1      	beq.n	80070f6 <main+0xd6>
			i = 0;
 8007112:	2300      	movs	r3, #0
 8007114:	f8a8 3000 	strh.w	r3, [r8]
  	if(Injecting && (page_location == Main_page)){
 8007118:	f8df b140 	ldr.w	fp, [pc, #320]	@ 800725c <main+0x23c>
 800711c:	783c      	ldrb	r4, [r7, #0]
 800711e:	f89b 3000 	ldrb.w	r3, [fp]
 8007122:	b363      	cbz	r3, 800717e <main+0x15e>
 8007124:	b984      	cbnz	r4, 8007148 <main+0x128>
			sprintf(Tx_Buffer,"Main.t0.txt=\"正在注药\"\xff\xff\xff");
 8007126:	494e      	ldr	r1, [pc, #312]	@ (8007260 <main+0x240>)
 8007128:	484e      	ldr	r0, [pc, #312]	@ (8007264 <main+0x244>)
 800712a:	f005 fb92 	bl	800c852 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800712e:	484d      	ldr	r0, [pc, #308]	@ (8007264 <main+0x244>)
 8007130:	f001 f858 	bl	80081e4 <USART1_Tx_HMIdata>
			if(first_run_clcDos == 1){
 8007134:	7833      	ldrb	r3, [r6, #0]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d104      	bne.n	8007144 <main+0x124>
				Inject_times(Dosage_load);
 800713a:	4b4b      	ldr	r3, [pc, #300]	@ (8007268 <main+0x248>)
 800713c:	8818      	ldrh	r0, [r3, #0]
 800713e:	f000 f9a7 	bl	8007490 <Inject_times>
				first_run_clcDos = 0;
 8007142:	7034      	strb	r4, [r6, #0]
			Inject_working();
 8007144:	f000 f9d2 	bl	80074ec <Inject_working>
		if(clear_counter && (page_location == Main_page)){
 8007148:	4b48      	ldr	r3, [pc, #288]	@ (800726c <main+0x24c>)
 800714a:	781a      	ldrb	r2, [r3, #0]
 800714c:	2a00      	cmp	r2, #0
 800714e:	d0c3      	beq.n	80070d8 <main+0xb8>
 8007150:	783c      	ldrb	r4, [r7, #0]
 8007152:	2c00      	cmp	r4, #0
 8007154:	d1c0      	bne.n	80070d8 <main+0xb8>
			clear_counter = 0;
 8007156:	701c      	strb	r4, [r3, #0]
			Refresh_Dosage();
 8007158:	f7fb ffd0 	bl	80030fc <Refresh_Dosage>
			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin,GPIO_PIN_SET);
 800715c:	2201      	movs	r2, #1
 800715e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007162:	4648      	mov	r0, r9
 8007164:	f001 ff46 	bl	8008ff4 <HAL_GPIO_WritePin>
			HAL_Delay(300);
 8007168:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800716c:	f001 f97a 	bl	8008464 <HAL_Delay>
			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin,GPIO_PIN_RESET);
 8007170:	4622      	mov	r2, r4
 8007172:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007176:	4648      	mov	r0, r9
 8007178:	f001 ff3c 	bl	8008ff4 <HAL_GPIO_WritePin>
 800717c:	e7ac      	b.n	80070d8 <main+0xb8>
		if(!Injecting && EX_GAS_start && (page_location == Main_page)){
 800717e:	f8df a0f0 	ldr.w	sl, [pc, #240]	@ 8007270 <main+0x250>
 8007182:	f89a 3000 	ldrb.w	r3, [sl]
 8007186:	b163      	cbz	r3, 80071a2 <main+0x182>
 8007188:	2c00      	cmp	r4, #0
 800718a:	d144      	bne.n	8007216 <main+0x1f6>
				while(!Injecting && EX_GAS_start)
 800718c:	f89b 3000 	ldrb.w	r3, [fp]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1d9      	bne.n	8007148 <main+0x128>
 8007194:	f89a 3000 	ldrb.w	r3, [sl]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0d5      	beq.n	8007148 <main+0x128>
					Ex_GAS_Cycle();
 800719c:	f000 f95c 	bl	8007458 <Ex_GAS_Cycle>
 80071a0:	e7f4      	b.n	800718c <main+0x16c>
		if(!Injecting && (page_location == File_M_page)){
 80071a2:	2c01      	cmp	r4, #1
 80071a4:	d132      	bne.n	800720c <main+0x1ec>
			if(refresh_dir || first_display_dir){
 80071a6:	4c33      	ldr	r4, [pc, #204]	@ (8007274 <main+0x254>)
 80071a8:	f8df a0cc 	ldr.w	sl, [pc, #204]	@ 8007278 <main+0x258>
 80071ac:	7823      	ldrb	r3, [r4, #0]
 80071ae:	f89a 2000 	ldrb.w	r2, [sl]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	d009      	beq.n	80071ca <main+0x1aa>
				Cache_File_List();
 80071b6:	f7fa fbe3 	bl	8001980 <Cache_File_List>
				Refresh_Display();
 80071ba:	f7fa fb9f 	bl	80018fc <Refresh_Display>
				scroll_focus_line();
 80071be:	f7fa fdcb 	bl	8001d58 <scroll_focus_line>
				first_display_dir = 0;
 80071c2:	2300      	movs	r3, #0
 80071c4:	f88a 3000 	strb.w	r3, [sl]
				refresh_dir = 0;
 80071c8:	7023      	strb	r3, [r4, #0]
			switch(key_code){
 80071ca:	4c2c      	ldr	r4, [pc, #176]	@ (800727c <main+0x25c>)
 80071cc:	7823      	ldrb	r3, [r4, #0]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	2b03      	cmp	r3, #3
 80071d2:	d805      	bhi.n	80071e0 <main+0x1c0>
 80071d4:	e8df f003 	tbb	[pc, r3]
 80071d8:	17141102 	.word	0x17141102
					Back_to_MainPage();
 80071dc:	f7fa fb52 	bl	8001884 <Back_to_MainPage>
			key_code = KEY_NULL;
 80071e0:	f04f 0a00 	mov.w	sl, #0
 80071e4:	f884 a000 	strb.w	sl, [r4]
			if(dir_display_refresh){
 80071e8:	4c25      	ldr	r4, [pc, #148]	@ (8007280 <main+0x260>)
 80071ea:	7823      	ldrb	r3, [r4, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d0ab      	beq.n	8007148 <main+0x128>
				scroll_focus_line();
 80071f0:	f7fa fdb2 	bl	8001d58 <scroll_focus_line>
				dir_display_refresh = 0;
 80071f4:	f884 a000 	strb.w	sl, [r4]
 80071f8:	e7a6      	b.n	8007148 <main+0x128>
					page_turning();
 80071fa:	f7fa fc31 	bl	8001a60 <page_turning>
					break;
 80071fe:	e7ef      	b.n	80071e0 <main+0x1c0>
					On_Delete_Key_Pressed();
 8007200:	f7fa fc58 	bl	8001ab4 <On_Delete_Key_Pressed>
					break;
 8007204:	e7ec      	b.n	80071e0 <main+0x1c0>
					sendFile_key_pressed();
 8007206:	f7fa fceb 	bl	8001be0 <sendFile_key_pressed>
					break;
 800720a:	e7e9      	b.n	80071e0 <main+0x1c0>
		if(page_location == Main_page)
 800720c:	2c00      	cmp	r4, #0
 800720e:	d19b      	bne.n	8007148 <main+0x128>
			Set_Dosage();
 8007210:	f7fb fea2 	bl	8002f58 <Set_Dosage>
 8007214:	e798      	b.n	8007148 <main+0x128>
		if(!Injecting && (page_location == File_M_page)){
 8007216:	2c01      	cmp	r4, #1
 8007218:	d196      	bne.n	8007148 <main+0x128>
 800721a:	e7c4      	b.n	80071a6 <main+0x186>
 800721c:	20000884 	.word	0x20000884
 8007220:	200008b6 	.word	0x200008b6
 8007224:	20000840 	.word	0x20000840
 8007228:	200008c9 	.word	0x200008c9
 800722c:	20000370 	.word	0x20000370
 8007230:	200009ec 	.word	0x200009ec
 8007234:	200009a4 	.word	0x200009a4
 8007238:	20000003 	.word	0x20000003
 800723c:	20000270 	.word	0x20000270
 8007240:	20000ab4 	.word	0x20000ab4
 8007244:	200007c8 	.word	0x200007c8
 8007248:	200007c4 	.word	0x200007c4
 800724c:	2000093a 	.word	0x2000093a
 8007250:	40011000 	.word	0x40011000
 8007254:	40010c00 	.word	0x40010c00
 8007258:	40011400 	.word	0x40011400
 800725c:	20000944 	.word	0x20000944
 8007260:	0800f3da 	.word	0x0800f3da
 8007264:	20000b8e 	.word	0x20000b8e
 8007268:	200008c4 	.word	0x200008c4
 800726c:	2000092b 	.word	0x2000092b
 8007270:	20000a4c 	.word	0x20000a4c
 8007274:	20000386 	.word	0x20000386
 8007278:	20000002 	.word	0x20000002
 800727c:	20000920 	.word	0x20000920
 8007280:	20000387 	.word	0x20000387

08007284 <Error_Handler>:
 8007284:	b672      	cpsid	i
  while (1)
 8007286:	e7fe      	b.n	8007286 <Error_Handler+0x2>

08007288 <Motor_Forward>:
	Motor_Reverse();
	HAL_Delay(1800);
	Motor_Brake();
}

void Motor_Forward(){
 8007288:	b510      	push	{r4, lr}
	motor_direction = FORWARD;
 800728a:	2401      	movs	r4, #1
 800728c:	4b07      	ldr	r3, [pc, #28]	@ (80072ac <Motor_Forward+0x24>)

	Motor_1_PH_SET;
 800728e:	4622      	mov	r2, r4
 8007290:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007294:	4806      	ldr	r0, [pc, #24]	@ (80072b0 <Motor_Forward+0x28>)
	motor_direction = FORWARD;
 8007296:	701c      	strb	r4, [r3, #0]
	Motor_1_PH_SET;
 8007298:	f001 feac 	bl	8008ff4 <HAL_GPIO_WritePin>
	Motor_1_EN_SET;
 800729c:	4622      	mov	r2, r4
}
 800729e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Motor_1_EN_SET;
 80072a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80072a6:	4803      	ldr	r0, [pc, #12]	@ (80072b4 <Motor_Forward+0x2c>)
 80072a8:	f001 bea4 	b.w	8008ff4 <HAL_GPIO_WritePin>
 80072ac:	20000946 	.word	0x20000946
 80072b0:	40010c00 	.word	0x40010c00
 80072b4:	40010800 	.word	0x40010800

080072b8 <Motor_Reverse>:

void Motor_Reverse(){
	motor_direction = REVERSE;
 80072b8:	22ff      	movs	r2, #255	@ 0xff
void Motor_Reverse(){
 80072ba:	b508      	push	{r3, lr}
	motor_direction = REVERSE;
 80072bc:	4b07      	ldr	r3, [pc, #28]	@ (80072dc <Motor_Reverse+0x24>)

	Motor_1_EN_SET;
 80072be:	f44f 7180 	mov.w	r1, #256	@ 0x100
	motor_direction = REVERSE;
 80072c2:	701a      	strb	r2, [r3, #0]
	Motor_1_EN_SET;
 80072c4:	4806      	ldr	r0, [pc, #24]	@ (80072e0 <Motor_Reverse+0x28>)
 80072c6:	2201      	movs	r2, #1
 80072c8:	f001 fe94 	bl	8008ff4 <HAL_GPIO_WritePin>
	Motor_1_PH_RESET;
}
 80072cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Motor_1_PH_RESET;
 80072d0:	2200      	movs	r2, #0
 80072d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80072d6:	4803      	ldr	r0, [pc, #12]	@ (80072e4 <Motor_Reverse+0x2c>)
 80072d8:	f001 be8c 	b.w	8008ff4 <HAL_GPIO_WritePin>
 80072dc:	20000946 	.word	0x20000946
 80072e0:	40010800 	.word	0x40010800
 80072e4:	40010c00 	.word	0x40010c00

080072e8 <Motor_Brake>:

void Motor_Brake(){
 80072e8:	b510      	push	{r4, lr}
	motor_direction = 0;
 80072ea:	2400      	movs	r4, #0
 80072ec:	4b07      	ldr	r3, [pc, #28]	@ (800730c <Motor_Brake+0x24>)

	Motor_1_EN_RESET;
 80072ee:	4622      	mov	r2, r4
 80072f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80072f4:	4806      	ldr	r0, [pc, #24]	@ (8007310 <Motor_Brake+0x28>)
	motor_direction = 0;
 80072f6:	701c      	strb	r4, [r3, #0]
	Motor_1_EN_RESET;
 80072f8:	f001 fe7c 	bl	8008ff4 <HAL_GPIO_WritePin>
	Motor_1_PH_RESET;
 80072fc:	4622      	mov	r2, r4
}
 80072fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Motor_1_PH_RESET;
 8007302:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007306:	4803      	ldr	r0, [pc, #12]	@ (8007314 <Motor_Brake+0x2c>)
 8007308:	f001 be74 	b.w	8008ff4 <HAL_GPIO_WritePin>
 800730c:	20000946 	.word	0x20000946
 8007310:	40010800 	.word	0x40010800
 8007314:	40010c00 	.word	0x40010c00

08007318 <Motor_init>:
void Motor_init(){
 8007318:	b508      	push	{r3, lr}
	Motor_Reverse();
 800731a:	f7ff ffcd 	bl	80072b8 <Motor_Reverse>
	HAL_Delay(1800);
 800731e:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 8007322:	f001 f89f 	bl	8008464 <HAL_Delay>
}
 8007326:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Motor_Brake();
 800732a:	f7ff bfdd 	b.w	80072e8 <Motor_Brake>
	...

08007330 <PAUSE_chk>:
	}
	Motor_2_EN_RESET;
	motor_Reverse_Cycle();
}

void PAUSE_chk(){
 8007330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t pause_show = 0;
 8007332:	2400      	movs	r4, #0
	static uint8_t enter_pause = 0;
	while(Injecting && pause_state){
 8007334:	4f26      	ldr	r7, [pc, #152]	@ (80073d0 <PAUSE_chk+0xa0>)
		enter_pause = 1;
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
		if((now_time_inject % 5 == 0) && !pause_show){
 8007336:	4e27      	ldr	r6, [pc, #156]	@ (80073d4 <PAUSE_chk+0xa4>)
	while(Injecting && pause_state){
 8007338:	783b      	ldrb	r3, [r7, #0]
 800733a:	4d27      	ldr	r5, [pc, #156]	@ (80073d8 <PAUSE_chk+0xa8>)
 800733c:	b113      	cbz	r3, 8007344 <PAUSE_chk+0x14>
 800733e:	4b27      	ldr	r3, [pc, #156]	@ (80073dc <PAUSE_chk+0xac>)
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	b95b      	cbnz	r3, 800735c <PAUSE_chk+0x2c>
			clear_counter = 0;
			Refresh_counter();
		}
	}

	if(enter_pause){
 8007344:	782b      	ldrb	r3, [r5, #0]
 8007346:	b143      	cbz	r3, 800735a <PAUSE_chk+0x2a>
			sprintf(Tx_Buffer,"Main.t0.txt=\"\"\xff\xff\xff");
 8007348:	4925      	ldr	r1, [pc, #148]	@ (80073e0 <PAUSE_chk+0xb0>)
 800734a:	4826      	ldr	r0, [pc, #152]	@ (80073e4 <PAUSE_chk+0xb4>)
 800734c:	f005 fa81 	bl	800c852 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8007350:	4824      	ldr	r0, [pc, #144]	@ (80073e4 <PAUSE_chk+0xb4>)
 8007352:	f000 ff47 	bl	80081e4 <USART1_Tx_HMIdata>
			enter_pause = 0;
 8007356:	2300      	movs	r3, #0
 8007358:	702b      	strb	r3, [r5, #0]
	}
}
 800735a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		enter_pause = 1;
 800735c:	2301      	movs	r3, #1
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 800735e:	2200      	movs	r2, #0
 8007360:	2102      	movs	r1, #2
 8007362:	4821      	ldr	r0, [pc, #132]	@ (80073e8 <PAUSE_chk+0xb8>)
		enter_pause = 1;
 8007364:	702b      	strb	r3, [r5, #0]
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8007366:	f001 fe45 	bl	8008ff4 <HAL_GPIO_WritePin>
		if((now_time_inject % 5 == 0) && !pause_show){
 800736a:	6833      	ldr	r3, [r6, #0]
 800736c:	4a1f      	ldr	r2, [pc, #124]	@ (80073ec <PAUSE_chk+0xbc>)
 800736e:	4353      	muls	r3, r2
 8007370:	f1b3 3f33 	cmp.w	r3, #858993459	@ 0x33333333
 8007374:	d814      	bhi.n	80073a0 <PAUSE_chk+0x70>
 8007376:	b99c      	cbnz	r4, 80073a0 <PAUSE_chk+0x70>
			if(cheat_flag == 1){
 8007378:	4b1d      	ldr	r3, [pc, #116]	@ (80073f0 <PAUSE_chk+0xc0>)
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d108      	bne.n	8007392 <PAUSE_chk+0x62>
				sprintf(Tx_Buffer,"Main.t0.txt=\"请按规\r\n范操作\"\xff\xff\xff");
 8007380:	491c      	ldr	r1, [pc, #112]	@ (80073f4 <PAUSE_chk+0xc4>)
 8007382:	4818      	ldr	r0, [pc, #96]	@ (80073e4 <PAUSE_chk+0xb4>)
 8007384:	f005 fa65 	bl	800c852 <strcpy>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8007388:	4816      	ldr	r0, [pc, #88]	@ (80073e4 <PAUSE_chk+0xb4>)
 800738a:	f000 ff2b 	bl	80081e4 <USART1_Tx_HMIdata>
			pause_show = !pause_show;
 800738e:	2401      	movs	r4, #1
 8007390:	e7d2      	b.n	8007338 <PAUSE_chk+0x8>
			else if(over_pressure == 1){
 8007392:	4b19      	ldr	r3, [pc, #100]	@ (80073f8 <PAUSE_chk+0xc8>)
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	2b01      	cmp	r3, #1
				sprintf(Tx_Buffer,"Main.t0.txt=\"注射压\r\n力超压\"\xff\xff\xff");
 8007398:	bf0c      	ite	eq
 800739a:	4918      	ldreq	r1, [pc, #96]	@ (80073fc <PAUSE_chk+0xcc>)
				sprintf(Tx_Buffer,"Main.t0.txt=\"已暂停\"\xff\xff\xff");
 800739c:	4918      	ldrne	r1, [pc, #96]	@ (8007400 <PAUSE_chk+0xd0>)
 800739e:	e7f0      	b.n	8007382 <PAUSE_chk+0x52>
		else if((now_time_inject % 5 == 0) && pause_show){
 80073a0:	6833      	ldr	r3, [r6, #0]
 80073a2:	4353      	muls	r3, r2
 80073a4:	f1b3 3f33 	cmp.w	r3, #858993459	@ 0x33333333
 80073a8:	d809      	bhi.n	80073be <PAUSE_chk+0x8e>
 80073aa:	b144      	cbz	r4, 80073be <PAUSE_chk+0x8e>
			sprintf(Tx_Buffer,"Main.t0.txt=\"\"\xff\xff\xff");
 80073ac:	490c      	ldr	r1, [pc, #48]	@ (80073e0 <PAUSE_chk+0xb0>)
 80073ae:	480d      	ldr	r0, [pc, #52]	@ (80073e4 <PAUSE_chk+0xb4>)
 80073b0:	f005 fa4f 	bl	800c852 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80073b4:	480b      	ldr	r0, [pc, #44]	@ (80073e4 <PAUSE_chk+0xb4>)
 80073b6:	f000 ff15 	bl	80081e4 <USART1_Tx_HMIdata>
			pause_show = !pause_show;
 80073ba:	2400      	movs	r4, #0
 80073bc:	e7bc      	b.n	8007338 <PAUSE_chk+0x8>
		else if(clear_counter){
 80073be:	4b11      	ldr	r3, [pc, #68]	@ (8007404 <PAUSE_chk+0xd4>)
 80073c0:	781a      	ldrb	r2, [r3, #0]
 80073c2:	2a00      	cmp	r2, #0
 80073c4:	d0b8      	beq.n	8007338 <PAUSE_chk+0x8>
			clear_counter = 0;
 80073c6:	2200      	movs	r2, #0
 80073c8:	701a      	strb	r2, [r3, #0]
			Refresh_counter();
 80073ca:	f7fb fe57 	bl	800307c <Refresh_counter>
 80073ce:	e7b3      	b.n	8007338 <PAUSE_chk+0x8>
 80073d0:	20000944 	.word	0x20000944
 80073d4:	20000a68 	.word	0x20000a68
 80073d8:	2000093c 	.word	0x2000093c
 80073dc:	20000942 	.word	0x20000942
 80073e0:	0800f39c 	.word	0x0800f39c
 80073e4:	20000b8e 	.word	0x20000b8e
 80073e8:	40011400 	.word	0x40011400
 80073ec:	cccccccd 	.word	0xcccccccd
 80073f0:	20000a5d 	.word	0x20000a5d
 80073f4:	0800f8c6 	.word	0x0800f8c6
 80073f8:	20000a5e 	.word	0x20000a5e
 80073fc:	0800f8ec 	.word	0x0800f8ec
 8007400:	0800f912 	.word	0x0800f912
 8007404:	2000092b 	.word	0x2000092b

08007408 <motor_Forward_Cycle>:

void motor_Forward_Cycle(){
 8007408:	b508      	push	{r3, lr}
	Motor_Forward();
 800740a:	f7ff ff3d 	bl	8007288 <Motor_Forward>
	last_time_inject = now_time_inject;
 800740e:	4906      	ldr	r1, [pc, #24]	@ (8007428 <motor_Forward_Cycle+0x20>)
 8007410:	4a06      	ldr	r2, [pc, #24]	@ (800742c <motor_Forward_Cycle+0x24>)
 8007412:	680b      	ldr	r3, [r1, #0]
 8007414:	6013      	str	r3, [r2, #0]
//				Motor_Brake();
//				break;
//		}
//	}
	//调试用
	while(now_time_inject - last_time_inject <= 15);//推杆泵前推1.5s
 8007416:	680b      	ldr	r3, [r1, #0]
 8007418:	6810      	ldr	r0, [r2, #0]
 800741a:	1a1b      	subs	r3, r3, r0
 800741c:	2b0f      	cmp	r3, #15
 800741e:	d9fa      	bls.n	8007416 <motor_Forward_Cycle+0xe>
//	HAL_Delay(1500);
				Motor_Brake();
}
 8007420:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				Motor_Brake();
 8007424:	f7ff bf60 	b.w	80072e8 <Motor_Brake>
 8007428:	20000a68 	.word	0x20000a68
 800742c:	20000a64 	.word	0x20000a64

08007430 <motor_Reverse_Cycle>:

void motor_Reverse_Cycle(){
 8007430:	b508      	push	{r3, lr}
	Motor_Reverse();
 8007432:	f7ff ff41 	bl	80072b8 <Motor_Reverse>
	last_time_inject = now_time_inject;
 8007436:	4906      	ldr	r1, [pc, #24]	@ (8007450 <motor_Reverse_Cycle+0x20>)
 8007438:	4a06      	ldr	r2, [pc, #24]	@ (8007454 <motor_Reverse_Cycle+0x24>)
 800743a:	680b      	ldr	r3, [r1, #0]
 800743c:	6013      	str	r3, [r2, #0]
	while(now_time_inject - last_time_inject <= 15);//推杆泵收缩1.5s
 800743e:	680b      	ldr	r3, [r1, #0]
 8007440:	6810      	ldr	r0, [r2, #0]
 8007442:	1a1b      	subs	r3, r3, r0
 8007444:	2b0f      	cmp	r3, #15
 8007446:	d9fa      	bls.n	800743e <motor_Reverse_Cycle+0xe>
//	HAL_Delay(1500);
	Motor_Brake();
}
 8007448:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Motor_Brake();
 800744c:	f7ff bf4c 	b.w	80072e8 <Motor_Brake>
 8007450:	20000a68 	.word	0x20000a68
 8007454:	20000a64 	.word	0x20000a64

08007458 <Ex_GAS_Cycle>:
void Ex_GAS_Cycle(){
 8007458:	b538      	push	{r3, r4, r5, lr}
	motor_Forward_Cycle();
 800745a:	f7ff ffd5 	bl	8007408 <motor_Forward_Cycle>
	while(EX_GAS_start){
 800745e:	4c0a      	ldr	r4, [pc, #40]	@ (8007488 <Ex_GAS_Cycle+0x30>)
		Motor_2_EN_SET;
 8007460:	4d0a      	ldr	r5, [pc, #40]	@ (800748c <Ex_GAS_Cycle+0x34>)
	while(EX_GAS_start){
 8007462:	7822      	ldrb	r2, [r4, #0]
 8007464:	b942      	cbnz	r2, 8007478 <Ex_GAS_Cycle+0x20>
	Motor_2_EN_RESET;
 8007466:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800746a:	4808      	ldr	r0, [pc, #32]	@ (800748c <Ex_GAS_Cycle+0x34>)
 800746c:	f001 fdc2 	bl	8008ff4 <HAL_GPIO_WritePin>
}
 8007470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	motor_Reverse_Cycle();
 8007474:	f7ff bfdc 	b.w	8007430 <motor_Reverse_Cycle>
		Motor_2_EN_SET;
 8007478:	2201      	movs	r2, #1
 800747a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800747e:	4628      	mov	r0, r5
 8007480:	f001 fdb8 	bl	8008ff4 <HAL_GPIO_WritePin>
 8007484:	e7ed      	b.n	8007462 <Ex_GAS_Cycle+0xa>
 8007486:	bf00      	nop
 8007488:	20000a4c 	.word	0x20000a4c
 800748c:	40010c00 	.word	0x40010c00

08007490 <Inject_times>:

void Inject_times(uint16_t Dosage_load){
	totalCycles = Dosage_load / 2;
 8007490:	4b04      	ldr	r3, [pc, #16]	@ (80074a4 <Inject_times+0x14>)
 8007492:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8007496:	7018      	strb	r0, [r3, #0]
	Dosage_load = 0;
	RemainingTimes = totalCycles;
 8007498:	4b03      	ldr	r3, [pc, #12]	@ (80074a8 <Inject_times+0x18>)
 800749a:	7018      	strb	r0, [r3, #0]
	InjectTimes = totalCycles;
 800749c:	4b03      	ldr	r3, [pc, #12]	@ (80074ac <Inject_times+0x1c>)
 800749e:	7018      	strb	r0, [r3, #0]
}
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	20000943 	.word	0x20000943
 80074a8:	20000a54 	.word	0x20000a54
 80074ac:	20000945 	.word	0x20000945

080074b0 <Pump_work>:

void Pump_work(){
	Motor_2_EN_SET;
 80074b0:	2201      	movs	r2, #1
 80074b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
void Pump_work(){
 80074b6:	b508      	push	{r3, lr}
	Motor_2_EN_SET;
 80074b8:	4809      	ldr	r0, [pc, #36]	@ (80074e0 <Pump_work+0x30>)
 80074ba:	f001 fd9b 	bl	8008ff4 <HAL_GPIO_WritePin>
	last_time_inject = now_time_inject;
 80074be:	4909      	ldr	r1, [pc, #36]	@ (80074e4 <Pump_work+0x34>)
 80074c0:	4a09      	ldr	r2, [pc, #36]	@ (80074e8 <Pump_work+0x38>)
 80074c2:	680b      	ldr	r3, [r1, #0]
 80074c4:	6013      	str	r3, [r2, #0]
	while(now_time_inject - last_time_inject <= 6);
 80074c6:	680b      	ldr	r3, [r1, #0]
 80074c8:	6810      	ldr	r0, [r2, #0]
 80074ca:	1a1b      	subs	r3, r3, r0
 80074cc:	2b06      	cmp	r3, #6
 80074ce:	d9fa      	bls.n	80074c6 <Pump_work+0x16>
//	HAL_Delay(800);
	Motor_2_EN_RESET;
}
 80074d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Motor_2_EN_RESET;
 80074d4:	2200      	movs	r2, #0
 80074d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80074da:	4801      	ldr	r0, [pc, #4]	@ (80074e0 <Pump_work+0x30>)
 80074dc:	f001 bd8a 	b.w	8008ff4 <HAL_GPIO_WritePin>
 80074e0:	40010c00 	.word	0x40010c00
 80074e4:	20000a68 	.word	0x20000a68
 80074e8:	20000a64 	.word	0x20000a64

080074ec <Inject_working>:

void Inject_working(void){
 80074ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t i =0;
	Invalid_action_times = 0;
 80074f0:	2400      	movs	r4, #0
 80074f2:	4d3d      	ldr	r5, [pc, #244]	@ (80075e8 <Inject_working+0xfc>)
	GasPrs_LOW_time = 0;
 80074f4:	4b3d      	ldr	r3, [pc, #244]	@ (80075ec <Inject_working+0x100>)
	for(i = 0;i < InjectTimes;i++){
 80074f6:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 80075f0 <Inject_working+0x104>
		motor_Forward_Cycle();				//推杆泵前推1.5s

		RemainingTimes--;
 80074fa:	4e3e      	ldr	r6, [pc, #248]	@ (80075f4 <Inject_working+0x108>)

		total_inject_Times++;
 80074fc:	4f3e      	ldr	r7, [pc, #248]	@ (80075f8 <Inject_working+0x10c>)
void Inject_working(void){
 80074fe:	b09a      	sub	sp, #104	@ 0x68
	Invalid_action_times = 0;
 8007500:	702c      	strb	r4, [r5, #0]
	GasPrs_LOW_time = 0;
 8007502:	801c      	strh	r4, [r3, #0]
	for(i = 0;i < InjectTimes;i++){
 8007504:	f898 2000 	ldrb.w	r2, [r8]
 8007508:	b2e3      	uxtb	r3, r4
 800750a:	429a      	cmp	r2, r3
 800750c:	d845      	bhi.n	800759a <Inject_working+0xae>
		Pump_work();								 //泵工作0.8s

		PAUSE_chk();
	}

	if(clear_counter){
 800750e:	4b3b      	ldr	r3, [pc, #236]	@ (80075fc <Inject_working+0x110>)
 8007510:	781a      	ldrb	r2, [r3, #0]
 8007512:	b10a      	cbz	r2, 8007518 <Inject_working+0x2c>
			clear_counter = 0;
 8007514:	2200      	movs	r2, #0
 8007516:	701a      	strb	r2, [r3, #0]
		}

	if(cancel_break){
 8007518:	4b39      	ldr	r3, [pc, #228]	@ (8007600 <Inject_working+0x114>)
 800751a:	781a      	ldrb	r2, [r3, #0]
 800751c:	2a00      	cmp	r2, #0
 800751e:	d05d      	beq.n	80075dc <Inject_working+0xf0>
			cancel_break = 0;
 8007520:	2200      	movs	r2, #0
 8007522:	701a      	strb	r2, [r3, #0]
		}
	else{
			total_Times++;
		}

	sprintf(Tx_Buffer,"Main.t0.txt=\"注药结束\"\xff\xff\xff");
 8007524:	4937      	ldr	r1, [pc, #220]	@ (8007604 <Inject_working+0x118>)
 8007526:	4838      	ldr	r0, [pc, #224]	@ (8007608 <Inject_working+0x11c>)
 8007528:	f005 f993 	bl	800c852 <strcpy>

	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);

	Refresh_counter();

	SDCard_Write_log(GPS_GGA_Data,GPS_RMC_Data);
 800752c:	4d37      	ldr	r5, [pc, #220]	@ (800760c <Inject_working+0x120>)
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800752e:	4836      	ldr	r0, [pc, #216]	@ (8007608 <Inject_working+0x11c>)
 8007530:	f000 fe58 	bl	80081e4 <USART1_Tx_HMIdata>
	SDCard_Write_log(GPS_GGA_Data,GPS_RMC_Data);
 8007534:	ac0b      	add	r4, sp, #44	@ 0x2c
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8007536:	4834      	ldr	r0, [pc, #208]	@ (8007608 <Inject_working+0x11c>)
 8007538:	f000 fe54 	bl	80081e4 <USART1_Tx_HMIdata>
	Refresh_counter();
 800753c:	f7fb fd9e 	bl	800307c <Refresh_counter>
	SDCard_Write_log(GPS_GGA_Data,GPS_RMC_Data);
 8007540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800754a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800754c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007550:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007554:	466c      	mov	r4, sp
 8007556:	4e2e      	ldr	r6, [pc, #184]	@ (8007610 <Inject_working+0x124>)
 8007558:	f106 0510 	add.w	r5, r6, #16
 800755c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800755e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007564:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007568:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	refresh_dir = 1;
 800756c:	2401      	movs	r4, #1
	SDCard_Write_log(GPS_GGA_Data,GPS_RMC_Data);
 800756e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8007572:	f7fa fcf5 	bl	8001f60 <SDCard_Write_log>
	refresh_dir = 1;
 8007576:	4b27      	ldr	r3, [pc, #156]	@ (8007614 <Inject_working+0x128>)

	Buzzer(1000);
 8007578:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
	refresh_dir = 1;
 800757c:	701c      	strb	r4, [r3, #0]
	Buzzer(1000);
 800757e:	f7fb fc5d 	bl	8002e3c <Buzzer>

	Injecting = 0;
 8007582:	2200      	movs	r2, #0
	first_run = 1;
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8007584:	2102      	movs	r1, #2
	Injecting = 0;
 8007586:	4b24      	ldr	r3, [pc, #144]	@ (8007618 <Inject_working+0x12c>)
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8007588:	4824      	ldr	r0, [pc, #144]	@ (800761c <Inject_working+0x130>)
	Injecting = 0;
 800758a:	701a      	strb	r2, [r3, #0]
	first_run = 1;
 800758c:	4b24      	ldr	r3, [pc, #144]	@ (8007620 <Inject_working+0x134>)
 800758e:	701c      	strb	r4, [r3, #0]
}
 8007590:	b01a      	add	sp, #104	@ 0x68
 8007592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8007596:	f001 bd2d 	b.w	8008ff4 <HAL_GPIO_WritePin>
		motor_Forward_Cycle();				//推杆泵前推1.5s
 800759a:	f7ff ff35 	bl	8007408 <motor_Forward_Cycle>
		RemainingTimes--;
 800759e:	7833      	ldrb	r3, [r6, #0]
		total_inject_Dosage += 2;
 80075a0:	4a20      	ldr	r2, [pc, #128]	@ (8007624 <Inject_working+0x138>)
		RemainingTimes--;
 80075a2:	3b01      	subs	r3, #1
 80075a4:	7033      	strb	r3, [r6, #0]
		total_inject_Times++;
 80075a6:	883b      	ldrh	r3, [r7, #0]
 80075a8:	3301      	adds	r3, #1
 80075aa:	803b      	strh	r3, [r7, #0]
		total_inject_Dosage += 2;
 80075ac:	8813      	ldrh	r3, [r2, #0]
 80075ae:	3302      	adds	r3, #2
 80075b0:	8013      	strh	r3, [r2, #0]
		Refresh_Dosage();
 80075b2:	f7fb fda3 	bl	80030fc <Refresh_Dosage>
		if(GasPrs_LOW){
 80075b6:	4b1c      	ldr	r3, [pc, #112]	@ (8007628 <Inject_working+0x13c>)
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	b113      	cbz	r3, 80075c2 <Inject_working+0xd6>
			Invalid_action_times++;
 80075bc:	782b      	ldrb	r3, [r5, #0]
 80075be:	3301      	adds	r3, #1
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	702b      	strb	r3, [r5, #0]
		motor_Reverse_Cycle();       //推杆泵收缩1.5s
 80075c4:	f7ff ff34 	bl	8007430 <motor_Reverse_Cycle>
		HAL_Delay(1000);//停顿1s			 //停顿1s
 80075c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80075cc:	f000 ff4a 	bl	8008464 <HAL_Delay>
		Pump_work();								 //泵工作0.8s
 80075d0:	3401      	adds	r4, #1
 80075d2:	f7ff ff6d 	bl	80074b0 <Pump_work>
		PAUSE_chk();
 80075d6:	f7ff feab 	bl	8007330 <PAUSE_chk>
	for(i = 0;i < InjectTimes;i++){
 80075da:	e793      	b.n	8007504 <Inject_working+0x18>
			total_Times++;
 80075dc:	4a13      	ldr	r2, [pc, #76]	@ (800762c <Inject_working+0x140>)
 80075de:	8813      	ldrh	r3, [r2, #0]
 80075e0:	3301      	adds	r3, #1
 80075e2:	8013      	strh	r3, [r2, #0]
 80075e4:	e79e      	b.n	8007524 <Inject_working+0x38>
 80075e6:	bf00      	nop
 80075e8:	20000a5c 	.word	0x20000a5c
 80075ec:	20000a62 	.word	0x20000a62
 80075f0:	20000945 	.word	0x20000945
 80075f4:	20000a54 	.word	0x20000a54
 80075f8:	20000a52 	.word	0x20000a52
 80075fc:	2000092b 	.word	0x2000092b
 8007600:	2000092a 	.word	0x2000092a
 8007604:	0800f92d 	.word	0x0800f92d
 8007608:	20000b8e 	.word	0x20000b8e
 800760c:	200001f4 	.word	0x200001f4
 8007610:	20000230 	.word	0x20000230
 8007614:	20000386 	.word	0x20000386
 8007618:	20000944 	.word	0x20000944
 800761c:	40011400 	.word	0x40011400
 8007620:	20000003 	.word	0x20000003
 8007624:	20000a50 	.word	0x20000a50
 8007628:	20000919 	.word	0x20000919
 800762c:	20000a4e 	.word	0x20000a4e

08007630 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8007630:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007632:	f44f 7382 	mov.w	r3, #260	@ 0x104
  hspi1.Instance = SPI1;
 8007636:	480d      	ldr	r0, [pc, #52]	@ (800766c <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007638:	4a0d      	ldr	r2, [pc, #52]	@ (8007670 <MX_SPI1_Init+0x40>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800763a:	f44f 7100 	mov.w	r1, #512	@ 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800763e:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007642:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8007644:	2238      	movs	r2, #56	@ 0x38
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007646:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800764a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800764e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007652:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007654:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8007656:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 800765a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800765c:	f002 f8b2 	bl	80097c4 <HAL_SPI_Init>
 8007660:	b118      	cbz	r0, 800766a <MX_SPI1_Init+0x3a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007662:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8007666:	f7ff be0d 	b.w	8007284 <Error_Handler>
}
 800766a:	bd08      	pop	{r3, pc}
 800766c:	20000948 	.word	0x20000948
 8007670:	40013000 	.word	0x40013000

08007674 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007674:	b510      	push	{r4, lr}
 8007676:	4604      	mov	r4, r0
 8007678:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800767a:	2210      	movs	r2, #16
 800767c:	2100      	movs	r1, #0
 800767e:	a802      	add	r0, sp, #8
 8007680:	f004 ffec 	bl	800c65c <memset>
  if(spiHandle->Instance==SPI1)
 8007684:	6822      	ldr	r2, [r4, #0]
 8007686:	4b16      	ldr	r3, [pc, #88]	@ (80076e0 <HAL_SPI_MspInit+0x6c>)
 8007688:	429a      	cmp	r2, r3
 800768a:	d126      	bne.n	80076da <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800768c:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8007690:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007692:	4814      	ldr	r0, [pc, #80]	@ (80076e4 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007694:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007698:	619a      	str	r2, [r3, #24]
 800769a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800769c:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 800769e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80076a2:	9200      	str	r2, [sp, #0]
 80076a4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076a6:	699a      	ldr	r2, [r3, #24]
 80076a8:	f042 0204 	orr.w	r2, r2, #4
 80076ac:	619a      	str	r2, [r3, #24]
 80076ae:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076b0:	22a0      	movs	r2, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076b2:	f003 0304 	and.w	r3, r3, #4
 80076b6:	9301      	str	r3, [sp, #4]
 80076b8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076ba:	2302      	movs	r3, #2
 80076bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80076c0:	2303      	movs	r3, #3
 80076c2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076c4:	f001 fbb8 	bl	8008e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80076c8:	2140      	movs	r1, #64	@ 0x40
 80076ca:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076cc:	4805      	ldr	r0, [pc, #20]	@ (80076e4 <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80076ce:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076d2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076d4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076d6:	f001 fbaf 	bl	8008e38 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80076da:	b006      	add	sp, #24
 80076dc:	bd10      	pop	{r4, pc}
 80076de:	bf00      	nop
 80076e0:	40013000 	.word	0x40013000
 80076e4:	40010800 	.word	0x40010800

080076e8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80076e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007724 <HAL_MspInit+0x3c>)
{
 80076ea:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80076ec:	699a      	ldr	r2, [r3, #24]
 80076ee:	f042 0201 	orr.w	r2, r2, #1
 80076f2:	619a      	str	r2, [r3, #24]
 80076f4:	699a      	ldr	r2, [r3, #24]
 80076f6:	f002 0201 	and.w	r2, r2, #1
 80076fa:	9200      	str	r2, [sp, #0]
 80076fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80076fe:	69da      	ldr	r2, [r3, #28]
 8007700:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007704:	61da      	str	r2, [r3, #28]
 8007706:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007708:	4a07      	ldr	r2, [pc, #28]	@ (8007728 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800770a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007712:	6853      	ldr	r3, [r2, #4]
 8007714:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8007718:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800771c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800771e:	b002      	add	sp, #8
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	40021000 	.word	0x40021000
 8007728:	40010000 	.word	0x40010000

0800772c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800772c:	e7fe      	b.n	800772c <NMI_Handler>

0800772e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800772e:	e7fe      	b.n	800772e <HardFault_Handler>

08007730 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007730:	e7fe      	b.n	8007730 <MemManage_Handler>

08007732 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007732:	e7fe      	b.n	8007732 <BusFault_Handler>

08007734 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007734:	e7fe      	b.n	8007734 <UsageFault_Handler>

08007736 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007736:	4770      	bx	lr

08007738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8007738:	4770      	bx	lr

0800773a <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800773a:	4770      	bx	lr

0800773c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800773c:	f000 be80 	b.w	8008440 <HAL_IncTick>

08007740 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007740:	4801      	ldr	r0, [pc, #4]	@ (8007748 <DMA1_Channel1_IRQHandler+0x8>)
 8007742:	f001 bae5 	b.w	8008d10 <HAL_DMA_IRQHandler>
 8007746:	bf00      	nop
 8007748:	20000840 	.word	0x20000840

0800774c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800774c:	4801      	ldr	r0, [pc, #4]	@ (8007754 <DMA1_Channel3_IRQHandler+0x8>)
 800774e:	f001 badf 	b.w	8008d10 <HAL_DMA_IRQHandler>
 8007752:	bf00      	nop
 8007754:	20000a70 	.word	0x20000a70

08007758 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8007758:	4801      	ldr	r0, [pc, #4]	@ (8007760 <ADC1_2_IRQHandler+0x8>)
 800775a:	f000 bec3 	b.w	80084e4 <HAL_ADC_IRQHandler>
 800775e:	bf00      	nop
 8007760:	20000884 	.word	0x20000884

08007764 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007764:	4801      	ldr	r0, [pc, #4]	@ (800776c <TIM3_IRQHandler+0x8>)
 8007766:	f002 b9af 	b.w	8009ac8 <HAL_TIM_IRQHandler>
 800776a:	bf00      	nop
 800776c:	200009ec 	.word	0x200009ec

08007770 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007770:	4801      	ldr	r0, [pc, #4]	@ (8007778 <TIM4_IRQHandler+0x8>)
 8007772:	f002 b9a9 	b.w	8009ac8 <HAL_TIM_IRQHandler>
 8007776:	bf00      	nop
 8007778:	200009a4 	.word	0x200009a4

0800777c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800777c:	4801      	ldr	r0, [pc, #4]	@ (8007784 <USART2_IRQHandler+0x8>)
 800777e:	f002 bd95 	b.w	800a2ac <HAL_UART_IRQHandler>
 8007782:	bf00      	nop
 8007784:	20000afc 	.word	0x20000afc

08007788 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007788:	4801      	ldr	r0, [pc, #4]	@ (8007790 <USART3_IRQHandler+0x8>)
 800778a:	f002 bd8f 	b.w	800a2ac <HAL_UART_IRQHandler>
 800778e:	bf00      	nop
 8007790:	20000ab4 	.word	0x20000ab4

08007794 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_EXTI11_Pin);
 8007794:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007798:	f001 bc3a 	b.w	8009010 <HAL_GPIO_EXTI_IRQHandler>

0800779c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800779c:	2001      	movs	r0, #1
 800779e:	4770      	bx	lr

080077a0 <_kill>:

int _kill(int pid, int sig)
{
 80077a0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80077a2:	f005 f829 	bl	800c7f8 <__errno>
 80077a6:	2316      	movs	r3, #22
 80077a8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80077aa:	f04f 30ff 	mov.w	r0, #4294967295
 80077ae:	bd08      	pop	{r3, pc}

080077b0 <_exit>:

void _exit (int status)
{
 80077b0:	b508      	push	{r3, lr}
  errno = EINVAL;
 80077b2:	f005 f821 	bl	800c7f8 <__errno>
 80077b6:	2316      	movs	r3, #22
 80077b8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80077ba:	e7fe      	b.n	80077ba <_exit+0xa>

080077bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80077bc:	b570      	push	{r4, r5, r6, lr}
 80077be:	460d      	mov	r5, r1
 80077c0:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077c2:	460e      	mov	r6, r1
 80077c4:	1b73      	subs	r3, r6, r5
 80077c6:	429c      	cmp	r4, r3
 80077c8:	dc01      	bgt.n	80077ce <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80077ca:	4620      	mov	r0, r4
 80077cc:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80077ce:	f3af 8000 	nop.w
 80077d2:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077d6:	e7f5      	b.n	80077c4 <_read+0x8>

080077d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	460d      	mov	r5, r1
 80077dc:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077de:	460e      	mov	r6, r1
 80077e0:	1b73      	subs	r3, r6, r5
 80077e2:	429c      	cmp	r4, r3
 80077e4:	dc01      	bgt.n	80077ea <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 80077e6:	4620      	mov	r0, r4
 80077e8:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 80077ea:	f816 0b01 	ldrb.w	r0, [r6], #1
 80077ee:	f7f9 fd85 	bl	80012fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077f2:	e7f5      	b.n	80077e0 <_write+0x8>

080077f4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80077f4:	f04f 30ff 	mov.w	r0, #4294967295
 80077f8:	4770      	bx	lr

080077fa <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80077fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 80077fe:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8007800:	604b      	str	r3, [r1, #4]
}
 8007802:	4770      	bx	lr

08007804 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8007804:	2001      	movs	r0, #1
 8007806:	4770      	bx	lr

08007808 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8007808:	2000      	movs	r0, #0
 800780a:	4770      	bx	lr

0800780c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800780c:	4a0b      	ldr	r2, [pc, #44]	@ (800783c <_sbrk+0x30>)
{
 800780e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8007810:	6811      	ldr	r1, [r2, #0]
{
 8007812:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8007814:	b909      	cbnz	r1, 800781a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8007816:	490a      	ldr	r1, [pc, #40]	@ (8007840 <_sbrk+0x34>)
 8007818:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800781a:	6810      	ldr	r0, [r2, #0]
 800781c:	4909      	ldr	r1, [pc, #36]	@ (8007844 <_sbrk+0x38>)
 800781e:	4c0a      	ldr	r4, [pc, #40]	@ (8007848 <_sbrk+0x3c>)
 8007820:	4403      	add	r3, r0
 8007822:	1b09      	subs	r1, r1, r4
 8007824:	428b      	cmp	r3, r1
 8007826:	d906      	bls.n	8007836 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8007828:	f004 ffe6 	bl	800c7f8 <__errno>
 800782c:	230c      	movs	r3, #12
 800782e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8007830:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8007834:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8007836:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8007838:	e7fc      	b.n	8007834 <_sbrk+0x28>
 800783a:	bf00      	nop
 800783c:	200009a0 	.word	0x200009a0
 8007840:	20000d10 	.word	0x20000d10
 8007844:	20005000 	.word	0x20005000
 8007848:	00000400 	.word	0x00000400

0800784c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800784c:	4770      	bx	lr
	...

08007850 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007850:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007852:	2210      	movs	r2, #16
 8007854:	2100      	movs	r1, #0
 8007856:	a802      	add	r0, sp, #8
 8007858:	f004 ff00 	bl	800c65c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 6400-1;
 800785c:	f641 02ff 	movw	r2, #6399	@ 0x18ff
  htim3.Instance = TIM3;
 8007860:	4814      	ldr	r0, [pc, #80]	@ (80078b4 <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 6400-1;
 8007862:	4915      	ldr	r1, [pc, #84]	@ (80078b8 <MX_TIM3_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007864:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 6400-1;
 8007866:	e9c0 1200 	strd	r1, r2, [r0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1000-1;
 800786a:	f240 32e7 	movw	r2, #999	@ 0x3e7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800786e:	e9cd 3300 	strd	r3, r3, [sp]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007872:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007876:	6083      	str	r3, [r0, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007878:	2380      	movs	r3, #128	@ 0x80
 800787a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800787c:	f002 f9f8 	bl	8009c70 <HAL_TIM_Base_Init>
 8007880:	b108      	cbz	r0, 8007886 <MX_TIM3_Init+0x36>
  {
    Error_Handler();
 8007882:	f7ff fcff 	bl	8007284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007886:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800788a:	480a      	ldr	r0, [pc, #40]	@ (80078b4 <MX_TIM3_Init+0x64>)
 800788c:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800788e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007890:	f002 fa24 	bl	8009cdc <HAL_TIM_ConfigClockSource>
 8007894:	b108      	cbz	r0, 800789a <MX_TIM3_Init+0x4a>
  {
    Error_Handler();
 8007896:	f7ff fcf5 	bl	8007284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800789a:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800789c:	4669      	mov	r1, sp
 800789e:	4805      	ldr	r0, [pc, #20]	@ (80078b4 <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80078a0:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80078a4:	f002 fab4 	bl	8009e10 <HAL_TIMEx_MasterConfigSynchronization>
 80078a8:	b108      	cbz	r0, 80078ae <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
 80078aa:	f7ff fceb 	bl	8007284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80078ae:	b007      	add	sp, #28
 80078b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80078b4:	200009ec 	.word	0x200009ec
 80078b8:	40000400 	.word	0x40000400

080078bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80078bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80078be:	2210      	movs	r2, #16
 80078c0:	2100      	movs	r1, #0
 80078c2:	a802      	add	r0, sp, #8
 80078c4:	f004 feca 	bl	800c65c <memset>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 64-1;
 80078c8:	223f      	movs	r2, #63	@ 0x3f
  htim4.Instance = TIM4;
 80078ca:	4815      	ldr	r0, [pc, #84]	@ (8007920 <MX_TIM4_Init+0x64>)
  htim4.Init.Prescaler = 64-1;
 80078cc:	4915      	ldr	r1, [pc, #84]	@ (8007924 <MX_TIM4_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078ce:	2300      	movs	r3, #0
  htim4.Init.Prescaler = 64-1;
 80078d0:	e9c0 1200 	strd	r1, r2, [r0]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 1000-1;
 80078d4:	f240 32e7 	movw	r2, #999	@ 0x3e7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078d8:	e9cd 3300 	strd	r3, r3, [sp]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078dc:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078e0:	6083      	str	r3, [r0, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80078e2:	2380      	movs	r3, #128	@ 0x80
 80078e4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80078e6:	f002 f9c3 	bl	8009c70 <HAL_TIM_Base_Init>
 80078ea:	b108      	cbz	r0, 80078f0 <MX_TIM4_Init+0x34>
  {
    Error_Handler();
 80078ec:	f7ff fcca 	bl	8007284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80078f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80078f4:	480a      	ldr	r0, [pc, #40]	@ (8007920 <MX_TIM4_Init+0x64>)
 80078f6:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80078f8:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80078fa:	f002 f9ef 	bl	8009cdc <HAL_TIM_ConfigClockSource>
 80078fe:	b108      	cbz	r0, 8007904 <MX_TIM4_Init+0x48>
  {
    Error_Handler();
 8007900:	f7ff fcc0 	bl	8007284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007904:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007906:	4669      	mov	r1, sp
 8007908:	4805      	ldr	r0, [pc, #20]	@ (8007920 <MX_TIM4_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800790a:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800790e:	f002 fa7f 	bl	8009e10 <HAL_TIMEx_MasterConfigSynchronization>
 8007912:	b108      	cbz	r0, 8007918 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8007914:	f7ff fcb6 	bl	8007284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8007918:	b007      	add	sp, #28
 800791a:	f85d fb04 	ldr.w	pc, [sp], #4
 800791e:	bf00      	nop
 8007920:	200009a4 	.word	0x200009a4
 8007924:	40000800 	.word	0x40000800

08007928 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007928:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM3)
 800792a:	6803      	ldr	r3, [r0, #0]
 800792c:	4a17      	ldr	r2, [pc, #92]	@ (800798c <HAL_TIM_Base_MspInit+0x64>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d114      	bne.n	800795c <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007932:	4b17      	ldr	r3, [pc, #92]	@ (8007990 <HAL_TIM_Base_MspInit+0x68>)

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 13, 0);
 8007934:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007936:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 13, 0);
 8007938:	210d      	movs	r1, #13
    __HAL_RCC_TIM3_CLK_ENABLE();
 800793a:	f042 0202 	orr.w	r2, r2, #2
 800793e:	61da      	str	r2, [r3, #28]
 8007940:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 13, 0);
 8007942:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 13, 0);
 800794c:	f001 f8ba 	bl	8008ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007950:	201d      	movs	r0, #29
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8007952:	b003      	add	sp, #12
 8007954:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007958:	f001 b8e4 	b.w	8008b24 <HAL_NVIC_EnableIRQ>
  else if(tim_baseHandle->Instance==TIM4)
 800795c:	4a0d      	ldr	r2, [pc, #52]	@ (8007994 <HAL_TIM_Base_MspInit+0x6c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d110      	bne.n	8007984 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007962:	4b0b      	ldr	r3, [pc, #44]	@ (8007990 <HAL_TIM_Base_MspInit+0x68>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 13, 0);
 8007964:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007966:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 13, 0);
 8007968:	210d      	movs	r1, #13
    __HAL_RCC_TIM4_CLK_ENABLE();
 800796a:	f042 0204 	orr.w	r2, r2, #4
 800796e:	61da      	str	r2, [r3, #28]
 8007970:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 13, 0);
 8007972:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007974:	f003 0304 	and.w	r3, r3, #4
 8007978:	9301      	str	r3, [sp, #4]
 800797a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 13, 0);
 800797c:	f001 f8a2 	bl	8008ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007980:	201e      	movs	r0, #30
 8007982:	e7e6      	b.n	8007952 <HAL_TIM_Base_MspInit+0x2a>
}
 8007984:	b003      	add	sp, #12
 8007986:	f85d fb04 	ldr.w	pc, [sp], #4
 800798a:	bf00      	nop
 800798c:	40000400 	.word	0x40000400
 8007990:	40021000 	.word	0x40021000
 8007994:	40000800 	.word	0x40000800

08007998 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
//Timer3 重装载中断间�???100ms
//Timer4 重装载中断间�???1ms
//Timer3、Timer4 共用同一回调函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8007998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(htim == &htim3){
 800799a:	4b9b      	ldr	r3, [pc, #620]	@ (8007c08 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800799c:	4298      	cmp	r0, r3
 800799e:	f040 8192 	bne.w	8007cc6 <HAL_TIM_PeriodElapsedCallback+0x32e>
		now_time_inject++;

		if((now_time_inject % 10 == 0) && ADC_CONV_cplt){
 80079a2:	220a      	movs	r2, #10
		now_time_inject++;
 80079a4:	4c99      	ldr	r4, [pc, #612]	@ (8007c0c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	3301      	adds	r3, #1
 80079aa:	6023      	str	r3, [r4, #0]
		if((now_time_inject % 10 == 0) && ADC_CONV_cplt){
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80079b2:	fb02 3311 	mls	r3, r2, r1, r3
 80079b6:	b953      	cbnz	r3, 80079ce <HAL_TIM_PeriodElapsedCallback+0x36>
 80079b8:	4a95      	ldr	r2, [pc, #596]	@ (8007c10 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80079ba:	7811      	ldrb	r1, [r2, #0]
 80079bc:	b139      	cbz	r1, 80079ce <HAL_TIM_PeriodElapsedCallback+0x36>
			ADC_CONV_cplt = 0;
 80079be:	7013      	strb	r3, [r2, #0]
			if(page_location == Main_page){
 80079c0:	4b94      	ldr	r3, [pc, #592]	@ (8007c14 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	b91b      	cbnz	r3, 80079ce <HAL_TIM_PeriodElapsedCallback+0x36>
			refresh_bat_vlt();
 80079c6:	f7fb f99b 	bl	8002d00 <refresh_bat_vlt>
			refresh_gasPrs();
 80079ca:	f7fe fe77 	bl	80066bc <refresh_gasPrs>
			}
		}

		if(Injecting){
 80079ce:	4d92      	ldr	r5, [pc, #584]	@ (8007c18 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80079d0:	782b      	ldrb	r3, [r5, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d04a      	beq.n	8007a6c <HAL_TIM_PeriodElapsedCallback+0xd4>
			if(cheat_flag == 1){
 80079d6:	4b91      	ldr	r3, [pc, #580]	@ (8007c1c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d13f      	bne.n	8007a5e <HAL_TIM_PeriodElapsedCallback+0xc6>
				sprintf(Tx_Buffer,"Main.t0.txt=\"请按规\r\n范操作\"\xff\xff\xff");
 80079de:	4990      	ldr	r1, [pc, #576]	@ (8007c20 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80079e0:	4890      	ldr	r0, [pc, #576]	@ (8007c24 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80079e2:	f004 ff36 	bl	800c852 <strcpy>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80079e6:	488f      	ldr	r0, [pc, #572]	@ (8007c24 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80079e8:	f000 fbfc 	bl	80081e4 <USART1_Tx_HMIdata>

				if(now_time_inject % 5 == 0){
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	4a8e      	ldr	r2, [pc, #568]	@ (8007c28 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80079f0:	4353      	muls	r3, r2
 80079f2:	f1b3 3f33 	cmp.w	r3, #858993459	@ 0x33333333
 80079f6:	d803      	bhi.n	8007a00 <HAL_TIM_PeriodElapsedCallback+0x68>
					HAL_GPIO_TogglePin(LED_Y_GPIO_Port, LED_Y_Pin);
 80079f8:	2110      	movs	r1, #16
 80079fa:	488c      	ldr	r0, [pc, #560]	@ (8007c2c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80079fc:	f001 faff 	bl	8008ffe <HAL_GPIO_TogglePin>
				}

				pause_state = 1;
 8007a00:	2201      	movs	r2, #1
 8007a02:	4b8b      	ldr	r3, [pc, #556]	@ (8007c30 <HAL_TIM_PeriodElapsedCallback+0x298>)

				InjectTimes += Invalid_action_times;
 8007a04:	488b      	ldr	r0, [pc, #556]	@ (8007c34 <HAL_TIM_PeriodElapsedCallback+0x29c>)
				pause_state = 1;
 8007a06:	701a      	strb	r2, [r3, #0]
				InjectTimes += Invalid_action_times;
 8007a08:	4a8b      	ldr	r2, [pc, #556]	@ (8007c38 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8007a0a:	7801      	ldrb	r1, [r0, #0]
 8007a0c:	7813      	ldrb	r3, [r2, #0]
				RemainingTimes += Invalid_action_times;

				if(total_inject_Times > Invalid_action_times){
 8007a0e:	4e8b      	ldr	r6, [pc, #556]	@ (8007c3c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
				InjectTimes += Invalid_action_times;
 8007a10:	440b      	add	r3, r1
 8007a12:	7013      	strb	r3, [r2, #0]
				RemainingTimes += Invalid_action_times;
 8007a14:	4b8a      	ldr	r3, [pc, #552]	@ (8007c40 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
				}
				else{
					total_inject_Times = 0;
				}

				if(total_inject_Dosage > (Invalid_action_times)*2){
 8007a16:	004f      	lsls	r7, r1, #1
				RemainingTimes += Invalid_action_times;
 8007a18:	781a      	ldrb	r2, [r3, #0]
 8007a1a:	440a      	add	r2, r1
 8007a1c:	b2d2      	uxtb	r2, r2
 8007a1e:	701a      	strb	r2, [r3, #0]
				if(total_inject_Times > Invalid_action_times){
 8007a20:	8833      	ldrh	r3, [r6, #0]
				else {
					total_inject_Dosage = 0;
				}
				Invalid_action_times  = 0;

				sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",RemainingTimes*2);//RemainingDosage
 8007a22:	0052      	lsls	r2, r2, #1
				if(total_inject_Times > Invalid_action_times){
 8007a24:	4299      	cmp	r1, r3
					total_inject_Times = 0;
 8007a26:	bf2e      	itee	cs
 8007a28:	2300      	movcs	r3, #0
					total_inject_Times -= Invalid_action_times;
 8007a2a:	1a5b      	subcc	r3, r3, r1
 8007a2c:	b29b      	uxthcc	r3, r3
 8007a2e:	8033      	strh	r3, [r6, #0]
				if(total_inject_Dosage > (Invalid_action_times)*2){
 8007a30:	4e84      	ldr	r6, [pc, #528]	@ (8007c44 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8007a32:	8833      	ldrh	r3, [r6, #0]
 8007a34:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
					total_inject_Dosage = 0;
 8007a38:	bfd2      	itee	le
 8007a3a:	2300      	movle	r3, #0
					total_inject_Dosage =total_inject_Dosage - (Invalid_action_times)*2 ;
 8007a3c:	1bdb      	subgt	r3, r3, r7
 8007a3e:	b29b      	uxthgt	r3, r3
 8007a40:	8033      	strh	r3, [r6, #0]
				Invalid_action_times  = 0;
 8007a42:	2300      	movs	r3, #0
				sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",RemainingTimes*2);//RemainingDosage
 8007a44:	4980      	ldr	r1, [pc, #512]	@ (8007c48 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
				Invalid_action_times  = 0;
 8007a46:	7003      	strb	r3, [r0, #0]
				sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",RemainingTimes*2);//RemainingDosage
 8007a48:	4876      	ldr	r0, [pc, #472]	@ (8007c24 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007a4a:	f004 fcff 	bl	800c44c <siprintf>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8007a4e:	4875      	ldr	r0, [pc, #468]	@ (8007c24 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007a50:	f000 fbc8 	bl	80081e4 <USART1_Tx_HMIdata>

				Refresh_counter();
 8007a54:	f7fb fb12 	bl	800307c <Refresh_counter>

				HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_RESET);
			}
		}

		if(Injecting && !pause_state){
 8007a58:	782b      	ldrb	r3, [r5, #0]
 8007a5a:	b923      	cbnz	r3, 8007a66 <HAL_TIM_PeriodElapsedCallback+0xce>
 8007a5c:	e006      	b.n	8007a6c <HAL_TIM_PeriodElapsedCallback+0xd4>
			}else if(cheat_flag == 0 || cancel_break){
 8007a5e:	b32b      	cbz	r3, 8007aac <HAL_TIM_PeriodElapsedCallback+0x114>
 8007a60:	4b7a      	ldr	r3, [pc, #488]	@ (8007c4c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	bb13      	cbnz	r3, 8007aac <HAL_TIM_PeriodElapsedCallback+0x114>
		if(Injecting && !pause_state){
 8007a66:	4b72      	ldr	r3, [pc, #456]	@ (8007c30 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	b32b      	cbz	r3, 8007ab8 <HAL_TIM_PeriodElapsedCallback+0x120>
			if(now_time_inject % 5 == 0)
				HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
			}
			else
			{
				if(clear_delay_time >= 3000){
 8007a6c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8007a70:	4b77      	ldr	r3, [pc, #476]	@ (8007c50 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8007a72:	6819      	ldr	r1, [r3, #0]
 8007a74:	4291      	cmp	r1, r2
 8007a76:	d929      	bls.n	8007acc <HAL_TIM_PeriodElapsedCallback+0x134>
					total_inject_Times = 0;
 8007a78:	2600      	movs	r6, #0
					total_Times = 0;
					total_inject_Dosage = 0;
					current_TreeNo = 0;
					clear_counter = 1;
 8007a7a:	2101      	movs	r1, #1
					total_inject_Times = 0;
 8007a7c:	4a6f      	ldr	r2, [pc, #444]	@ (8007c3c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
					clear_delay_time = 0;

					Buzzer(1000);
 8007a7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
					total_inject_Times = 0;
 8007a82:	8016      	strh	r6, [r2, #0]
					total_Times = 0;
 8007a84:	4a73      	ldr	r2, [pc, #460]	@ (8007c54 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
					clear_delay_time = 0;
 8007a86:	601e      	str	r6, [r3, #0]
					total_Times = 0;
 8007a88:	8016      	strh	r6, [r2, #0]
					total_inject_Dosage = 0;
 8007a8a:	4a6e      	ldr	r2, [pc, #440]	@ (8007c44 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8007a8c:	8016      	strh	r6, [r2, #0]
					current_TreeNo = 0;
 8007a8e:	4a72      	ldr	r2, [pc, #456]	@ (8007c58 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8007a90:	8016      	strh	r6, [r2, #0]
					clear_counter = 1;
 8007a92:	4a72      	ldr	r2, [pc, #456]	@ (8007c5c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8007a94:	7011      	strb	r1, [r2, #0]
					Buzzer(1000);
 8007a96:	f7fb f9d1 	bl	8002e3c <Buzzer>
					Refresh_counter();
 8007a9a:	f7fb faef 	bl	800307c <Refresh_counter>

					HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin,GPIO_PIN_RESET);
 8007a9e:	4632      	mov	r2, r6
 8007aa0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007aa4:	486e      	ldr	r0, [pc, #440]	@ (8007c60 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8007aa6:	f001 faa5 	bl	8008ff4 <HAL_GPIO_WritePin>
 8007aaa:	e00f      	b.n	8007acc <HAL_TIM_PeriodElapsedCallback+0x134>
				HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_RESET);
 8007aac:	2200      	movs	r2, #0
 8007aae:	2110      	movs	r1, #16
 8007ab0:	485e      	ldr	r0, [pc, #376]	@ (8007c2c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007ab2:	f001 fa9f 	bl	8008ff4 <HAL_GPIO_WritePin>
 8007ab6:	e7cf      	b.n	8007a58 <HAL_TIM_PeriodElapsedCallback+0xc0>
			if(now_time_inject % 5 == 0)
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	4a5b      	ldr	r2, [pc, #364]	@ (8007c28 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8007abc:	4353      	muls	r3, r2
 8007abe:	f1b3 3f33 	cmp.w	r3, #858993459	@ 0x33333333
 8007ac2:	d803      	bhi.n	8007acc <HAL_TIM_PeriodElapsedCallback+0x134>
				HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8007ac4:	2102      	movs	r1, #2
 8007ac6:	4867      	ldr	r0, [pc, #412]	@ (8007c64 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8007ac8:	f001 fa99 	bl	8008ffe <HAL_GPIO_TogglePin>
				}
			}

		if(cancel_delay_time >= 3000 && (page_location == Main_page)){
 8007acc:	f640 33b7 	movw	r3, #2999	@ 0xbb7
 8007ad0:	4965      	ldr	r1, [pc, #404]	@ (8007c68 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8007ad2:	680a      	ldr	r2, [r1, #0]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d93c      	bls.n	8007b52 <HAL_TIM_PeriodElapsedCallback+0x1ba>
 8007ad8:	4b4e      	ldr	r3, [pc, #312]	@ (8007c14 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d138      	bne.n	8007b52 <HAL_TIM_PeriodElapsedCallback+0x1ba>
			if(Injecting && pause_state){
 8007ae0:	782a      	ldrb	r2, [r5, #0]
 8007ae2:	4e62      	ldr	r6, [pc, #392]	@ (8007c6c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8007ae4:	2a00      	cmp	r2, #0
 8007ae6:	d075      	beq.n	8007bd4 <HAL_TIM_PeriodElapsedCallback+0x23c>
 8007ae8:	4a51      	ldr	r2, [pc, #324]	@ (8007c30 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8007aea:	7812      	ldrb	r2, [r2, #0]
 8007aec:	2a00      	cmp	r2, #0
 8007aee:	d071      	beq.n	8007bd4 <HAL_TIM_PeriodElapsedCallback+0x23c>
				cancel_delay_time = 0;
 8007af0:	600b      	str	r3, [r1, #0]
				Injecting = 0;
				totalCycles = 0;
				InjectTimes = 0;
				RemainingTimes = 0;
				cancel_break = 1;
 8007af2:	2101      	movs	r1, #1
				totalCycles = 0;
 8007af4:	4a5e      	ldr	r2, [pc, #376]	@ (8007c70 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
				Injecting = 0;
 8007af6:	702b      	strb	r3, [r5, #0]
				totalCycles = 0;
 8007af8:	7013      	strb	r3, [r2, #0]
				InjectTimes = 0;
 8007afa:	4a4f      	ldr	r2, [pc, #316]	@ (8007c38 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
				cheat_flag = 0;
				current_TreeNo--;

				sprintf(Tx_Buffer,"Main.t0.txt=\"取消中...\"\xff\xff\xff");
 8007afc:	4849      	ldr	r0, [pc, #292]	@ (8007c24 <HAL_TIM_PeriodElapsedCallback+0x28c>)
				InjectTimes = 0;
 8007afe:	7013      	strb	r3, [r2, #0]
				RemainingTimes = 0;
 8007b00:	4a4f      	ldr	r2, [pc, #316]	@ (8007c40 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8007b02:	7013      	strb	r3, [r2, #0]
				cancel_break = 1;
 8007b04:	4a51      	ldr	r2, [pc, #324]	@ (8007c4c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8007b06:	7011      	strb	r1, [r2, #0]
				cheat_flag = 0;
 8007b08:	4a44      	ldr	r2, [pc, #272]	@ (8007c1c <HAL_TIM_PeriodElapsedCallback+0x284>)
				sprintf(Tx_Buffer,"Main.t0.txt=\"取消中...\"\xff\xff\xff");
 8007b0a:	495a      	ldr	r1, [pc, #360]	@ (8007c74 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
				cheat_flag = 0;
 8007b0c:	7013      	strb	r3, [r2, #0]
				current_TreeNo--;
 8007b0e:	4a52      	ldr	r2, [pc, #328]	@ (8007c58 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8007b10:	8813      	ldrh	r3, [r2, #0]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	8013      	strh	r3, [r2, #0]
				sprintf(Tx_Buffer,"Main.t0.txt=\"取消中...\"\xff\xff\xff");
 8007b16:	f004 fe9c 	bl	800c852 <strcpy>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8007b1a:	4842      	ldr	r0, [pc, #264]	@ (8007c24 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007b1c:	f000 fb62 	bl	80081e4 <USART1_Tx_HMIdata>

				sprintf(Tx_Buffer,"Main.n0.val=0\xff\xff\xff");
 8007b20:	4955      	ldr	r1, [pc, #340]	@ (8007c78 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8007b22:	4840      	ldr	r0, [pc, #256]	@ (8007c24 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007b24:	f004 fe95 	bl	800c852 <strcpy>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8007b28:	483e      	ldr	r0, [pc, #248]	@ (8007c24 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007b2a:	f000 fb5b 	bl	80081e4 <USART1_Tx_HMIdata>

				sprintf(Tx_Buffer,"Main.t8.txt=\"\"\xff\xff\xff");
 8007b2e:	4953      	ldr	r1, [pc, #332]	@ (8007c7c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8007b30:	483c      	ldr	r0, [pc, #240]	@ (8007c24 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007b32:	f004 fe8e 	bl	800c852 <strcpy>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8007b36:	483b      	ldr	r0, [pc, #236]	@ (8007c24 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007b38:	f000 fb54 	bl	80081e4 <USART1_Tx_HMIdata>

				Motor_Reverse();
 8007b3c:	f7ff fbbc 	bl	80072b8 <Motor_Reverse>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);

				sprintf(Tx_Buffer,"Main.t8.txt=\"\"\xff\xff\xff");
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
			}
			Dosage_set = 0;
 8007b40:	2300      	movs	r3, #0
			sprintf(Tx_Buffer,"Main.t0.txt=\"\"\xff\xff\xff");
 8007b42:	494f      	ldr	r1, [pc, #316]	@ (8007c80 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8007b44:	4837      	ldr	r0, [pc, #220]	@ (8007c24 <HAL_TIM_PeriodElapsedCallback+0x28c>)
			Dosage_set = 0;
 8007b46:	8033      	strh	r3, [r6, #0]
			sprintf(Tx_Buffer,"Main.t0.txt=\"\"\xff\xff\xff");
 8007b48:	f004 fe83 	bl	800c852 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8007b4c:	4835      	ldr	r0, [pc, #212]	@ (8007c24 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007b4e:	f000 fb49 	bl	80081e4 <USART1_Tx_HMIdata>
		}

		if(ExGas_delay_time >= 3500 && (page_location == Main_page)){
 8007b52:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8007b56:	4b4b      	ldr	r3, [pc, #300]	@ (8007c84 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8007b58:	6819      	ldr	r1, [r3, #0]
 8007b5a:	4291      	cmp	r1, r2
 8007b5c:	f240 80a4 	bls.w	8007ca8 <HAL_TIM_PeriodElapsedCallback+0x310>
 8007b60:	4a2c      	ldr	r2, [pc, #176]	@ (8007c14 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8007b62:	7812      	ldrb	r2, [r2, #0]
 8007b64:	2a00      	cmp	r2, #0
 8007b66:	f040 809f 	bne.w	8007ca8 <HAL_TIM_PeriodElapsedCallback+0x310>
			EX_GAS_start = 1;
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	4b46      	ldr	r3, [pc, #280]	@ (8007c88 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
		}
		else
		if(ExGas_delay_time >= 3500 && (page_location == File_M_page)){
				ExGas_delay_time = 0;
				EX_GAS_start = 0;
 8007b6e:	701a      	strb	r2, [r3, #0]
			}

		if(Injecting && over_pressure){
 8007b70:	782b      	ldrb	r3, [r5, #0]
 8007b72:	b1b3      	cbz	r3, 8007ba2 <HAL_TIM_PeriodElapsedCallback+0x20a>
 8007b74:	4b45      	ldr	r3, [pc, #276]	@ (8007c8c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	b19b      	cbz	r3, 8007ba2 <HAL_TIM_PeriodElapsedCallback+0x20a>
			sprintf(Tx_Buffer,"Main.t0.txt=\"注射压\r\n力超压\"\xff\xff\xff");
 8007b7a:	4945      	ldr	r1, [pc, #276]	@ (8007c90 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8007b7c:	4829      	ldr	r0, [pc, #164]	@ (8007c24 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007b7e:	f004 fe68 	bl	800c852 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8007b82:	4828      	ldr	r0, [pc, #160]	@ (8007c24 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007b84:	f000 fb2e 	bl	80081e4 <USART1_Tx_HMIdata>

			if(now_time_inject % 5 == 0){
 8007b88:	6823      	ldr	r3, [r4, #0]
 8007b8a:	4a27      	ldr	r2, [pc, #156]	@ (8007c28 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8007b8c:	4353      	muls	r3, r2
 8007b8e:	f1b3 3f33 	cmp.w	r3, #858993459	@ 0x33333333
 8007b92:	d803      	bhi.n	8007b9c <HAL_TIM_PeriodElapsedCallback+0x204>
				HAL_GPIO_TogglePin(LED_Y_GPIO_Port, LED_Y_Pin);
 8007b94:	2110      	movs	r1, #16
 8007b96:	4825      	ldr	r0, [pc, #148]	@ (8007c2c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007b98:	f001 fa31 	bl	8008ffe <HAL_GPIO_TogglePin>
			}
			pause_state = 1;
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	4b24      	ldr	r3, [pc, #144]	@ (8007c30 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8007ba0:	701a      	strb	r2, [r3, #0]
		}

		if(confirm_press_time >= 3000 && (page_location == Main_page)){
 8007ba2:	f640 33b7 	movw	r3, #2999	@ 0xbb7
 8007ba6:	4a3b      	ldr	r2, [pc, #236]	@ (8007c94 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8007ba8:	8811      	ldrh	r1, [r2, #0]
 8007baa:	4299      	cmp	r1, r3
 8007bac:	d911      	bls.n	8007bd2 <HAL_TIM_PeriodElapsedCallback+0x23a>
 8007bae:	4b19      	ldr	r3, [pc, #100]	@ (8007c14 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8007bb0:	7819      	ldrb	r1, [r3, #0]
 8007bb2:	b971      	cbnz	r1, 8007bd2 <HAL_TIM_PeriodElapsedCallback+0x23a>
			confirm_press_time = 0;
			page_location = File_M_page;
 8007bb4:	2401      	movs	r4, #1
			confirm_press_time = 0;
 8007bb6:	8011      	strh	r1, [r2, #0]
			sprintf(Tx_Buffer,"page File_M\xff\xff\xff");
 8007bb8:	481a      	ldr	r0, [pc, #104]	@ (8007c24 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007bba:	4937      	ldr	r1, [pc, #220]	@ (8007c98 <HAL_TIM_PeriodElapsedCallback+0x300>)
			page_location = File_M_page;
 8007bbc:	701c      	strb	r4, [r3, #0]
			sprintf(Tx_Buffer,"page File_M\xff\xff\xff");
 8007bbe:	f004 fe48 	bl	800c852 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8007bc2:	4818      	ldr	r0, [pc, #96]	@ (8007c24 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007bc4:	f000 fb0e 	bl	80081e4 <USART1_Tx_HMIdata>
			HAL_Delay(20);
 8007bc8:	2014      	movs	r0, #20
 8007bca:	f000 fc4b 	bl	8008464 <HAL_Delay>
			refresh_dir = 1;
 8007bce:	4b33      	ldr	r3, [pc, #204]	@ (8007c9c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8007bd0:	701c      	strb	r4, [r3, #0]
				waiting_start_timeout = 1;
			}
		}

	}//&htim4
}
 8007bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else if(waiting_start){
 8007bd4:	4b32      	ldr	r3, [pc, #200]	@ (8007ca0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8007bd6:	781a      	ldrb	r2, [r3, #0]
 8007bd8:	2a00      	cmp	r2, #0
 8007bda:	d0b1      	beq.n	8007b40 <HAL_TIM_PeriodElapsedCallback+0x1a8>
				waiting_start = 0;
 8007bdc:	2200      	movs	r2, #0
 8007bde:	701a      	strb	r2, [r3, #0]
				Dosage_load = 0;
 8007be0:	4b30      	ldr	r3, [pc, #192]	@ (8007ca4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
				cancel_delay_time = 0;
 8007be2:	600a      	str	r2, [r1, #0]
				sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",Dosage_set);
 8007be4:	480f      	ldr	r0, [pc, #60]	@ (8007c24 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007be6:	4918      	ldr	r1, [pc, #96]	@ (8007c48 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
				Dosage_load = 0;
 8007be8:	801a      	strh	r2, [r3, #0]
				Dosage_set = 0;
 8007bea:	8032      	strh	r2, [r6, #0]
				sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",Dosage_set);
 8007bec:	f004 fc2e 	bl	800c44c <siprintf>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8007bf0:	480c      	ldr	r0, [pc, #48]	@ (8007c24 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007bf2:	f000 faf7 	bl	80081e4 <USART1_Tx_HMIdata>
				sprintf(Tx_Buffer,"Main.t8.txt=\"\"\xff\xff\xff");
 8007bf6:	4921      	ldr	r1, [pc, #132]	@ (8007c7c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8007bf8:	480a      	ldr	r0, [pc, #40]	@ (8007c24 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007bfa:	f004 fe2a 	bl	800c852 <strcpy>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8007bfe:	4809      	ldr	r0, [pc, #36]	@ (8007c24 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007c00:	f000 faf0 	bl	80081e4 <USART1_Tx_HMIdata>
 8007c04:	e79c      	b.n	8007b40 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8007c06:	bf00      	nop
 8007c08:	200009ec 	.word	0x200009ec
 8007c0c:	20000a68 	.word	0x20000a68
 8007c10:	200008b4 	.word	0x200008b4
 8007c14:	20000370 	.word	0x20000370
 8007c18:	20000944 	.word	0x20000944
 8007c1c:	20000a5d 	.word	0x20000a5d
 8007c20:	0800f8c6 	.word	0x0800f8c6
 8007c24:	20000b8e 	.word	0x20000b8e
 8007c28:	cccccccd 	.word	0xcccccccd
 8007c2c:	40010c00 	.word	0x40010c00
 8007c30:	20000942 	.word	0x20000942
 8007c34:	20000a5c 	.word	0x20000a5c
 8007c38:	20000945 	.word	0x20000945
 8007c3c:	20000a52 	.word	0x20000a52
 8007c40:	20000a54 	.word	0x20000a54
 8007c44:	20000a50 	.word	0x20000a50
 8007c48:	0800f38a 	.word	0x0800f38a
 8007c4c:	2000092a 	.word	0x2000092a
 8007c50:	20000a3c 	.word	0x20000a3c
 8007c54:	20000a4e 	.word	0x20000a4e
 8007c58:	200008c2 	.word	0x200008c2
 8007c5c:	2000092b 	.word	0x2000092b
 8007c60:	40011000 	.word	0x40011000
 8007c64:	40011400 	.word	0x40011400
 8007c68:	20000a38 	.word	0x20000a38
 8007c6c:	200008c6 	.word	0x200008c6
 8007c70:	20000943 	.word	0x20000943
 8007c74:	0800f963 	.word	0x0800f963
 8007c78:	0800efc1 	.word	0x0800efc1
 8007c7c:	0800f005 	.word	0x0800f005
 8007c80:	0800f39c 	.word	0x0800f39c
 8007c84:	20000a34 	.word	0x20000a34
 8007c88:	20000a4c 	.word	0x20000a4c
 8007c8c:	20000a5e 	.word	0x20000a5e
 8007c90:	0800f8ec 	.word	0x0800f8ec
 8007c94:	20000a60 	.word	0x20000a60
 8007c98:	0800f981 	.word	0x0800f981
 8007c9c:	20000386 	.word	0x20000386
 8007ca0:	20000930 	.word	0x20000930
 8007ca4:	200008c4 	.word	0x200008c4
		if(ExGas_delay_time >= 3500 && (page_location == File_M_page)){
 8007ca8:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8007cac:	6819      	ldr	r1, [r3, #0]
 8007cae:	4291      	cmp	r1, r2
 8007cb0:	f67f af5e 	bls.w	8007b70 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 8007cb4:	4a9a      	ldr	r2, [pc, #616]	@ (8007f20 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8007cb6:	7812      	ldrb	r2, [r2, #0]
 8007cb8:	2a01      	cmp	r2, #1
 8007cba:	f47f af59 	bne.w	8007b70 <HAL_TIM_PeriodElapsedCallback+0x1d8>
				ExGas_delay_time = 0;
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	601a      	str	r2, [r3, #0]
				EX_GAS_start = 0;
 8007cc2:	4b98      	ldr	r3, [pc, #608]	@ (8007f24 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8007cc4:	e753      	b.n	8007b6e <HAL_TIM_PeriodElapsedCallback+0x1d6>
	if(htim == &htim4){
 8007cc6:	4b98      	ldr	r3, [pc, #608]	@ (8007f28 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8007cc8:	4298      	cmp	r0, r3
 8007cca:	d182      	bne.n	8007bd2 <HAL_TIM_PeriodElapsedCallback+0x23a>
		now_time++;
 8007ccc:	4c97      	ldr	r4, [pc, #604]	@ (8007f2c <HAL_TIM_PeriodElapsedCallback+0x594>)
		if((key_lock_time - now_time >= 50) && key_scan_lock){//下降沿中断触发后50ms内锁止，防止反复触发
 8007cce:	4a98      	ldr	r2, [pc, #608]	@ (8007f30 <HAL_TIM_PeriodElapsedCallback+0x598>)
		now_time++;
 8007cd0:	6823      	ldr	r3, [r4, #0]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	6023      	str	r3, [r4, #0]
		if((key_lock_time - now_time >= 50) && key_scan_lock){//下降沿中断触发后50ms内锁止，防止反复触发
 8007cd6:	6821      	ldr	r1, [r4, #0]
 8007cd8:	6813      	ldr	r3, [r2, #0]
 8007cda:	1a5b      	subs	r3, r3, r1
 8007cdc:	2b31      	cmp	r3, #49	@ 0x31
 8007cde:	d905      	bls.n	8007cec <HAL_TIM_PeriodElapsedCallback+0x354>
 8007ce0:	4994      	ldr	r1, [pc, #592]	@ (8007f34 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8007ce2:	780b      	ldrb	r3, [r1, #0]
 8007ce4:	b113      	cbz	r3, 8007cec <HAL_TIM_PeriodElapsedCallback+0x354>
			key_scan_lock = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	700b      	strb	r3, [r1, #0]
			key_lock_time = 0;
 8007cea:	6013      	str	r3, [r2, #0]
		if(key_pressed)
 8007cec:	4d92      	ldr	r5, [pc, #584]	@ (8007f38 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8007cee:	782b      	ldrb	r3, [r5, #0]
 8007cf0:	b11b      	cbz	r3, 8007cfa <HAL_TIM_PeriodElapsedCallback+0x362>
			key_now_time++;
 8007cf2:	4a92      	ldr	r2, [pc, #584]	@ (8007f3c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8007cf4:	6813      	ldr	r3, [r2, #0]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	6013      	str	r3, [r2, #0]
		if(GasPrs_LOW == 1){
 8007cfa:	4b91      	ldr	r3, [pc, #580]	@ (8007f40 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8007cfc:	781a      	ldrb	r2, [r3, #0]
 8007cfe:	4b91      	ldr	r3, [pc, #580]	@ (8007f44 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8007d00:	2a01      	cmp	r2, #1
 8007d02:	d109      	bne.n	8007d18 <HAL_TIM_PeriodElapsedCallback+0x380>
			if(motor_direction == FORWARD){
 8007d04:	4a90      	ldr	r2, [pc, #576]	@ (8007f48 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8007d06:	f992 2000 	ldrsb.w	r2, [r2]
 8007d0a:	2a01      	cmp	r2, #1
 8007d0c:	d106      	bne.n	8007d1c <HAL_TIM_PeriodElapsedCallback+0x384>
				GasPrs_LOW_time++;
 8007d0e:	881a      	ldrh	r2, [r3, #0]
 8007d10:	3201      	adds	r2, #1
 8007d12:	b292      	uxth	r2, r2
			GasPrs_LOW_time = 0;
 8007d14:	801a      	strh	r2, [r3, #0]
 8007d16:	e001      	b.n	8007d1c <HAL_TIM_PeriodElapsedCallback+0x384>
		}else if(GasPrs_LOW == 0)
 8007d18:	2a00      	cmp	r2, #0
 8007d1a:	d0fb      	beq.n	8007d14 <HAL_TIM_PeriodElapsedCallback+0x37c>
		if(GasPrs_LOW_time >= 4500){
 8007d1c:	f241 1193 	movw	r1, #4499	@ 0x1193
 8007d20:	881a      	ldrh	r2, [r3, #0]
 8007d22:	b292      	uxth	r2, r2
 8007d24:	428a      	cmp	r2, r1
 8007d26:	d96e      	bls.n	8007e06 <HAL_TIM_PeriodElapsedCallback+0x46e>
			cheat_flag = 1;
 8007d28:	2201      	movs	r2, #1
 8007d2a:	4b88      	ldr	r3, [pc, #544]	@ (8007f4c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8007d2c:	701a      	strb	r2, [r3, #0]
		if(GasPrs_HIGH == 1){
 8007d2e:	4b88      	ldr	r3, [pc, #544]	@ (8007f50 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
		if((PAUSE_KEY == GPIO_PIN_SET) || (NRESET_KEY == GPIO_PIN_SET)){
 8007d30:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
		if(GasPrs_HIGH == 1){
 8007d34:	781b      	ldrb	r3, [r3, #0]
		if((PAUSE_KEY == GPIO_PIN_SET) || (NRESET_KEY == GPIO_PIN_SET)){
 8007d36:	4887      	ldr	r0, [pc, #540]	@ (8007f54 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
		if(GasPrs_HIGH == 1){
 8007d38:	2b01      	cmp	r3, #1
			over_pressure = 1;
 8007d3a:	bf04      	itt	eq
 8007d3c:	4a86      	ldreq	r2, [pc, #536]	@ (8007f58 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8007d3e:	7013      	strbeq	r3, [r2, #0]
		if((PAUSE_KEY == GPIO_PIN_SET) || (NRESET_KEY == GPIO_PIN_SET)){
 8007d40:	f001 f952 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8007d44:	2801      	cmp	r0, #1
 8007d46:	d165      	bne.n	8007e14 <HAL_TIM_PeriodElapsedCallback+0x47c>
    	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin,GPIO_PIN_RESET);
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007d4e:	4881      	ldr	r0, [pc, #516]	@ (8007f54 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8007d50:	f001 f950 	bl	8008ff4 <HAL_GPIO_WritePin>
    	clear_delay_time = 0;
 8007d54:	2200      	movs	r2, #0
 8007d56:	4b81      	ldr	r3, [pc, #516]	@ (8007f5c <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8007d58:	601a      	str	r2, [r3, #0]
		if(PAUSE_KEY == GPIO_PIN_SET){
 8007d5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007d5e:	487d      	ldr	r0, [pc, #500]	@ (8007f54 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8007d60:	f001 f942 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8007d64:	2801      	cmp	r0, #1
 8007d66:	d17c      	bne.n	8007e62 <HAL_TIM_PeriodElapsedCallback+0x4ca>
			cancel_delay_time = 0;
 8007d68:	2200      	movs	r2, #0
 8007d6a:	4b7d      	ldr	r3, [pc, #500]	@ (8007f60 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8007d6c:	601a      	str	r2, [r3, #0]
		if(EX_GAS_KEY == GPIO_PIN_SET){
 8007d6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007d72:	487c      	ldr	r0, [pc, #496]	@ (8007f64 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8007d74:	f001 f938 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8007d78:	2801      	cmp	r0, #1
 8007d7a:	d17f      	bne.n	8007e7c <HAL_TIM_PeriodElapsedCallback+0x4e4>
			ExGas_delay_time = 0;
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	4b7a      	ldr	r3, [pc, #488]	@ (8007f68 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8007d80:	601a      	str	r2, [r3, #0]
		if(CONFIRM_KEY == GPIO_PIN_SET){
 8007d82:	2120      	movs	r1, #32
 8007d84:	4877      	ldr	r0, [pc, #476]	@ (8007f64 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8007d86:	f001 f92f 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8007d8a:	2801      	cmp	r0, #1
 8007d8c:	f040 8088 	bne.w	8007ea0 <HAL_TIM_PeriodElapsedCallback+0x508>
			confirm_press_time = 0;
 8007d90:	2200      	movs	r2, #0
 8007d92:	4b76      	ldr	r3, [pc, #472]	@ (8007f6c <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8007d94:	801a      	strh	r2, [r3, #0]
			if(key_pressed && key_value && (key_now_time - key_last_time > 1200) && !key_press_long){
 8007d96:	4976      	ldr	r1, [pc, #472]	@ (8007f70 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8007d98:	782a      	ldrb	r2, [r5, #0]
 8007d9a:	780b      	ldrb	r3, [r1, #0]
 8007d9c:	2a00      	cmp	r2, #0
 8007d9e:	f000 8090 	beq.w	8007ec2 <HAL_TIM_PeriodElapsedCallback+0x52a>
 8007da2:	4a74      	ldr	r2, [pc, #464]	@ (8007f74 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8007da4:	7812      	ldrb	r2, [r2, #0]
 8007da6:	2a00      	cmp	r2, #0
 8007da8:	f000 808b 	beq.w	8007ec2 <HAL_TIM_PeriodElapsedCallback+0x52a>
 8007dac:	4d63      	ldr	r5, [pc, #396]	@ (8007f3c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8007dae:	4872      	ldr	r0, [pc, #456]	@ (8007f78 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8007db0:	682a      	ldr	r2, [r5, #0]
 8007db2:	6806      	ldr	r6, [r0, #0]
 8007db4:	1b92      	subs	r2, r2, r6
 8007db6:	f5b2 6f96 	cmp.w	r2, #1200	@ 0x4b0
 8007dba:	f240 8082 	bls.w	8007ec2 <HAL_TIM_PeriodElapsedCallback+0x52a>
 8007dbe:	b91b      	cbnz	r3, 8007dc8 <HAL_TIM_PeriodElapsedCallback+0x430>
				key_now_time = 0;
 8007dc0:	602b      	str	r3, [r5, #0]
				key_last_time = 0;
 8007dc2:	6003      	str	r3, [r0, #0]
				key_press_long = 1;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	700b      	strb	r3, [r1, #0]
		if(key_press_long && (page_location == Main_page)){
 8007dc8:	4b55      	ldr	r3, [pc, #340]	@ (8007f20 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8007dca:	7818      	ldrb	r0, [r3, #0]
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	d17a      	bne.n	8007ec6 <HAL_TIM_PeriodElapsedCallback+0x52e>
			key_press_time++;
 8007dd0:	496a      	ldr	r1, [pc, #424]	@ (8007f7c <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8007dd2:	880b      	ldrh	r3, [r1, #0]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	800b      	strh	r3, [r1, #0]
			if(key_press_time >= 500){
 8007dda:	880b      	ldrh	r3, [r1, #0]
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007de2:	d370      	bcc.n	8007ec6 <HAL_TIM_PeriodElapsedCallback+0x52e>
				if(key_value == DECREASE_KEY_PRESS){
 8007de4:	4b63      	ldr	r3, [pc, #396]	@ (8007f74 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	f040 808b 	bne.w	8007f04 <HAL_TIM_PeriodElapsedCallback+0x56c>
				  if(Dosage_set > 1000)
 8007dee:	4a64      	ldr	r2, [pc, #400]	@ (8007f80 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8007df0:	8813      	ldrh	r3, [r2, #0]
 8007df2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007df6:	d97f      	bls.n	8007ef8 <HAL_TIM_PeriodElapsedCallback+0x560>
					  Dosage_set = 0;
 8007df8:	8010      	strh	r0, [r2, #0]
					key_value_Refresh = 1;
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	4b61      	ldr	r3, [pc, #388]	@ (8007f84 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8007dfe:	701a      	strb	r2, [r3, #0]
				key_press_time = 0;
 8007e00:	2300      	movs	r3, #0
 8007e02:	800b      	strh	r3, [r1, #0]
 8007e04:	e05f      	b.n	8007ec6 <HAL_TIM_PeriodElapsedCallback+0x52e>
		else if(GasPrs_LOW_time == 0){
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d18f      	bne.n	8007d2e <HAL_TIM_PeriodElapsedCallback+0x396>
			cheat_flag = 0;
 8007e0e:	4a4f      	ldr	r2, [pc, #316]	@ (8007f4c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8007e10:	7013      	strb	r3, [r2, #0]
 8007e12:	e78c      	b.n	8007d2e <HAL_TIM_PeriodElapsedCallback+0x396>
		if((PAUSE_KEY == GPIO_PIN_SET) || (NRESET_KEY == GPIO_PIN_SET)){
 8007e14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007e18:	4852      	ldr	r0, [pc, #328]	@ (8007f64 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8007e1a:	f001 f8e5 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8007e1e:	2801      	cmp	r0, #1
 8007e20:	d092      	beq.n	8007d48 <HAL_TIM_PeriodElapsedCallback+0x3b0>
		else if((clear_counter == 0) && (PAUSE_KEY == GPIO_PIN_RESET) && (NRESET_KEY == GPIO_PIN_RESET)){
 8007e22:	4b59      	ldr	r3, [pc, #356]	@ (8007f88 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d197      	bne.n	8007d5a <HAL_TIM_PeriodElapsedCallback+0x3c2>
 8007e2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007e2e:	4849      	ldr	r0, [pc, #292]	@ (8007f54 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8007e30:	f001 f8da 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d190      	bne.n	8007d5a <HAL_TIM_PeriodElapsedCallback+0x3c2>
 8007e38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007e3c:	4849      	ldr	r0, [pc, #292]	@ (8007f64 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8007e3e:	f001 f8d3 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8007e42:	2800      	cmp	r0, #0
 8007e44:	d189      	bne.n	8007d5a <HAL_TIM_PeriodElapsedCallback+0x3c2>
    	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin,GPIO_PIN_SET);
 8007e46:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007e50:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 8007e54:	f001 f8ce 	bl	8008ff4 <HAL_GPIO_WritePin>
    	clear_delay_time++;
 8007e58:	4a40      	ldr	r2, [pc, #256]	@ (8007f5c <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8007e5a:	6813      	ldr	r3, [r2, #0]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	6013      	str	r3, [r2, #0]
 8007e60:	e77b      	b.n	8007d5a <HAL_TIM_PeriodElapsedCallback+0x3c2>
		else if(PAUSE_KEY == GPIO_PIN_RESET){
 8007e62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007e66:	483b      	ldr	r0, [pc, #236]	@ (8007f54 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8007e68:	f001 f8be 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	f47f af7e 	bne.w	8007d6e <HAL_TIM_PeriodElapsedCallback+0x3d6>
			cancel_delay_time++;
 8007e72:	4a3b      	ldr	r2, [pc, #236]	@ (8007f60 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8007e74:	6813      	ldr	r3, [r2, #0]
 8007e76:	3301      	adds	r3, #1
 8007e78:	6013      	str	r3, [r2, #0]
 8007e7a:	e778      	b.n	8007d6e <HAL_TIM_PeriodElapsedCallback+0x3d6>
		else if(EX_GAS_start != 1 && EX_GAS_KEY == GPIO_PIN_RESET){
 8007e7c:	4b29      	ldr	r3, [pc, #164]	@ (8007f24 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	f43f af7e 	beq.w	8007d82 <HAL_TIM_PeriodElapsedCallback+0x3ea>
 8007e86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007e8a:	4836      	ldr	r0, [pc, #216]	@ (8007f64 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8007e8c:	f001 f8ac 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8007e90:	2800      	cmp	r0, #0
 8007e92:	f47f af76 	bne.w	8007d82 <HAL_TIM_PeriodElapsedCallback+0x3ea>
			ExGas_delay_time++;
 8007e96:	4a34      	ldr	r2, [pc, #208]	@ (8007f68 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8007e98:	6813      	ldr	r3, [r2, #0]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	6013      	str	r3, [r2, #0]
 8007e9e:	e770      	b.n	8007d82 <HAL_TIM_PeriodElapsedCallback+0x3ea>
		else if(Injecting != 1 && CONFIRM_KEY == GPIO_PIN_RESET){
 8007ea0:	4b3a      	ldr	r3, [pc, #232]	@ (8007f8c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	f43f af76 	beq.w	8007d96 <HAL_TIM_PeriodElapsedCallback+0x3fe>
 8007eaa:	2120      	movs	r1, #32
 8007eac:	482d      	ldr	r0, [pc, #180]	@ (8007f64 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8007eae:	f001 f89b 	bl	8008fe8 <HAL_GPIO_ReadPin>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	f47f af6f 	bne.w	8007d96 <HAL_TIM_PeriodElapsedCallback+0x3fe>
			confirm_press_time++;
 8007eb8:	4a2c      	ldr	r2, [pc, #176]	@ (8007f6c <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8007eba:	8813      	ldrh	r3, [r2, #0]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	8013      	strh	r3, [r2, #0]
 8007ec0:	e769      	b.n	8007d96 <HAL_TIM_PeriodElapsedCallback+0x3fe>
		if(key_press_long && (page_location == Main_page)){
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d180      	bne.n	8007dc8 <HAL_TIM_PeriodElapsedCallback+0x430>
		if(waiting_start){
 8007ec6:	4932      	ldr	r1, [pc, #200]	@ (8007f90 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8007ec8:	780b      	ldrb	r3, [r1, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f43f ae81 	beq.w	8007bd2 <HAL_TIM_PeriodElapsedCallback+0x23a>
			if((now_time > confirm_time) && (now_time - confirm_time > 5000)){
 8007ed0:	4a30      	ldr	r2, [pc, #192]	@ (8007f94 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8007ed2:	6820      	ldr	r0, [r4, #0]
 8007ed4:	6813      	ldr	r3, [r2, #0]
 8007ed6:	4298      	cmp	r0, r3
 8007ed8:	d962      	bls.n	8007fa0 <HAL_TIM_PeriodElapsedCallback+0x608>
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	6810      	ldr	r0, [r2, #0]
 8007ede:	1a1b      	subs	r3, r3, r0
 8007ee0:	f241 3088 	movw	r0, #5000	@ 0x1388
 8007ee4:	4283      	cmp	r3, r0
 8007ee6:	d95b      	bls.n	8007fa0 <HAL_TIM_PeriodElapsedCallback+0x608>
				waiting_start = 0;
 8007ee8:	2300      	movs	r3, #0
				Dosage_load = 0;
 8007eea:	4a2b      	ldr	r2, [pc, #172]	@ (8007f98 <HAL_TIM_PeriodElapsedCallback+0x600>)
				waiting_start = 0;
 8007eec:	700b      	strb	r3, [r1, #0]
				Dosage_load = 0;
 8007eee:	8013      	strh	r3, [r2, #0]
				waiting_start_timeout = 1;
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	4b2a      	ldr	r3, [pc, #168]	@ (8007f9c <HAL_TIM_PeriodElapsedCallback+0x604>)
 8007ef4:	701a      	strb	r2, [r3, #0]
 8007ef6:	e66c      	b.n	8007bd2 <HAL_TIM_PeriodElapsedCallback+0x23a>
				  else if(Dosage_set >= 2)
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	f67f af7e 	bls.w	8007dfa <HAL_TIM_PeriodElapsedCallback+0x462>
					  Dosage_set-=2;
 8007efe:	3b02      	subs	r3, #2
 8007f00:	8013      	strh	r3, [r2, #0]
 8007f02:	e77a      	b.n	8007dfa <HAL_TIM_PeriodElapsedCallback+0x462>
				else if(key_value == INCREASE_KEY_PRESS)
 8007f04:	2b03      	cmp	r3, #3
 8007f06:	f47f af7b 	bne.w	8007e00 <HAL_TIM_PeriodElapsedCallback+0x468>
				  if(Dosage_set < 1000)
 8007f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8007f80 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8007f0c:	8813      	ldrh	r3, [r2, #0]
 8007f0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
					  Dosage_set+=2;
 8007f12:	bf36      	itet	cc
 8007f14:	3302      	addcc	r3, #2
					  Dosage_set = 1000;
 8007f16:	f44f 737a 	movcs.w	r3, #1000	@ 0x3e8
					  Dosage_set+=2;
 8007f1a:	b29b      	uxthcc	r3, r3
 8007f1c:	e7f0      	b.n	8007f00 <HAL_TIM_PeriodElapsedCallback+0x568>
 8007f1e:	bf00      	nop
 8007f20:	20000370 	.word	0x20000370
 8007f24:	20000a4c 	.word	0x20000a4c
 8007f28:	200009a4 	.word	0x200009a4
 8007f2c:	20000a40 	.word	0x20000a40
 8007f30:	20000934 	.word	0x20000934
 8007f34:	20000938 	.word	0x20000938
 8007f38:	20000924 	.word	0x20000924
 8007f3c:	20000a44 	.word	0x20000a44
 8007f40:	20000919 	.word	0x20000919
 8007f44:	20000a62 	.word	0x20000a62
 8007f48:	20000946 	.word	0x20000946
 8007f4c:	20000a5d 	.word	0x20000a5d
 8007f50:	20000918 	.word	0x20000918
 8007f54:	40011000 	.word	0x40011000
 8007f58:	20000a5e 	.word	0x20000a5e
 8007f5c:	20000a3c 	.word	0x20000a3c
 8007f60:	20000a38 	.word	0x20000a38
 8007f64:	40010c00 	.word	0x40010c00
 8007f68:	20000a34 	.word	0x20000a34
 8007f6c:	20000a60 	.word	0x20000a60
 8007f70:	20000926 	.word	0x20000926
 8007f74:	20000928 	.word	0x20000928
 8007f78:	20000a48 	.word	0x20000a48
 8007f7c:	20000922 	.word	0x20000922
 8007f80:	200008c6 	.word	0x200008c6
 8007f84:	20000927 	.word	0x20000927
 8007f88:	2000092b 	.word	0x2000092b
 8007f8c:	20000944 	.word	0x20000944
 8007f90:	20000930 	.word	0x20000930
 8007f94:	20000a58 	.word	0x20000a58
 8007f98:	200008c4 	.word	0x200008c4
 8007f9c:	20000a4d 	.word	0x20000a4d
			else if((now_time <= confirm_time) && (0xffff - confirm_time + now_time> 5000)){
 8007fa0:	6820      	ldr	r0, [r4, #0]
 8007fa2:	6813      	ldr	r3, [r2, #0]
 8007fa4:	4298      	cmp	r0, r3
 8007fa6:	f63f ae14 	bhi.w	8007bd2 <HAL_TIM_PeriodElapsedCallback+0x23a>
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	6812      	ldr	r2, [r2, #0]
 8007fae:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8007fb2:	33ff      	adds	r3, #255	@ 0xff
 8007fb4:	1a9b      	subs	r3, r3, r2
 8007fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d894      	bhi.n	8007ee8 <HAL_TIM_PeriodElapsedCallback+0x550>
 8007fbe:	e608      	b.n	8007bd2 <HAL_TIM_PeriodElapsedCallback+0x23a>

08007fc0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007fc0:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8007fc2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart1.Instance = USART1;
 8007fc6:	480a      	ldr	r0, [pc, #40]	@ (8007ff0 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8007fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8007ff4 <MX_USART1_UART_Init+0x34>)
 8007fca:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007fce:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007fd0:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007fd2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007fd6:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007fda:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007fdc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007fde:	f001 ffe1 	bl	8009fa4 <HAL_UART_Init>
 8007fe2:	b118      	cbz	r0, 8007fec <MX_USART1_UART_Init+0x2c>
  /* USER CODE BEGIN USART1_Init 2 */
//  // 手动添加：启用空闲中断
//  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
  /* USER CODE END USART1_Init 2 */

}
 8007fe4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8007fe8:	f7ff b94c 	b.w	8007284 <Error_Handler>
}
 8007fec:	bd08      	pop	{r3, pc}
 8007fee:	bf00      	nop
 8007ff0:	20000b44 	.word	0x20000b44
 8007ff4:	40013800 	.word	0x40013800

08007ff8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007ff8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8007ffa:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart2.Instance = USART2;
 8007ffe:	480a      	ldr	r0, [pc, #40]	@ (8008028 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8008000:	4a0a      	ldr	r2, [pc, #40]	@ (800802c <MX_USART2_UART_Init+0x34>)
 8008002:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008006:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008008:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800800a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800800e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008012:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008014:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008016:	f001 ffc5 	bl	8009fa4 <HAL_UART_Init>
 800801a:	b118      	cbz	r0, 8008024 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800801c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8008020:	f7ff b930 	b.w	8007284 <Error_Handler>
}
 8008024:	bd08      	pop	{r3, pc}
 8008026:	bf00      	nop
 8008028:	20000afc 	.word	0x20000afc
 800802c:	40004400 	.word	0x40004400

08008030 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8008030:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 9600;
 8008032:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
  huart3.Instance = USART3;
 8008036:	480a      	ldr	r0, [pc, #40]	@ (8008060 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 9600;
 8008038:	4a0a      	ldr	r2, [pc, #40]	@ (8008064 <MX_USART3_UART_Init+0x34>)
 800803a:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800803e:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008040:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008042:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008046:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 800804a:	6103      	str	r3, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800804c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800804e:	f001 ffa9 	bl	8009fa4 <HAL_UART_Init>
 8008052:	b118      	cbz	r0, 800805c <MX_USART3_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008054:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8008058:	f7ff b914 	b.w	8007284 <Error_Handler>
}
 800805c:	bd08      	pop	{r3, pc}
 800805e:	bf00      	nop
 8008060:	20000ab4 	.word	0x20000ab4
 8008064:	40004800 	.word	0x40004800

08008068 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008068:	b570      	push	{r4, r5, r6, lr}
 800806a:	4606      	mov	r6, r0
 800806c:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800806e:	2210      	movs	r2, #16
 8008070:	2100      	movs	r1, #0
 8008072:	a806      	add	r0, sp, #24
 8008074:	f004 faf2 	bl	800c65c <memset>
  if(uartHandle->Instance==USART1)
 8008078:	6833      	ldr	r3, [r6, #0]
 800807a:	4a52      	ldr	r2, [pc, #328]	@ (80081c4 <HAL_UART_MspInit+0x15c>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d129      	bne.n	80080d4 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008080:	4b51      	ldr	r3, [pc, #324]	@ (80081c8 <HAL_UART_MspInit+0x160>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008082:	f44f 7000 	mov.w	r0, #512	@ 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8008086:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008088:	a906      	add	r1, sp, #24
    __HAL_RCC_USART1_CLK_ENABLE();
 800808a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800808e:	619a      	str	r2, [r3, #24]
 8008090:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008092:	f44f 6480 	mov.w	r4, #1024	@ 0x400
    __HAL_RCC_USART1_CLK_ENABLE();
 8008096:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800809a:	9200      	str	r2, [sp, #0]
 800809c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800809e:	699a      	ldr	r2, [r3, #24]
 80080a0:	f042 0204 	orr.w	r2, r2, #4
 80080a4:	619a      	str	r2, [r3, #24]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	f003 0304 	and.w	r3, r3, #4
 80080ac:	9301      	str	r3, [sp, #4]
 80080ae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080b0:	2302      	movs	r3, #2
 80080b2:	e9cd 0306 	strd	r0, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80080b6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080b8:	4844      	ldr	r0, [pc, #272]	@ (80081cc <HAL_UART_MspInit+0x164>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80080ba:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080bc:	f000 febc 	bl	8008e38 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80080c0:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080c2:	4842      	ldr	r0, [pc, #264]	@ (80081cc <HAL_UART_MspInit+0x164>)
 80080c4:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80080c6:	e9cd 4306 	strd	r4, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080ca:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080cc:	f000 feb4 	bl	8008e38 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80080d0:	b00a      	add	sp, #40	@ 0x28
 80080d2:	bd70      	pop	{r4, r5, r6, pc}
  else if(uartHandle->Instance==USART2)
 80080d4:	4a3e      	ldr	r2, [pc, #248]	@ (80081d0 <HAL_UART_MspInit+0x168>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d12e      	bne.n	8008138 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80080da:	4b3b      	ldr	r3, [pc, #236]	@ (80081c8 <HAL_UART_MspInit+0x160>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080dc:	2104      	movs	r1, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80080de:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080e0:	483a      	ldr	r0, [pc, #232]	@ (80081cc <HAL_UART_MspInit+0x164>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80080e2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80080e6:	61da      	str	r2, [r3, #28]
 80080e8:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80080ea:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 80080ec:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80080f0:	9202      	str	r2, [sp, #8]
 80080f2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080f4:	699a      	ldr	r2, [r3, #24]
 80080f6:	f042 0204 	orr.w	r2, r2, #4
 80080fa:	619a      	str	r2, [r3, #24]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	f003 0304 	and.w	r3, r3, #4
 8008102:	9303      	str	r3, [sp, #12]
 8008104:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008106:	2302      	movs	r3, #2
 8008108:	e9cd 1306 	strd	r1, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800810c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800810e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008110:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008112:	f000 fe91 	bl	8008e38 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008116:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008118:	482c      	ldr	r0, [pc, #176]	@ (80081cc <HAL_UART_MspInit+0x164>)
 800811a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800811c:	e9cd 3406 	strd	r3, r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008120:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008122:	f000 fe89 	bl	8008e38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008126:	2026      	movs	r0, #38	@ 0x26
 8008128:	4622      	mov	r2, r4
 800812a:	4621      	mov	r1, r4
 800812c:	f000 fcca 	bl	8008ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008130:	2026      	movs	r0, #38	@ 0x26
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8008132:	f000 fcf7 	bl	8008b24 <HAL_NVIC_EnableIRQ>
}
 8008136:	e7cb      	b.n	80080d0 <HAL_UART_MspInit+0x68>
  else if(uartHandle->Instance==USART3)
 8008138:	4a26      	ldr	r2, [pc, #152]	@ (80081d4 <HAL_UART_MspInit+0x16c>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d1c8      	bne.n	80080d0 <HAL_UART_MspInit+0x68>
    __HAL_RCC_USART3_CLK_ENABLE();
 800813e:	4b22      	ldr	r3, [pc, #136]	@ (80081c8 <HAL_UART_MspInit+0x160>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008140:	4825      	ldr	r0, [pc, #148]	@ (80081d8 <HAL_UART_MspInit+0x170>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8008142:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008144:	a906      	add	r1, sp, #24
    __HAL_RCC_USART3_CLK_ENABLE();
 8008146:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800814a:	61da      	str	r2, [r3, #28]
 800814c:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800814e:	2500      	movs	r5, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8008150:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8008154:	9204      	str	r2, [sp, #16]
 8008156:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008158:	699a      	ldr	r2, [r3, #24]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800815a:	4c20      	ldr	r4, [pc, #128]	@ (80081dc <HAL_UART_MspInit+0x174>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800815c:	f042 0208 	orr.w	r2, r2, #8
 8008160:	619a      	str	r2, [r3, #24]
 8008162:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008164:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008168:	f003 0308 	and.w	r3, r3, #8
 800816c:	9305      	str	r3, [sp, #20]
 800816e:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008170:	2302      	movs	r3, #2
 8008172:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008176:	2303      	movs	r3, #3
 8008178:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800817a:	f000 fe5d 	bl	8008e38 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800817e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008182:	4815      	ldr	r0, [pc, #84]	@ (80081d8 <HAL_UART_MspInit+0x170>)
 8008184:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008186:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800818a:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800818c:	f000 fe54 	bl	8008e38 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8008190:	4b13      	ldr	r3, [pc, #76]	@ (80081e0 <HAL_UART_MspInit+0x178>)
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8008192:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008194:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008198:	2380      	movs	r3, #128	@ 0x80
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800819a:	e9c4 5505 	strd	r5, r5, [r4, #20]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800819e:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80081a2:	60a5      	str	r5, [r4, #8]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80081a4:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80081a6:	f000 fcdf 	bl	8008b68 <HAL_DMA_Init>
 80081aa:	b108      	cbz	r0, 80081b0 <HAL_UART_MspInit+0x148>
      Error_Handler();
 80081ac:	f7ff f86a 	bl	8007284 <Error_Handler>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80081b0:	2200      	movs	r2, #0
 80081b2:	2027      	movs	r0, #39	@ 0x27
 80081b4:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80081b6:	63f4      	str	r4, [r6, #60]	@ 0x3c
 80081b8:	6266      	str	r6, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80081ba:	f000 fc83 	bl	8008ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80081be:	2027      	movs	r0, #39	@ 0x27
 80081c0:	e7b7      	b.n	8008132 <HAL_UART_MspInit+0xca>
 80081c2:	bf00      	nop
 80081c4:	40013800 	.word	0x40013800
 80081c8:	40021000 	.word	0x40021000
 80081cc:	40010800 	.word	0x40010800
 80081d0:	40004400 	.word	0x40004400
 80081d4:	40004800 	.word	0x40004800
 80081d8:	40010c00 	.word	0x40010c00
 80081dc:	20000a70 	.word	0x20000a70
 80081e0:	40020030 	.word	0x40020030

080081e4 <USART1_Tx_HMIdata>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void USART1_Tx_HMIdata(uint8_t *Tx_Buffer){
 80081e4:	b510      	push	{r4, lr}
 80081e6:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart1, (uint8_t*)Tx_Buffer, strlen(Tx_Buffer),HAL_MAX_DELAY);
 80081e8:	f7f7 ffbc 	bl	8000164 <strlen>
 80081ec:	4621      	mov	r1, r4
}
 80081ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*)Tx_Buffer, strlen(Tx_Buffer),HAL_MAX_DELAY);
 80081f2:	b282      	uxth	r2, r0
 80081f4:	f04f 33ff 	mov.w	r3, #4294967295
 80081f8:	4801      	ldr	r0, [pc, #4]	@ (8008200 <USART1_Tx_HMIdata+0x1c>)
 80081fa:	f001 bf02 	b.w	800a002 <HAL_UART_Transmit>
 80081fe:	bf00      	nop
 8008200:	20000b44 	.word	0x20000b44

08008204 <USART2_Tx_BLEdata>:

void USART1_Tx_data(uint8_t *Tx_Buffer){
	HAL_UART_Transmit(&huart1, (uint8_t*)Tx_Buffer, strlen(Tx_Buffer),HAL_MAX_DELAY);
}

void USART2_Tx_BLEdata(uint8_t *Tx_Buffer){
 8008204:	b538      	push	{r3, r4, r5, lr}
	Tx2_cplt_flag = 0;
 8008206:	2300      	movs	r3, #0
 8008208:	4d06      	ldr	r5, [pc, #24]	@ (8008224 <USART2_Tx_BLEdata+0x20>)
void USART2_Tx_BLEdata(uint8_t *Tx_Buffer){
 800820a:	4604      	mov	r4, r0
	Tx2_cplt_flag = 0;
 800820c:	702b      	strb	r3, [r5, #0]
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)Tx_Buffer, strlen(Tx_Buffer));
 800820e:	f7f7 ffa9 	bl	8000164 <strlen>
 8008212:	4621      	mov	r1, r4
 8008214:	b282      	uxth	r2, r0
 8008216:	4804      	ldr	r0, [pc, #16]	@ (8008228 <USART2_Tx_BLEdata+0x24>)
 8008218:	f001 ff41 	bl	800a09e <HAL_UART_Transmit_IT>
	while(!Tx2_cplt_flag);
 800821c:	782b      	ldrb	r3, [r5, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d0fc      	beq.n	800821c <USART2_Tx_BLEdata+0x18>
}
 8008222:	bd38      	pop	{r3, r4, r5, pc}
 8008224:	20000b8d 	.word	0x20000b8d
 8008228:	20000afc 	.word	0x20000afc

0800822c <HAL_UART_TxCpltCallback>:
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)Tx_Buffer, strlen(Tx_Buffer));
	while(!Tx3_cplt_flag);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
	if(huart == &huart2){
 800822c:	4b05      	ldr	r3, [pc, #20]	@ (8008244 <HAL_UART_TxCpltCallback+0x18>)
 800822e:	4298      	cmp	r0, r3
 8008230:	d103      	bne.n	800823a <HAL_UART_TxCpltCallback+0xe>
		Tx2_cplt_flag = 1;
 8008232:	4b05      	ldr	r3, [pc, #20]	@ (8008248 <HAL_UART_TxCpltCallback+0x1c>)
	}
	if(huart == &huart3){
		Tx3_cplt_flag = 1;
 8008234:	2201      	movs	r2, #1
 8008236:	701a      	strb	r2, [r3, #0]
	}
}
 8008238:	4770      	bx	lr
	if(huart == &huart3){
 800823a:	4b04      	ldr	r3, [pc, #16]	@ (800824c <HAL_UART_TxCpltCallback+0x20>)
 800823c:	4298      	cmp	r0, r3
 800823e:	d1fb      	bne.n	8008238 <HAL_UART_TxCpltCallback+0xc>
		Tx3_cplt_flag = 1;
 8008240:	4b03      	ldr	r3, [pc, #12]	@ (8008250 <HAL_UART_TxCpltCallback+0x24>)
 8008242:	e7f7      	b.n	8008234 <HAL_UART_TxCpltCallback+0x8>
 8008244:	20000afc 	.word	0x20000afc
 8008248:	20000b8d 	.word	0x20000b8d
 800824c:	20000ab4 	.word	0x20000ab4
 8008250:	20000b8c 	.word	0x20000b8c

08008254 <HAL_UART_RxCpltCallback>:

// UART接收完成回调
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8008254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    static uint8_t prev_char = 0;
    static int ret = 0;
    static uint8_t frame_header_valid = 0;
    GPS_Data gps_rsltBuf;

    if (huart == &huart3) {//GPS接收
 8008258:	4b3d      	ldr	r3, [pc, #244]	@ (8008350 <HAL_UART_RxCpltCallback+0xfc>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800825a:	b091      	sub	sp, #68	@ 0x44
    if (huart == &huart3) {//GPS接收
 800825c:	4283      	cmp	r3, r0
 800825e:	d14c      	bne.n	80082fa <HAL_UART_RxCpltCallback+0xa6>
        uint8_t ch = gps_rx_buffer[gps_rx_index];
 8008260:	4e3c      	ldr	r6, [pc, #240]	@ (8008354 <HAL_UART_RxCpltCallback+0x100>)
 8008262:	4f3d      	ldr	r7, [pc, #244]	@ (8008358 <HAL_UART_RxCpltCallback+0x104>)
 8008264:	8833      	ldrh	r3, [r6, #0]
 8008266:	483d      	ldr	r0, [pc, #244]	@ (800835c <HAL_UART_RxCpltCallback+0x108>)
 8008268:	b29b      	uxth	r3, r3
 800826a:	5cf9      	ldrb	r1, [r7, r3]

        if(ch == '$' || frame_header_valid){
 800826c:	4c3c      	ldr	r4, [pc, #240]	@ (8008360 <HAL_UART_RxCpltCallback+0x10c>)
 800826e:	2924      	cmp	r1, #36	@ 0x24
 8008270:	4a3c      	ldr	r2, [pc, #240]	@ (8008364 <HAL_UART_RxCpltCallback+0x110>)
 8008272:	d001      	beq.n	8008278 <HAL_UART_RxCpltCallback+0x24>
 8008274:	7803      	ldrb	r3, [r0, #0]
 8008276:	b193      	cbz	r3, 800829e <HAL_UART_RxCpltCallback+0x4a>
						frame_header_valid = 1;
 8008278:	f04f 0c01 	mov.w	ip, #1
					// 检测帧尾
					if (prev_char == '\r' && ch == '\n') {
 800827c:	7823      	ldrb	r3, [r4, #0]
						frame_header_valid = 1;
 800827e:	f880 c000 	strb.w	ip, [r0]
					if (prev_char == '\r' && ch == '\n') {
 8008282:	2b0d      	cmp	r3, #13
							gps_rx_buffer[gps_rx_index-1] = '\0'; // 终止字符串
 8008284:	8833      	ldrh	r3, [r6, #0]
 8008286:	b29b      	uxth	r3, r3
					if (prev_char == '\r' && ch == '\n') {
 8008288:	d13a      	bne.n	8008300 <HAL_UART_RxCpltCallback+0xac>
 800828a:	290a      	cmp	r1, #10
 800828c:	d138      	bne.n	8008300 <HAL_UART_RxCpltCallback+0xac>
							gps_rx_buffer[gps_rx_index-1] = '\0'; // 终止字符串
 800828e:	2500      	movs	r5, #0
 8008290:	443b      	add	r3, r7
							gps_data_ready = true;
 8008292:	f882 c000 	strb.w	ip, [r2]
							gps_rx_buffer[gps_rx_index-1] = '\0'; // 终止字符串
 8008296:	f803 5c01 	strb.w	r5, [r3, #-1]
							gps_rx_index = 0;
 800829a:	8035      	strh	r5, [r6, #0]
							frame_header_valid = 0;
 800829c:	7005      	strb	r5, [r0, #0]
        }
        else{
        	frame_header_valid = 0;
        }
        prev_char = ch;
        if(gps_data_ready){
 800829e:	7813      	ldrb	r3, [r2, #0]
        prev_char = ch;
 80082a0:	7021      	strb	r1, [r4, #0]
        if(gps_data_ready){
 80082a2:	b31b      	cbz	r3, 80082ec <HAL_UART_RxCpltCallback+0x98>
        	gps_data_ready = 0;
 80082a4:	2300      	movs	r3, #0
//        	printf("%s\r\n",gps_rx_buffer);
        	ret = process_gps_data(gps_rx_buffer, &gps_rsltBuf);
 80082a6:	482c      	ldr	r0, [pc, #176]	@ (8008358 <HAL_UART_RxCpltCallback+0x104>)
 80082a8:	a901      	add	r1, sp, #4
        	gps_data_ready = 0;
 80082aa:	7013      	strb	r3, [r2, #0]
        	ret = process_gps_data(gps_rx_buffer, &gps_rsltBuf);
 80082ac:	f7f9 f836 	bl	800131c <process_gps_data>

        	if(ret == 0 && strcmp(gps_rsltBuf.header,"GNGGA") == 0 && GGA_data_used){
 80082b0:	b9e0      	cbnz	r0, 80082ec <HAL_UART_RxCpltCallback+0x98>
 80082b2:	492d      	ldr	r1, [pc, #180]	@ (8008368 <HAL_UART_RxCpltCallback+0x114>)
 80082b4:	a801      	add	r0, sp, #4
 80082b6:	f7f7 ff4b 	bl	8000150 <strcmp>
 80082ba:	4680      	mov	r8, r0
 80082bc:	bb40      	cbnz	r0, 8008310 <HAL_UART_RxCpltCallback+0xbc>
 80082be:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 800836c <HAL_UART_RxCpltCallback+0x118>
 80082c2:	f899 3000 	ldrb.w	r3, [r9]
 80082c6:	b31b      	cbz	r3, 8008310 <HAL_UART_RxCpltCallback+0xbc>
            HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
            GPS_GGA_Data = gps_rsltBuf;
 80082c8:	4c29      	ldr	r4, [pc, #164]	@ (8008370 <HAL_UART_RxCpltCallback+0x11c>)
            HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 80082ca:	2102      	movs	r1, #2
 80082cc:	4829      	ldr	r0, [pc, #164]	@ (8008374 <HAL_UART_RxCpltCallback+0x120>)
            GPS_GGA_Data = gps_rsltBuf;
 80082ce:	ad01      	add	r5, sp, #4
            HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 80082d0:	f000 fe95 	bl	8008ffe <HAL_GPIO_TogglePin>
            GPS_GGA_Data = gps_rsltBuf;
 80082d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80082e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        		GGA_data_used = 0;
        	}else if(ret == 0 && strcmp(gps_rsltBuf.header,"GNRMC") == 0 && RMC_data_used){
            HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
            GPS_RMC_Data = gps_rsltBuf;
        		RMC_data_used = 0;
 80082e8:	f889 8000 	strb.w	r8, [r9]
        	}
        }

        HAL_UART_Receive_DMA(&huart3, &gps_rx_buffer[gps_rx_index], 1);
 80082ec:	8831      	ldrh	r1, [r6, #0]
 80082ee:	2201      	movs	r2, #1
 80082f0:	b289      	uxth	r1, r1
 80082f2:	4817      	ldr	r0, [pc, #92]	@ (8008350 <HAL_UART_RxCpltCallback+0xfc>)
 80082f4:	4439      	add	r1, r7
 80082f6:	f002 f96f 	bl	800a5d8 <HAL_UART_Receive_DMA>
    }
}
 80082fa:	b011      	add	sp, #68	@ 0x44
 80082fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
							if (gps_rx_index < GPS_RX_BUFFER_SIZE-1) {
 8008300:	2bfe      	cmp	r3, #254	@ 0xfe
									gps_rx_index = 0;
 8008302:	bf8f      	iteee	hi
 8008304:	2300      	movhi	r3, #0
									gps_rx_index++;
 8008306:	8833      	ldrhls	r3, [r6, #0]
 8008308:	3301      	addls	r3, #1
 800830a:	b29b      	uxthls	r3, r3
									gps_rx_index = 0;
 800830c:	8033      	strh	r3, [r6, #0]
 800830e:	e7c6      	b.n	800829e <HAL_UART_RxCpltCallback+0x4a>
        	}else if(ret == 0 && strcmp(gps_rsltBuf.header,"GNRMC") == 0 && RMC_data_used){
 8008310:	4919      	ldr	r1, [pc, #100]	@ (8008378 <HAL_UART_RxCpltCallback+0x124>)
 8008312:	a801      	add	r0, sp, #4
 8008314:	f7f7 ff1c 	bl	8000150 <strcmp>
 8008318:	4680      	mov	r8, r0
 800831a:	2800      	cmp	r0, #0
 800831c:	d1e6      	bne.n	80082ec <HAL_UART_RxCpltCallback+0x98>
 800831e:	f8df 905c 	ldr.w	r9, [pc, #92]	@ 800837c <HAL_UART_RxCpltCallback+0x128>
 8008322:	f899 3000 	ldrb.w	r3, [r9]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d0e0      	beq.n	80082ec <HAL_UART_RxCpltCallback+0x98>
            GPS_RMC_Data = gps_rsltBuf;
 800832a:	4d15      	ldr	r5, [pc, #84]	@ (8008380 <HAL_UART_RxCpltCallback+0x12c>)
            HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 800832c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008330:	4814      	ldr	r0, [pc, #80]	@ (8008384 <HAL_UART_RxCpltCallback+0x130>)
            GPS_RMC_Data = gps_rsltBuf;
 8008332:	ac01      	add	r4, sp, #4
            HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8008334:	f000 fe63 	bl	8008ffe <HAL_GPIO_TogglePin>
            GPS_RMC_Data = gps_rsltBuf;
 8008338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800833a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800833c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800833e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008342:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008344:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008348:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800834c:	e7cc      	b.n	80082e8 <HAL_UART_RxCpltCallback+0x94>
 800834e:	bf00      	nop
 8008350:	20000ab4 	.word	0x20000ab4
 8008354:	2000026e 	.word	0x2000026e
 8008358:	20000270 	.word	0x20000270
 800835c:	20000a6d 	.word	0x20000a6d
 8008360:	20000a6c 	.word	0x20000a6c
 8008364:	2000026c 	.word	0x2000026c
 8008368:	0800ef79 	.word	0x0800ef79
 800836c:	20000001 	.word	0x20000001
 8008370:	20000230 	.word	0x20000230
 8008374:	40011400 	.word	0x40011400
 8008378:	0800ef7f 	.word	0x0800ef7f
 800837c:	20000000 	.word	0x20000000
 8008380:	200001f4 	.word	0x200001f4
 8008384:	40011000 	.word	0x40011000

08008388 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008388:	f7ff fa60 	bl	800784c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800838c:	480b      	ldr	r0, [pc, #44]	@ (80083bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800838e:	490c      	ldr	r1, [pc, #48]	@ (80083c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8008390:	4a0c      	ldr	r2, [pc, #48]	@ (80083c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8008392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008394:	e002      	b.n	800839c <LoopCopyDataInit>

08008396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800839a:	3304      	adds	r3, #4

0800839c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800839c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800839e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80083a0:	d3f9      	bcc.n	8008396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80083a2:	4a09      	ldr	r2, [pc, #36]	@ (80083c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80083a4:	4c09      	ldr	r4, [pc, #36]	@ (80083cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80083a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80083a8:	e001      	b.n	80083ae <LoopFillZerobss>

080083aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80083aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80083ac:	3204      	adds	r2, #4

080083ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80083ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80083b0:	d3fb      	bcc.n	80083aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80083b2:	f004 fa27 	bl	800c804 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80083b6:	f7fe fe33 	bl	8007020 <main>
  bx lr
 80083ba:	4770      	bx	lr
  ldr r0, =_sdata
 80083bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80083c0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80083c4:	0800fde8 	.word	0x0800fde8
  ldr r2, =_sbss
 80083c8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80083cc:	20000d10 	.word	0x20000d10

080083d0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80083d0:	e7fe      	b.n	80083d0 <CAN1_RX1_IRQHandler>
	...

080083d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80083d4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80083d6:	4b0e      	ldr	r3, [pc, #56]	@ (8008410 <HAL_InitTick+0x3c>)
{
 80083d8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80083da:	781a      	ldrb	r2, [r3, #0]
 80083dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80083e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80083e4:	4a0b      	ldr	r2, [pc, #44]	@ (8008414 <HAL_InitTick+0x40>)
 80083e6:	6810      	ldr	r0, [r2, #0]
 80083e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80083ec:	f000 fba8 	bl	8008b40 <HAL_SYSTICK_Config>
 80083f0:	4604      	mov	r4, r0
 80083f2:	b958      	cbnz	r0, 800840c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80083f4:	2d0f      	cmp	r5, #15
 80083f6:	d809      	bhi.n	800840c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80083f8:	4602      	mov	r2, r0
 80083fa:	4629      	mov	r1, r5
 80083fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008400:	f000 fb60 	bl	8008ac4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008404:	4620      	mov	r0, r4
 8008406:	4b04      	ldr	r3, [pc, #16]	@ (8008418 <HAL_InitTick+0x44>)
 8008408:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800840a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800840c:	2001      	movs	r0, #1
 800840e:	e7fc      	b.n	800840a <HAL_InitTick+0x36>
 8008410:	20000008 	.word	0x20000008
 8008414:	20000004 	.word	0x20000004
 8008418:	2000000c 	.word	0x2000000c

0800841c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800841c:	4a07      	ldr	r2, [pc, #28]	@ (800843c <HAL_Init+0x20>)
{
 800841e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008420:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008422:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008424:	f043 0310 	orr.w	r3, r3, #16
 8008428:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800842a:	f000 fb39 	bl	8008aa0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800842e:	2005      	movs	r0, #5
 8008430:	f7ff ffd0 	bl	80083d4 <HAL_InitTick>
  HAL_MspInit();
 8008434:	f7ff f958 	bl	80076e8 <HAL_MspInit>
}
 8008438:	2000      	movs	r0, #0
 800843a:	bd08      	pop	{r3, pc}
 800843c:	40022000 	.word	0x40022000

08008440 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8008440:	4a03      	ldr	r2, [pc, #12]	@ (8008450 <HAL_IncTick+0x10>)
 8008442:	4b04      	ldr	r3, [pc, #16]	@ (8008454 <HAL_IncTick+0x14>)
 8008444:	6811      	ldr	r1, [r2, #0]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	440b      	add	r3, r1
 800844a:	6013      	str	r3, [r2, #0]
}
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	20000bc0 	.word	0x20000bc0
 8008454:	20000008 	.word	0x20000008

08008458 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008458:	4b01      	ldr	r3, [pc, #4]	@ (8008460 <HAL_GetTick+0x8>)
 800845a:	6818      	ldr	r0, [r3, #0]
}
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	20000bc0 	.word	0x20000bc0

08008464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008468:	f7ff fff6 	bl	8008458 <HAL_GetTick>
 800846c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800846e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8008470:	bf1e      	ittt	ne
 8008472:	4b04      	ldrne	r3, [pc, #16]	@ (8008484 <HAL_Delay+0x20>)
 8008474:	781b      	ldrbne	r3, [r3, #0]
 8008476:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008478:	f7ff ffee 	bl	8008458 <HAL_GetTick>
 800847c:	1b43      	subs	r3, r0, r5
 800847e:	42a3      	cmp	r3, r4
 8008480:	d3fa      	bcc.n	8008478 <HAL_Delay+0x14>
  {
  }
}
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	20000008 	.word	0x20000008

08008488 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008488:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 800848a:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800848c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800848e:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8008492:	d11b      	bne.n	80084cc <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008494:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008496:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800849a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	6892      	ldr	r2, [r2, #8]
 80084a0:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 80084a4:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 80084a8:	d10c      	bne.n	80084c4 <ADC_DMAConvCplt+0x3c>
 80084aa:	7b1a      	ldrb	r2, [r3, #12]
 80084ac:	b952      	cbnz	r2, 80084c4 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80084ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80084b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084b4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80084b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80084b8:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80084ba:	bf5e      	ittt	pl
 80084bc:	6a9a      	ldrpl	r2, [r3, #40]	@ 0x28
 80084be:	f042 0201 	orrpl.w	r2, r2, #1
 80084c2:	629a      	strpl	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7fa fbc9 	bl	8002c5c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80084ca:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80084cc:	6a1b      	ldr	r3, [r3, #32]
}
 80084ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80084d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084d4:	4718      	bx	r3

080084d6 <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
 80084d6:	4770      	bx	lr

080084d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80084d8:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80084da:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80084dc:	f7ff fffb 	bl	80084d6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80084e0:	bd08      	pop	{r3, pc}

080084e2 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 80084e2:	4770      	bx	lr

080084e4 <HAL_ADC_IRQHandler>:
  uint32_t tmp_sr = hadc->Instance->SR;
 80084e4:	6803      	ldr	r3, [r0, #0]
{
 80084e6:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 80084e8:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80084ea:	685e      	ldr	r6, [r3, #4]
{
 80084ec:	4604      	mov	r4, r0
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80084ee:	06b0      	lsls	r0, r6, #26
 80084f0:	d526      	bpl.n	8008540 <HAL_ADC_IRQHandler+0x5c>
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80084f2:	07a9      	lsls	r1, r5, #30
 80084f4:	d524      	bpl.n	8008540 <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80084f6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80084f8:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80084fa:	bf5e      	ittt	pl
 80084fc:	6aa2      	ldrpl	r2, [r4, #40]	@ 0x28
 80084fe:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 8008502:	62a2      	strpl	r2, [r4, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008504:	689a      	ldr	r2, [r3, #8]
 8008506:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 800850a:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 800850e:	d110      	bne.n	8008532 <HAL_ADC_IRQHandler+0x4e>
 8008510:	7b22      	ldrb	r2, [r4, #12]
 8008512:	b972      	cbnz	r2, 8008532 <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	f022 0220 	bic.w	r2, r2, #32
 800851a:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800851c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800851e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008522:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008524:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008526:	04d8      	lsls	r0, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008528:	bf5e      	ittt	pl
 800852a:	6aa3      	ldrpl	r3, [r4, #40]	@ 0x28
 800852c:	f043 0301 	orrpl.w	r3, r3, #1
 8008530:	62a3      	strpl	r3, [r4, #40]	@ 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8008532:	4620      	mov	r0, r4
 8008534:	f7fa fb92 	bl	8002c5c <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008538:	f06f 0212 	mvn.w	r2, #18
 800853c:	6823      	ldr	r3, [r4, #0]
 800853e:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8008540:	0631      	lsls	r1, r6, #24
 8008542:	d530      	bpl.n	80085a6 <HAL_ADC_IRQHandler+0xc2>
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8008544:	076a      	lsls	r2, r5, #29
 8008546:	d52e      	bpl.n	80085a6 <HAL_ADC_IRQHandler+0xc2>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008548:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800854a:	06db      	lsls	r3, r3, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800854c:	bf5e      	ittt	pl
 800854e:	6aa3      	ldrpl	r3, [r4, #40]	@ 0x28
 8008550:	f443 5300 	orrpl.w	r3, r3, #8192	@ 0x2000
 8008554:	62a3      	strpl	r3, [r4, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	689a      	ldr	r2, [r3, #8]
 800855a:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
 800855e:	f5b2 4fe0 	cmp.w	r2, #28672	@ 0x7000
 8008562:	d00a      	beq.n	800857a <HAL_ADC_IRQHandler+0x96>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8008564:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8008566:	0550      	lsls	r0, r2, #21
 8008568:	d416      	bmi.n	8008598 <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800856a:	689a      	ldr	r2, [r3, #8]
 800856c:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8008570:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8008574:	d110      	bne.n	8008598 <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8008576:	7b22      	ldrb	r2, [r4, #12]
 8008578:	b972      	cbnz	r2, 8008598 <HAL_ADC_IRQHandler+0xb4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008580:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8008582:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008584:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008588:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800858a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800858c:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800858e:	bf5e      	ittt	pl
 8008590:	6aa3      	ldrpl	r3, [r4, #40]	@ 0x28
 8008592:	f043 0301 	orrpl.w	r3, r3, #1
 8008596:	62a3      	strpl	r3, [r4, #40]	@ 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008598:	4620      	mov	r0, r4
 800859a:	f000 fa7f 	bl	8008a9c <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800859e:	f06f 020c 	mvn.w	r2, #12
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80085a6:	0672      	lsls	r2, r6, #25
 80085a8:	d50c      	bpl.n	80085c4 <HAL_ADC_IRQHandler+0xe0>
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80085aa:	07eb      	lsls	r3, r5, #31
 80085ac:	d50a      	bpl.n	80085c4 <HAL_ADC_IRQHandler+0xe0>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80085ae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80085b0:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80085b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085b6:	62a3      	str	r3, [r4, #40]	@ 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80085b8:	f7ff ff93 	bl	80084e2 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80085bc:	f06f 0201 	mvn.w	r2, #1
 80085c0:	6823      	ldr	r3, [r4, #0]
 80085c2:	601a      	str	r2, [r3, #0]
}
 80085c4:	bd70      	pop	{r4, r5, r6, pc}

080085c6 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80085c6:	4770      	bx	lr

080085c8 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80085c8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 80085ca:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80085cc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80085ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085d2:	6283      	str	r3, [r0, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80085d4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80085d6:	f043 0304 	orr.w	r3, r3, #4
 80085da:	62c3      	str	r3, [r0, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80085dc:	f7ff fff3 	bl	80085c6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80085e0:	bd08      	pop	{r3, pc}
	...

080085e4 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 80085e4:	2300      	movs	r3, #0
{ 
 80085e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80085e8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80085ea:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{ 
 80085ee:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d06c      	beq.n	80086ce <HAL_ADC_ConfigChannel+0xea>
 80085f4:	2301      	movs	r3, #1
 80085f6:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 80085fa:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80085fc:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 80085fe:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8008600:	6808      	ldr	r0, [r1, #0]
 8008602:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8008606:	d822      	bhi.n	800864e <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8008608:	261f      	movs	r6, #31
 800860a:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 800860c:	3b05      	subs	r3, #5
 800860e:	409e      	lsls	r6, r3
 8008610:	ea25 0506 	bic.w	r5, r5, r6
 8008614:	fa00 f303 	lsl.w	r3, r0, r3
 8008618:	432b      	orrs	r3, r5
 800861a:	6353      	str	r3, [r2, #52]	@ 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800861c:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800861e:	688b      	ldr	r3, [r1, #8]
 8008620:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8008624:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8008628:	d929      	bls.n	800867e <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800862a:	68d6      	ldr	r6, [r2, #12]
 800862c:	3d1e      	subs	r5, #30
 800862e:	40a9      	lsls	r1, r5
 8008630:	ea26 0101 	bic.w	r1, r6, r1
 8008634:	40ab      	lsls	r3, r5
 8008636:	430b      	orrs	r3, r1
 8008638:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800863a:	f1a0 0310 	sub.w	r3, r0, #16
 800863e:	2b01      	cmp	r3, #1
 8008640:	d925      	bls.n	800868e <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008642:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8008644:	2300      	movs	r3, #0
 8008646:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 800864a:	b002      	add	sp, #8
 800864c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800864e:	2d0c      	cmp	r5, #12
 8008650:	f04f 051f 	mov.w	r5, #31
 8008654:	d809      	bhi.n	800866a <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8008656:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 8008658:	3b23      	subs	r3, #35	@ 0x23
 800865a:	409d      	lsls	r5, r3
 800865c:	ea26 0505 	bic.w	r5, r6, r5
 8008660:	fa00 f303 	lsl.w	r3, r0, r3
 8008664:	432b      	orrs	r3, r5
 8008666:	6313      	str	r3, [r2, #48]	@ 0x30
 8008668:	e7d8      	b.n	800861c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800866a:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
 800866c:	3b41      	subs	r3, #65	@ 0x41
 800866e:	409d      	lsls	r5, r3
 8008670:	ea26 0505 	bic.w	r5, r6, r5
 8008674:	fa00 f303 	lsl.w	r3, r0, r3
 8008678:	432b      	orrs	r3, r5
 800867a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800867c:	e7ce      	b.n	800861c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800867e:	6910      	ldr	r0, [r2, #16]
 8008680:	40a9      	lsls	r1, r5
 8008682:	ea20 0101 	bic.w	r1, r0, r1
 8008686:	40ab      	lsls	r3, r5
 8008688:	430b      	orrs	r3, r1
 800868a:	6113      	str	r3, [r2, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800868c:	e7d9      	b.n	8008642 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 800868e:	4b11      	ldr	r3, [pc, #68]	@ (80086d4 <HAL_ADC_ConfigChannel+0xf0>)
 8008690:	429a      	cmp	r2, r3
 8008692:	d116      	bne.n	80086c2 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8008694:	6893      	ldr	r3, [r2, #8]
 8008696:	021b      	lsls	r3, r3, #8
 8008698:	d4d3      	bmi.n	8008642 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800869a:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800869c:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800869e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80086a2:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80086a4:	d1cd      	bne.n	8008642 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80086a6:	4b0c      	ldr	r3, [pc, #48]	@ (80086d8 <HAL_ADC_ConfigChannel+0xf4>)
 80086a8:	4a0c      	ldr	r2, [pc, #48]	@ (80086dc <HAL_ADC_ConfigChannel+0xf8>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80086b0:	220a      	movs	r2, #10
 80086b2:	4353      	muls	r3, r2
            wait_loop_index--;
 80086b4:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80086b6:	9b01      	ldr	r3, [sp, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d0c2      	beq.n	8008642 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 80086bc:	9b01      	ldr	r3, [sp, #4]
 80086be:	3b01      	subs	r3, #1
 80086c0:	e7f8      	b.n	80086b4 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80086c2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 80086c4:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80086c6:	f043 0320 	orr.w	r3, r3, #32
 80086ca:	62a3      	str	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 80086cc:	e7ba      	b.n	8008644 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 80086ce:	2002      	movs	r0, #2
 80086d0:	e7bb      	b.n	800864a <HAL_ADC_ConfigChannel+0x66>
 80086d2:	bf00      	nop
 80086d4:	40012400 	.word	0x40012400
 80086d8:	20000004 	.word	0x20000004
 80086dc:	000f4240 	.word	0x000f4240

080086e0 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 80086e0:	2300      	movs	r3, #0
{
 80086e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 80086e4:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80086e6:	6803      	ldr	r3, [r0, #0]
{
 80086e8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80086ea:	689a      	ldr	r2, [r3, #8]
 80086ec:	07d2      	lsls	r2, r2, #31
 80086ee:	d502      	bpl.n	80086f6 <ADC_Enable+0x16>
  return HAL_OK;
 80086f0:	2000      	movs	r0, #0
}
 80086f2:	b003      	add	sp, #12
 80086f4:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80086f6:	689a      	ldr	r2, [r3, #8]
 80086f8:	f042 0201 	orr.w	r2, r2, #1
 80086fc:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80086fe:	4b14      	ldr	r3, [pc, #80]	@ (8008750 <ADC_Enable+0x70>)
 8008700:	4a14      	ldr	r2, [pc, #80]	@ (8008754 <ADC_Enable+0x74>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8008708:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800870a:	9b01      	ldr	r3, [sp, #4]
 800870c:	b9e3      	cbnz	r3, 8008748 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 800870e:	f7ff fea3 	bl	8008458 <HAL_GetTick>
 8008712:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008714:	6823      	ldr	r3, [r4, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	07db      	lsls	r3, r3, #31
 800871a:	d4e9      	bmi.n	80086f0 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800871c:	f7ff fe9c 	bl	8008458 <HAL_GetTick>
 8008720:	1b40      	subs	r0, r0, r5
 8008722:	2802      	cmp	r0, #2
 8008724:	d9f6      	bls.n	8008714 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8008726:	6823      	ldr	r3, [r4, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f013 0301 	ands.w	r3, r3, #1
 800872e:	d1f1      	bne.n	8008714 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008730:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          return HAL_ERROR;
 8008732:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008734:	f042 0210 	orr.w	r2, r2, #16
 8008738:	62a2      	str	r2, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800873a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 800873c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008740:	f042 0201 	orr.w	r2, r2, #1
 8008744:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8008746:	e7d4      	b.n	80086f2 <ADC_Enable+0x12>
      wait_loop_index--;
 8008748:	9b01      	ldr	r3, [sp, #4]
 800874a:	3b01      	subs	r3, #1
 800874c:	e7dc      	b.n	8008708 <ADC_Enable+0x28>
 800874e:	bf00      	nop
 8008750:	20000004 	.word	0x20000004
 8008754:	000f4240 	.word	0x000f4240

08008758 <HAL_ADC_Start_DMA>:
{
 8008758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800875c:	4b40      	ldr	r3, [pc, #256]	@ (8008860 <HAL_ADC_Start_DMA+0x108>)
{
 800875e:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8008760:	6802      	ldr	r2, [r0, #0]
{
 8008762:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8008764:	429a      	cmp	r2, r3
{
 8008766:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8008768:	d002      	beq.n	8008770 <HAL_ADC_Start_DMA+0x18>
 800876a:	493e      	ldr	r1, [pc, #248]	@ (8008864 <HAL_ADC_Start_DMA+0x10c>)
 800876c:	428a      	cmp	r2, r1
 800876e:	d103      	bne.n	8008778 <HAL_ADC_Start_DMA+0x20>
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8008776:	d16e      	bne.n	8008856 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8008778:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800877c:	2b01      	cmp	r3, #1
 800877e:	d06c      	beq.n	800885a <HAL_ADC_Start_DMA+0x102>
 8008780:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8008782:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8008784:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8008788:	f7ff ffaa 	bl	80086e0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800878c:	4606      	mov	r6, r0
 800878e:	2800      	cmp	r0, #0
 8008790:	d15d      	bne.n	800884e <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8008792:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8008794:	6821      	ldr	r1, [r4, #0]
 8008796:	4b33      	ldr	r3, [pc, #204]	@ (8008864 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8008798:	f425 6570 	bic.w	r5, r5, #3840	@ 0xf00
 800879c:	f025 0501 	bic.w	r5, r5, #1
 80087a0:	f445 7580 	orr.w	r5, r5, #256	@ 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80087a4:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 80087a6:	62a5      	str	r5, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80087a8:	d104      	bne.n	80087b4 <HAL_ADC_Start_DMA+0x5c>
 80087aa:	4a2d      	ldr	r2, [pc, #180]	@ (8008860 <HAL_ADC_Start_DMA+0x108>)
 80087ac:	6853      	ldr	r3, [r2, #4]
 80087ae:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 80087b2:	d13e      	bne.n	8008832 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80087b4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80087b6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80087ba:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80087bc:	684b      	ldr	r3, [r1, #4]
 80087be:	055a      	lsls	r2, r3, #21
 80087c0:	d505      	bpl.n	80087ce <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80087c2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80087c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80087c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80087cc:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80087ce:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80087d0:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80087d2:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80087d6:	bf18      	it	ne
 80087d8:	6ae3      	ldrne	r3, [r4, #44]	@ 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80087da:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80087dc:	bf18      	it	ne
 80087de:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80087e2:	62e3      	str	r3, [r4, #44]	@ 0x2c
      __HAL_UNLOCK(hadc);
 80087e4:	2300      	movs	r3, #0
 80087e6:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80087ea:	4b1f      	ldr	r3, [pc, #124]	@ (8008868 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80087ec:	314c      	adds	r1, #76	@ 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80087ee:	6283      	str	r3, [r0, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80087f0:	4b1e      	ldr	r3, [pc, #120]	@ (800886c <HAL_ADC_Start_DMA+0x114>)
 80087f2:	62c3      	str	r3, [r0, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80087f4:	4b1e      	ldr	r3, [pc, #120]	@ (8008870 <HAL_ADC_Start_DMA+0x118>)
 80087f6:	6303      	str	r3, [r0, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80087f8:	f06f 0302 	mvn.w	r3, #2
 80087fc:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8008800:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8008804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008808:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800880c:	4643      	mov	r3, r8
 800880e:	f000 f9dd 	bl	8008bcc <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	689a      	ldr	r2, [r3, #8]
 8008816:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 800881a:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800881e:	689a      	ldr	r2, [r3, #8]
 8008820:	bf0c      	ite	eq
 8008822:	f442 02a0 	orreq.w	r2, r2, #5242880	@ 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8008826:	f442 1280 	orrne.w	r2, r2, #1048576	@ 0x100000
 800882a:	609a      	str	r2, [r3, #8]
}
 800882c:	4630      	mov	r0, r6
 800882e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008832:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008834:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008838:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800883a:	6853      	ldr	r3, [r2, #4]
 800883c:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800883e:	bf41      	itttt	mi
 8008840:	6aa0      	ldrmi	r0, [r4, #40]	@ 0x28
 8008842:	f420 5040 	bicmi.w	r0, r0, #12288	@ 0x3000
 8008846:	f440 5080 	orrmi.w	r0, r0, #4096	@ 0x1000
 800884a:	62a0      	strmi	r0, [r4, #40]	@ 0x28
 800884c:	e7bf      	b.n	80087ce <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 800884e:	2300      	movs	r3, #0
 8008850:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8008854:	e7ea      	b.n	800882c <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8008856:	2601      	movs	r6, #1
 8008858:	e7e8      	b.n	800882c <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 800885a:	2602      	movs	r6, #2
 800885c:	e7e6      	b.n	800882c <HAL_ADC_Start_DMA+0xd4>
 800885e:	bf00      	nop
 8008860:	40012400 	.word	0x40012400
 8008864:	40012800 	.word	0x40012800
 8008868:	08008489 	.word	0x08008489
 800886c:	080084d9 	.word	0x080084d9
 8008870:	080085c9 	.word	0x080085c9

08008874 <ADC_ConversionStop_Disable>:
{
 8008874:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8008876:	6803      	ldr	r3, [r0, #0]
{
 8008878:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800887a:	689a      	ldr	r2, [r3, #8]
 800887c:	07d1      	lsls	r1, r2, #31
 800887e:	d401      	bmi.n	8008884 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8008880:	2000      	movs	r0, #0
}
 8008882:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8008884:	689a      	ldr	r2, [r3, #8]
 8008886:	f022 0201 	bic.w	r2, r2, #1
 800888a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800888c:	f7ff fde4 	bl	8008458 <HAL_GetTick>
 8008890:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	07db      	lsls	r3, r3, #31
 8008898:	d5f2      	bpl.n	8008880 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800889a:	f7ff fddd 	bl	8008458 <HAL_GetTick>
 800889e:	1b40      	subs	r0, r0, r5
 80088a0:	2802      	cmp	r0, #2
 80088a2:	d9f6      	bls.n	8008892 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80088a4:	6823      	ldr	r3, [r4, #0]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	07da      	lsls	r2, r3, #31
 80088aa:	d5f2      	bpl.n	8008892 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          return HAL_ERROR;
 80088ae:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088b0:	f043 0310 	orr.w	r3, r3, #16
 80088b4:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80088b6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80088b8:	f043 0301 	orr.w	r3, r3, #1
 80088bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 80088be:	e7e0      	b.n	8008882 <ADC_ConversionStop_Disable+0xe>

080088c0 <HAL_ADC_Init>:
{
 80088c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 80088c2:	4604      	mov	r4, r0
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d06d      	beq.n	80089a4 <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80088c8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80088ca:	b923      	cbnz	r3, 80088d6 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80088cc:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80088ce:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 80088d2:	f7fa f95f 	bl	8002b94 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80088d6:	4620      	mov	r0, r4
 80088d8:	f7ff ffcc 	bl	8008874 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80088dc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80088de:	f013 0310 	ands.w	r3, r3, #16
 80088e2:	d161      	bne.n	80089a8 <HAL_ADC_Init+0xe8>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d15f      	bne.n	80089a8 <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 80088e8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80088ea:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80088ec:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 80088f0:	f022 0202 	bic.w	r2, r2, #2
 80088f4:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80088f8:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80088fa:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80088fc:	62a2      	str	r2, [r4, #40]	@ 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80088fe:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8008900:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8008902:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8008906:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800890a:	d036      	beq.n	800897a <HAL_ADC_Init+0xba>
 800890c:	1e77      	subs	r7, r6, #1
 800890e:	427d      	negs	r5, r7
 8008910:	417d      	adcs	r5, r7
 8008912:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008914:	7d27      	ldrb	r7, [r4, #20]
 8008916:	2f01      	cmp	r7, #1
 8008918:	d106      	bne.n	8008928 <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800891a:	bb82      	cbnz	r2, 800897e <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800891c:	69a2      	ldr	r2, [r4, #24]
 800891e:	3a01      	subs	r2, #1
 8008920:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 8008924:	f442 6500 	orr.w	r5, r2, #2048	@ 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8008928:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800892a:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800892e:	6857      	ldr	r7, [r2, #4]
 8008930:	f427 4769 	bic.w	r7, r7, #59648	@ 0xe900
 8008934:	ea45 0507 	orr.w	r5, r5, r7
 8008938:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800893a:	6897      	ldr	r7, [r2, #8]
 800893c:	4d1d      	ldr	r5, [pc, #116]	@ (80089b4 <HAL_ADC_Init+0xf4>)
 800893e:	ea05 0507 	and.w	r5, r5, r7
 8008942:	ea45 0501 	orr.w	r5, r5, r1
 8008946:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8008948:	d001      	beq.n	800894e <HAL_ADC_Init+0x8e>
 800894a:	2e01      	cmp	r6, #1
 800894c:	d102      	bne.n	8008954 <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800894e:	6923      	ldr	r3, [r4, #16]
 8008950:	3b01      	subs	r3, #1
 8008952:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8008954:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 8008956:	f425 0570 	bic.w	r5, r5, #15728640	@ 0xf00000
 800895a:	432b      	orrs	r3, r5
 800895c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800895e:	6892      	ldr	r2, [r2, #8]
 8008960:	4b15      	ldr	r3, [pc, #84]	@ (80089b8 <HAL_ADC_Init+0xf8>)
 8008962:	4013      	ands	r3, r2
 8008964:	4299      	cmp	r1, r3
 8008966:	d113      	bne.n	8008990 <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 8008968:	2300      	movs	r3, #0
 800896a:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800896c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800896e:	f023 0303 	bic.w	r3, r3, #3
 8008972:	f043 0301 	orr.w	r3, r3, #1
 8008976:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8008978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800897a:	4635      	mov	r5, r6
 800897c:	e7ca      	b.n	8008914 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800897e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008980:	f042 0220 	orr.w	r2, r2, #32
 8008984:	62a2      	str	r2, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008986:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008988:	f042 0201 	orr.w	r2, r2, #1
 800898c:	62e2      	str	r2, [r4, #44]	@ 0x2c
 800898e:	e7cb      	b.n	8008928 <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 8008990:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008992:	f023 0312 	bic.w	r3, r3, #18
 8008996:	f043 0310 	orr.w	r3, r3, #16
 800899a:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800899c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800899e:	f043 0301 	orr.w	r3, r3, #1
 80089a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
    return HAL_ERROR;
 80089a4:	2001      	movs	r0, #1
 80089a6:	e7e7      	b.n	8008978 <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80089a8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80089aa:	f043 0310 	orr.w	r3, r3, #16
 80089ae:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 80089b0:	e7f8      	b.n	80089a4 <HAL_ADC_Init+0xe4>
 80089b2:	bf00      	nop
 80089b4:	ffe1f7fd 	.word	0xffe1f7fd
 80089b8:	ff1f0efe 	.word	0xff1f0efe

080089bc <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80089bc:	2300      	movs	r3, #0
{
 80089be:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80089c0:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80089c2:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 80089c6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d062      	beq.n	8008a92 <HAL_ADCEx_Calibration_Start+0xd6>
 80089cc:	2301      	movs	r3, #1
 80089ce:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80089d2:	f7ff ff4f 	bl	8008874 <ADC_ConversionStop_Disable>
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80089d6:	4620      	mov	r0, r4
 80089d8:	f7ff fe82 	bl	80086e0 <ADC_Enable>

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80089dc:	4605      	mov	r5, r0
 80089de:	2800      	cmp	r0, #0
 80089e0:	d12f      	bne.n	8008a42 <HAL_ADCEx_Calibration_Start+0x86>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80089e2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80089e4:	2002      	movs	r0, #2
     ADC_STATE_CLR_SET(hadc->State,
 80089e6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80089ea:	f023 0302 	bic.w	r3, r3, #2
 80089ee:	f043 0302 	orr.w	r3, r3, #2
 80089f2:	62a3      	str	r3, [r4, #40]	@ 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80089f4:	4b28      	ldr	r3, [pc, #160]	@ (8008a98 <HAL_ADCEx_Calibration_Start+0xdc>)
 80089f6:	681e      	ldr	r6, [r3, #0]
 80089f8:	f000 fe0e 	bl	8009618 <HAL_RCCEx_GetPeriphCLKFreq>
 80089fc:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8008a00:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 8008a02:	9601      	str	r6, [sp, #4]

    while(wait_loop_index != 0U)
 8008a04:	9b01      	ldr	r3, [sp, #4]
 8008a06:	bb03      	cbnz	r3, 8008a4a <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8008a08:	6822      	ldr	r2, [r4, #0]
 8008a0a:	6893      	ldr	r3, [r2, #8]
 8008a0c:	f043 0308 	orr.w	r3, r3, #8
 8008a10:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 8008a12:	f7ff fd21 	bl	8008458 <HAL_GetTick>
 8008a16:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8008a18:	6823      	ldr	r3, [r4, #0]
 8008a1a:	689a      	ldr	r2, [r3, #8]
 8008a1c:	0711      	lsls	r1, r2, #28
 8008a1e:	d418      	bmi.n	8008a52 <HAL_ADCEx_Calibration_Start+0x96>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8008a20:	689a      	ldr	r2, [r3, #8]
 8008a22:	f042 0204 	orr.w	r2, r2, #4
 8008a26:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8008a28:	f7ff fd16 	bl	8008458 <HAL_GetTick>
 8008a2c:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	075b      	lsls	r3, r3, #29
 8008a34:	d423      	bmi.n	8008a7e <HAL_ADCEx_Calibration_Start+0xc2>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008a36:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008a38:	f023 0303 	bic.w	r3, r3, #3
 8008a3c:	f043 0301 	orr.w	r3, r3, #1
 8008a40:	62a3      	str	r3, [r4, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008a42:	2300      	movs	r3, #0
 8008a44:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8008a48:	e016      	b.n	8008a78 <HAL_ADCEx_Calibration_Start+0xbc>
      wait_loop_index--;
 8008a4a:	9b01      	ldr	r3, [sp, #4]
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	9301      	str	r3, [sp, #4]
 8008a50:	e7d8      	b.n	8008a04 <HAL_ADCEx_Calibration_Start+0x48>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8008a52:	f7ff fd01 	bl	8008458 <HAL_GetTick>
 8008a56:	1b80      	subs	r0, r0, r6
 8008a58:	280a      	cmp	r0, #10
 8008a5a:	d9dd      	bls.n	8008a18 <HAL_ADCEx_Calibration_Start+0x5c>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	0718      	lsls	r0, r3, #28
 8008a62:	d5d9      	bpl.n	8008a18 <HAL_ADCEx_Calibration_Start+0x5c>
          ADC_STATE_CLR_SET(hadc->State,
 8008a64:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          return HAL_ERROR;
 8008a66:	2501      	movs	r5, #1
          ADC_STATE_CLR_SET(hadc->State,
 8008a68:	f023 0312 	bic.w	r3, r3, #18
 8008a6c:	f043 0310 	orr.w	r3, r3, #16
 8008a70:	62a3      	str	r3, [r4, #40]	@ 0x28
          __HAL_UNLOCK(hadc);
 8008a72:	2300      	movs	r3, #0
 8008a74:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8008a78:	4628      	mov	r0, r5
 8008a7a:	b002      	add	sp, #8
 8008a7c:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8008a7e:	f7ff fceb 	bl	8008458 <HAL_GetTick>
 8008a82:	1b80      	subs	r0, r0, r6
 8008a84:	280a      	cmp	r0, #10
 8008a86:	d9d2      	bls.n	8008a2e <HAL_ADCEx_Calibration_Start+0x72>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8008a88:	6823      	ldr	r3, [r4, #0]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	075a      	lsls	r2, r3, #29
 8008a8e:	d5ce      	bpl.n	8008a2e <HAL_ADCEx_Calibration_Start+0x72>
 8008a90:	e7e8      	b.n	8008a64 <HAL_ADCEx_Calibration_Start+0xa8>
  __HAL_LOCK(hadc);
 8008a92:	2502      	movs	r5, #2
 8008a94:	e7f0      	b.n	8008a78 <HAL_ADCEx_Calibration_Start+0xbc>
 8008a96:	bf00      	nop
 8008a98:	20000004 	.word	0x20000004

08008a9c <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8008a9c:	4770      	bx	lr
	...

08008aa0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008aa0:	4907      	ldr	r1, [pc, #28]	@ (8008ac0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008aa2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008aa4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008aa6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008aaa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008aae:	0412      	lsls	r2, r2, #16
 8008ab0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008ab4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8008abc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008abe:	4770      	bx	lr
 8008ac0:	e000ed00 	.word	0xe000ed00

08008ac4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ac4:	4b15      	ldr	r3, [pc, #84]	@ (8008b1c <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008ac6:	b530      	push	{r4, r5, lr}
 8008ac8:	68dc      	ldr	r4, [r3, #12]
 8008aca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ace:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ad2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ad4:	2b04      	cmp	r3, #4
 8008ad6:	bf28      	it	cs
 8008ad8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ada:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008adc:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ae0:	bf94      	ite	ls
 8008ae2:	2400      	movls	r4, #0
 8008ae4:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ae6:	fa05 f303 	lsl.w	r3, r5, r3
 8008aea:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008aee:	40a5      	lsls	r5, r4
 8008af0:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008af4:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8008af6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008af8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008afc:	bfac      	ite	ge
 8008afe:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b02:	4a07      	ldrlt	r2, [pc, #28]	@ (8008b20 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b04:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	bfab      	itete	ge
 8008b0c:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b10:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b14:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b18:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008b1a:	bd30      	pop	{r4, r5, pc}
 8008b1c:	e000ed00 	.word	0xe000ed00
 8008b20:	e000ed14 	.word	0xe000ed14

08008b24 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008b24:	2800      	cmp	r0, #0
 8008b26:	db07      	blt.n	8008b38 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b28:	2301      	movs	r3, #1
 8008b2a:	0941      	lsrs	r1, r0, #5
 8008b2c:	4a03      	ldr	r2, [pc, #12]	@ (8008b3c <HAL_NVIC_EnableIRQ+0x18>)
 8008b2e:	f000 001f 	and.w	r0, r0, #31
 8008b32:	4083      	lsls	r3, r0
 8008b34:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	e000e100 	.word	0xe000e100

08008b40 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b40:	3801      	subs	r0, #1
 8008b42:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8008b46:	d20b      	bcs.n	8008b60 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b48:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b4c:	21f0      	movs	r1, #240	@ 0xf0
 8008b4e:	4a05      	ldr	r2, [pc, #20]	@ (8008b64 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b50:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b52:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b56:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b58:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b5a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b5c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b5e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8008b60:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008b62:	4770      	bx	lr
 8008b64:	e000ed00 	.word	0xe000ed00

08008b68 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008b68:	4603      	mov	r3, r0
{
 8008b6a:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8008b6c:	b340      	cbz	r0, 8008bc0 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008b6e:	2114      	movs	r1, #20
 8008b70:	6800      	ldr	r0, [r0, #0]
 8008b72:	4a14      	ldr	r2, [pc, #80]	@ (8008bc4 <HAL_DMA_Init+0x5c>)
 8008b74:	4402      	add	r2, r0
 8008b76:	fbb2 f2f1 	udiv	r2, r2, r1
 8008b7a:	0092      	lsls	r2, r2, #2
 8008b7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8008b7e:	4a12      	ldr	r2, [pc, #72]	@ (8008bc8 <HAL_DMA_Init+0x60>)
 8008b80:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008b82:	2202      	movs	r2, #2
 8008b84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008b88:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 8008b8c:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b8e:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 8008b90:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b92:	4322      	orrs	r2, r4
 8008b94:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008b96:	f421 517f 	bic.w	r1, r1, #16320	@ 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b9a:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b9c:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008b9e:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ba2:	4322      	orrs	r2, r4
 8008ba4:	699c      	ldr	r4, [r3, #24]
 8008ba6:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8008ba8:	69dc      	ldr	r4, [r3, #28]
 8008baa:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8008bac:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008bae:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008bb0:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008bb2:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008bb4:	6398      	str	r0, [r3, #56]	@ 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008bb6:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8008bba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
}
 8008bbe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008bc0:	2001      	movs	r0, #1
 8008bc2:	e7fc      	b.n	8008bbe <HAL_DMA_Init+0x56>
 8008bc4:	bffdfff8 	.word	0xbffdfff8
 8008bc8:	40020000 	.word	0x40020000

08008bcc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008bcc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008bce:	f890 4020 	ldrb.w	r4, [r0, #32]
 8008bd2:	2c01      	cmp	r4, #1
 8008bd4:	d034      	beq.n	8008c40 <HAL_DMA_Start_IT+0x74>
 8008bd6:	2401      	movs	r4, #1
 8008bd8:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008bdc:	f890 4021 	ldrb.w	r4, [r0, #33]	@ 0x21
 8008be0:	2c01      	cmp	r4, #1
 8008be2:	b2e5      	uxtb	r5, r4
 8008be4:	f04f 0400 	mov.w	r4, #0
 8008be8:	d128      	bne.n	8008c3c <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008bea:	2602      	movs	r6, #2
 8008bec:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008bf0:	6384      	str	r4, [r0, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008bf2:	6804      	ldr	r4, [r0, #0]
 8008bf4:	6826      	ldr	r6, [r4, #0]
 8008bf6:	f026 0601 	bic.w	r6, r6, #1
 8008bfa:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008bfc:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 8008c00:	40bd      	lsls	r5, r7
 8008c02:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008c04:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008c06:	6843      	ldr	r3, [r0, #4]
 8008c08:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8008c0a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008c0c:	bf0b      	itete	eq
 8008c0e:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8008c10:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8008c12:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8008c14:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8008c16:	b14b      	cbz	r3, 8008c2c <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8008c1e:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008c20:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	f043 0301 	orr.w	r3, r3, #1
 8008c28:	6023      	str	r3, [r4, #0]
}
 8008c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	f023 0304 	bic.w	r3, r3, #4
 8008c32:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	f043 030a 	orr.w	r3, r3, #10
 8008c3a:	e7f0      	b.n	8008c1e <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8008c3c:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 8008c40:	2002      	movs	r0, #2
 8008c42:	e7f2      	b.n	8008c2a <HAL_DMA_Start_IT+0x5e>

08008c44 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c44:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{
 8008c48:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c4a:	2a02      	cmp	r2, #2
 8008c4c:	d006      	beq.n	8008c5c <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c4e:	2204      	movs	r2, #4
 8008c50:	6382      	str	r2, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8008c52:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 2020 	strb.w	r2, [r3, #32]
}
 8008c5a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c5c:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008c5e:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c60:	6811      	ldr	r1, [r2, #0]
 8008c62:	f021 010e 	bic.w	r1, r1, #14
 8008c66:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8008c68:	6811      	ldr	r1, [r2, #0]
 8008c6a:	f021 0101 	bic.w	r1, r1, #1
 8008c6e:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008c70:	2101      	movs	r1, #1
 8008c72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c74:	fa01 f202 	lsl.w	r2, r1, r2
 8008c78:	6042      	str	r2, [r0, #4]
  return status; 
 8008c7a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8008c7c:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  return status; 
 8008c80:	e7e8      	b.n	8008c54 <HAL_DMA_Abort+0x10>
	...

08008c84 <HAL_DMA_Abort_IT>:
{  
 8008c84:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008c86:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d003      	beq.n	8008c96 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c8e:	2304      	movs	r3, #4
 8008c90:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8008c92:	2001      	movs	r0, #1
}
 8008c94:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c96:	6803      	ldr	r3, [r0, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	f022 020e 	bic.w	r2, r2, #14
 8008c9e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	f022 0201 	bic.w	r2, r2, #1
 8008ca6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008ca8:	4a17      	ldr	r2, [pc, #92]	@ (8008d08 <HAL_DMA_Abort_IT+0x84>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d01f      	beq.n	8008cee <HAL_DMA_Abort_IT+0x6a>
 8008cae:	3214      	adds	r2, #20
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d01e      	beq.n	8008cf2 <HAL_DMA_Abort_IT+0x6e>
 8008cb4:	3214      	adds	r2, #20
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d01d      	beq.n	8008cf6 <HAL_DMA_Abort_IT+0x72>
 8008cba:	3214      	adds	r2, #20
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d01d      	beq.n	8008cfc <HAL_DMA_Abort_IT+0x78>
 8008cc0:	3214      	adds	r2, #20
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d01d      	beq.n	8008d02 <HAL_DMA_Abort_IT+0x7e>
 8008cc6:	3214      	adds	r2, #20
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	bf14      	ite	ne
 8008ccc:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8008cd0:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 8008cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8008d0c <HAL_DMA_Abort_IT+0x88>)
 8008cd6:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8008ce4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008ce6:	b103      	cbz	r3, 8008cea <HAL_DMA_Abort_IT+0x66>
      hdma->XferAbortCallback(hdma);
 8008ce8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8008cea:	2000      	movs	r0, #0
 8008cec:	e7d2      	b.n	8008c94 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e7f0      	b.n	8008cd4 <HAL_DMA_Abort_IT+0x50>
 8008cf2:	2310      	movs	r3, #16
 8008cf4:	e7ee      	b.n	8008cd4 <HAL_DMA_Abort_IT+0x50>
 8008cf6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008cfa:	e7eb      	b.n	8008cd4 <HAL_DMA_Abort_IT+0x50>
 8008cfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008d00:	e7e8      	b.n	8008cd4 <HAL_DMA_Abort_IT+0x50>
 8008d02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008d06:	e7e5      	b.n	8008cd4 <HAL_DMA_Abort_IT+0x50>
 8008d08:	40020008 	.word	0x40020008
 8008d0c:	40020000 	.word	0x40020000

08008d10 <HAL_DMA_IRQHandler>:
{
 8008d10:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008d12:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008d14:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008d16:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008d18:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8008d1a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008d1c:	4095      	lsls	r5, r2
 8008d1e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8008d20:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008d22:	d032      	beq.n	8008d8a <HAL_DMA_IRQHandler+0x7a>
 8008d24:	074d      	lsls	r5, r1, #29
 8008d26:	d530      	bpl.n	8008d8a <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008d2c:	bf5e      	ittt	pl
 8008d2e:	681a      	ldrpl	r2, [r3, #0]
 8008d30:	f022 0204 	bicpl.w	r2, r2, #4
 8008d34:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008d36:	4a3e      	ldr	r2, [pc, #248]	@ (8008e30 <HAL_DMA_IRQHandler+0x120>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d019      	beq.n	8008d70 <HAL_DMA_IRQHandler+0x60>
 8008d3c:	3214      	adds	r2, #20
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d018      	beq.n	8008d74 <HAL_DMA_IRQHandler+0x64>
 8008d42:	3214      	adds	r2, #20
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d017      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x68>
 8008d48:	3214      	adds	r2, #20
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d017      	beq.n	8008d7e <HAL_DMA_IRQHandler+0x6e>
 8008d4e:	3214      	adds	r2, #20
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d017      	beq.n	8008d84 <HAL_DMA_IRQHandler+0x74>
 8008d54:	3214      	adds	r2, #20
 8008d56:	4293      	cmp	r3, r2
 8008d58:	bf14      	ite	ne
 8008d5a:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 8008d5e:	f44f 0380 	moveq.w	r3, #4194304	@ 0x400000
 8008d62:	4a34      	ldr	r2, [pc, #208]	@ (8008e34 <HAL_DMA_IRQHandler+0x124>)
 8008d64:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8008d66:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d05e      	beq.n	8008e2a <HAL_DMA_IRQHandler+0x11a>
}
 8008d6c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8008d6e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008d70:	2304      	movs	r3, #4
 8008d72:	e7f6      	b.n	8008d62 <HAL_DMA_IRQHandler+0x52>
 8008d74:	2340      	movs	r3, #64	@ 0x40
 8008d76:	e7f4      	b.n	8008d62 <HAL_DMA_IRQHandler+0x52>
 8008d78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d7c:	e7f1      	b.n	8008d62 <HAL_DMA_IRQHandler+0x52>
 8008d7e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008d82:	e7ee      	b.n	8008d62 <HAL_DMA_IRQHandler+0x52>
 8008d84:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8008d88:	e7eb      	b.n	8008d62 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8008d8a:	2502      	movs	r5, #2
 8008d8c:	4095      	lsls	r5, r2
 8008d8e:	4225      	tst	r5, r4
 8008d90:	d035      	beq.n	8008dfe <HAL_DMA_IRQHandler+0xee>
 8008d92:	078d      	lsls	r5, r1, #30
 8008d94:	d533      	bpl.n	8008dfe <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	0694      	lsls	r4, r2, #26
 8008d9a:	d406      	bmi.n	8008daa <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	f022 020a 	bic.w	r2, r2, #10
 8008da2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8008da4:	2201      	movs	r2, #1
 8008da6:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008daa:	4a21      	ldr	r2, [pc, #132]	@ (8008e30 <HAL_DMA_IRQHandler+0x120>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d019      	beq.n	8008de4 <HAL_DMA_IRQHandler+0xd4>
 8008db0:	3214      	adds	r2, #20
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d018      	beq.n	8008de8 <HAL_DMA_IRQHandler+0xd8>
 8008db6:	3214      	adds	r2, #20
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d017      	beq.n	8008dec <HAL_DMA_IRQHandler+0xdc>
 8008dbc:	3214      	adds	r2, #20
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d017      	beq.n	8008df2 <HAL_DMA_IRQHandler+0xe2>
 8008dc2:	3214      	adds	r2, #20
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d017      	beq.n	8008df8 <HAL_DMA_IRQHandler+0xe8>
 8008dc8:	3214      	adds	r2, #20
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	bf14      	ite	ne
 8008dce:	f04f 7300 	movne.w	r3, #33554432	@ 0x2000000
 8008dd2:	f44f 1300 	moveq.w	r3, #2097152	@ 0x200000
 8008dd6:	4a17      	ldr	r2, [pc, #92]	@ (8008e34 <HAL_DMA_IRQHandler+0x124>)
 8008dd8:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8008dda:	2300      	movs	r3, #0
 8008ddc:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8008de0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008de2:	e7c1      	b.n	8008d68 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008de4:	2302      	movs	r3, #2
 8008de6:	e7f6      	b.n	8008dd6 <HAL_DMA_IRQHandler+0xc6>
 8008de8:	2320      	movs	r3, #32
 8008dea:	e7f4      	b.n	8008dd6 <HAL_DMA_IRQHandler+0xc6>
 8008dec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008df0:	e7f1      	b.n	8008dd6 <HAL_DMA_IRQHandler+0xc6>
 8008df2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008df6:	e7ee      	b.n	8008dd6 <HAL_DMA_IRQHandler+0xc6>
 8008df8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008dfc:	e7eb      	b.n	8008dd6 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008dfe:	2508      	movs	r5, #8
 8008e00:	4095      	lsls	r5, r2
 8008e02:	4225      	tst	r5, r4
 8008e04:	d011      	beq.n	8008e2a <HAL_DMA_IRQHandler+0x11a>
 8008e06:	0709      	lsls	r1, r1, #28
 8008e08:	d50f      	bpl.n	8008e2a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008e0a:	6819      	ldr	r1, [r3, #0]
 8008e0c:	f021 010e 	bic.w	r1, r1, #14
 8008e10:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008e12:	2301      	movs	r3, #1
 8008e14:	fa03 f202 	lsl.w	r2, r3, r2
 8008e18:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008e1a:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8008e1c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8008e20:	2300      	movs	r3, #0
 8008e22:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8008e26:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8008e28:	e79e      	b.n	8008d68 <HAL_DMA_IRQHandler+0x58>
}
 8008e2a:	bc70      	pop	{r4, r5, r6}
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	40020008 	.word	0x40020008
 8008e34:	40020000 	.word	0x40020000

08008e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008e3c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8008e3e:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008e40:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8008fcc <HAL_GPIO_Init+0x194>
 8008e44:	4b62      	ldr	r3, [pc, #392]	@ (8008fd0 <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 8008e46:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8008fd4 <HAL_GPIO_Init+0x19c>
 8008e4a:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8008fd8 <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e4e:	680a      	ldr	r2, [r1, #0]
 8008e50:	fa32 f506 	lsrs.w	r5, r2, r6
 8008e54:	d102      	bne.n	8008e5c <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8008e56:	b003      	add	sp, #12
 8008e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8008e5c:	2701      	movs	r7, #1
 8008e5e:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008e60:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8008e64:	ea37 0202 	bics.w	r2, r7, r2
 8008e68:	d17a      	bne.n	8008f60 <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 8008e6a:	684a      	ldr	r2, [r1, #4]
 8008e6c:	2a03      	cmp	r2, #3
 8008e6e:	d807      	bhi.n	8008e80 <HAL_GPIO_Init+0x48>
 8008e70:	3a01      	subs	r2, #1
 8008e72:	2a02      	cmp	r2, #2
 8008e74:	f200 8083 	bhi.w	8008f7e <HAL_GPIO_Init+0x146>
 8008e78:	e8df f002 	tbb	[pc, r2]
 8008e7c:	9792      	.short	0x9792
 8008e7e:	9d          	.byte	0x9d
 8008e7f:	00          	.byte	0x00
 8008e80:	2a12      	cmp	r2, #18
 8008e82:	f000 8095 	beq.w	8008fb0 <HAL_GPIO_Init+0x178>
 8008e86:	d86d      	bhi.n	8008f64 <HAL_GPIO_Init+0x12c>
 8008e88:	2a11      	cmp	r2, #17
 8008e8a:	f000 808b 	beq.w	8008fa4 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008e8e:	2dff      	cmp	r5, #255	@ 0xff
 8008e90:	bf98      	it	ls
 8008e92:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008e94:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008e98:	bf88      	it	hi
 8008e9a:	f100 0904 	addhi.w	r9, r0, #4
 8008e9e:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008ea2:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008ea6:	bf88      	it	hi
 8008ea8:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008eaa:	fa0b fa02 	lsl.w	sl, fp, r2
 8008eae:	ea27 070a 	bic.w	r7, r7, sl
 8008eb2:	fa04 f202 	lsl.w	r2, r4, r2
 8008eb6:	4317      	orrs	r7, r2
 8008eb8:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008ebc:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8008ec0:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8008ec4:	d04c      	beq.n	8008f60 <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008ec6:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8008eca:	f026 0703 	bic.w	r7, r6, #3
 8008ece:	f042 0201 	orr.w	r2, r2, #1
 8008ed2:	f8cc 2018 	str.w	r2, [ip, #24]
 8008ed6:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8008eda:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8008ede:	f002 0201 	and.w	r2, r2, #1
 8008ee2:	9201      	str	r2, [sp, #4]
 8008ee4:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008ee8:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008eec:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008eee:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8008ef2:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008ef4:	fa0b fb0a 	lsl.w	fp, fp, sl
 8008ef8:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008efc:	4a37      	ldr	r2, [pc, #220]	@ (8008fdc <HAL_GPIO_Init+0x1a4>)
 8008efe:	4290      	cmp	r0, r2
 8008f00:	d05d      	beq.n	8008fbe <HAL_GPIO_Init+0x186>
 8008f02:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008f06:	4290      	cmp	r0, r2
 8008f08:	d05b      	beq.n	8008fc2 <HAL_GPIO_Init+0x18a>
 8008f0a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008f0e:	4290      	cmp	r0, r2
 8008f10:	d059      	beq.n	8008fc6 <HAL_GPIO_Init+0x18e>
 8008f12:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008f16:	4290      	cmp	r0, r2
 8008f18:	bf14      	ite	ne
 8008f1a:	2204      	movne	r2, #4
 8008f1c:	2203      	moveq	r2, #3
 8008f1e:	fa02 f20a 	lsl.w	r2, r2, sl
 8008f22:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8008f26:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8008f28:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008f2a:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8008f2e:	bf14      	ite	ne
 8008f30:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008f32:	43aa      	biceq	r2, r5
 8008f34:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8008f36:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008f38:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8008f3c:	bf14      	ite	ne
 8008f3e:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008f40:	43aa      	biceq	r2, r5
 8008f42:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8008f44:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008f46:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8008f4a:	bf14      	ite	ne
 8008f4c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008f4e:	43aa      	biceq	r2, r5
 8008f50:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8008f52:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008f54:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8008f58:	bf14      	ite	ne
 8008f5a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008f5c:	43aa      	biceq	r2, r5
 8008f5e:	601a      	str	r2, [r3, #0]
	position++;
 8008f60:	3601      	adds	r6, #1
 8008f62:	e774      	b.n	8008e4e <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8008f64:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8008fe0 <HAL_GPIO_Init+0x1a8>
 8008f68:	454a      	cmp	r2, r9
 8008f6a:	d008      	beq.n	8008f7e <HAL_GPIO_Init+0x146>
 8008f6c:	d810      	bhi.n	8008f90 <HAL_GPIO_Init+0x158>
 8008f6e:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8008f72:	454a      	cmp	r2, r9
 8008f74:	d003      	beq.n	8008f7e <HAL_GPIO_Init+0x146>
 8008f76:	4572      	cmp	r2, lr
 8008f78:	d001      	beq.n	8008f7e <HAL_GPIO_Init+0x146>
 8008f7a:	4542      	cmp	r2, r8
 8008f7c:	d187      	bne.n	8008e8e <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008f7e:	688a      	ldr	r2, [r1, #8]
 8008f80:	b1da      	cbz	r2, 8008fba <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008f82:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008f84:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8008f88:	bf0c      	ite	eq
 8008f8a:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8008f8c:	6147      	strne	r7, [r0, #20]
 8008f8e:	e77e      	b.n	8008e8e <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8008f90:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8008fe4 <HAL_GPIO_Init+0x1ac>
 8008f94:	454a      	cmp	r2, r9
 8008f96:	d0f2      	beq.n	8008f7e <HAL_GPIO_Init+0x146>
 8008f98:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8008f9c:	454a      	cmp	r2, r9
 8008f9e:	e7ed      	b.n	8008f7c <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008fa0:	68cc      	ldr	r4, [r1, #12]
          break;
 8008fa2:	e774      	b.n	8008e8e <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008fa4:	68cc      	ldr	r4, [r1, #12]
 8008fa6:	3404      	adds	r4, #4
          break;
 8008fa8:	e771      	b.n	8008e8e <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008faa:	68cc      	ldr	r4, [r1, #12]
 8008fac:	3408      	adds	r4, #8
          break;
 8008fae:	e76e      	b.n	8008e8e <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008fb0:	68cc      	ldr	r4, [r1, #12]
 8008fb2:	340c      	adds	r4, #12
          break;
 8008fb4:	e76b      	b.n	8008e8e <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8008fb6:	2400      	movs	r4, #0
 8008fb8:	e769      	b.n	8008e8e <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008fba:	2404      	movs	r4, #4
 8008fbc:	e767      	b.n	8008e8e <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	e7ad      	b.n	8008f1e <HAL_GPIO_Init+0xe6>
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	e7ab      	b.n	8008f1e <HAL_GPIO_Init+0xe6>
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	e7a9      	b.n	8008f1e <HAL_GPIO_Init+0xe6>
 8008fca:	bf00      	nop
 8008fcc:	40021000 	.word	0x40021000
 8008fd0:	40010400 	.word	0x40010400
 8008fd4:	10210000 	.word	0x10210000
 8008fd8:	10110000 	.word	0x10110000
 8008fdc:	40010800 	.word	0x40010800
 8008fe0:	10220000 	.word	0x10220000
 8008fe4:	10310000 	.word	0x10310000

08008fe8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008fe8:	6883      	ldr	r3, [r0, #8]
 8008fea:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008fec:	bf14      	ite	ne
 8008fee:	2001      	movne	r0, #1
 8008ff0:	2000      	moveq	r0, #0
 8008ff2:	4770      	bx	lr

08008ff4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ff4:	b10a      	cbz	r2, 8008ffa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008ff6:	6101      	str	r1, [r0, #16]
  }
}
 8008ff8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008ffa:	0409      	lsls	r1, r1, #16
 8008ffc:	e7fb      	b.n	8008ff6 <HAL_GPIO_WritePin+0x2>

08008ffe <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008ffe:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009000:	ea01 0203 	and.w	r2, r1, r3
 8009004:	ea21 0103 	bic.w	r1, r1, r3
 8009008:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800900c:	6101      	str	r1, [r0, #16]
}
 800900e:	4770      	bx	lr

08009010 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009010:	4a04      	ldr	r2, [pc, #16]	@ (8009024 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8009012:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009014:	6951      	ldr	r1, [r2, #20]
 8009016:	4201      	tst	r1, r0
 8009018:	d002      	beq.n	8009020 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800901a:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800901c:	f7fd ff34 	bl	8006e88 <HAL_GPIO_EXTI_Callback>
  }
}
 8009020:	bd08      	pop	{r3, pc}
 8009022:	bf00      	nop
 8009024:	40010400 	.word	0x40010400

08009028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009028:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800902c:	4605      	mov	r5, r0
 800902e:	b338      	cbz	r0, 8009080 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009030:	6803      	ldr	r3, [r0, #0]
 8009032:	07db      	lsls	r3, r3, #31
 8009034:	d410      	bmi.n	8009058 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009036:	682b      	ldr	r3, [r5, #0]
 8009038:	079f      	lsls	r7, r3, #30
 800903a:	d45e      	bmi.n	80090fa <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800903c:	682b      	ldr	r3, [r5, #0]
 800903e:	0719      	lsls	r1, r3, #28
 8009040:	f100 8095 	bmi.w	800916e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	075a      	lsls	r2, r3, #29
 8009048:	f100 80c1 	bmi.w	80091ce <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800904c:	69eb      	ldr	r3, [r5, #28]
 800904e:	2b00      	cmp	r3, #0
 8009050:	f040 812c 	bne.w	80092ac <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8009054:	2000      	movs	r0, #0
 8009056:	e029      	b.n	80090ac <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009058:	4c90      	ldr	r4, [pc, #576]	@ (800929c <HAL_RCC_OscConfig+0x274>)
 800905a:	6863      	ldr	r3, [r4, #4]
 800905c:	f003 030c 	and.w	r3, r3, #12
 8009060:	2b04      	cmp	r3, #4
 8009062:	d007      	beq.n	8009074 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009064:	6863      	ldr	r3, [r4, #4]
 8009066:	f003 030c 	and.w	r3, r3, #12
 800906a:	2b08      	cmp	r3, #8
 800906c:	d10a      	bne.n	8009084 <HAL_RCC_OscConfig+0x5c>
 800906e:	6863      	ldr	r3, [r4, #4]
 8009070:	03de      	lsls	r6, r3, #15
 8009072:	d507      	bpl.n	8009084 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009074:	6823      	ldr	r3, [r4, #0]
 8009076:	039c      	lsls	r4, r3, #14
 8009078:	d5dd      	bpl.n	8009036 <HAL_RCC_OscConfig+0xe>
 800907a:	686b      	ldr	r3, [r5, #4]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1da      	bne.n	8009036 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8009080:	2001      	movs	r0, #1
 8009082:	e013      	b.n	80090ac <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009084:	686b      	ldr	r3, [r5, #4]
 8009086:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800908a:	d112      	bne.n	80090b2 <HAL_RCC_OscConfig+0x8a>
 800908c:	6823      	ldr	r3, [r4, #0]
 800908e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009092:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009094:	f7ff f9e0 	bl	8008458 <HAL_GetTick>
 8009098:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800909a:	6823      	ldr	r3, [r4, #0]
 800909c:	0398      	lsls	r0, r3, #14
 800909e:	d4ca      	bmi.n	8009036 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090a0:	f7ff f9da 	bl	8008458 <HAL_GetTick>
 80090a4:	1b80      	subs	r0, r0, r6
 80090a6:	2864      	cmp	r0, #100	@ 0x64
 80090a8:	d9f7      	bls.n	800909a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80090aa:	2003      	movs	r0, #3
}
 80090ac:	b002      	add	sp, #8
 80090ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090b2:	b99b      	cbnz	r3, 80090dc <HAL_RCC_OscConfig+0xb4>
 80090b4:	6823      	ldr	r3, [r4, #0]
 80090b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090ba:	6023      	str	r3, [r4, #0]
 80090bc:	6823      	ldr	r3, [r4, #0]
 80090be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80090c2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80090c4:	f7ff f9c8 	bl	8008458 <HAL_GetTick>
 80090c8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	0399      	lsls	r1, r3, #14
 80090ce:	d5b2      	bpl.n	8009036 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090d0:	f7ff f9c2 	bl	8008458 <HAL_GetTick>
 80090d4:	1b80      	subs	r0, r0, r6
 80090d6:	2864      	cmp	r0, #100	@ 0x64
 80090d8:	d9f7      	bls.n	80090ca <HAL_RCC_OscConfig+0xa2>
 80090da:	e7e6      	b.n	80090aa <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80090e0:	6823      	ldr	r3, [r4, #0]
 80090e2:	d103      	bne.n	80090ec <HAL_RCC_OscConfig+0xc4>
 80090e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80090e8:	6023      	str	r3, [r4, #0]
 80090ea:	e7cf      	b.n	800908c <HAL_RCC_OscConfig+0x64>
 80090ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090f0:	6023      	str	r3, [r4, #0]
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80090f8:	e7cb      	b.n	8009092 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80090fa:	4c68      	ldr	r4, [pc, #416]	@ (800929c <HAL_RCC_OscConfig+0x274>)
 80090fc:	6863      	ldr	r3, [r4, #4]
 80090fe:	f013 0f0c 	tst.w	r3, #12
 8009102:	d007      	beq.n	8009114 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009104:	6863      	ldr	r3, [r4, #4]
 8009106:	f003 030c 	and.w	r3, r3, #12
 800910a:	2b08      	cmp	r3, #8
 800910c:	d110      	bne.n	8009130 <HAL_RCC_OscConfig+0x108>
 800910e:	6863      	ldr	r3, [r4, #4]
 8009110:	03da      	lsls	r2, r3, #15
 8009112:	d40d      	bmi.n	8009130 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009114:	6823      	ldr	r3, [r4, #0]
 8009116:	079b      	lsls	r3, r3, #30
 8009118:	d502      	bpl.n	8009120 <HAL_RCC_OscConfig+0xf8>
 800911a:	692b      	ldr	r3, [r5, #16]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d1af      	bne.n	8009080 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009120:	6823      	ldr	r3, [r4, #0]
 8009122:	696a      	ldr	r2, [r5, #20]
 8009124:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009128:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	e785      	b.n	800903c <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009130:	692a      	ldr	r2, [r5, #16]
 8009132:	4b5b      	ldr	r3, [pc, #364]	@ (80092a0 <HAL_RCC_OscConfig+0x278>)
 8009134:	b16a      	cbz	r2, 8009152 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8009136:	2201      	movs	r2, #1
 8009138:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800913a:	f7ff f98d 	bl	8008458 <HAL_GetTick>
 800913e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009140:	6823      	ldr	r3, [r4, #0]
 8009142:	079f      	lsls	r7, r3, #30
 8009144:	d4ec      	bmi.n	8009120 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009146:	f7ff f987 	bl	8008458 <HAL_GetTick>
 800914a:	1b80      	subs	r0, r0, r6
 800914c:	2802      	cmp	r0, #2
 800914e:	d9f7      	bls.n	8009140 <HAL_RCC_OscConfig+0x118>
 8009150:	e7ab      	b.n	80090aa <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8009152:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009154:	f7ff f980 	bl	8008458 <HAL_GetTick>
 8009158:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	0798      	lsls	r0, r3, #30
 800915e:	f57f af6d 	bpl.w	800903c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009162:	f7ff f979 	bl	8008458 <HAL_GetTick>
 8009166:	1b80      	subs	r0, r0, r6
 8009168:	2802      	cmp	r0, #2
 800916a:	d9f6      	bls.n	800915a <HAL_RCC_OscConfig+0x132>
 800916c:	e79d      	b.n	80090aa <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800916e:	69aa      	ldr	r2, [r5, #24]
 8009170:	4e4a      	ldr	r6, [pc, #296]	@ (800929c <HAL_RCC_OscConfig+0x274>)
 8009172:	4b4b      	ldr	r3, [pc, #300]	@ (80092a0 <HAL_RCC_OscConfig+0x278>)
 8009174:	b1e2      	cbz	r2, 80091b0 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8009176:	2201      	movs	r2, #1
 8009178:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800917c:	f7ff f96c 	bl	8008458 <HAL_GetTick>
 8009180:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009182:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8009184:	079b      	lsls	r3, r3, #30
 8009186:	d50d      	bpl.n	80091a4 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009188:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800918c:	4b45      	ldr	r3, [pc, #276]	@ (80092a4 <HAL_RCC_OscConfig+0x27c>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	fbb3 f3f2 	udiv	r3, r3, r2
 8009194:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8009196:	bf00      	nop
  }
  while (Delay --);
 8009198:	9b01      	ldr	r3, [sp, #4]
 800919a:	1e5a      	subs	r2, r3, #1
 800919c:	9201      	str	r2, [sp, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1f9      	bne.n	8009196 <HAL_RCC_OscConfig+0x16e>
 80091a2:	e74f      	b.n	8009044 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091a4:	f7ff f958 	bl	8008458 <HAL_GetTick>
 80091a8:	1b00      	subs	r0, r0, r4
 80091aa:	2802      	cmp	r0, #2
 80091ac:	d9e9      	bls.n	8009182 <HAL_RCC_OscConfig+0x15a>
 80091ae:	e77c      	b.n	80090aa <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80091b0:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80091b4:	f7ff f950 	bl	8008458 <HAL_GetTick>
 80091b8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091ba:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80091bc:	079f      	lsls	r7, r3, #30
 80091be:	f57f af41 	bpl.w	8009044 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091c2:	f7ff f949 	bl	8008458 <HAL_GetTick>
 80091c6:	1b00      	subs	r0, r0, r4
 80091c8:	2802      	cmp	r0, #2
 80091ca:	d9f6      	bls.n	80091ba <HAL_RCC_OscConfig+0x192>
 80091cc:	e76d      	b.n	80090aa <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091ce:	4c33      	ldr	r4, [pc, #204]	@ (800929c <HAL_RCC_OscConfig+0x274>)
 80091d0:	69e3      	ldr	r3, [r4, #28]
 80091d2:	00d8      	lsls	r0, r3, #3
 80091d4:	d424      	bmi.n	8009220 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80091d6:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80091d8:	69e3      	ldr	r3, [r4, #28]
 80091da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091de:	61e3      	str	r3, [r4, #28]
 80091e0:	69e3      	ldr	r3, [r4, #28]
 80091e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091ea:	4e2f      	ldr	r6, [pc, #188]	@ (80092a8 <HAL_RCC_OscConfig+0x280>)
 80091ec:	6833      	ldr	r3, [r6, #0]
 80091ee:	05d9      	lsls	r1, r3, #23
 80091f0:	d518      	bpl.n	8009224 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091f2:	68eb      	ldr	r3, [r5, #12]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d126      	bne.n	8009246 <HAL_RCC_OscConfig+0x21e>
 80091f8:	6a23      	ldr	r3, [r4, #32]
 80091fa:	f043 0301 	orr.w	r3, r3, #1
 80091fe:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8009200:	f7ff f92a 	bl	8008458 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009204:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8009208:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800920a:	6a23      	ldr	r3, [r4, #32]
 800920c:	079b      	lsls	r3, r3, #30
 800920e:	d53f      	bpl.n	8009290 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8009210:	2f00      	cmp	r7, #0
 8009212:	f43f af1b 	beq.w	800904c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009216:	69e3      	ldr	r3, [r4, #28]
 8009218:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800921c:	61e3      	str	r3, [r4, #28]
 800921e:	e715      	b.n	800904c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8009220:	2700      	movs	r7, #0
 8009222:	e7e2      	b.n	80091ea <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009224:	6833      	ldr	r3, [r6, #0]
 8009226:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800922a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800922c:	f7ff f914 	bl	8008458 <HAL_GetTick>
 8009230:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009232:	6833      	ldr	r3, [r6, #0]
 8009234:	05da      	lsls	r2, r3, #23
 8009236:	d4dc      	bmi.n	80091f2 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009238:	f7ff f90e 	bl	8008458 <HAL_GetTick>
 800923c:	eba0 0008 	sub.w	r0, r0, r8
 8009240:	2864      	cmp	r0, #100	@ 0x64
 8009242:	d9f6      	bls.n	8009232 <HAL_RCC_OscConfig+0x20a>
 8009244:	e731      	b.n	80090aa <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009246:	b9ab      	cbnz	r3, 8009274 <HAL_RCC_OscConfig+0x24c>
 8009248:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800924a:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800924e:	f023 0301 	bic.w	r3, r3, #1
 8009252:	6223      	str	r3, [r4, #32]
 8009254:	6a23      	ldr	r3, [r4, #32]
 8009256:	f023 0304 	bic.w	r3, r3, #4
 800925a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800925c:	f7ff f8fc 	bl	8008458 <HAL_GetTick>
 8009260:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009262:	6a23      	ldr	r3, [r4, #32]
 8009264:	0798      	lsls	r0, r3, #30
 8009266:	d5d3      	bpl.n	8009210 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009268:	f7ff f8f6 	bl	8008458 <HAL_GetTick>
 800926c:	1b80      	subs	r0, r0, r6
 800926e:	4540      	cmp	r0, r8
 8009270:	d9f7      	bls.n	8009262 <HAL_RCC_OscConfig+0x23a>
 8009272:	e71a      	b.n	80090aa <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009274:	2b05      	cmp	r3, #5
 8009276:	6a23      	ldr	r3, [r4, #32]
 8009278:	d103      	bne.n	8009282 <HAL_RCC_OscConfig+0x25a>
 800927a:	f043 0304 	orr.w	r3, r3, #4
 800927e:	6223      	str	r3, [r4, #32]
 8009280:	e7ba      	b.n	80091f8 <HAL_RCC_OscConfig+0x1d0>
 8009282:	f023 0301 	bic.w	r3, r3, #1
 8009286:	6223      	str	r3, [r4, #32]
 8009288:	6a23      	ldr	r3, [r4, #32]
 800928a:	f023 0304 	bic.w	r3, r3, #4
 800928e:	e7b6      	b.n	80091fe <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009290:	f7ff f8e2 	bl	8008458 <HAL_GetTick>
 8009294:	1b80      	subs	r0, r0, r6
 8009296:	4540      	cmp	r0, r8
 8009298:	d9b7      	bls.n	800920a <HAL_RCC_OscConfig+0x1e2>
 800929a:	e706      	b.n	80090aa <HAL_RCC_OscConfig+0x82>
 800929c:	40021000 	.word	0x40021000
 80092a0:	42420000 	.word	0x42420000
 80092a4:	20000004 	.word	0x20000004
 80092a8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80092ac:	4c2a      	ldr	r4, [pc, #168]	@ (8009358 <HAL_RCC_OscConfig+0x330>)
 80092ae:	6862      	ldr	r2, [r4, #4]
 80092b0:	f002 020c 	and.w	r2, r2, #12
 80092b4:	2a08      	cmp	r2, #8
 80092b6:	d03e      	beq.n	8009336 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092b8:	2200      	movs	r2, #0
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	4b27      	ldr	r3, [pc, #156]	@ (800935c <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 80092be:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092c0:	d12c      	bne.n	800931c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80092c2:	f7ff f8c9 	bl	8008458 <HAL_GetTick>
 80092c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80092c8:	6823      	ldr	r3, [r4, #0]
 80092ca:	0199      	lsls	r1, r3, #6
 80092cc:	d420      	bmi.n	8009310 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80092ce:	6a2b      	ldr	r3, [r5, #32]
 80092d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092d4:	d105      	bne.n	80092e2 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80092d6:	6862      	ldr	r2, [r4, #4]
 80092d8:	68a9      	ldr	r1, [r5, #8]
 80092da:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80092de:	430a      	orrs	r2, r1
 80092e0:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80092e2:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80092e4:	6862      	ldr	r2, [r4, #4]
 80092e6:	430b      	orrs	r3, r1
 80092e8:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 80092ec:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80092ee:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80092f0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80092f2:	4b1a      	ldr	r3, [pc, #104]	@ (800935c <HAL_RCC_OscConfig+0x334>)
 80092f4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80092f6:	f7ff f8af 	bl	8008458 <HAL_GetTick>
 80092fa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	019a      	lsls	r2, r3, #6
 8009300:	f53f aea8 	bmi.w	8009054 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009304:	f7ff f8a8 	bl	8008458 <HAL_GetTick>
 8009308:	1b40      	subs	r0, r0, r5
 800930a:	2802      	cmp	r0, #2
 800930c:	d9f6      	bls.n	80092fc <HAL_RCC_OscConfig+0x2d4>
 800930e:	e6cc      	b.n	80090aa <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009310:	f7ff f8a2 	bl	8008458 <HAL_GetTick>
 8009314:	1b80      	subs	r0, r0, r6
 8009316:	2802      	cmp	r0, #2
 8009318:	d9d6      	bls.n	80092c8 <HAL_RCC_OscConfig+0x2a0>
 800931a:	e6c6      	b.n	80090aa <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800931c:	f7ff f89c 	bl	8008458 <HAL_GetTick>
 8009320:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	019b      	lsls	r3, r3, #6
 8009326:	f57f ae95 	bpl.w	8009054 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800932a:	f7ff f895 	bl	8008458 <HAL_GetTick>
 800932e:	1b40      	subs	r0, r0, r5
 8009330:	2802      	cmp	r0, #2
 8009332:	d9f6      	bls.n	8009322 <HAL_RCC_OscConfig+0x2fa>
 8009334:	e6b9      	b.n	80090aa <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009336:	2b01      	cmp	r3, #1
 8009338:	f43f aea2 	beq.w	8009080 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 800933c:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800933e:	6a2b      	ldr	r3, [r5, #32]
 8009340:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8009344:	429a      	cmp	r2, r3
 8009346:	f47f ae9b 	bne.w	8009080 <HAL_RCC_OscConfig+0x58>
 800934a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800934c:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009350:	1ac0      	subs	r0, r0, r3
 8009352:	bf18      	it	ne
 8009354:	2001      	movne	r0, #1
 8009356:	e6a9      	b.n	80090ac <HAL_RCC_OscConfig+0x84>
 8009358:	40021000 	.word	0x40021000
 800935c:	42420000 	.word	0x42420000

08009360 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8009360:	4a0d      	ldr	r2, [pc, #52]	@ (8009398 <HAL_RCC_GetSysClockFreq+0x38>)
 8009362:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8009364:	f003 010c 	and.w	r1, r3, #12
 8009368:	2908      	cmp	r1, #8
 800936a:	d112      	bne.n	8009392 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800936c:	480b      	ldr	r0, [pc, #44]	@ (800939c <HAL_RCC_GetSysClockFreq+0x3c>)
 800936e:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009372:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009374:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009376:	d509      	bpl.n	800938c <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009378:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800937a:	4a09      	ldr	r2, [pc, #36]	@ (80093a0 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800937c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009380:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009382:	4a08      	ldr	r2, [pc, #32]	@ (80093a4 <HAL_RCC_GetSysClockFreq+0x44>)
 8009384:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009386:	fbb0 f0f3 	udiv	r0, r0, r3
 800938a:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800938c:	4b06      	ldr	r3, [pc, #24]	@ (80093a8 <HAL_RCC_GetSysClockFreq+0x48>)
 800938e:	4358      	muls	r0, r3
 8009390:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8009392:	4803      	ldr	r0, [pc, #12]	@ (80093a0 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	40021000 	.word	0x40021000
 800939c:	0800f992 	.word	0x0800f992
 80093a0:	007a1200 	.word	0x007a1200
 80093a4:	0800f990 	.word	0x0800f990
 80093a8:	003d0900 	.word	0x003d0900

080093ac <HAL_RCC_ClockConfig>:
{
 80093ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093b0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80093b2:	4604      	mov	r4, r0
 80093b4:	b910      	cbnz	r0, 80093bc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80093b6:	2001      	movs	r0, #1
}
 80093b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80093bc:	4a44      	ldr	r2, [pc, #272]	@ (80094d0 <HAL_RCC_ClockConfig+0x124>)
 80093be:	6813      	ldr	r3, [r2, #0]
 80093c0:	f003 0307 	and.w	r3, r3, #7
 80093c4:	428b      	cmp	r3, r1
 80093c6:	d328      	bcc.n	800941a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80093c8:	6821      	ldr	r1, [r4, #0]
 80093ca:	078e      	lsls	r6, r1, #30
 80093cc:	d430      	bmi.n	8009430 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80093ce:	07ca      	lsls	r2, r1, #31
 80093d0:	d443      	bmi.n	800945a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80093d2:	4a3f      	ldr	r2, [pc, #252]	@ (80094d0 <HAL_RCC_ClockConfig+0x124>)
 80093d4:	6813      	ldr	r3, [r2, #0]
 80093d6:	f003 0307 	and.w	r3, r3, #7
 80093da:	42ab      	cmp	r3, r5
 80093dc:	d865      	bhi.n	80094aa <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093de:	6822      	ldr	r2, [r4, #0]
 80093e0:	4d3c      	ldr	r5, [pc, #240]	@ (80094d4 <HAL_RCC_ClockConfig+0x128>)
 80093e2:	f012 0f04 	tst.w	r2, #4
 80093e6:	d16c      	bne.n	80094c2 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093e8:	0713      	lsls	r3, r2, #28
 80093ea:	d506      	bpl.n	80093fa <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80093ec:	686b      	ldr	r3, [r5, #4]
 80093ee:	6922      	ldr	r2, [r4, #16]
 80093f0:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80093f4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80093f8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80093fa:	f7ff ffb1 	bl	8009360 <HAL_RCC_GetSysClockFreq>
 80093fe:	686b      	ldr	r3, [r5, #4]
 8009400:	4a35      	ldr	r2, [pc, #212]	@ (80094d8 <HAL_RCC_ClockConfig+0x12c>)
 8009402:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009406:	5cd3      	ldrb	r3, [r2, r3]
 8009408:	40d8      	lsrs	r0, r3
 800940a:	4b34      	ldr	r3, [pc, #208]	@ (80094dc <HAL_RCC_ClockConfig+0x130>)
 800940c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800940e:	4b34      	ldr	r3, [pc, #208]	@ (80094e0 <HAL_RCC_ClockConfig+0x134>)
 8009410:	6818      	ldr	r0, [r3, #0]
 8009412:	f7fe ffdf 	bl	80083d4 <HAL_InitTick>
  return HAL_OK;
 8009416:	2000      	movs	r0, #0
 8009418:	e7ce      	b.n	80093b8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800941a:	6813      	ldr	r3, [r2, #0]
 800941c:	f023 0307 	bic.w	r3, r3, #7
 8009420:	430b      	orrs	r3, r1
 8009422:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009424:	6813      	ldr	r3, [r2, #0]
 8009426:	f003 0307 	and.w	r3, r3, #7
 800942a:	428b      	cmp	r3, r1
 800942c:	d1c3      	bne.n	80093b6 <HAL_RCC_ClockConfig+0xa>
 800942e:	e7cb      	b.n	80093c8 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009430:	4b28      	ldr	r3, [pc, #160]	@ (80094d4 <HAL_RCC_ClockConfig+0x128>)
 8009432:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009436:	bf1e      	ittt	ne
 8009438:	685a      	ldrne	r2, [r3, #4]
 800943a:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 800943e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009440:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009442:	bf42      	ittt	mi
 8009444:	685a      	ldrmi	r2, [r3, #4]
 8009446:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 800944a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800944c:	685a      	ldr	r2, [r3, #4]
 800944e:	68a0      	ldr	r0, [r4, #8]
 8009450:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8009454:	4302      	orrs	r2, r0
 8009456:	605a      	str	r2, [r3, #4]
 8009458:	e7b9      	b.n	80093ce <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800945a:	6862      	ldr	r2, [r4, #4]
 800945c:	4e1d      	ldr	r6, [pc, #116]	@ (80094d4 <HAL_RCC_ClockConfig+0x128>)
 800945e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009460:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009462:	d11a      	bne.n	800949a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009464:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009468:	d0a5      	beq.n	80093b6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800946a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800946c:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009470:	f023 0303 	bic.w	r3, r3, #3
 8009474:	4313      	orrs	r3, r2
 8009476:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8009478:	f7fe ffee 	bl	8008458 <HAL_GetTick>
 800947c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800947e:	6873      	ldr	r3, [r6, #4]
 8009480:	6862      	ldr	r2, [r4, #4]
 8009482:	f003 030c 	and.w	r3, r3, #12
 8009486:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800948a:	d0a2      	beq.n	80093d2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800948c:	f7fe ffe4 	bl	8008458 <HAL_GetTick>
 8009490:	1bc0      	subs	r0, r0, r7
 8009492:	4540      	cmp	r0, r8
 8009494:	d9f3      	bls.n	800947e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8009496:	2003      	movs	r0, #3
 8009498:	e78e      	b.n	80093b8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800949a:	2a02      	cmp	r2, #2
 800949c:	d102      	bne.n	80094a4 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800949e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80094a2:	e7e1      	b.n	8009468 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094a4:	f013 0f02 	tst.w	r3, #2
 80094a8:	e7de      	b.n	8009468 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094aa:	6813      	ldr	r3, [r2, #0]
 80094ac:	f023 0307 	bic.w	r3, r3, #7
 80094b0:	432b      	orrs	r3, r5
 80094b2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80094b4:	6813      	ldr	r3, [r2, #0]
 80094b6:	f003 0307 	and.w	r3, r3, #7
 80094ba:	42ab      	cmp	r3, r5
 80094bc:	f47f af7b 	bne.w	80093b6 <HAL_RCC_ClockConfig+0xa>
 80094c0:	e78d      	b.n	80093de <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80094c2:	686b      	ldr	r3, [r5, #4]
 80094c4:	68e1      	ldr	r1, [r4, #12]
 80094c6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80094ca:	430b      	orrs	r3, r1
 80094cc:	606b      	str	r3, [r5, #4]
 80094ce:	e78b      	b.n	80093e8 <HAL_RCC_ClockConfig+0x3c>
 80094d0:	40022000 	.word	0x40022000
 80094d4:	40021000 	.word	0x40021000
 80094d8:	0800f953 	.word	0x0800f953
 80094dc:	20000004 	.word	0x20000004
 80094e0:	2000000c 	.word	0x2000000c

080094e4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80094e4:	4b04      	ldr	r3, [pc, #16]	@ (80094f8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80094e6:	4a05      	ldr	r2, [pc, #20]	@ (80094fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80094ee:	5cd3      	ldrb	r3, [r2, r3]
 80094f0:	4a03      	ldr	r2, [pc, #12]	@ (8009500 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80094f2:	6810      	ldr	r0, [r2, #0]
}
 80094f4:	40d8      	lsrs	r0, r3
 80094f6:	4770      	bx	lr
 80094f8:	40021000 	.word	0x40021000
 80094fc:	0800f94b 	.word	0x0800f94b
 8009500:	20000004 	.word	0x20000004

08009504 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009504:	4b04      	ldr	r3, [pc, #16]	@ (8009518 <HAL_RCC_GetPCLK2Freq+0x14>)
 8009506:	4a05      	ldr	r2, [pc, #20]	@ (800951c <HAL_RCC_GetPCLK2Freq+0x18>)
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800950e:	5cd3      	ldrb	r3, [r2, r3]
 8009510:	4a03      	ldr	r2, [pc, #12]	@ (8009520 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009512:	6810      	ldr	r0, [r2, #0]
}
 8009514:	40d8      	lsrs	r0, r3
 8009516:	4770      	bx	lr
 8009518:	40021000 	.word	0x40021000
 800951c:	0800f94b 	.word	0x0800f94b
 8009520:	20000004 	.word	0x20000004

08009524 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009524:	6803      	ldr	r3, [r0, #0]
{
 8009526:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800952a:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800952c:	07d8      	lsls	r0, r3, #31
 800952e:	d521      	bpl.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009530:	4c36      	ldr	r4, [pc, #216]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009532:	69e3      	ldr	r3, [r4, #28]
 8009534:	00d9      	lsls	r1, r3, #3
 8009536:	d42b      	bmi.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8009538:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800953a:	69e3      	ldr	r3, [r4, #28]
 800953c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009540:	61e3      	str	r3, [r4, #28]
 8009542:	69e3      	ldr	r3, [r4, #28]
 8009544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009548:	9301      	str	r3, [sp, #4]
 800954a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800954c:	4f30      	ldr	r7, [pc, #192]	@ (8009610 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	05da      	lsls	r2, r3, #23
 8009552:	d51f      	bpl.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009554:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009556:	686a      	ldr	r2, [r5, #4]
 8009558:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800955c:	d12e      	bne.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800955e:	6a23      	ldr	r3, [r4, #32]
 8009560:	686a      	ldr	r2, [r5, #4]
 8009562:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009566:	4313      	orrs	r3, r2
 8009568:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800956a:	b11e      	cbz	r6, 8009574 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800956c:	69e3      	ldr	r3, [r4, #28]
 800956e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009572:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009574:	682a      	ldr	r2, [r5, #0]
 8009576:	0791      	lsls	r1, r2, #30
 8009578:	d506      	bpl.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800957a:	4924      	ldr	r1, [pc, #144]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800957c:	68a8      	ldr	r0, [r5, #8]
 800957e:	684b      	ldr	r3, [r1, #4]
 8009580:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8009584:	4303      	orrs	r3, r0
 8009586:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009588:	06d3      	lsls	r3, r2, #27
 800958a:	d436      	bmi.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800958c:	2000      	movs	r0, #0
 800958e:	e012      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8009590:	2600      	movs	r6, #0
 8009592:	e7db      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800959a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800959c:	f7fe ff5c 	bl	8008458 <HAL_GetTick>
 80095a0:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	05db      	lsls	r3, r3, #23
 80095a6:	d4d5      	bmi.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095a8:	f7fe ff56 	bl	8008458 <HAL_GetTick>
 80095ac:	eba0 0008 	sub.w	r0, r0, r8
 80095b0:	2864      	cmp	r0, #100	@ 0x64
 80095b2:	d9f6      	bls.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 80095b4:	2003      	movs	r0, #3
}
 80095b6:	b002      	add	sp, #8
 80095b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80095bc:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d0cc      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80095c4:	2001      	movs	r0, #1
 80095c6:	4a13      	ldr	r2, [pc, #76]	@ (8009614 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80095c8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80095ca:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80095ce:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80095d0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80095d4:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80095d6:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 80095da:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80095dc:	d5bf      	bpl.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 80095de:	f7fe ff3b 	bl	8008458 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095e2:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80095e6:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095e8:	6a23      	ldr	r3, [r4, #32]
 80095ea:	0798      	lsls	r0, r3, #30
 80095ec:	d4b7      	bmi.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095ee:	f7fe ff33 	bl	8008458 <HAL_GetTick>
 80095f2:	1bc0      	subs	r0, r0, r7
 80095f4:	4540      	cmp	r0, r8
 80095f6:	d9f7      	bls.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 80095f8:	e7dc      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80095fa:	4a04      	ldr	r2, [pc, #16]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80095fc:	68e9      	ldr	r1, [r5, #12]
 80095fe:	6853      	ldr	r3, [r2, #4]
 8009600:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8009604:	430b      	orrs	r3, r1
 8009606:	6053      	str	r3, [r2, #4]
 8009608:	e7c0      	b.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x68>
 800960a:	bf00      	nop
 800960c:	40021000 	.word	0x40021000
 8009610:	40007000 	.word	0x40007000
 8009614:	42420000 	.word	0x42420000

08009618 <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8009618:	2802      	cmp	r0, #2
{
 800961a:	b508      	push	{r3, lr}
  switch (PeriphClk)
 800961c:	d044      	beq.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 800961e:	2810      	cmp	r0, #16
 8009620:	d003      	beq.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8009622:	2801      	cmp	r0, #1
 8009624:	d022      	beq.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 8009626:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8009628:	e034      	b.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      temp_reg = RCC->CFGR;
 800962a:	4b25      	ldr	r3, [pc, #148]	@ (80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800962c:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800962e:	6818      	ldr	r0, [r3, #0]
 8009630:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 8009634:	d02e      	beq.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009636:	f3c2 4183 	ubfx	r1, r2, #18, #4
 800963a:	4822      	ldr	r0, [pc, #136]	@ (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800963c:	03d2      	lsls	r2, r2, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800963e:	bf48      	it	mi
 8009640:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009642:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009644:	bf41      	itttt	mi
 8009646:	4920      	ldrmi	r1, [pc, #128]	@ (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009648:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 800964c:	5c89      	ldrbmi	r1, [r1, r2]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800964e:	4a1f      	ldrmi	r2, [pc, #124]	@ (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8009650:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8009652:	bf4c      	ite	mi
 8009654:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009658:	4a1d      	ldrpl	r2, [pc, #116]	@ (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800965a:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800965c:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8009660:	d418      	bmi.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = (pllclk * 2) / 3;
 8009662:	2303      	movs	r3, #3
 8009664:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8009666:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800966a:	e013      	b.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800966c:	f240 3102 	movw	r1, #770	@ 0x302
      temp_reg = RCC->BDCR;
 8009670:	4a13      	ldr	r2, [pc, #76]	@ (80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8009672:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8009674:	4019      	ands	r1, r3
 8009676:	f5b1 7f81 	cmp.w	r1, #258	@ 0x102
 800967a:	d01e      	beq.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800967c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009684:	d107      	bne.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSI_VALUE;
 8009686:	f649 4340 	movw	r3, #40000	@ 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800968a:	6a50      	ldr	r0, [r2, #36]	@ 0x24
        frequency = LSI_VALUE;
 800968c:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8009690:	bf18      	it	ne
 8009692:	4618      	movne	r0, r3
}
 8009694:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8009696:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800969a:	d1c4      	bne.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 800969c:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 800969e:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80096a2:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80096a6:	e7f3      	b.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80096a8:	f7ff ff2c 	bl	8009504 <HAL_RCC_GetPCLK2Freq>
 80096ac:	4b04      	ldr	r3, [pc, #16]	@ (80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80096b4:	3301      	adds	r3, #1
 80096b6:	005b      	lsls	r3, r3, #1
 80096b8:	e7d5      	b.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 80096ba:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80096be:	e7e9      	b.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80096c0:	40021000 	.word	0x40021000
 80096c4:	0800f9a4 	.word	0x0800f9a4
 80096c8:	0800f9a2 	.word	0x0800f9a2
 80096cc:	007a1200 	.word	0x007a1200
 80096d0:	003d0900 	.word	0x003d0900

080096d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80096d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80096d8:	461f      	mov	r7, r3
 80096da:	4689      	mov	r9, r1
 80096dc:	4690      	mov	r8, r2
 80096de:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80096e0:	f7fe feba 	bl	8008458 <HAL_GetTick>
 80096e4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80096e6:	443d      	add	r5, r7
 80096e8:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80096ea:	f7fe feb5 	bl	8008458 <HAL_GetTick>
 80096ee:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80096f0:	4b25      	ldr	r3, [pc, #148]	@ (8009788 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 80096f2:	681e      	ldr	r6, [r3, #0]
 80096f4:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 80096f8:	436e      	muls	r6, r5
 80096fa:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80096fc:	6822      	ldr	r2, [r4, #0]
 80096fe:	6893      	ldr	r3, [r2, #8]
 8009700:	ea39 0303 	bics.w	r3, r9, r3
 8009704:	bf0c      	ite	eq
 8009706:	2301      	moveq	r3, #1
 8009708:	2300      	movne	r3, #0
 800970a:	4543      	cmp	r3, r8
 800970c:	d101      	bne.n	8009712 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 800970e:	2000      	movs	r0, #0
 8009710:	e02e      	b.n	8009770 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8009712:	1c7b      	adds	r3, r7, #1
 8009714:	d0f3      	beq.n	80096fe <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009716:	f7fe fe9f 	bl	8008458 <HAL_GetTick>
 800971a:	eba0 000a 	sub.w	r0, r0, sl
 800971e:	42a8      	cmp	r0, r5
 8009720:	d329      	bcc.n	8009776 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009722:	6823      	ldr	r3, [r4, #0]
 8009724:	685a      	ldr	r2, [r3, #4]
 8009726:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800972a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800972c:	6862      	ldr	r2, [r4, #4]
 800972e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8009732:	d10a      	bne.n	800974a <SPI_WaitFlagStateUntilTimeout+0x76>
 8009734:	68a2      	ldr	r2, [r4, #8]
 8009736:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800973a:	d002      	beq.n	8009742 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800973c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8009740:	d103      	bne.n	800974a <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009748:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800974a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800974c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8009750:	d107      	bne.n	8009762 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009758:	601a      	str	r2, [r3, #0]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009760:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009762:	2301      	movs	r3, #1
 8009764:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009768:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800976a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800976c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8009770:	b002      	add	sp, #8
 8009772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 8009776:	9a01      	ldr	r2, [sp, #4]
      count--;
 8009778:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 800977a:	2a00      	cmp	r2, #0
      count--;
 800977c:	f103 33ff 	add.w	r3, r3, #4294967295
 8009780:	bf08      	it	eq
 8009782:	4615      	moveq	r5, r2
 8009784:	9301      	str	r3, [sp, #4]
 8009786:	e7b9      	b.n	80096fc <SPI_WaitFlagStateUntilTimeout+0x28>
 8009788:	20000004 	.word	0x20000004

0800978c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800978c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800978e:	460b      	mov	r3, r1
 8009790:	9200      	str	r2, [sp, #0]
{
 8009792:	460d      	mov	r5, r1
 8009794:	4616      	mov	r6, r2
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009796:	2102      	movs	r1, #2
 8009798:	2201      	movs	r2, #1
{
 800979a:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800979c:	f7ff ff9a 	bl	80096d4 <SPI_WaitFlagStateUntilTimeout>
 80097a0:	4602      	mov	r2, r0
 80097a2:	b128      	cbz	r0, 80097b0 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097a4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 80097a6:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097a8:	f043 0320 	orr.w	r3, r3, #32
 80097ac:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 80097ae:	e007      	b.n	80097c0 <SPI_EndRxTxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80097b0:	462b      	mov	r3, r5
 80097b2:	2180      	movs	r1, #128	@ 0x80
 80097b4:	4620      	mov	r0, r4
 80097b6:	9600      	str	r6, [sp, #0]
 80097b8:	f7ff ff8c 	bl	80096d4 <SPI_WaitFlagStateUntilTimeout>
 80097bc:	2800      	cmp	r0, #0
 80097be:	d1f1      	bne.n	80097a4 <SPI_EndRxTxTransaction+0x18>
  }
  return HAL_OK;
}
 80097c0:	b002      	add	sp, #8
 80097c2:	bd70      	pop	{r4, r5, r6, pc}

080097c4 <HAL_SPI_Init>:
{
 80097c4:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80097c6:	4604      	mov	r4, r0
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d051      	beq.n	8009870 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80097cc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d14a      	bne.n	8009868 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80097d2:	6842      	ldr	r2, [r0, #4]
 80097d4:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80097d8:	d000      	beq.n	80097dc <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80097da:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097dc:	2300      	movs	r3, #0
 80097de:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80097e0:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80097e4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80097e8:	b923      	cbnz	r3, 80097f4 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 80097ea:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80097ec:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 80097f0:	f7fd ff40 	bl	8007674 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80097f4:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80097f6:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80097f8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 80097fc:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80097fe:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8009800:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009804:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009806:	6863      	ldr	r3, [r4, #4]
 8009808:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 800980c:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8009810:	4303      	orrs	r3, r0
 8009812:	68e0      	ldr	r0, [r4, #12]
 8009814:	69a1      	ldr	r1, [r4, #24]
 8009816:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 800981a:	4303      	orrs	r3, r0
 800981c:	6920      	ldr	r0, [r4, #16]
 800981e:	f000 0002 	and.w	r0, r0, #2
 8009822:	4303      	orrs	r3, r0
 8009824:	6960      	ldr	r0, [r4, #20]
 8009826:	f000 0001 	and.w	r0, r0, #1
 800982a:	4303      	orrs	r3, r0
 800982c:	f401 7000 	and.w	r0, r1, #512	@ 0x200
 8009830:	4303      	orrs	r3, r0
 8009832:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009834:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009836:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 800983a:	4303      	orrs	r3, r0
 800983c:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800983e:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009842:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 8009846:	4303      	orrs	r3, r0
 8009848:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800984a:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 800984e:	4303      	orrs	r3, r0
 8009850:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009852:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009854:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009856:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009858:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800985c:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800985e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009860:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009862:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8009866:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009868:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800986a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800986e:	e7b5      	b.n	80097dc <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8009870:	2001      	movs	r0, #1
 8009872:	e7f8      	b.n	8009866 <HAL_SPI_Init+0xa2>

08009874 <HAL_SPI_TransmitReceive>:
{
 8009874:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009878:	4604      	mov	r4, r0
 800987a:	460d      	mov	r5, r1
 800987c:	4691      	mov	r9, r2
 800987e:	461e      	mov	r6, r3
 8009880:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8009884:	f7fe fde8 	bl	8008458 <HAL_GetTick>
  tmp_state           = hspi->State;
 8009888:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 800988c:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800988e:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8009890:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8009892:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009894:	d00a      	beq.n	80098ac <HAL_SPI_TransmitReceive+0x38>
 8009896:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800989a:	f040 80e5 	bne.w	8009a68 <HAL_SPI_TransmitReceive+0x1f4>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800989e:	68a3      	ldr	r3, [r4, #8]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f040 80e1 	bne.w	8009a68 <HAL_SPI_TransmitReceive+0x1f4>
 80098a6:	2904      	cmp	r1, #4
 80098a8:	f040 80de 	bne.w	8009a68 <HAL_SPI_TransmitReceive+0x1f4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80098ac:	2d00      	cmp	r5, #0
 80098ae:	d04b      	beq.n	8009948 <HAL_SPI_TransmitReceive+0xd4>
 80098b0:	f1b9 0f00 	cmp.w	r9, #0
 80098b4:	d048      	beq.n	8009948 <HAL_SPI_TransmitReceive+0xd4>
 80098b6:	2e00      	cmp	r6, #0
 80098b8:	d046      	beq.n	8009948 <HAL_SPI_TransmitReceive+0xd4>
  __HAL_LOCK(hspi);
 80098ba:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80098be:	2b01      	cmp	r3, #1
 80098c0:	f000 80d2 	beq.w	8009a68 <HAL_SPI_TransmitReceive+0x1f4>
 80098c4:	2301      	movs	r3, #1
 80098c6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80098ca:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80098ce:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80098d2:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80098d4:	bf1c      	itt	ne
 80098d6:	2305      	movne	r3, #5
 80098d8:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80098dc:	2300      	movs	r3, #0
 80098de:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 80098e0:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098e4:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80098e6:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 80098e8:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098ea:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 80098ec:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098ee:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 80098f0:	bf58      	it	pl
 80098f2:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80098f4:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 80098f6:	bf58      	it	pl
 80098f8:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 80098fc:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 80098fe:	bf58      	it	pl
 8009900:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009902:	68e1      	ldr	r1, [r4, #12]
 8009904:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8009908:	d155      	bne.n	80099b6 <HAL_SPI_TransmitReceive+0x142>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800990a:	b10a      	cbz	r2, 8009910 <HAL_SPI_TransmitReceive+0x9c>
 800990c:	2e01      	cmp	r6, #1
 800990e:	d107      	bne.n	8009920 <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009910:	f835 2b02 	ldrh.w	r2, [r5], #2
 8009914:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8009916:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009918:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800991a:	3b01      	subs	r3, #1
 800991c:	b29b      	uxth	r3, r3
 800991e:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8009920:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009922:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8009924:	b29b      	uxth	r3, r3
 8009926:	b98b      	cbnz	r3, 800994c <HAL_SPI_TransmitReceive+0xd8>
 8009928:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800992a:	b29b      	uxth	r3, r3
 800992c:	b973      	cbnz	r3, 800994c <HAL_SPI_TransmitReceive+0xd8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800992e:	463a      	mov	r2, r7
 8009930:	4641      	mov	r1, r8
 8009932:	4620      	mov	r0, r4
 8009934:	f7ff ff2a 	bl	800978c <SPI_EndRxTxTransaction>
 8009938:	2800      	cmp	r0, #0
 800993a:	f000 8081 	beq.w	8009a40 <HAL_SPI_TransmitReceive+0x1cc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800993e:	2320      	movs	r3, #32
 8009940:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8009942:	2300      	movs	r3, #0
 8009944:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8009948:	2001      	movs	r0, #1
 800994a:	e031      	b.n	80099b0 <HAL_SPI_TransmitReceive+0x13c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800994c:	6821      	ldr	r1, [r4, #0]
 800994e:	688b      	ldr	r3, [r1, #8]
 8009950:	079a      	lsls	r2, r3, #30
 8009952:	d50d      	bpl.n	8009970 <HAL_SPI_TransmitReceive+0xfc>
 8009954:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8009956:	b29b      	uxth	r3, r3
 8009958:	b153      	cbz	r3, 8009970 <HAL_SPI_TransmitReceive+0xfc>
 800995a:	b145      	cbz	r5, 800996e <HAL_SPI_TransmitReceive+0xfa>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800995c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800995e:	f833 2b02 	ldrh.w	r2, [r3], #2
 8009962:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009964:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8009966:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8009968:	3b01      	subs	r3, #1
 800996a:	b29b      	uxth	r3, r3
 800996c:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 800996e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009970:	688a      	ldr	r2, [r1, #8]
 8009972:	f012 0201 	ands.w	r2, r2, #1
 8009976:	d00c      	beq.n	8009992 <HAL_SPI_TransmitReceive+0x11e>
 8009978:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800997a:	b29b      	uxth	r3, r3
 800997c:	b14b      	cbz	r3, 8009992 <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 800997e:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009980:	68c9      	ldr	r1, [r1, #12]
 8009982:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009984:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009988:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800998a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800998c:	3b01      	subs	r3, #1
 800998e:	b29b      	uxth	r3, r3
 8009990:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009992:	f7fe fd61 	bl	8008458 <HAL_GetTick>
 8009996:	1bc0      	subs	r0, r0, r7
 8009998:	4540      	cmp	r0, r8
 800999a:	d3c2      	bcc.n	8009922 <HAL_SPI_TransmitReceive+0xae>
 800999c:	f1b8 3fff 	cmp.w	r8, #4294967295
 80099a0:	d0bf      	beq.n	8009922 <HAL_SPI_TransmitReceive+0xae>
        hspi->State = HAL_SPI_STATE_READY;
 80099a2:	2301      	movs	r3, #1
 80099a4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80099a8:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80099aa:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80099ac:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80099b0:	b003      	add	sp, #12
 80099b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099b6:	b10a      	cbz	r2, 80099bc <HAL_SPI_TransmitReceive+0x148>
 80099b8:	2e01      	cmp	r6, #1
 80099ba:	d108      	bne.n	80099ce <HAL_SPI_TransmitReceive+0x15a>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80099bc:	782a      	ldrb	r2, [r5, #0]
 80099be:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80099c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80099c2:	3301      	adds	r3, #1
 80099c4:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80099c6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80099c8:	3b01      	subs	r3, #1
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80099ce:	2501      	movs	r5, #1
 80099d0:	e02d      	b.n	8009a2e <HAL_SPI_TransmitReceive+0x1ba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80099d2:	6822      	ldr	r2, [r4, #0]
 80099d4:	6893      	ldr	r3, [r2, #8]
 80099d6:	079b      	lsls	r3, r3, #30
 80099d8:	d50e      	bpl.n	80099f8 <HAL_SPI_TransmitReceive+0x184>
 80099da:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80099dc:	b29b      	uxth	r3, r3
 80099de:	b15b      	cbz	r3, 80099f8 <HAL_SPI_TransmitReceive+0x184>
 80099e0:	b14d      	cbz	r5, 80099f6 <HAL_SPI_TransmitReceive+0x182>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80099e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80099e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80099ea:	3301      	adds	r3, #1
 80099ec:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80099ee:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80099f0:	3b01      	subs	r3, #1
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80099f6:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80099f8:	6822      	ldr	r2, [r4, #0]
 80099fa:	6891      	ldr	r1, [r2, #8]
 80099fc:	f011 0101 	ands.w	r1, r1, #1
 8009a00:	d00d      	beq.n	8009a1e <HAL_SPI_TransmitReceive+0x1aa>
 8009a02:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	b153      	cbz	r3, 8009a1e <HAL_SPI_TransmitReceive+0x1aa>
        txallowed = 1U;
 8009a08:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009a0a:	68d2      	ldr	r2, [r2, #12]
 8009a0c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009a0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009a10:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009a12:	3301      	adds	r3, #1
 8009a14:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8009a16:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009a1e:	f7fe fd1b 	bl	8008458 <HAL_GetTick>
 8009a22:	1bc0      	subs	r0, r0, r7
 8009a24:	4540      	cmp	r0, r8
 8009a26:	d302      	bcc.n	8009a2e <HAL_SPI_TransmitReceive+0x1ba>
 8009a28:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009a2c:	d1b9      	bne.n	80099a2 <HAL_SPI_TransmitReceive+0x12e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a2e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1cd      	bne.n	80099d2 <HAL_SPI_TransmitReceive+0x15e>
 8009a36:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1c9      	bne.n	80099d2 <HAL_SPI_TransmitReceive+0x15e>
 8009a3e:	e776      	b.n	800992e <HAL_SPI_TransmitReceive+0xba>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009a40:	68a3      	ldr	r3, [r4, #8]
 8009a42:	b933      	cbnz	r3, 8009a52 <HAL_SPI_TransmitReceive+0x1de>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a44:	9301      	str	r3, [sp, #4]
 8009a46:	6823      	ldr	r3, [r4, #0]
 8009a48:	68da      	ldr	r2, [r3, #12]
 8009a4a:	9201      	str	r2, [sp, #4]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	9301      	str	r3, [sp, #4]
 8009a50:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8009a52:	2301      	movs	r3, #1
 8009a54:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8009a58:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a5a:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 8009a5c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a60:	1ac0      	subs	r0, r0, r3
 8009a62:	bf18      	it	ne
 8009a64:	2001      	movne	r0, #1
 8009a66:	e7a3      	b.n	80099b0 <HAL_SPI_TransmitReceive+0x13c>
    return HAL_BUSY;
 8009a68:	2002      	movs	r0, #2
 8009a6a:	e7a1      	b.n	80099b0 <HAL_SPI_TransmitReceive+0x13c>

08009a6c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a6c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d120      	bne.n	8009ab6 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a74:	2302      	movs	r3, #2
 8009a76:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a7a:	6803      	ldr	r3, [r0, #0]
 8009a7c:	68da      	ldr	r2, [r3, #12]
 8009a7e:	f042 0201 	orr.w	r2, r2, #1
 8009a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a84:	4a0d      	ldr	r2, [pc, #52]	@ (8009abc <HAL_TIM_Base_Start_IT+0x50>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d00a      	beq.n	8009aa0 <HAL_TIM_Base_Start_IT+0x34>
 8009a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a8e:	d007      	beq.n	8009aa0 <HAL_TIM_Base_Start_IT+0x34>
 8009a90:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d003      	beq.n	8009aa0 <HAL_TIM_Base_Start_IT+0x34>
 8009a98:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d104      	bne.n	8009aaa <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009aa0:	689a      	ldr	r2, [r3, #8]
 8009aa2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aa6:	2a06      	cmp	r2, #6
 8009aa8:	d003      	beq.n	8009ab2 <HAL_TIM_Base_Start_IT+0x46>
    {
      __HAL_TIM_ENABLE(htim);
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	f042 0201 	orr.w	r2, r2, #1
 8009ab0:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	4770      	bx	lr
    return HAL_ERROR;
 8009ab6:	2001      	movs	r0, #1
}
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	40012c00 	.word	0x40012c00

08009ac0 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8009ac0:	4770      	bx	lr

08009ac2 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8009ac2:	4770      	bx	lr

08009ac4 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8009ac4:	4770      	bx	lr

08009ac6 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8009ac6:	4770      	bx	lr

08009ac8 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8009ac8:	6803      	ldr	r3, [r0, #0]
{
 8009aca:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8009acc:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009ace:	691e      	ldr	r6, [r3, #16]
{
 8009ad0:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009ad2:	07b1      	lsls	r1, r6, #30
 8009ad4:	d50d      	bpl.n	8009af2 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009ad6:	07aa      	lsls	r2, r5, #30
 8009ad8:	d50b      	bpl.n	8009af2 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009ada:	f06f 0202 	mvn.w	r2, #2
 8009ade:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	079b      	lsls	r3, r3, #30
 8009ae8:	d069      	beq.n	8009bbe <HAL_TIM_IRQHandler+0xf6>
          HAL_TIM_IC_CaptureCallback(htim);
 8009aea:	f7ff ffea 	bl	8009ac2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aee:	2300      	movs	r3, #0
 8009af0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009af2:	0771      	lsls	r1, r6, #29
 8009af4:	d510      	bpl.n	8009b18 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009af6:	076a      	lsls	r2, r5, #29
 8009af8:	d50e      	bpl.n	8009b18 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009afa:	f06f 0204 	mvn.w	r2, #4
 8009afe:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8009b00:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009b02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b04:	2202      	movs	r2, #2
 8009b06:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8009b0e:	d05c      	beq.n	8009bca <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8009b10:	f7ff ffd7 	bl	8009ac2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b14:	2300      	movs	r3, #0
 8009b16:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009b18:	0733      	lsls	r3, r6, #28
 8009b1a:	d50f      	bpl.n	8009b3c <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009b1c:	0728      	lsls	r0, r5, #28
 8009b1e:	d50d      	bpl.n	8009b3c <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009b20:	f06f 0208 	mvn.w	r2, #8
 8009b24:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8009b26:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b2a:	2204      	movs	r2, #4
 8009b2c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b2e:	69db      	ldr	r3, [r3, #28]
 8009b30:	0799      	lsls	r1, r3, #30
 8009b32:	d050      	beq.n	8009bd6 <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 8009b34:	f7ff ffc5 	bl	8009ac2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009b3c:	06f2      	lsls	r2, r6, #27
 8009b3e:	d510      	bpl.n	8009b62 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009b40:	06eb      	lsls	r3, r5, #27
 8009b42:	d50e      	bpl.n	8009b62 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009b44:	f06f 0210 	mvn.w	r2, #16
 8009b48:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8009b4a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b4e:	2208      	movs	r2, #8
 8009b50:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b52:	69db      	ldr	r3, [r3, #28]
 8009b54:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8009b58:	d043      	beq.n	8009be2 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 8009b5a:	f7ff ffb2 	bl	8009ac2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009b62:	07f0      	lsls	r0, r6, #31
 8009b64:	d508      	bpl.n	8009b78 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009b66:	07e9      	lsls	r1, r5, #31
 8009b68:	d506      	bpl.n	8009b78 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009b6a:	f06f 0201 	mvn.w	r2, #1
 8009b6e:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b70:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009b72:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b74:	f7fd ff10 	bl	8007998 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009b78:	0632      	lsls	r2, r6, #24
 8009b7a:	d508      	bpl.n	8009b8e <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b7c:	062b      	lsls	r3, r5, #24
 8009b7e:	d506      	bpl.n	8009b8e <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009b80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009b84:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_BreakCallback(htim);
 8009b86:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009b88:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009b8a:	f000 f970 	bl	8009e6e <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009b8e:	0670      	lsls	r0, r6, #25
 8009b90:	d508      	bpl.n	8009ba4 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009b92:	0669      	lsls	r1, r5, #25
 8009b94:	d506      	bpl.n	8009ba4 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009b96:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009b9a:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_TriggerCallback(htim);
 8009b9c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009b9e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009ba0:	f7ff ff91 	bl	8009ac6 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009ba4:	06b2      	lsls	r2, r6, #26
 8009ba6:	d522      	bpl.n	8009bee <HAL_TIM_IRQHandler+0x126>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009ba8:	06ab      	lsls	r3, r5, #26
 8009baa:	d520      	bpl.n	8009bee <HAL_TIM_IRQHandler+0x126>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009bac:	f06f 0220 	mvn.w	r2, #32
 8009bb0:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_CommutCallback(htim);
 8009bb2:	4620      	mov	r0, r4
}
 8009bb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009bb8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8009bba:	f000 b957 	b.w	8009e6c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bbe:	f7ff ff7f 	bl	8009ac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	f7ff ff7e 	bl	8009ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8009bc8:	e791      	b.n	8009aee <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bca:	f7ff ff79 	bl	8009ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f7ff ff78 	bl	8009ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8009bd4:	e79e      	b.n	8009b14 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bd6:	f7ff ff73 	bl	8009ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f7ff ff72 	bl	8009ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8009be0:	e7aa      	b.n	8009b38 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009be2:	f7ff ff6d 	bl	8009ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009be6:	4620      	mov	r0, r4
 8009be8:	f7ff ff6c 	bl	8009ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8009bec:	e7b7      	b.n	8009b5e <HAL_TIM_IRQHandler+0x96>
}
 8009bee:	bd70      	pop	{r4, r5, r6, pc}

08009bf0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bf0:	4a1e      	ldr	r2, [pc, #120]	@ (8009c6c <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8009bf2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bf4:	4290      	cmp	r0, r2
 8009bf6:	d00a      	beq.n	8009c0e <TIM_Base_SetConfig+0x1e>
 8009bf8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8009bfc:	d007      	beq.n	8009c0e <TIM_Base_SetConfig+0x1e>
 8009bfe:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8009c02:	4290      	cmp	r0, r2
 8009c04:	d003      	beq.n	8009c0e <TIM_Base_SetConfig+0x1e>
 8009c06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009c0a:	4290      	cmp	r0, r2
 8009c0c:	d115      	bne.n	8009c3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8009c0e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8009c14:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c16:	4a15      	ldr	r2, [pc, #84]	@ (8009c6c <TIM_Base_SetConfig+0x7c>)
 8009c18:	4290      	cmp	r0, r2
 8009c1a:	d00a      	beq.n	8009c32 <TIM_Base_SetConfig+0x42>
 8009c1c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8009c20:	d007      	beq.n	8009c32 <TIM_Base_SetConfig+0x42>
 8009c22:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8009c26:	4290      	cmp	r0, r2
 8009c28:	d003      	beq.n	8009c32 <TIM_Base_SetConfig+0x42>
 8009c2a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009c2e:	4290      	cmp	r0, r2
 8009c30:	d103      	bne.n	8009c3a <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c32:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c38:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c3a:	694a      	ldr	r2, [r1, #20]
 8009c3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c40:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8009c42:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c44:	688b      	ldr	r3, [r1, #8]
 8009c46:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c48:	680b      	ldr	r3, [r1, #0]
 8009c4a:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c4c:	4b07      	ldr	r3, [pc, #28]	@ (8009c6c <TIM_Base_SetConfig+0x7c>)
 8009c4e:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c50:	bf04      	itt	eq
 8009c52:	690b      	ldreq	r3, [r1, #16]
 8009c54:	6303      	streq	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c56:	2301      	movs	r3, #1
 8009c58:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009c5a:	6903      	ldr	r3, [r0, #16]
 8009c5c:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009c5e:	bf42      	ittt	mi
 8009c60:	6903      	ldrmi	r3, [r0, #16]
 8009c62:	f023 0301 	bicmi.w	r3, r3, #1
 8009c66:	6103      	strmi	r3, [r0, #16]
  }
}
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	40012c00 	.word	0x40012c00

08009c70 <HAL_TIM_Base_Init>:
{
 8009c70:	b510      	push	{r4, lr}
  if (htim == NULL)
 8009c72:	4604      	mov	r4, r0
 8009c74:	b330      	cbz	r0, 8009cc4 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8009c76:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009c7a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009c7e:	b91b      	cbnz	r3, 8009c88 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8009c80:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009c84:	f7fd fe50 	bl	8007928 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8009c88:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c8a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009c8c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c90:	1d21      	adds	r1, r4, #4
 8009c92:	f7ff ffad 	bl	8009bf0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c96:	2301      	movs	r3, #1
  return HAL_OK;
 8009c98:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c9a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c9e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8009ca2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8009ca6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8009caa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cae:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009cb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cb6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8009cba:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8009cbe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8009cc2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009cc4:	2001      	movs	r0, #1
 8009cc6:	e7fc      	b.n	8009cc2 <HAL_TIM_Base_Init+0x52>

08009cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009cc8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009cca:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ccc:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cce:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009cd2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009cd6:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cd8:	6082      	str	r2, [r0, #8]
}
 8009cda:	bd10      	pop	{r4, pc}

08009cdc <HAL_TIM_ConfigClockSource>:
{
 8009cdc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8009cde:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8009ce2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	f04f 0002 	mov.w	r0, #2
 8009cea:	f000 808e 	beq.w	8009e0a <HAL_TIM_ConfigClockSource+0x12e>
 8009cee:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8009cf0:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8009cf4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8009cf6:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8009cfa:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cfc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d00:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8009d04:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8009d06:	680b      	ldr	r3, [r1, #0]
 8009d08:	2b60      	cmp	r3, #96	@ 0x60
 8009d0a:	d04f      	beq.n	8009dac <HAL_TIM_ConfigClockSource+0xd0>
 8009d0c:	d832      	bhi.n	8009d74 <HAL_TIM_ConfigClockSource+0x98>
 8009d0e:	2b40      	cmp	r3, #64	@ 0x40
 8009d10:	d064      	beq.n	8009ddc <HAL_TIM_ConfigClockSource+0x100>
 8009d12:	d816      	bhi.n	8009d42 <HAL_TIM_ConfigClockSource+0x66>
 8009d14:	2b20      	cmp	r3, #32
 8009d16:	d00d      	beq.n	8009d34 <HAL_TIM_ConfigClockSource+0x58>
 8009d18:	d80a      	bhi.n	8009d30 <HAL_TIM_ConfigClockSource+0x54>
 8009d1a:	f033 0110 	bics.w	r1, r3, #16
 8009d1e:	d009      	beq.n	8009d34 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8009d20:	2301      	movs	r3, #1
 8009d22:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8009d26:	2300      	movs	r3, #0
 8009d28:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8009d30:	2b30      	cmp	r3, #48	@ 0x30
 8009d32:	d1f5      	bne.n	8009d20 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8009d34:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d36:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8009d40:	e028      	b.n	8009d94 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8009d42:	2b50      	cmp	r3, #80	@ 0x50
 8009d44:	d1ec      	bne.n	8009d20 <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 8009d46:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8009d48:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8009d4a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d4c:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d4e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d52:	f023 0301 	bic.w	r3, r3, #1
 8009d56:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d58:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8009d5a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8009d64:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8009d66:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8009d68:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d6e:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8009d72:	e00f      	b.n	8009d94 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8009d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d78:	d00d      	beq.n	8009d96 <HAL_TIM_ConfigClockSource+0xba>
 8009d7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d7e:	d00c      	beq.n	8009d9a <HAL_TIM_ConfigClockSource+0xbe>
 8009d80:	2b70      	cmp	r3, #112	@ 0x70
 8009d82:	d1cd      	bne.n	8009d20 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8009d84:	68cb      	ldr	r3, [r1, #12]
 8009d86:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8009d8a:	f7ff ff9d 	bl	8009cc8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009d8e:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8009d94:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009d96:	2200      	movs	r2, #0
 8009d98:	e7c2      	b.n	8009d20 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8009d9a:	68cb      	ldr	r3, [r1, #12]
 8009d9c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8009da0:	f7ff ff92 	bl	8009cc8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009da4:	6883      	ldr	r3, [r0, #8]
 8009da6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009daa:	e7f3      	b.n	8009d94 <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 8009dac:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dae:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8009db0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009db2:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 8009db6:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009db8:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dba:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009dbc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009dc0:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8009dc4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009dc8:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8009dcc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8009dce:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8009dd0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009dd6:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8009dda:	e7db      	b.n	8009d94 <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 8009ddc:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8009dde:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8009de0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009de2:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009de4:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009de8:	f023 0301 	bic.w	r3, r3, #1
 8009dec:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dee:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8009df0:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009df2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009df6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8009dfa:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8009dfc:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8009dfe:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e04:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8009e08:	e7c4      	b.n	8009d94 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	e78e      	b.n	8009d2c <HAL_TIM_ConfigClockSource+0x50>
	...

08009e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e10:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e12:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8009e16:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	f04f 0002 	mov.w	r0, #2
 8009e1e:	d022      	beq.n	8009e66 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e20:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009e22:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8009e26:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e28:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e2a:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e2e:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8009e30:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e32:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e34:	4c0c      	ldr	r4, [pc, #48]	@ (8009e68 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8009e36:	42a3      	cmp	r3, r4
 8009e38:	d00a      	beq.n	8009e50 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8009e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e3e:	d007      	beq.n	8009e50 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8009e40:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8009e44:	42a3      	cmp	r3, r4
 8009e46:	d003      	beq.n	8009e50 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8009e48:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8009e4c:	42a3      	cmp	r3, r4
 8009e4e:	d104      	bne.n	8009e5a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e50:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e52:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e56:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e58:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e5a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8009e5c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8009e5e:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8009e62:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8009e66:	bd30      	pop	{r4, r5, pc}
 8009e68:	40012c00 	.word	0x40012c00

08009e6c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8009e6c:	4770      	bx	lr

08009e6e <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8009e6e:	4770      	bx	lr

08009e70 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e70:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e72:	f102 030c 	add.w	r3, r2, #12
 8009e76:	e853 3f00 	ldrex	r3, [r3]
 8009e7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7e:	320c      	adds	r2, #12
 8009e80:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8009e84:	6802      	ldr	r2, [r0, #0]
 8009e86:	2900      	cmp	r1, #0
 8009e88:	d1f2      	bne.n	8009e70 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8a:	f102 0314 	add.w	r3, r2, #20
 8009e8e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e92:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e96:	f102 0c14 	add.w	ip, r2, #20
 8009e9a:	e84c 3100 	strex	r1, r3, [ip]
 8009e9e:	2900      	cmp	r1, #0
 8009ea0:	d1f3      	bne.n	8009e8a <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ea2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d10b      	bne.n	8009ec0 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea8:	f102 030c 	add.w	r3, r2, #12
 8009eac:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eb0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb4:	f102 0c0c 	add.w	ip, r2, #12
 8009eb8:	e84c 3100 	strex	r1, r3, [ip]
 8009ebc:	2900      	cmp	r1, #0
 8009ebe:	d1f3      	bne.n	8009ea8 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ec0:	2320      	movs	r3, #32
 8009ec2:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8009eca:	4770      	bx	lr

08009ecc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ecc:	b510      	push	{r4, lr}
 8009ece:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ed0:	6803      	ldr	r3, [r0, #0]
 8009ed2:	68c1      	ldr	r1, [r0, #12]
 8009ed4:	691a      	ldr	r2, [r3, #16]
 8009ed6:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8009eda:	430a      	orrs	r2, r1
 8009edc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009ede:	6882      	ldr	r2, [r0, #8]
 8009ee0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8009ee2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009ee4:	4302      	orrs	r2, r0
 8009ee6:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8009ee8:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 8009eec:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009ef0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8009ef2:	430a      	orrs	r2, r1
 8009ef4:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ef6:	695a      	ldr	r2, [r3, #20]
 8009ef8:	69a1      	ldr	r1, [r4, #24]
 8009efa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8009efe:	430a      	orrs	r2, r1
 8009f00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009f02:	4a0e      	ldr	r2, [pc, #56]	@ (8009f3c <UART_SetConfig+0x70>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d115      	bne.n	8009f34 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009f08:	f7ff fafc 	bl	8009504 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f0c:	2319      	movs	r3, #25
 8009f0e:	4343      	muls	r3, r0
 8009f10:	6862      	ldr	r2, [r4, #4]
 8009f12:	6820      	ldr	r0, [r4, #0]
 8009f14:	0092      	lsls	r2, r2, #2
 8009f16:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f1a:	2264      	movs	r2, #100	@ 0x64
 8009f1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f20:	fb02 3311 	mls	r3, r2, r1, r3
 8009f24:	011b      	lsls	r3, r3, #4
 8009f26:	3332      	adds	r3, #50	@ 0x32
 8009f28:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f2c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8009f30:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8009f32:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8009f34:	f7ff fad6 	bl	80094e4 <HAL_RCC_GetPCLK1Freq>
 8009f38:	e7e8      	b.n	8009f0c <UART_SetConfig+0x40>
 8009f3a:	bf00      	nop
 8009f3c:	40013800 	.word	0x40013800

08009f40 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8009f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f42:	4605      	mov	r5, r0
 8009f44:	460c      	mov	r4, r1
 8009f46:	4617      	mov	r7, r2
 8009f48:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f4a:	682a      	ldr	r2, [r5, #0]
 8009f4c:	6813      	ldr	r3, [r2, #0]
 8009f4e:	ea34 0303 	bics.w	r3, r4, r3
 8009f52:	d101      	bne.n	8009f58 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8009f54:	2000      	movs	r0, #0
 8009f56:	e021      	b.n	8009f9c <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8009f58:	1c70      	adds	r0, r6, #1
 8009f5a:	d0f7      	beq.n	8009f4c <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f5c:	f7fe fa7c 	bl	8008458 <HAL_GetTick>
 8009f60:	1bc0      	subs	r0, r0, r7
 8009f62:	4286      	cmp	r6, r0
 8009f64:	d31c      	bcc.n	8009fa0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 8009f66:	b1de      	cbz	r6, 8009fa0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009f68:	682b      	ldr	r3, [r5, #0]
 8009f6a:	68da      	ldr	r2, [r3, #12]
 8009f6c:	0751      	lsls	r1, r2, #29
 8009f6e:	d5ec      	bpl.n	8009f4a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8009f70:	2c80      	cmp	r4, #128	@ 0x80
 8009f72:	d0ea      	beq.n	8009f4a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8009f74:	2c40      	cmp	r4, #64	@ 0x40
 8009f76:	d0e8      	beq.n	8009f4a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	0712      	lsls	r2, r2, #28
 8009f7c:	d5e5      	bpl.n	8009f4a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009f7e:	2400      	movs	r4, #0
 8009f80:	9401      	str	r4, [sp, #4]
 8009f82:	681a      	ldr	r2, [r3, #0]
          UART_EndRxTransfer(huart);
 8009f84:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009f86:	9201      	str	r2, [sp, #4]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	9301      	str	r3, [sp, #4]
 8009f8c:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8009f8e:	f7ff ff6f 	bl	8009e70 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009f92:	2308      	movs	r3, #8
          return HAL_ERROR;
 8009f94:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009f96:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8009f98:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
}
 8009f9c:	b003      	add	sp, #12
 8009f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8009fa0:	2003      	movs	r0, #3
 8009fa2:	e7fb      	b.n	8009f9c <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

08009fa4 <HAL_UART_Init>:
{
 8009fa4:	b510      	push	{r4, lr}
  if (huart == NULL)
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	b348      	cbz	r0, 8009ffe <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8009faa:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8009fae:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009fb2:	b91b      	cbnz	r3, 8009fbc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8009fb4:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8009fb8:	f7fe f856 	bl	8008068 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8009fbc:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8009fbe:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009fc0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8009fc4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8009fc6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8009fc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009fcc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8009fce:	f7ff ff7d 	bl	8009ecc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fd2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fd4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fd6:	691a      	ldr	r2, [r3, #16]
 8009fd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009fdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fde:	695a      	ldr	r2, [r3, #20]
 8009fe0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009fe4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8009fe6:	68da      	ldr	r2, [r3, #12]
 8009fe8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009fec:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8009fee:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ff0:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009ff2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009ff6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ffa:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8009ffc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009ffe:	2001      	movs	r0, #1
 800a000:	e7fc      	b.n	8009ffc <HAL_UART_Init+0x58>

0800a002 <HAL_UART_Transmit>:
{
 800a002:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a006:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800a008:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800a00c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800a00e:	2b20      	cmp	r3, #32
{
 800a010:	460e      	mov	r6, r1
 800a012:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800a014:	d13f      	bne.n	800a096 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 800a016:	2900      	cmp	r1, #0
 800a018:	d03f      	beq.n	800a09a <HAL_UART_Transmit+0x98>
 800a01a:	2a00      	cmp	r2, #0
 800a01c:	d03d      	beq.n	800a09a <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a01e:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a020:	2500      	movs	r5, #0
 800a022:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a024:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800a028:	f7fe fa16 	bl	8008458 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a02c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800a02e:	4681      	mov	r9, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferSize = Size;
 800a034:	84a7      	strh	r7, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a036:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a038:	d103      	bne.n	800a042 <HAL_UART_Transmit+0x40>
 800a03a:	6923      	ldr	r3, [r4, #16]
 800a03c:	b90b      	cbnz	r3, 800a042 <HAL_UART_Transmit+0x40>
 800a03e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800a040:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800a042:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800a044:	b29b      	uxth	r3, r3
 800a046:	b953      	cbnz	r3, 800a05e <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a048:	4643      	mov	r3, r8
 800a04a:	464a      	mov	r2, r9
 800a04c:	2140      	movs	r1, #64	@ 0x40
 800a04e:	4620      	mov	r0, r4
 800a050:	f7ff ff76 	bl	8009f40 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800a054:	2320      	movs	r3, #32
 800a056:	b950      	cbnz	r0, 800a06e <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 800a058:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 800a05c:	e00a      	b.n	800a074 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a05e:	4643      	mov	r3, r8
 800a060:	464a      	mov	r2, r9
 800a062:	2180      	movs	r1, #128	@ 0x80
 800a064:	4620      	mov	r0, r4
 800a066:	f7ff ff6b 	bl	8009f40 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800a06a:	b128      	cbz	r0, 800a078 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 800a06c:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800a06e:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 800a070:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 800a074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a078:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800a07a:	b94e      	cbnz	r6, 800a090 <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a07c:	f835 3b02 	ldrh.w	r3, [r5], #2
 800a080:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a084:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800a086:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 800a088:	3901      	subs	r1, #1
 800a08a:	b289      	uxth	r1, r1
 800a08c:	84e1      	strh	r1, [r4, #38]	@ 0x26
 800a08e:	e7d8      	b.n	800a042 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a090:	f816 3b01 	ldrb.w	r3, [r6], #1
 800a094:	e7f6      	b.n	800a084 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800a096:	2002      	movs	r0, #2
 800a098:	e7ec      	b.n	800a074 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 800a09a:	2001      	movs	r0, #1
 800a09c:	e7ea      	b.n	800a074 <HAL_UART_Transmit+0x72>

0800a09e <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800a09e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800a0a2:	2b20      	cmp	r3, #32
 800a0a4:	d110      	bne.n	800a0c8 <HAL_UART_Transmit_IT+0x2a>
    if ((pData == NULL) || (Size == 0U))
 800a0a6:	b189      	cbz	r1, 800a0cc <HAL_UART_Transmit_IT+0x2e>
 800a0a8:	b182      	cbz	r2, 800a0cc <HAL_UART_Transmit_IT+0x2e>
    huart->TxXferCount = Size;
 800a0aa:	84c2      	strh	r2, [r0, #38]	@ 0x26
    huart->TxXferSize = Size;
 800a0ac:	8482      	strh	r2, [r0, #36]	@ 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0ae:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0b0:	2221      	movs	r2, #33	@ 0x21
    huart->pTxBuffPtr = pData;
 800a0b2:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a0b4:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0b6:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0b8:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a0bc:	68ca      	ldr	r2, [r1, #12]
    return HAL_OK;
 800a0be:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a0c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a0c4:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 800a0c6:	4770      	bx	lr
    return HAL_BUSY;
 800a0c8:	2002      	movs	r0, #2
 800a0ca:	4770      	bx	lr
      return HAL_ERROR;
 800a0cc:	2001      	movs	r0, #1
}
 800a0ce:	4770      	bx	lr

0800a0d0 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 800a0d0:	4770      	bx	lr

0800a0d2 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800a0d2:	4770      	bx	lr

0800a0d4 <UART_DMAError>:
{
 800a0d4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0d6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a0d8:	6803      	ldr	r3, [r0, #0]
 800a0da:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a0dc:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800a0e0:	2921      	cmp	r1, #33	@ 0x21
 800a0e2:	d112      	bne.n	800a10a <UART_DMAError+0x36>
 800a0e4:	0612      	lsls	r2, r2, #24
 800a0e6:	d510      	bpl.n	800a10a <UART_DMAError+0x36>
    huart->TxXferCount = 0x00U;
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	84c2      	strh	r2, [r0, #38]	@ 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ec:	f103 020c 	add.w	r2, r3, #12
 800a0f0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a0f4:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f8:	f103 0c0c 	add.w	ip, r3, #12
 800a0fc:	e84c 2100 	strex	r1, r2, [ip]
 800a100:	2900      	cmp	r1, #0
 800a102:	d1f3      	bne.n	800a0ec <UART_DMAError+0x18>
  huart->gState = HAL_UART_STATE_READY;
 800a104:	2220      	movs	r2, #32
 800a106:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a10a:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a10c:	f890 2042 	ldrb.w	r2, [r0, #66]	@ 0x42
 800a110:	2a22      	cmp	r2, #34	@ 0x22
 800a112:	d105      	bne.n	800a120 <UART_DMAError+0x4c>
 800a114:	065b      	lsls	r3, r3, #25
 800a116:	d503      	bpl.n	800a120 <UART_DMAError+0x4c>
    huart->RxXferCount = 0x00U;
 800a118:	2300      	movs	r3, #0
 800a11a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800a11c:	f7ff fea8 	bl	8009e70 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a120:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800a122:	f043 0310 	orr.w	r3, r3, #16
 800a126:	6443      	str	r3, [r0, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 800a128:	f7ff ffd3 	bl	800a0d2 <HAL_UART_ErrorCallback>
}
 800a12c:	bd08      	pop	{r3, pc}

0800a12e <UART_DMAAbortOnError>:
{
 800a12e:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800a130:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a132:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 800a134:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a136:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 800a138:	f7ff ffcb 	bl	800a0d2 <HAL_UART_ErrorCallback>
}
 800a13c:	bd08      	pop	{r3, pc}

0800a13e <HAL_UARTEx_RxEventCallback>:
}
 800a13e:	4770      	bx	lr

0800a140 <UART_DMARxHalfCplt>:
{
 800a140:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a142:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a144:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a146:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a148:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d104      	bne.n	800a158 <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a14e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800a150:	0849      	lsrs	r1, r1, #1
 800a152:	f7ff fff4 	bl	800a13e <HAL_UARTEx_RxEventCallback>
}
 800a156:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 800a158:	f7ff ffba 	bl	800a0d0 <HAL_UART_RxHalfCpltCallback>
}
 800a15c:	e7fb      	b.n	800a156 <UART_DMARxHalfCplt+0x16>

0800a15e <UART_DMAReceiveCplt>:
{
 800a15e:	b508      	push	{r3, lr}
 800a160:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a162:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a164:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f013 0320 	ands.w	r3, r3, #32
 800a16c:	d137      	bne.n	800a1de <UART_DMAReceiveCplt+0x80>
    huart->RxXferCount = 0U;
 800a16e:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a170:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a172:	f102 030c 	add.w	r3, r2, #12
 800a176:	e853 3f00 	ldrex	r3, [r3]
 800a17a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17e:	320c      	adds	r2, #12
 800a180:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800a184:	6803      	ldr	r3, [r0, #0]
 800a186:	2900      	cmp	r1, #0
 800a188:	d1f2      	bne.n	800a170 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18a:	f103 0214 	add.w	r2, r3, #20
 800a18e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a192:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a196:	f103 0c14 	add.w	ip, r3, #20
 800a19a:	e84c 2100 	strex	r1, r2, [ip]
 800a19e:	2900      	cmp	r1, #0
 800a1a0:	d1f3      	bne.n	800a18a <UART_DMAReceiveCplt+0x2c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a2:	f103 0214 	add.w	r2, r3, #20
 800a1a6:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ae:	f103 0c14 	add.w	ip, r3, #20
 800a1b2:	e84c 2100 	strex	r1, r2, [ip]
 800a1b6:	2900      	cmp	r1, #0
 800a1b8:	d1f3      	bne.n	800a1a2 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 800a1ba:	2220      	movs	r2, #32
 800a1bc:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1c0:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800a1c2:	2a01      	cmp	r2, #1
 800a1c4:	d10b      	bne.n	800a1de <UART_DMAReceiveCplt+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c6:	f103 020c 	add.w	r2, r3, #12
 800a1ca:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ce:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d2:	f103 0c0c 	add.w	ip, r3, #12
 800a1d6:	e84c 2100 	strex	r1, r2, [ip]
 800a1da:	2900      	cmp	r1, #0
 800a1dc:	d1f3      	bne.n	800a1c6 <UART_DMAReceiveCplt+0x68>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1e2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d103      	bne.n	800a1f0 <UART_DMAReceiveCplt+0x92>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1e8:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800a1ea:	f7ff ffa8 	bl	800a13e <HAL_UARTEx_RxEventCallback>
}
 800a1ee:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 800a1f0:	f7fe f830 	bl	8008254 <HAL_UART_RxCpltCallback>
}
 800a1f4:	e7fb      	b.n	800a1ee <UART_DMAReceiveCplt+0x90>

0800a1f6 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1f6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800a1fa:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1fc:	2b22      	cmp	r3, #34	@ 0x22
 800a1fe:	d142      	bne.n	800a286 <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a200:	6881      	ldr	r1, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a202:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a204:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a208:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a20a:	d13f      	bne.n	800a28c <UART_Receive_IT.isra.0+0x96>
 800a20c:	6901      	ldr	r1, [r0, #16]
 800a20e:	2900      	cmp	r1, #0
 800a210:	d13f      	bne.n	800a292 <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a212:	6852      	ldr	r2, [r2, #4]
 800a214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a218:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800a21c:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 800a21e:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800a220:	3b01      	subs	r3, #1
 800a222:	b29b      	uxth	r3, r3
 800a224:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800a226:	2b00      	cmp	r3, #0
 800a228:	d12d      	bne.n	800a286 <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a22a:	6802      	ldr	r2, [r0, #0]
 800a22c:	68d1      	ldr	r1, [r2, #12]
 800a22e:	f021 0120 	bic.w	r1, r1, #32
 800a232:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a234:	68d1      	ldr	r1, [r2, #12]
 800a236:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 800a23a:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a23c:	6951      	ldr	r1, [r2, #20]
 800a23e:	f021 0101 	bic.w	r1, r1, #1
 800a242:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800a244:	2220      	movs	r2, #32
 800a246:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a24a:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a24c:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800a24e:	2a01      	cmp	r2, #1
 800a250:	6802      	ldr	r2, [r0, #0]
 800a252:	d128      	bne.n	800a2a6 <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a254:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a256:	f102 030c 	add.w	r3, r2, #12
 800a25a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a25e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a262:	f102 0c0c 	add.w	ip, r2, #12
 800a266:	e84c 3100 	strex	r1, r3, [ip]
 800a26a:	2900      	cmp	r1, #0
 800a26c:	d1f3      	bne.n	800a256 <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a26e:	6813      	ldr	r3, [r2, #0]
 800a270:	06db      	lsls	r3, r3, #27
 800a272:	d505      	bpl.n	800a280 <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a274:	9101      	str	r1, [sp, #4]
 800a276:	6813      	ldr	r3, [r2, #0]
 800a278:	9301      	str	r3, [sp, #4]
 800a27a:	6853      	ldr	r3, [r2, #4]
 800a27c:	9301      	str	r3, [sp, #4]
 800a27e:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a280:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800a282:	f7ff ff5c 	bl	800a13e <HAL_UARTEx_RxEventCallback>
}
 800a286:	b003      	add	sp, #12
 800a288:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a28c:	b939      	cbnz	r1, 800a29e <UART_Receive_IT.isra.0+0xa8>
 800a28e:	6901      	ldr	r1, [r0, #16]
 800a290:	b929      	cbnz	r1, 800a29e <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a292:	6852      	ldr	r2, [r2, #4]
 800a294:	b2d2      	uxtb	r2, r2
 800a296:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 800a298:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800a29a:	3301      	adds	r3, #1
 800a29c:	e7be      	b.n	800a21c <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a29e:	6852      	ldr	r2, [r2, #4]
 800a2a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a2a4:	e7f7      	b.n	800a296 <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 800a2a6:	f7fd ffd5 	bl	8008254 <HAL_UART_RxCpltCallback>
 800a2aa:	e7ec      	b.n	800a286 <UART_Receive_IT.isra.0+0x90>

0800a2ac <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a2ac:	6803      	ldr	r3, [r0, #0]
{
 800a2ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a2b0:	681a      	ldr	r2, [r3, #0]
{
 800a2b2:	4604      	mov	r4, r0
  if (errorflags == RESET)
 800a2b4:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a2b6:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a2b8:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800a2ba:	d108      	bne.n	800a2ce <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a2bc:	0696      	lsls	r6, r2, #26
 800a2be:	d568      	bpl.n	800a392 <HAL_UART_IRQHandler+0xe6>
 800a2c0:	068d      	lsls	r5, r1, #26
 800a2c2:	d566      	bpl.n	800a392 <HAL_UART_IRQHandler+0xe6>
}
 800a2c4:	b002      	add	sp, #8
 800a2c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800a2ca:	f7ff bf94 	b.w	800a1f6 <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a2ce:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a2d2:	f401 7590 	and.w	r5, r1, #288	@ 0x120
 800a2d6:	4305      	orrs	r5, r0
 800a2d8:	d05b      	beq.n	800a392 <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a2da:	07d6      	lsls	r6, r2, #31
 800a2dc:	d505      	bpl.n	800a2ea <HAL_UART_IRQHandler+0x3e>
 800a2de:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2e0:	bf42      	ittt	mi
 800a2e2:	6c63      	ldrmi	r3, [r4, #68]	@ 0x44
 800a2e4:	f043 0301 	orrmi.w	r3, r3, #1
 800a2e8:	6463      	strmi	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a2ea:	0753      	lsls	r3, r2, #29
 800a2ec:	d504      	bpl.n	800a2f8 <HAL_UART_IRQHandler+0x4c>
 800a2ee:	b118      	cbz	r0, 800a2f8 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a2f0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a2f2:	f043 0302 	orr.w	r3, r3, #2
 800a2f6:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a2f8:	0796      	lsls	r6, r2, #30
 800a2fa:	d504      	bpl.n	800a306 <HAL_UART_IRQHandler+0x5a>
 800a2fc:	b118      	cbz	r0, 800a306 <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a2fe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a300:	f043 0304 	orr.w	r3, r3, #4
 800a304:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a306:	0715      	lsls	r5, r2, #28
 800a308:	d507      	bpl.n	800a31a <HAL_UART_IRQHandler+0x6e>
 800a30a:	f001 0320 	and.w	r3, r1, #32
 800a30e:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a310:	bf1e      	ittt	ne
 800a312:	6c63      	ldrne	r3, [r4, #68]	@ 0x44
 800a314:	f043 0308 	orrne.w	r3, r3, #8
 800a318:	6463      	strne	r3, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a31a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d032      	beq.n	800a386 <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a320:	0692      	lsls	r2, r2, #26
 800a322:	d504      	bpl.n	800a32e <HAL_UART_IRQHandler+0x82>
 800a324:	068b      	lsls	r3, r1, #26
 800a326:	d502      	bpl.n	800a32e <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 800a328:	4620      	mov	r0, r4
 800a32a:	f7ff ff64 	bl	800a1f6 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a32e:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 800a330:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a332:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a334:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a33a:	f002 0208 	and.w	r2, r2, #8
 800a33e:	ea53 0502 	orrs.w	r5, r3, r2
 800a342:	d022      	beq.n	800a38a <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 800a344:	f7ff fd94 	bl	8009e70 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a348:	6973      	ldr	r3, [r6, #20]
 800a34a:	065e      	lsls	r6, r3, #25
 800a34c:	d518      	bpl.n	800a380 <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a34e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a350:	f102 0314 	add.w	r3, r2, #20
 800a354:	e853 3f00 	ldrex	r3, [r3]
 800a358:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35c:	3214      	adds	r2, #20
 800a35e:	e842 3100 	strex	r1, r3, [r2]
 800a362:	2900      	cmp	r1, #0
 800a364:	d1f3      	bne.n	800a34e <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 800a366:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800a368:	b150      	cbz	r0, 800a380 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a36a:	4b74      	ldr	r3, [pc, #464]	@ (800a53c <HAL_UART_IRQHandler+0x290>)
 800a36c:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a36e:	f7fe fc89 	bl	8008c84 <HAL_DMA_Abort_IT>
 800a372:	b140      	cbz	r0, 800a386 <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a374:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800a376:	6b43      	ldr	r3, [r0, #52]	@ 0x34
}
 800a378:	b002      	add	sp, #8
 800a37a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a37e:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800a380:	4620      	mov	r0, r4
 800a382:	f7ff fea6 	bl	800a0d2 <HAL_UART_ErrorCallback>
}
 800a386:	b002      	add	sp, #8
 800a388:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800a38a:	f7ff fea2 	bl	800a0d2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a38e:	6465      	str	r5, [r4, #68]	@ 0x44
 800a390:	e7f9      	b.n	800a386 <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a392:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800a394:	2801      	cmp	r0, #1
 800a396:	f040 8094 	bne.w	800a4c2 <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a39a:	06d5      	lsls	r5, r2, #27
 800a39c:	f140 8091 	bpl.w	800a4c2 <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a3a0:	06c8      	lsls	r0, r1, #27
 800a3a2:	f140 808e 	bpl.w	800a4c2 <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	9201      	str	r2, [sp, #4]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	9201      	str	r2, [sp, #4]
 800a3ae:	685a      	ldr	r2, [r3, #4]
 800a3b0:	9201      	str	r2, [sp, #4]
 800a3b2:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3b4:	695a      	ldr	r2, [r3, #20]
 800a3b6:	0652      	lsls	r2, r2, #25
 800a3b8:	d54d      	bpl.n	800a456 <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a3ba:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800a3bc:	680a      	ldr	r2, [r1, #0]
 800a3be:	6852      	ldr	r2, [r2, #4]
 800a3c0:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800a3c2:	2a00      	cmp	r2, #0
 800a3c4:	d0df      	beq.n	800a386 <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a3c6:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 800a3c8:	4290      	cmp	r0, r2
 800a3ca:	d9dc      	bls.n	800a386 <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 800a3cc:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a3ce:	698a      	ldr	r2, [r1, #24]
 800a3d0:	2a20      	cmp	r2, #32
 800a3d2:	d036      	beq.n	800a442 <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d4:	f103 020c 	add.w	r2, r3, #12
 800a3d8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e0:	f103 000c 	add.w	r0, r3, #12
 800a3e4:	e840 2100 	strex	r1, r2, [r0]
 800a3e8:	2900      	cmp	r1, #0
 800a3ea:	d1f3      	bne.n	800a3d4 <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ec:	f103 0214 	add.w	r2, r3, #20
 800a3f0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3f4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f8:	f103 0014 	add.w	r0, r3, #20
 800a3fc:	e840 2100 	strex	r1, r2, [r0]
 800a400:	2900      	cmp	r1, #0
 800a402:	d1f3      	bne.n	800a3ec <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a404:	f103 0214 	add.w	r2, r3, #20
 800a408:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a40c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a410:	f103 0014 	add.w	r0, r3, #20
 800a414:	e840 2100 	strex	r1, r2, [r0]
 800a418:	2900      	cmp	r1, #0
 800a41a:	d1f3      	bne.n	800a404 <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 800a41c:	2220      	movs	r2, #32
 800a41e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a422:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a424:	f103 020c 	add.w	r2, r3, #12
 800a428:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a42c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a430:	f103 000c 	add.w	r0, r3, #12
 800a434:	e840 2100 	strex	r1, r2, [r0]
 800a438:	2900      	cmp	r1, #0
 800a43a:	d1f3      	bne.n	800a424 <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a43c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800a43e:	f7fe fc01 	bl	8008c44 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a442:	2302      	movs	r3, #2
 800a444:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a446:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800a448:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800a44a:	1ac9      	subs	r1, r1, r3
 800a44c:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a44e:	4620      	mov	r0, r4
 800a450:	f7ff fe75 	bl	800a13e <HAL_UARTEx_RxEventCallback>
 800a454:	e797      	b.n	800a386 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a456:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 800a458:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a45a:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 800a45c:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a45e:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 800a460:	2800      	cmp	r0, #0
 800a462:	d090      	beq.n	800a386 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a464:	1a89      	subs	r1, r1, r2
 800a466:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800a468:	2900      	cmp	r1, #0
 800a46a:	d08c      	beq.n	800a386 <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a46c:	f103 020c 	add.w	r2, r3, #12
 800a470:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a474:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a478:	f103 050c 	add.w	r5, r3, #12
 800a47c:	e845 2000 	strex	r0, r2, [r5]
 800a480:	2800      	cmp	r0, #0
 800a482:	d1f3      	bne.n	800a46c <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a484:	f103 0214 	add.w	r2, r3, #20
 800a488:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a48c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a490:	f103 0514 	add.w	r5, r3, #20
 800a494:	e845 2000 	strex	r0, r2, [r5]
 800a498:	2800      	cmp	r0, #0
 800a49a:	d1f3      	bne.n	800a484 <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 800a49c:	2220      	movs	r2, #32
 800a49e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4a2:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a4:	f103 020c 	add.w	r2, r3, #12
 800a4a8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4ac:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b0:	f103 050c 	add.w	r5, r3, #12
 800a4b4:	e845 2000 	strex	r0, r2, [r5]
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	d1f3      	bne.n	800a4a4 <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a4bc:	2302      	movs	r3, #2
 800a4be:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4c0:	e7c5      	b.n	800a44e <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a4c2:	0616      	lsls	r6, r2, #24
 800a4c4:	d528      	bpl.n	800a518 <HAL_UART_IRQHandler+0x26c>
 800a4c6:	060d      	lsls	r5, r1, #24
 800a4c8:	d526      	bpl.n	800a518 <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a4ca:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800a4ce:	2a21      	cmp	r2, #33	@ 0x21
 800a4d0:	f47f af59 	bne.w	800a386 <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4d4:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a4d6:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4d8:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800a4dc:	d117      	bne.n	800a50e <HAL_UART_IRQHandler+0x262>
 800a4de:	6921      	ldr	r1, [r4, #16]
 800a4e0:	b9a9      	cbnz	r1, 800a50e <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a4e2:	f832 1b02 	ldrh.w	r1, [r2], #2
 800a4e6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800a4ea:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a4ec:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800a4ee:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 800a4f0:	3a01      	subs	r2, #1
 800a4f2:	b292      	uxth	r2, r2
 800a4f4:	84e2      	strh	r2, [r4, #38]	@ 0x26
 800a4f6:	2a00      	cmp	r2, #0
 800a4f8:	f47f af45 	bne.w	800a386 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a4fc:	68da      	ldr	r2, [r3, #12]
 800a4fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a502:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a504:	68da      	ldr	r2, [r3, #12]
 800a506:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a50a:	60da      	str	r2, [r3, #12]
 800a50c:	e73b      	b.n	800a386 <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a50e:	1c51      	adds	r1, r2, #1
 800a510:	6221      	str	r1, [r4, #32]
 800a512:	7812      	ldrb	r2, [r2, #0]
 800a514:	605a      	str	r2, [r3, #4]
 800a516:	e7ea      	b.n	800a4ee <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a518:	0650      	lsls	r0, r2, #25
 800a51a:	f57f af34 	bpl.w	800a386 <HAL_UART_IRQHandler+0xda>
 800a51e:	064a      	lsls	r2, r1, #25
 800a520:	f57f af31 	bpl.w	800a386 <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a524:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800a526:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a528:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a52c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800a52e:	2320      	movs	r3, #32
 800a530:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 800a534:	f7fd fe7a 	bl	800822c <HAL_UART_TxCpltCallback>
  return HAL_OK;
 800a538:	e725      	b.n	800a386 <HAL_UART_IRQHandler+0xda>
 800a53a:	bf00      	nop
 800a53c:	0800a12f 	.word	0x0800a12f

0800a540 <UART_Start_Receive_DMA>:
{
 800a540:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a542:	4613      	mov	r3, r2
  huart->RxXferSize = Size;
 800a544:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a546:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a548:	2222      	movs	r2, #34	@ 0x22
{
 800a54a:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 800a54c:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a54e:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a550:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a554:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 800a556:	4a1d      	ldr	r2, [pc, #116]	@ (800a5cc <UART_Start_Receive_DMA+0x8c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a558:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a55a:	6282      	str	r2, [r0, #40]	@ 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a55c:	4a1c      	ldr	r2, [pc, #112]	@ (800a5d0 <UART_Start_Receive_DMA+0x90>)
 800a55e:	62c2      	str	r2, [r0, #44]	@ 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a560:	4a1c      	ldr	r2, [pc, #112]	@ (800a5d4 <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 800a562:	e9c0 250c 	strd	r2, r5, [r0, #48]	@ 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a566:	460a      	mov	r2, r1
 800a568:	1d31      	adds	r1, r6, #4
 800a56a:	f7fe fb2f 	bl	8008bcc <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a56e:	6823      	ldr	r3, [r4, #0]
 800a570:	9501      	str	r5, [sp, #4]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	9201      	str	r2, [sp, #4]
 800a576:	685a      	ldr	r2, [r3, #4]
 800a578:	9201      	str	r2, [sp, #4]
 800a57a:	9a01      	ldr	r2, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a57c:	6922      	ldr	r2, [r4, #16]
 800a57e:	b15a      	cbz	r2, 800a598 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a580:	f103 020c 	add.w	r2, r3, #12
 800a584:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a588:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58c:	f103 000c 	add.w	r0, r3, #12
 800a590:	e840 2100 	strex	r1, r2, [r0]
 800a594:	2900      	cmp	r1, #0
 800a596:	d1f3      	bne.n	800a580 <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a598:	f103 0214 	add.w	r2, r3, #20
 800a59c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5a0:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a4:	f103 0014 	add.w	r0, r3, #20
 800a5a8:	e840 2100 	strex	r1, r2, [r0]
 800a5ac:	2900      	cmp	r1, #0
 800a5ae:	d1f3      	bne.n	800a598 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b0:	f103 0214 	add.w	r2, r3, #20
 800a5b4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5bc:	f103 0114 	add.w	r1, r3, #20
 800a5c0:	e841 2000 	strex	r0, r2, [r1]
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	d1f3      	bne.n	800a5b0 <UART_Start_Receive_DMA+0x70>
}
 800a5c8:	b002      	add	sp, #8
 800a5ca:	bd70      	pop	{r4, r5, r6, pc}
 800a5cc:	0800a15f 	.word	0x0800a15f
 800a5d0:	0800a141 	.word	0x0800a141
 800a5d4:	0800a0d5 	.word	0x0800a0d5

0800a5d8 <HAL_UART_Receive_DMA>:
{
 800a5d8:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 800a5da:	f890 6042 	ldrb.w	r6, [r0, #66]	@ 0x42
 800a5de:	2e20      	cmp	r6, #32
 800a5e0:	d106      	bne.n	800a5f0 <HAL_UART_Receive_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 800a5e2:	b141      	cbz	r1, 800a5f6 <HAL_UART_Receive_DMA+0x1e>
 800a5e4:	b13a      	cbz	r2, 800a5f6 <HAL_UART_Receive_DMA+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5e6:	2400      	movs	r4, #0
 800a5e8:	6304      	str	r4, [r0, #48]	@ 0x30
}
 800a5ea:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a5ec:	f7ff bfa8 	b.w	800a540 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 800a5f0:	2002      	movs	r0, #2
}
 800a5f2:	bc70      	pop	{r4, r5, r6}
 800a5f4:	4770      	bx	lr
      return HAL_ERROR;
 800a5f6:	2001      	movs	r0, #1
 800a5f8:	e7fb      	b.n	800a5f2 <HAL_UART_Receive_DMA+0x1a>

0800a5fa <atof>:
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	f000 bec2 	b.w	800b384 <strtod>

0800a600 <atoi>:
 800a600:	220a      	movs	r2, #10
 800a602:	2100      	movs	r1, #0
 800a604:	f000 bf46 	b.w	800b494 <strtol>

0800a608 <malloc>:
 800a608:	4b02      	ldr	r3, [pc, #8]	@ (800a614 <malloc+0xc>)
 800a60a:	4601      	mov	r1, r0
 800a60c:	6818      	ldr	r0, [r3, #0]
 800a60e:	f000 b82d 	b.w	800a66c <_malloc_r>
 800a612:	bf00      	nop
 800a614:	20000188 	.word	0x20000188

0800a618 <free>:
 800a618:	4b02      	ldr	r3, [pc, #8]	@ (800a624 <free+0xc>)
 800a61a:	4601      	mov	r1, r0
 800a61c:	6818      	ldr	r0, [r3, #0]
 800a61e:	f002 bf97 	b.w	800d550 <_free_r>
 800a622:	bf00      	nop
 800a624:	20000188 	.word	0x20000188

0800a628 <sbrk_aligned>:
 800a628:	b570      	push	{r4, r5, r6, lr}
 800a62a:	4e0f      	ldr	r6, [pc, #60]	@ (800a668 <sbrk_aligned+0x40>)
 800a62c:	460c      	mov	r4, r1
 800a62e:	6831      	ldr	r1, [r6, #0]
 800a630:	4605      	mov	r5, r0
 800a632:	b911      	cbnz	r1, 800a63a <sbrk_aligned+0x12>
 800a634:	f002 f8be 	bl	800c7b4 <_sbrk_r>
 800a638:	6030      	str	r0, [r6, #0]
 800a63a:	4621      	mov	r1, r4
 800a63c:	4628      	mov	r0, r5
 800a63e:	f002 f8b9 	bl	800c7b4 <_sbrk_r>
 800a642:	1c43      	adds	r3, r0, #1
 800a644:	d103      	bne.n	800a64e <sbrk_aligned+0x26>
 800a646:	f04f 34ff 	mov.w	r4, #4294967295
 800a64a:	4620      	mov	r0, r4
 800a64c:	bd70      	pop	{r4, r5, r6, pc}
 800a64e:	1cc4      	adds	r4, r0, #3
 800a650:	f024 0403 	bic.w	r4, r4, #3
 800a654:	42a0      	cmp	r0, r4
 800a656:	d0f8      	beq.n	800a64a <sbrk_aligned+0x22>
 800a658:	1a21      	subs	r1, r4, r0
 800a65a:	4628      	mov	r0, r5
 800a65c:	f002 f8aa 	bl	800c7b4 <_sbrk_r>
 800a660:	3001      	adds	r0, #1
 800a662:	d1f2      	bne.n	800a64a <sbrk_aligned+0x22>
 800a664:	e7ef      	b.n	800a646 <sbrk_aligned+0x1e>
 800a666:	bf00      	nop
 800a668:	20000bc4 	.word	0x20000bc4

0800a66c <_malloc_r>:
 800a66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a670:	1ccd      	adds	r5, r1, #3
 800a672:	f025 0503 	bic.w	r5, r5, #3
 800a676:	3508      	adds	r5, #8
 800a678:	2d0c      	cmp	r5, #12
 800a67a:	bf38      	it	cc
 800a67c:	250c      	movcc	r5, #12
 800a67e:	2d00      	cmp	r5, #0
 800a680:	4606      	mov	r6, r0
 800a682:	db01      	blt.n	800a688 <_malloc_r+0x1c>
 800a684:	42a9      	cmp	r1, r5
 800a686:	d904      	bls.n	800a692 <_malloc_r+0x26>
 800a688:	230c      	movs	r3, #12
 800a68a:	6033      	str	r3, [r6, #0]
 800a68c:	2000      	movs	r0, #0
 800a68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a692:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a768 <_malloc_r+0xfc>
 800a696:	f000 f869 	bl	800a76c <__malloc_lock>
 800a69a:	f8d8 3000 	ldr.w	r3, [r8]
 800a69e:	461c      	mov	r4, r3
 800a6a0:	bb44      	cbnz	r4, 800a6f4 <_malloc_r+0x88>
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f7ff ffbf 	bl	800a628 <sbrk_aligned>
 800a6aa:	1c43      	adds	r3, r0, #1
 800a6ac:	4604      	mov	r4, r0
 800a6ae:	d158      	bne.n	800a762 <_malloc_r+0xf6>
 800a6b0:	f8d8 4000 	ldr.w	r4, [r8]
 800a6b4:	4627      	mov	r7, r4
 800a6b6:	2f00      	cmp	r7, #0
 800a6b8:	d143      	bne.n	800a742 <_malloc_r+0xd6>
 800a6ba:	2c00      	cmp	r4, #0
 800a6bc:	d04b      	beq.n	800a756 <_malloc_r+0xea>
 800a6be:	6823      	ldr	r3, [r4, #0]
 800a6c0:	4639      	mov	r1, r7
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	eb04 0903 	add.w	r9, r4, r3
 800a6c8:	f002 f874 	bl	800c7b4 <_sbrk_r>
 800a6cc:	4581      	cmp	r9, r0
 800a6ce:	d142      	bne.n	800a756 <_malloc_r+0xea>
 800a6d0:	6821      	ldr	r1, [r4, #0]
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	1a6d      	subs	r5, r5, r1
 800a6d6:	4629      	mov	r1, r5
 800a6d8:	f7ff ffa6 	bl	800a628 <sbrk_aligned>
 800a6dc:	3001      	adds	r0, #1
 800a6de:	d03a      	beq.n	800a756 <_malloc_r+0xea>
 800a6e0:	6823      	ldr	r3, [r4, #0]
 800a6e2:	442b      	add	r3, r5
 800a6e4:	6023      	str	r3, [r4, #0]
 800a6e6:	f8d8 3000 	ldr.w	r3, [r8]
 800a6ea:	685a      	ldr	r2, [r3, #4]
 800a6ec:	bb62      	cbnz	r2, 800a748 <_malloc_r+0xdc>
 800a6ee:	f8c8 7000 	str.w	r7, [r8]
 800a6f2:	e00f      	b.n	800a714 <_malloc_r+0xa8>
 800a6f4:	6822      	ldr	r2, [r4, #0]
 800a6f6:	1b52      	subs	r2, r2, r5
 800a6f8:	d420      	bmi.n	800a73c <_malloc_r+0xd0>
 800a6fa:	2a0b      	cmp	r2, #11
 800a6fc:	d917      	bls.n	800a72e <_malloc_r+0xc2>
 800a6fe:	1961      	adds	r1, r4, r5
 800a700:	42a3      	cmp	r3, r4
 800a702:	6025      	str	r5, [r4, #0]
 800a704:	bf18      	it	ne
 800a706:	6059      	strne	r1, [r3, #4]
 800a708:	6863      	ldr	r3, [r4, #4]
 800a70a:	bf08      	it	eq
 800a70c:	f8c8 1000 	streq.w	r1, [r8]
 800a710:	5162      	str	r2, [r4, r5]
 800a712:	604b      	str	r3, [r1, #4]
 800a714:	4630      	mov	r0, r6
 800a716:	f000 f82f 	bl	800a778 <__malloc_unlock>
 800a71a:	f104 000b 	add.w	r0, r4, #11
 800a71e:	1d23      	adds	r3, r4, #4
 800a720:	f020 0007 	bic.w	r0, r0, #7
 800a724:	1ac2      	subs	r2, r0, r3
 800a726:	bf1c      	itt	ne
 800a728:	1a1b      	subne	r3, r3, r0
 800a72a:	50a3      	strne	r3, [r4, r2]
 800a72c:	e7af      	b.n	800a68e <_malloc_r+0x22>
 800a72e:	6862      	ldr	r2, [r4, #4]
 800a730:	42a3      	cmp	r3, r4
 800a732:	bf0c      	ite	eq
 800a734:	f8c8 2000 	streq.w	r2, [r8]
 800a738:	605a      	strne	r2, [r3, #4]
 800a73a:	e7eb      	b.n	800a714 <_malloc_r+0xa8>
 800a73c:	4623      	mov	r3, r4
 800a73e:	6864      	ldr	r4, [r4, #4]
 800a740:	e7ae      	b.n	800a6a0 <_malloc_r+0x34>
 800a742:	463c      	mov	r4, r7
 800a744:	687f      	ldr	r7, [r7, #4]
 800a746:	e7b6      	b.n	800a6b6 <_malloc_r+0x4a>
 800a748:	461a      	mov	r2, r3
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	42a3      	cmp	r3, r4
 800a74e:	d1fb      	bne.n	800a748 <_malloc_r+0xdc>
 800a750:	2300      	movs	r3, #0
 800a752:	6053      	str	r3, [r2, #4]
 800a754:	e7de      	b.n	800a714 <_malloc_r+0xa8>
 800a756:	230c      	movs	r3, #12
 800a758:	4630      	mov	r0, r6
 800a75a:	6033      	str	r3, [r6, #0]
 800a75c:	f000 f80c 	bl	800a778 <__malloc_unlock>
 800a760:	e794      	b.n	800a68c <_malloc_r+0x20>
 800a762:	6005      	str	r5, [r0, #0]
 800a764:	e7d6      	b.n	800a714 <_malloc_r+0xa8>
 800a766:	bf00      	nop
 800a768:	20000bc8 	.word	0x20000bc8

0800a76c <__malloc_lock>:
 800a76c:	4801      	ldr	r0, [pc, #4]	@ (800a774 <__malloc_lock+0x8>)
 800a76e:	f002 b86e 	b.w	800c84e <__retarget_lock_acquire_recursive>
 800a772:	bf00      	nop
 800a774:	20000d0c 	.word	0x20000d0c

0800a778 <__malloc_unlock>:
 800a778:	4801      	ldr	r0, [pc, #4]	@ (800a780 <__malloc_unlock+0x8>)
 800a77a:	f002 b869 	b.w	800c850 <__retarget_lock_release_recursive>
 800a77e:	bf00      	nop
 800a780:	20000d0c 	.word	0x20000d0c

0800a784 <sulp>:
 800a784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a788:	460f      	mov	r7, r1
 800a78a:	4690      	mov	r8, r2
 800a78c:	f003 fde6 	bl	800e35c <__ulp>
 800a790:	4604      	mov	r4, r0
 800a792:	460d      	mov	r5, r1
 800a794:	f1b8 0f00 	cmp.w	r8, #0
 800a798:	d011      	beq.n	800a7be <sulp+0x3a>
 800a79a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a79e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	dd0b      	ble.n	800a7be <sulp+0x3a>
 800a7a6:	2400      	movs	r4, #0
 800a7a8:	051b      	lsls	r3, r3, #20
 800a7aa:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a7ae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a7b2:	4622      	mov	r2, r4
 800a7b4:	462b      	mov	r3, r5
 800a7b6:	f7f5 fe99 	bl	80004ec <__aeabi_dmul>
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	460d      	mov	r5, r1
 800a7be:	4620      	mov	r0, r4
 800a7c0:	4629      	mov	r1, r5
 800a7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a7c8 <_strtod_l>:
 800a7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7cc:	b09f      	sub	sp, #124	@ 0x7c
 800a7ce:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	460c      	mov	r4, r1
 800a7d4:	921a      	str	r2, [sp, #104]	@ 0x68
 800a7d6:	f04f 0a00 	mov.w	sl, #0
 800a7da:	f04f 0b00 	mov.w	fp, #0
 800a7de:	460a      	mov	r2, r1
 800a7e0:	9005      	str	r0, [sp, #20]
 800a7e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a7e4:	7811      	ldrb	r1, [r2, #0]
 800a7e6:	292b      	cmp	r1, #43	@ 0x2b
 800a7e8:	d048      	beq.n	800a87c <_strtod_l+0xb4>
 800a7ea:	d836      	bhi.n	800a85a <_strtod_l+0x92>
 800a7ec:	290d      	cmp	r1, #13
 800a7ee:	d830      	bhi.n	800a852 <_strtod_l+0x8a>
 800a7f0:	2908      	cmp	r1, #8
 800a7f2:	d830      	bhi.n	800a856 <_strtod_l+0x8e>
 800a7f4:	2900      	cmp	r1, #0
 800a7f6:	d039      	beq.n	800a86c <_strtod_l+0xa4>
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a7fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a7fe:	782a      	ldrb	r2, [r5, #0]
 800a800:	2a30      	cmp	r2, #48	@ 0x30
 800a802:	f040 80b1 	bne.w	800a968 <_strtod_l+0x1a0>
 800a806:	786a      	ldrb	r2, [r5, #1]
 800a808:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a80c:	2a58      	cmp	r2, #88	@ 0x58
 800a80e:	d16c      	bne.n	800a8ea <_strtod_l+0x122>
 800a810:	9302      	str	r3, [sp, #8]
 800a812:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a814:	4a8e      	ldr	r2, [pc, #568]	@ (800aa50 <_strtod_l+0x288>)
 800a816:	9301      	str	r3, [sp, #4]
 800a818:	ab1a      	add	r3, sp, #104	@ 0x68
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	9805      	ldr	r0, [sp, #20]
 800a81e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a820:	a919      	add	r1, sp, #100	@ 0x64
 800a822:	f002 ff45 	bl	800d6b0 <__gethex>
 800a826:	f010 060f 	ands.w	r6, r0, #15
 800a82a:	4604      	mov	r4, r0
 800a82c:	d005      	beq.n	800a83a <_strtod_l+0x72>
 800a82e:	2e06      	cmp	r6, #6
 800a830:	d126      	bne.n	800a880 <_strtod_l+0xb8>
 800a832:	2300      	movs	r3, #0
 800a834:	3501      	adds	r5, #1
 800a836:	9519      	str	r5, [sp, #100]	@ 0x64
 800a838:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a83a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f040 8584 	bne.w	800b34a <_strtod_l+0xb82>
 800a842:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a844:	b1bb      	cbz	r3, 800a876 <_strtod_l+0xae>
 800a846:	4650      	mov	r0, sl
 800a848:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800a84c:	b01f      	add	sp, #124	@ 0x7c
 800a84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a852:	2920      	cmp	r1, #32
 800a854:	d1d0      	bne.n	800a7f8 <_strtod_l+0x30>
 800a856:	3201      	adds	r2, #1
 800a858:	e7c3      	b.n	800a7e2 <_strtod_l+0x1a>
 800a85a:	292d      	cmp	r1, #45	@ 0x2d
 800a85c:	d1cc      	bne.n	800a7f8 <_strtod_l+0x30>
 800a85e:	2101      	movs	r1, #1
 800a860:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a862:	1c51      	adds	r1, r2, #1
 800a864:	9119      	str	r1, [sp, #100]	@ 0x64
 800a866:	7852      	ldrb	r2, [r2, #1]
 800a868:	2a00      	cmp	r2, #0
 800a86a:	d1c7      	bne.n	800a7fc <_strtod_l+0x34>
 800a86c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a86e:	9419      	str	r4, [sp, #100]	@ 0x64
 800a870:	2b00      	cmp	r3, #0
 800a872:	f040 8568 	bne.w	800b346 <_strtod_l+0xb7e>
 800a876:	4650      	mov	r0, sl
 800a878:	4659      	mov	r1, fp
 800a87a:	e7e7      	b.n	800a84c <_strtod_l+0x84>
 800a87c:	2100      	movs	r1, #0
 800a87e:	e7ef      	b.n	800a860 <_strtod_l+0x98>
 800a880:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a882:	b13a      	cbz	r2, 800a894 <_strtod_l+0xcc>
 800a884:	2135      	movs	r1, #53	@ 0x35
 800a886:	a81c      	add	r0, sp, #112	@ 0x70
 800a888:	f003 fe58 	bl	800e53c <__copybits>
 800a88c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a88e:	9805      	ldr	r0, [sp, #20]
 800a890:	f003 fa32 	bl	800dcf8 <_Bfree>
 800a894:	3e01      	subs	r6, #1
 800a896:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a898:	2e04      	cmp	r6, #4
 800a89a:	d806      	bhi.n	800a8aa <_strtod_l+0xe2>
 800a89c:	e8df f006 	tbb	[pc, r6]
 800a8a0:	201d0314 	.word	0x201d0314
 800a8a4:	14          	.byte	0x14
 800a8a5:	00          	.byte	0x00
 800a8a6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a8aa:	05e1      	lsls	r1, r4, #23
 800a8ac:	bf48      	it	mi
 800a8ae:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a8b2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a8b6:	0d1b      	lsrs	r3, r3, #20
 800a8b8:	051b      	lsls	r3, r3, #20
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1bd      	bne.n	800a83a <_strtod_l+0x72>
 800a8be:	f001 ff9b 	bl	800c7f8 <__errno>
 800a8c2:	2322      	movs	r3, #34	@ 0x22
 800a8c4:	6003      	str	r3, [r0, #0]
 800a8c6:	e7b8      	b.n	800a83a <_strtod_l+0x72>
 800a8c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a8cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a8d0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a8d4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a8d8:	e7e7      	b.n	800a8aa <_strtod_l+0xe2>
 800a8da:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800aa54 <_strtod_l+0x28c>
 800a8de:	e7e4      	b.n	800a8aa <_strtod_l+0xe2>
 800a8e0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a8e4:	f04f 3aff 	mov.w	sl, #4294967295
 800a8e8:	e7df      	b.n	800a8aa <_strtod_l+0xe2>
 800a8ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a8ec:	1c5a      	adds	r2, r3, #1
 800a8ee:	9219      	str	r2, [sp, #100]	@ 0x64
 800a8f0:	785b      	ldrb	r3, [r3, #1]
 800a8f2:	2b30      	cmp	r3, #48	@ 0x30
 800a8f4:	d0f9      	beq.n	800a8ea <_strtod_l+0x122>
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d09f      	beq.n	800a83a <_strtod_l+0x72>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a900:	220a      	movs	r2, #10
 800a902:	930c      	str	r3, [sp, #48]	@ 0x30
 800a904:	2300      	movs	r3, #0
 800a906:	461f      	mov	r7, r3
 800a908:	9308      	str	r3, [sp, #32]
 800a90a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a90c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a90e:	7805      	ldrb	r5, [r0, #0]
 800a910:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a914:	b2d9      	uxtb	r1, r3
 800a916:	2909      	cmp	r1, #9
 800a918:	d928      	bls.n	800a96c <_strtod_l+0x1a4>
 800a91a:	2201      	movs	r2, #1
 800a91c:	494e      	ldr	r1, [pc, #312]	@ (800aa58 <_strtod_l+0x290>)
 800a91e:	f001 fec1 	bl	800c6a4 <strncmp>
 800a922:	2800      	cmp	r0, #0
 800a924:	d032      	beq.n	800a98c <_strtod_l+0x1c4>
 800a926:	2000      	movs	r0, #0
 800a928:	462a      	mov	r2, r5
 800a92a:	4681      	mov	r9, r0
 800a92c:	463d      	mov	r5, r7
 800a92e:	4603      	mov	r3, r0
 800a930:	2a65      	cmp	r2, #101	@ 0x65
 800a932:	d001      	beq.n	800a938 <_strtod_l+0x170>
 800a934:	2a45      	cmp	r2, #69	@ 0x45
 800a936:	d114      	bne.n	800a962 <_strtod_l+0x19a>
 800a938:	b91d      	cbnz	r5, 800a942 <_strtod_l+0x17a>
 800a93a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a93c:	4302      	orrs	r2, r0
 800a93e:	d095      	beq.n	800a86c <_strtod_l+0xa4>
 800a940:	2500      	movs	r5, #0
 800a942:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a944:	1c62      	adds	r2, r4, #1
 800a946:	9219      	str	r2, [sp, #100]	@ 0x64
 800a948:	7862      	ldrb	r2, [r4, #1]
 800a94a:	2a2b      	cmp	r2, #43	@ 0x2b
 800a94c:	d077      	beq.n	800aa3e <_strtod_l+0x276>
 800a94e:	2a2d      	cmp	r2, #45	@ 0x2d
 800a950:	d07b      	beq.n	800aa4a <_strtod_l+0x282>
 800a952:	f04f 0c00 	mov.w	ip, #0
 800a956:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a95a:	2909      	cmp	r1, #9
 800a95c:	f240 8082 	bls.w	800aa64 <_strtod_l+0x29c>
 800a960:	9419      	str	r4, [sp, #100]	@ 0x64
 800a962:	f04f 0800 	mov.w	r8, #0
 800a966:	e0a2      	b.n	800aaae <_strtod_l+0x2e6>
 800a968:	2300      	movs	r3, #0
 800a96a:	e7c7      	b.n	800a8fc <_strtod_l+0x134>
 800a96c:	2f08      	cmp	r7, #8
 800a96e:	bfd5      	itete	le
 800a970:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a972:	9908      	ldrgt	r1, [sp, #32]
 800a974:	fb02 3301 	mlale	r3, r2, r1, r3
 800a978:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a97c:	f100 0001 	add.w	r0, r0, #1
 800a980:	bfd4      	ite	le
 800a982:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a984:	9308      	strgt	r3, [sp, #32]
 800a986:	3701      	adds	r7, #1
 800a988:	9019      	str	r0, [sp, #100]	@ 0x64
 800a98a:	e7bf      	b.n	800a90c <_strtod_l+0x144>
 800a98c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a98e:	1c5a      	adds	r2, r3, #1
 800a990:	9219      	str	r2, [sp, #100]	@ 0x64
 800a992:	785a      	ldrb	r2, [r3, #1]
 800a994:	b37f      	cbz	r7, 800a9f6 <_strtod_l+0x22e>
 800a996:	4681      	mov	r9, r0
 800a998:	463d      	mov	r5, r7
 800a99a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a99e:	2b09      	cmp	r3, #9
 800a9a0:	d912      	bls.n	800a9c8 <_strtod_l+0x200>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e7c4      	b.n	800a930 <_strtod_l+0x168>
 800a9a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	1c5a      	adds	r2, r3, #1
 800a9ac:	9219      	str	r2, [sp, #100]	@ 0x64
 800a9ae:	785a      	ldrb	r2, [r3, #1]
 800a9b0:	2a30      	cmp	r2, #48	@ 0x30
 800a9b2:	d0f8      	beq.n	800a9a6 <_strtod_l+0x1de>
 800a9b4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a9b8:	2b08      	cmp	r3, #8
 800a9ba:	f200 84cb 	bhi.w	800b354 <_strtod_l+0xb8c>
 800a9be:	4681      	mov	r9, r0
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	4605      	mov	r5, r0
 800a9c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9c6:	930c      	str	r3, [sp, #48]	@ 0x30
 800a9c8:	3a30      	subs	r2, #48	@ 0x30
 800a9ca:	f100 0301 	add.w	r3, r0, #1
 800a9ce:	d02a      	beq.n	800aa26 <_strtod_l+0x25e>
 800a9d0:	4499      	add	r9, r3
 800a9d2:	210a      	movs	r1, #10
 800a9d4:	462b      	mov	r3, r5
 800a9d6:	eb00 0c05 	add.w	ip, r0, r5
 800a9da:	4563      	cmp	r3, ip
 800a9dc:	d10d      	bne.n	800a9fa <_strtod_l+0x232>
 800a9de:	1c69      	adds	r1, r5, #1
 800a9e0:	4401      	add	r1, r0
 800a9e2:	4428      	add	r0, r5
 800a9e4:	2808      	cmp	r0, #8
 800a9e6:	dc16      	bgt.n	800aa16 <_strtod_l+0x24e>
 800a9e8:	230a      	movs	r3, #10
 800a9ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a9ec:	fb03 2300 	mla	r3, r3, r0, r2
 800a9f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	e018      	b.n	800aa28 <_strtod_l+0x260>
 800a9f6:	4638      	mov	r0, r7
 800a9f8:	e7da      	b.n	800a9b0 <_strtod_l+0x1e8>
 800a9fa:	2b08      	cmp	r3, #8
 800a9fc:	f103 0301 	add.w	r3, r3, #1
 800aa00:	dc03      	bgt.n	800aa0a <_strtod_l+0x242>
 800aa02:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800aa04:	434e      	muls	r6, r1
 800aa06:	960a      	str	r6, [sp, #40]	@ 0x28
 800aa08:	e7e7      	b.n	800a9da <_strtod_l+0x212>
 800aa0a:	2b10      	cmp	r3, #16
 800aa0c:	bfde      	ittt	le
 800aa0e:	9e08      	ldrle	r6, [sp, #32]
 800aa10:	434e      	mulle	r6, r1
 800aa12:	9608      	strle	r6, [sp, #32]
 800aa14:	e7e1      	b.n	800a9da <_strtod_l+0x212>
 800aa16:	280f      	cmp	r0, #15
 800aa18:	dceb      	bgt.n	800a9f2 <_strtod_l+0x22a>
 800aa1a:	230a      	movs	r3, #10
 800aa1c:	9808      	ldr	r0, [sp, #32]
 800aa1e:	fb03 2300 	mla	r3, r3, r0, r2
 800aa22:	9308      	str	r3, [sp, #32]
 800aa24:	e7e5      	b.n	800a9f2 <_strtod_l+0x22a>
 800aa26:	4629      	mov	r1, r5
 800aa28:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aa2a:	460d      	mov	r5, r1
 800aa2c:	1c50      	adds	r0, r2, #1
 800aa2e:	9019      	str	r0, [sp, #100]	@ 0x64
 800aa30:	7852      	ldrb	r2, [r2, #1]
 800aa32:	4618      	mov	r0, r3
 800aa34:	e7b1      	b.n	800a99a <_strtod_l+0x1d2>
 800aa36:	f04f 0900 	mov.w	r9, #0
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e77d      	b.n	800a93a <_strtod_l+0x172>
 800aa3e:	f04f 0c00 	mov.w	ip, #0
 800aa42:	1ca2      	adds	r2, r4, #2
 800aa44:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa46:	78a2      	ldrb	r2, [r4, #2]
 800aa48:	e785      	b.n	800a956 <_strtod_l+0x18e>
 800aa4a:	f04f 0c01 	mov.w	ip, #1
 800aa4e:	e7f8      	b.n	800aa42 <_strtod_l+0x27a>
 800aa50:	0800f9c8 	.word	0x0800f9c8
 800aa54:	7ff00000 	.word	0x7ff00000
 800aa58:	0800f052 	.word	0x0800f052
 800aa5c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aa5e:	1c51      	adds	r1, r2, #1
 800aa60:	9119      	str	r1, [sp, #100]	@ 0x64
 800aa62:	7852      	ldrb	r2, [r2, #1]
 800aa64:	2a30      	cmp	r2, #48	@ 0x30
 800aa66:	d0f9      	beq.n	800aa5c <_strtod_l+0x294>
 800aa68:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800aa6c:	2908      	cmp	r1, #8
 800aa6e:	f63f af78 	bhi.w	800a962 <_strtod_l+0x19a>
 800aa72:	f04f 080a 	mov.w	r8, #10
 800aa76:	3a30      	subs	r2, #48	@ 0x30
 800aa78:	920e      	str	r2, [sp, #56]	@ 0x38
 800aa7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aa7c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800aa7e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aa80:	1c56      	adds	r6, r2, #1
 800aa82:	9619      	str	r6, [sp, #100]	@ 0x64
 800aa84:	7852      	ldrb	r2, [r2, #1]
 800aa86:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800aa8a:	f1be 0f09 	cmp.w	lr, #9
 800aa8e:	d939      	bls.n	800ab04 <_strtod_l+0x33c>
 800aa90:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800aa92:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800aa96:	1a76      	subs	r6, r6, r1
 800aa98:	2e08      	cmp	r6, #8
 800aa9a:	dc03      	bgt.n	800aaa4 <_strtod_l+0x2dc>
 800aa9c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800aa9e:	4588      	cmp	r8, r1
 800aaa0:	bfa8      	it	ge
 800aaa2:	4688      	movge	r8, r1
 800aaa4:	f1bc 0f00 	cmp.w	ip, #0
 800aaa8:	d001      	beq.n	800aaae <_strtod_l+0x2e6>
 800aaaa:	f1c8 0800 	rsb	r8, r8, #0
 800aaae:	2d00      	cmp	r5, #0
 800aab0:	d14e      	bne.n	800ab50 <_strtod_l+0x388>
 800aab2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aab4:	4308      	orrs	r0, r1
 800aab6:	f47f aec0 	bne.w	800a83a <_strtod_l+0x72>
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	f47f aed6 	bne.w	800a86c <_strtod_l+0xa4>
 800aac0:	2a69      	cmp	r2, #105	@ 0x69
 800aac2:	d028      	beq.n	800ab16 <_strtod_l+0x34e>
 800aac4:	dc25      	bgt.n	800ab12 <_strtod_l+0x34a>
 800aac6:	2a49      	cmp	r2, #73	@ 0x49
 800aac8:	d025      	beq.n	800ab16 <_strtod_l+0x34e>
 800aaca:	2a4e      	cmp	r2, #78	@ 0x4e
 800aacc:	f47f aece 	bne.w	800a86c <_strtod_l+0xa4>
 800aad0:	499a      	ldr	r1, [pc, #616]	@ (800ad3c <_strtod_l+0x574>)
 800aad2:	a819      	add	r0, sp, #100	@ 0x64
 800aad4:	f003 f80e 	bl	800daf4 <__match>
 800aad8:	2800      	cmp	r0, #0
 800aada:	f43f aec7 	beq.w	800a86c <_strtod_l+0xa4>
 800aade:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	2b28      	cmp	r3, #40	@ 0x28
 800aae4:	d12e      	bne.n	800ab44 <_strtod_l+0x37c>
 800aae6:	4996      	ldr	r1, [pc, #600]	@ (800ad40 <_strtod_l+0x578>)
 800aae8:	aa1c      	add	r2, sp, #112	@ 0x70
 800aaea:	a819      	add	r0, sp, #100	@ 0x64
 800aaec:	f003 f816 	bl	800db1c <__hexnan>
 800aaf0:	2805      	cmp	r0, #5
 800aaf2:	d127      	bne.n	800ab44 <_strtod_l+0x37c>
 800aaf4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aaf6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800aafa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800aafe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ab02:	e69a      	b.n	800a83a <_strtod_l+0x72>
 800ab04:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ab06:	fb08 2101 	mla	r1, r8, r1, r2
 800ab0a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ab0e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab10:	e7b5      	b.n	800aa7e <_strtod_l+0x2b6>
 800ab12:	2a6e      	cmp	r2, #110	@ 0x6e
 800ab14:	e7da      	b.n	800aacc <_strtod_l+0x304>
 800ab16:	498b      	ldr	r1, [pc, #556]	@ (800ad44 <_strtod_l+0x57c>)
 800ab18:	a819      	add	r0, sp, #100	@ 0x64
 800ab1a:	f002 ffeb 	bl	800daf4 <__match>
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	f43f aea4 	beq.w	800a86c <_strtod_l+0xa4>
 800ab24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab26:	4988      	ldr	r1, [pc, #544]	@ (800ad48 <_strtod_l+0x580>)
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	a819      	add	r0, sp, #100	@ 0x64
 800ab2c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ab2e:	f002 ffe1 	bl	800daf4 <__match>
 800ab32:	b910      	cbnz	r0, 800ab3a <_strtod_l+0x372>
 800ab34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab36:	3301      	adds	r3, #1
 800ab38:	9319      	str	r3, [sp, #100]	@ 0x64
 800ab3a:	f04f 0a00 	mov.w	sl, #0
 800ab3e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800ad4c <_strtod_l+0x584>
 800ab42:	e67a      	b.n	800a83a <_strtod_l+0x72>
 800ab44:	4882      	ldr	r0, [pc, #520]	@ (800ad50 <_strtod_l+0x588>)
 800ab46:	f001 fea9 	bl	800c89c <nan>
 800ab4a:	4682      	mov	sl, r0
 800ab4c:	468b      	mov	fp, r1
 800ab4e:	e674      	b.n	800a83a <_strtod_l+0x72>
 800ab50:	eba8 0309 	sub.w	r3, r8, r9
 800ab54:	2f00      	cmp	r7, #0
 800ab56:	bf08      	it	eq
 800ab58:	462f      	moveq	r7, r5
 800ab5a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ab5c:	2d10      	cmp	r5, #16
 800ab5e:	462c      	mov	r4, r5
 800ab60:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab62:	bfa8      	it	ge
 800ab64:	2410      	movge	r4, #16
 800ab66:	f7f5 fc47 	bl	80003f8 <__aeabi_ui2d>
 800ab6a:	2d09      	cmp	r5, #9
 800ab6c:	4682      	mov	sl, r0
 800ab6e:	468b      	mov	fp, r1
 800ab70:	dc11      	bgt.n	800ab96 <_strtod_l+0x3ce>
 800ab72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f43f ae60 	beq.w	800a83a <_strtod_l+0x72>
 800ab7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab7c:	dd76      	ble.n	800ac6c <_strtod_l+0x4a4>
 800ab7e:	2b16      	cmp	r3, #22
 800ab80:	dc5d      	bgt.n	800ac3e <_strtod_l+0x476>
 800ab82:	4974      	ldr	r1, [pc, #464]	@ (800ad54 <_strtod_l+0x58c>)
 800ab84:	4652      	mov	r2, sl
 800ab86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ab8a:	465b      	mov	r3, fp
 800ab8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab90:	f7f5 fcac 	bl	80004ec <__aeabi_dmul>
 800ab94:	e7d9      	b.n	800ab4a <_strtod_l+0x382>
 800ab96:	4b6f      	ldr	r3, [pc, #444]	@ (800ad54 <_strtod_l+0x58c>)
 800ab98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800aba0:	f7f5 fca4 	bl	80004ec <__aeabi_dmul>
 800aba4:	4682      	mov	sl, r0
 800aba6:	9808      	ldr	r0, [sp, #32]
 800aba8:	468b      	mov	fp, r1
 800abaa:	f7f5 fc25 	bl	80003f8 <__aeabi_ui2d>
 800abae:	4602      	mov	r2, r0
 800abb0:	460b      	mov	r3, r1
 800abb2:	4650      	mov	r0, sl
 800abb4:	4659      	mov	r1, fp
 800abb6:	f7f5 fae3 	bl	8000180 <__adddf3>
 800abba:	2d0f      	cmp	r5, #15
 800abbc:	4682      	mov	sl, r0
 800abbe:	468b      	mov	fp, r1
 800abc0:	ddd7      	ble.n	800ab72 <_strtod_l+0x3aa>
 800abc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abc4:	1b2c      	subs	r4, r5, r4
 800abc6:	441c      	add	r4, r3
 800abc8:	2c00      	cmp	r4, #0
 800abca:	f340 8096 	ble.w	800acfa <_strtod_l+0x532>
 800abce:	f014 030f 	ands.w	r3, r4, #15
 800abd2:	d00a      	beq.n	800abea <_strtod_l+0x422>
 800abd4:	495f      	ldr	r1, [pc, #380]	@ (800ad54 <_strtod_l+0x58c>)
 800abd6:	4652      	mov	r2, sl
 800abd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800abdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abe0:	465b      	mov	r3, fp
 800abe2:	f7f5 fc83 	bl	80004ec <__aeabi_dmul>
 800abe6:	4682      	mov	sl, r0
 800abe8:	468b      	mov	fp, r1
 800abea:	f034 040f 	bics.w	r4, r4, #15
 800abee:	d073      	beq.n	800acd8 <_strtod_l+0x510>
 800abf0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800abf4:	dd48      	ble.n	800ac88 <_strtod_l+0x4c0>
 800abf6:	2400      	movs	r4, #0
 800abf8:	46a0      	mov	r8, r4
 800abfa:	46a1      	mov	r9, r4
 800abfc:	940a      	str	r4, [sp, #40]	@ 0x28
 800abfe:	2322      	movs	r3, #34	@ 0x22
 800ac00:	f04f 0a00 	mov.w	sl, #0
 800ac04:	9a05      	ldr	r2, [sp, #20]
 800ac06:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800ad4c <_strtod_l+0x584>
 800ac0a:	6013      	str	r3, [r2, #0]
 800ac0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f43f ae13 	beq.w	800a83a <_strtod_l+0x72>
 800ac14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac16:	9805      	ldr	r0, [sp, #20]
 800ac18:	f003 f86e 	bl	800dcf8 <_Bfree>
 800ac1c:	4649      	mov	r1, r9
 800ac1e:	9805      	ldr	r0, [sp, #20]
 800ac20:	f003 f86a 	bl	800dcf8 <_Bfree>
 800ac24:	4641      	mov	r1, r8
 800ac26:	9805      	ldr	r0, [sp, #20]
 800ac28:	f003 f866 	bl	800dcf8 <_Bfree>
 800ac2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac2e:	9805      	ldr	r0, [sp, #20]
 800ac30:	f003 f862 	bl	800dcf8 <_Bfree>
 800ac34:	4621      	mov	r1, r4
 800ac36:	9805      	ldr	r0, [sp, #20]
 800ac38:	f003 f85e 	bl	800dcf8 <_Bfree>
 800ac3c:	e5fd      	b.n	800a83a <_strtod_l+0x72>
 800ac3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ac44:	4293      	cmp	r3, r2
 800ac46:	dbbc      	blt.n	800abc2 <_strtod_l+0x3fa>
 800ac48:	4c42      	ldr	r4, [pc, #264]	@ (800ad54 <_strtod_l+0x58c>)
 800ac4a:	f1c5 050f 	rsb	r5, r5, #15
 800ac4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ac52:	4652      	mov	r2, sl
 800ac54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac58:	465b      	mov	r3, fp
 800ac5a:	f7f5 fc47 	bl	80004ec <__aeabi_dmul>
 800ac5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac60:	1b5d      	subs	r5, r3, r5
 800ac62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ac66:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ac6a:	e791      	b.n	800ab90 <_strtod_l+0x3c8>
 800ac6c:	3316      	adds	r3, #22
 800ac6e:	dba8      	blt.n	800abc2 <_strtod_l+0x3fa>
 800ac70:	4b38      	ldr	r3, [pc, #224]	@ (800ad54 <_strtod_l+0x58c>)
 800ac72:	eba9 0808 	sub.w	r8, r9, r8
 800ac76:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ac7a:	4650      	mov	r0, sl
 800ac7c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ac80:	4659      	mov	r1, fp
 800ac82:	f7f5 fd5d 	bl	8000740 <__aeabi_ddiv>
 800ac86:	e760      	b.n	800ab4a <_strtod_l+0x382>
 800ac88:	4b33      	ldr	r3, [pc, #204]	@ (800ad58 <_strtod_l+0x590>)
 800ac8a:	4650      	mov	r0, sl
 800ac8c:	9308      	str	r3, [sp, #32]
 800ac8e:	2300      	movs	r3, #0
 800ac90:	4659      	mov	r1, fp
 800ac92:	461e      	mov	r6, r3
 800ac94:	1124      	asrs	r4, r4, #4
 800ac96:	2c01      	cmp	r4, #1
 800ac98:	dc21      	bgt.n	800acde <_strtod_l+0x516>
 800ac9a:	b10b      	cbz	r3, 800aca0 <_strtod_l+0x4d8>
 800ac9c:	4682      	mov	sl, r0
 800ac9e:	468b      	mov	fp, r1
 800aca0:	492d      	ldr	r1, [pc, #180]	@ (800ad58 <_strtod_l+0x590>)
 800aca2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800aca6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800acaa:	4652      	mov	r2, sl
 800acac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acb0:	465b      	mov	r3, fp
 800acb2:	f7f5 fc1b 	bl	80004ec <__aeabi_dmul>
 800acb6:	4b25      	ldr	r3, [pc, #148]	@ (800ad4c <_strtod_l+0x584>)
 800acb8:	460a      	mov	r2, r1
 800acba:	400b      	ands	r3, r1
 800acbc:	4927      	ldr	r1, [pc, #156]	@ (800ad5c <_strtod_l+0x594>)
 800acbe:	4682      	mov	sl, r0
 800acc0:	428b      	cmp	r3, r1
 800acc2:	d898      	bhi.n	800abf6 <_strtod_l+0x42e>
 800acc4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800acc8:	428b      	cmp	r3, r1
 800acca:	bf86      	itte	hi
 800accc:	f04f 3aff 	movhi.w	sl, #4294967295
 800acd0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800ad60 <_strtod_l+0x598>
 800acd4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800acd8:	2300      	movs	r3, #0
 800acda:	9308      	str	r3, [sp, #32]
 800acdc:	e07a      	b.n	800add4 <_strtod_l+0x60c>
 800acde:	07e2      	lsls	r2, r4, #31
 800ace0:	d505      	bpl.n	800acee <_strtod_l+0x526>
 800ace2:	9b08      	ldr	r3, [sp, #32]
 800ace4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace8:	f7f5 fc00 	bl	80004ec <__aeabi_dmul>
 800acec:	2301      	movs	r3, #1
 800acee:	9a08      	ldr	r2, [sp, #32]
 800acf0:	3601      	adds	r6, #1
 800acf2:	3208      	adds	r2, #8
 800acf4:	1064      	asrs	r4, r4, #1
 800acf6:	9208      	str	r2, [sp, #32]
 800acf8:	e7cd      	b.n	800ac96 <_strtod_l+0x4ce>
 800acfa:	d0ed      	beq.n	800acd8 <_strtod_l+0x510>
 800acfc:	4264      	negs	r4, r4
 800acfe:	f014 020f 	ands.w	r2, r4, #15
 800ad02:	d00a      	beq.n	800ad1a <_strtod_l+0x552>
 800ad04:	4b13      	ldr	r3, [pc, #76]	@ (800ad54 <_strtod_l+0x58c>)
 800ad06:	4650      	mov	r0, sl
 800ad08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad0c:	4659      	mov	r1, fp
 800ad0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad12:	f7f5 fd15 	bl	8000740 <__aeabi_ddiv>
 800ad16:	4682      	mov	sl, r0
 800ad18:	468b      	mov	fp, r1
 800ad1a:	1124      	asrs	r4, r4, #4
 800ad1c:	d0dc      	beq.n	800acd8 <_strtod_l+0x510>
 800ad1e:	2c1f      	cmp	r4, #31
 800ad20:	dd20      	ble.n	800ad64 <_strtod_l+0x59c>
 800ad22:	2400      	movs	r4, #0
 800ad24:	46a0      	mov	r8, r4
 800ad26:	46a1      	mov	r9, r4
 800ad28:	940a      	str	r4, [sp, #40]	@ 0x28
 800ad2a:	2322      	movs	r3, #34	@ 0x22
 800ad2c:	9a05      	ldr	r2, [sp, #20]
 800ad2e:	f04f 0a00 	mov.w	sl, #0
 800ad32:	f04f 0b00 	mov.w	fp, #0
 800ad36:	6013      	str	r3, [r2, #0]
 800ad38:	e768      	b.n	800ac0c <_strtod_l+0x444>
 800ad3a:	bf00      	nop
 800ad3c:	0800fb16 	.word	0x0800fb16
 800ad40:	0800f9b4 	.word	0x0800f9b4
 800ad44:	0800fb0e 	.word	0x0800fb0e
 800ad48:	0800fb49 	.word	0x0800fb49
 800ad4c:	7ff00000 	.word	0x7ff00000
 800ad50:	0800f240 	.word	0x0800f240
 800ad54:	0800fcc0 	.word	0x0800fcc0
 800ad58:	0800fc98 	.word	0x0800fc98
 800ad5c:	7ca00000 	.word	0x7ca00000
 800ad60:	7fefffff 	.word	0x7fefffff
 800ad64:	f014 0310 	ands.w	r3, r4, #16
 800ad68:	bf18      	it	ne
 800ad6a:	236a      	movne	r3, #106	@ 0x6a
 800ad6c:	4650      	mov	r0, sl
 800ad6e:	9308      	str	r3, [sp, #32]
 800ad70:	4659      	mov	r1, fp
 800ad72:	2300      	movs	r3, #0
 800ad74:	4ea9      	ldr	r6, [pc, #676]	@ (800b01c <_strtod_l+0x854>)
 800ad76:	07e2      	lsls	r2, r4, #31
 800ad78:	d504      	bpl.n	800ad84 <_strtod_l+0x5bc>
 800ad7a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad7e:	f7f5 fbb5 	bl	80004ec <__aeabi_dmul>
 800ad82:	2301      	movs	r3, #1
 800ad84:	1064      	asrs	r4, r4, #1
 800ad86:	f106 0608 	add.w	r6, r6, #8
 800ad8a:	d1f4      	bne.n	800ad76 <_strtod_l+0x5ae>
 800ad8c:	b10b      	cbz	r3, 800ad92 <_strtod_l+0x5ca>
 800ad8e:	4682      	mov	sl, r0
 800ad90:	468b      	mov	fp, r1
 800ad92:	9b08      	ldr	r3, [sp, #32]
 800ad94:	b1b3      	cbz	r3, 800adc4 <_strtod_l+0x5fc>
 800ad96:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ad9a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	4659      	mov	r1, fp
 800ada2:	dd0f      	ble.n	800adc4 <_strtod_l+0x5fc>
 800ada4:	2b1f      	cmp	r3, #31
 800ada6:	dd57      	ble.n	800ae58 <_strtod_l+0x690>
 800ada8:	2b34      	cmp	r3, #52	@ 0x34
 800adaa:	bfd8      	it	le
 800adac:	f04f 33ff 	movle.w	r3, #4294967295
 800adb0:	f04f 0a00 	mov.w	sl, #0
 800adb4:	bfcf      	iteee	gt
 800adb6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800adba:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800adbe:	4093      	lslle	r3, r2
 800adc0:	ea03 0b01 	andle.w	fp, r3, r1
 800adc4:	2200      	movs	r2, #0
 800adc6:	2300      	movs	r3, #0
 800adc8:	4650      	mov	r0, sl
 800adca:	4659      	mov	r1, fp
 800adcc:	f7f5 fdf6 	bl	80009bc <__aeabi_dcmpeq>
 800add0:	2800      	cmp	r0, #0
 800add2:	d1a6      	bne.n	800ad22 <_strtod_l+0x55a>
 800add4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800add6:	463a      	mov	r2, r7
 800add8:	9300      	str	r3, [sp, #0]
 800adda:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800addc:	462b      	mov	r3, r5
 800adde:	9805      	ldr	r0, [sp, #20]
 800ade0:	f002 fff2 	bl	800ddc8 <__s2b>
 800ade4:	900a      	str	r0, [sp, #40]	@ 0x28
 800ade6:	2800      	cmp	r0, #0
 800ade8:	f43f af05 	beq.w	800abf6 <_strtod_l+0x42e>
 800adec:	2400      	movs	r4, #0
 800adee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adf0:	eba9 0308 	sub.w	r3, r9, r8
 800adf4:	2a00      	cmp	r2, #0
 800adf6:	bfa8      	it	ge
 800adf8:	2300      	movge	r3, #0
 800adfa:	46a0      	mov	r8, r4
 800adfc:	9312      	str	r3, [sp, #72]	@ 0x48
 800adfe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ae02:	9316      	str	r3, [sp, #88]	@ 0x58
 800ae04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae06:	9805      	ldr	r0, [sp, #20]
 800ae08:	6859      	ldr	r1, [r3, #4]
 800ae0a:	f002 ff35 	bl	800dc78 <_Balloc>
 800ae0e:	4681      	mov	r9, r0
 800ae10:	2800      	cmp	r0, #0
 800ae12:	f43f aef4 	beq.w	800abfe <_strtod_l+0x436>
 800ae16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae18:	300c      	adds	r0, #12
 800ae1a:	691a      	ldr	r2, [r3, #16]
 800ae1c:	f103 010c 	add.w	r1, r3, #12
 800ae20:	3202      	adds	r2, #2
 800ae22:	0092      	lsls	r2, r2, #2
 800ae24:	f001 fd2b 	bl	800c87e <memcpy>
 800ae28:	ab1c      	add	r3, sp, #112	@ 0x70
 800ae2a:	9301      	str	r3, [sp, #4]
 800ae2c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	4652      	mov	r2, sl
 800ae32:	465b      	mov	r3, fp
 800ae34:	9805      	ldr	r0, [sp, #20]
 800ae36:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ae3a:	f003 faf7 	bl	800e42c <__d2b>
 800ae3e:	901a      	str	r0, [sp, #104]	@ 0x68
 800ae40:	2800      	cmp	r0, #0
 800ae42:	f43f aedc 	beq.w	800abfe <_strtod_l+0x436>
 800ae46:	2101      	movs	r1, #1
 800ae48:	9805      	ldr	r0, [sp, #20]
 800ae4a:	f003 f853 	bl	800def4 <__i2b>
 800ae4e:	4680      	mov	r8, r0
 800ae50:	b948      	cbnz	r0, 800ae66 <_strtod_l+0x69e>
 800ae52:	f04f 0800 	mov.w	r8, #0
 800ae56:	e6d2      	b.n	800abfe <_strtod_l+0x436>
 800ae58:	f04f 32ff 	mov.w	r2, #4294967295
 800ae5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae60:	ea03 0a0a 	and.w	sl, r3, sl
 800ae64:	e7ae      	b.n	800adc4 <_strtod_l+0x5fc>
 800ae66:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ae68:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ae6a:	2d00      	cmp	r5, #0
 800ae6c:	bfab      	itete	ge
 800ae6e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ae70:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ae72:	18ef      	addge	r7, r5, r3
 800ae74:	1b5e      	sublt	r6, r3, r5
 800ae76:	9b08      	ldr	r3, [sp, #32]
 800ae78:	bfa8      	it	ge
 800ae7a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ae7c:	eba5 0503 	sub.w	r5, r5, r3
 800ae80:	4415      	add	r5, r2
 800ae82:	4b67      	ldr	r3, [pc, #412]	@ (800b020 <_strtod_l+0x858>)
 800ae84:	f105 35ff 	add.w	r5, r5, #4294967295
 800ae88:	bfb8      	it	lt
 800ae8a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ae8c:	429d      	cmp	r5, r3
 800ae8e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ae92:	da50      	bge.n	800af36 <_strtod_l+0x76e>
 800ae94:	1b5b      	subs	r3, r3, r5
 800ae96:	2b1f      	cmp	r3, #31
 800ae98:	f04f 0101 	mov.w	r1, #1
 800ae9c:	eba2 0203 	sub.w	r2, r2, r3
 800aea0:	dc3d      	bgt.n	800af1e <_strtod_l+0x756>
 800aea2:	fa01 f303 	lsl.w	r3, r1, r3
 800aea6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aea8:	2300      	movs	r3, #0
 800aeaa:	9310      	str	r3, [sp, #64]	@ 0x40
 800aeac:	18bd      	adds	r5, r7, r2
 800aeae:	9b08      	ldr	r3, [sp, #32]
 800aeb0:	42af      	cmp	r7, r5
 800aeb2:	4416      	add	r6, r2
 800aeb4:	441e      	add	r6, r3
 800aeb6:	463b      	mov	r3, r7
 800aeb8:	bfa8      	it	ge
 800aeba:	462b      	movge	r3, r5
 800aebc:	42b3      	cmp	r3, r6
 800aebe:	bfa8      	it	ge
 800aec0:	4633      	movge	r3, r6
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	bfc2      	ittt	gt
 800aec6:	1aed      	subgt	r5, r5, r3
 800aec8:	1af6      	subgt	r6, r6, r3
 800aeca:	1aff      	subgt	r7, r7, r3
 800aecc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aece:	2b00      	cmp	r3, #0
 800aed0:	dd16      	ble.n	800af00 <_strtod_l+0x738>
 800aed2:	4641      	mov	r1, r8
 800aed4:	461a      	mov	r2, r3
 800aed6:	9805      	ldr	r0, [sp, #20]
 800aed8:	f003 f8ca 	bl	800e070 <__pow5mult>
 800aedc:	4680      	mov	r8, r0
 800aede:	2800      	cmp	r0, #0
 800aee0:	d0b7      	beq.n	800ae52 <_strtod_l+0x68a>
 800aee2:	4601      	mov	r1, r0
 800aee4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aee6:	9805      	ldr	r0, [sp, #20]
 800aee8:	f003 f81a 	bl	800df20 <__multiply>
 800aeec:	900e      	str	r0, [sp, #56]	@ 0x38
 800aeee:	2800      	cmp	r0, #0
 800aef0:	f43f ae85 	beq.w	800abfe <_strtod_l+0x436>
 800aef4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aef6:	9805      	ldr	r0, [sp, #20]
 800aef8:	f002 fefe 	bl	800dcf8 <_Bfree>
 800aefc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aefe:	931a      	str	r3, [sp, #104]	@ 0x68
 800af00:	2d00      	cmp	r5, #0
 800af02:	dc1d      	bgt.n	800af40 <_strtod_l+0x778>
 800af04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af06:	2b00      	cmp	r3, #0
 800af08:	dd23      	ble.n	800af52 <_strtod_l+0x78a>
 800af0a:	4649      	mov	r1, r9
 800af0c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800af0e:	9805      	ldr	r0, [sp, #20]
 800af10:	f003 f8ae 	bl	800e070 <__pow5mult>
 800af14:	4681      	mov	r9, r0
 800af16:	b9e0      	cbnz	r0, 800af52 <_strtod_l+0x78a>
 800af18:	f04f 0900 	mov.w	r9, #0
 800af1c:	e66f      	b.n	800abfe <_strtod_l+0x436>
 800af1e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800af22:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800af26:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800af2a:	35e2      	adds	r5, #226	@ 0xe2
 800af2c:	fa01 f305 	lsl.w	r3, r1, r5
 800af30:	9310      	str	r3, [sp, #64]	@ 0x40
 800af32:	9113      	str	r1, [sp, #76]	@ 0x4c
 800af34:	e7ba      	b.n	800aeac <_strtod_l+0x6e4>
 800af36:	2300      	movs	r3, #0
 800af38:	9310      	str	r3, [sp, #64]	@ 0x40
 800af3a:	2301      	movs	r3, #1
 800af3c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800af3e:	e7b5      	b.n	800aeac <_strtod_l+0x6e4>
 800af40:	462a      	mov	r2, r5
 800af42:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af44:	9805      	ldr	r0, [sp, #20]
 800af46:	f003 f8ed 	bl	800e124 <__lshift>
 800af4a:	901a      	str	r0, [sp, #104]	@ 0x68
 800af4c:	2800      	cmp	r0, #0
 800af4e:	d1d9      	bne.n	800af04 <_strtod_l+0x73c>
 800af50:	e655      	b.n	800abfe <_strtod_l+0x436>
 800af52:	2e00      	cmp	r6, #0
 800af54:	dd07      	ble.n	800af66 <_strtod_l+0x79e>
 800af56:	4649      	mov	r1, r9
 800af58:	4632      	mov	r2, r6
 800af5a:	9805      	ldr	r0, [sp, #20]
 800af5c:	f003 f8e2 	bl	800e124 <__lshift>
 800af60:	4681      	mov	r9, r0
 800af62:	2800      	cmp	r0, #0
 800af64:	d0d8      	beq.n	800af18 <_strtod_l+0x750>
 800af66:	2f00      	cmp	r7, #0
 800af68:	dd08      	ble.n	800af7c <_strtod_l+0x7b4>
 800af6a:	4641      	mov	r1, r8
 800af6c:	463a      	mov	r2, r7
 800af6e:	9805      	ldr	r0, [sp, #20]
 800af70:	f003 f8d8 	bl	800e124 <__lshift>
 800af74:	4680      	mov	r8, r0
 800af76:	2800      	cmp	r0, #0
 800af78:	f43f ae41 	beq.w	800abfe <_strtod_l+0x436>
 800af7c:	464a      	mov	r2, r9
 800af7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af80:	9805      	ldr	r0, [sp, #20]
 800af82:	f003 f957 	bl	800e234 <__mdiff>
 800af86:	4604      	mov	r4, r0
 800af88:	2800      	cmp	r0, #0
 800af8a:	f43f ae38 	beq.w	800abfe <_strtod_l+0x436>
 800af8e:	68c3      	ldr	r3, [r0, #12]
 800af90:	4641      	mov	r1, r8
 800af92:	930f      	str	r3, [sp, #60]	@ 0x3c
 800af94:	2300      	movs	r3, #0
 800af96:	60c3      	str	r3, [r0, #12]
 800af98:	f003 f930 	bl	800e1fc <__mcmp>
 800af9c:	2800      	cmp	r0, #0
 800af9e:	da45      	bge.n	800b02c <_strtod_l+0x864>
 800afa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afa2:	ea53 030a 	orrs.w	r3, r3, sl
 800afa6:	d16b      	bne.n	800b080 <_strtod_l+0x8b8>
 800afa8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afac:	2b00      	cmp	r3, #0
 800afae:	d167      	bne.n	800b080 <_strtod_l+0x8b8>
 800afb0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800afb4:	0d1b      	lsrs	r3, r3, #20
 800afb6:	051b      	lsls	r3, r3, #20
 800afb8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800afbc:	d960      	bls.n	800b080 <_strtod_l+0x8b8>
 800afbe:	6963      	ldr	r3, [r4, #20]
 800afc0:	b913      	cbnz	r3, 800afc8 <_strtod_l+0x800>
 800afc2:	6923      	ldr	r3, [r4, #16]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	dd5b      	ble.n	800b080 <_strtod_l+0x8b8>
 800afc8:	4621      	mov	r1, r4
 800afca:	2201      	movs	r2, #1
 800afcc:	9805      	ldr	r0, [sp, #20]
 800afce:	f003 f8a9 	bl	800e124 <__lshift>
 800afd2:	4641      	mov	r1, r8
 800afd4:	4604      	mov	r4, r0
 800afd6:	f003 f911 	bl	800e1fc <__mcmp>
 800afda:	2800      	cmp	r0, #0
 800afdc:	dd50      	ble.n	800b080 <_strtod_l+0x8b8>
 800afde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800afe2:	9a08      	ldr	r2, [sp, #32]
 800afe4:	0d1b      	lsrs	r3, r3, #20
 800afe6:	051b      	lsls	r3, r3, #20
 800afe8:	2a00      	cmp	r2, #0
 800afea:	d06a      	beq.n	800b0c2 <_strtod_l+0x8fa>
 800afec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aff0:	d867      	bhi.n	800b0c2 <_strtod_l+0x8fa>
 800aff2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800aff6:	f67f ae98 	bls.w	800ad2a <_strtod_l+0x562>
 800affa:	4650      	mov	r0, sl
 800affc:	4659      	mov	r1, fp
 800affe:	4b09      	ldr	r3, [pc, #36]	@ (800b024 <_strtod_l+0x85c>)
 800b000:	2200      	movs	r2, #0
 800b002:	f7f5 fa73 	bl	80004ec <__aeabi_dmul>
 800b006:	4b08      	ldr	r3, [pc, #32]	@ (800b028 <_strtod_l+0x860>)
 800b008:	4682      	mov	sl, r0
 800b00a:	400b      	ands	r3, r1
 800b00c:	468b      	mov	fp, r1
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f47f ae00 	bne.w	800ac14 <_strtod_l+0x44c>
 800b014:	2322      	movs	r3, #34	@ 0x22
 800b016:	9a05      	ldr	r2, [sp, #20]
 800b018:	6013      	str	r3, [r2, #0]
 800b01a:	e5fb      	b.n	800ac14 <_strtod_l+0x44c>
 800b01c:	0800f9e0 	.word	0x0800f9e0
 800b020:	fffffc02 	.word	0xfffffc02
 800b024:	39500000 	.word	0x39500000
 800b028:	7ff00000 	.word	0x7ff00000
 800b02c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b030:	d165      	bne.n	800b0fe <_strtod_l+0x936>
 800b032:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b034:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b038:	b35a      	cbz	r2, 800b092 <_strtod_l+0x8ca>
 800b03a:	4a99      	ldr	r2, [pc, #612]	@ (800b2a0 <_strtod_l+0xad8>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d12b      	bne.n	800b098 <_strtod_l+0x8d0>
 800b040:	9b08      	ldr	r3, [sp, #32]
 800b042:	4651      	mov	r1, sl
 800b044:	b303      	cbz	r3, 800b088 <_strtod_l+0x8c0>
 800b046:	465a      	mov	r2, fp
 800b048:	4b96      	ldr	r3, [pc, #600]	@ (800b2a4 <_strtod_l+0xadc>)
 800b04a:	4013      	ands	r3, r2
 800b04c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b050:	f04f 32ff 	mov.w	r2, #4294967295
 800b054:	d81b      	bhi.n	800b08e <_strtod_l+0x8c6>
 800b056:	0d1b      	lsrs	r3, r3, #20
 800b058:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b05c:	fa02 f303 	lsl.w	r3, r2, r3
 800b060:	4299      	cmp	r1, r3
 800b062:	d119      	bne.n	800b098 <_strtod_l+0x8d0>
 800b064:	4b90      	ldr	r3, [pc, #576]	@ (800b2a8 <_strtod_l+0xae0>)
 800b066:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b068:	429a      	cmp	r2, r3
 800b06a:	d102      	bne.n	800b072 <_strtod_l+0x8aa>
 800b06c:	3101      	adds	r1, #1
 800b06e:	f43f adc6 	beq.w	800abfe <_strtod_l+0x436>
 800b072:	f04f 0a00 	mov.w	sl, #0
 800b076:	4b8b      	ldr	r3, [pc, #556]	@ (800b2a4 <_strtod_l+0xadc>)
 800b078:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b07a:	401a      	ands	r2, r3
 800b07c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b080:	9b08      	ldr	r3, [sp, #32]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d1b9      	bne.n	800affa <_strtod_l+0x832>
 800b086:	e5c5      	b.n	800ac14 <_strtod_l+0x44c>
 800b088:	f04f 33ff 	mov.w	r3, #4294967295
 800b08c:	e7e8      	b.n	800b060 <_strtod_l+0x898>
 800b08e:	4613      	mov	r3, r2
 800b090:	e7e6      	b.n	800b060 <_strtod_l+0x898>
 800b092:	ea53 030a 	orrs.w	r3, r3, sl
 800b096:	d0a2      	beq.n	800afde <_strtod_l+0x816>
 800b098:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b09a:	b1db      	cbz	r3, 800b0d4 <_strtod_l+0x90c>
 800b09c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b09e:	4213      	tst	r3, r2
 800b0a0:	d0ee      	beq.n	800b080 <_strtod_l+0x8b8>
 800b0a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0a4:	4650      	mov	r0, sl
 800b0a6:	4659      	mov	r1, fp
 800b0a8:	9a08      	ldr	r2, [sp, #32]
 800b0aa:	b1bb      	cbz	r3, 800b0dc <_strtod_l+0x914>
 800b0ac:	f7ff fb6a 	bl	800a784 <sulp>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0b8:	f7f5 f862 	bl	8000180 <__adddf3>
 800b0bc:	4682      	mov	sl, r0
 800b0be:	468b      	mov	fp, r1
 800b0c0:	e7de      	b.n	800b080 <_strtod_l+0x8b8>
 800b0c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b0c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b0ca:	f04f 3aff 	mov.w	sl, #4294967295
 800b0ce:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b0d2:	e7d5      	b.n	800b080 <_strtod_l+0x8b8>
 800b0d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b0d6:	ea13 0f0a 	tst.w	r3, sl
 800b0da:	e7e1      	b.n	800b0a0 <_strtod_l+0x8d8>
 800b0dc:	f7ff fb52 	bl	800a784 <sulp>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0e8:	f7f5 f848 	bl	800017c <__aeabi_dsub>
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	4682      	mov	sl, r0
 800b0f2:	468b      	mov	fp, r1
 800b0f4:	f7f5 fc62 	bl	80009bc <__aeabi_dcmpeq>
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	d0c1      	beq.n	800b080 <_strtod_l+0x8b8>
 800b0fc:	e615      	b.n	800ad2a <_strtod_l+0x562>
 800b0fe:	4641      	mov	r1, r8
 800b100:	4620      	mov	r0, r4
 800b102:	f003 f9eb 	bl	800e4dc <__ratio>
 800b106:	2200      	movs	r2, #0
 800b108:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b10c:	4606      	mov	r6, r0
 800b10e:	460f      	mov	r7, r1
 800b110:	f7f5 fc68 	bl	80009e4 <__aeabi_dcmple>
 800b114:	2800      	cmp	r0, #0
 800b116:	d06d      	beq.n	800b1f4 <_strtod_l+0xa2c>
 800b118:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d178      	bne.n	800b210 <_strtod_l+0xa48>
 800b11e:	f1ba 0f00 	cmp.w	sl, #0
 800b122:	d156      	bne.n	800b1d2 <_strtod_l+0xa0a>
 800b124:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b126:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d158      	bne.n	800b1e0 <_strtod_l+0xa18>
 800b12e:	2200      	movs	r2, #0
 800b130:	4630      	mov	r0, r6
 800b132:	4639      	mov	r1, r7
 800b134:	4b5d      	ldr	r3, [pc, #372]	@ (800b2ac <_strtod_l+0xae4>)
 800b136:	f7f5 fc4b 	bl	80009d0 <__aeabi_dcmplt>
 800b13a:	2800      	cmp	r0, #0
 800b13c:	d157      	bne.n	800b1ee <_strtod_l+0xa26>
 800b13e:	4630      	mov	r0, r6
 800b140:	4639      	mov	r1, r7
 800b142:	2200      	movs	r2, #0
 800b144:	4b5a      	ldr	r3, [pc, #360]	@ (800b2b0 <_strtod_l+0xae8>)
 800b146:	f7f5 f9d1 	bl	80004ec <__aeabi_dmul>
 800b14a:	4606      	mov	r6, r0
 800b14c:	460f      	mov	r7, r1
 800b14e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b152:	9606      	str	r6, [sp, #24]
 800b154:	9307      	str	r3, [sp, #28]
 800b156:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b15a:	4d52      	ldr	r5, [pc, #328]	@ (800b2a4 <_strtod_l+0xadc>)
 800b15c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b160:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b162:	401d      	ands	r5, r3
 800b164:	4b53      	ldr	r3, [pc, #332]	@ (800b2b4 <_strtod_l+0xaec>)
 800b166:	429d      	cmp	r5, r3
 800b168:	f040 80aa 	bne.w	800b2c0 <_strtod_l+0xaf8>
 800b16c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b16e:	4650      	mov	r0, sl
 800b170:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b174:	4659      	mov	r1, fp
 800b176:	f003 f8f1 	bl	800e35c <__ulp>
 800b17a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b17e:	f7f5 f9b5 	bl	80004ec <__aeabi_dmul>
 800b182:	4652      	mov	r2, sl
 800b184:	465b      	mov	r3, fp
 800b186:	f7f4 fffb 	bl	8000180 <__adddf3>
 800b18a:	460b      	mov	r3, r1
 800b18c:	4945      	ldr	r1, [pc, #276]	@ (800b2a4 <_strtod_l+0xadc>)
 800b18e:	4a4a      	ldr	r2, [pc, #296]	@ (800b2b8 <_strtod_l+0xaf0>)
 800b190:	4019      	ands	r1, r3
 800b192:	4291      	cmp	r1, r2
 800b194:	4682      	mov	sl, r0
 800b196:	d942      	bls.n	800b21e <_strtod_l+0xa56>
 800b198:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b19a:	4b43      	ldr	r3, [pc, #268]	@ (800b2a8 <_strtod_l+0xae0>)
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d103      	bne.n	800b1a8 <_strtod_l+0x9e0>
 800b1a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	f43f ad2b 	beq.w	800abfe <_strtod_l+0x436>
 800b1a8:	f04f 3aff 	mov.w	sl, #4294967295
 800b1ac:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800b2a8 <_strtod_l+0xae0>
 800b1b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1b2:	9805      	ldr	r0, [sp, #20]
 800b1b4:	f002 fda0 	bl	800dcf8 <_Bfree>
 800b1b8:	4649      	mov	r1, r9
 800b1ba:	9805      	ldr	r0, [sp, #20]
 800b1bc:	f002 fd9c 	bl	800dcf8 <_Bfree>
 800b1c0:	4641      	mov	r1, r8
 800b1c2:	9805      	ldr	r0, [sp, #20]
 800b1c4:	f002 fd98 	bl	800dcf8 <_Bfree>
 800b1c8:	4621      	mov	r1, r4
 800b1ca:	9805      	ldr	r0, [sp, #20]
 800b1cc:	f002 fd94 	bl	800dcf8 <_Bfree>
 800b1d0:	e618      	b.n	800ae04 <_strtod_l+0x63c>
 800b1d2:	f1ba 0f01 	cmp.w	sl, #1
 800b1d6:	d103      	bne.n	800b1e0 <_strtod_l+0xa18>
 800b1d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	f43f ada5 	beq.w	800ad2a <_strtod_l+0x562>
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	4b36      	ldr	r3, [pc, #216]	@ (800b2bc <_strtod_l+0xaf4>)
 800b1e4:	2600      	movs	r6, #0
 800b1e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b1ea:	4f30      	ldr	r7, [pc, #192]	@ (800b2ac <_strtod_l+0xae4>)
 800b1ec:	e7b3      	b.n	800b156 <_strtod_l+0x98e>
 800b1ee:	2600      	movs	r6, #0
 800b1f0:	4f2f      	ldr	r7, [pc, #188]	@ (800b2b0 <_strtod_l+0xae8>)
 800b1f2:	e7ac      	b.n	800b14e <_strtod_l+0x986>
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	4639      	mov	r1, r7
 800b1f8:	4b2d      	ldr	r3, [pc, #180]	@ (800b2b0 <_strtod_l+0xae8>)
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f7f5 f976 	bl	80004ec <__aeabi_dmul>
 800b200:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b202:	4606      	mov	r6, r0
 800b204:	460f      	mov	r7, r1
 800b206:	2b00      	cmp	r3, #0
 800b208:	d0a1      	beq.n	800b14e <_strtod_l+0x986>
 800b20a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b20e:	e7a2      	b.n	800b156 <_strtod_l+0x98e>
 800b210:	2200      	movs	r2, #0
 800b212:	4b26      	ldr	r3, [pc, #152]	@ (800b2ac <_strtod_l+0xae4>)
 800b214:	4616      	mov	r6, r2
 800b216:	461f      	mov	r7, r3
 800b218:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b21c:	e79b      	b.n	800b156 <_strtod_l+0x98e>
 800b21e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b222:	9b08      	ldr	r3, [sp, #32]
 800b224:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d1c1      	bne.n	800b1b0 <_strtod_l+0x9e8>
 800b22c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b230:	0d1b      	lsrs	r3, r3, #20
 800b232:	051b      	lsls	r3, r3, #20
 800b234:	429d      	cmp	r5, r3
 800b236:	d1bb      	bne.n	800b1b0 <_strtod_l+0x9e8>
 800b238:	4630      	mov	r0, r6
 800b23a:	4639      	mov	r1, r7
 800b23c:	f7f5 fe3a 	bl	8000eb4 <__aeabi_d2lz>
 800b240:	f7f5 f926 	bl	8000490 <__aeabi_l2d>
 800b244:	4602      	mov	r2, r0
 800b246:	460b      	mov	r3, r1
 800b248:	4630      	mov	r0, r6
 800b24a:	4639      	mov	r1, r7
 800b24c:	f7f4 ff96 	bl	800017c <__aeabi_dsub>
 800b250:	460b      	mov	r3, r1
 800b252:	4602      	mov	r2, r0
 800b254:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b258:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b25c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b25e:	ea46 060a 	orr.w	r6, r6, sl
 800b262:	431e      	orrs	r6, r3
 800b264:	d069      	beq.n	800b33a <_strtod_l+0xb72>
 800b266:	a30a      	add	r3, pc, #40	@ (adr r3, 800b290 <_strtod_l+0xac8>)
 800b268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26c:	f7f5 fbb0 	bl	80009d0 <__aeabi_dcmplt>
 800b270:	2800      	cmp	r0, #0
 800b272:	f47f accf 	bne.w	800ac14 <_strtod_l+0x44c>
 800b276:	a308      	add	r3, pc, #32	@ (adr r3, 800b298 <_strtod_l+0xad0>)
 800b278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b280:	f7f5 fbc4 	bl	8000a0c <__aeabi_dcmpgt>
 800b284:	2800      	cmp	r0, #0
 800b286:	d093      	beq.n	800b1b0 <_strtod_l+0x9e8>
 800b288:	e4c4      	b.n	800ac14 <_strtod_l+0x44c>
 800b28a:	bf00      	nop
 800b28c:	f3af 8000 	nop.w
 800b290:	94a03595 	.word	0x94a03595
 800b294:	3fdfffff 	.word	0x3fdfffff
 800b298:	35afe535 	.word	0x35afe535
 800b29c:	3fe00000 	.word	0x3fe00000
 800b2a0:	000fffff 	.word	0x000fffff
 800b2a4:	7ff00000 	.word	0x7ff00000
 800b2a8:	7fefffff 	.word	0x7fefffff
 800b2ac:	3ff00000 	.word	0x3ff00000
 800b2b0:	3fe00000 	.word	0x3fe00000
 800b2b4:	7fe00000 	.word	0x7fe00000
 800b2b8:	7c9fffff 	.word	0x7c9fffff
 800b2bc:	bff00000 	.word	0xbff00000
 800b2c0:	9b08      	ldr	r3, [sp, #32]
 800b2c2:	b323      	cbz	r3, 800b30e <_strtod_l+0xb46>
 800b2c4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b2c8:	d821      	bhi.n	800b30e <_strtod_l+0xb46>
 800b2ca:	a327      	add	r3, pc, #156	@ (adr r3, 800b368 <_strtod_l+0xba0>)
 800b2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	4639      	mov	r1, r7
 800b2d4:	f7f5 fb86 	bl	80009e4 <__aeabi_dcmple>
 800b2d8:	b1a0      	cbz	r0, 800b304 <_strtod_l+0xb3c>
 800b2da:	4639      	mov	r1, r7
 800b2dc:	4630      	mov	r0, r6
 800b2de:	f7f5 fbdd 	bl	8000a9c <__aeabi_d2uiz>
 800b2e2:	2801      	cmp	r0, #1
 800b2e4:	bf38      	it	cc
 800b2e6:	2001      	movcc	r0, #1
 800b2e8:	f7f5 f886 	bl	80003f8 <__aeabi_ui2d>
 800b2ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2ee:	4606      	mov	r6, r0
 800b2f0:	460f      	mov	r7, r1
 800b2f2:	b9fb      	cbnz	r3, 800b334 <_strtod_l+0xb6c>
 800b2f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b2f8:	9014      	str	r0, [sp, #80]	@ 0x50
 800b2fa:	9315      	str	r3, [sp, #84]	@ 0x54
 800b2fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b300:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b304:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b306:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b30a:	1b5b      	subs	r3, r3, r5
 800b30c:	9311      	str	r3, [sp, #68]	@ 0x44
 800b30e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b312:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b316:	f003 f821 	bl	800e35c <__ulp>
 800b31a:	4602      	mov	r2, r0
 800b31c:	460b      	mov	r3, r1
 800b31e:	4650      	mov	r0, sl
 800b320:	4659      	mov	r1, fp
 800b322:	f7f5 f8e3 	bl	80004ec <__aeabi_dmul>
 800b326:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b32a:	f7f4 ff29 	bl	8000180 <__adddf3>
 800b32e:	4682      	mov	sl, r0
 800b330:	468b      	mov	fp, r1
 800b332:	e776      	b.n	800b222 <_strtod_l+0xa5a>
 800b334:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b338:	e7e0      	b.n	800b2fc <_strtod_l+0xb34>
 800b33a:	a30d      	add	r3, pc, #52	@ (adr r3, 800b370 <_strtod_l+0xba8>)
 800b33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b340:	f7f5 fb46 	bl	80009d0 <__aeabi_dcmplt>
 800b344:	e79e      	b.n	800b284 <_strtod_l+0xabc>
 800b346:	2300      	movs	r3, #0
 800b348:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b34a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b34c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b34e:	6013      	str	r3, [r2, #0]
 800b350:	f7ff ba77 	b.w	800a842 <_strtod_l+0x7a>
 800b354:	2a65      	cmp	r2, #101	@ 0x65
 800b356:	f43f ab6e 	beq.w	800aa36 <_strtod_l+0x26e>
 800b35a:	2a45      	cmp	r2, #69	@ 0x45
 800b35c:	f43f ab6b 	beq.w	800aa36 <_strtod_l+0x26e>
 800b360:	2301      	movs	r3, #1
 800b362:	f7ff bba6 	b.w	800aab2 <_strtod_l+0x2ea>
 800b366:	bf00      	nop
 800b368:	ffc00000 	.word	0xffc00000
 800b36c:	41dfffff 	.word	0x41dfffff
 800b370:	94a03595 	.word	0x94a03595
 800b374:	3fcfffff 	.word	0x3fcfffff

0800b378 <_strtod_r>:
 800b378:	4b01      	ldr	r3, [pc, #4]	@ (800b380 <_strtod_r+0x8>)
 800b37a:	f7ff ba25 	b.w	800a7c8 <_strtod_l>
 800b37e:	bf00      	nop
 800b380:	2000001c 	.word	0x2000001c

0800b384 <strtod>:
 800b384:	460a      	mov	r2, r1
 800b386:	4601      	mov	r1, r0
 800b388:	4802      	ldr	r0, [pc, #8]	@ (800b394 <strtod+0x10>)
 800b38a:	4b03      	ldr	r3, [pc, #12]	@ (800b398 <strtod+0x14>)
 800b38c:	6800      	ldr	r0, [r0, #0]
 800b38e:	f7ff ba1b 	b.w	800a7c8 <_strtod_l>
 800b392:	bf00      	nop
 800b394:	20000188 	.word	0x20000188
 800b398:	2000001c 	.word	0x2000001c

0800b39c <_strtol_l.constprop.0>:
 800b39c:	2b24      	cmp	r3, #36	@ 0x24
 800b39e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3a2:	4686      	mov	lr, r0
 800b3a4:	4690      	mov	r8, r2
 800b3a6:	d801      	bhi.n	800b3ac <_strtol_l.constprop.0+0x10>
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d106      	bne.n	800b3ba <_strtol_l.constprop.0+0x1e>
 800b3ac:	f001 fa24 	bl	800c7f8 <__errno>
 800b3b0:	2316      	movs	r3, #22
 800b3b2:	6003      	str	r3, [r0, #0]
 800b3b4:	2000      	movs	r0, #0
 800b3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ba:	460d      	mov	r5, r1
 800b3bc:	4833      	ldr	r0, [pc, #204]	@ (800b48c <_strtol_l.constprop.0+0xf0>)
 800b3be:	462a      	mov	r2, r5
 800b3c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3c4:	5d06      	ldrb	r6, [r0, r4]
 800b3c6:	f016 0608 	ands.w	r6, r6, #8
 800b3ca:	d1f8      	bne.n	800b3be <_strtol_l.constprop.0+0x22>
 800b3cc:	2c2d      	cmp	r4, #45	@ 0x2d
 800b3ce:	d12d      	bne.n	800b42c <_strtol_l.constprop.0+0x90>
 800b3d0:	2601      	movs	r6, #1
 800b3d2:	782c      	ldrb	r4, [r5, #0]
 800b3d4:	1c95      	adds	r5, r2, #2
 800b3d6:	f033 0210 	bics.w	r2, r3, #16
 800b3da:	d109      	bne.n	800b3f0 <_strtol_l.constprop.0+0x54>
 800b3dc:	2c30      	cmp	r4, #48	@ 0x30
 800b3de:	d12a      	bne.n	800b436 <_strtol_l.constprop.0+0x9a>
 800b3e0:	782a      	ldrb	r2, [r5, #0]
 800b3e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b3e6:	2a58      	cmp	r2, #88	@ 0x58
 800b3e8:	d125      	bne.n	800b436 <_strtol_l.constprop.0+0x9a>
 800b3ea:	2310      	movs	r3, #16
 800b3ec:	786c      	ldrb	r4, [r5, #1]
 800b3ee:	3502      	adds	r5, #2
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b3f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b3fa:	fbbc f9f3 	udiv	r9, ip, r3
 800b3fe:	4610      	mov	r0, r2
 800b400:	fb03 ca19 	mls	sl, r3, r9, ip
 800b404:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b408:	2f09      	cmp	r7, #9
 800b40a:	d81b      	bhi.n	800b444 <_strtol_l.constprop.0+0xa8>
 800b40c:	463c      	mov	r4, r7
 800b40e:	42a3      	cmp	r3, r4
 800b410:	dd27      	ble.n	800b462 <_strtol_l.constprop.0+0xc6>
 800b412:	1c57      	adds	r7, r2, #1
 800b414:	d007      	beq.n	800b426 <_strtol_l.constprop.0+0x8a>
 800b416:	4581      	cmp	r9, r0
 800b418:	d320      	bcc.n	800b45c <_strtol_l.constprop.0+0xc0>
 800b41a:	d101      	bne.n	800b420 <_strtol_l.constprop.0+0x84>
 800b41c:	45a2      	cmp	sl, r4
 800b41e:	db1d      	blt.n	800b45c <_strtol_l.constprop.0+0xc0>
 800b420:	2201      	movs	r2, #1
 800b422:	fb00 4003 	mla	r0, r0, r3, r4
 800b426:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b42a:	e7eb      	b.n	800b404 <_strtol_l.constprop.0+0x68>
 800b42c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b42e:	bf04      	itt	eq
 800b430:	782c      	ldrbeq	r4, [r5, #0]
 800b432:	1c95      	addeq	r5, r2, #2
 800b434:	e7cf      	b.n	800b3d6 <_strtol_l.constprop.0+0x3a>
 800b436:	2b00      	cmp	r3, #0
 800b438:	d1da      	bne.n	800b3f0 <_strtol_l.constprop.0+0x54>
 800b43a:	2c30      	cmp	r4, #48	@ 0x30
 800b43c:	bf0c      	ite	eq
 800b43e:	2308      	moveq	r3, #8
 800b440:	230a      	movne	r3, #10
 800b442:	e7d5      	b.n	800b3f0 <_strtol_l.constprop.0+0x54>
 800b444:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b448:	2f19      	cmp	r7, #25
 800b44a:	d801      	bhi.n	800b450 <_strtol_l.constprop.0+0xb4>
 800b44c:	3c37      	subs	r4, #55	@ 0x37
 800b44e:	e7de      	b.n	800b40e <_strtol_l.constprop.0+0x72>
 800b450:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b454:	2f19      	cmp	r7, #25
 800b456:	d804      	bhi.n	800b462 <_strtol_l.constprop.0+0xc6>
 800b458:	3c57      	subs	r4, #87	@ 0x57
 800b45a:	e7d8      	b.n	800b40e <_strtol_l.constprop.0+0x72>
 800b45c:	f04f 32ff 	mov.w	r2, #4294967295
 800b460:	e7e1      	b.n	800b426 <_strtol_l.constprop.0+0x8a>
 800b462:	1c53      	adds	r3, r2, #1
 800b464:	d108      	bne.n	800b478 <_strtol_l.constprop.0+0xdc>
 800b466:	2322      	movs	r3, #34	@ 0x22
 800b468:	4660      	mov	r0, ip
 800b46a:	f8ce 3000 	str.w	r3, [lr]
 800b46e:	f1b8 0f00 	cmp.w	r8, #0
 800b472:	d0a0      	beq.n	800b3b6 <_strtol_l.constprop.0+0x1a>
 800b474:	1e69      	subs	r1, r5, #1
 800b476:	e006      	b.n	800b486 <_strtol_l.constprop.0+0xea>
 800b478:	b106      	cbz	r6, 800b47c <_strtol_l.constprop.0+0xe0>
 800b47a:	4240      	negs	r0, r0
 800b47c:	f1b8 0f00 	cmp.w	r8, #0
 800b480:	d099      	beq.n	800b3b6 <_strtol_l.constprop.0+0x1a>
 800b482:	2a00      	cmp	r2, #0
 800b484:	d1f6      	bne.n	800b474 <_strtol_l.constprop.0+0xd8>
 800b486:	f8c8 1000 	str.w	r1, [r8]
 800b48a:	e794      	b.n	800b3b6 <_strtol_l.constprop.0+0x1a>
 800b48c:	0800fa09 	.word	0x0800fa09

0800b490 <_strtol_r>:
 800b490:	f7ff bf84 	b.w	800b39c <_strtol_l.constprop.0>

0800b494 <strtol>:
 800b494:	4613      	mov	r3, r2
 800b496:	460a      	mov	r2, r1
 800b498:	4601      	mov	r1, r0
 800b49a:	4802      	ldr	r0, [pc, #8]	@ (800b4a4 <strtol+0x10>)
 800b49c:	6800      	ldr	r0, [r0, #0]
 800b49e:	f7ff bf7d 	b.w	800b39c <_strtol_l.constprop.0>
 800b4a2:	bf00      	nop
 800b4a4:	20000188 	.word	0x20000188

0800b4a8 <__cvt>:
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4ae:	461d      	mov	r5, r3
 800b4b0:	bfbb      	ittet	lt
 800b4b2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800b4b6:	461d      	movlt	r5, r3
 800b4b8:	2300      	movge	r3, #0
 800b4ba:	232d      	movlt	r3, #45	@ 0x2d
 800b4bc:	b088      	sub	sp, #32
 800b4be:	4614      	mov	r4, r2
 800b4c0:	bfb8      	it	lt
 800b4c2:	4614      	movlt	r4, r2
 800b4c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b4c6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b4c8:	7013      	strb	r3, [r2, #0]
 800b4ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b4cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b4d0:	f023 0820 	bic.w	r8, r3, #32
 800b4d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b4d8:	d005      	beq.n	800b4e6 <__cvt+0x3e>
 800b4da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b4de:	d100      	bne.n	800b4e2 <__cvt+0x3a>
 800b4e0:	3601      	adds	r6, #1
 800b4e2:	2302      	movs	r3, #2
 800b4e4:	e000      	b.n	800b4e8 <__cvt+0x40>
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	aa07      	add	r2, sp, #28
 800b4ea:	9204      	str	r2, [sp, #16]
 800b4ec:	aa06      	add	r2, sp, #24
 800b4ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b4f2:	e9cd 3600 	strd	r3, r6, [sp]
 800b4f6:	4622      	mov	r2, r4
 800b4f8:	462b      	mov	r3, r5
 800b4fa:	f001 fa61 	bl	800c9c0 <_dtoa_r>
 800b4fe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b502:	4607      	mov	r7, r0
 800b504:	d119      	bne.n	800b53a <__cvt+0x92>
 800b506:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b508:	07db      	lsls	r3, r3, #31
 800b50a:	d50e      	bpl.n	800b52a <__cvt+0x82>
 800b50c:	eb00 0906 	add.w	r9, r0, r6
 800b510:	2200      	movs	r2, #0
 800b512:	2300      	movs	r3, #0
 800b514:	4620      	mov	r0, r4
 800b516:	4629      	mov	r1, r5
 800b518:	f7f5 fa50 	bl	80009bc <__aeabi_dcmpeq>
 800b51c:	b108      	cbz	r0, 800b522 <__cvt+0x7a>
 800b51e:	f8cd 901c 	str.w	r9, [sp, #28]
 800b522:	2230      	movs	r2, #48	@ 0x30
 800b524:	9b07      	ldr	r3, [sp, #28]
 800b526:	454b      	cmp	r3, r9
 800b528:	d31e      	bcc.n	800b568 <__cvt+0xc0>
 800b52a:	4638      	mov	r0, r7
 800b52c:	9b07      	ldr	r3, [sp, #28]
 800b52e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b530:	1bdb      	subs	r3, r3, r7
 800b532:	6013      	str	r3, [r2, #0]
 800b534:	b008      	add	sp, #32
 800b536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b53a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b53e:	eb00 0906 	add.w	r9, r0, r6
 800b542:	d1e5      	bne.n	800b510 <__cvt+0x68>
 800b544:	7803      	ldrb	r3, [r0, #0]
 800b546:	2b30      	cmp	r3, #48	@ 0x30
 800b548:	d10a      	bne.n	800b560 <__cvt+0xb8>
 800b54a:	2200      	movs	r2, #0
 800b54c:	2300      	movs	r3, #0
 800b54e:	4620      	mov	r0, r4
 800b550:	4629      	mov	r1, r5
 800b552:	f7f5 fa33 	bl	80009bc <__aeabi_dcmpeq>
 800b556:	b918      	cbnz	r0, 800b560 <__cvt+0xb8>
 800b558:	f1c6 0601 	rsb	r6, r6, #1
 800b55c:	f8ca 6000 	str.w	r6, [sl]
 800b560:	f8da 3000 	ldr.w	r3, [sl]
 800b564:	4499      	add	r9, r3
 800b566:	e7d3      	b.n	800b510 <__cvt+0x68>
 800b568:	1c59      	adds	r1, r3, #1
 800b56a:	9107      	str	r1, [sp, #28]
 800b56c:	701a      	strb	r2, [r3, #0]
 800b56e:	e7d9      	b.n	800b524 <__cvt+0x7c>

0800b570 <__exponent>:
 800b570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b572:	2900      	cmp	r1, #0
 800b574:	bfb6      	itet	lt
 800b576:	232d      	movlt	r3, #45	@ 0x2d
 800b578:	232b      	movge	r3, #43	@ 0x2b
 800b57a:	4249      	neglt	r1, r1
 800b57c:	2909      	cmp	r1, #9
 800b57e:	7002      	strb	r2, [r0, #0]
 800b580:	7043      	strb	r3, [r0, #1]
 800b582:	dd29      	ble.n	800b5d8 <__exponent+0x68>
 800b584:	f10d 0307 	add.w	r3, sp, #7
 800b588:	461d      	mov	r5, r3
 800b58a:	270a      	movs	r7, #10
 800b58c:	fbb1 f6f7 	udiv	r6, r1, r7
 800b590:	461a      	mov	r2, r3
 800b592:	fb07 1416 	mls	r4, r7, r6, r1
 800b596:	3430      	adds	r4, #48	@ 0x30
 800b598:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b59c:	460c      	mov	r4, r1
 800b59e:	2c63      	cmp	r4, #99	@ 0x63
 800b5a0:	4631      	mov	r1, r6
 800b5a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b5a6:	dcf1      	bgt.n	800b58c <__exponent+0x1c>
 800b5a8:	3130      	adds	r1, #48	@ 0x30
 800b5aa:	1e94      	subs	r4, r2, #2
 800b5ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b5b0:	4623      	mov	r3, r4
 800b5b2:	1c41      	adds	r1, r0, #1
 800b5b4:	42ab      	cmp	r3, r5
 800b5b6:	d30a      	bcc.n	800b5ce <__exponent+0x5e>
 800b5b8:	f10d 0309 	add.w	r3, sp, #9
 800b5bc:	1a9b      	subs	r3, r3, r2
 800b5be:	42ac      	cmp	r4, r5
 800b5c0:	bf88      	it	hi
 800b5c2:	2300      	movhi	r3, #0
 800b5c4:	3302      	adds	r3, #2
 800b5c6:	4403      	add	r3, r0
 800b5c8:	1a18      	subs	r0, r3, r0
 800b5ca:	b003      	add	sp, #12
 800b5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b5d2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b5d6:	e7ed      	b.n	800b5b4 <__exponent+0x44>
 800b5d8:	2330      	movs	r3, #48	@ 0x30
 800b5da:	3130      	adds	r1, #48	@ 0x30
 800b5dc:	7083      	strb	r3, [r0, #2]
 800b5de:	70c1      	strb	r1, [r0, #3]
 800b5e0:	1d03      	adds	r3, r0, #4
 800b5e2:	e7f1      	b.n	800b5c8 <__exponent+0x58>

0800b5e4 <_printf_float>:
 800b5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e8:	b091      	sub	sp, #68	@ 0x44
 800b5ea:	460c      	mov	r4, r1
 800b5ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b5f0:	4616      	mov	r6, r2
 800b5f2:	461f      	mov	r7, r3
 800b5f4:	4605      	mov	r5, r0
 800b5f6:	f001 f8a5 	bl	800c744 <_localeconv_r>
 800b5fa:	6803      	ldr	r3, [r0, #0]
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	9308      	str	r3, [sp, #32]
 800b600:	f7f4 fdb0 	bl	8000164 <strlen>
 800b604:	2300      	movs	r3, #0
 800b606:	930e      	str	r3, [sp, #56]	@ 0x38
 800b608:	f8d8 3000 	ldr.w	r3, [r8]
 800b60c:	9009      	str	r0, [sp, #36]	@ 0x24
 800b60e:	3307      	adds	r3, #7
 800b610:	f023 0307 	bic.w	r3, r3, #7
 800b614:	f103 0208 	add.w	r2, r3, #8
 800b618:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b61c:	f8d4 b000 	ldr.w	fp, [r4]
 800b620:	f8c8 2000 	str.w	r2, [r8]
 800b624:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b628:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b62c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b62e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b632:	f04f 32ff 	mov.w	r2, #4294967295
 800b636:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b63a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b63e:	4b9c      	ldr	r3, [pc, #624]	@ (800b8b0 <_printf_float+0x2cc>)
 800b640:	f7f5 f9ee 	bl	8000a20 <__aeabi_dcmpun>
 800b644:	bb70      	cbnz	r0, 800b6a4 <_printf_float+0xc0>
 800b646:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b64a:	f04f 32ff 	mov.w	r2, #4294967295
 800b64e:	4b98      	ldr	r3, [pc, #608]	@ (800b8b0 <_printf_float+0x2cc>)
 800b650:	f7f5 f9c8 	bl	80009e4 <__aeabi_dcmple>
 800b654:	bb30      	cbnz	r0, 800b6a4 <_printf_float+0xc0>
 800b656:	2200      	movs	r2, #0
 800b658:	2300      	movs	r3, #0
 800b65a:	4640      	mov	r0, r8
 800b65c:	4649      	mov	r1, r9
 800b65e:	f7f5 f9b7 	bl	80009d0 <__aeabi_dcmplt>
 800b662:	b110      	cbz	r0, 800b66a <_printf_float+0x86>
 800b664:	232d      	movs	r3, #45	@ 0x2d
 800b666:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b66a:	4a92      	ldr	r2, [pc, #584]	@ (800b8b4 <_printf_float+0x2d0>)
 800b66c:	4b92      	ldr	r3, [pc, #584]	@ (800b8b8 <_printf_float+0x2d4>)
 800b66e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b672:	bf94      	ite	ls
 800b674:	4690      	movls	r8, r2
 800b676:	4698      	movhi	r8, r3
 800b678:	2303      	movs	r3, #3
 800b67a:	f04f 0900 	mov.w	r9, #0
 800b67e:	6123      	str	r3, [r4, #16]
 800b680:	f02b 0304 	bic.w	r3, fp, #4
 800b684:	6023      	str	r3, [r4, #0]
 800b686:	4633      	mov	r3, r6
 800b688:	4621      	mov	r1, r4
 800b68a:	4628      	mov	r0, r5
 800b68c:	9700      	str	r7, [sp, #0]
 800b68e:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b690:	f000 f9d4 	bl	800ba3c <_printf_common>
 800b694:	3001      	adds	r0, #1
 800b696:	f040 8090 	bne.w	800b7ba <_printf_float+0x1d6>
 800b69a:	f04f 30ff 	mov.w	r0, #4294967295
 800b69e:	b011      	add	sp, #68	@ 0x44
 800b6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a4:	4642      	mov	r2, r8
 800b6a6:	464b      	mov	r3, r9
 800b6a8:	4640      	mov	r0, r8
 800b6aa:	4649      	mov	r1, r9
 800b6ac:	f7f5 f9b8 	bl	8000a20 <__aeabi_dcmpun>
 800b6b0:	b148      	cbz	r0, 800b6c6 <_printf_float+0xe2>
 800b6b2:	464b      	mov	r3, r9
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	bfb8      	it	lt
 800b6b8:	232d      	movlt	r3, #45	@ 0x2d
 800b6ba:	4a80      	ldr	r2, [pc, #512]	@ (800b8bc <_printf_float+0x2d8>)
 800b6bc:	bfb8      	it	lt
 800b6be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b6c2:	4b7f      	ldr	r3, [pc, #508]	@ (800b8c0 <_printf_float+0x2dc>)
 800b6c4:	e7d3      	b.n	800b66e <_printf_float+0x8a>
 800b6c6:	6863      	ldr	r3, [r4, #4]
 800b6c8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b6cc:	1c5a      	adds	r2, r3, #1
 800b6ce:	d13f      	bne.n	800b750 <_printf_float+0x16c>
 800b6d0:	2306      	movs	r3, #6
 800b6d2:	6063      	str	r3, [r4, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b6da:	6023      	str	r3, [r4, #0]
 800b6dc:	9206      	str	r2, [sp, #24]
 800b6de:	aa0e      	add	r2, sp, #56	@ 0x38
 800b6e0:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b6e4:	aa0d      	add	r2, sp, #52	@ 0x34
 800b6e6:	9203      	str	r2, [sp, #12]
 800b6e8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b6ec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b6f0:	6863      	ldr	r3, [r4, #4]
 800b6f2:	4642      	mov	r2, r8
 800b6f4:	9300      	str	r3, [sp, #0]
 800b6f6:	4628      	mov	r0, r5
 800b6f8:	464b      	mov	r3, r9
 800b6fa:	910a      	str	r1, [sp, #40]	@ 0x28
 800b6fc:	f7ff fed4 	bl	800b4a8 <__cvt>
 800b700:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b702:	4680      	mov	r8, r0
 800b704:	2947      	cmp	r1, #71	@ 0x47
 800b706:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b708:	d128      	bne.n	800b75c <_printf_float+0x178>
 800b70a:	1cc8      	adds	r0, r1, #3
 800b70c:	db02      	blt.n	800b714 <_printf_float+0x130>
 800b70e:	6863      	ldr	r3, [r4, #4]
 800b710:	4299      	cmp	r1, r3
 800b712:	dd40      	ble.n	800b796 <_printf_float+0x1b2>
 800b714:	f1aa 0a02 	sub.w	sl, sl, #2
 800b718:	fa5f fa8a 	uxtb.w	sl, sl
 800b71c:	4652      	mov	r2, sl
 800b71e:	3901      	subs	r1, #1
 800b720:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b724:	910d      	str	r1, [sp, #52]	@ 0x34
 800b726:	f7ff ff23 	bl	800b570 <__exponent>
 800b72a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b72c:	4681      	mov	r9, r0
 800b72e:	1813      	adds	r3, r2, r0
 800b730:	2a01      	cmp	r2, #1
 800b732:	6123      	str	r3, [r4, #16]
 800b734:	dc02      	bgt.n	800b73c <_printf_float+0x158>
 800b736:	6822      	ldr	r2, [r4, #0]
 800b738:	07d2      	lsls	r2, r2, #31
 800b73a:	d501      	bpl.n	800b740 <_printf_float+0x15c>
 800b73c:	3301      	adds	r3, #1
 800b73e:	6123      	str	r3, [r4, #16]
 800b740:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b744:	2b00      	cmp	r3, #0
 800b746:	d09e      	beq.n	800b686 <_printf_float+0xa2>
 800b748:	232d      	movs	r3, #45	@ 0x2d
 800b74a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b74e:	e79a      	b.n	800b686 <_printf_float+0xa2>
 800b750:	2947      	cmp	r1, #71	@ 0x47
 800b752:	d1bf      	bne.n	800b6d4 <_printf_float+0xf0>
 800b754:	2b00      	cmp	r3, #0
 800b756:	d1bd      	bne.n	800b6d4 <_printf_float+0xf0>
 800b758:	2301      	movs	r3, #1
 800b75a:	e7ba      	b.n	800b6d2 <_printf_float+0xee>
 800b75c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b760:	d9dc      	bls.n	800b71c <_printf_float+0x138>
 800b762:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b766:	d118      	bne.n	800b79a <_printf_float+0x1b6>
 800b768:	2900      	cmp	r1, #0
 800b76a:	6863      	ldr	r3, [r4, #4]
 800b76c:	dd0b      	ble.n	800b786 <_printf_float+0x1a2>
 800b76e:	6121      	str	r1, [r4, #16]
 800b770:	b913      	cbnz	r3, 800b778 <_printf_float+0x194>
 800b772:	6822      	ldr	r2, [r4, #0]
 800b774:	07d0      	lsls	r0, r2, #31
 800b776:	d502      	bpl.n	800b77e <_printf_float+0x19a>
 800b778:	3301      	adds	r3, #1
 800b77a:	440b      	add	r3, r1
 800b77c:	6123      	str	r3, [r4, #16]
 800b77e:	f04f 0900 	mov.w	r9, #0
 800b782:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b784:	e7dc      	b.n	800b740 <_printf_float+0x15c>
 800b786:	b913      	cbnz	r3, 800b78e <_printf_float+0x1aa>
 800b788:	6822      	ldr	r2, [r4, #0]
 800b78a:	07d2      	lsls	r2, r2, #31
 800b78c:	d501      	bpl.n	800b792 <_printf_float+0x1ae>
 800b78e:	3302      	adds	r3, #2
 800b790:	e7f4      	b.n	800b77c <_printf_float+0x198>
 800b792:	2301      	movs	r3, #1
 800b794:	e7f2      	b.n	800b77c <_printf_float+0x198>
 800b796:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b79a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b79c:	4299      	cmp	r1, r3
 800b79e:	db05      	blt.n	800b7ac <_printf_float+0x1c8>
 800b7a0:	6823      	ldr	r3, [r4, #0]
 800b7a2:	6121      	str	r1, [r4, #16]
 800b7a4:	07d8      	lsls	r0, r3, #31
 800b7a6:	d5ea      	bpl.n	800b77e <_printf_float+0x19a>
 800b7a8:	1c4b      	adds	r3, r1, #1
 800b7aa:	e7e7      	b.n	800b77c <_printf_float+0x198>
 800b7ac:	2900      	cmp	r1, #0
 800b7ae:	bfcc      	ite	gt
 800b7b0:	2201      	movgt	r2, #1
 800b7b2:	f1c1 0202 	rsble	r2, r1, #2
 800b7b6:	4413      	add	r3, r2
 800b7b8:	e7e0      	b.n	800b77c <_printf_float+0x198>
 800b7ba:	6823      	ldr	r3, [r4, #0]
 800b7bc:	055a      	lsls	r2, r3, #21
 800b7be:	d407      	bmi.n	800b7d0 <_printf_float+0x1ec>
 800b7c0:	6923      	ldr	r3, [r4, #16]
 800b7c2:	4642      	mov	r2, r8
 800b7c4:	4631      	mov	r1, r6
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	47b8      	blx	r7
 800b7ca:	3001      	adds	r0, #1
 800b7cc:	d12b      	bne.n	800b826 <_printf_float+0x242>
 800b7ce:	e764      	b.n	800b69a <_printf_float+0xb6>
 800b7d0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b7d4:	f240 80dc 	bls.w	800b990 <_printf_float+0x3ac>
 800b7d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b7dc:	2200      	movs	r2, #0
 800b7de:	2300      	movs	r3, #0
 800b7e0:	f7f5 f8ec 	bl	80009bc <__aeabi_dcmpeq>
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	d033      	beq.n	800b850 <_printf_float+0x26c>
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	4631      	mov	r1, r6
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	4a35      	ldr	r2, [pc, #212]	@ (800b8c4 <_printf_float+0x2e0>)
 800b7f0:	47b8      	blx	r7
 800b7f2:	3001      	adds	r0, #1
 800b7f4:	f43f af51 	beq.w	800b69a <_printf_float+0xb6>
 800b7f8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b7fc:	4543      	cmp	r3, r8
 800b7fe:	db02      	blt.n	800b806 <_printf_float+0x222>
 800b800:	6823      	ldr	r3, [r4, #0]
 800b802:	07d8      	lsls	r0, r3, #31
 800b804:	d50f      	bpl.n	800b826 <_printf_float+0x242>
 800b806:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b80a:	4631      	mov	r1, r6
 800b80c:	4628      	mov	r0, r5
 800b80e:	47b8      	blx	r7
 800b810:	3001      	adds	r0, #1
 800b812:	f43f af42 	beq.w	800b69a <_printf_float+0xb6>
 800b816:	f04f 0900 	mov.w	r9, #0
 800b81a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b81e:	f104 0a1a 	add.w	sl, r4, #26
 800b822:	45c8      	cmp	r8, r9
 800b824:	dc09      	bgt.n	800b83a <_printf_float+0x256>
 800b826:	6823      	ldr	r3, [r4, #0]
 800b828:	079b      	lsls	r3, r3, #30
 800b82a:	f100 8102 	bmi.w	800ba32 <_printf_float+0x44e>
 800b82e:	68e0      	ldr	r0, [r4, #12]
 800b830:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b832:	4298      	cmp	r0, r3
 800b834:	bfb8      	it	lt
 800b836:	4618      	movlt	r0, r3
 800b838:	e731      	b.n	800b69e <_printf_float+0xba>
 800b83a:	2301      	movs	r3, #1
 800b83c:	4652      	mov	r2, sl
 800b83e:	4631      	mov	r1, r6
 800b840:	4628      	mov	r0, r5
 800b842:	47b8      	blx	r7
 800b844:	3001      	adds	r0, #1
 800b846:	f43f af28 	beq.w	800b69a <_printf_float+0xb6>
 800b84a:	f109 0901 	add.w	r9, r9, #1
 800b84e:	e7e8      	b.n	800b822 <_printf_float+0x23e>
 800b850:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b852:	2b00      	cmp	r3, #0
 800b854:	dc38      	bgt.n	800b8c8 <_printf_float+0x2e4>
 800b856:	2301      	movs	r3, #1
 800b858:	4631      	mov	r1, r6
 800b85a:	4628      	mov	r0, r5
 800b85c:	4a19      	ldr	r2, [pc, #100]	@ (800b8c4 <_printf_float+0x2e0>)
 800b85e:	47b8      	blx	r7
 800b860:	3001      	adds	r0, #1
 800b862:	f43f af1a 	beq.w	800b69a <_printf_float+0xb6>
 800b866:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b86a:	ea59 0303 	orrs.w	r3, r9, r3
 800b86e:	d102      	bne.n	800b876 <_printf_float+0x292>
 800b870:	6823      	ldr	r3, [r4, #0]
 800b872:	07d9      	lsls	r1, r3, #31
 800b874:	d5d7      	bpl.n	800b826 <_printf_float+0x242>
 800b876:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b87a:	4631      	mov	r1, r6
 800b87c:	4628      	mov	r0, r5
 800b87e:	47b8      	blx	r7
 800b880:	3001      	adds	r0, #1
 800b882:	f43f af0a 	beq.w	800b69a <_printf_float+0xb6>
 800b886:	f04f 0a00 	mov.w	sl, #0
 800b88a:	f104 0b1a 	add.w	fp, r4, #26
 800b88e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b890:	425b      	negs	r3, r3
 800b892:	4553      	cmp	r3, sl
 800b894:	dc01      	bgt.n	800b89a <_printf_float+0x2b6>
 800b896:	464b      	mov	r3, r9
 800b898:	e793      	b.n	800b7c2 <_printf_float+0x1de>
 800b89a:	2301      	movs	r3, #1
 800b89c:	465a      	mov	r2, fp
 800b89e:	4631      	mov	r1, r6
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	47b8      	blx	r7
 800b8a4:	3001      	adds	r0, #1
 800b8a6:	f43f aef8 	beq.w	800b69a <_printf_float+0xb6>
 800b8aa:	f10a 0a01 	add.w	sl, sl, #1
 800b8ae:	e7ee      	b.n	800b88e <_printf_float+0x2aa>
 800b8b0:	7fefffff 	.word	0x7fefffff
 800b8b4:	0800fb09 	.word	0x0800fb09
 800b8b8:	0800fb0d 	.word	0x0800fb0d
 800b8bc:	0800fb11 	.word	0x0800fb11
 800b8c0:	0800fb15 	.word	0x0800fb15
 800b8c4:	0800f41e 	.word	0x0800f41e
 800b8c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b8ca:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b8ce:	4553      	cmp	r3, sl
 800b8d0:	bfa8      	it	ge
 800b8d2:	4653      	movge	r3, sl
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	4699      	mov	r9, r3
 800b8d8:	dc36      	bgt.n	800b948 <_printf_float+0x364>
 800b8da:	f04f 0b00 	mov.w	fp, #0
 800b8de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b8e2:	f104 021a 	add.w	r2, r4, #26
 800b8e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b8e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8ea:	eba3 0309 	sub.w	r3, r3, r9
 800b8ee:	455b      	cmp	r3, fp
 800b8f0:	dc31      	bgt.n	800b956 <_printf_float+0x372>
 800b8f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8f4:	459a      	cmp	sl, r3
 800b8f6:	dc3a      	bgt.n	800b96e <_printf_float+0x38a>
 800b8f8:	6823      	ldr	r3, [r4, #0]
 800b8fa:	07da      	lsls	r2, r3, #31
 800b8fc:	d437      	bmi.n	800b96e <_printf_float+0x38a>
 800b8fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b900:	ebaa 0903 	sub.w	r9, sl, r3
 800b904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b906:	ebaa 0303 	sub.w	r3, sl, r3
 800b90a:	4599      	cmp	r9, r3
 800b90c:	bfa8      	it	ge
 800b90e:	4699      	movge	r9, r3
 800b910:	f1b9 0f00 	cmp.w	r9, #0
 800b914:	dc33      	bgt.n	800b97e <_printf_float+0x39a>
 800b916:	f04f 0800 	mov.w	r8, #0
 800b91a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b91e:	f104 0b1a 	add.w	fp, r4, #26
 800b922:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b924:	ebaa 0303 	sub.w	r3, sl, r3
 800b928:	eba3 0309 	sub.w	r3, r3, r9
 800b92c:	4543      	cmp	r3, r8
 800b92e:	f77f af7a 	ble.w	800b826 <_printf_float+0x242>
 800b932:	2301      	movs	r3, #1
 800b934:	465a      	mov	r2, fp
 800b936:	4631      	mov	r1, r6
 800b938:	4628      	mov	r0, r5
 800b93a:	47b8      	blx	r7
 800b93c:	3001      	adds	r0, #1
 800b93e:	f43f aeac 	beq.w	800b69a <_printf_float+0xb6>
 800b942:	f108 0801 	add.w	r8, r8, #1
 800b946:	e7ec      	b.n	800b922 <_printf_float+0x33e>
 800b948:	4642      	mov	r2, r8
 800b94a:	4631      	mov	r1, r6
 800b94c:	4628      	mov	r0, r5
 800b94e:	47b8      	blx	r7
 800b950:	3001      	adds	r0, #1
 800b952:	d1c2      	bne.n	800b8da <_printf_float+0x2f6>
 800b954:	e6a1      	b.n	800b69a <_printf_float+0xb6>
 800b956:	2301      	movs	r3, #1
 800b958:	4631      	mov	r1, r6
 800b95a:	4628      	mov	r0, r5
 800b95c:	920a      	str	r2, [sp, #40]	@ 0x28
 800b95e:	47b8      	blx	r7
 800b960:	3001      	adds	r0, #1
 800b962:	f43f ae9a 	beq.w	800b69a <_printf_float+0xb6>
 800b966:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b968:	f10b 0b01 	add.w	fp, fp, #1
 800b96c:	e7bb      	b.n	800b8e6 <_printf_float+0x302>
 800b96e:	4631      	mov	r1, r6
 800b970:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b974:	4628      	mov	r0, r5
 800b976:	47b8      	blx	r7
 800b978:	3001      	adds	r0, #1
 800b97a:	d1c0      	bne.n	800b8fe <_printf_float+0x31a>
 800b97c:	e68d      	b.n	800b69a <_printf_float+0xb6>
 800b97e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b980:	464b      	mov	r3, r9
 800b982:	4631      	mov	r1, r6
 800b984:	4628      	mov	r0, r5
 800b986:	4442      	add	r2, r8
 800b988:	47b8      	blx	r7
 800b98a:	3001      	adds	r0, #1
 800b98c:	d1c3      	bne.n	800b916 <_printf_float+0x332>
 800b98e:	e684      	b.n	800b69a <_printf_float+0xb6>
 800b990:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b994:	f1ba 0f01 	cmp.w	sl, #1
 800b998:	dc01      	bgt.n	800b99e <_printf_float+0x3ba>
 800b99a:	07db      	lsls	r3, r3, #31
 800b99c:	d536      	bpl.n	800ba0c <_printf_float+0x428>
 800b99e:	2301      	movs	r3, #1
 800b9a0:	4642      	mov	r2, r8
 800b9a2:	4631      	mov	r1, r6
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	47b8      	blx	r7
 800b9a8:	3001      	adds	r0, #1
 800b9aa:	f43f ae76 	beq.w	800b69a <_printf_float+0xb6>
 800b9ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b9b2:	4631      	mov	r1, r6
 800b9b4:	4628      	mov	r0, r5
 800b9b6:	47b8      	blx	r7
 800b9b8:	3001      	adds	r0, #1
 800b9ba:	f43f ae6e 	beq.w	800b69a <_printf_float+0xb6>
 800b9be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b9ca:	f7f4 fff7 	bl	80009bc <__aeabi_dcmpeq>
 800b9ce:	b9c0      	cbnz	r0, 800ba02 <_printf_float+0x41e>
 800b9d0:	4653      	mov	r3, sl
 800b9d2:	f108 0201 	add.w	r2, r8, #1
 800b9d6:	4631      	mov	r1, r6
 800b9d8:	4628      	mov	r0, r5
 800b9da:	47b8      	blx	r7
 800b9dc:	3001      	adds	r0, #1
 800b9de:	d10c      	bne.n	800b9fa <_printf_float+0x416>
 800b9e0:	e65b      	b.n	800b69a <_printf_float+0xb6>
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	465a      	mov	r2, fp
 800b9e6:	4631      	mov	r1, r6
 800b9e8:	4628      	mov	r0, r5
 800b9ea:	47b8      	blx	r7
 800b9ec:	3001      	adds	r0, #1
 800b9ee:	f43f ae54 	beq.w	800b69a <_printf_float+0xb6>
 800b9f2:	f108 0801 	add.w	r8, r8, #1
 800b9f6:	45d0      	cmp	r8, sl
 800b9f8:	dbf3      	blt.n	800b9e2 <_printf_float+0x3fe>
 800b9fa:	464b      	mov	r3, r9
 800b9fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ba00:	e6e0      	b.n	800b7c4 <_printf_float+0x1e0>
 800ba02:	f04f 0800 	mov.w	r8, #0
 800ba06:	f104 0b1a 	add.w	fp, r4, #26
 800ba0a:	e7f4      	b.n	800b9f6 <_printf_float+0x412>
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	4642      	mov	r2, r8
 800ba10:	e7e1      	b.n	800b9d6 <_printf_float+0x3f2>
 800ba12:	2301      	movs	r3, #1
 800ba14:	464a      	mov	r2, r9
 800ba16:	4631      	mov	r1, r6
 800ba18:	4628      	mov	r0, r5
 800ba1a:	47b8      	blx	r7
 800ba1c:	3001      	adds	r0, #1
 800ba1e:	f43f ae3c 	beq.w	800b69a <_printf_float+0xb6>
 800ba22:	f108 0801 	add.w	r8, r8, #1
 800ba26:	68e3      	ldr	r3, [r4, #12]
 800ba28:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ba2a:	1a5b      	subs	r3, r3, r1
 800ba2c:	4543      	cmp	r3, r8
 800ba2e:	dcf0      	bgt.n	800ba12 <_printf_float+0x42e>
 800ba30:	e6fd      	b.n	800b82e <_printf_float+0x24a>
 800ba32:	f04f 0800 	mov.w	r8, #0
 800ba36:	f104 0919 	add.w	r9, r4, #25
 800ba3a:	e7f4      	b.n	800ba26 <_printf_float+0x442>

0800ba3c <_printf_common>:
 800ba3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba40:	4616      	mov	r6, r2
 800ba42:	4698      	mov	r8, r3
 800ba44:	688a      	ldr	r2, [r1, #8]
 800ba46:	690b      	ldr	r3, [r1, #16]
 800ba48:	4607      	mov	r7, r0
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	bfb8      	it	lt
 800ba4e:	4613      	movlt	r3, r2
 800ba50:	6033      	str	r3, [r6, #0]
 800ba52:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ba56:	460c      	mov	r4, r1
 800ba58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba5c:	b10a      	cbz	r2, 800ba62 <_printf_common+0x26>
 800ba5e:	3301      	adds	r3, #1
 800ba60:	6033      	str	r3, [r6, #0]
 800ba62:	6823      	ldr	r3, [r4, #0]
 800ba64:	0699      	lsls	r1, r3, #26
 800ba66:	bf42      	ittt	mi
 800ba68:	6833      	ldrmi	r3, [r6, #0]
 800ba6a:	3302      	addmi	r3, #2
 800ba6c:	6033      	strmi	r3, [r6, #0]
 800ba6e:	6825      	ldr	r5, [r4, #0]
 800ba70:	f015 0506 	ands.w	r5, r5, #6
 800ba74:	d106      	bne.n	800ba84 <_printf_common+0x48>
 800ba76:	f104 0a19 	add.w	sl, r4, #25
 800ba7a:	68e3      	ldr	r3, [r4, #12]
 800ba7c:	6832      	ldr	r2, [r6, #0]
 800ba7e:	1a9b      	subs	r3, r3, r2
 800ba80:	42ab      	cmp	r3, r5
 800ba82:	dc2b      	bgt.n	800badc <_printf_common+0xa0>
 800ba84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba88:	6822      	ldr	r2, [r4, #0]
 800ba8a:	3b00      	subs	r3, #0
 800ba8c:	bf18      	it	ne
 800ba8e:	2301      	movne	r3, #1
 800ba90:	0692      	lsls	r2, r2, #26
 800ba92:	d430      	bmi.n	800baf6 <_printf_common+0xba>
 800ba94:	4641      	mov	r1, r8
 800ba96:	4638      	mov	r0, r7
 800ba98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba9c:	47c8      	blx	r9
 800ba9e:	3001      	adds	r0, #1
 800baa0:	d023      	beq.n	800baea <_printf_common+0xae>
 800baa2:	6823      	ldr	r3, [r4, #0]
 800baa4:	6922      	ldr	r2, [r4, #16]
 800baa6:	f003 0306 	and.w	r3, r3, #6
 800baaa:	2b04      	cmp	r3, #4
 800baac:	bf14      	ite	ne
 800baae:	2500      	movne	r5, #0
 800bab0:	6833      	ldreq	r3, [r6, #0]
 800bab2:	f04f 0600 	mov.w	r6, #0
 800bab6:	bf08      	it	eq
 800bab8:	68e5      	ldreq	r5, [r4, #12]
 800baba:	f104 041a 	add.w	r4, r4, #26
 800babe:	bf08      	it	eq
 800bac0:	1aed      	subeq	r5, r5, r3
 800bac2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bac6:	bf08      	it	eq
 800bac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bacc:	4293      	cmp	r3, r2
 800bace:	bfc4      	itt	gt
 800bad0:	1a9b      	subgt	r3, r3, r2
 800bad2:	18ed      	addgt	r5, r5, r3
 800bad4:	42b5      	cmp	r5, r6
 800bad6:	d11a      	bne.n	800bb0e <_printf_common+0xd2>
 800bad8:	2000      	movs	r0, #0
 800bada:	e008      	b.n	800baee <_printf_common+0xb2>
 800badc:	2301      	movs	r3, #1
 800bade:	4652      	mov	r2, sl
 800bae0:	4641      	mov	r1, r8
 800bae2:	4638      	mov	r0, r7
 800bae4:	47c8      	blx	r9
 800bae6:	3001      	adds	r0, #1
 800bae8:	d103      	bne.n	800baf2 <_printf_common+0xb6>
 800baea:	f04f 30ff 	mov.w	r0, #4294967295
 800baee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baf2:	3501      	adds	r5, #1
 800baf4:	e7c1      	b.n	800ba7a <_printf_common+0x3e>
 800baf6:	2030      	movs	r0, #48	@ 0x30
 800baf8:	18e1      	adds	r1, r4, r3
 800bafa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bafe:	1c5a      	adds	r2, r3, #1
 800bb00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bb04:	4422      	add	r2, r4
 800bb06:	3302      	adds	r3, #2
 800bb08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bb0c:	e7c2      	b.n	800ba94 <_printf_common+0x58>
 800bb0e:	2301      	movs	r3, #1
 800bb10:	4622      	mov	r2, r4
 800bb12:	4641      	mov	r1, r8
 800bb14:	4638      	mov	r0, r7
 800bb16:	47c8      	blx	r9
 800bb18:	3001      	adds	r0, #1
 800bb1a:	d0e6      	beq.n	800baea <_printf_common+0xae>
 800bb1c:	3601      	adds	r6, #1
 800bb1e:	e7d9      	b.n	800bad4 <_printf_common+0x98>

0800bb20 <_printf_i>:
 800bb20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb24:	7e0f      	ldrb	r7, [r1, #24]
 800bb26:	4691      	mov	r9, r2
 800bb28:	2f78      	cmp	r7, #120	@ 0x78
 800bb2a:	4680      	mov	r8, r0
 800bb2c:	460c      	mov	r4, r1
 800bb2e:	469a      	mov	sl, r3
 800bb30:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bb32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bb36:	d807      	bhi.n	800bb48 <_printf_i+0x28>
 800bb38:	2f62      	cmp	r7, #98	@ 0x62
 800bb3a:	d80a      	bhi.n	800bb52 <_printf_i+0x32>
 800bb3c:	2f00      	cmp	r7, #0
 800bb3e:	f000 80d3 	beq.w	800bce8 <_printf_i+0x1c8>
 800bb42:	2f58      	cmp	r7, #88	@ 0x58
 800bb44:	f000 80ba 	beq.w	800bcbc <_printf_i+0x19c>
 800bb48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bb50:	e03a      	b.n	800bbc8 <_printf_i+0xa8>
 800bb52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bb56:	2b15      	cmp	r3, #21
 800bb58:	d8f6      	bhi.n	800bb48 <_printf_i+0x28>
 800bb5a:	a101      	add	r1, pc, #4	@ (adr r1, 800bb60 <_printf_i+0x40>)
 800bb5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb60:	0800bbb9 	.word	0x0800bbb9
 800bb64:	0800bbcd 	.word	0x0800bbcd
 800bb68:	0800bb49 	.word	0x0800bb49
 800bb6c:	0800bb49 	.word	0x0800bb49
 800bb70:	0800bb49 	.word	0x0800bb49
 800bb74:	0800bb49 	.word	0x0800bb49
 800bb78:	0800bbcd 	.word	0x0800bbcd
 800bb7c:	0800bb49 	.word	0x0800bb49
 800bb80:	0800bb49 	.word	0x0800bb49
 800bb84:	0800bb49 	.word	0x0800bb49
 800bb88:	0800bb49 	.word	0x0800bb49
 800bb8c:	0800bccf 	.word	0x0800bccf
 800bb90:	0800bbf7 	.word	0x0800bbf7
 800bb94:	0800bc89 	.word	0x0800bc89
 800bb98:	0800bb49 	.word	0x0800bb49
 800bb9c:	0800bb49 	.word	0x0800bb49
 800bba0:	0800bcf1 	.word	0x0800bcf1
 800bba4:	0800bb49 	.word	0x0800bb49
 800bba8:	0800bbf7 	.word	0x0800bbf7
 800bbac:	0800bb49 	.word	0x0800bb49
 800bbb0:	0800bb49 	.word	0x0800bb49
 800bbb4:	0800bc91 	.word	0x0800bc91
 800bbb8:	6833      	ldr	r3, [r6, #0]
 800bbba:	1d1a      	adds	r2, r3, #4
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	6032      	str	r2, [r6, #0]
 800bbc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bbc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bbc8:	2301      	movs	r3, #1
 800bbca:	e09e      	b.n	800bd0a <_printf_i+0x1ea>
 800bbcc:	6833      	ldr	r3, [r6, #0]
 800bbce:	6820      	ldr	r0, [r4, #0]
 800bbd0:	1d19      	adds	r1, r3, #4
 800bbd2:	6031      	str	r1, [r6, #0]
 800bbd4:	0606      	lsls	r6, r0, #24
 800bbd6:	d501      	bpl.n	800bbdc <_printf_i+0xbc>
 800bbd8:	681d      	ldr	r5, [r3, #0]
 800bbda:	e003      	b.n	800bbe4 <_printf_i+0xc4>
 800bbdc:	0645      	lsls	r5, r0, #25
 800bbde:	d5fb      	bpl.n	800bbd8 <_printf_i+0xb8>
 800bbe0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bbe4:	2d00      	cmp	r5, #0
 800bbe6:	da03      	bge.n	800bbf0 <_printf_i+0xd0>
 800bbe8:	232d      	movs	r3, #45	@ 0x2d
 800bbea:	426d      	negs	r5, r5
 800bbec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbf0:	230a      	movs	r3, #10
 800bbf2:	4859      	ldr	r0, [pc, #356]	@ (800bd58 <_printf_i+0x238>)
 800bbf4:	e011      	b.n	800bc1a <_printf_i+0xfa>
 800bbf6:	6821      	ldr	r1, [r4, #0]
 800bbf8:	6833      	ldr	r3, [r6, #0]
 800bbfa:	0608      	lsls	r0, r1, #24
 800bbfc:	f853 5b04 	ldr.w	r5, [r3], #4
 800bc00:	d402      	bmi.n	800bc08 <_printf_i+0xe8>
 800bc02:	0649      	lsls	r1, r1, #25
 800bc04:	bf48      	it	mi
 800bc06:	b2ad      	uxthmi	r5, r5
 800bc08:	2f6f      	cmp	r7, #111	@ 0x6f
 800bc0a:	6033      	str	r3, [r6, #0]
 800bc0c:	bf14      	ite	ne
 800bc0e:	230a      	movne	r3, #10
 800bc10:	2308      	moveq	r3, #8
 800bc12:	4851      	ldr	r0, [pc, #324]	@ (800bd58 <_printf_i+0x238>)
 800bc14:	2100      	movs	r1, #0
 800bc16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bc1a:	6866      	ldr	r6, [r4, #4]
 800bc1c:	2e00      	cmp	r6, #0
 800bc1e:	bfa8      	it	ge
 800bc20:	6821      	ldrge	r1, [r4, #0]
 800bc22:	60a6      	str	r6, [r4, #8]
 800bc24:	bfa4      	itt	ge
 800bc26:	f021 0104 	bicge.w	r1, r1, #4
 800bc2a:	6021      	strge	r1, [r4, #0]
 800bc2c:	b90d      	cbnz	r5, 800bc32 <_printf_i+0x112>
 800bc2e:	2e00      	cmp	r6, #0
 800bc30:	d04b      	beq.n	800bcca <_printf_i+0x1aa>
 800bc32:	4616      	mov	r6, r2
 800bc34:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc38:	fb03 5711 	mls	r7, r3, r1, r5
 800bc3c:	5dc7      	ldrb	r7, [r0, r7]
 800bc3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc42:	462f      	mov	r7, r5
 800bc44:	42bb      	cmp	r3, r7
 800bc46:	460d      	mov	r5, r1
 800bc48:	d9f4      	bls.n	800bc34 <_printf_i+0x114>
 800bc4a:	2b08      	cmp	r3, #8
 800bc4c:	d10b      	bne.n	800bc66 <_printf_i+0x146>
 800bc4e:	6823      	ldr	r3, [r4, #0]
 800bc50:	07df      	lsls	r7, r3, #31
 800bc52:	d508      	bpl.n	800bc66 <_printf_i+0x146>
 800bc54:	6923      	ldr	r3, [r4, #16]
 800bc56:	6861      	ldr	r1, [r4, #4]
 800bc58:	4299      	cmp	r1, r3
 800bc5a:	bfde      	ittt	le
 800bc5c:	2330      	movle	r3, #48	@ 0x30
 800bc5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc62:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bc66:	1b92      	subs	r2, r2, r6
 800bc68:	6122      	str	r2, [r4, #16]
 800bc6a:	464b      	mov	r3, r9
 800bc6c:	4621      	mov	r1, r4
 800bc6e:	4640      	mov	r0, r8
 800bc70:	f8cd a000 	str.w	sl, [sp]
 800bc74:	aa03      	add	r2, sp, #12
 800bc76:	f7ff fee1 	bl	800ba3c <_printf_common>
 800bc7a:	3001      	adds	r0, #1
 800bc7c:	d14a      	bne.n	800bd14 <_printf_i+0x1f4>
 800bc7e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc82:	b004      	add	sp, #16
 800bc84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc88:	6823      	ldr	r3, [r4, #0]
 800bc8a:	f043 0320 	orr.w	r3, r3, #32
 800bc8e:	6023      	str	r3, [r4, #0]
 800bc90:	2778      	movs	r7, #120	@ 0x78
 800bc92:	4832      	ldr	r0, [pc, #200]	@ (800bd5c <_printf_i+0x23c>)
 800bc94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc98:	6823      	ldr	r3, [r4, #0]
 800bc9a:	6831      	ldr	r1, [r6, #0]
 800bc9c:	061f      	lsls	r7, r3, #24
 800bc9e:	f851 5b04 	ldr.w	r5, [r1], #4
 800bca2:	d402      	bmi.n	800bcaa <_printf_i+0x18a>
 800bca4:	065f      	lsls	r7, r3, #25
 800bca6:	bf48      	it	mi
 800bca8:	b2ad      	uxthmi	r5, r5
 800bcaa:	6031      	str	r1, [r6, #0]
 800bcac:	07d9      	lsls	r1, r3, #31
 800bcae:	bf44      	itt	mi
 800bcb0:	f043 0320 	orrmi.w	r3, r3, #32
 800bcb4:	6023      	strmi	r3, [r4, #0]
 800bcb6:	b11d      	cbz	r5, 800bcc0 <_printf_i+0x1a0>
 800bcb8:	2310      	movs	r3, #16
 800bcba:	e7ab      	b.n	800bc14 <_printf_i+0xf4>
 800bcbc:	4826      	ldr	r0, [pc, #152]	@ (800bd58 <_printf_i+0x238>)
 800bcbe:	e7e9      	b.n	800bc94 <_printf_i+0x174>
 800bcc0:	6823      	ldr	r3, [r4, #0]
 800bcc2:	f023 0320 	bic.w	r3, r3, #32
 800bcc6:	6023      	str	r3, [r4, #0]
 800bcc8:	e7f6      	b.n	800bcb8 <_printf_i+0x198>
 800bcca:	4616      	mov	r6, r2
 800bccc:	e7bd      	b.n	800bc4a <_printf_i+0x12a>
 800bcce:	6833      	ldr	r3, [r6, #0]
 800bcd0:	6825      	ldr	r5, [r4, #0]
 800bcd2:	1d18      	adds	r0, r3, #4
 800bcd4:	6961      	ldr	r1, [r4, #20]
 800bcd6:	6030      	str	r0, [r6, #0]
 800bcd8:	062e      	lsls	r6, r5, #24
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	d501      	bpl.n	800bce2 <_printf_i+0x1c2>
 800bcde:	6019      	str	r1, [r3, #0]
 800bce0:	e002      	b.n	800bce8 <_printf_i+0x1c8>
 800bce2:	0668      	lsls	r0, r5, #25
 800bce4:	d5fb      	bpl.n	800bcde <_printf_i+0x1be>
 800bce6:	8019      	strh	r1, [r3, #0]
 800bce8:	2300      	movs	r3, #0
 800bcea:	4616      	mov	r6, r2
 800bcec:	6123      	str	r3, [r4, #16]
 800bcee:	e7bc      	b.n	800bc6a <_printf_i+0x14a>
 800bcf0:	6833      	ldr	r3, [r6, #0]
 800bcf2:	2100      	movs	r1, #0
 800bcf4:	1d1a      	adds	r2, r3, #4
 800bcf6:	6032      	str	r2, [r6, #0]
 800bcf8:	681e      	ldr	r6, [r3, #0]
 800bcfa:	6862      	ldr	r2, [r4, #4]
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	f000 fdb0 	bl	800c862 <memchr>
 800bd02:	b108      	cbz	r0, 800bd08 <_printf_i+0x1e8>
 800bd04:	1b80      	subs	r0, r0, r6
 800bd06:	6060      	str	r0, [r4, #4]
 800bd08:	6863      	ldr	r3, [r4, #4]
 800bd0a:	6123      	str	r3, [r4, #16]
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd12:	e7aa      	b.n	800bc6a <_printf_i+0x14a>
 800bd14:	4632      	mov	r2, r6
 800bd16:	4649      	mov	r1, r9
 800bd18:	4640      	mov	r0, r8
 800bd1a:	6923      	ldr	r3, [r4, #16]
 800bd1c:	47d0      	blx	sl
 800bd1e:	3001      	adds	r0, #1
 800bd20:	d0ad      	beq.n	800bc7e <_printf_i+0x15e>
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	079b      	lsls	r3, r3, #30
 800bd26:	d413      	bmi.n	800bd50 <_printf_i+0x230>
 800bd28:	68e0      	ldr	r0, [r4, #12]
 800bd2a:	9b03      	ldr	r3, [sp, #12]
 800bd2c:	4298      	cmp	r0, r3
 800bd2e:	bfb8      	it	lt
 800bd30:	4618      	movlt	r0, r3
 800bd32:	e7a6      	b.n	800bc82 <_printf_i+0x162>
 800bd34:	2301      	movs	r3, #1
 800bd36:	4632      	mov	r2, r6
 800bd38:	4649      	mov	r1, r9
 800bd3a:	4640      	mov	r0, r8
 800bd3c:	47d0      	blx	sl
 800bd3e:	3001      	adds	r0, #1
 800bd40:	d09d      	beq.n	800bc7e <_printf_i+0x15e>
 800bd42:	3501      	adds	r5, #1
 800bd44:	68e3      	ldr	r3, [r4, #12]
 800bd46:	9903      	ldr	r1, [sp, #12]
 800bd48:	1a5b      	subs	r3, r3, r1
 800bd4a:	42ab      	cmp	r3, r5
 800bd4c:	dcf2      	bgt.n	800bd34 <_printf_i+0x214>
 800bd4e:	e7eb      	b.n	800bd28 <_printf_i+0x208>
 800bd50:	2500      	movs	r5, #0
 800bd52:	f104 0619 	add.w	r6, r4, #25
 800bd56:	e7f5      	b.n	800bd44 <_printf_i+0x224>
 800bd58:	0800fb19 	.word	0x0800fb19
 800bd5c:	0800fb2a 	.word	0x0800fb2a

0800bd60 <_scanf_float>:
 800bd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd64:	b087      	sub	sp, #28
 800bd66:	9303      	str	r3, [sp, #12]
 800bd68:	688b      	ldr	r3, [r1, #8]
 800bd6a:	4617      	mov	r7, r2
 800bd6c:	1e5a      	subs	r2, r3, #1
 800bd6e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bd72:	bf82      	ittt	hi
 800bd74:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bd78:	eb03 0b05 	addhi.w	fp, r3, r5
 800bd7c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bd80:	460a      	mov	r2, r1
 800bd82:	f04f 0500 	mov.w	r5, #0
 800bd86:	bf88      	it	hi
 800bd88:	608b      	strhi	r3, [r1, #8]
 800bd8a:	680b      	ldr	r3, [r1, #0]
 800bd8c:	4680      	mov	r8, r0
 800bd8e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800bd92:	f842 3b1c 	str.w	r3, [r2], #28
 800bd96:	460c      	mov	r4, r1
 800bd98:	bf98      	it	ls
 800bd9a:	f04f 0b00 	movls.w	fp, #0
 800bd9e:	4616      	mov	r6, r2
 800bda0:	46aa      	mov	sl, r5
 800bda2:	46a9      	mov	r9, r5
 800bda4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bda8:	9201      	str	r2, [sp, #4]
 800bdaa:	9502      	str	r5, [sp, #8]
 800bdac:	68a2      	ldr	r2, [r4, #8]
 800bdae:	b152      	cbz	r2, 800bdc6 <_scanf_float+0x66>
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	2b4e      	cmp	r3, #78	@ 0x4e
 800bdb6:	d865      	bhi.n	800be84 <_scanf_float+0x124>
 800bdb8:	2b40      	cmp	r3, #64	@ 0x40
 800bdba:	d83d      	bhi.n	800be38 <_scanf_float+0xd8>
 800bdbc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800bdc0:	b2c8      	uxtb	r0, r1
 800bdc2:	280e      	cmp	r0, #14
 800bdc4:	d93b      	bls.n	800be3e <_scanf_float+0xde>
 800bdc6:	f1b9 0f00 	cmp.w	r9, #0
 800bdca:	d003      	beq.n	800bdd4 <_scanf_float+0x74>
 800bdcc:	6823      	ldr	r3, [r4, #0]
 800bdce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bdd2:	6023      	str	r3, [r4, #0]
 800bdd4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdd8:	f1ba 0f01 	cmp.w	sl, #1
 800bddc:	f200 8118 	bhi.w	800c010 <_scanf_float+0x2b0>
 800bde0:	9b01      	ldr	r3, [sp, #4]
 800bde2:	429e      	cmp	r6, r3
 800bde4:	f200 8109 	bhi.w	800bffa <_scanf_float+0x29a>
 800bde8:	2001      	movs	r0, #1
 800bdea:	b007      	add	sp, #28
 800bdec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800bdf4:	2a0d      	cmp	r2, #13
 800bdf6:	d8e6      	bhi.n	800bdc6 <_scanf_float+0x66>
 800bdf8:	a101      	add	r1, pc, #4	@ (adr r1, 800be00 <_scanf_float+0xa0>)
 800bdfa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bdfe:	bf00      	nop
 800be00:	0800bf47 	.word	0x0800bf47
 800be04:	0800bdc7 	.word	0x0800bdc7
 800be08:	0800bdc7 	.word	0x0800bdc7
 800be0c:	0800bdc7 	.word	0x0800bdc7
 800be10:	0800bfa7 	.word	0x0800bfa7
 800be14:	0800bf7f 	.word	0x0800bf7f
 800be18:	0800bdc7 	.word	0x0800bdc7
 800be1c:	0800bdc7 	.word	0x0800bdc7
 800be20:	0800bf55 	.word	0x0800bf55
 800be24:	0800bdc7 	.word	0x0800bdc7
 800be28:	0800bdc7 	.word	0x0800bdc7
 800be2c:	0800bdc7 	.word	0x0800bdc7
 800be30:	0800bdc7 	.word	0x0800bdc7
 800be34:	0800bf0d 	.word	0x0800bf0d
 800be38:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800be3c:	e7da      	b.n	800bdf4 <_scanf_float+0x94>
 800be3e:	290e      	cmp	r1, #14
 800be40:	d8c1      	bhi.n	800bdc6 <_scanf_float+0x66>
 800be42:	a001      	add	r0, pc, #4	@ (adr r0, 800be48 <_scanf_float+0xe8>)
 800be44:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800be48:	0800befd 	.word	0x0800befd
 800be4c:	0800bdc7 	.word	0x0800bdc7
 800be50:	0800befd 	.word	0x0800befd
 800be54:	0800bf93 	.word	0x0800bf93
 800be58:	0800bdc7 	.word	0x0800bdc7
 800be5c:	0800bea5 	.word	0x0800bea5
 800be60:	0800bee3 	.word	0x0800bee3
 800be64:	0800bee3 	.word	0x0800bee3
 800be68:	0800bee3 	.word	0x0800bee3
 800be6c:	0800bee3 	.word	0x0800bee3
 800be70:	0800bee3 	.word	0x0800bee3
 800be74:	0800bee3 	.word	0x0800bee3
 800be78:	0800bee3 	.word	0x0800bee3
 800be7c:	0800bee3 	.word	0x0800bee3
 800be80:	0800bee3 	.word	0x0800bee3
 800be84:	2b6e      	cmp	r3, #110	@ 0x6e
 800be86:	d809      	bhi.n	800be9c <_scanf_float+0x13c>
 800be88:	2b60      	cmp	r3, #96	@ 0x60
 800be8a:	d8b1      	bhi.n	800bdf0 <_scanf_float+0x90>
 800be8c:	2b54      	cmp	r3, #84	@ 0x54
 800be8e:	d07b      	beq.n	800bf88 <_scanf_float+0x228>
 800be90:	2b59      	cmp	r3, #89	@ 0x59
 800be92:	d198      	bne.n	800bdc6 <_scanf_float+0x66>
 800be94:	2d07      	cmp	r5, #7
 800be96:	d196      	bne.n	800bdc6 <_scanf_float+0x66>
 800be98:	2508      	movs	r5, #8
 800be9a:	e02c      	b.n	800bef6 <_scanf_float+0x196>
 800be9c:	2b74      	cmp	r3, #116	@ 0x74
 800be9e:	d073      	beq.n	800bf88 <_scanf_float+0x228>
 800bea0:	2b79      	cmp	r3, #121	@ 0x79
 800bea2:	e7f6      	b.n	800be92 <_scanf_float+0x132>
 800bea4:	6821      	ldr	r1, [r4, #0]
 800bea6:	05c8      	lsls	r0, r1, #23
 800bea8:	d51b      	bpl.n	800bee2 <_scanf_float+0x182>
 800beaa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800beae:	6021      	str	r1, [r4, #0]
 800beb0:	f109 0901 	add.w	r9, r9, #1
 800beb4:	f1bb 0f00 	cmp.w	fp, #0
 800beb8:	d003      	beq.n	800bec2 <_scanf_float+0x162>
 800beba:	3201      	adds	r2, #1
 800bebc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bec0:	60a2      	str	r2, [r4, #8]
 800bec2:	68a3      	ldr	r3, [r4, #8]
 800bec4:	3b01      	subs	r3, #1
 800bec6:	60a3      	str	r3, [r4, #8]
 800bec8:	6923      	ldr	r3, [r4, #16]
 800beca:	3301      	adds	r3, #1
 800becc:	6123      	str	r3, [r4, #16]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	3b01      	subs	r3, #1
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	607b      	str	r3, [r7, #4]
 800bed6:	f340 8087 	ble.w	800bfe8 <_scanf_float+0x288>
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	3301      	adds	r3, #1
 800bede:	603b      	str	r3, [r7, #0]
 800bee0:	e764      	b.n	800bdac <_scanf_float+0x4c>
 800bee2:	eb1a 0105 	adds.w	r1, sl, r5
 800bee6:	f47f af6e 	bne.w	800bdc6 <_scanf_float+0x66>
 800beea:	460d      	mov	r5, r1
 800beec:	468a      	mov	sl, r1
 800beee:	6822      	ldr	r2, [r4, #0]
 800bef0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800bef4:	6022      	str	r2, [r4, #0]
 800bef6:	f806 3b01 	strb.w	r3, [r6], #1
 800befa:	e7e2      	b.n	800bec2 <_scanf_float+0x162>
 800befc:	6822      	ldr	r2, [r4, #0]
 800befe:	0610      	lsls	r0, r2, #24
 800bf00:	f57f af61 	bpl.w	800bdc6 <_scanf_float+0x66>
 800bf04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bf08:	6022      	str	r2, [r4, #0]
 800bf0a:	e7f4      	b.n	800bef6 <_scanf_float+0x196>
 800bf0c:	f1ba 0f00 	cmp.w	sl, #0
 800bf10:	d10e      	bne.n	800bf30 <_scanf_float+0x1d0>
 800bf12:	f1b9 0f00 	cmp.w	r9, #0
 800bf16:	d10e      	bne.n	800bf36 <_scanf_float+0x1d6>
 800bf18:	6822      	ldr	r2, [r4, #0]
 800bf1a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bf1e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bf22:	d108      	bne.n	800bf36 <_scanf_float+0x1d6>
 800bf24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bf28:	f04f 0a01 	mov.w	sl, #1
 800bf2c:	6022      	str	r2, [r4, #0]
 800bf2e:	e7e2      	b.n	800bef6 <_scanf_float+0x196>
 800bf30:	f1ba 0f02 	cmp.w	sl, #2
 800bf34:	d055      	beq.n	800bfe2 <_scanf_float+0x282>
 800bf36:	2d01      	cmp	r5, #1
 800bf38:	d002      	beq.n	800bf40 <_scanf_float+0x1e0>
 800bf3a:	2d04      	cmp	r5, #4
 800bf3c:	f47f af43 	bne.w	800bdc6 <_scanf_float+0x66>
 800bf40:	3501      	adds	r5, #1
 800bf42:	b2ed      	uxtb	r5, r5
 800bf44:	e7d7      	b.n	800bef6 <_scanf_float+0x196>
 800bf46:	f1ba 0f01 	cmp.w	sl, #1
 800bf4a:	f47f af3c 	bne.w	800bdc6 <_scanf_float+0x66>
 800bf4e:	f04f 0a02 	mov.w	sl, #2
 800bf52:	e7d0      	b.n	800bef6 <_scanf_float+0x196>
 800bf54:	b97d      	cbnz	r5, 800bf76 <_scanf_float+0x216>
 800bf56:	f1b9 0f00 	cmp.w	r9, #0
 800bf5a:	f47f af37 	bne.w	800bdcc <_scanf_float+0x6c>
 800bf5e:	6822      	ldr	r2, [r4, #0]
 800bf60:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bf64:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bf68:	f040 8103 	bne.w	800c172 <_scanf_float+0x412>
 800bf6c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bf70:	2501      	movs	r5, #1
 800bf72:	6022      	str	r2, [r4, #0]
 800bf74:	e7bf      	b.n	800bef6 <_scanf_float+0x196>
 800bf76:	2d03      	cmp	r5, #3
 800bf78:	d0e2      	beq.n	800bf40 <_scanf_float+0x1e0>
 800bf7a:	2d05      	cmp	r5, #5
 800bf7c:	e7de      	b.n	800bf3c <_scanf_float+0x1dc>
 800bf7e:	2d02      	cmp	r5, #2
 800bf80:	f47f af21 	bne.w	800bdc6 <_scanf_float+0x66>
 800bf84:	2503      	movs	r5, #3
 800bf86:	e7b6      	b.n	800bef6 <_scanf_float+0x196>
 800bf88:	2d06      	cmp	r5, #6
 800bf8a:	f47f af1c 	bne.w	800bdc6 <_scanf_float+0x66>
 800bf8e:	2507      	movs	r5, #7
 800bf90:	e7b1      	b.n	800bef6 <_scanf_float+0x196>
 800bf92:	6822      	ldr	r2, [r4, #0]
 800bf94:	0591      	lsls	r1, r2, #22
 800bf96:	f57f af16 	bpl.w	800bdc6 <_scanf_float+0x66>
 800bf9a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800bf9e:	6022      	str	r2, [r4, #0]
 800bfa0:	f8cd 9008 	str.w	r9, [sp, #8]
 800bfa4:	e7a7      	b.n	800bef6 <_scanf_float+0x196>
 800bfa6:	6822      	ldr	r2, [r4, #0]
 800bfa8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800bfac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bfb0:	d006      	beq.n	800bfc0 <_scanf_float+0x260>
 800bfb2:	0550      	lsls	r0, r2, #21
 800bfb4:	f57f af07 	bpl.w	800bdc6 <_scanf_float+0x66>
 800bfb8:	f1b9 0f00 	cmp.w	r9, #0
 800bfbc:	f000 80d9 	beq.w	800c172 <_scanf_float+0x412>
 800bfc0:	0591      	lsls	r1, r2, #22
 800bfc2:	bf58      	it	pl
 800bfc4:	9902      	ldrpl	r1, [sp, #8]
 800bfc6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bfca:	bf58      	it	pl
 800bfcc:	eba9 0101 	subpl.w	r1, r9, r1
 800bfd0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bfd4:	f04f 0900 	mov.w	r9, #0
 800bfd8:	bf58      	it	pl
 800bfda:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bfde:	6022      	str	r2, [r4, #0]
 800bfe0:	e789      	b.n	800bef6 <_scanf_float+0x196>
 800bfe2:	f04f 0a03 	mov.w	sl, #3
 800bfe6:	e786      	b.n	800bef6 <_scanf_float+0x196>
 800bfe8:	4639      	mov	r1, r7
 800bfea:	4640      	mov	r0, r8
 800bfec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bff0:	4798      	blx	r3
 800bff2:	2800      	cmp	r0, #0
 800bff4:	f43f aeda 	beq.w	800bdac <_scanf_float+0x4c>
 800bff8:	e6e5      	b.n	800bdc6 <_scanf_float+0x66>
 800bffa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bffe:	463a      	mov	r2, r7
 800c000:	4640      	mov	r0, r8
 800c002:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c006:	4798      	blx	r3
 800c008:	6923      	ldr	r3, [r4, #16]
 800c00a:	3b01      	subs	r3, #1
 800c00c:	6123      	str	r3, [r4, #16]
 800c00e:	e6e7      	b.n	800bde0 <_scanf_float+0x80>
 800c010:	1e6b      	subs	r3, r5, #1
 800c012:	2b06      	cmp	r3, #6
 800c014:	d824      	bhi.n	800c060 <_scanf_float+0x300>
 800c016:	2d02      	cmp	r5, #2
 800c018:	d836      	bhi.n	800c088 <_scanf_float+0x328>
 800c01a:	9b01      	ldr	r3, [sp, #4]
 800c01c:	429e      	cmp	r6, r3
 800c01e:	f67f aee3 	bls.w	800bde8 <_scanf_float+0x88>
 800c022:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c026:	463a      	mov	r2, r7
 800c028:	4640      	mov	r0, r8
 800c02a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c02e:	4798      	blx	r3
 800c030:	6923      	ldr	r3, [r4, #16]
 800c032:	3b01      	subs	r3, #1
 800c034:	6123      	str	r3, [r4, #16]
 800c036:	e7f0      	b.n	800c01a <_scanf_float+0x2ba>
 800c038:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c03c:	463a      	mov	r2, r7
 800c03e:	4640      	mov	r0, r8
 800c040:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c044:	4798      	blx	r3
 800c046:	6923      	ldr	r3, [r4, #16]
 800c048:	3b01      	subs	r3, #1
 800c04a:	6123      	str	r3, [r4, #16]
 800c04c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c050:	fa5f fa8a 	uxtb.w	sl, sl
 800c054:	f1ba 0f02 	cmp.w	sl, #2
 800c058:	d1ee      	bne.n	800c038 <_scanf_float+0x2d8>
 800c05a:	3d03      	subs	r5, #3
 800c05c:	b2ed      	uxtb	r5, r5
 800c05e:	1b76      	subs	r6, r6, r5
 800c060:	6823      	ldr	r3, [r4, #0]
 800c062:	05da      	lsls	r2, r3, #23
 800c064:	d530      	bpl.n	800c0c8 <_scanf_float+0x368>
 800c066:	055b      	lsls	r3, r3, #21
 800c068:	d511      	bpl.n	800c08e <_scanf_float+0x32e>
 800c06a:	9b01      	ldr	r3, [sp, #4]
 800c06c:	429e      	cmp	r6, r3
 800c06e:	f67f aebb 	bls.w	800bde8 <_scanf_float+0x88>
 800c072:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c076:	463a      	mov	r2, r7
 800c078:	4640      	mov	r0, r8
 800c07a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c07e:	4798      	blx	r3
 800c080:	6923      	ldr	r3, [r4, #16]
 800c082:	3b01      	subs	r3, #1
 800c084:	6123      	str	r3, [r4, #16]
 800c086:	e7f0      	b.n	800c06a <_scanf_float+0x30a>
 800c088:	46aa      	mov	sl, r5
 800c08a:	46b3      	mov	fp, r6
 800c08c:	e7de      	b.n	800c04c <_scanf_float+0x2ec>
 800c08e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c092:	6923      	ldr	r3, [r4, #16]
 800c094:	2965      	cmp	r1, #101	@ 0x65
 800c096:	f103 33ff 	add.w	r3, r3, #4294967295
 800c09a:	f106 35ff 	add.w	r5, r6, #4294967295
 800c09e:	6123      	str	r3, [r4, #16]
 800c0a0:	d00c      	beq.n	800c0bc <_scanf_float+0x35c>
 800c0a2:	2945      	cmp	r1, #69	@ 0x45
 800c0a4:	d00a      	beq.n	800c0bc <_scanf_float+0x35c>
 800c0a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c0aa:	463a      	mov	r2, r7
 800c0ac:	4640      	mov	r0, r8
 800c0ae:	4798      	blx	r3
 800c0b0:	6923      	ldr	r3, [r4, #16]
 800c0b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	1eb5      	subs	r5, r6, #2
 800c0ba:	6123      	str	r3, [r4, #16]
 800c0bc:	463a      	mov	r2, r7
 800c0be:	4640      	mov	r0, r8
 800c0c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c0c4:	4798      	blx	r3
 800c0c6:	462e      	mov	r6, r5
 800c0c8:	6822      	ldr	r2, [r4, #0]
 800c0ca:	f012 0210 	ands.w	r2, r2, #16
 800c0ce:	d001      	beq.n	800c0d4 <_scanf_float+0x374>
 800c0d0:	2000      	movs	r0, #0
 800c0d2:	e68a      	b.n	800bdea <_scanf_float+0x8a>
 800c0d4:	7032      	strb	r2, [r6, #0]
 800c0d6:	6823      	ldr	r3, [r4, #0]
 800c0d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c0dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c0e0:	d11c      	bne.n	800c11c <_scanf_float+0x3bc>
 800c0e2:	9b02      	ldr	r3, [sp, #8]
 800c0e4:	454b      	cmp	r3, r9
 800c0e6:	eba3 0209 	sub.w	r2, r3, r9
 800c0ea:	d123      	bne.n	800c134 <_scanf_float+0x3d4>
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	4640      	mov	r0, r8
 800c0f0:	9901      	ldr	r1, [sp, #4]
 800c0f2:	f7ff f941 	bl	800b378 <_strtod_r>
 800c0f6:	9b03      	ldr	r3, [sp, #12]
 800c0f8:	6825      	ldr	r5, [r4, #0]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f015 0f02 	tst.w	r5, #2
 800c100:	4606      	mov	r6, r0
 800c102:	460f      	mov	r7, r1
 800c104:	f103 0204 	add.w	r2, r3, #4
 800c108:	d01f      	beq.n	800c14a <_scanf_float+0x3ea>
 800c10a:	9903      	ldr	r1, [sp, #12]
 800c10c:	600a      	str	r2, [r1, #0]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	e9c3 6700 	strd	r6, r7, [r3]
 800c114:	68e3      	ldr	r3, [r4, #12]
 800c116:	3301      	adds	r3, #1
 800c118:	60e3      	str	r3, [r4, #12]
 800c11a:	e7d9      	b.n	800c0d0 <_scanf_float+0x370>
 800c11c:	9b04      	ldr	r3, [sp, #16]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d0e4      	beq.n	800c0ec <_scanf_float+0x38c>
 800c122:	9905      	ldr	r1, [sp, #20]
 800c124:	230a      	movs	r3, #10
 800c126:	4640      	mov	r0, r8
 800c128:	3101      	adds	r1, #1
 800c12a:	f7ff f9b1 	bl	800b490 <_strtol_r>
 800c12e:	9b04      	ldr	r3, [sp, #16]
 800c130:	9e05      	ldr	r6, [sp, #20]
 800c132:	1ac2      	subs	r2, r0, r3
 800c134:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c138:	429e      	cmp	r6, r3
 800c13a:	bf28      	it	cs
 800c13c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c140:	4630      	mov	r0, r6
 800c142:	490d      	ldr	r1, [pc, #52]	@ (800c178 <_scanf_float+0x418>)
 800c144:	f000 f982 	bl	800c44c <siprintf>
 800c148:	e7d0      	b.n	800c0ec <_scanf_float+0x38c>
 800c14a:	076d      	lsls	r5, r5, #29
 800c14c:	d4dd      	bmi.n	800c10a <_scanf_float+0x3aa>
 800c14e:	9d03      	ldr	r5, [sp, #12]
 800c150:	602a      	str	r2, [r5, #0]
 800c152:	681d      	ldr	r5, [r3, #0]
 800c154:	4602      	mov	r2, r0
 800c156:	460b      	mov	r3, r1
 800c158:	f7f4 fc62 	bl	8000a20 <__aeabi_dcmpun>
 800c15c:	b120      	cbz	r0, 800c168 <_scanf_float+0x408>
 800c15e:	4807      	ldr	r0, [pc, #28]	@ (800c17c <_scanf_float+0x41c>)
 800c160:	f000 fba2 	bl	800c8a8 <nanf>
 800c164:	6028      	str	r0, [r5, #0]
 800c166:	e7d5      	b.n	800c114 <_scanf_float+0x3b4>
 800c168:	4630      	mov	r0, r6
 800c16a:	4639      	mov	r1, r7
 800c16c:	f7f4 fcb6 	bl	8000adc <__aeabi_d2f>
 800c170:	e7f8      	b.n	800c164 <_scanf_float+0x404>
 800c172:	f04f 0900 	mov.w	r9, #0
 800c176:	e62d      	b.n	800bdd4 <_scanf_float+0x74>
 800c178:	0800fb3b 	.word	0x0800fb3b
 800c17c:	0800f240 	.word	0x0800f240

0800c180 <std>:
 800c180:	2300      	movs	r3, #0
 800c182:	b510      	push	{r4, lr}
 800c184:	4604      	mov	r4, r0
 800c186:	e9c0 3300 	strd	r3, r3, [r0]
 800c18a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c18e:	6083      	str	r3, [r0, #8]
 800c190:	8181      	strh	r1, [r0, #12]
 800c192:	6643      	str	r3, [r0, #100]	@ 0x64
 800c194:	81c2      	strh	r2, [r0, #14]
 800c196:	6183      	str	r3, [r0, #24]
 800c198:	4619      	mov	r1, r3
 800c19a:	2208      	movs	r2, #8
 800c19c:	305c      	adds	r0, #92	@ 0x5c
 800c19e:	f000 fa5d 	bl	800c65c <memset>
 800c1a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c1d8 <std+0x58>)
 800c1a4:	6224      	str	r4, [r4, #32]
 800c1a6:	6263      	str	r3, [r4, #36]	@ 0x24
 800c1a8:	4b0c      	ldr	r3, [pc, #48]	@ (800c1dc <std+0x5c>)
 800c1aa:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c1ac:	4b0c      	ldr	r3, [pc, #48]	@ (800c1e0 <std+0x60>)
 800c1ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c1b0:	4b0c      	ldr	r3, [pc, #48]	@ (800c1e4 <std+0x64>)
 800c1b2:	6323      	str	r3, [r4, #48]	@ 0x30
 800c1b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c1e8 <std+0x68>)
 800c1b6:	429c      	cmp	r4, r3
 800c1b8:	d006      	beq.n	800c1c8 <std+0x48>
 800c1ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c1be:	4294      	cmp	r4, r2
 800c1c0:	d002      	beq.n	800c1c8 <std+0x48>
 800c1c2:	33d0      	adds	r3, #208	@ 0xd0
 800c1c4:	429c      	cmp	r4, r3
 800c1c6:	d105      	bne.n	800c1d4 <std+0x54>
 800c1c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c1cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1d0:	f000 bb3c 	b.w	800c84c <__retarget_lock_init_recursive>
 800c1d4:	bd10      	pop	{r4, pc}
 800c1d6:	bf00      	nop
 800c1d8:	0800c48d 	.word	0x0800c48d
 800c1dc:	0800c4af 	.word	0x0800c4af
 800c1e0:	0800c4e7 	.word	0x0800c4e7
 800c1e4:	0800c50b 	.word	0x0800c50b
 800c1e8:	20000bcc 	.word	0x20000bcc

0800c1ec <stdio_exit_handler>:
 800c1ec:	4a02      	ldr	r2, [pc, #8]	@ (800c1f8 <stdio_exit_handler+0xc>)
 800c1ee:	4903      	ldr	r1, [pc, #12]	@ (800c1fc <stdio_exit_handler+0x10>)
 800c1f0:	4803      	ldr	r0, [pc, #12]	@ (800c200 <stdio_exit_handler+0x14>)
 800c1f2:	f000 b869 	b.w	800c2c8 <_fwalk_sglue>
 800c1f6:	bf00      	nop
 800c1f8:	20000010 	.word	0x20000010
 800c1fc:	0800ec0d 	.word	0x0800ec0d
 800c200:	2000018c 	.word	0x2000018c

0800c204 <cleanup_stdio>:
 800c204:	6841      	ldr	r1, [r0, #4]
 800c206:	4b0c      	ldr	r3, [pc, #48]	@ (800c238 <cleanup_stdio+0x34>)
 800c208:	b510      	push	{r4, lr}
 800c20a:	4299      	cmp	r1, r3
 800c20c:	4604      	mov	r4, r0
 800c20e:	d001      	beq.n	800c214 <cleanup_stdio+0x10>
 800c210:	f002 fcfc 	bl	800ec0c <_fflush_r>
 800c214:	68a1      	ldr	r1, [r4, #8]
 800c216:	4b09      	ldr	r3, [pc, #36]	@ (800c23c <cleanup_stdio+0x38>)
 800c218:	4299      	cmp	r1, r3
 800c21a:	d002      	beq.n	800c222 <cleanup_stdio+0x1e>
 800c21c:	4620      	mov	r0, r4
 800c21e:	f002 fcf5 	bl	800ec0c <_fflush_r>
 800c222:	68e1      	ldr	r1, [r4, #12]
 800c224:	4b06      	ldr	r3, [pc, #24]	@ (800c240 <cleanup_stdio+0x3c>)
 800c226:	4299      	cmp	r1, r3
 800c228:	d004      	beq.n	800c234 <cleanup_stdio+0x30>
 800c22a:	4620      	mov	r0, r4
 800c22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c230:	f002 bcec 	b.w	800ec0c <_fflush_r>
 800c234:	bd10      	pop	{r4, pc}
 800c236:	bf00      	nop
 800c238:	20000bcc 	.word	0x20000bcc
 800c23c:	20000c34 	.word	0x20000c34
 800c240:	20000c9c 	.word	0x20000c9c

0800c244 <global_stdio_init.part.0>:
 800c244:	b510      	push	{r4, lr}
 800c246:	4b0b      	ldr	r3, [pc, #44]	@ (800c274 <global_stdio_init.part.0+0x30>)
 800c248:	4c0b      	ldr	r4, [pc, #44]	@ (800c278 <global_stdio_init.part.0+0x34>)
 800c24a:	4a0c      	ldr	r2, [pc, #48]	@ (800c27c <global_stdio_init.part.0+0x38>)
 800c24c:	4620      	mov	r0, r4
 800c24e:	601a      	str	r2, [r3, #0]
 800c250:	2104      	movs	r1, #4
 800c252:	2200      	movs	r2, #0
 800c254:	f7ff ff94 	bl	800c180 <std>
 800c258:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c25c:	2201      	movs	r2, #1
 800c25e:	2109      	movs	r1, #9
 800c260:	f7ff ff8e 	bl	800c180 <std>
 800c264:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c268:	2202      	movs	r2, #2
 800c26a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c26e:	2112      	movs	r1, #18
 800c270:	f7ff bf86 	b.w	800c180 <std>
 800c274:	20000d04 	.word	0x20000d04
 800c278:	20000bcc 	.word	0x20000bcc
 800c27c:	0800c1ed 	.word	0x0800c1ed

0800c280 <__sfp_lock_acquire>:
 800c280:	4801      	ldr	r0, [pc, #4]	@ (800c288 <__sfp_lock_acquire+0x8>)
 800c282:	f000 bae4 	b.w	800c84e <__retarget_lock_acquire_recursive>
 800c286:	bf00      	nop
 800c288:	20000d0d 	.word	0x20000d0d

0800c28c <__sfp_lock_release>:
 800c28c:	4801      	ldr	r0, [pc, #4]	@ (800c294 <__sfp_lock_release+0x8>)
 800c28e:	f000 badf 	b.w	800c850 <__retarget_lock_release_recursive>
 800c292:	bf00      	nop
 800c294:	20000d0d 	.word	0x20000d0d

0800c298 <__sinit>:
 800c298:	b510      	push	{r4, lr}
 800c29a:	4604      	mov	r4, r0
 800c29c:	f7ff fff0 	bl	800c280 <__sfp_lock_acquire>
 800c2a0:	6a23      	ldr	r3, [r4, #32]
 800c2a2:	b11b      	cbz	r3, 800c2ac <__sinit+0x14>
 800c2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2a8:	f7ff bff0 	b.w	800c28c <__sfp_lock_release>
 800c2ac:	4b04      	ldr	r3, [pc, #16]	@ (800c2c0 <__sinit+0x28>)
 800c2ae:	6223      	str	r3, [r4, #32]
 800c2b0:	4b04      	ldr	r3, [pc, #16]	@ (800c2c4 <__sinit+0x2c>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1f5      	bne.n	800c2a4 <__sinit+0xc>
 800c2b8:	f7ff ffc4 	bl	800c244 <global_stdio_init.part.0>
 800c2bc:	e7f2      	b.n	800c2a4 <__sinit+0xc>
 800c2be:	bf00      	nop
 800c2c0:	0800c205 	.word	0x0800c205
 800c2c4:	20000d04 	.word	0x20000d04

0800c2c8 <_fwalk_sglue>:
 800c2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2cc:	4607      	mov	r7, r0
 800c2ce:	4688      	mov	r8, r1
 800c2d0:	4614      	mov	r4, r2
 800c2d2:	2600      	movs	r6, #0
 800c2d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2d8:	f1b9 0901 	subs.w	r9, r9, #1
 800c2dc:	d505      	bpl.n	800c2ea <_fwalk_sglue+0x22>
 800c2de:	6824      	ldr	r4, [r4, #0]
 800c2e0:	2c00      	cmp	r4, #0
 800c2e2:	d1f7      	bne.n	800c2d4 <_fwalk_sglue+0xc>
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2ea:	89ab      	ldrh	r3, [r5, #12]
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d907      	bls.n	800c300 <_fwalk_sglue+0x38>
 800c2f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	d003      	beq.n	800c300 <_fwalk_sglue+0x38>
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	4638      	mov	r0, r7
 800c2fc:	47c0      	blx	r8
 800c2fe:	4306      	orrs	r6, r0
 800c300:	3568      	adds	r5, #104	@ 0x68
 800c302:	e7e9      	b.n	800c2d8 <_fwalk_sglue+0x10>

0800c304 <iprintf>:
 800c304:	b40f      	push	{r0, r1, r2, r3}
 800c306:	b507      	push	{r0, r1, r2, lr}
 800c308:	4906      	ldr	r1, [pc, #24]	@ (800c324 <iprintf+0x20>)
 800c30a:	ab04      	add	r3, sp, #16
 800c30c:	6808      	ldr	r0, [r1, #0]
 800c30e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c312:	6881      	ldr	r1, [r0, #8]
 800c314:	9301      	str	r3, [sp, #4]
 800c316:	f002 fae1 	bl	800e8dc <_vfiprintf_r>
 800c31a:	b003      	add	sp, #12
 800c31c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c320:	b004      	add	sp, #16
 800c322:	4770      	bx	lr
 800c324:	20000188 	.word	0x20000188

0800c328 <_puts_r>:
 800c328:	6a03      	ldr	r3, [r0, #32]
 800c32a:	b570      	push	{r4, r5, r6, lr}
 800c32c:	4605      	mov	r5, r0
 800c32e:	460e      	mov	r6, r1
 800c330:	6884      	ldr	r4, [r0, #8]
 800c332:	b90b      	cbnz	r3, 800c338 <_puts_r+0x10>
 800c334:	f7ff ffb0 	bl	800c298 <__sinit>
 800c338:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c33a:	07db      	lsls	r3, r3, #31
 800c33c:	d405      	bmi.n	800c34a <_puts_r+0x22>
 800c33e:	89a3      	ldrh	r3, [r4, #12]
 800c340:	0598      	lsls	r0, r3, #22
 800c342:	d402      	bmi.n	800c34a <_puts_r+0x22>
 800c344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c346:	f000 fa82 	bl	800c84e <__retarget_lock_acquire_recursive>
 800c34a:	89a3      	ldrh	r3, [r4, #12]
 800c34c:	0719      	lsls	r1, r3, #28
 800c34e:	d502      	bpl.n	800c356 <_puts_r+0x2e>
 800c350:	6923      	ldr	r3, [r4, #16]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d135      	bne.n	800c3c2 <_puts_r+0x9a>
 800c356:	4621      	mov	r1, r4
 800c358:	4628      	mov	r0, r5
 800c35a:	f000 f919 	bl	800c590 <__swsetup_r>
 800c35e:	b380      	cbz	r0, 800c3c2 <_puts_r+0x9a>
 800c360:	f04f 35ff 	mov.w	r5, #4294967295
 800c364:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c366:	07da      	lsls	r2, r3, #31
 800c368:	d405      	bmi.n	800c376 <_puts_r+0x4e>
 800c36a:	89a3      	ldrh	r3, [r4, #12]
 800c36c:	059b      	lsls	r3, r3, #22
 800c36e:	d402      	bmi.n	800c376 <_puts_r+0x4e>
 800c370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c372:	f000 fa6d 	bl	800c850 <__retarget_lock_release_recursive>
 800c376:	4628      	mov	r0, r5
 800c378:	bd70      	pop	{r4, r5, r6, pc}
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	da04      	bge.n	800c388 <_puts_r+0x60>
 800c37e:	69a2      	ldr	r2, [r4, #24]
 800c380:	429a      	cmp	r2, r3
 800c382:	dc17      	bgt.n	800c3b4 <_puts_r+0x8c>
 800c384:	290a      	cmp	r1, #10
 800c386:	d015      	beq.n	800c3b4 <_puts_r+0x8c>
 800c388:	6823      	ldr	r3, [r4, #0]
 800c38a:	1c5a      	adds	r2, r3, #1
 800c38c:	6022      	str	r2, [r4, #0]
 800c38e:	7019      	strb	r1, [r3, #0]
 800c390:	68a3      	ldr	r3, [r4, #8]
 800c392:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c396:	3b01      	subs	r3, #1
 800c398:	60a3      	str	r3, [r4, #8]
 800c39a:	2900      	cmp	r1, #0
 800c39c:	d1ed      	bne.n	800c37a <_puts_r+0x52>
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	da11      	bge.n	800c3c6 <_puts_r+0x9e>
 800c3a2:	4622      	mov	r2, r4
 800c3a4:	210a      	movs	r1, #10
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	f000 f8b3 	bl	800c512 <__swbuf_r>
 800c3ac:	3001      	adds	r0, #1
 800c3ae:	d0d7      	beq.n	800c360 <_puts_r+0x38>
 800c3b0:	250a      	movs	r5, #10
 800c3b2:	e7d7      	b.n	800c364 <_puts_r+0x3c>
 800c3b4:	4622      	mov	r2, r4
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	f000 f8ab 	bl	800c512 <__swbuf_r>
 800c3bc:	3001      	adds	r0, #1
 800c3be:	d1e7      	bne.n	800c390 <_puts_r+0x68>
 800c3c0:	e7ce      	b.n	800c360 <_puts_r+0x38>
 800c3c2:	3e01      	subs	r6, #1
 800c3c4:	e7e4      	b.n	800c390 <_puts_r+0x68>
 800c3c6:	6823      	ldr	r3, [r4, #0]
 800c3c8:	1c5a      	adds	r2, r3, #1
 800c3ca:	6022      	str	r2, [r4, #0]
 800c3cc:	220a      	movs	r2, #10
 800c3ce:	701a      	strb	r2, [r3, #0]
 800c3d0:	e7ee      	b.n	800c3b0 <_puts_r+0x88>
	...

0800c3d4 <puts>:
 800c3d4:	4b02      	ldr	r3, [pc, #8]	@ (800c3e0 <puts+0xc>)
 800c3d6:	4601      	mov	r1, r0
 800c3d8:	6818      	ldr	r0, [r3, #0]
 800c3da:	f7ff bfa5 	b.w	800c328 <_puts_r>
 800c3de:	bf00      	nop
 800c3e0:	20000188 	.word	0x20000188

0800c3e4 <sniprintf>:
 800c3e4:	b40c      	push	{r2, r3}
 800c3e6:	b530      	push	{r4, r5, lr}
 800c3e8:	4b17      	ldr	r3, [pc, #92]	@ (800c448 <sniprintf+0x64>)
 800c3ea:	1e0c      	subs	r4, r1, #0
 800c3ec:	681d      	ldr	r5, [r3, #0]
 800c3ee:	b09d      	sub	sp, #116	@ 0x74
 800c3f0:	da08      	bge.n	800c404 <sniprintf+0x20>
 800c3f2:	238b      	movs	r3, #139	@ 0x8b
 800c3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f8:	602b      	str	r3, [r5, #0]
 800c3fa:	b01d      	add	sp, #116	@ 0x74
 800c3fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c400:	b002      	add	sp, #8
 800c402:	4770      	bx	lr
 800c404:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c408:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c40c:	bf0c      	ite	eq
 800c40e:	4623      	moveq	r3, r4
 800c410:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c414:	9304      	str	r3, [sp, #16]
 800c416:	9307      	str	r3, [sp, #28]
 800c418:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c41c:	9002      	str	r0, [sp, #8]
 800c41e:	9006      	str	r0, [sp, #24]
 800c420:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c424:	4628      	mov	r0, r5
 800c426:	ab21      	add	r3, sp, #132	@ 0x84
 800c428:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c42a:	a902      	add	r1, sp, #8
 800c42c:	9301      	str	r3, [sp, #4]
 800c42e:	f002 f931 	bl	800e694 <_svfiprintf_r>
 800c432:	1c43      	adds	r3, r0, #1
 800c434:	bfbc      	itt	lt
 800c436:	238b      	movlt	r3, #139	@ 0x8b
 800c438:	602b      	strlt	r3, [r5, #0]
 800c43a:	2c00      	cmp	r4, #0
 800c43c:	d0dd      	beq.n	800c3fa <sniprintf+0x16>
 800c43e:	2200      	movs	r2, #0
 800c440:	9b02      	ldr	r3, [sp, #8]
 800c442:	701a      	strb	r2, [r3, #0]
 800c444:	e7d9      	b.n	800c3fa <sniprintf+0x16>
 800c446:	bf00      	nop
 800c448:	20000188 	.word	0x20000188

0800c44c <siprintf>:
 800c44c:	b40e      	push	{r1, r2, r3}
 800c44e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c452:	b500      	push	{lr}
 800c454:	b09c      	sub	sp, #112	@ 0x70
 800c456:	ab1d      	add	r3, sp, #116	@ 0x74
 800c458:	9002      	str	r0, [sp, #8]
 800c45a:	9006      	str	r0, [sp, #24]
 800c45c:	9107      	str	r1, [sp, #28]
 800c45e:	9104      	str	r1, [sp, #16]
 800c460:	4808      	ldr	r0, [pc, #32]	@ (800c484 <siprintf+0x38>)
 800c462:	4909      	ldr	r1, [pc, #36]	@ (800c488 <siprintf+0x3c>)
 800c464:	f853 2b04 	ldr.w	r2, [r3], #4
 800c468:	9105      	str	r1, [sp, #20]
 800c46a:	6800      	ldr	r0, [r0, #0]
 800c46c:	a902      	add	r1, sp, #8
 800c46e:	9301      	str	r3, [sp, #4]
 800c470:	f002 f910 	bl	800e694 <_svfiprintf_r>
 800c474:	2200      	movs	r2, #0
 800c476:	9b02      	ldr	r3, [sp, #8]
 800c478:	701a      	strb	r2, [r3, #0]
 800c47a:	b01c      	add	sp, #112	@ 0x70
 800c47c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c480:	b003      	add	sp, #12
 800c482:	4770      	bx	lr
 800c484:	20000188 	.word	0x20000188
 800c488:	ffff0208 	.word	0xffff0208

0800c48c <__sread>:
 800c48c:	b510      	push	{r4, lr}
 800c48e:	460c      	mov	r4, r1
 800c490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c494:	f000 f97c 	bl	800c790 <_read_r>
 800c498:	2800      	cmp	r0, #0
 800c49a:	bfab      	itete	ge
 800c49c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c49e:	89a3      	ldrhlt	r3, [r4, #12]
 800c4a0:	181b      	addge	r3, r3, r0
 800c4a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c4a6:	bfac      	ite	ge
 800c4a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c4aa:	81a3      	strhlt	r3, [r4, #12]
 800c4ac:	bd10      	pop	{r4, pc}

0800c4ae <__swrite>:
 800c4ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4b2:	461f      	mov	r7, r3
 800c4b4:	898b      	ldrh	r3, [r1, #12]
 800c4b6:	4605      	mov	r5, r0
 800c4b8:	05db      	lsls	r3, r3, #23
 800c4ba:	460c      	mov	r4, r1
 800c4bc:	4616      	mov	r6, r2
 800c4be:	d505      	bpl.n	800c4cc <__swrite+0x1e>
 800c4c0:	2302      	movs	r3, #2
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4c8:	f000 f950 	bl	800c76c <_lseek_r>
 800c4cc:	89a3      	ldrh	r3, [r4, #12]
 800c4ce:	4632      	mov	r2, r6
 800c4d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c4d4:	81a3      	strh	r3, [r4, #12]
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	463b      	mov	r3, r7
 800c4da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4e2:	f000 b977 	b.w	800c7d4 <_write_r>

0800c4e6 <__sseek>:
 800c4e6:	b510      	push	{r4, lr}
 800c4e8:	460c      	mov	r4, r1
 800c4ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4ee:	f000 f93d 	bl	800c76c <_lseek_r>
 800c4f2:	1c43      	adds	r3, r0, #1
 800c4f4:	89a3      	ldrh	r3, [r4, #12]
 800c4f6:	bf15      	itete	ne
 800c4f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c4fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c4fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c502:	81a3      	strheq	r3, [r4, #12]
 800c504:	bf18      	it	ne
 800c506:	81a3      	strhne	r3, [r4, #12]
 800c508:	bd10      	pop	{r4, pc}

0800c50a <__sclose>:
 800c50a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c50e:	f000 b91d 	b.w	800c74c <_close_r>

0800c512 <__swbuf_r>:
 800c512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c514:	460e      	mov	r6, r1
 800c516:	4614      	mov	r4, r2
 800c518:	4605      	mov	r5, r0
 800c51a:	b118      	cbz	r0, 800c524 <__swbuf_r+0x12>
 800c51c:	6a03      	ldr	r3, [r0, #32]
 800c51e:	b90b      	cbnz	r3, 800c524 <__swbuf_r+0x12>
 800c520:	f7ff feba 	bl	800c298 <__sinit>
 800c524:	69a3      	ldr	r3, [r4, #24]
 800c526:	60a3      	str	r3, [r4, #8]
 800c528:	89a3      	ldrh	r3, [r4, #12]
 800c52a:	071a      	lsls	r2, r3, #28
 800c52c:	d501      	bpl.n	800c532 <__swbuf_r+0x20>
 800c52e:	6923      	ldr	r3, [r4, #16]
 800c530:	b943      	cbnz	r3, 800c544 <__swbuf_r+0x32>
 800c532:	4621      	mov	r1, r4
 800c534:	4628      	mov	r0, r5
 800c536:	f000 f82b 	bl	800c590 <__swsetup_r>
 800c53a:	b118      	cbz	r0, 800c544 <__swbuf_r+0x32>
 800c53c:	f04f 37ff 	mov.w	r7, #4294967295
 800c540:	4638      	mov	r0, r7
 800c542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c544:	6823      	ldr	r3, [r4, #0]
 800c546:	6922      	ldr	r2, [r4, #16]
 800c548:	b2f6      	uxtb	r6, r6
 800c54a:	1a98      	subs	r0, r3, r2
 800c54c:	6963      	ldr	r3, [r4, #20]
 800c54e:	4637      	mov	r7, r6
 800c550:	4283      	cmp	r3, r0
 800c552:	dc05      	bgt.n	800c560 <__swbuf_r+0x4e>
 800c554:	4621      	mov	r1, r4
 800c556:	4628      	mov	r0, r5
 800c558:	f002 fb58 	bl	800ec0c <_fflush_r>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	d1ed      	bne.n	800c53c <__swbuf_r+0x2a>
 800c560:	68a3      	ldr	r3, [r4, #8]
 800c562:	3b01      	subs	r3, #1
 800c564:	60a3      	str	r3, [r4, #8]
 800c566:	6823      	ldr	r3, [r4, #0]
 800c568:	1c5a      	adds	r2, r3, #1
 800c56a:	6022      	str	r2, [r4, #0]
 800c56c:	701e      	strb	r6, [r3, #0]
 800c56e:	6962      	ldr	r2, [r4, #20]
 800c570:	1c43      	adds	r3, r0, #1
 800c572:	429a      	cmp	r2, r3
 800c574:	d004      	beq.n	800c580 <__swbuf_r+0x6e>
 800c576:	89a3      	ldrh	r3, [r4, #12]
 800c578:	07db      	lsls	r3, r3, #31
 800c57a:	d5e1      	bpl.n	800c540 <__swbuf_r+0x2e>
 800c57c:	2e0a      	cmp	r6, #10
 800c57e:	d1df      	bne.n	800c540 <__swbuf_r+0x2e>
 800c580:	4621      	mov	r1, r4
 800c582:	4628      	mov	r0, r5
 800c584:	f002 fb42 	bl	800ec0c <_fflush_r>
 800c588:	2800      	cmp	r0, #0
 800c58a:	d0d9      	beq.n	800c540 <__swbuf_r+0x2e>
 800c58c:	e7d6      	b.n	800c53c <__swbuf_r+0x2a>
	...

0800c590 <__swsetup_r>:
 800c590:	b538      	push	{r3, r4, r5, lr}
 800c592:	4b29      	ldr	r3, [pc, #164]	@ (800c638 <__swsetup_r+0xa8>)
 800c594:	4605      	mov	r5, r0
 800c596:	6818      	ldr	r0, [r3, #0]
 800c598:	460c      	mov	r4, r1
 800c59a:	b118      	cbz	r0, 800c5a4 <__swsetup_r+0x14>
 800c59c:	6a03      	ldr	r3, [r0, #32]
 800c59e:	b90b      	cbnz	r3, 800c5a4 <__swsetup_r+0x14>
 800c5a0:	f7ff fe7a 	bl	800c298 <__sinit>
 800c5a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5a8:	0719      	lsls	r1, r3, #28
 800c5aa:	d422      	bmi.n	800c5f2 <__swsetup_r+0x62>
 800c5ac:	06da      	lsls	r2, r3, #27
 800c5ae:	d407      	bmi.n	800c5c0 <__swsetup_r+0x30>
 800c5b0:	2209      	movs	r2, #9
 800c5b2:	602a      	str	r2, [r5, #0]
 800c5b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5bc:	81a3      	strh	r3, [r4, #12]
 800c5be:	e033      	b.n	800c628 <__swsetup_r+0x98>
 800c5c0:	0758      	lsls	r0, r3, #29
 800c5c2:	d512      	bpl.n	800c5ea <__swsetup_r+0x5a>
 800c5c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c5c6:	b141      	cbz	r1, 800c5da <__swsetup_r+0x4a>
 800c5c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c5cc:	4299      	cmp	r1, r3
 800c5ce:	d002      	beq.n	800c5d6 <__swsetup_r+0x46>
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	f000 ffbd 	bl	800d550 <_free_r>
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c5da:	89a3      	ldrh	r3, [r4, #12]
 800c5dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c5e0:	81a3      	strh	r3, [r4, #12]
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	6063      	str	r3, [r4, #4]
 800c5e6:	6923      	ldr	r3, [r4, #16]
 800c5e8:	6023      	str	r3, [r4, #0]
 800c5ea:	89a3      	ldrh	r3, [r4, #12]
 800c5ec:	f043 0308 	orr.w	r3, r3, #8
 800c5f0:	81a3      	strh	r3, [r4, #12]
 800c5f2:	6923      	ldr	r3, [r4, #16]
 800c5f4:	b94b      	cbnz	r3, 800c60a <__swsetup_r+0x7a>
 800c5f6:	89a3      	ldrh	r3, [r4, #12]
 800c5f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c5fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c600:	d003      	beq.n	800c60a <__swsetup_r+0x7a>
 800c602:	4621      	mov	r1, r4
 800c604:	4628      	mov	r0, r5
 800c606:	f002 fb4e 	bl	800eca6 <__smakebuf_r>
 800c60a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c60e:	f013 0201 	ands.w	r2, r3, #1
 800c612:	d00a      	beq.n	800c62a <__swsetup_r+0x9a>
 800c614:	2200      	movs	r2, #0
 800c616:	60a2      	str	r2, [r4, #8]
 800c618:	6962      	ldr	r2, [r4, #20]
 800c61a:	4252      	negs	r2, r2
 800c61c:	61a2      	str	r2, [r4, #24]
 800c61e:	6922      	ldr	r2, [r4, #16]
 800c620:	b942      	cbnz	r2, 800c634 <__swsetup_r+0xa4>
 800c622:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c626:	d1c5      	bne.n	800c5b4 <__swsetup_r+0x24>
 800c628:	bd38      	pop	{r3, r4, r5, pc}
 800c62a:	0799      	lsls	r1, r3, #30
 800c62c:	bf58      	it	pl
 800c62e:	6962      	ldrpl	r2, [r4, #20]
 800c630:	60a2      	str	r2, [r4, #8]
 800c632:	e7f4      	b.n	800c61e <__swsetup_r+0x8e>
 800c634:	2000      	movs	r0, #0
 800c636:	e7f7      	b.n	800c628 <__swsetup_r+0x98>
 800c638:	20000188 	.word	0x20000188

0800c63c <memcmp>:
 800c63c:	b510      	push	{r4, lr}
 800c63e:	3901      	subs	r1, #1
 800c640:	4402      	add	r2, r0
 800c642:	4290      	cmp	r0, r2
 800c644:	d101      	bne.n	800c64a <memcmp+0xe>
 800c646:	2000      	movs	r0, #0
 800c648:	e005      	b.n	800c656 <memcmp+0x1a>
 800c64a:	7803      	ldrb	r3, [r0, #0]
 800c64c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c650:	42a3      	cmp	r3, r4
 800c652:	d001      	beq.n	800c658 <memcmp+0x1c>
 800c654:	1b18      	subs	r0, r3, r4
 800c656:	bd10      	pop	{r4, pc}
 800c658:	3001      	adds	r0, #1
 800c65a:	e7f2      	b.n	800c642 <memcmp+0x6>

0800c65c <memset>:
 800c65c:	4603      	mov	r3, r0
 800c65e:	4402      	add	r2, r0
 800c660:	4293      	cmp	r3, r2
 800c662:	d100      	bne.n	800c666 <memset+0xa>
 800c664:	4770      	bx	lr
 800c666:	f803 1b01 	strb.w	r1, [r3], #1
 800c66a:	e7f9      	b.n	800c660 <memset+0x4>

0800c66c <strcat>:
 800c66c:	4602      	mov	r2, r0
 800c66e:	b510      	push	{r4, lr}
 800c670:	7814      	ldrb	r4, [r2, #0]
 800c672:	4613      	mov	r3, r2
 800c674:	3201      	adds	r2, #1
 800c676:	2c00      	cmp	r4, #0
 800c678:	d1fa      	bne.n	800c670 <strcat+0x4>
 800c67a:	3b01      	subs	r3, #1
 800c67c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c680:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c684:	2a00      	cmp	r2, #0
 800c686:	d1f9      	bne.n	800c67c <strcat+0x10>
 800c688:	bd10      	pop	{r4, pc}

0800c68a <strchr>:
 800c68a:	4603      	mov	r3, r0
 800c68c:	b2c9      	uxtb	r1, r1
 800c68e:	4618      	mov	r0, r3
 800c690:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c694:	b112      	cbz	r2, 800c69c <strchr+0x12>
 800c696:	428a      	cmp	r2, r1
 800c698:	d1f9      	bne.n	800c68e <strchr+0x4>
 800c69a:	4770      	bx	lr
 800c69c:	2900      	cmp	r1, #0
 800c69e:	bf18      	it	ne
 800c6a0:	2000      	movne	r0, #0
 800c6a2:	4770      	bx	lr

0800c6a4 <strncmp>:
 800c6a4:	b510      	push	{r4, lr}
 800c6a6:	b16a      	cbz	r2, 800c6c4 <strncmp+0x20>
 800c6a8:	3901      	subs	r1, #1
 800c6aa:	1884      	adds	r4, r0, r2
 800c6ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d103      	bne.n	800c6c0 <strncmp+0x1c>
 800c6b8:	42a0      	cmp	r0, r4
 800c6ba:	d001      	beq.n	800c6c0 <strncmp+0x1c>
 800c6bc:	2a00      	cmp	r2, #0
 800c6be:	d1f5      	bne.n	800c6ac <strncmp+0x8>
 800c6c0:	1ad0      	subs	r0, r2, r3
 800c6c2:	bd10      	pop	{r4, pc}
 800c6c4:	4610      	mov	r0, r2
 800c6c6:	e7fc      	b.n	800c6c2 <strncmp+0x1e>

0800c6c8 <strncpy>:
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	b510      	push	{r4, lr}
 800c6cc:	3901      	subs	r1, #1
 800c6ce:	b132      	cbz	r2, 800c6de <strncpy+0x16>
 800c6d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c6d4:	3a01      	subs	r2, #1
 800c6d6:	f803 4b01 	strb.w	r4, [r3], #1
 800c6da:	2c00      	cmp	r4, #0
 800c6dc:	d1f7      	bne.n	800c6ce <strncpy+0x6>
 800c6de:	2100      	movs	r1, #0
 800c6e0:	441a      	add	r2, r3
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d100      	bne.n	800c6e8 <strncpy+0x20>
 800c6e6:	bd10      	pop	{r4, pc}
 800c6e8:	f803 1b01 	strb.w	r1, [r3], #1
 800c6ec:	e7f9      	b.n	800c6e2 <strncpy+0x1a>

0800c6ee <__strtok_r>:
 800c6ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6f0:	4604      	mov	r4, r0
 800c6f2:	b908      	cbnz	r0, 800c6f8 <__strtok_r+0xa>
 800c6f4:	6814      	ldr	r4, [r2, #0]
 800c6f6:	b144      	cbz	r4, 800c70a <__strtok_r+0x1c>
 800c6f8:	460f      	mov	r7, r1
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c700:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c704:	b91e      	cbnz	r6, 800c70e <__strtok_r+0x20>
 800c706:	b965      	cbnz	r5, 800c722 <__strtok_r+0x34>
 800c708:	6015      	str	r5, [r2, #0]
 800c70a:	2000      	movs	r0, #0
 800c70c:	e005      	b.n	800c71a <__strtok_r+0x2c>
 800c70e:	42b5      	cmp	r5, r6
 800c710:	d1f6      	bne.n	800c700 <__strtok_r+0x12>
 800c712:	2b00      	cmp	r3, #0
 800c714:	d1f0      	bne.n	800c6f8 <__strtok_r+0xa>
 800c716:	6014      	str	r4, [r2, #0]
 800c718:	7003      	strb	r3, [r0, #0]
 800c71a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c71c:	461c      	mov	r4, r3
 800c71e:	e00c      	b.n	800c73a <__strtok_r+0x4c>
 800c720:	b915      	cbnz	r5, 800c728 <__strtok_r+0x3a>
 800c722:	460e      	mov	r6, r1
 800c724:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c728:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c72c:	42ab      	cmp	r3, r5
 800c72e:	d1f7      	bne.n	800c720 <__strtok_r+0x32>
 800c730:	2b00      	cmp	r3, #0
 800c732:	d0f3      	beq.n	800c71c <__strtok_r+0x2e>
 800c734:	2300      	movs	r3, #0
 800c736:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c73a:	6014      	str	r4, [r2, #0]
 800c73c:	e7ed      	b.n	800c71a <__strtok_r+0x2c>

0800c73e <strtok_r>:
 800c73e:	2301      	movs	r3, #1
 800c740:	f7ff bfd5 	b.w	800c6ee <__strtok_r>

0800c744 <_localeconv_r>:
 800c744:	4800      	ldr	r0, [pc, #0]	@ (800c748 <_localeconv_r+0x4>)
 800c746:	4770      	bx	lr
 800c748:	2000010c 	.word	0x2000010c

0800c74c <_close_r>:
 800c74c:	b538      	push	{r3, r4, r5, lr}
 800c74e:	2300      	movs	r3, #0
 800c750:	4d05      	ldr	r5, [pc, #20]	@ (800c768 <_close_r+0x1c>)
 800c752:	4604      	mov	r4, r0
 800c754:	4608      	mov	r0, r1
 800c756:	602b      	str	r3, [r5, #0]
 800c758:	f7fb f84c 	bl	80077f4 <_close>
 800c75c:	1c43      	adds	r3, r0, #1
 800c75e:	d102      	bne.n	800c766 <_close_r+0x1a>
 800c760:	682b      	ldr	r3, [r5, #0]
 800c762:	b103      	cbz	r3, 800c766 <_close_r+0x1a>
 800c764:	6023      	str	r3, [r4, #0]
 800c766:	bd38      	pop	{r3, r4, r5, pc}
 800c768:	20000d08 	.word	0x20000d08

0800c76c <_lseek_r>:
 800c76c:	b538      	push	{r3, r4, r5, lr}
 800c76e:	4604      	mov	r4, r0
 800c770:	4608      	mov	r0, r1
 800c772:	4611      	mov	r1, r2
 800c774:	2200      	movs	r2, #0
 800c776:	4d05      	ldr	r5, [pc, #20]	@ (800c78c <_lseek_r+0x20>)
 800c778:	602a      	str	r2, [r5, #0]
 800c77a:	461a      	mov	r2, r3
 800c77c:	f7fb f844 	bl	8007808 <_lseek>
 800c780:	1c43      	adds	r3, r0, #1
 800c782:	d102      	bne.n	800c78a <_lseek_r+0x1e>
 800c784:	682b      	ldr	r3, [r5, #0]
 800c786:	b103      	cbz	r3, 800c78a <_lseek_r+0x1e>
 800c788:	6023      	str	r3, [r4, #0]
 800c78a:	bd38      	pop	{r3, r4, r5, pc}
 800c78c:	20000d08 	.word	0x20000d08

0800c790 <_read_r>:
 800c790:	b538      	push	{r3, r4, r5, lr}
 800c792:	4604      	mov	r4, r0
 800c794:	4608      	mov	r0, r1
 800c796:	4611      	mov	r1, r2
 800c798:	2200      	movs	r2, #0
 800c79a:	4d05      	ldr	r5, [pc, #20]	@ (800c7b0 <_read_r+0x20>)
 800c79c:	602a      	str	r2, [r5, #0]
 800c79e:	461a      	mov	r2, r3
 800c7a0:	f7fb f80c 	bl	80077bc <_read>
 800c7a4:	1c43      	adds	r3, r0, #1
 800c7a6:	d102      	bne.n	800c7ae <_read_r+0x1e>
 800c7a8:	682b      	ldr	r3, [r5, #0]
 800c7aa:	b103      	cbz	r3, 800c7ae <_read_r+0x1e>
 800c7ac:	6023      	str	r3, [r4, #0]
 800c7ae:	bd38      	pop	{r3, r4, r5, pc}
 800c7b0:	20000d08 	.word	0x20000d08

0800c7b4 <_sbrk_r>:
 800c7b4:	b538      	push	{r3, r4, r5, lr}
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	4d05      	ldr	r5, [pc, #20]	@ (800c7d0 <_sbrk_r+0x1c>)
 800c7ba:	4604      	mov	r4, r0
 800c7bc:	4608      	mov	r0, r1
 800c7be:	602b      	str	r3, [r5, #0]
 800c7c0:	f7fb f824 	bl	800780c <_sbrk>
 800c7c4:	1c43      	adds	r3, r0, #1
 800c7c6:	d102      	bne.n	800c7ce <_sbrk_r+0x1a>
 800c7c8:	682b      	ldr	r3, [r5, #0]
 800c7ca:	b103      	cbz	r3, 800c7ce <_sbrk_r+0x1a>
 800c7cc:	6023      	str	r3, [r4, #0]
 800c7ce:	bd38      	pop	{r3, r4, r5, pc}
 800c7d0:	20000d08 	.word	0x20000d08

0800c7d4 <_write_r>:
 800c7d4:	b538      	push	{r3, r4, r5, lr}
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	4608      	mov	r0, r1
 800c7da:	4611      	mov	r1, r2
 800c7dc:	2200      	movs	r2, #0
 800c7de:	4d05      	ldr	r5, [pc, #20]	@ (800c7f4 <_write_r+0x20>)
 800c7e0:	602a      	str	r2, [r5, #0]
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	f7fa fff8 	bl	80077d8 <_write>
 800c7e8:	1c43      	adds	r3, r0, #1
 800c7ea:	d102      	bne.n	800c7f2 <_write_r+0x1e>
 800c7ec:	682b      	ldr	r3, [r5, #0]
 800c7ee:	b103      	cbz	r3, 800c7f2 <_write_r+0x1e>
 800c7f0:	6023      	str	r3, [r4, #0]
 800c7f2:	bd38      	pop	{r3, r4, r5, pc}
 800c7f4:	20000d08 	.word	0x20000d08

0800c7f8 <__errno>:
 800c7f8:	4b01      	ldr	r3, [pc, #4]	@ (800c800 <__errno+0x8>)
 800c7fa:	6818      	ldr	r0, [r3, #0]
 800c7fc:	4770      	bx	lr
 800c7fe:	bf00      	nop
 800c800:	20000188 	.word	0x20000188

0800c804 <__libc_init_array>:
 800c804:	b570      	push	{r4, r5, r6, lr}
 800c806:	2600      	movs	r6, #0
 800c808:	4d0c      	ldr	r5, [pc, #48]	@ (800c83c <__libc_init_array+0x38>)
 800c80a:	4c0d      	ldr	r4, [pc, #52]	@ (800c840 <__libc_init_array+0x3c>)
 800c80c:	1b64      	subs	r4, r4, r5
 800c80e:	10a4      	asrs	r4, r4, #2
 800c810:	42a6      	cmp	r6, r4
 800c812:	d109      	bne.n	800c828 <__libc_init_array+0x24>
 800c814:	f002 fb86 	bl	800ef24 <_init>
 800c818:	2600      	movs	r6, #0
 800c81a:	4d0a      	ldr	r5, [pc, #40]	@ (800c844 <__libc_init_array+0x40>)
 800c81c:	4c0a      	ldr	r4, [pc, #40]	@ (800c848 <__libc_init_array+0x44>)
 800c81e:	1b64      	subs	r4, r4, r5
 800c820:	10a4      	asrs	r4, r4, #2
 800c822:	42a6      	cmp	r6, r4
 800c824:	d105      	bne.n	800c832 <__libc_init_array+0x2e>
 800c826:	bd70      	pop	{r4, r5, r6, pc}
 800c828:	f855 3b04 	ldr.w	r3, [r5], #4
 800c82c:	4798      	blx	r3
 800c82e:	3601      	adds	r6, #1
 800c830:	e7ee      	b.n	800c810 <__libc_init_array+0xc>
 800c832:	f855 3b04 	ldr.w	r3, [r5], #4
 800c836:	4798      	blx	r3
 800c838:	3601      	adds	r6, #1
 800c83a:	e7f2      	b.n	800c822 <__libc_init_array+0x1e>
 800c83c:	0800fde0 	.word	0x0800fde0
 800c840:	0800fde0 	.word	0x0800fde0
 800c844:	0800fde0 	.word	0x0800fde0
 800c848:	0800fde4 	.word	0x0800fde4

0800c84c <__retarget_lock_init_recursive>:
 800c84c:	4770      	bx	lr

0800c84e <__retarget_lock_acquire_recursive>:
 800c84e:	4770      	bx	lr

0800c850 <__retarget_lock_release_recursive>:
 800c850:	4770      	bx	lr

0800c852 <strcpy>:
 800c852:	4603      	mov	r3, r0
 800c854:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c858:	f803 2b01 	strb.w	r2, [r3], #1
 800c85c:	2a00      	cmp	r2, #0
 800c85e:	d1f9      	bne.n	800c854 <strcpy+0x2>
 800c860:	4770      	bx	lr

0800c862 <memchr>:
 800c862:	4603      	mov	r3, r0
 800c864:	b510      	push	{r4, lr}
 800c866:	b2c9      	uxtb	r1, r1
 800c868:	4402      	add	r2, r0
 800c86a:	4293      	cmp	r3, r2
 800c86c:	4618      	mov	r0, r3
 800c86e:	d101      	bne.n	800c874 <memchr+0x12>
 800c870:	2000      	movs	r0, #0
 800c872:	e003      	b.n	800c87c <memchr+0x1a>
 800c874:	7804      	ldrb	r4, [r0, #0]
 800c876:	3301      	adds	r3, #1
 800c878:	428c      	cmp	r4, r1
 800c87a:	d1f6      	bne.n	800c86a <memchr+0x8>
 800c87c:	bd10      	pop	{r4, pc}

0800c87e <memcpy>:
 800c87e:	440a      	add	r2, r1
 800c880:	4291      	cmp	r1, r2
 800c882:	f100 33ff 	add.w	r3, r0, #4294967295
 800c886:	d100      	bne.n	800c88a <memcpy+0xc>
 800c888:	4770      	bx	lr
 800c88a:	b510      	push	{r4, lr}
 800c88c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c890:	4291      	cmp	r1, r2
 800c892:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c896:	d1f9      	bne.n	800c88c <memcpy+0xe>
 800c898:	bd10      	pop	{r4, pc}
	...

0800c89c <nan>:
 800c89c:	2000      	movs	r0, #0
 800c89e:	4901      	ldr	r1, [pc, #4]	@ (800c8a4 <nan+0x8>)
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	7ff80000 	.word	0x7ff80000

0800c8a8 <nanf>:
 800c8a8:	4800      	ldr	r0, [pc, #0]	@ (800c8ac <nanf+0x4>)
 800c8aa:	4770      	bx	lr
 800c8ac:	7fc00000 	.word	0x7fc00000

0800c8b0 <quorem>:
 800c8b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b4:	6903      	ldr	r3, [r0, #16]
 800c8b6:	690c      	ldr	r4, [r1, #16]
 800c8b8:	4607      	mov	r7, r0
 800c8ba:	42a3      	cmp	r3, r4
 800c8bc:	db7e      	blt.n	800c9bc <quorem+0x10c>
 800c8be:	3c01      	subs	r4, #1
 800c8c0:	00a3      	lsls	r3, r4, #2
 800c8c2:	f100 0514 	add.w	r5, r0, #20
 800c8c6:	f101 0814 	add.w	r8, r1, #20
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8d0:	9301      	str	r3, [sp, #4]
 800c8d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c8d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	fbb2 f6f3 	udiv	r6, r2, r3
 800c8e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c8e6:	d32e      	bcc.n	800c946 <quorem+0x96>
 800c8e8:	f04f 0a00 	mov.w	sl, #0
 800c8ec:	46c4      	mov	ip, r8
 800c8ee:	46ae      	mov	lr, r5
 800c8f0:	46d3      	mov	fp, sl
 800c8f2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c8f6:	b298      	uxth	r0, r3
 800c8f8:	fb06 a000 	mla	r0, r6, r0, sl
 800c8fc:	0c1b      	lsrs	r3, r3, #16
 800c8fe:	0c02      	lsrs	r2, r0, #16
 800c900:	fb06 2303 	mla	r3, r6, r3, r2
 800c904:	f8de 2000 	ldr.w	r2, [lr]
 800c908:	b280      	uxth	r0, r0
 800c90a:	b292      	uxth	r2, r2
 800c90c:	1a12      	subs	r2, r2, r0
 800c90e:	445a      	add	r2, fp
 800c910:	f8de 0000 	ldr.w	r0, [lr]
 800c914:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c918:	b29b      	uxth	r3, r3
 800c91a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c91e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c922:	b292      	uxth	r2, r2
 800c924:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c928:	45e1      	cmp	r9, ip
 800c92a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c92e:	f84e 2b04 	str.w	r2, [lr], #4
 800c932:	d2de      	bcs.n	800c8f2 <quorem+0x42>
 800c934:	9b00      	ldr	r3, [sp, #0]
 800c936:	58eb      	ldr	r3, [r5, r3]
 800c938:	b92b      	cbnz	r3, 800c946 <quorem+0x96>
 800c93a:	9b01      	ldr	r3, [sp, #4]
 800c93c:	3b04      	subs	r3, #4
 800c93e:	429d      	cmp	r5, r3
 800c940:	461a      	mov	r2, r3
 800c942:	d32f      	bcc.n	800c9a4 <quorem+0xf4>
 800c944:	613c      	str	r4, [r7, #16]
 800c946:	4638      	mov	r0, r7
 800c948:	f001 fc58 	bl	800e1fc <__mcmp>
 800c94c:	2800      	cmp	r0, #0
 800c94e:	db25      	blt.n	800c99c <quorem+0xec>
 800c950:	4629      	mov	r1, r5
 800c952:	2000      	movs	r0, #0
 800c954:	f858 2b04 	ldr.w	r2, [r8], #4
 800c958:	f8d1 c000 	ldr.w	ip, [r1]
 800c95c:	fa1f fe82 	uxth.w	lr, r2
 800c960:	fa1f f38c 	uxth.w	r3, ip
 800c964:	eba3 030e 	sub.w	r3, r3, lr
 800c968:	4403      	add	r3, r0
 800c96a:	0c12      	lsrs	r2, r2, #16
 800c96c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c970:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c974:	b29b      	uxth	r3, r3
 800c976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c97a:	45c1      	cmp	r9, r8
 800c97c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c980:	f841 3b04 	str.w	r3, [r1], #4
 800c984:	d2e6      	bcs.n	800c954 <quorem+0xa4>
 800c986:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c98a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c98e:	b922      	cbnz	r2, 800c99a <quorem+0xea>
 800c990:	3b04      	subs	r3, #4
 800c992:	429d      	cmp	r5, r3
 800c994:	461a      	mov	r2, r3
 800c996:	d30b      	bcc.n	800c9b0 <quorem+0x100>
 800c998:	613c      	str	r4, [r7, #16]
 800c99a:	3601      	adds	r6, #1
 800c99c:	4630      	mov	r0, r6
 800c99e:	b003      	add	sp, #12
 800c9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9a4:	6812      	ldr	r2, [r2, #0]
 800c9a6:	3b04      	subs	r3, #4
 800c9a8:	2a00      	cmp	r2, #0
 800c9aa:	d1cb      	bne.n	800c944 <quorem+0x94>
 800c9ac:	3c01      	subs	r4, #1
 800c9ae:	e7c6      	b.n	800c93e <quorem+0x8e>
 800c9b0:	6812      	ldr	r2, [r2, #0]
 800c9b2:	3b04      	subs	r3, #4
 800c9b4:	2a00      	cmp	r2, #0
 800c9b6:	d1ef      	bne.n	800c998 <quorem+0xe8>
 800c9b8:	3c01      	subs	r4, #1
 800c9ba:	e7ea      	b.n	800c992 <quorem+0xe2>
 800c9bc:	2000      	movs	r0, #0
 800c9be:	e7ee      	b.n	800c99e <quorem+0xee>

0800c9c0 <_dtoa_r>:
 800c9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c4:	4614      	mov	r4, r2
 800c9c6:	461d      	mov	r5, r3
 800c9c8:	69c7      	ldr	r7, [r0, #28]
 800c9ca:	b097      	sub	sp, #92	@ 0x5c
 800c9cc:	4683      	mov	fp, r0
 800c9ce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c9d2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800c9d4:	b97f      	cbnz	r7, 800c9f6 <_dtoa_r+0x36>
 800c9d6:	2010      	movs	r0, #16
 800c9d8:	f7fd fe16 	bl	800a608 <malloc>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	f8cb 001c 	str.w	r0, [fp, #28]
 800c9e2:	b920      	cbnz	r0, 800c9ee <_dtoa_r+0x2e>
 800c9e4:	21ef      	movs	r1, #239	@ 0xef
 800c9e6:	4ba8      	ldr	r3, [pc, #672]	@ (800cc88 <_dtoa_r+0x2c8>)
 800c9e8:	48a8      	ldr	r0, [pc, #672]	@ (800cc8c <_dtoa_r+0x2cc>)
 800c9ea:	f002 f9d5 	bl	800ed98 <__assert_func>
 800c9ee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c9f2:	6007      	str	r7, [r0, #0]
 800c9f4:	60c7      	str	r7, [r0, #12]
 800c9f6:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c9fa:	6819      	ldr	r1, [r3, #0]
 800c9fc:	b159      	cbz	r1, 800ca16 <_dtoa_r+0x56>
 800c9fe:	685a      	ldr	r2, [r3, #4]
 800ca00:	2301      	movs	r3, #1
 800ca02:	4093      	lsls	r3, r2
 800ca04:	604a      	str	r2, [r1, #4]
 800ca06:	608b      	str	r3, [r1, #8]
 800ca08:	4658      	mov	r0, fp
 800ca0a:	f001 f975 	bl	800dcf8 <_Bfree>
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ca14:	601a      	str	r2, [r3, #0]
 800ca16:	1e2b      	subs	r3, r5, #0
 800ca18:	bfaf      	iteee	ge
 800ca1a:	2300      	movge	r3, #0
 800ca1c:	2201      	movlt	r2, #1
 800ca1e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ca22:	9303      	strlt	r3, [sp, #12]
 800ca24:	bfa8      	it	ge
 800ca26:	6033      	strge	r3, [r6, #0]
 800ca28:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ca2c:	4b98      	ldr	r3, [pc, #608]	@ (800cc90 <_dtoa_r+0x2d0>)
 800ca2e:	bfb8      	it	lt
 800ca30:	6032      	strlt	r2, [r6, #0]
 800ca32:	ea33 0308 	bics.w	r3, r3, r8
 800ca36:	d112      	bne.n	800ca5e <_dtoa_r+0x9e>
 800ca38:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ca3c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ca3e:	6013      	str	r3, [r2, #0]
 800ca40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ca44:	4323      	orrs	r3, r4
 800ca46:	f000 8550 	beq.w	800d4ea <_dtoa_r+0xb2a>
 800ca4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ca4c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800cc94 <_dtoa_r+0x2d4>
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f000 8552 	beq.w	800d4fa <_dtoa_r+0xb3a>
 800ca56:	f10a 0303 	add.w	r3, sl, #3
 800ca5a:	f000 bd4c 	b.w	800d4f6 <_dtoa_r+0xb36>
 800ca5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca62:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ca66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	f7f3 ffa5 	bl	80009bc <__aeabi_dcmpeq>
 800ca72:	4607      	mov	r7, r0
 800ca74:	b158      	cbz	r0, 800ca8e <_dtoa_r+0xce>
 800ca76:	2301      	movs	r3, #1
 800ca78:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ca7a:	6013      	str	r3, [r2, #0]
 800ca7c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ca7e:	b113      	cbz	r3, 800ca86 <_dtoa_r+0xc6>
 800ca80:	4b85      	ldr	r3, [pc, #532]	@ (800cc98 <_dtoa_r+0x2d8>)
 800ca82:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ca84:	6013      	str	r3, [r2, #0]
 800ca86:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800cc9c <_dtoa_r+0x2dc>
 800ca8a:	f000 bd36 	b.w	800d4fa <_dtoa_r+0xb3a>
 800ca8e:	ab14      	add	r3, sp, #80	@ 0x50
 800ca90:	9301      	str	r3, [sp, #4]
 800ca92:	ab15      	add	r3, sp, #84	@ 0x54
 800ca94:	9300      	str	r3, [sp, #0]
 800ca96:	4658      	mov	r0, fp
 800ca98:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ca9c:	f001 fcc6 	bl	800e42c <__d2b>
 800caa0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800caa4:	4681      	mov	r9, r0
 800caa6:	2e00      	cmp	r6, #0
 800caa8:	d077      	beq.n	800cb9a <_dtoa_r+0x1da>
 800caaa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800caae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cab0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cab8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cabc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cac0:	9712      	str	r7, [sp, #72]	@ 0x48
 800cac2:	4619      	mov	r1, r3
 800cac4:	2200      	movs	r2, #0
 800cac6:	4b76      	ldr	r3, [pc, #472]	@ (800cca0 <_dtoa_r+0x2e0>)
 800cac8:	f7f3 fb58 	bl	800017c <__aeabi_dsub>
 800cacc:	a368      	add	r3, pc, #416	@ (adr r3, 800cc70 <_dtoa_r+0x2b0>)
 800cace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad2:	f7f3 fd0b 	bl	80004ec <__aeabi_dmul>
 800cad6:	a368      	add	r3, pc, #416	@ (adr r3, 800cc78 <_dtoa_r+0x2b8>)
 800cad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cadc:	f7f3 fb50 	bl	8000180 <__adddf3>
 800cae0:	4604      	mov	r4, r0
 800cae2:	4630      	mov	r0, r6
 800cae4:	460d      	mov	r5, r1
 800cae6:	f7f3 fc97 	bl	8000418 <__aeabi_i2d>
 800caea:	a365      	add	r3, pc, #404	@ (adr r3, 800cc80 <_dtoa_r+0x2c0>)
 800caec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf0:	f7f3 fcfc 	bl	80004ec <__aeabi_dmul>
 800caf4:	4602      	mov	r2, r0
 800caf6:	460b      	mov	r3, r1
 800caf8:	4620      	mov	r0, r4
 800cafa:	4629      	mov	r1, r5
 800cafc:	f7f3 fb40 	bl	8000180 <__adddf3>
 800cb00:	4604      	mov	r4, r0
 800cb02:	460d      	mov	r5, r1
 800cb04:	f7f3 ffa2 	bl	8000a4c <__aeabi_d2iz>
 800cb08:	2200      	movs	r2, #0
 800cb0a:	4607      	mov	r7, r0
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	4620      	mov	r0, r4
 800cb10:	4629      	mov	r1, r5
 800cb12:	f7f3 ff5d 	bl	80009d0 <__aeabi_dcmplt>
 800cb16:	b140      	cbz	r0, 800cb2a <_dtoa_r+0x16a>
 800cb18:	4638      	mov	r0, r7
 800cb1a:	f7f3 fc7d 	bl	8000418 <__aeabi_i2d>
 800cb1e:	4622      	mov	r2, r4
 800cb20:	462b      	mov	r3, r5
 800cb22:	f7f3 ff4b 	bl	80009bc <__aeabi_dcmpeq>
 800cb26:	b900      	cbnz	r0, 800cb2a <_dtoa_r+0x16a>
 800cb28:	3f01      	subs	r7, #1
 800cb2a:	2f16      	cmp	r7, #22
 800cb2c:	d853      	bhi.n	800cbd6 <_dtoa_r+0x216>
 800cb2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb32:	4b5c      	ldr	r3, [pc, #368]	@ (800cca4 <_dtoa_r+0x2e4>)
 800cb34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3c:	f7f3 ff48 	bl	80009d0 <__aeabi_dcmplt>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	d04a      	beq.n	800cbda <_dtoa_r+0x21a>
 800cb44:	2300      	movs	r3, #0
 800cb46:	3f01      	subs	r7, #1
 800cb48:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cb4a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cb4c:	1b9b      	subs	r3, r3, r6
 800cb4e:	1e5a      	subs	r2, r3, #1
 800cb50:	bf46      	itte	mi
 800cb52:	f1c3 0801 	rsbmi	r8, r3, #1
 800cb56:	2300      	movmi	r3, #0
 800cb58:	f04f 0800 	movpl.w	r8, #0
 800cb5c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb5e:	bf48      	it	mi
 800cb60:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800cb62:	2f00      	cmp	r7, #0
 800cb64:	db3b      	blt.n	800cbde <_dtoa_r+0x21e>
 800cb66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb68:	970e      	str	r7, [sp, #56]	@ 0x38
 800cb6a:	443b      	add	r3, r7
 800cb6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb6e:	2300      	movs	r3, #0
 800cb70:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cb74:	2b09      	cmp	r3, #9
 800cb76:	d866      	bhi.n	800cc46 <_dtoa_r+0x286>
 800cb78:	2b05      	cmp	r3, #5
 800cb7a:	bfc4      	itt	gt
 800cb7c:	3b04      	subgt	r3, #4
 800cb7e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800cb80:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cb82:	bfc8      	it	gt
 800cb84:	2400      	movgt	r4, #0
 800cb86:	f1a3 0302 	sub.w	r3, r3, #2
 800cb8a:	bfd8      	it	le
 800cb8c:	2401      	movle	r4, #1
 800cb8e:	2b03      	cmp	r3, #3
 800cb90:	d864      	bhi.n	800cc5c <_dtoa_r+0x29c>
 800cb92:	e8df f003 	tbb	[pc, r3]
 800cb96:	382b      	.short	0x382b
 800cb98:	5636      	.short	0x5636
 800cb9a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800cb9e:	441e      	add	r6, r3
 800cba0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cba4:	2b20      	cmp	r3, #32
 800cba6:	bfc1      	itttt	gt
 800cba8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cbac:	fa08 f803 	lslgt.w	r8, r8, r3
 800cbb0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cbb4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cbb8:	bfd6      	itet	le
 800cbba:	f1c3 0320 	rsble	r3, r3, #32
 800cbbe:	ea48 0003 	orrgt.w	r0, r8, r3
 800cbc2:	fa04 f003 	lslle.w	r0, r4, r3
 800cbc6:	f7f3 fc17 	bl	80003f8 <__aeabi_ui2d>
 800cbca:	2201      	movs	r2, #1
 800cbcc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cbd0:	3e01      	subs	r6, #1
 800cbd2:	9212      	str	r2, [sp, #72]	@ 0x48
 800cbd4:	e775      	b.n	800cac2 <_dtoa_r+0x102>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e7b6      	b.n	800cb48 <_dtoa_r+0x188>
 800cbda:	900f      	str	r0, [sp, #60]	@ 0x3c
 800cbdc:	e7b5      	b.n	800cb4a <_dtoa_r+0x18a>
 800cbde:	427b      	negs	r3, r7
 800cbe0:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	eba8 0807 	sub.w	r8, r8, r7
 800cbe8:	930e      	str	r3, [sp, #56]	@ 0x38
 800cbea:	e7c2      	b.n	800cb72 <_dtoa_r+0x1b2>
 800cbec:	2300      	movs	r3, #0
 800cbee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cbf0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	dc35      	bgt.n	800cc62 <_dtoa_r+0x2a2>
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800cbfe:	9221      	str	r2, [sp, #132]	@ 0x84
 800cc00:	e00b      	b.n	800cc1a <_dtoa_r+0x25a>
 800cc02:	2301      	movs	r3, #1
 800cc04:	e7f3      	b.n	800cbee <_dtoa_r+0x22e>
 800cc06:	2300      	movs	r3, #0
 800cc08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cc0c:	18fb      	adds	r3, r7, r3
 800cc0e:	9308      	str	r3, [sp, #32]
 800cc10:	3301      	adds	r3, #1
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	9307      	str	r3, [sp, #28]
 800cc16:	bfb8      	it	lt
 800cc18:	2301      	movlt	r3, #1
 800cc1a:	2100      	movs	r1, #0
 800cc1c:	2204      	movs	r2, #4
 800cc1e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cc22:	f102 0514 	add.w	r5, r2, #20
 800cc26:	429d      	cmp	r5, r3
 800cc28:	d91f      	bls.n	800cc6a <_dtoa_r+0x2aa>
 800cc2a:	6041      	str	r1, [r0, #4]
 800cc2c:	4658      	mov	r0, fp
 800cc2e:	f001 f823 	bl	800dc78 <_Balloc>
 800cc32:	4682      	mov	sl, r0
 800cc34:	2800      	cmp	r0, #0
 800cc36:	d139      	bne.n	800ccac <_dtoa_r+0x2ec>
 800cc38:	4602      	mov	r2, r0
 800cc3a:	f240 11af 	movw	r1, #431	@ 0x1af
 800cc3e:	4b1a      	ldr	r3, [pc, #104]	@ (800cca8 <_dtoa_r+0x2e8>)
 800cc40:	e6d2      	b.n	800c9e8 <_dtoa_r+0x28>
 800cc42:	2301      	movs	r3, #1
 800cc44:	e7e0      	b.n	800cc08 <_dtoa_r+0x248>
 800cc46:	2401      	movs	r4, #1
 800cc48:	2300      	movs	r3, #0
 800cc4a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cc4c:	9320      	str	r3, [sp, #128]	@ 0x80
 800cc4e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc52:	2200      	movs	r2, #0
 800cc54:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800cc58:	2312      	movs	r3, #18
 800cc5a:	e7d0      	b.n	800cbfe <_dtoa_r+0x23e>
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc60:	e7f5      	b.n	800cc4e <_dtoa_r+0x28e>
 800cc62:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cc64:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800cc68:	e7d7      	b.n	800cc1a <_dtoa_r+0x25a>
 800cc6a:	3101      	adds	r1, #1
 800cc6c:	0052      	lsls	r2, r2, #1
 800cc6e:	e7d8      	b.n	800cc22 <_dtoa_r+0x262>
 800cc70:	636f4361 	.word	0x636f4361
 800cc74:	3fd287a7 	.word	0x3fd287a7
 800cc78:	8b60c8b3 	.word	0x8b60c8b3
 800cc7c:	3fc68a28 	.word	0x3fc68a28
 800cc80:	509f79fb 	.word	0x509f79fb
 800cc84:	3fd34413 	.word	0x3fd34413
 800cc88:	0800fb53 	.word	0x0800fb53
 800cc8c:	0800fb6a 	.word	0x0800fb6a
 800cc90:	7ff00000 	.word	0x7ff00000
 800cc94:	0800fb4f 	.word	0x0800fb4f
 800cc98:	0800f41f 	.word	0x0800f41f
 800cc9c:	0800f41e 	.word	0x0800f41e
 800cca0:	3ff80000 	.word	0x3ff80000
 800cca4:	0800fcc0 	.word	0x0800fcc0
 800cca8:	0800fbc2 	.word	0x0800fbc2
 800ccac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ccb0:	6018      	str	r0, [r3, #0]
 800ccb2:	9b07      	ldr	r3, [sp, #28]
 800ccb4:	2b0e      	cmp	r3, #14
 800ccb6:	f200 80a4 	bhi.w	800ce02 <_dtoa_r+0x442>
 800ccba:	2c00      	cmp	r4, #0
 800ccbc:	f000 80a1 	beq.w	800ce02 <_dtoa_r+0x442>
 800ccc0:	2f00      	cmp	r7, #0
 800ccc2:	dd33      	ble.n	800cd2c <_dtoa_r+0x36c>
 800ccc4:	4b86      	ldr	r3, [pc, #536]	@ (800cee0 <_dtoa_r+0x520>)
 800ccc6:	f007 020f 	and.w	r2, r7, #15
 800ccca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccce:	05f8      	lsls	r0, r7, #23
 800ccd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ccd4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ccd8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ccdc:	d516      	bpl.n	800cd0c <_dtoa_r+0x34c>
 800ccde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cce2:	4b80      	ldr	r3, [pc, #512]	@ (800cee4 <_dtoa_r+0x524>)
 800cce4:	2603      	movs	r6, #3
 800cce6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ccea:	f7f3 fd29 	bl	8000740 <__aeabi_ddiv>
 800ccee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccf2:	f004 040f 	and.w	r4, r4, #15
 800ccf6:	4d7b      	ldr	r5, [pc, #492]	@ (800cee4 <_dtoa_r+0x524>)
 800ccf8:	b954      	cbnz	r4, 800cd10 <_dtoa_r+0x350>
 800ccfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd02:	f7f3 fd1d 	bl	8000740 <__aeabi_ddiv>
 800cd06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd0a:	e028      	b.n	800cd5e <_dtoa_r+0x39e>
 800cd0c:	2602      	movs	r6, #2
 800cd0e:	e7f2      	b.n	800ccf6 <_dtoa_r+0x336>
 800cd10:	07e1      	lsls	r1, r4, #31
 800cd12:	d508      	bpl.n	800cd26 <_dtoa_r+0x366>
 800cd14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd18:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cd1c:	f7f3 fbe6 	bl	80004ec <__aeabi_dmul>
 800cd20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd24:	3601      	adds	r6, #1
 800cd26:	1064      	asrs	r4, r4, #1
 800cd28:	3508      	adds	r5, #8
 800cd2a:	e7e5      	b.n	800ccf8 <_dtoa_r+0x338>
 800cd2c:	f000 80d2 	beq.w	800ced4 <_dtoa_r+0x514>
 800cd30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd34:	427c      	negs	r4, r7
 800cd36:	4b6a      	ldr	r3, [pc, #424]	@ (800cee0 <_dtoa_r+0x520>)
 800cd38:	f004 020f 	and.w	r2, r4, #15
 800cd3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd44:	f7f3 fbd2 	bl	80004ec <__aeabi_dmul>
 800cd48:	2602      	movs	r6, #2
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd50:	4d64      	ldr	r5, [pc, #400]	@ (800cee4 <_dtoa_r+0x524>)
 800cd52:	1124      	asrs	r4, r4, #4
 800cd54:	2c00      	cmp	r4, #0
 800cd56:	f040 80b2 	bne.w	800cebe <_dtoa_r+0x4fe>
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d1d3      	bne.n	800cd06 <_dtoa_r+0x346>
 800cd5e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cd62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	f000 80b7 	beq.w	800ced8 <_dtoa_r+0x518>
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	4629      	mov	r1, r5
 800cd70:	4b5d      	ldr	r3, [pc, #372]	@ (800cee8 <_dtoa_r+0x528>)
 800cd72:	f7f3 fe2d 	bl	80009d0 <__aeabi_dcmplt>
 800cd76:	2800      	cmp	r0, #0
 800cd78:	f000 80ae 	beq.w	800ced8 <_dtoa_r+0x518>
 800cd7c:	9b07      	ldr	r3, [sp, #28]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	f000 80aa 	beq.w	800ced8 <_dtoa_r+0x518>
 800cd84:	9b08      	ldr	r3, [sp, #32]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	dd37      	ble.n	800cdfa <_dtoa_r+0x43a>
 800cd8a:	1e7b      	subs	r3, r7, #1
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	9304      	str	r3, [sp, #16]
 800cd90:	2200      	movs	r2, #0
 800cd92:	4629      	mov	r1, r5
 800cd94:	4b55      	ldr	r3, [pc, #340]	@ (800ceec <_dtoa_r+0x52c>)
 800cd96:	f7f3 fba9 	bl	80004ec <__aeabi_dmul>
 800cd9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd9e:	9c08      	ldr	r4, [sp, #32]
 800cda0:	3601      	adds	r6, #1
 800cda2:	4630      	mov	r0, r6
 800cda4:	f7f3 fb38 	bl	8000418 <__aeabi_i2d>
 800cda8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdac:	f7f3 fb9e 	bl	80004ec <__aeabi_dmul>
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	4b4f      	ldr	r3, [pc, #316]	@ (800cef0 <_dtoa_r+0x530>)
 800cdb4:	f7f3 f9e4 	bl	8000180 <__adddf3>
 800cdb8:	4605      	mov	r5, r0
 800cdba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cdbe:	2c00      	cmp	r4, #0
 800cdc0:	f040 809a 	bne.w	800cef8 <_dtoa_r+0x538>
 800cdc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	4b4a      	ldr	r3, [pc, #296]	@ (800cef4 <_dtoa_r+0x534>)
 800cdcc:	f7f3 f9d6 	bl	800017c <__aeabi_dsub>
 800cdd0:	4602      	mov	r2, r0
 800cdd2:	460b      	mov	r3, r1
 800cdd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cdd8:	462a      	mov	r2, r5
 800cdda:	4633      	mov	r3, r6
 800cddc:	f7f3 fe16 	bl	8000a0c <__aeabi_dcmpgt>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	f040 828e 	bne.w	800d302 <_dtoa_r+0x942>
 800cde6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdea:	462a      	mov	r2, r5
 800cdec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cdf0:	f7f3 fdee 	bl	80009d0 <__aeabi_dcmplt>
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	f040 8127 	bne.w	800d048 <_dtoa_r+0x688>
 800cdfa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cdfe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ce02:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	f2c0 8163 	blt.w	800d0d0 <_dtoa_r+0x710>
 800ce0a:	2f0e      	cmp	r7, #14
 800ce0c:	f300 8160 	bgt.w	800d0d0 <_dtoa_r+0x710>
 800ce10:	4b33      	ldr	r3, [pc, #204]	@ (800cee0 <_dtoa_r+0x520>)
 800ce12:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ce16:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ce1a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ce1e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	da03      	bge.n	800ce2c <_dtoa_r+0x46c>
 800ce24:	9b07      	ldr	r3, [sp, #28]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	f340 8100 	ble.w	800d02c <_dtoa_r+0x66c>
 800ce2c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ce30:	4656      	mov	r6, sl
 800ce32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce36:	4620      	mov	r0, r4
 800ce38:	4629      	mov	r1, r5
 800ce3a:	f7f3 fc81 	bl	8000740 <__aeabi_ddiv>
 800ce3e:	f7f3 fe05 	bl	8000a4c <__aeabi_d2iz>
 800ce42:	4680      	mov	r8, r0
 800ce44:	f7f3 fae8 	bl	8000418 <__aeabi_i2d>
 800ce48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce4c:	f7f3 fb4e 	bl	80004ec <__aeabi_dmul>
 800ce50:	4602      	mov	r2, r0
 800ce52:	460b      	mov	r3, r1
 800ce54:	4620      	mov	r0, r4
 800ce56:	4629      	mov	r1, r5
 800ce58:	f7f3 f990 	bl	800017c <__aeabi_dsub>
 800ce5c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ce60:	9d07      	ldr	r5, [sp, #28]
 800ce62:	f806 4b01 	strb.w	r4, [r6], #1
 800ce66:	eba6 040a 	sub.w	r4, r6, sl
 800ce6a:	42a5      	cmp	r5, r4
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	460b      	mov	r3, r1
 800ce70:	f040 8116 	bne.w	800d0a0 <_dtoa_r+0x6e0>
 800ce74:	f7f3 f984 	bl	8000180 <__adddf3>
 800ce78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce7c:	4604      	mov	r4, r0
 800ce7e:	460d      	mov	r5, r1
 800ce80:	f7f3 fdc4 	bl	8000a0c <__aeabi_dcmpgt>
 800ce84:	2800      	cmp	r0, #0
 800ce86:	f040 80f8 	bne.w	800d07a <_dtoa_r+0x6ba>
 800ce8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce8e:	4620      	mov	r0, r4
 800ce90:	4629      	mov	r1, r5
 800ce92:	f7f3 fd93 	bl	80009bc <__aeabi_dcmpeq>
 800ce96:	b118      	cbz	r0, 800cea0 <_dtoa_r+0x4e0>
 800ce98:	f018 0f01 	tst.w	r8, #1
 800ce9c:	f040 80ed 	bne.w	800d07a <_dtoa_r+0x6ba>
 800cea0:	4649      	mov	r1, r9
 800cea2:	4658      	mov	r0, fp
 800cea4:	f000 ff28 	bl	800dcf8 <_Bfree>
 800cea8:	2300      	movs	r3, #0
 800ceaa:	7033      	strb	r3, [r6, #0]
 800ceac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ceae:	3701      	adds	r7, #1
 800ceb0:	601f      	str	r7, [r3, #0]
 800ceb2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	f000 8320 	beq.w	800d4fa <_dtoa_r+0xb3a>
 800ceba:	601e      	str	r6, [r3, #0]
 800cebc:	e31d      	b.n	800d4fa <_dtoa_r+0xb3a>
 800cebe:	07e2      	lsls	r2, r4, #31
 800cec0:	d505      	bpl.n	800cece <_dtoa_r+0x50e>
 800cec2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cec6:	f7f3 fb11 	bl	80004ec <__aeabi_dmul>
 800ceca:	2301      	movs	r3, #1
 800cecc:	3601      	adds	r6, #1
 800cece:	1064      	asrs	r4, r4, #1
 800ced0:	3508      	adds	r5, #8
 800ced2:	e73f      	b.n	800cd54 <_dtoa_r+0x394>
 800ced4:	2602      	movs	r6, #2
 800ced6:	e742      	b.n	800cd5e <_dtoa_r+0x39e>
 800ced8:	9c07      	ldr	r4, [sp, #28]
 800ceda:	9704      	str	r7, [sp, #16]
 800cedc:	e761      	b.n	800cda2 <_dtoa_r+0x3e2>
 800cede:	bf00      	nop
 800cee0:	0800fcc0 	.word	0x0800fcc0
 800cee4:	0800fc98 	.word	0x0800fc98
 800cee8:	3ff00000 	.word	0x3ff00000
 800ceec:	40240000 	.word	0x40240000
 800cef0:	401c0000 	.word	0x401c0000
 800cef4:	40140000 	.word	0x40140000
 800cef8:	4b70      	ldr	r3, [pc, #448]	@ (800d0bc <_dtoa_r+0x6fc>)
 800cefa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cefc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cf00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cf04:	4454      	add	r4, sl
 800cf06:	2900      	cmp	r1, #0
 800cf08:	d045      	beq.n	800cf96 <_dtoa_r+0x5d6>
 800cf0a:	2000      	movs	r0, #0
 800cf0c:	496c      	ldr	r1, [pc, #432]	@ (800d0c0 <_dtoa_r+0x700>)
 800cf0e:	f7f3 fc17 	bl	8000740 <__aeabi_ddiv>
 800cf12:	4633      	mov	r3, r6
 800cf14:	462a      	mov	r2, r5
 800cf16:	f7f3 f931 	bl	800017c <__aeabi_dsub>
 800cf1a:	4656      	mov	r6, sl
 800cf1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cf20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf24:	f7f3 fd92 	bl	8000a4c <__aeabi_d2iz>
 800cf28:	4605      	mov	r5, r0
 800cf2a:	f7f3 fa75 	bl	8000418 <__aeabi_i2d>
 800cf2e:	4602      	mov	r2, r0
 800cf30:	460b      	mov	r3, r1
 800cf32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf36:	f7f3 f921 	bl	800017c <__aeabi_dsub>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	460b      	mov	r3, r1
 800cf3e:	3530      	adds	r5, #48	@ 0x30
 800cf40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cf44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cf48:	f806 5b01 	strb.w	r5, [r6], #1
 800cf4c:	f7f3 fd40 	bl	80009d0 <__aeabi_dcmplt>
 800cf50:	2800      	cmp	r0, #0
 800cf52:	d163      	bne.n	800d01c <_dtoa_r+0x65c>
 800cf54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf58:	2000      	movs	r0, #0
 800cf5a:	495a      	ldr	r1, [pc, #360]	@ (800d0c4 <_dtoa_r+0x704>)
 800cf5c:	f7f3 f90e 	bl	800017c <__aeabi_dsub>
 800cf60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cf64:	f7f3 fd34 	bl	80009d0 <__aeabi_dcmplt>
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	f040 8087 	bne.w	800d07c <_dtoa_r+0x6bc>
 800cf6e:	42a6      	cmp	r6, r4
 800cf70:	f43f af43 	beq.w	800cdfa <_dtoa_r+0x43a>
 800cf74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cf78:	2200      	movs	r2, #0
 800cf7a:	4b53      	ldr	r3, [pc, #332]	@ (800d0c8 <_dtoa_r+0x708>)
 800cf7c:	f7f3 fab6 	bl	80004ec <__aeabi_dmul>
 800cf80:	2200      	movs	r2, #0
 800cf82:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cf86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf8a:	4b4f      	ldr	r3, [pc, #316]	@ (800d0c8 <_dtoa_r+0x708>)
 800cf8c:	f7f3 faae 	bl	80004ec <__aeabi_dmul>
 800cf90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf94:	e7c4      	b.n	800cf20 <_dtoa_r+0x560>
 800cf96:	4631      	mov	r1, r6
 800cf98:	4628      	mov	r0, r5
 800cf9a:	f7f3 faa7 	bl	80004ec <__aeabi_dmul>
 800cf9e:	4656      	mov	r6, sl
 800cfa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cfa4:	9413      	str	r4, [sp, #76]	@ 0x4c
 800cfa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfaa:	f7f3 fd4f 	bl	8000a4c <__aeabi_d2iz>
 800cfae:	4605      	mov	r5, r0
 800cfb0:	f7f3 fa32 	bl	8000418 <__aeabi_i2d>
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	460b      	mov	r3, r1
 800cfb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfbc:	f7f3 f8de 	bl	800017c <__aeabi_dsub>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	460b      	mov	r3, r1
 800cfc4:	3530      	adds	r5, #48	@ 0x30
 800cfc6:	f806 5b01 	strb.w	r5, [r6], #1
 800cfca:	42a6      	cmp	r6, r4
 800cfcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cfd0:	f04f 0200 	mov.w	r2, #0
 800cfd4:	d124      	bne.n	800d020 <_dtoa_r+0x660>
 800cfd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cfda:	4b39      	ldr	r3, [pc, #228]	@ (800d0c0 <_dtoa_r+0x700>)
 800cfdc:	f7f3 f8d0 	bl	8000180 <__adddf3>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfe8:	f7f3 fd10 	bl	8000a0c <__aeabi_dcmpgt>
 800cfec:	2800      	cmp	r0, #0
 800cfee:	d145      	bne.n	800d07c <_dtoa_r+0x6bc>
 800cff0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cff4:	2000      	movs	r0, #0
 800cff6:	4932      	ldr	r1, [pc, #200]	@ (800d0c0 <_dtoa_r+0x700>)
 800cff8:	f7f3 f8c0 	bl	800017c <__aeabi_dsub>
 800cffc:	4602      	mov	r2, r0
 800cffe:	460b      	mov	r3, r1
 800d000:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d004:	f7f3 fce4 	bl	80009d0 <__aeabi_dcmplt>
 800d008:	2800      	cmp	r0, #0
 800d00a:	f43f aef6 	beq.w	800cdfa <_dtoa_r+0x43a>
 800d00e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d010:	1e73      	subs	r3, r6, #1
 800d012:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d014:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d018:	2b30      	cmp	r3, #48	@ 0x30
 800d01a:	d0f8      	beq.n	800d00e <_dtoa_r+0x64e>
 800d01c:	9f04      	ldr	r7, [sp, #16]
 800d01e:	e73f      	b.n	800cea0 <_dtoa_r+0x4e0>
 800d020:	4b29      	ldr	r3, [pc, #164]	@ (800d0c8 <_dtoa_r+0x708>)
 800d022:	f7f3 fa63 	bl	80004ec <__aeabi_dmul>
 800d026:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d02a:	e7bc      	b.n	800cfa6 <_dtoa_r+0x5e6>
 800d02c:	d10c      	bne.n	800d048 <_dtoa_r+0x688>
 800d02e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d032:	2200      	movs	r2, #0
 800d034:	4b25      	ldr	r3, [pc, #148]	@ (800d0cc <_dtoa_r+0x70c>)
 800d036:	f7f3 fa59 	bl	80004ec <__aeabi_dmul>
 800d03a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d03e:	f7f3 fcdb 	bl	80009f8 <__aeabi_dcmpge>
 800d042:	2800      	cmp	r0, #0
 800d044:	f000 815b 	beq.w	800d2fe <_dtoa_r+0x93e>
 800d048:	2400      	movs	r4, #0
 800d04a:	4625      	mov	r5, r4
 800d04c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d04e:	4656      	mov	r6, sl
 800d050:	43db      	mvns	r3, r3
 800d052:	9304      	str	r3, [sp, #16]
 800d054:	2700      	movs	r7, #0
 800d056:	4621      	mov	r1, r4
 800d058:	4658      	mov	r0, fp
 800d05a:	f000 fe4d 	bl	800dcf8 <_Bfree>
 800d05e:	2d00      	cmp	r5, #0
 800d060:	d0dc      	beq.n	800d01c <_dtoa_r+0x65c>
 800d062:	b12f      	cbz	r7, 800d070 <_dtoa_r+0x6b0>
 800d064:	42af      	cmp	r7, r5
 800d066:	d003      	beq.n	800d070 <_dtoa_r+0x6b0>
 800d068:	4639      	mov	r1, r7
 800d06a:	4658      	mov	r0, fp
 800d06c:	f000 fe44 	bl	800dcf8 <_Bfree>
 800d070:	4629      	mov	r1, r5
 800d072:	4658      	mov	r0, fp
 800d074:	f000 fe40 	bl	800dcf8 <_Bfree>
 800d078:	e7d0      	b.n	800d01c <_dtoa_r+0x65c>
 800d07a:	9704      	str	r7, [sp, #16]
 800d07c:	4633      	mov	r3, r6
 800d07e:	461e      	mov	r6, r3
 800d080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d084:	2a39      	cmp	r2, #57	@ 0x39
 800d086:	d107      	bne.n	800d098 <_dtoa_r+0x6d8>
 800d088:	459a      	cmp	sl, r3
 800d08a:	d1f8      	bne.n	800d07e <_dtoa_r+0x6be>
 800d08c:	9a04      	ldr	r2, [sp, #16]
 800d08e:	3201      	adds	r2, #1
 800d090:	9204      	str	r2, [sp, #16]
 800d092:	2230      	movs	r2, #48	@ 0x30
 800d094:	f88a 2000 	strb.w	r2, [sl]
 800d098:	781a      	ldrb	r2, [r3, #0]
 800d09a:	3201      	adds	r2, #1
 800d09c:	701a      	strb	r2, [r3, #0]
 800d09e:	e7bd      	b.n	800d01c <_dtoa_r+0x65c>
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	4b09      	ldr	r3, [pc, #36]	@ (800d0c8 <_dtoa_r+0x708>)
 800d0a4:	f7f3 fa22 	bl	80004ec <__aeabi_dmul>
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	4604      	mov	r4, r0
 800d0ae:	460d      	mov	r5, r1
 800d0b0:	f7f3 fc84 	bl	80009bc <__aeabi_dcmpeq>
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	f43f aebc 	beq.w	800ce32 <_dtoa_r+0x472>
 800d0ba:	e6f1      	b.n	800cea0 <_dtoa_r+0x4e0>
 800d0bc:	0800fcc0 	.word	0x0800fcc0
 800d0c0:	3fe00000 	.word	0x3fe00000
 800d0c4:	3ff00000 	.word	0x3ff00000
 800d0c8:	40240000 	.word	0x40240000
 800d0cc:	40140000 	.word	0x40140000
 800d0d0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d0d2:	2a00      	cmp	r2, #0
 800d0d4:	f000 80db 	beq.w	800d28e <_dtoa_r+0x8ce>
 800d0d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d0da:	2a01      	cmp	r2, #1
 800d0dc:	f300 80bf 	bgt.w	800d25e <_dtoa_r+0x89e>
 800d0e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d0e2:	2a00      	cmp	r2, #0
 800d0e4:	f000 80b7 	beq.w	800d256 <_dtoa_r+0x896>
 800d0e8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d0ec:	4646      	mov	r6, r8
 800d0ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d0f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0f2:	2101      	movs	r1, #1
 800d0f4:	441a      	add	r2, r3
 800d0f6:	4658      	mov	r0, fp
 800d0f8:	4498      	add	r8, r3
 800d0fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800d0fc:	f000 fefa 	bl	800def4 <__i2b>
 800d100:	4605      	mov	r5, r0
 800d102:	b15e      	cbz	r6, 800d11c <_dtoa_r+0x75c>
 800d104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d106:	2b00      	cmp	r3, #0
 800d108:	dd08      	ble.n	800d11c <_dtoa_r+0x75c>
 800d10a:	42b3      	cmp	r3, r6
 800d10c:	bfa8      	it	ge
 800d10e:	4633      	movge	r3, r6
 800d110:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d112:	eba8 0803 	sub.w	r8, r8, r3
 800d116:	1af6      	subs	r6, r6, r3
 800d118:	1ad3      	subs	r3, r2, r3
 800d11a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d11c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d11e:	b1f3      	cbz	r3, 800d15e <_dtoa_r+0x79e>
 800d120:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d122:	2b00      	cmp	r3, #0
 800d124:	f000 80b7 	beq.w	800d296 <_dtoa_r+0x8d6>
 800d128:	b18c      	cbz	r4, 800d14e <_dtoa_r+0x78e>
 800d12a:	4629      	mov	r1, r5
 800d12c:	4622      	mov	r2, r4
 800d12e:	4658      	mov	r0, fp
 800d130:	f000 ff9e 	bl	800e070 <__pow5mult>
 800d134:	464a      	mov	r2, r9
 800d136:	4601      	mov	r1, r0
 800d138:	4605      	mov	r5, r0
 800d13a:	4658      	mov	r0, fp
 800d13c:	f000 fef0 	bl	800df20 <__multiply>
 800d140:	4649      	mov	r1, r9
 800d142:	9004      	str	r0, [sp, #16]
 800d144:	4658      	mov	r0, fp
 800d146:	f000 fdd7 	bl	800dcf8 <_Bfree>
 800d14a:	9b04      	ldr	r3, [sp, #16]
 800d14c:	4699      	mov	r9, r3
 800d14e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d150:	1b1a      	subs	r2, r3, r4
 800d152:	d004      	beq.n	800d15e <_dtoa_r+0x79e>
 800d154:	4649      	mov	r1, r9
 800d156:	4658      	mov	r0, fp
 800d158:	f000 ff8a 	bl	800e070 <__pow5mult>
 800d15c:	4681      	mov	r9, r0
 800d15e:	2101      	movs	r1, #1
 800d160:	4658      	mov	r0, fp
 800d162:	f000 fec7 	bl	800def4 <__i2b>
 800d166:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d168:	4604      	mov	r4, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	f000 81c9 	beq.w	800d502 <_dtoa_r+0xb42>
 800d170:	461a      	mov	r2, r3
 800d172:	4601      	mov	r1, r0
 800d174:	4658      	mov	r0, fp
 800d176:	f000 ff7b 	bl	800e070 <__pow5mult>
 800d17a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d17c:	4604      	mov	r4, r0
 800d17e:	2b01      	cmp	r3, #1
 800d180:	f300 808f 	bgt.w	800d2a2 <_dtoa_r+0x8e2>
 800d184:	9b02      	ldr	r3, [sp, #8]
 800d186:	2b00      	cmp	r3, #0
 800d188:	f040 8087 	bne.w	800d29a <_dtoa_r+0x8da>
 800d18c:	9b03      	ldr	r3, [sp, #12]
 800d18e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d192:	2b00      	cmp	r3, #0
 800d194:	f040 8083 	bne.w	800d29e <_dtoa_r+0x8de>
 800d198:	9b03      	ldr	r3, [sp, #12]
 800d19a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d19e:	0d1b      	lsrs	r3, r3, #20
 800d1a0:	051b      	lsls	r3, r3, #20
 800d1a2:	b12b      	cbz	r3, 800d1b0 <_dtoa_r+0x7f0>
 800d1a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1a6:	f108 0801 	add.w	r8, r8, #1
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d1b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	f000 81aa 	beq.w	800d50e <_dtoa_r+0xb4e>
 800d1ba:	6923      	ldr	r3, [r4, #16]
 800d1bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d1c0:	6918      	ldr	r0, [r3, #16]
 800d1c2:	f000 fe4b 	bl	800de5c <__hi0bits>
 800d1c6:	f1c0 0020 	rsb	r0, r0, #32
 800d1ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1cc:	4418      	add	r0, r3
 800d1ce:	f010 001f 	ands.w	r0, r0, #31
 800d1d2:	d071      	beq.n	800d2b8 <_dtoa_r+0x8f8>
 800d1d4:	f1c0 0320 	rsb	r3, r0, #32
 800d1d8:	2b04      	cmp	r3, #4
 800d1da:	dd65      	ble.n	800d2a8 <_dtoa_r+0x8e8>
 800d1dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1de:	f1c0 001c 	rsb	r0, r0, #28
 800d1e2:	4403      	add	r3, r0
 800d1e4:	4480      	add	r8, r0
 800d1e6:	4406      	add	r6, r0
 800d1e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1ea:	f1b8 0f00 	cmp.w	r8, #0
 800d1ee:	dd05      	ble.n	800d1fc <_dtoa_r+0x83c>
 800d1f0:	4649      	mov	r1, r9
 800d1f2:	4642      	mov	r2, r8
 800d1f4:	4658      	mov	r0, fp
 800d1f6:	f000 ff95 	bl	800e124 <__lshift>
 800d1fa:	4681      	mov	r9, r0
 800d1fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	dd05      	ble.n	800d20e <_dtoa_r+0x84e>
 800d202:	4621      	mov	r1, r4
 800d204:	461a      	mov	r2, r3
 800d206:	4658      	mov	r0, fp
 800d208:	f000 ff8c 	bl	800e124 <__lshift>
 800d20c:	4604      	mov	r4, r0
 800d20e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d210:	2b00      	cmp	r3, #0
 800d212:	d053      	beq.n	800d2bc <_dtoa_r+0x8fc>
 800d214:	4621      	mov	r1, r4
 800d216:	4648      	mov	r0, r9
 800d218:	f000 fff0 	bl	800e1fc <__mcmp>
 800d21c:	2800      	cmp	r0, #0
 800d21e:	da4d      	bge.n	800d2bc <_dtoa_r+0x8fc>
 800d220:	1e7b      	subs	r3, r7, #1
 800d222:	4649      	mov	r1, r9
 800d224:	9304      	str	r3, [sp, #16]
 800d226:	220a      	movs	r2, #10
 800d228:	2300      	movs	r3, #0
 800d22a:	4658      	mov	r0, fp
 800d22c:	f000 fd86 	bl	800dd3c <__multadd>
 800d230:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d232:	4681      	mov	r9, r0
 800d234:	2b00      	cmp	r3, #0
 800d236:	f000 816c 	beq.w	800d512 <_dtoa_r+0xb52>
 800d23a:	2300      	movs	r3, #0
 800d23c:	4629      	mov	r1, r5
 800d23e:	220a      	movs	r2, #10
 800d240:	4658      	mov	r0, fp
 800d242:	f000 fd7b 	bl	800dd3c <__multadd>
 800d246:	9b08      	ldr	r3, [sp, #32]
 800d248:	4605      	mov	r5, r0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	dc61      	bgt.n	800d312 <_dtoa_r+0x952>
 800d24e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d250:	2b02      	cmp	r3, #2
 800d252:	dc3b      	bgt.n	800d2cc <_dtoa_r+0x90c>
 800d254:	e05d      	b.n	800d312 <_dtoa_r+0x952>
 800d256:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d258:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d25c:	e746      	b.n	800d0ec <_dtoa_r+0x72c>
 800d25e:	9b07      	ldr	r3, [sp, #28]
 800d260:	1e5c      	subs	r4, r3, #1
 800d262:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d264:	42a3      	cmp	r3, r4
 800d266:	bfbf      	itttt	lt
 800d268:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d26a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800d26c:	1ae3      	sublt	r3, r4, r3
 800d26e:	18d2      	addlt	r2, r2, r3
 800d270:	bfa8      	it	ge
 800d272:	1b1c      	subge	r4, r3, r4
 800d274:	9b07      	ldr	r3, [sp, #28]
 800d276:	bfbe      	ittt	lt
 800d278:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d27a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800d27c:	2400      	movlt	r4, #0
 800d27e:	2b00      	cmp	r3, #0
 800d280:	bfb5      	itete	lt
 800d282:	eba8 0603 	sublt.w	r6, r8, r3
 800d286:	4646      	movge	r6, r8
 800d288:	2300      	movlt	r3, #0
 800d28a:	9b07      	ldrge	r3, [sp, #28]
 800d28c:	e730      	b.n	800d0f0 <_dtoa_r+0x730>
 800d28e:	4646      	mov	r6, r8
 800d290:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d292:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d294:	e735      	b.n	800d102 <_dtoa_r+0x742>
 800d296:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d298:	e75c      	b.n	800d154 <_dtoa_r+0x794>
 800d29a:	2300      	movs	r3, #0
 800d29c:	e788      	b.n	800d1b0 <_dtoa_r+0x7f0>
 800d29e:	9b02      	ldr	r3, [sp, #8]
 800d2a0:	e786      	b.n	800d1b0 <_dtoa_r+0x7f0>
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2a6:	e788      	b.n	800d1ba <_dtoa_r+0x7fa>
 800d2a8:	d09f      	beq.n	800d1ea <_dtoa_r+0x82a>
 800d2aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2ac:	331c      	adds	r3, #28
 800d2ae:	441a      	add	r2, r3
 800d2b0:	4498      	add	r8, r3
 800d2b2:	441e      	add	r6, r3
 800d2b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2b6:	e798      	b.n	800d1ea <_dtoa_r+0x82a>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	e7f6      	b.n	800d2aa <_dtoa_r+0x8ea>
 800d2bc:	9b07      	ldr	r3, [sp, #28]
 800d2be:	9704      	str	r7, [sp, #16]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	dc20      	bgt.n	800d306 <_dtoa_r+0x946>
 800d2c4:	9308      	str	r3, [sp, #32]
 800d2c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d2c8:	2b02      	cmp	r3, #2
 800d2ca:	dd1e      	ble.n	800d30a <_dtoa_r+0x94a>
 800d2cc:	9b08      	ldr	r3, [sp, #32]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	f47f aebc 	bne.w	800d04c <_dtoa_r+0x68c>
 800d2d4:	4621      	mov	r1, r4
 800d2d6:	2205      	movs	r2, #5
 800d2d8:	4658      	mov	r0, fp
 800d2da:	f000 fd2f 	bl	800dd3c <__multadd>
 800d2de:	4601      	mov	r1, r0
 800d2e0:	4604      	mov	r4, r0
 800d2e2:	4648      	mov	r0, r9
 800d2e4:	f000 ff8a 	bl	800e1fc <__mcmp>
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	f77f aeaf 	ble.w	800d04c <_dtoa_r+0x68c>
 800d2ee:	2331      	movs	r3, #49	@ 0x31
 800d2f0:	4656      	mov	r6, sl
 800d2f2:	f806 3b01 	strb.w	r3, [r6], #1
 800d2f6:	9b04      	ldr	r3, [sp, #16]
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	9304      	str	r3, [sp, #16]
 800d2fc:	e6aa      	b.n	800d054 <_dtoa_r+0x694>
 800d2fe:	9c07      	ldr	r4, [sp, #28]
 800d300:	9704      	str	r7, [sp, #16]
 800d302:	4625      	mov	r5, r4
 800d304:	e7f3      	b.n	800d2ee <_dtoa_r+0x92e>
 800d306:	9b07      	ldr	r3, [sp, #28]
 800d308:	9308      	str	r3, [sp, #32]
 800d30a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f000 8104 	beq.w	800d51a <_dtoa_r+0xb5a>
 800d312:	2e00      	cmp	r6, #0
 800d314:	dd05      	ble.n	800d322 <_dtoa_r+0x962>
 800d316:	4629      	mov	r1, r5
 800d318:	4632      	mov	r2, r6
 800d31a:	4658      	mov	r0, fp
 800d31c:	f000 ff02 	bl	800e124 <__lshift>
 800d320:	4605      	mov	r5, r0
 800d322:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d324:	2b00      	cmp	r3, #0
 800d326:	d05a      	beq.n	800d3de <_dtoa_r+0xa1e>
 800d328:	4658      	mov	r0, fp
 800d32a:	6869      	ldr	r1, [r5, #4]
 800d32c:	f000 fca4 	bl	800dc78 <_Balloc>
 800d330:	4606      	mov	r6, r0
 800d332:	b928      	cbnz	r0, 800d340 <_dtoa_r+0x980>
 800d334:	4602      	mov	r2, r0
 800d336:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d33a:	4b83      	ldr	r3, [pc, #524]	@ (800d548 <_dtoa_r+0xb88>)
 800d33c:	f7ff bb54 	b.w	800c9e8 <_dtoa_r+0x28>
 800d340:	692a      	ldr	r2, [r5, #16]
 800d342:	f105 010c 	add.w	r1, r5, #12
 800d346:	3202      	adds	r2, #2
 800d348:	0092      	lsls	r2, r2, #2
 800d34a:	300c      	adds	r0, #12
 800d34c:	f7ff fa97 	bl	800c87e <memcpy>
 800d350:	2201      	movs	r2, #1
 800d352:	4631      	mov	r1, r6
 800d354:	4658      	mov	r0, fp
 800d356:	f000 fee5 	bl	800e124 <__lshift>
 800d35a:	462f      	mov	r7, r5
 800d35c:	4605      	mov	r5, r0
 800d35e:	f10a 0301 	add.w	r3, sl, #1
 800d362:	9307      	str	r3, [sp, #28]
 800d364:	9b08      	ldr	r3, [sp, #32]
 800d366:	4453      	add	r3, sl
 800d368:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d36a:	9b02      	ldr	r3, [sp, #8]
 800d36c:	f003 0301 	and.w	r3, r3, #1
 800d370:	930a      	str	r3, [sp, #40]	@ 0x28
 800d372:	9b07      	ldr	r3, [sp, #28]
 800d374:	4621      	mov	r1, r4
 800d376:	3b01      	subs	r3, #1
 800d378:	4648      	mov	r0, r9
 800d37a:	9302      	str	r3, [sp, #8]
 800d37c:	f7ff fa98 	bl	800c8b0 <quorem>
 800d380:	4639      	mov	r1, r7
 800d382:	9008      	str	r0, [sp, #32]
 800d384:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d388:	4648      	mov	r0, r9
 800d38a:	f000 ff37 	bl	800e1fc <__mcmp>
 800d38e:	462a      	mov	r2, r5
 800d390:	9009      	str	r0, [sp, #36]	@ 0x24
 800d392:	4621      	mov	r1, r4
 800d394:	4658      	mov	r0, fp
 800d396:	f000 ff4d 	bl	800e234 <__mdiff>
 800d39a:	68c2      	ldr	r2, [r0, #12]
 800d39c:	4606      	mov	r6, r0
 800d39e:	bb02      	cbnz	r2, 800d3e2 <_dtoa_r+0xa22>
 800d3a0:	4601      	mov	r1, r0
 800d3a2:	4648      	mov	r0, r9
 800d3a4:	f000 ff2a 	bl	800e1fc <__mcmp>
 800d3a8:	4602      	mov	r2, r0
 800d3aa:	4631      	mov	r1, r6
 800d3ac:	4658      	mov	r0, fp
 800d3ae:	920c      	str	r2, [sp, #48]	@ 0x30
 800d3b0:	f000 fca2 	bl	800dcf8 <_Bfree>
 800d3b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d3b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d3b8:	9e07      	ldr	r6, [sp, #28]
 800d3ba:	ea43 0102 	orr.w	r1, r3, r2
 800d3be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3c0:	4319      	orrs	r1, r3
 800d3c2:	d110      	bne.n	800d3e6 <_dtoa_r+0xa26>
 800d3c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d3c8:	d029      	beq.n	800d41e <_dtoa_r+0xa5e>
 800d3ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	dd02      	ble.n	800d3d6 <_dtoa_r+0xa16>
 800d3d0:	9b08      	ldr	r3, [sp, #32]
 800d3d2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d3d6:	9b02      	ldr	r3, [sp, #8]
 800d3d8:	f883 8000 	strb.w	r8, [r3]
 800d3dc:	e63b      	b.n	800d056 <_dtoa_r+0x696>
 800d3de:	4628      	mov	r0, r5
 800d3e0:	e7bb      	b.n	800d35a <_dtoa_r+0x99a>
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	e7e1      	b.n	800d3aa <_dtoa_r+0x9ea>
 800d3e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	db04      	blt.n	800d3f6 <_dtoa_r+0xa36>
 800d3ec:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800d3ee:	430b      	orrs	r3, r1
 800d3f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d3f2:	430b      	orrs	r3, r1
 800d3f4:	d120      	bne.n	800d438 <_dtoa_r+0xa78>
 800d3f6:	2a00      	cmp	r2, #0
 800d3f8:	dded      	ble.n	800d3d6 <_dtoa_r+0xa16>
 800d3fa:	4649      	mov	r1, r9
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	4658      	mov	r0, fp
 800d400:	f000 fe90 	bl	800e124 <__lshift>
 800d404:	4621      	mov	r1, r4
 800d406:	4681      	mov	r9, r0
 800d408:	f000 fef8 	bl	800e1fc <__mcmp>
 800d40c:	2800      	cmp	r0, #0
 800d40e:	dc03      	bgt.n	800d418 <_dtoa_r+0xa58>
 800d410:	d1e1      	bne.n	800d3d6 <_dtoa_r+0xa16>
 800d412:	f018 0f01 	tst.w	r8, #1
 800d416:	d0de      	beq.n	800d3d6 <_dtoa_r+0xa16>
 800d418:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d41c:	d1d8      	bne.n	800d3d0 <_dtoa_r+0xa10>
 800d41e:	2339      	movs	r3, #57	@ 0x39
 800d420:	9a02      	ldr	r2, [sp, #8]
 800d422:	7013      	strb	r3, [r2, #0]
 800d424:	4633      	mov	r3, r6
 800d426:	461e      	mov	r6, r3
 800d428:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d42c:	3b01      	subs	r3, #1
 800d42e:	2a39      	cmp	r2, #57	@ 0x39
 800d430:	d052      	beq.n	800d4d8 <_dtoa_r+0xb18>
 800d432:	3201      	adds	r2, #1
 800d434:	701a      	strb	r2, [r3, #0]
 800d436:	e60e      	b.n	800d056 <_dtoa_r+0x696>
 800d438:	2a00      	cmp	r2, #0
 800d43a:	dd07      	ble.n	800d44c <_dtoa_r+0xa8c>
 800d43c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d440:	d0ed      	beq.n	800d41e <_dtoa_r+0xa5e>
 800d442:	9a02      	ldr	r2, [sp, #8]
 800d444:	f108 0301 	add.w	r3, r8, #1
 800d448:	7013      	strb	r3, [r2, #0]
 800d44a:	e604      	b.n	800d056 <_dtoa_r+0x696>
 800d44c:	9b07      	ldr	r3, [sp, #28]
 800d44e:	9a07      	ldr	r2, [sp, #28]
 800d450:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d454:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d456:	4293      	cmp	r3, r2
 800d458:	d028      	beq.n	800d4ac <_dtoa_r+0xaec>
 800d45a:	4649      	mov	r1, r9
 800d45c:	2300      	movs	r3, #0
 800d45e:	220a      	movs	r2, #10
 800d460:	4658      	mov	r0, fp
 800d462:	f000 fc6b 	bl	800dd3c <__multadd>
 800d466:	42af      	cmp	r7, r5
 800d468:	4681      	mov	r9, r0
 800d46a:	f04f 0300 	mov.w	r3, #0
 800d46e:	f04f 020a 	mov.w	r2, #10
 800d472:	4639      	mov	r1, r7
 800d474:	4658      	mov	r0, fp
 800d476:	d107      	bne.n	800d488 <_dtoa_r+0xac8>
 800d478:	f000 fc60 	bl	800dd3c <__multadd>
 800d47c:	4607      	mov	r7, r0
 800d47e:	4605      	mov	r5, r0
 800d480:	9b07      	ldr	r3, [sp, #28]
 800d482:	3301      	adds	r3, #1
 800d484:	9307      	str	r3, [sp, #28]
 800d486:	e774      	b.n	800d372 <_dtoa_r+0x9b2>
 800d488:	f000 fc58 	bl	800dd3c <__multadd>
 800d48c:	4629      	mov	r1, r5
 800d48e:	4607      	mov	r7, r0
 800d490:	2300      	movs	r3, #0
 800d492:	220a      	movs	r2, #10
 800d494:	4658      	mov	r0, fp
 800d496:	f000 fc51 	bl	800dd3c <__multadd>
 800d49a:	4605      	mov	r5, r0
 800d49c:	e7f0      	b.n	800d480 <_dtoa_r+0xac0>
 800d49e:	9b08      	ldr	r3, [sp, #32]
 800d4a0:	2700      	movs	r7, #0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	bfcc      	ite	gt
 800d4a6:	461e      	movgt	r6, r3
 800d4a8:	2601      	movle	r6, #1
 800d4aa:	4456      	add	r6, sl
 800d4ac:	4649      	mov	r1, r9
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	4658      	mov	r0, fp
 800d4b2:	f000 fe37 	bl	800e124 <__lshift>
 800d4b6:	4621      	mov	r1, r4
 800d4b8:	4681      	mov	r9, r0
 800d4ba:	f000 fe9f 	bl	800e1fc <__mcmp>
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	dcb0      	bgt.n	800d424 <_dtoa_r+0xa64>
 800d4c2:	d102      	bne.n	800d4ca <_dtoa_r+0xb0a>
 800d4c4:	f018 0f01 	tst.w	r8, #1
 800d4c8:	d1ac      	bne.n	800d424 <_dtoa_r+0xa64>
 800d4ca:	4633      	mov	r3, r6
 800d4cc:	461e      	mov	r6, r3
 800d4ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d4d2:	2a30      	cmp	r2, #48	@ 0x30
 800d4d4:	d0fa      	beq.n	800d4cc <_dtoa_r+0xb0c>
 800d4d6:	e5be      	b.n	800d056 <_dtoa_r+0x696>
 800d4d8:	459a      	cmp	sl, r3
 800d4da:	d1a4      	bne.n	800d426 <_dtoa_r+0xa66>
 800d4dc:	9b04      	ldr	r3, [sp, #16]
 800d4de:	3301      	adds	r3, #1
 800d4e0:	9304      	str	r3, [sp, #16]
 800d4e2:	2331      	movs	r3, #49	@ 0x31
 800d4e4:	f88a 3000 	strb.w	r3, [sl]
 800d4e8:	e5b5      	b.n	800d056 <_dtoa_r+0x696>
 800d4ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d4ec:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d54c <_dtoa_r+0xb8c>
 800d4f0:	b11b      	cbz	r3, 800d4fa <_dtoa_r+0xb3a>
 800d4f2:	f10a 0308 	add.w	r3, sl, #8
 800d4f6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d4f8:	6013      	str	r3, [r2, #0]
 800d4fa:	4650      	mov	r0, sl
 800d4fc:	b017      	add	sp, #92	@ 0x5c
 800d4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d502:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d504:	2b01      	cmp	r3, #1
 800d506:	f77f ae3d 	ble.w	800d184 <_dtoa_r+0x7c4>
 800d50a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d50c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d50e:	2001      	movs	r0, #1
 800d510:	e65b      	b.n	800d1ca <_dtoa_r+0x80a>
 800d512:	9b08      	ldr	r3, [sp, #32]
 800d514:	2b00      	cmp	r3, #0
 800d516:	f77f aed6 	ble.w	800d2c6 <_dtoa_r+0x906>
 800d51a:	4656      	mov	r6, sl
 800d51c:	4621      	mov	r1, r4
 800d51e:	4648      	mov	r0, r9
 800d520:	f7ff f9c6 	bl	800c8b0 <quorem>
 800d524:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d528:	9b08      	ldr	r3, [sp, #32]
 800d52a:	f806 8b01 	strb.w	r8, [r6], #1
 800d52e:	eba6 020a 	sub.w	r2, r6, sl
 800d532:	4293      	cmp	r3, r2
 800d534:	ddb3      	ble.n	800d49e <_dtoa_r+0xade>
 800d536:	4649      	mov	r1, r9
 800d538:	2300      	movs	r3, #0
 800d53a:	220a      	movs	r2, #10
 800d53c:	4658      	mov	r0, fp
 800d53e:	f000 fbfd 	bl	800dd3c <__multadd>
 800d542:	4681      	mov	r9, r0
 800d544:	e7ea      	b.n	800d51c <_dtoa_r+0xb5c>
 800d546:	bf00      	nop
 800d548:	0800fbc2 	.word	0x0800fbc2
 800d54c:	0800fb46 	.word	0x0800fb46

0800d550 <_free_r>:
 800d550:	b538      	push	{r3, r4, r5, lr}
 800d552:	4605      	mov	r5, r0
 800d554:	2900      	cmp	r1, #0
 800d556:	d040      	beq.n	800d5da <_free_r+0x8a>
 800d558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d55c:	1f0c      	subs	r4, r1, #4
 800d55e:	2b00      	cmp	r3, #0
 800d560:	bfb8      	it	lt
 800d562:	18e4      	addlt	r4, r4, r3
 800d564:	f7fd f902 	bl	800a76c <__malloc_lock>
 800d568:	4a1c      	ldr	r2, [pc, #112]	@ (800d5dc <_free_r+0x8c>)
 800d56a:	6813      	ldr	r3, [r2, #0]
 800d56c:	b933      	cbnz	r3, 800d57c <_free_r+0x2c>
 800d56e:	6063      	str	r3, [r4, #4]
 800d570:	6014      	str	r4, [r2, #0]
 800d572:	4628      	mov	r0, r5
 800d574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d578:	f7fd b8fe 	b.w	800a778 <__malloc_unlock>
 800d57c:	42a3      	cmp	r3, r4
 800d57e:	d908      	bls.n	800d592 <_free_r+0x42>
 800d580:	6820      	ldr	r0, [r4, #0]
 800d582:	1821      	adds	r1, r4, r0
 800d584:	428b      	cmp	r3, r1
 800d586:	bf01      	itttt	eq
 800d588:	6819      	ldreq	r1, [r3, #0]
 800d58a:	685b      	ldreq	r3, [r3, #4]
 800d58c:	1809      	addeq	r1, r1, r0
 800d58e:	6021      	streq	r1, [r4, #0]
 800d590:	e7ed      	b.n	800d56e <_free_r+0x1e>
 800d592:	461a      	mov	r2, r3
 800d594:	685b      	ldr	r3, [r3, #4]
 800d596:	b10b      	cbz	r3, 800d59c <_free_r+0x4c>
 800d598:	42a3      	cmp	r3, r4
 800d59a:	d9fa      	bls.n	800d592 <_free_r+0x42>
 800d59c:	6811      	ldr	r1, [r2, #0]
 800d59e:	1850      	adds	r0, r2, r1
 800d5a0:	42a0      	cmp	r0, r4
 800d5a2:	d10b      	bne.n	800d5bc <_free_r+0x6c>
 800d5a4:	6820      	ldr	r0, [r4, #0]
 800d5a6:	4401      	add	r1, r0
 800d5a8:	1850      	adds	r0, r2, r1
 800d5aa:	4283      	cmp	r3, r0
 800d5ac:	6011      	str	r1, [r2, #0]
 800d5ae:	d1e0      	bne.n	800d572 <_free_r+0x22>
 800d5b0:	6818      	ldr	r0, [r3, #0]
 800d5b2:	685b      	ldr	r3, [r3, #4]
 800d5b4:	4408      	add	r0, r1
 800d5b6:	6010      	str	r0, [r2, #0]
 800d5b8:	6053      	str	r3, [r2, #4]
 800d5ba:	e7da      	b.n	800d572 <_free_r+0x22>
 800d5bc:	d902      	bls.n	800d5c4 <_free_r+0x74>
 800d5be:	230c      	movs	r3, #12
 800d5c0:	602b      	str	r3, [r5, #0]
 800d5c2:	e7d6      	b.n	800d572 <_free_r+0x22>
 800d5c4:	6820      	ldr	r0, [r4, #0]
 800d5c6:	1821      	adds	r1, r4, r0
 800d5c8:	428b      	cmp	r3, r1
 800d5ca:	bf01      	itttt	eq
 800d5cc:	6819      	ldreq	r1, [r3, #0]
 800d5ce:	685b      	ldreq	r3, [r3, #4]
 800d5d0:	1809      	addeq	r1, r1, r0
 800d5d2:	6021      	streq	r1, [r4, #0]
 800d5d4:	6063      	str	r3, [r4, #4]
 800d5d6:	6054      	str	r4, [r2, #4]
 800d5d8:	e7cb      	b.n	800d572 <_free_r+0x22>
 800d5da:	bd38      	pop	{r3, r4, r5, pc}
 800d5dc:	20000bc8 	.word	0x20000bc8

0800d5e0 <rshift>:
 800d5e0:	6903      	ldr	r3, [r0, #16]
 800d5e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d5e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d5ea:	f100 0414 	add.w	r4, r0, #20
 800d5ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d5f2:	dd46      	ble.n	800d682 <rshift+0xa2>
 800d5f4:	f011 011f 	ands.w	r1, r1, #31
 800d5f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d5fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d600:	d10c      	bne.n	800d61c <rshift+0x3c>
 800d602:	4629      	mov	r1, r5
 800d604:	f100 0710 	add.w	r7, r0, #16
 800d608:	42b1      	cmp	r1, r6
 800d60a:	d335      	bcc.n	800d678 <rshift+0x98>
 800d60c:	1a9b      	subs	r3, r3, r2
 800d60e:	009b      	lsls	r3, r3, #2
 800d610:	1eea      	subs	r2, r5, #3
 800d612:	4296      	cmp	r6, r2
 800d614:	bf38      	it	cc
 800d616:	2300      	movcc	r3, #0
 800d618:	4423      	add	r3, r4
 800d61a:	e015      	b.n	800d648 <rshift+0x68>
 800d61c:	46a1      	mov	r9, r4
 800d61e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d622:	f1c1 0820 	rsb	r8, r1, #32
 800d626:	40cf      	lsrs	r7, r1
 800d628:	f105 0e04 	add.w	lr, r5, #4
 800d62c:	4576      	cmp	r6, lr
 800d62e:	46f4      	mov	ip, lr
 800d630:	d816      	bhi.n	800d660 <rshift+0x80>
 800d632:	1a9a      	subs	r2, r3, r2
 800d634:	0092      	lsls	r2, r2, #2
 800d636:	3a04      	subs	r2, #4
 800d638:	3501      	adds	r5, #1
 800d63a:	42ae      	cmp	r6, r5
 800d63c:	bf38      	it	cc
 800d63e:	2200      	movcc	r2, #0
 800d640:	18a3      	adds	r3, r4, r2
 800d642:	50a7      	str	r7, [r4, r2]
 800d644:	b107      	cbz	r7, 800d648 <rshift+0x68>
 800d646:	3304      	adds	r3, #4
 800d648:	42a3      	cmp	r3, r4
 800d64a:	eba3 0204 	sub.w	r2, r3, r4
 800d64e:	bf08      	it	eq
 800d650:	2300      	moveq	r3, #0
 800d652:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d656:	6102      	str	r2, [r0, #16]
 800d658:	bf08      	it	eq
 800d65a:	6143      	streq	r3, [r0, #20]
 800d65c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d660:	f8dc c000 	ldr.w	ip, [ip]
 800d664:	fa0c fc08 	lsl.w	ip, ip, r8
 800d668:	ea4c 0707 	orr.w	r7, ip, r7
 800d66c:	f849 7b04 	str.w	r7, [r9], #4
 800d670:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d674:	40cf      	lsrs	r7, r1
 800d676:	e7d9      	b.n	800d62c <rshift+0x4c>
 800d678:	f851 cb04 	ldr.w	ip, [r1], #4
 800d67c:	f847 cf04 	str.w	ip, [r7, #4]!
 800d680:	e7c2      	b.n	800d608 <rshift+0x28>
 800d682:	4623      	mov	r3, r4
 800d684:	e7e0      	b.n	800d648 <rshift+0x68>

0800d686 <__hexdig_fun>:
 800d686:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d68a:	2b09      	cmp	r3, #9
 800d68c:	d802      	bhi.n	800d694 <__hexdig_fun+0xe>
 800d68e:	3820      	subs	r0, #32
 800d690:	b2c0      	uxtb	r0, r0
 800d692:	4770      	bx	lr
 800d694:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d698:	2b05      	cmp	r3, #5
 800d69a:	d801      	bhi.n	800d6a0 <__hexdig_fun+0x1a>
 800d69c:	3847      	subs	r0, #71	@ 0x47
 800d69e:	e7f7      	b.n	800d690 <__hexdig_fun+0xa>
 800d6a0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d6a4:	2b05      	cmp	r3, #5
 800d6a6:	d801      	bhi.n	800d6ac <__hexdig_fun+0x26>
 800d6a8:	3827      	subs	r0, #39	@ 0x27
 800d6aa:	e7f1      	b.n	800d690 <__hexdig_fun+0xa>
 800d6ac:	2000      	movs	r0, #0
 800d6ae:	4770      	bx	lr

0800d6b0 <__gethex>:
 800d6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b4:	468a      	mov	sl, r1
 800d6b6:	4690      	mov	r8, r2
 800d6b8:	b085      	sub	sp, #20
 800d6ba:	9302      	str	r3, [sp, #8]
 800d6bc:	680b      	ldr	r3, [r1, #0]
 800d6be:	9001      	str	r0, [sp, #4]
 800d6c0:	1c9c      	adds	r4, r3, #2
 800d6c2:	46a1      	mov	r9, r4
 800d6c4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d6c8:	2830      	cmp	r0, #48	@ 0x30
 800d6ca:	d0fa      	beq.n	800d6c2 <__gethex+0x12>
 800d6cc:	eba9 0303 	sub.w	r3, r9, r3
 800d6d0:	f1a3 0b02 	sub.w	fp, r3, #2
 800d6d4:	f7ff ffd7 	bl	800d686 <__hexdig_fun>
 800d6d8:	4605      	mov	r5, r0
 800d6da:	2800      	cmp	r0, #0
 800d6dc:	d168      	bne.n	800d7b0 <__gethex+0x100>
 800d6de:	2201      	movs	r2, #1
 800d6e0:	4648      	mov	r0, r9
 800d6e2:	499f      	ldr	r1, [pc, #636]	@ (800d960 <__gethex+0x2b0>)
 800d6e4:	f7fe ffde 	bl	800c6a4 <strncmp>
 800d6e8:	4607      	mov	r7, r0
 800d6ea:	2800      	cmp	r0, #0
 800d6ec:	d167      	bne.n	800d7be <__gethex+0x10e>
 800d6ee:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d6f2:	4626      	mov	r6, r4
 800d6f4:	f7ff ffc7 	bl	800d686 <__hexdig_fun>
 800d6f8:	2800      	cmp	r0, #0
 800d6fa:	d062      	beq.n	800d7c2 <__gethex+0x112>
 800d6fc:	4623      	mov	r3, r4
 800d6fe:	7818      	ldrb	r0, [r3, #0]
 800d700:	4699      	mov	r9, r3
 800d702:	2830      	cmp	r0, #48	@ 0x30
 800d704:	f103 0301 	add.w	r3, r3, #1
 800d708:	d0f9      	beq.n	800d6fe <__gethex+0x4e>
 800d70a:	f7ff ffbc 	bl	800d686 <__hexdig_fun>
 800d70e:	fab0 f580 	clz	r5, r0
 800d712:	f04f 0b01 	mov.w	fp, #1
 800d716:	096d      	lsrs	r5, r5, #5
 800d718:	464a      	mov	r2, r9
 800d71a:	4616      	mov	r6, r2
 800d71c:	7830      	ldrb	r0, [r6, #0]
 800d71e:	3201      	adds	r2, #1
 800d720:	f7ff ffb1 	bl	800d686 <__hexdig_fun>
 800d724:	2800      	cmp	r0, #0
 800d726:	d1f8      	bne.n	800d71a <__gethex+0x6a>
 800d728:	2201      	movs	r2, #1
 800d72a:	4630      	mov	r0, r6
 800d72c:	498c      	ldr	r1, [pc, #560]	@ (800d960 <__gethex+0x2b0>)
 800d72e:	f7fe ffb9 	bl	800c6a4 <strncmp>
 800d732:	2800      	cmp	r0, #0
 800d734:	d13f      	bne.n	800d7b6 <__gethex+0x106>
 800d736:	b944      	cbnz	r4, 800d74a <__gethex+0x9a>
 800d738:	1c74      	adds	r4, r6, #1
 800d73a:	4622      	mov	r2, r4
 800d73c:	4616      	mov	r6, r2
 800d73e:	7830      	ldrb	r0, [r6, #0]
 800d740:	3201      	adds	r2, #1
 800d742:	f7ff ffa0 	bl	800d686 <__hexdig_fun>
 800d746:	2800      	cmp	r0, #0
 800d748:	d1f8      	bne.n	800d73c <__gethex+0x8c>
 800d74a:	1ba4      	subs	r4, r4, r6
 800d74c:	00a7      	lsls	r7, r4, #2
 800d74e:	7833      	ldrb	r3, [r6, #0]
 800d750:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d754:	2b50      	cmp	r3, #80	@ 0x50
 800d756:	d13e      	bne.n	800d7d6 <__gethex+0x126>
 800d758:	7873      	ldrb	r3, [r6, #1]
 800d75a:	2b2b      	cmp	r3, #43	@ 0x2b
 800d75c:	d033      	beq.n	800d7c6 <__gethex+0x116>
 800d75e:	2b2d      	cmp	r3, #45	@ 0x2d
 800d760:	d034      	beq.n	800d7cc <__gethex+0x11c>
 800d762:	2400      	movs	r4, #0
 800d764:	1c71      	adds	r1, r6, #1
 800d766:	7808      	ldrb	r0, [r1, #0]
 800d768:	f7ff ff8d 	bl	800d686 <__hexdig_fun>
 800d76c:	1e43      	subs	r3, r0, #1
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	2b18      	cmp	r3, #24
 800d772:	d830      	bhi.n	800d7d6 <__gethex+0x126>
 800d774:	f1a0 0210 	sub.w	r2, r0, #16
 800d778:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d77c:	f7ff ff83 	bl	800d686 <__hexdig_fun>
 800d780:	f100 3cff 	add.w	ip, r0, #4294967295
 800d784:	fa5f fc8c 	uxtb.w	ip, ip
 800d788:	f1bc 0f18 	cmp.w	ip, #24
 800d78c:	f04f 030a 	mov.w	r3, #10
 800d790:	d91e      	bls.n	800d7d0 <__gethex+0x120>
 800d792:	b104      	cbz	r4, 800d796 <__gethex+0xe6>
 800d794:	4252      	negs	r2, r2
 800d796:	4417      	add	r7, r2
 800d798:	f8ca 1000 	str.w	r1, [sl]
 800d79c:	b1ed      	cbz	r5, 800d7da <__gethex+0x12a>
 800d79e:	f1bb 0f00 	cmp.w	fp, #0
 800d7a2:	bf0c      	ite	eq
 800d7a4:	2506      	moveq	r5, #6
 800d7a6:	2500      	movne	r5, #0
 800d7a8:	4628      	mov	r0, r5
 800d7aa:	b005      	add	sp, #20
 800d7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7b0:	2500      	movs	r5, #0
 800d7b2:	462c      	mov	r4, r5
 800d7b4:	e7b0      	b.n	800d718 <__gethex+0x68>
 800d7b6:	2c00      	cmp	r4, #0
 800d7b8:	d1c7      	bne.n	800d74a <__gethex+0x9a>
 800d7ba:	4627      	mov	r7, r4
 800d7bc:	e7c7      	b.n	800d74e <__gethex+0x9e>
 800d7be:	464e      	mov	r6, r9
 800d7c0:	462f      	mov	r7, r5
 800d7c2:	2501      	movs	r5, #1
 800d7c4:	e7c3      	b.n	800d74e <__gethex+0x9e>
 800d7c6:	2400      	movs	r4, #0
 800d7c8:	1cb1      	adds	r1, r6, #2
 800d7ca:	e7cc      	b.n	800d766 <__gethex+0xb6>
 800d7cc:	2401      	movs	r4, #1
 800d7ce:	e7fb      	b.n	800d7c8 <__gethex+0x118>
 800d7d0:	fb03 0002 	mla	r0, r3, r2, r0
 800d7d4:	e7ce      	b.n	800d774 <__gethex+0xc4>
 800d7d6:	4631      	mov	r1, r6
 800d7d8:	e7de      	b.n	800d798 <__gethex+0xe8>
 800d7da:	4629      	mov	r1, r5
 800d7dc:	eba6 0309 	sub.w	r3, r6, r9
 800d7e0:	3b01      	subs	r3, #1
 800d7e2:	2b07      	cmp	r3, #7
 800d7e4:	dc0a      	bgt.n	800d7fc <__gethex+0x14c>
 800d7e6:	9801      	ldr	r0, [sp, #4]
 800d7e8:	f000 fa46 	bl	800dc78 <_Balloc>
 800d7ec:	4604      	mov	r4, r0
 800d7ee:	b940      	cbnz	r0, 800d802 <__gethex+0x152>
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	21e4      	movs	r1, #228	@ 0xe4
 800d7f4:	4b5b      	ldr	r3, [pc, #364]	@ (800d964 <__gethex+0x2b4>)
 800d7f6:	485c      	ldr	r0, [pc, #368]	@ (800d968 <__gethex+0x2b8>)
 800d7f8:	f001 face 	bl	800ed98 <__assert_func>
 800d7fc:	3101      	adds	r1, #1
 800d7fe:	105b      	asrs	r3, r3, #1
 800d800:	e7ef      	b.n	800d7e2 <__gethex+0x132>
 800d802:	2300      	movs	r3, #0
 800d804:	f100 0a14 	add.w	sl, r0, #20
 800d808:	4655      	mov	r5, sl
 800d80a:	469b      	mov	fp, r3
 800d80c:	45b1      	cmp	r9, r6
 800d80e:	d337      	bcc.n	800d880 <__gethex+0x1d0>
 800d810:	f845 bb04 	str.w	fp, [r5], #4
 800d814:	eba5 050a 	sub.w	r5, r5, sl
 800d818:	10ad      	asrs	r5, r5, #2
 800d81a:	6125      	str	r5, [r4, #16]
 800d81c:	4658      	mov	r0, fp
 800d81e:	f000 fb1d 	bl	800de5c <__hi0bits>
 800d822:	016d      	lsls	r5, r5, #5
 800d824:	f8d8 6000 	ldr.w	r6, [r8]
 800d828:	1a2d      	subs	r5, r5, r0
 800d82a:	42b5      	cmp	r5, r6
 800d82c:	dd54      	ble.n	800d8d8 <__gethex+0x228>
 800d82e:	1bad      	subs	r5, r5, r6
 800d830:	4629      	mov	r1, r5
 800d832:	4620      	mov	r0, r4
 800d834:	f000 fea5 	bl	800e582 <__any_on>
 800d838:	4681      	mov	r9, r0
 800d83a:	b178      	cbz	r0, 800d85c <__gethex+0x1ac>
 800d83c:	f04f 0901 	mov.w	r9, #1
 800d840:	1e6b      	subs	r3, r5, #1
 800d842:	1159      	asrs	r1, r3, #5
 800d844:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d848:	f003 021f 	and.w	r2, r3, #31
 800d84c:	fa09 f202 	lsl.w	r2, r9, r2
 800d850:	420a      	tst	r2, r1
 800d852:	d003      	beq.n	800d85c <__gethex+0x1ac>
 800d854:	454b      	cmp	r3, r9
 800d856:	dc36      	bgt.n	800d8c6 <__gethex+0x216>
 800d858:	f04f 0902 	mov.w	r9, #2
 800d85c:	4629      	mov	r1, r5
 800d85e:	4620      	mov	r0, r4
 800d860:	f7ff febe 	bl	800d5e0 <rshift>
 800d864:	442f      	add	r7, r5
 800d866:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d86a:	42bb      	cmp	r3, r7
 800d86c:	da42      	bge.n	800d8f4 <__gethex+0x244>
 800d86e:	4621      	mov	r1, r4
 800d870:	9801      	ldr	r0, [sp, #4]
 800d872:	f000 fa41 	bl	800dcf8 <_Bfree>
 800d876:	2300      	movs	r3, #0
 800d878:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d87a:	25a3      	movs	r5, #163	@ 0xa3
 800d87c:	6013      	str	r3, [r2, #0]
 800d87e:	e793      	b.n	800d7a8 <__gethex+0xf8>
 800d880:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d884:	2a2e      	cmp	r2, #46	@ 0x2e
 800d886:	d012      	beq.n	800d8ae <__gethex+0x1fe>
 800d888:	2b20      	cmp	r3, #32
 800d88a:	d104      	bne.n	800d896 <__gethex+0x1e6>
 800d88c:	f845 bb04 	str.w	fp, [r5], #4
 800d890:	f04f 0b00 	mov.w	fp, #0
 800d894:	465b      	mov	r3, fp
 800d896:	7830      	ldrb	r0, [r6, #0]
 800d898:	9303      	str	r3, [sp, #12]
 800d89a:	f7ff fef4 	bl	800d686 <__hexdig_fun>
 800d89e:	9b03      	ldr	r3, [sp, #12]
 800d8a0:	f000 000f 	and.w	r0, r0, #15
 800d8a4:	4098      	lsls	r0, r3
 800d8a6:	ea4b 0b00 	orr.w	fp, fp, r0
 800d8aa:	3304      	adds	r3, #4
 800d8ac:	e7ae      	b.n	800d80c <__gethex+0x15c>
 800d8ae:	45b1      	cmp	r9, r6
 800d8b0:	d8ea      	bhi.n	800d888 <__gethex+0x1d8>
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	4630      	mov	r0, r6
 800d8b6:	492a      	ldr	r1, [pc, #168]	@ (800d960 <__gethex+0x2b0>)
 800d8b8:	9303      	str	r3, [sp, #12]
 800d8ba:	f7fe fef3 	bl	800c6a4 <strncmp>
 800d8be:	9b03      	ldr	r3, [sp, #12]
 800d8c0:	2800      	cmp	r0, #0
 800d8c2:	d1e1      	bne.n	800d888 <__gethex+0x1d8>
 800d8c4:	e7a2      	b.n	800d80c <__gethex+0x15c>
 800d8c6:	4620      	mov	r0, r4
 800d8c8:	1ea9      	subs	r1, r5, #2
 800d8ca:	f000 fe5a 	bl	800e582 <__any_on>
 800d8ce:	2800      	cmp	r0, #0
 800d8d0:	d0c2      	beq.n	800d858 <__gethex+0x1a8>
 800d8d2:	f04f 0903 	mov.w	r9, #3
 800d8d6:	e7c1      	b.n	800d85c <__gethex+0x1ac>
 800d8d8:	da09      	bge.n	800d8ee <__gethex+0x23e>
 800d8da:	1b75      	subs	r5, r6, r5
 800d8dc:	4621      	mov	r1, r4
 800d8de:	462a      	mov	r2, r5
 800d8e0:	9801      	ldr	r0, [sp, #4]
 800d8e2:	f000 fc1f 	bl	800e124 <__lshift>
 800d8e6:	4604      	mov	r4, r0
 800d8e8:	1b7f      	subs	r7, r7, r5
 800d8ea:	f100 0a14 	add.w	sl, r0, #20
 800d8ee:	f04f 0900 	mov.w	r9, #0
 800d8f2:	e7b8      	b.n	800d866 <__gethex+0x1b6>
 800d8f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d8f8:	42bd      	cmp	r5, r7
 800d8fa:	dd6f      	ble.n	800d9dc <__gethex+0x32c>
 800d8fc:	1bed      	subs	r5, r5, r7
 800d8fe:	42ae      	cmp	r6, r5
 800d900:	dc34      	bgt.n	800d96c <__gethex+0x2bc>
 800d902:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d906:	2b02      	cmp	r3, #2
 800d908:	d022      	beq.n	800d950 <__gethex+0x2a0>
 800d90a:	2b03      	cmp	r3, #3
 800d90c:	d024      	beq.n	800d958 <__gethex+0x2a8>
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d115      	bne.n	800d93e <__gethex+0x28e>
 800d912:	42ae      	cmp	r6, r5
 800d914:	d113      	bne.n	800d93e <__gethex+0x28e>
 800d916:	2e01      	cmp	r6, #1
 800d918:	d10b      	bne.n	800d932 <__gethex+0x282>
 800d91a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d91e:	9a02      	ldr	r2, [sp, #8]
 800d920:	2562      	movs	r5, #98	@ 0x62
 800d922:	6013      	str	r3, [r2, #0]
 800d924:	2301      	movs	r3, #1
 800d926:	6123      	str	r3, [r4, #16]
 800d928:	f8ca 3000 	str.w	r3, [sl]
 800d92c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d92e:	601c      	str	r4, [r3, #0]
 800d930:	e73a      	b.n	800d7a8 <__gethex+0xf8>
 800d932:	4620      	mov	r0, r4
 800d934:	1e71      	subs	r1, r6, #1
 800d936:	f000 fe24 	bl	800e582 <__any_on>
 800d93a:	2800      	cmp	r0, #0
 800d93c:	d1ed      	bne.n	800d91a <__gethex+0x26a>
 800d93e:	4621      	mov	r1, r4
 800d940:	9801      	ldr	r0, [sp, #4]
 800d942:	f000 f9d9 	bl	800dcf8 <_Bfree>
 800d946:	2300      	movs	r3, #0
 800d948:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d94a:	2550      	movs	r5, #80	@ 0x50
 800d94c:	6013      	str	r3, [r2, #0]
 800d94e:	e72b      	b.n	800d7a8 <__gethex+0xf8>
 800d950:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d952:	2b00      	cmp	r3, #0
 800d954:	d1f3      	bne.n	800d93e <__gethex+0x28e>
 800d956:	e7e0      	b.n	800d91a <__gethex+0x26a>
 800d958:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d1dd      	bne.n	800d91a <__gethex+0x26a>
 800d95e:	e7ee      	b.n	800d93e <__gethex+0x28e>
 800d960:	0800f052 	.word	0x0800f052
 800d964:	0800fbc2 	.word	0x0800fbc2
 800d968:	0800fbd3 	.word	0x0800fbd3
 800d96c:	1e6f      	subs	r7, r5, #1
 800d96e:	f1b9 0f00 	cmp.w	r9, #0
 800d972:	d130      	bne.n	800d9d6 <__gethex+0x326>
 800d974:	b127      	cbz	r7, 800d980 <__gethex+0x2d0>
 800d976:	4639      	mov	r1, r7
 800d978:	4620      	mov	r0, r4
 800d97a:	f000 fe02 	bl	800e582 <__any_on>
 800d97e:	4681      	mov	r9, r0
 800d980:	2301      	movs	r3, #1
 800d982:	4629      	mov	r1, r5
 800d984:	1b76      	subs	r6, r6, r5
 800d986:	2502      	movs	r5, #2
 800d988:	117a      	asrs	r2, r7, #5
 800d98a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d98e:	f007 071f 	and.w	r7, r7, #31
 800d992:	40bb      	lsls	r3, r7
 800d994:	4213      	tst	r3, r2
 800d996:	4620      	mov	r0, r4
 800d998:	bf18      	it	ne
 800d99a:	f049 0902 	orrne.w	r9, r9, #2
 800d99e:	f7ff fe1f 	bl	800d5e0 <rshift>
 800d9a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d9a6:	f1b9 0f00 	cmp.w	r9, #0
 800d9aa:	d047      	beq.n	800da3c <__gethex+0x38c>
 800d9ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d9b0:	2b02      	cmp	r3, #2
 800d9b2:	d015      	beq.n	800d9e0 <__gethex+0x330>
 800d9b4:	2b03      	cmp	r3, #3
 800d9b6:	d017      	beq.n	800d9e8 <__gethex+0x338>
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d109      	bne.n	800d9d0 <__gethex+0x320>
 800d9bc:	f019 0f02 	tst.w	r9, #2
 800d9c0:	d006      	beq.n	800d9d0 <__gethex+0x320>
 800d9c2:	f8da 3000 	ldr.w	r3, [sl]
 800d9c6:	ea49 0903 	orr.w	r9, r9, r3
 800d9ca:	f019 0f01 	tst.w	r9, #1
 800d9ce:	d10e      	bne.n	800d9ee <__gethex+0x33e>
 800d9d0:	f045 0510 	orr.w	r5, r5, #16
 800d9d4:	e032      	b.n	800da3c <__gethex+0x38c>
 800d9d6:	f04f 0901 	mov.w	r9, #1
 800d9da:	e7d1      	b.n	800d980 <__gethex+0x2d0>
 800d9dc:	2501      	movs	r5, #1
 800d9de:	e7e2      	b.n	800d9a6 <__gethex+0x2f6>
 800d9e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9e2:	f1c3 0301 	rsb	r3, r3, #1
 800d9e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d9e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d0f0      	beq.n	800d9d0 <__gethex+0x320>
 800d9ee:	f04f 0c00 	mov.w	ip, #0
 800d9f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d9f6:	f104 0314 	add.w	r3, r4, #20
 800d9fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d9fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800da02:	4618      	mov	r0, r3
 800da04:	f853 2b04 	ldr.w	r2, [r3], #4
 800da08:	f1b2 3fff 	cmp.w	r2, #4294967295
 800da0c:	d01b      	beq.n	800da46 <__gethex+0x396>
 800da0e:	3201      	adds	r2, #1
 800da10:	6002      	str	r2, [r0, #0]
 800da12:	2d02      	cmp	r5, #2
 800da14:	f104 0314 	add.w	r3, r4, #20
 800da18:	d13c      	bne.n	800da94 <__gethex+0x3e4>
 800da1a:	f8d8 2000 	ldr.w	r2, [r8]
 800da1e:	3a01      	subs	r2, #1
 800da20:	42b2      	cmp	r2, r6
 800da22:	d109      	bne.n	800da38 <__gethex+0x388>
 800da24:	2201      	movs	r2, #1
 800da26:	1171      	asrs	r1, r6, #5
 800da28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800da2c:	f006 061f 	and.w	r6, r6, #31
 800da30:	fa02 f606 	lsl.w	r6, r2, r6
 800da34:	421e      	tst	r6, r3
 800da36:	d13a      	bne.n	800daae <__gethex+0x3fe>
 800da38:	f045 0520 	orr.w	r5, r5, #32
 800da3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da3e:	601c      	str	r4, [r3, #0]
 800da40:	9b02      	ldr	r3, [sp, #8]
 800da42:	601f      	str	r7, [r3, #0]
 800da44:	e6b0      	b.n	800d7a8 <__gethex+0xf8>
 800da46:	4299      	cmp	r1, r3
 800da48:	f843 cc04 	str.w	ip, [r3, #-4]
 800da4c:	d8d9      	bhi.n	800da02 <__gethex+0x352>
 800da4e:	68a3      	ldr	r3, [r4, #8]
 800da50:	459b      	cmp	fp, r3
 800da52:	db17      	blt.n	800da84 <__gethex+0x3d4>
 800da54:	6861      	ldr	r1, [r4, #4]
 800da56:	9801      	ldr	r0, [sp, #4]
 800da58:	3101      	adds	r1, #1
 800da5a:	f000 f90d 	bl	800dc78 <_Balloc>
 800da5e:	4681      	mov	r9, r0
 800da60:	b918      	cbnz	r0, 800da6a <__gethex+0x3ba>
 800da62:	4602      	mov	r2, r0
 800da64:	2184      	movs	r1, #132	@ 0x84
 800da66:	4b19      	ldr	r3, [pc, #100]	@ (800dacc <__gethex+0x41c>)
 800da68:	e6c5      	b.n	800d7f6 <__gethex+0x146>
 800da6a:	6922      	ldr	r2, [r4, #16]
 800da6c:	f104 010c 	add.w	r1, r4, #12
 800da70:	3202      	adds	r2, #2
 800da72:	0092      	lsls	r2, r2, #2
 800da74:	300c      	adds	r0, #12
 800da76:	f7fe ff02 	bl	800c87e <memcpy>
 800da7a:	4621      	mov	r1, r4
 800da7c:	9801      	ldr	r0, [sp, #4]
 800da7e:	f000 f93b 	bl	800dcf8 <_Bfree>
 800da82:	464c      	mov	r4, r9
 800da84:	6923      	ldr	r3, [r4, #16]
 800da86:	1c5a      	adds	r2, r3, #1
 800da88:	6122      	str	r2, [r4, #16]
 800da8a:	2201      	movs	r2, #1
 800da8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800da90:	615a      	str	r2, [r3, #20]
 800da92:	e7be      	b.n	800da12 <__gethex+0x362>
 800da94:	6922      	ldr	r2, [r4, #16]
 800da96:	455a      	cmp	r2, fp
 800da98:	dd0b      	ble.n	800dab2 <__gethex+0x402>
 800da9a:	2101      	movs	r1, #1
 800da9c:	4620      	mov	r0, r4
 800da9e:	f7ff fd9f 	bl	800d5e0 <rshift>
 800daa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800daa6:	3701      	adds	r7, #1
 800daa8:	42bb      	cmp	r3, r7
 800daaa:	f6ff aee0 	blt.w	800d86e <__gethex+0x1be>
 800daae:	2501      	movs	r5, #1
 800dab0:	e7c2      	b.n	800da38 <__gethex+0x388>
 800dab2:	f016 061f 	ands.w	r6, r6, #31
 800dab6:	d0fa      	beq.n	800daae <__gethex+0x3fe>
 800dab8:	4453      	add	r3, sl
 800daba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dabe:	f000 f9cd 	bl	800de5c <__hi0bits>
 800dac2:	f1c6 0620 	rsb	r6, r6, #32
 800dac6:	42b0      	cmp	r0, r6
 800dac8:	dbe7      	blt.n	800da9a <__gethex+0x3ea>
 800daca:	e7f0      	b.n	800daae <__gethex+0x3fe>
 800dacc:	0800fbc2 	.word	0x0800fbc2

0800dad0 <L_shift>:
 800dad0:	f1c2 0208 	rsb	r2, r2, #8
 800dad4:	0092      	lsls	r2, r2, #2
 800dad6:	b570      	push	{r4, r5, r6, lr}
 800dad8:	f1c2 0620 	rsb	r6, r2, #32
 800dadc:	6843      	ldr	r3, [r0, #4]
 800dade:	6804      	ldr	r4, [r0, #0]
 800dae0:	fa03 f506 	lsl.w	r5, r3, r6
 800dae4:	432c      	orrs	r4, r5
 800dae6:	40d3      	lsrs	r3, r2
 800dae8:	6004      	str	r4, [r0, #0]
 800daea:	f840 3f04 	str.w	r3, [r0, #4]!
 800daee:	4288      	cmp	r0, r1
 800daf0:	d3f4      	bcc.n	800dadc <L_shift+0xc>
 800daf2:	bd70      	pop	{r4, r5, r6, pc}

0800daf4 <__match>:
 800daf4:	b530      	push	{r4, r5, lr}
 800daf6:	6803      	ldr	r3, [r0, #0]
 800daf8:	3301      	adds	r3, #1
 800dafa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dafe:	b914      	cbnz	r4, 800db06 <__match+0x12>
 800db00:	6003      	str	r3, [r0, #0]
 800db02:	2001      	movs	r0, #1
 800db04:	bd30      	pop	{r4, r5, pc}
 800db06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db0a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800db0e:	2d19      	cmp	r5, #25
 800db10:	bf98      	it	ls
 800db12:	3220      	addls	r2, #32
 800db14:	42a2      	cmp	r2, r4
 800db16:	d0f0      	beq.n	800dafa <__match+0x6>
 800db18:	2000      	movs	r0, #0
 800db1a:	e7f3      	b.n	800db04 <__match+0x10>

0800db1c <__hexnan>:
 800db1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db20:	2500      	movs	r5, #0
 800db22:	680b      	ldr	r3, [r1, #0]
 800db24:	4682      	mov	sl, r0
 800db26:	115e      	asrs	r6, r3, #5
 800db28:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800db2c:	f013 031f 	ands.w	r3, r3, #31
 800db30:	bf18      	it	ne
 800db32:	3604      	addne	r6, #4
 800db34:	1f37      	subs	r7, r6, #4
 800db36:	4690      	mov	r8, r2
 800db38:	46b9      	mov	r9, r7
 800db3a:	463c      	mov	r4, r7
 800db3c:	46ab      	mov	fp, r5
 800db3e:	b087      	sub	sp, #28
 800db40:	6801      	ldr	r1, [r0, #0]
 800db42:	9301      	str	r3, [sp, #4]
 800db44:	f846 5c04 	str.w	r5, [r6, #-4]
 800db48:	9502      	str	r5, [sp, #8]
 800db4a:	784a      	ldrb	r2, [r1, #1]
 800db4c:	1c4b      	adds	r3, r1, #1
 800db4e:	9303      	str	r3, [sp, #12]
 800db50:	b342      	cbz	r2, 800dba4 <__hexnan+0x88>
 800db52:	4610      	mov	r0, r2
 800db54:	9105      	str	r1, [sp, #20]
 800db56:	9204      	str	r2, [sp, #16]
 800db58:	f7ff fd95 	bl	800d686 <__hexdig_fun>
 800db5c:	2800      	cmp	r0, #0
 800db5e:	d151      	bne.n	800dc04 <__hexnan+0xe8>
 800db60:	9a04      	ldr	r2, [sp, #16]
 800db62:	9905      	ldr	r1, [sp, #20]
 800db64:	2a20      	cmp	r2, #32
 800db66:	d818      	bhi.n	800db9a <__hexnan+0x7e>
 800db68:	9b02      	ldr	r3, [sp, #8]
 800db6a:	459b      	cmp	fp, r3
 800db6c:	dd13      	ble.n	800db96 <__hexnan+0x7a>
 800db6e:	454c      	cmp	r4, r9
 800db70:	d206      	bcs.n	800db80 <__hexnan+0x64>
 800db72:	2d07      	cmp	r5, #7
 800db74:	dc04      	bgt.n	800db80 <__hexnan+0x64>
 800db76:	462a      	mov	r2, r5
 800db78:	4649      	mov	r1, r9
 800db7a:	4620      	mov	r0, r4
 800db7c:	f7ff ffa8 	bl	800dad0 <L_shift>
 800db80:	4544      	cmp	r4, r8
 800db82:	d952      	bls.n	800dc2a <__hexnan+0x10e>
 800db84:	2300      	movs	r3, #0
 800db86:	f1a4 0904 	sub.w	r9, r4, #4
 800db8a:	f844 3c04 	str.w	r3, [r4, #-4]
 800db8e:	461d      	mov	r5, r3
 800db90:	464c      	mov	r4, r9
 800db92:	f8cd b008 	str.w	fp, [sp, #8]
 800db96:	9903      	ldr	r1, [sp, #12]
 800db98:	e7d7      	b.n	800db4a <__hexnan+0x2e>
 800db9a:	2a29      	cmp	r2, #41	@ 0x29
 800db9c:	d157      	bne.n	800dc4e <__hexnan+0x132>
 800db9e:	3102      	adds	r1, #2
 800dba0:	f8ca 1000 	str.w	r1, [sl]
 800dba4:	f1bb 0f00 	cmp.w	fp, #0
 800dba8:	d051      	beq.n	800dc4e <__hexnan+0x132>
 800dbaa:	454c      	cmp	r4, r9
 800dbac:	d206      	bcs.n	800dbbc <__hexnan+0xa0>
 800dbae:	2d07      	cmp	r5, #7
 800dbb0:	dc04      	bgt.n	800dbbc <__hexnan+0xa0>
 800dbb2:	462a      	mov	r2, r5
 800dbb4:	4649      	mov	r1, r9
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	f7ff ff8a 	bl	800dad0 <L_shift>
 800dbbc:	4544      	cmp	r4, r8
 800dbbe:	d936      	bls.n	800dc2e <__hexnan+0x112>
 800dbc0:	4623      	mov	r3, r4
 800dbc2:	f1a8 0204 	sub.w	r2, r8, #4
 800dbc6:	f853 1b04 	ldr.w	r1, [r3], #4
 800dbca:	429f      	cmp	r7, r3
 800dbcc:	f842 1f04 	str.w	r1, [r2, #4]!
 800dbd0:	d2f9      	bcs.n	800dbc6 <__hexnan+0xaa>
 800dbd2:	1b3b      	subs	r3, r7, r4
 800dbd4:	f023 0303 	bic.w	r3, r3, #3
 800dbd8:	3304      	adds	r3, #4
 800dbda:	3401      	adds	r4, #1
 800dbdc:	3e03      	subs	r6, #3
 800dbde:	42b4      	cmp	r4, r6
 800dbe0:	bf88      	it	hi
 800dbe2:	2304      	movhi	r3, #4
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	4443      	add	r3, r8
 800dbe8:	f843 2b04 	str.w	r2, [r3], #4
 800dbec:	429f      	cmp	r7, r3
 800dbee:	d2fb      	bcs.n	800dbe8 <__hexnan+0xcc>
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	b91b      	cbnz	r3, 800dbfc <__hexnan+0xe0>
 800dbf4:	4547      	cmp	r7, r8
 800dbf6:	d128      	bne.n	800dc4a <__hexnan+0x12e>
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	603b      	str	r3, [r7, #0]
 800dbfc:	2005      	movs	r0, #5
 800dbfe:	b007      	add	sp, #28
 800dc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc04:	3501      	adds	r5, #1
 800dc06:	2d08      	cmp	r5, #8
 800dc08:	f10b 0b01 	add.w	fp, fp, #1
 800dc0c:	dd06      	ble.n	800dc1c <__hexnan+0x100>
 800dc0e:	4544      	cmp	r4, r8
 800dc10:	d9c1      	bls.n	800db96 <__hexnan+0x7a>
 800dc12:	2300      	movs	r3, #0
 800dc14:	2501      	movs	r5, #1
 800dc16:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc1a:	3c04      	subs	r4, #4
 800dc1c:	6822      	ldr	r2, [r4, #0]
 800dc1e:	f000 000f 	and.w	r0, r0, #15
 800dc22:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dc26:	6020      	str	r0, [r4, #0]
 800dc28:	e7b5      	b.n	800db96 <__hexnan+0x7a>
 800dc2a:	2508      	movs	r5, #8
 800dc2c:	e7b3      	b.n	800db96 <__hexnan+0x7a>
 800dc2e:	9b01      	ldr	r3, [sp, #4]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d0dd      	beq.n	800dbf0 <__hexnan+0xd4>
 800dc34:	f04f 32ff 	mov.w	r2, #4294967295
 800dc38:	f1c3 0320 	rsb	r3, r3, #32
 800dc3c:	40da      	lsrs	r2, r3
 800dc3e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dc42:	4013      	ands	r3, r2
 800dc44:	f846 3c04 	str.w	r3, [r6, #-4]
 800dc48:	e7d2      	b.n	800dbf0 <__hexnan+0xd4>
 800dc4a:	3f04      	subs	r7, #4
 800dc4c:	e7d0      	b.n	800dbf0 <__hexnan+0xd4>
 800dc4e:	2004      	movs	r0, #4
 800dc50:	e7d5      	b.n	800dbfe <__hexnan+0xe2>

0800dc52 <__ascii_mbtowc>:
 800dc52:	b082      	sub	sp, #8
 800dc54:	b901      	cbnz	r1, 800dc58 <__ascii_mbtowc+0x6>
 800dc56:	a901      	add	r1, sp, #4
 800dc58:	b142      	cbz	r2, 800dc6c <__ascii_mbtowc+0x1a>
 800dc5a:	b14b      	cbz	r3, 800dc70 <__ascii_mbtowc+0x1e>
 800dc5c:	7813      	ldrb	r3, [r2, #0]
 800dc5e:	600b      	str	r3, [r1, #0]
 800dc60:	7812      	ldrb	r2, [r2, #0]
 800dc62:	1e10      	subs	r0, r2, #0
 800dc64:	bf18      	it	ne
 800dc66:	2001      	movne	r0, #1
 800dc68:	b002      	add	sp, #8
 800dc6a:	4770      	bx	lr
 800dc6c:	4610      	mov	r0, r2
 800dc6e:	e7fb      	b.n	800dc68 <__ascii_mbtowc+0x16>
 800dc70:	f06f 0001 	mvn.w	r0, #1
 800dc74:	e7f8      	b.n	800dc68 <__ascii_mbtowc+0x16>
	...

0800dc78 <_Balloc>:
 800dc78:	b570      	push	{r4, r5, r6, lr}
 800dc7a:	69c6      	ldr	r6, [r0, #28]
 800dc7c:	4604      	mov	r4, r0
 800dc7e:	460d      	mov	r5, r1
 800dc80:	b976      	cbnz	r6, 800dca0 <_Balloc+0x28>
 800dc82:	2010      	movs	r0, #16
 800dc84:	f7fc fcc0 	bl	800a608 <malloc>
 800dc88:	4602      	mov	r2, r0
 800dc8a:	61e0      	str	r0, [r4, #28]
 800dc8c:	b920      	cbnz	r0, 800dc98 <_Balloc+0x20>
 800dc8e:	216b      	movs	r1, #107	@ 0x6b
 800dc90:	4b17      	ldr	r3, [pc, #92]	@ (800dcf0 <_Balloc+0x78>)
 800dc92:	4818      	ldr	r0, [pc, #96]	@ (800dcf4 <_Balloc+0x7c>)
 800dc94:	f001 f880 	bl	800ed98 <__assert_func>
 800dc98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc9c:	6006      	str	r6, [r0, #0]
 800dc9e:	60c6      	str	r6, [r0, #12]
 800dca0:	69e6      	ldr	r6, [r4, #28]
 800dca2:	68f3      	ldr	r3, [r6, #12]
 800dca4:	b183      	cbz	r3, 800dcc8 <_Balloc+0x50>
 800dca6:	69e3      	ldr	r3, [r4, #28]
 800dca8:	68db      	ldr	r3, [r3, #12]
 800dcaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dcae:	b9b8      	cbnz	r0, 800dce0 <_Balloc+0x68>
 800dcb0:	2101      	movs	r1, #1
 800dcb2:	fa01 f605 	lsl.w	r6, r1, r5
 800dcb6:	1d72      	adds	r2, r6, #5
 800dcb8:	4620      	mov	r0, r4
 800dcba:	0092      	lsls	r2, r2, #2
 800dcbc:	f001 f88a 	bl	800edd4 <_calloc_r>
 800dcc0:	b160      	cbz	r0, 800dcdc <_Balloc+0x64>
 800dcc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dcc6:	e00e      	b.n	800dce6 <_Balloc+0x6e>
 800dcc8:	2221      	movs	r2, #33	@ 0x21
 800dcca:	2104      	movs	r1, #4
 800dccc:	4620      	mov	r0, r4
 800dcce:	f001 f881 	bl	800edd4 <_calloc_r>
 800dcd2:	69e3      	ldr	r3, [r4, #28]
 800dcd4:	60f0      	str	r0, [r6, #12]
 800dcd6:	68db      	ldr	r3, [r3, #12]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d1e4      	bne.n	800dca6 <_Balloc+0x2e>
 800dcdc:	2000      	movs	r0, #0
 800dcde:	bd70      	pop	{r4, r5, r6, pc}
 800dce0:	6802      	ldr	r2, [r0, #0]
 800dce2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dce6:	2300      	movs	r3, #0
 800dce8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dcec:	e7f7      	b.n	800dcde <_Balloc+0x66>
 800dcee:	bf00      	nop
 800dcf0:	0800fb53 	.word	0x0800fb53
 800dcf4:	0800fc33 	.word	0x0800fc33

0800dcf8 <_Bfree>:
 800dcf8:	b570      	push	{r4, r5, r6, lr}
 800dcfa:	69c6      	ldr	r6, [r0, #28]
 800dcfc:	4605      	mov	r5, r0
 800dcfe:	460c      	mov	r4, r1
 800dd00:	b976      	cbnz	r6, 800dd20 <_Bfree+0x28>
 800dd02:	2010      	movs	r0, #16
 800dd04:	f7fc fc80 	bl	800a608 <malloc>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	61e8      	str	r0, [r5, #28]
 800dd0c:	b920      	cbnz	r0, 800dd18 <_Bfree+0x20>
 800dd0e:	218f      	movs	r1, #143	@ 0x8f
 800dd10:	4b08      	ldr	r3, [pc, #32]	@ (800dd34 <_Bfree+0x3c>)
 800dd12:	4809      	ldr	r0, [pc, #36]	@ (800dd38 <_Bfree+0x40>)
 800dd14:	f001 f840 	bl	800ed98 <__assert_func>
 800dd18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd1c:	6006      	str	r6, [r0, #0]
 800dd1e:	60c6      	str	r6, [r0, #12]
 800dd20:	b13c      	cbz	r4, 800dd32 <_Bfree+0x3a>
 800dd22:	69eb      	ldr	r3, [r5, #28]
 800dd24:	6862      	ldr	r2, [r4, #4]
 800dd26:	68db      	ldr	r3, [r3, #12]
 800dd28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dd2c:	6021      	str	r1, [r4, #0]
 800dd2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dd32:	bd70      	pop	{r4, r5, r6, pc}
 800dd34:	0800fb53 	.word	0x0800fb53
 800dd38:	0800fc33 	.word	0x0800fc33

0800dd3c <__multadd>:
 800dd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd40:	4607      	mov	r7, r0
 800dd42:	460c      	mov	r4, r1
 800dd44:	461e      	mov	r6, r3
 800dd46:	2000      	movs	r0, #0
 800dd48:	690d      	ldr	r5, [r1, #16]
 800dd4a:	f101 0c14 	add.w	ip, r1, #20
 800dd4e:	f8dc 3000 	ldr.w	r3, [ip]
 800dd52:	3001      	adds	r0, #1
 800dd54:	b299      	uxth	r1, r3
 800dd56:	fb02 6101 	mla	r1, r2, r1, r6
 800dd5a:	0c1e      	lsrs	r6, r3, #16
 800dd5c:	0c0b      	lsrs	r3, r1, #16
 800dd5e:	fb02 3306 	mla	r3, r2, r6, r3
 800dd62:	b289      	uxth	r1, r1
 800dd64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dd68:	4285      	cmp	r5, r0
 800dd6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dd6e:	f84c 1b04 	str.w	r1, [ip], #4
 800dd72:	dcec      	bgt.n	800dd4e <__multadd+0x12>
 800dd74:	b30e      	cbz	r6, 800ddba <__multadd+0x7e>
 800dd76:	68a3      	ldr	r3, [r4, #8]
 800dd78:	42ab      	cmp	r3, r5
 800dd7a:	dc19      	bgt.n	800ddb0 <__multadd+0x74>
 800dd7c:	6861      	ldr	r1, [r4, #4]
 800dd7e:	4638      	mov	r0, r7
 800dd80:	3101      	adds	r1, #1
 800dd82:	f7ff ff79 	bl	800dc78 <_Balloc>
 800dd86:	4680      	mov	r8, r0
 800dd88:	b928      	cbnz	r0, 800dd96 <__multadd+0x5a>
 800dd8a:	4602      	mov	r2, r0
 800dd8c:	21ba      	movs	r1, #186	@ 0xba
 800dd8e:	4b0c      	ldr	r3, [pc, #48]	@ (800ddc0 <__multadd+0x84>)
 800dd90:	480c      	ldr	r0, [pc, #48]	@ (800ddc4 <__multadd+0x88>)
 800dd92:	f001 f801 	bl	800ed98 <__assert_func>
 800dd96:	6922      	ldr	r2, [r4, #16]
 800dd98:	f104 010c 	add.w	r1, r4, #12
 800dd9c:	3202      	adds	r2, #2
 800dd9e:	0092      	lsls	r2, r2, #2
 800dda0:	300c      	adds	r0, #12
 800dda2:	f7fe fd6c 	bl	800c87e <memcpy>
 800dda6:	4621      	mov	r1, r4
 800dda8:	4638      	mov	r0, r7
 800ddaa:	f7ff ffa5 	bl	800dcf8 <_Bfree>
 800ddae:	4644      	mov	r4, r8
 800ddb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ddb4:	3501      	adds	r5, #1
 800ddb6:	615e      	str	r6, [r3, #20]
 800ddb8:	6125      	str	r5, [r4, #16]
 800ddba:	4620      	mov	r0, r4
 800ddbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddc0:	0800fbc2 	.word	0x0800fbc2
 800ddc4:	0800fc33 	.word	0x0800fc33

0800ddc8 <__s2b>:
 800ddc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddcc:	4615      	mov	r5, r2
 800ddce:	2209      	movs	r2, #9
 800ddd0:	461f      	mov	r7, r3
 800ddd2:	3308      	adds	r3, #8
 800ddd4:	460c      	mov	r4, r1
 800ddd6:	fb93 f3f2 	sdiv	r3, r3, r2
 800ddda:	4606      	mov	r6, r0
 800dddc:	2201      	movs	r2, #1
 800ddde:	2100      	movs	r1, #0
 800dde0:	429a      	cmp	r2, r3
 800dde2:	db09      	blt.n	800ddf8 <__s2b+0x30>
 800dde4:	4630      	mov	r0, r6
 800dde6:	f7ff ff47 	bl	800dc78 <_Balloc>
 800ddea:	b940      	cbnz	r0, 800ddfe <__s2b+0x36>
 800ddec:	4602      	mov	r2, r0
 800ddee:	21d3      	movs	r1, #211	@ 0xd3
 800ddf0:	4b18      	ldr	r3, [pc, #96]	@ (800de54 <__s2b+0x8c>)
 800ddf2:	4819      	ldr	r0, [pc, #100]	@ (800de58 <__s2b+0x90>)
 800ddf4:	f000 ffd0 	bl	800ed98 <__assert_func>
 800ddf8:	0052      	lsls	r2, r2, #1
 800ddfa:	3101      	adds	r1, #1
 800ddfc:	e7f0      	b.n	800dde0 <__s2b+0x18>
 800ddfe:	9b08      	ldr	r3, [sp, #32]
 800de00:	2d09      	cmp	r5, #9
 800de02:	6143      	str	r3, [r0, #20]
 800de04:	f04f 0301 	mov.w	r3, #1
 800de08:	6103      	str	r3, [r0, #16]
 800de0a:	dd16      	ble.n	800de3a <__s2b+0x72>
 800de0c:	f104 0909 	add.w	r9, r4, #9
 800de10:	46c8      	mov	r8, r9
 800de12:	442c      	add	r4, r5
 800de14:	f818 3b01 	ldrb.w	r3, [r8], #1
 800de18:	4601      	mov	r1, r0
 800de1a:	220a      	movs	r2, #10
 800de1c:	4630      	mov	r0, r6
 800de1e:	3b30      	subs	r3, #48	@ 0x30
 800de20:	f7ff ff8c 	bl	800dd3c <__multadd>
 800de24:	45a0      	cmp	r8, r4
 800de26:	d1f5      	bne.n	800de14 <__s2b+0x4c>
 800de28:	f1a5 0408 	sub.w	r4, r5, #8
 800de2c:	444c      	add	r4, r9
 800de2e:	1b2d      	subs	r5, r5, r4
 800de30:	1963      	adds	r3, r4, r5
 800de32:	42bb      	cmp	r3, r7
 800de34:	db04      	blt.n	800de40 <__s2b+0x78>
 800de36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de3a:	2509      	movs	r5, #9
 800de3c:	340a      	adds	r4, #10
 800de3e:	e7f6      	b.n	800de2e <__s2b+0x66>
 800de40:	f814 3b01 	ldrb.w	r3, [r4], #1
 800de44:	4601      	mov	r1, r0
 800de46:	220a      	movs	r2, #10
 800de48:	4630      	mov	r0, r6
 800de4a:	3b30      	subs	r3, #48	@ 0x30
 800de4c:	f7ff ff76 	bl	800dd3c <__multadd>
 800de50:	e7ee      	b.n	800de30 <__s2b+0x68>
 800de52:	bf00      	nop
 800de54:	0800fbc2 	.word	0x0800fbc2
 800de58:	0800fc33 	.word	0x0800fc33

0800de5c <__hi0bits>:
 800de5c:	4603      	mov	r3, r0
 800de5e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800de62:	bf3a      	itte	cc
 800de64:	0403      	lslcc	r3, r0, #16
 800de66:	2010      	movcc	r0, #16
 800de68:	2000      	movcs	r0, #0
 800de6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800de6e:	bf3c      	itt	cc
 800de70:	021b      	lslcc	r3, r3, #8
 800de72:	3008      	addcc	r0, #8
 800de74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800de78:	bf3c      	itt	cc
 800de7a:	011b      	lslcc	r3, r3, #4
 800de7c:	3004      	addcc	r0, #4
 800de7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de82:	bf3c      	itt	cc
 800de84:	009b      	lslcc	r3, r3, #2
 800de86:	3002      	addcc	r0, #2
 800de88:	2b00      	cmp	r3, #0
 800de8a:	db05      	blt.n	800de98 <__hi0bits+0x3c>
 800de8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800de90:	f100 0001 	add.w	r0, r0, #1
 800de94:	bf08      	it	eq
 800de96:	2020      	moveq	r0, #32
 800de98:	4770      	bx	lr

0800de9a <__lo0bits>:
 800de9a:	6803      	ldr	r3, [r0, #0]
 800de9c:	4602      	mov	r2, r0
 800de9e:	f013 0007 	ands.w	r0, r3, #7
 800dea2:	d00b      	beq.n	800debc <__lo0bits+0x22>
 800dea4:	07d9      	lsls	r1, r3, #31
 800dea6:	d421      	bmi.n	800deec <__lo0bits+0x52>
 800dea8:	0798      	lsls	r0, r3, #30
 800deaa:	bf49      	itett	mi
 800deac:	085b      	lsrmi	r3, r3, #1
 800deae:	089b      	lsrpl	r3, r3, #2
 800deb0:	2001      	movmi	r0, #1
 800deb2:	6013      	strmi	r3, [r2, #0]
 800deb4:	bf5c      	itt	pl
 800deb6:	2002      	movpl	r0, #2
 800deb8:	6013      	strpl	r3, [r2, #0]
 800deba:	4770      	bx	lr
 800debc:	b299      	uxth	r1, r3
 800debe:	b909      	cbnz	r1, 800dec4 <__lo0bits+0x2a>
 800dec0:	2010      	movs	r0, #16
 800dec2:	0c1b      	lsrs	r3, r3, #16
 800dec4:	b2d9      	uxtb	r1, r3
 800dec6:	b909      	cbnz	r1, 800decc <__lo0bits+0x32>
 800dec8:	3008      	adds	r0, #8
 800deca:	0a1b      	lsrs	r3, r3, #8
 800decc:	0719      	lsls	r1, r3, #28
 800dece:	bf04      	itt	eq
 800ded0:	091b      	lsreq	r3, r3, #4
 800ded2:	3004      	addeq	r0, #4
 800ded4:	0799      	lsls	r1, r3, #30
 800ded6:	bf04      	itt	eq
 800ded8:	089b      	lsreq	r3, r3, #2
 800deda:	3002      	addeq	r0, #2
 800dedc:	07d9      	lsls	r1, r3, #31
 800dede:	d403      	bmi.n	800dee8 <__lo0bits+0x4e>
 800dee0:	085b      	lsrs	r3, r3, #1
 800dee2:	f100 0001 	add.w	r0, r0, #1
 800dee6:	d003      	beq.n	800def0 <__lo0bits+0x56>
 800dee8:	6013      	str	r3, [r2, #0]
 800deea:	4770      	bx	lr
 800deec:	2000      	movs	r0, #0
 800deee:	4770      	bx	lr
 800def0:	2020      	movs	r0, #32
 800def2:	4770      	bx	lr

0800def4 <__i2b>:
 800def4:	b510      	push	{r4, lr}
 800def6:	460c      	mov	r4, r1
 800def8:	2101      	movs	r1, #1
 800defa:	f7ff febd 	bl	800dc78 <_Balloc>
 800defe:	4602      	mov	r2, r0
 800df00:	b928      	cbnz	r0, 800df0e <__i2b+0x1a>
 800df02:	f240 1145 	movw	r1, #325	@ 0x145
 800df06:	4b04      	ldr	r3, [pc, #16]	@ (800df18 <__i2b+0x24>)
 800df08:	4804      	ldr	r0, [pc, #16]	@ (800df1c <__i2b+0x28>)
 800df0a:	f000 ff45 	bl	800ed98 <__assert_func>
 800df0e:	2301      	movs	r3, #1
 800df10:	6144      	str	r4, [r0, #20]
 800df12:	6103      	str	r3, [r0, #16]
 800df14:	bd10      	pop	{r4, pc}
 800df16:	bf00      	nop
 800df18:	0800fbc2 	.word	0x0800fbc2
 800df1c:	0800fc33 	.word	0x0800fc33

0800df20 <__multiply>:
 800df20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df24:	4614      	mov	r4, r2
 800df26:	690a      	ldr	r2, [r1, #16]
 800df28:	6923      	ldr	r3, [r4, #16]
 800df2a:	460f      	mov	r7, r1
 800df2c:	429a      	cmp	r2, r3
 800df2e:	bfa2      	ittt	ge
 800df30:	4623      	movge	r3, r4
 800df32:	460c      	movge	r4, r1
 800df34:	461f      	movge	r7, r3
 800df36:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800df3a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800df3e:	68a3      	ldr	r3, [r4, #8]
 800df40:	6861      	ldr	r1, [r4, #4]
 800df42:	eb0a 0609 	add.w	r6, sl, r9
 800df46:	42b3      	cmp	r3, r6
 800df48:	b085      	sub	sp, #20
 800df4a:	bfb8      	it	lt
 800df4c:	3101      	addlt	r1, #1
 800df4e:	f7ff fe93 	bl	800dc78 <_Balloc>
 800df52:	b930      	cbnz	r0, 800df62 <__multiply+0x42>
 800df54:	4602      	mov	r2, r0
 800df56:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800df5a:	4b43      	ldr	r3, [pc, #268]	@ (800e068 <__multiply+0x148>)
 800df5c:	4843      	ldr	r0, [pc, #268]	@ (800e06c <__multiply+0x14c>)
 800df5e:	f000 ff1b 	bl	800ed98 <__assert_func>
 800df62:	f100 0514 	add.w	r5, r0, #20
 800df66:	462b      	mov	r3, r5
 800df68:	2200      	movs	r2, #0
 800df6a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800df6e:	4543      	cmp	r3, r8
 800df70:	d321      	bcc.n	800dfb6 <__multiply+0x96>
 800df72:	f107 0114 	add.w	r1, r7, #20
 800df76:	f104 0214 	add.w	r2, r4, #20
 800df7a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800df7e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800df82:	9302      	str	r3, [sp, #8]
 800df84:	1b13      	subs	r3, r2, r4
 800df86:	3b15      	subs	r3, #21
 800df88:	f023 0303 	bic.w	r3, r3, #3
 800df8c:	3304      	adds	r3, #4
 800df8e:	f104 0715 	add.w	r7, r4, #21
 800df92:	42ba      	cmp	r2, r7
 800df94:	bf38      	it	cc
 800df96:	2304      	movcc	r3, #4
 800df98:	9301      	str	r3, [sp, #4]
 800df9a:	9b02      	ldr	r3, [sp, #8]
 800df9c:	9103      	str	r1, [sp, #12]
 800df9e:	428b      	cmp	r3, r1
 800dfa0:	d80c      	bhi.n	800dfbc <__multiply+0x9c>
 800dfa2:	2e00      	cmp	r6, #0
 800dfa4:	dd03      	ble.n	800dfae <__multiply+0x8e>
 800dfa6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d05a      	beq.n	800e064 <__multiply+0x144>
 800dfae:	6106      	str	r6, [r0, #16]
 800dfb0:	b005      	add	sp, #20
 800dfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfb6:	f843 2b04 	str.w	r2, [r3], #4
 800dfba:	e7d8      	b.n	800df6e <__multiply+0x4e>
 800dfbc:	f8b1 a000 	ldrh.w	sl, [r1]
 800dfc0:	f1ba 0f00 	cmp.w	sl, #0
 800dfc4:	d023      	beq.n	800e00e <__multiply+0xee>
 800dfc6:	46a9      	mov	r9, r5
 800dfc8:	f04f 0c00 	mov.w	ip, #0
 800dfcc:	f104 0e14 	add.w	lr, r4, #20
 800dfd0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dfd4:	f8d9 3000 	ldr.w	r3, [r9]
 800dfd8:	fa1f fb87 	uxth.w	fp, r7
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	fb0a 330b 	mla	r3, sl, fp, r3
 800dfe2:	4463      	add	r3, ip
 800dfe4:	f8d9 c000 	ldr.w	ip, [r9]
 800dfe8:	0c3f      	lsrs	r7, r7, #16
 800dfea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800dfee:	fb0a c707 	mla	r7, sl, r7, ip
 800dff2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dffc:	4572      	cmp	r2, lr
 800dffe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e002:	f849 3b04 	str.w	r3, [r9], #4
 800e006:	d8e3      	bhi.n	800dfd0 <__multiply+0xb0>
 800e008:	9b01      	ldr	r3, [sp, #4]
 800e00a:	f845 c003 	str.w	ip, [r5, r3]
 800e00e:	9b03      	ldr	r3, [sp, #12]
 800e010:	3104      	adds	r1, #4
 800e012:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e016:	f1b9 0f00 	cmp.w	r9, #0
 800e01a:	d021      	beq.n	800e060 <__multiply+0x140>
 800e01c:	46ae      	mov	lr, r5
 800e01e:	f04f 0a00 	mov.w	sl, #0
 800e022:	682b      	ldr	r3, [r5, #0]
 800e024:	f104 0c14 	add.w	ip, r4, #20
 800e028:	f8bc b000 	ldrh.w	fp, [ip]
 800e02c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e030:	b29b      	uxth	r3, r3
 800e032:	fb09 770b 	mla	r7, r9, fp, r7
 800e036:	4457      	add	r7, sl
 800e038:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e03c:	f84e 3b04 	str.w	r3, [lr], #4
 800e040:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e044:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e048:	f8be 3000 	ldrh.w	r3, [lr]
 800e04c:	4562      	cmp	r2, ip
 800e04e:	fb09 330a 	mla	r3, r9, sl, r3
 800e052:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e056:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e05a:	d8e5      	bhi.n	800e028 <__multiply+0x108>
 800e05c:	9f01      	ldr	r7, [sp, #4]
 800e05e:	51eb      	str	r3, [r5, r7]
 800e060:	3504      	adds	r5, #4
 800e062:	e79a      	b.n	800df9a <__multiply+0x7a>
 800e064:	3e01      	subs	r6, #1
 800e066:	e79c      	b.n	800dfa2 <__multiply+0x82>
 800e068:	0800fbc2 	.word	0x0800fbc2
 800e06c:	0800fc33 	.word	0x0800fc33

0800e070 <__pow5mult>:
 800e070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e074:	4615      	mov	r5, r2
 800e076:	f012 0203 	ands.w	r2, r2, #3
 800e07a:	4607      	mov	r7, r0
 800e07c:	460e      	mov	r6, r1
 800e07e:	d007      	beq.n	800e090 <__pow5mult+0x20>
 800e080:	4c25      	ldr	r4, [pc, #148]	@ (800e118 <__pow5mult+0xa8>)
 800e082:	3a01      	subs	r2, #1
 800e084:	2300      	movs	r3, #0
 800e086:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e08a:	f7ff fe57 	bl	800dd3c <__multadd>
 800e08e:	4606      	mov	r6, r0
 800e090:	10ad      	asrs	r5, r5, #2
 800e092:	d03d      	beq.n	800e110 <__pow5mult+0xa0>
 800e094:	69fc      	ldr	r4, [r7, #28]
 800e096:	b97c      	cbnz	r4, 800e0b8 <__pow5mult+0x48>
 800e098:	2010      	movs	r0, #16
 800e09a:	f7fc fab5 	bl	800a608 <malloc>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	61f8      	str	r0, [r7, #28]
 800e0a2:	b928      	cbnz	r0, 800e0b0 <__pow5mult+0x40>
 800e0a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e0a8:	4b1c      	ldr	r3, [pc, #112]	@ (800e11c <__pow5mult+0xac>)
 800e0aa:	481d      	ldr	r0, [pc, #116]	@ (800e120 <__pow5mult+0xb0>)
 800e0ac:	f000 fe74 	bl	800ed98 <__assert_func>
 800e0b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e0b4:	6004      	str	r4, [r0, #0]
 800e0b6:	60c4      	str	r4, [r0, #12]
 800e0b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e0bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e0c0:	b94c      	cbnz	r4, 800e0d6 <__pow5mult+0x66>
 800e0c2:	f240 2171 	movw	r1, #625	@ 0x271
 800e0c6:	4638      	mov	r0, r7
 800e0c8:	f7ff ff14 	bl	800def4 <__i2b>
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	4604      	mov	r4, r0
 800e0d0:	f8c8 0008 	str.w	r0, [r8, #8]
 800e0d4:	6003      	str	r3, [r0, #0]
 800e0d6:	f04f 0900 	mov.w	r9, #0
 800e0da:	07eb      	lsls	r3, r5, #31
 800e0dc:	d50a      	bpl.n	800e0f4 <__pow5mult+0x84>
 800e0de:	4631      	mov	r1, r6
 800e0e0:	4622      	mov	r2, r4
 800e0e2:	4638      	mov	r0, r7
 800e0e4:	f7ff ff1c 	bl	800df20 <__multiply>
 800e0e8:	4680      	mov	r8, r0
 800e0ea:	4631      	mov	r1, r6
 800e0ec:	4638      	mov	r0, r7
 800e0ee:	f7ff fe03 	bl	800dcf8 <_Bfree>
 800e0f2:	4646      	mov	r6, r8
 800e0f4:	106d      	asrs	r5, r5, #1
 800e0f6:	d00b      	beq.n	800e110 <__pow5mult+0xa0>
 800e0f8:	6820      	ldr	r0, [r4, #0]
 800e0fa:	b938      	cbnz	r0, 800e10c <__pow5mult+0x9c>
 800e0fc:	4622      	mov	r2, r4
 800e0fe:	4621      	mov	r1, r4
 800e100:	4638      	mov	r0, r7
 800e102:	f7ff ff0d 	bl	800df20 <__multiply>
 800e106:	6020      	str	r0, [r4, #0]
 800e108:	f8c0 9000 	str.w	r9, [r0]
 800e10c:	4604      	mov	r4, r0
 800e10e:	e7e4      	b.n	800e0da <__pow5mult+0x6a>
 800e110:	4630      	mov	r0, r6
 800e112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e116:	bf00      	nop
 800e118:	0800fc8c 	.word	0x0800fc8c
 800e11c:	0800fb53 	.word	0x0800fb53
 800e120:	0800fc33 	.word	0x0800fc33

0800e124 <__lshift>:
 800e124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e128:	460c      	mov	r4, r1
 800e12a:	4607      	mov	r7, r0
 800e12c:	4691      	mov	r9, r2
 800e12e:	6923      	ldr	r3, [r4, #16]
 800e130:	6849      	ldr	r1, [r1, #4]
 800e132:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e136:	68a3      	ldr	r3, [r4, #8]
 800e138:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e13c:	f108 0601 	add.w	r6, r8, #1
 800e140:	42b3      	cmp	r3, r6
 800e142:	db0b      	blt.n	800e15c <__lshift+0x38>
 800e144:	4638      	mov	r0, r7
 800e146:	f7ff fd97 	bl	800dc78 <_Balloc>
 800e14a:	4605      	mov	r5, r0
 800e14c:	b948      	cbnz	r0, 800e162 <__lshift+0x3e>
 800e14e:	4602      	mov	r2, r0
 800e150:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e154:	4b27      	ldr	r3, [pc, #156]	@ (800e1f4 <__lshift+0xd0>)
 800e156:	4828      	ldr	r0, [pc, #160]	@ (800e1f8 <__lshift+0xd4>)
 800e158:	f000 fe1e 	bl	800ed98 <__assert_func>
 800e15c:	3101      	adds	r1, #1
 800e15e:	005b      	lsls	r3, r3, #1
 800e160:	e7ee      	b.n	800e140 <__lshift+0x1c>
 800e162:	2300      	movs	r3, #0
 800e164:	f100 0114 	add.w	r1, r0, #20
 800e168:	f100 0210 	add.w	r2, r0, #16
 800e16c:	4618      	mov	r0, r3
 800e16e:	4553      	cmp	r3, sl
 800e170:	db33      	blt.n	800e1da <__lshift+0xb6>
 800e172:	6920      	ldr	r0, [r4, #16]
 800e174:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e178:	f104 0314 	add.w	r3, r4, #20
 800e17c:	f019 091f 	ands.w	r9, r9, #31
 800e180:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e184:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e188:	d02b      	beq.n	800e1e2 <__lshift+0xbe>
 800e18a:	468a      	mov	sl, r1
 800e18c:	2200      	movs	r2, #0
 800e18e:	f1c9 0e20 	rsb	lr, r9, #32
 800e192:	6818      	ldr	r0, [r3, #0]
 800e194:	fa00 f009 	lsl.w	r0, r0, r9
 800e198:	4310      	orrs	r0, r2
 800e19a:	f84a 0b04 	str.w	r0, [sl], #4
 800e19e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1a2:	459c      	cmp	ip, r3
 800e1a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e1a8:	d8f3      	bhi.n	800e192 <__lshift+0x6e>
 800e1aa:	ebac 0304 	sub.w	r3, ip, r4
 800e1ae:	3b15      	subs	r3, #21
 800e1b0:	f023 0303 	bic.w	r3, r3, #3
 800e1b4:	3304      	adds	r3, #4
 800e1b6:	f104 0015 	add.w	r0, r4, #21
 800e1ba:	4584      	cmp	ip, r0
 800e1bc:	bf38      	it	cc
 800e1be:	2304      	movcc	r3, #4
 800e1c0:	50ca      	str	r2, [r1, r3]
 800e1c2:	b10a      	cbz	r2, 800e1c8 <__lshift+0xa4>
 800e1c4:	f108 0602 	add.w	r6, r8, #2
 800e1c8:	3e01      	subs	r6, #1
 800e1ca:	4638      	mov	r0, r7
 800e1cc:	4621      	mov	r1, r4
 800e1ce:	612e      	str	r6, [r5, #16]
 800e1d0:	f7ff fd92 	bl	800dcf8 <_Bfree>
 800e1d4:	4628      	mov	r0, r5
 800e1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1da:	f842 0f04 	str.w	r0, [r2, #4]!
 800e1de:	3301      	adds	r3, #1
 800e1e0:	e7c5      	b.n	800e16e <__lshift+0x4a>
 800e1e2:	3904      	subs	r1, #4
 800e1e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1e8:	459c      	cmp	ip, r3
 800e1ea:	f841 2f04 	str.w	r2, [r1, #4]!
 800e1ee:	d8f9      	bhi.n	800e1e4 <__lshift+0xc0>
 800e1f0:	e7ea      	b.n	800e1c8 <__lshift+0xa4>
 800e1f2:	bf00      	nop
 800e1f4:	0800fbc2 	.word	0x0800fbc2
 800e1f8:	0800fc33 	.word	0x0800fc33

0800e1fc <__mcmp>:
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	690a      	ldr	r2, [r1, #16]
 800e200:	6900      	ldr	r0, [r0, #16]
 800e202:	b530      	push	{r4, r5, lr}
 800e204:	1a80      	subs	r0, r0, r2
 800e206:	d10e      	bne.n	800e226 <__mcmp+0x2a>
 800e208:	3314      	adds	r3, #20
 800e20a:	3114      	adds	r1, #20
 800e20c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e210:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e214:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e218:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e21c:	4295      	cmp	r5, r2
 800e21e:	d003      	beq.n	800e228 <__mcmp+0x2c>
 800e220:	d205      	bcs.n	800e22e <__mcmp+0x32>
 800e222:	f04f 30ff 	mov.w	r0, #4294967295
 800e226:	bd30      	pop	{r4, r5, pc}
 800e228:	42a3      	cmp	r3, r4
 800e22a:	d3f3      	bcc.n	800e214 <__mcmp+0x18>
 800e22c:	e7fb      	b.n	800e226 <__mcmp+0x2a>
 800e22e:	2001      	movs	r0, #1
 800e230:	e7f9      	b.n	800e226 <__mcmp+0x2a>
	...

0800e234 <__mdiff>:
 800e234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e238:	4689      	mov	r9, r1
 800e23a:	4606      	mov	r6, r0
 800e23c:	4611      	mov	r1, r2
 800e23e:	4648      	mov	r0, r9
 800e240:	4614      	mov	r4, r2
 800e242:	f7ff ffdb 	bl	800e1fc <__mcmp>
 800e246:	1e05      	subs	r5, r0, #0
 800e248:	d112      	bne.n	800e270 <__mdiff+0x3c>
 800e24a:	4629      	mov	r1, r5
 800e24c:	4630      	mov	r0, r6
 800e24e:	f7ff fd13 	bl	800dc78 <_Balloc>
 800e252:	4602      	mov	r2, r0
 800e254:	b928      	cbnz	r0, 800e262 <__mdiff+0x2e>
 800e256:	f240 2137 	movw	r1, #567	@ 0x237
 800e25a:	4b3e      	ldr	r3, [pc, #248]	@ (800e354 <__mdiff+0x120>)
 800e25c:	483e      	ldr	r0, [pc, #248]	@ (800e358 <__mdiff+0x124>)
 800e25e:	f000 fd9b 	bl	800ed98 <__assert_func>
 800e262:	2301      	movs	r3, #1
 800e264:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e268:	4610      	mov	r0, r2
 800e26a:	b003      	add	sp, #12
 800e26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e270:	bfbc      	itt	lt
 800e272:	464b      	movlt	r3, r9
 800e274:	46a1      	movlt	r9, r4
 800e276:	4630      	mov	r0, r6
 800e278:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e27c:	bfba      	itte	lt
 800e27e:	461c      	movlt	r4, r3
 800e280:	2501      	movlt	r5, #1
 800e282:	2500      	movge	r5, #0
 800e284:	f7ff fcf8 	bl	800dc78 <_Balloc>
 800e288:	4602      	mov	r2, r0
 800e28a:	b918      	cbnz	r0, 800e294 <__mdiff+0x60>
 800e28c:	f240 2145 	movw	r1, #581	@ 0x245
 800e290:	4b30      	ldr	r3, [pc, #192]	@ (800e354 <__mdiff+0x120>)
 800e292:	e7e3      	b.n	800e25c <__mdiff+0x28>
 800e294:	f100 0b14 	add.w	fp, r0, #20
 800e298:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e29c:	f109 0310 	add.w	r3, r9, #16
 800e2a0:	60c5      	str	r5, [r0, #12]
 800e2a2:	f04f 0c00 	mov.w	ip, #0
 800e2a6:	f109 0514 	add.w	r5, r9, #20
 800e2aa:	46d9      	mov	r9, fp
 800e2ac:	6926      	ldr	r6, [r4, #16]
 800e2ae:	f104 0e14 	add.w	lr, r4, #20
 800e2b2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e2b6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e2ba:	9301      	str	r3, [sp, #4]
 800e2bc:	9b01      	ldr	r3, [sp, #4]
 800e2be:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e2c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e2c6:	b281      	uxth	r1, r0
 800e2c8:	9301      	str	r3, [sp, #4]
 800e2ca:	fa1f f38a 	uxth.w	r3, sl
 800e2ce:	1a5b      	subs	r3, r3, r1
 800e2d0:	0c00      	lsrs	r0, r0, #16
 800e2d2:	4463      	add	r3, ip
 800e2d4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e2d8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e2e2:	4576      	cmp	r6, lr
 800e2e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e2e8:	f849 3b04 	str.w	r3, [r9], #4
 800e2ec:	d8e6      	bhi.n	800e2bc <__mdiff+0x88>
 800e2ee:	1b33      	subs	r3, r6, r4
 800e2f0:	3b15      	subs	r3, #21
 800e2f2:	f023 0303 	bic.w	r3, r3, #3
 800e2f6:	3415      	adds	r4, #21
 800e2f8:	3304      	adds	r3, #4
 800e2fa:	42a6      	cmp	r6, r4
 800e2fc:	bf38      	it	cc
 800e2fe:	2304      	movcc	r3, #4
 800e300:	441d      	add	r5, r3
 800e302:	445b      	add	r3, fp
 800e304:	461e      	mov	r6, r3
 800e306:	462c      	mov	r4, r5
 800e308:	4544      	cmp	r4, r8
 800e30a:	d30e      	bcc.n	800e32a <__mdiff+0xf6>
 800e30c:	f108 0103 	add.w	r1, r8, #3
 800e310:	1b49      	subs	r1, r1, r5
 800e312:	f021 0103 	bic.w	r1, r1, #3
 800e316:	3d03      	subs	r5, #3
 800e318:	45a8      	cmp	r8, r5
 800e31a:	bf38      	it	cc
 800e31c:	2100      	movcc	r1, #0
 800e31e:	440b      	add	r3, r1
 800e320:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e324:	b199      	cbz	r1, 800e34e <__mdiff+0x11a>
 800e326:	6117      	str	r7, [r2, #16]
 800e328:	e79e      	b.n	800e268 <__mdiff+0x34>
 800e32a:	46e6      	mov	lr, ip
 800e32c:	f854 1b04 	ldr.w	r1, [r4], #4
 800e330:	fa1f fc81 	uxth.w	ip, r1
 800e334:	44f4      	add	ip, lr
 800e336:	0c08      	lsrs	r0, r1, #16
 800e338:	4471      	add	r1, lr
 800e33a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e33e:	b289      	uxth	r1, r1
 800e340:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e344:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e348:	f846 1b04 	str.w	r1, [r6], #4
 800e34c:	e7dc      	b.n	800e308 <__mdiff+0xd4>
 800e34e:	3f01      	subs	r7, #1
 800e350:	e7e6      	b.n	800e320 <__mdiff+0xec>
 800e352:	bf00      	nop
 800e354:	0800fbc2 	.word	0x0800fbc2
 800e358:	0800fc33 	.word	0x0800fc33

0800e35c <__ulp>:
 800e35c:	4b0e      	ldr	r3, [pc, #56]	@ (800e398 <__ulp+0x3c>)
 800e35e:	400b      	ands	r3, r1
 800e360:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e364:	2b00      	cmp	r3, #0
 800e366:	dc08      	bgt.n	800e37a <__ulp+0x1e>
 800e368:	425b      	negs	r3, r3
 800e36a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e36e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e372:	da04      	bge.n	800e37e <__ulp+0x22>
 800e374:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e378:	4113      	asrs	r3, r2
 800e37a:	2200      	movs	r2, #0
 800e37c:	e008      	b.n	800e390 <__ulp+0x34>
 800e37e:	f1a2 0314 	sub.w	r3, r2, #20
 800e382:	2b1e      	cmp	r3, #30
 800e384:	bfd6      	itet	le
 800e386:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e38a:	2201      	movgt	r2, #1
 800e38c:	40da      	lsrle	r2, r3
 800e38e:	2300      	movs	r3, #0
 800e390:	4619      	mov	r1, r3
 800e392:	4610      	mov	r0, r2
 800e394:	4770      	bx	lr
 800e396:	bf00      	nop
 800e398:	7ff00000 	.word	0x7ff00000

0800e39c <__b2d>:
 800e39c:	6902      	ldr	r2, [r0, #16]
 800e39e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3a0:	f100 0614 	add.w	r6, r0, #20
 800e3a4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800e3a8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800e3ac:	4f1e      	ldr	r7, [pc, #120]	@ (800e428 <__b2d+0x8c>)
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	f7ff fd54 	bl	800de5c <__hi0bits>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	f1c0 0020 	rsb	r0, r0, #32
 800e3ba:	2b0a      	cmp	r3, #10
 800e3bc:	f1a2 0504 	sub.w	r5, r2, #4
 800e3c0:	6008      	str	r0, [r1, #0]
 800e3c2:	dc12      	bgt.n	800e3ea <__b2d+0x4e>
 800e3c4:	42ae      	cmp	r6, r5
 800e3c6:	bf2c      	ite	cs
 800e3c8:	2200      	movcs	r2, #0
 800e3ca:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800e3ce:	f1c3 0c0b 	rsb	ip, r3, #11
 800e3d2:	3315      	adds	r3, #21
 800e3d4:	fa24 fe0c 	lsr.w	lr, r4, ip
 800e3d8:	fa04 f303 	lsl.w	r3, r4, r3
 800e3dc:	fa22 f20c 	lsr.w	r2, r2, ip
 800e3e0:	ea4e 0107 	orr.w	r1, lr, r7
 800e3e4:	431a      	orrs	r2, r3
 800e3e6:	4610      	mov	r0, r2
 800e3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3ea:	42ae      	cmp	r6, r5
 800e3ec:	bf36      	itet	cc
 800e3ee:	f1a2 0508 	subcc.w	r5, r2, #8
 800e3f2:	2200      	movcs	r2, #0
 800e3f4:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800e3f8:	3b0b      	subs	r3, #11
 800e3fa:	d012      	beq.n	800e422 <__b2d+0x86>
 800e3fc:	f1c3 0720 	rsb	r7, r3, #32
 800e400:	fa22 f107 	lsr.w	r1, r2, r7
 800e404:	409c      	lsls	r4, r3
 800e406:	430c      	orrs	r4, r1
 800e408:	42b5      	cmp	r5, r6
 800e40a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800e40e:	bf94      	ite	ls
 800e410:	2400      	movls	r4, #0
 800e412:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800e416:	409a      	lsls	r2, r3
 800e418:	40fc      	lsrs	r4, r7
 800e41a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800e41e:	4322      	orrs	r2, r4
 800e420:	e7e1      	b.n	800e3e6 <__b2d+0x4a>
 800e422:	ea44 0107 	orr.w	r1, r4, r7
 800e426:	e7de      	b.n	800e3e6 <__b2d+0x4a>
 800e428:	3ff00000 	.word	0x3ff00000

0800e42c <__d2b>:
 800e42c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800e430:	2101      	movs	r1, #1
 800e432:	4690      	mov	r8, r2
 800e434:	4699      	mov	r9, r3
 800e436:	9e08      	ldr	r6, [sp, #32]
 800e438:	f7ff fc1e 	bl	800dc78 <_Balloc>
 800e43c:	4604      	mov	r4, r0
 800e43e:	b930      	cbnz	r0, 800e44e <__d2b+0x22>
 800e440:	4602      	mov	r2, r0
 800e442:	f240 310f 	movw	r1, #783	@ 0x30f
 800e446:	4b23      	ldr	r3, [pc, #140]	@ (800e4d4 <__d2b+0xa8>)
 800e448:	4823      	ldr	r0, [pc, #140]	@ (800e4d8 <__d2b+0xac>)
 800e44a:	f000 fca5 	bl	800ed98 <__assert_func>
 800e44e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e452:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e456:	b10d      	cbz	r5, 800e45c <__d2b+0x30>
 800e458:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e45c:	9301      	str	r3, [sp, #4]
 800e45e:	f1b8 0300 	subs.w	r3, r8, #0
 800e462:	d024      	beq.n	800e4ae <__d2b+0x82>
 800e464:	4668      	mov	r0, sp
 800e466:	9300      	str	r3, [sp, #0]
 800e468:	f7ff fd17 	bl	800de9a <__lo0bits>
 800e46c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e470:	b1d8      	cbz	r0, 800e4aa <__d2b+0x7e>
 800e472:	f1c0 0320 	rsb	r3, r0, #32
 800e476:	fa02 f303 	lsl.w	r3, r2, r3
 800e47a:	430b      	orrs	r3, r1
 800e47c:	40c2      	lsrs	r2, r0
 800e47e:	6163      	str	r3, [r4, #20]
 800e480:	9201      	str	r2, [sp, #4]
 800e482:	9b01      	ldr	r3, [sp, #4]
 800e484:	2b00      	cmp	r3, #0
 800e486:	bf0c      	ite	eq
 800e488:	2201      	moveq	r2, #1
 800e48a:	2202      	movne	r2, #2
 800e48c:	61a3      	str	r3, [r4, #24]
 800e48e:	6122      	str	r2, [r4, #16]
 800e490:	b1ad      	cbz	r5, 800e4be <__d2b+0x92>
 800e492:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e496:	4405      	add	r5, r0
 800e498:	6035      	str	r5, [r6, #0]
 800e49a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e49e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4a0:	6018      	str	r0, [r3, #0]
 800e4a2:	4620      	mov	r0, r4
 800e4a4:	b002      	add	sp, #8
 800e4a6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800e4aa:	6161      	str	r1, [r4, #20]
 800e4ac:	e7e9      	b.n	800e482 <__d2b+0x56>
 800e4ae:	a801      	add	r0, sp, #4
 800e4b0:	f7ff fcf3 	bl	800de9a <__lo0bits>
 800e4b4:	9b01      	ldr	r3, [sp, #4]
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	6163      	str	r3, [r4, #20]
 800e4ba:	3020      	adds	r0, #32
 800e4bc:	e7e7      	b.n	800e48e <__d2b+0x62>
 800e4be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e4c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e4c6:	6030      	str	r0, [r6, #0]
 800e4c8:	6918      	ldr	r0, [r3, #16]
 800e4ca:	f7ff fcc7 	bl	800de5c <__hi0bits>
 800e4ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e4d2:	e7e4      	b.n	800e49e <__d2b+0x72>
 800e4d4:	0800fbc2 	.word	0x0800fbc2
 800e4d8:	0800fc33 	.word	0x0800fc33

0800e4dc <__ratio>:
 800e4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e0:	b085      	sub	sp, #20
 800e4e2:	e9cd 1000 	strd	r1, r0, [sp]
 800e4e6:	a902      	add	r1, sp, #8
 800e4e8:	f7ff ff58 	bl	800e39c <__b2d>
 800e4ec:	468b      	mov	fp, r1
 800e4ee:	4606      	mov	r6, r0
 800e4f0:	460f      	mov	r7, r1
 800e4f2:	9800      	ldr	r0, [sp, #0]
 800e4f4:	a903      	add	r1, sp, #12
 800e4f6:	f7ff ff51 	bl	800e39c <__b2d>
 800e4fa:	460d      	mov	r5, r1
 800e4fc:	9b01      	ldr	r3, [sp, #4]
 800e4fe:	4689      	mov	r9, r1
 800e500:	6919      	ldr	r1, [r3, #16]
 800e502:	9b00      	ldr	r3, [sp, #0]
 800e504:	4604      	mov	r4, r0
 800e506:	691b      	ldr	r3, [r3, #16]
 800e508:	4630      	mov	r0, r6
 800e50a:	1ac9      	subs	r1, r1, r3
 800e50c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e510:	1a9b      	subs	r3, r3, r2
 800e512:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e516:	2b00      	cmp	r3, #0
 800e518:	bfcd      	iteet	gt
 800e51a:	463a      	movgt	r2, r7
 800e51c:	462a      	movle	r2, r5
 800e51e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e522:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e526:	bfd8      	it	le
 800e528:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e52c:	464b      	mov	r3, r9
 800e52e:	4622      	mov	r2, r4
 800e530:	4659      	mov	r1, fp
 800e532:	f7f2 f905 	bl	8000740 <__aeabi_ddiv>
 800e536:	b005      	add	sp, #20
 800e538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e53c <__copybits>:
 800e53c:	3901      	subs	r1, #1
 800e53e:	b570      	push	{r4, r5, r6, lr}
 800e540:	1149      	asrs	r1, r1, #5
 800e542:	6914      	ldr	r4, [r2, #16]
 800e544:	3101      	adds	r1, #1
 800e546:	f102 0314 	add.w	r3, r2, #20
 800e54a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e54e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e552:	1f05      	subs	r5, r0, #4
 800e554:	42a3      	cmp	r3, r4
 800e556:	d30c      	bcc.n	800e572 <__copybits+0x36>
 800e558:	1aa3      	subs	r3, r4, r2
 800e55a:	3b11      	subs	r3, #17
 800e55c:	f023 0303 	bic.w	r3, r3, #3
 800e560:	3211      	adds	r2, #17
 800e562:	42a2      	cmp	r2, r4
 800e564:	bf88      	it	hi
 800e566:	2300      	movhi	r3, #0
 800e568:	4418      	add	r0, r3
 800e56a:	2300      	movs	r3, #0
 800e56c:	4288      	cmp	r0, r1
 800e56e:	d305      	bcc.n	800e57c <__copybits+0x40>
 800e570:	bd70      	pop	{r4, r5, r6, pc}
 800e572:	f853 6b04 	ldr.w	r6, [r3], #4
 800e576:	f845 6f04 	str.w	r6, [r5, #4]!
 800e57a:	e7eb      	b.n	800e554 <__copybits+0x18>
 800e57c:	f840 3b04 	str.w	r3, [r0], #4
 800e580:	e7f4      	b.n	800e56c <__copybits+0x30>

0800e582 <__any_on>:
 800e582:	f100 0214 	add.w	r2, r0, #20
 800e586:	6900      	ldr	r0, [r0, #16]
 800e588:	114b      	asrs	r3, r1, #5
 800e58a:	4298      	cmp	r0, r3
 800e58c:	b510      	push	{r4, lr}
 800e58e:	db11      	blt.n	800e5b4 <__any_on+0x32>
 800e590:	dd0a      	ble.n	800e5a8 <__any_on+0x26>
 800e592:	f011 011f 	ands.w	r1, r1, #31
 800e596:	d007      	beq.n	800e5a8 <__any_on+0x26>
 800e598:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e59c:	fa24 f001 	lsr.w	r0, r4, r1
 800e5a0:	fa00 f101 	lsl.w	r1, r0, r1
 800e5a4:	428c      	cmp	r4, r1
 800e5a6:	d10b      	bne.n	800e5c0 <__any_on+0x3e>
 800e5a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	d803      	bhi.n	800e5b8 <__any_on+0x36>
 800e5b0:	2000      	movs	r0, #0
 800e5b2:	bd10      	pop	{r4, pc}
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	e7f7      	b.n	800e5a8 <__any_on+0x26>
 800e5b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e5bc:	2900      	cmp	r1, #0
 800e5be:	d0f5      	beq.n	800e5ac <__any_on+0x2a>
 800e5c0:	2001      	movs	r0, #1
 800e5c2:	e7f6      	b.n	800e5b2 <__any_on+0x30>

0800e5c4 <__ascii_wctomb>:
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	4608      	mov	r0, r1
 800e5c8:	b141      	cbz	r1, 800e5dc <__ascii_wctomb+0x18>
 800e5ca:	2aff      	cmp	r2, #255	@ 0xff
 800e5cc:	d904      	bls.n	800e5d8 <__ascii_wctomb+0x14>
 800e5ce:	228a      	movs	r2, #138	@ 0x8a
 800e5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5d4:	601a      	str	r2, [r3, #0]
 800e5d6:	4770      	bx	lr
 800e5d8:	2001      	movs	r0, #1
 800e5da:	700a      	strb	r2, [r1, #0]
 800e5dc:	4770      	bx	lr

0800e5de <__ssputs_r>:
 800e5de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5e2:	461f      	mov	r7, r3
 800e5e4:	688e      	ldr	r6, [r1, #8]
 800e5e6:	4682      	mov	sl, r0
 800e5e8:	42be      	cmp	r6, r7
 800e5ea:	460c      	mov	r4, r1
 800e5ec:	4690      	mov	r8, r2
 800e5ee:	680b      	ldr	r3, [r1, #0]
 800e5f0:	d82d      	bhi.n	800e64e <__ssputs_r+0x70>
 800e5f2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e5f6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e5fa:	d026      	beq.n	800e64a <__ssputs_r+0x6c>
 800e5fc:	6965      	ldr	r5, [r4, #20]
 800e5fe:	6909      	ldr	r1, [r1, #16]
 800e600:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e604:	eba3 0901 	sub.w	r9, r3, r1
 800e608:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e60c:	1c7b      	adds	r3, r7, #1
 800e60e:	444b      	add	r3, r9
 800e610:	106d      	asrs	r5, r5, #1
 800e612:	429d      	cmp	r5, r3
 800e614:	bf38      	it	cc
 800e616:	461d      	movcc	r5, r3
 800e618:	0553      	lsls	r3, r2, #21
 800e61a:	d527      	bpl.n	800e66c <__ssputs_r+0x8e>
 800e61c:	4629      	mov	r1, r5
 800e61e:	f7fc f825 	bl	800a66c <_malloc_r>
 800e622:	4606      	mov	r6, r0
 800e624:	b360      	cbz	r0, 800e680 <__ssputs_r+0xa2>
 800e626:	464a      	mov	r2, r9
 800e628:	6921      	ldr	r1, [r4, #16]
 800e62a:	f7fe f928 	bl	800c87e <memcpy>
 800e62e:	89a3      	ldrh	r3, [r4, #12]
 800e630:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e638:	81a3      	strh	r3, [r4, #12]
 800e63a:	6126      	str	r6, [r4, #16]
 800e63c:	444e      	add	r6, r9
 800e63e:	6026      	str	r6, [r4, #0]
 800e640:	463e      	mov	r6, r7
 800e642:	6165      	str	r5, [r4, #20]
 800e644:	eba5 0509 	sub.w	r5, r5, r9
 800e648:	60a5      	str	r5, [r4, #8]
 800e64a:	42be      	cmp	r6, r7
 800e64c:	d900      	bls.n	800e650 <__ssputs_r+0x72>
 800e64e:	463e      	mov	r6, r7
 800e650:	4632      	mov	r2, r6
 800e652:	4641      	mov	r1, r8
 800e654:	6820      	ldr	r0, [r4, #0]
 800e656:	f000 fb62 	bl	800ed1e <memmove>
 800e65a:	2000      	movs	r0, #0
 800e65c:	68a3      	ldr	r3, [r4, #8]
 800e65e:	1b9b      	subs	r3, r3, r6
 800e660:	60a3      	str	r3, [r4, #8]
 800e662:	6823      	ldr	r3, [r4, #0]
 800e664:	4433      	add	r3, r6
 800e666:	6023      	str	r3, [r4, #0]
 800e668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e66c:	462a      	mov	r2, r5
 800e66e:	f000 fbc5 	bl	800edfc <_realloc_r>
 800e672:	4606      	mov	r6, r0
 800e674:	2800      	cmp	r0, #0
 800e676:	d1e0      	bne.n	800e63a <__ssputs_r+0x5c>
 800e678:	4650      	mov	r0, sl
 800e67a:	6921      	ldr	r1, [r4, #16]
 800e67c:	f7fe ff68 	bl	800d550 <_free_r>
 800e680:	230c      	movs	r3, #12
 800e682:	f8ca 3000 	str.w	r3, [sl]
 800e686:	89a3      	ldrh	r3, [r4, #12]
 800e688:	f04f 30ff 	mov.w	r0, #4294967295
 800e68c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e690:	81a3      	strh	r3, [r4, #12]
 800e692:	e7e9      	b.n	800e668 <__ssputs_r+0x8a>

0800e694 <_svfiprintf_r>:
 800e694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e698:	4698      	mov	r8, r3
 800e69a:	898b      	ldrh	r3, [r1, #12]
 800e69c:	4607      	mov	r7, r0
 800e69e:	061b      	lsls	r3, r3, #24
 800e6a0:	460d      	mov	r5, r1
 800e6a2:	4614      	mov	r4, r2
 800e6a4:	b09d      	sub	sp, #116	@ 0x74
 800e6a6:	d510      	bpl.n	800e6ca <_svfiprintf_r+0x36>
 800e6a8:	690b      	ldr	r3, [r1, #16]
 800e6aa:	b973      	cbnz	r3, 800e6ca <_svfiprintf_r+0x36>
 800e6ac:	2140      	movs	r1, #64	@ 0x40
 800e6ae:	f7fb ffdd 	bl	800a66c <_malloc_r>
 800e6b2:	6028      	str	r0, [r5, #0]
 800e6b4:	6128      	str	r0, [r5, #16]
 800e6b6:	b930      	cbnz	r0, 800e6c6 <_svfiprintf_r+0x32>
 800e6b8:	230c      	movs	r3, #12
 800e6ba:	603b      	str	r3, [r7, #0]
 800e6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e6c0:	b01d      	add	sp, #116	@ 0x74
 800e6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6c6:	2340      	movs	r3, #64	@ 0x40
 800e6c8:	616b      	str	r3, [r5, #20]
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6ce:	2320      	movs	r3, #32
 800e6d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e6d4:	2330      	movs	r3, #48	@ 0x30
 800e6d6:	f04f 0901 	mov.w	r9, #1
 800e6da:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6de:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800e878 <_svfiprintf_r+0x1e4>
 800e6e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e6e6:	4623      	mov	r3, r4
 800e6e8:	469a      	mov	sl, r3
 800e6ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6ee:	b10a      	cbz	r2, 800e6f4 <_svfiprintf_r+0x60>
 800e6f0:	2a25      	cmp	r2, #37	@ 0x25
 800e6f2:	d1f9      	bne.n	800e6e8 <_svfiprintf_r+0x54>
 800e6f4:	ebba 0b04 	subs.w	fp, sl, r4
 800e6f8:	d00b      	beq.n	800e712 <_svfiprintf_r+0x7e>
 800e6fa:	465b      	mov	r3, fp
 800e6fc:	4622      	mov	r2, r4
 800e6fe:	4629      	mov	r1, r5
 800e700:	4638      	mov	r0, r7
 800e702:	f7ff ff6c 	bl	800e5de <__ssputs_r>
 800e706:	3001      	adds	r0, #1
 800e708:	f000 80a7 	beq.w	800e85a <_svfiprintf_r+0x1c6>
 800e70c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e70e:	445a      	add	r2, fp
 800e710:	9209      	str	r2, [sp, #36]	@ 0x24
 800e712:	f89a 3000 	ldrb.w	r3, [sl]
 800e716:	2b00      	cmp	r3, #0
 800e718:	f000 809f 	beq.w	800e85a <_svfiprintf_r+0x1c6>
 800e71c:	2300      	movs	r3, #0
 800e71e:	f04f 32ff 	mov.w	r2, #4294967295
 800e722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e726:	f10a 0a01 	add.w	sl, sl, #1
 800e72a:	9304      	str	r3, [sp, #16]
 800e72c:	9307      	str	r3, [sp, #28]
 800e72e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e732:	931a      	str	r3, [sp, #104]	@ 0x68
 800e734:	4654      	mov	r4, sl
 800e736:	2205      	movs	r2, #5
 800e738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e73c:	484e      	ldr	r0, [pc, #312]	@ (800e878 <_svfiprintf_r+0x1e4>)
 800e73e:	f7fe f890 	bl	800c862 <memchr>
 800e742:	9a04      	ldr	r2, [sp, #16]
 800e744:	b9d8      	cbnz	r0, 800e77e <_svfiprintf_r+0xea>
 800e746:	06d0      	lsls	r0, r2, #27
 800e748:	bf44      	itt	mi
 800e74a:	2320      	movmi	r3, #32
 800e74c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e750:	0711      	lsls	r1, r2, #28
 800e752:	bf44      	itt	mi
 800e754:	232b      	movmi	r3, #43	@ 0x2b
 800e756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e75a:	f89a 3000 	ldrb.w	r3, [sl]
 800e75e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e760:	d015      	beq.n	800e78e <_svfiprintf_r+0xfa>
 800e762:	4654      	mov	r4, sl
 800e764:	2000      	movs	r0, #0
 800e766:	f04f 0c0a 	mov.w	ip, #10
 800e76a:	9a07      	ldr	r2, [sp, #28]
 800e76c:	4621      	mov	r1, r4
 800e76e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e772:	3b30      	subs	r3, #48	@ 0x30
 800e774:	2b09      	cmp	r3, #9
 800e776:	d94b      	bls.n	800e810 <_svfiprintf_r+0x17c>
 800e778:	b1b0      	cbz	r0, 800e7a8 <_svfiprintf_r+0x114>
 800e77a:	9207      	str	r2, [sp, #28]
 800e77c:	e014      	b.n	800e7a8 <_svfiprintf_r+0x114>
 800e77e:	eba0 0308 	sub.w	r3, r0, r8
 800e782:	fa09 f303 	lsl.w	r3, r9, r3
 800e786:	4313      	orrs	r3, r2
 800e788:	46a2      	mov	sl, r4
 800e78a:	9304      	str	r3, [sp, #16]
 800e78c:	e7d2      	b.n	800e734 <_svfiprintf_r+0xa0>
 800e78e:	9b03      	ldr	r3, [sp, #12]
 800e790:	1d19      	adds	r1, r3, #4
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	9103      	str	r1, [sp, #12]
 800e796:	2b00      	cmp	r3, #0
 800e798:	bfbb      	ittet	lt
 800e79a:	425b      	neglt	r3, r3
 800e79c:	f042 0202 	orrlt.w	r2, r2, #2
 800e7a0:	9307      	strge	r3, [sp, #28]
 800e7a2:	9307      	strlt	r3, [sp, #28]
 800e7a4:	bfb8      	it	lt
 800e7a6:	9204      	strlt	r2, [sp, #16]
 800e7a8:	7823      	ldrb	r3, [r4, #0]
 800e7aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800e7ac:	d10a      	bne.n	800e7c4 <_svfiprintf_r+0x130>
 800e7ae:	7863      	ldrb	r3, [r4, #1]
 800e7b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7b2:	d132      	bne.n	800e81a <_svfiprintf_r+0x186>
 800e7b4:	9b03      	ldr	r3, [sp, #12]
 800e7b6:	3402      	adds	r4, #2
 800e7b8:	1d1a      	adds	r2, r3, #4
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	9203      	str	r2, [sp, #12]
 800e7be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e7c2:	9305      	str	r3, [sp, #20]
 800e7c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800e87c <_svfiprintf_r+0x1e8>
 800e7c8:	2203      	movs	r2, #3
 800e7ca:	4650      	mov	r0, sl
 800e7cc:	7821      	ldrb	r1, [r4, #0]
 800e7ce:	f7fe f848 	bl	800c862 <memchr>
 800e7d2:	b138      	cbz	r0, 800e7e4 <_svfiprintf_r+0x150>
 800e7d4:	2240      	movs	r2, #64	@ 0x40
 800e7d6:	9b04      	ldr	r3, [sp, #16]
 800e7d8:	eba0 000a 	sub.w	r0, r0, sl
 800e7dc:	4082      	lsls	r2, r0
 800e7de:	4313      	orrs	r3, r2
 800e7e0:	3401      	adds	r4, #1
 800e7e2:	9304      	str	r3, [sp, #16]
 800e7e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7e8:	2206      	movs	r2, #6
 800e7ea:	4825      	ldr	r0, [pc, #148]	@ (800e880 <_svfiprintf_r+0x1ec>)
 800e7ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e7f0:	f7fe f837 	bl	800c862 <memchr>
 800e7f4:	2800      	cmp	r0, #0
 800e7f6:	d036      	beq.n	800e866 <_svfiprintf_r+0x1d2>
 800e7f8:	4b22      	ldr	r3, [pc, #136]	@ (800e884 <_svfiprintf_r+0x1f0>)
 800e7fa:	bb1b      	cbnz	r3, 800e844 <_svfiprintf_r+0x1b0>
 800e7fc:	9b03      	ldr	r3, [sp, #12]
 800e7fe:	3307      	adds	r3, #7
 800e800:	f023 0307 	bic.w	r3, r3, #7
 800e804:	3308      	adds	r3, #8
 800e806:	9303      	str	r3, [sp, #12]
 800e808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e80a:	4433      	add	r3, r6
 800e80c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e80e:	e76a      	b.n	800e6e6 <_svfiprintf_r+0x52>
 800e810:	460c      	mov	r4, r1
 800e812:	2001      	movs	r0, #1
 800e814:	fb0c 3202 	mla	r2, ip, r2, r3
 800e818:	e7a8      	b.n	800e76c <_svfiprintf_r+0xd8>
 800e81a:	2300      	movs	r3, #0
 800e81c:	f04f 0c0a 	mov.w	ip, #10
 800e820:	4619      	mov	r1, r3
 800e822:	3401      	adds	r4, #1
 800e824:	9305      	str	r3, [sp, #20]
 800e826:	4620      	mov	r0, r4
 800e828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e82c:	3a30      	subs	r2, #48	@ 0x30
 800e82e:	2a09      	cmp	r2, #9
 800e830:	d903      	bls.n	800e83a <_svfiprintf_r+0x1a6>
 800e832:	2b00      	cmp	r3, #0
 800e834:	d0c6      	beq.n	800e7c4 <_svfiprintf_r+0x130>
 800e836:	9105      	str	r1, [sp, #20]
 800e838:	e7c4      	b.n	800e7c4 <_svfiprintf_r+0x130>
 800e83a:	4604      	mov	r4, r0
 800e83c:	2301      	movs	r3, #1
 800e83e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e842:	e7f0      	b.n	800e826 <_svfiprintf_r+0x192>
 800e844:	ab03      	add	r3, sp, #12
 800e846:	9300      	str	r3, [sp, #0]
 800e848:	462a      	mov	r2, r5
 800e84a:	4638      	mov	r0, r7
 800e84c:	4b0e      	ldr	r3, [pc, #56]	@ (800e888 <_svfiprintf_r+0x1f4>)
 800e84e:	a904      	add	r1, sp, #16
 800e850:	f7fc fec8 	bl	800b5e4 <_printf_float>
 800e854:	1c42      	adds	r2, r0, #1
 800e856:	4606      	mov	r6, r0
 800e858:	d1d6      	bne.n	800e808 <_svfiprintf_r+0x174>
 800e85a:	89ab      	ldrh	r3, [r5, #12]
 800e85c:	065b      	lsls	r3, r3, #25
 800e85e:	f53f af2d 	bmi.w	800e6bc <_svfiprintf_r+0x28>
 800e862:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e864:	e72c      	b.n	800e6c0 <_svfiprintf_r+0x2c>
 800e866:	ab03      	add	r3, sp, #12
 800e868:	9300      	str	r3, [sp, #0]
 800e86a:	462a      	mov	r2, r5
 800e86c:	4638      	mov	r0, r7
 800e86e:	4b06      	ldr	r3, [pc, #24]	@ (800e888 <_svfiprintf_r+0x1f4>)
 800e870:	a904      	add	r1, sp, #16
 800e872:	f7fd f955 	bl	800bb20 <_printf_i>
 800e876:	e7ed      	b.n	800e854 <_svfiprintf_r+0x1c0>
 800e878:	0800fd88 	.word	0x0800fd88
 800e87c:	0800fd8e 	.word	0x0800fd8e
 800e880:	0800fd92 	.word	0x0800fd92
 800e884:	0800b5e5 	.word	0x0800b5e5
 800e888:	0800e5df 	.word	0x0800e5df

0800e88c <__sfputc_r>:
 800e88c:	6893      	ldr	r3, [r2, #8]
 800e88e:	b410      	push	{r4}
 800e890:	3b01      	subs	r3, #1
 800e892:	2b00      	cmp	r3, #0
 800e894:	6093      	str	r3, [r2, #8]
 800e896:	da07      	bge.n	800e8a8 <__sfputc_r+0x1c>
 800e898:	6994      	ldr	r4, [r2, #24]
 800e89a:	42a3      	cmp	r3, r4
 800e89c:	db01      	blt.n	800e8a2 <__sfputc_r+0x16>
 800e89e:	290a      	cmp	r1, #10
 800e8a0:	d102      	bne.n	800e8a8 <__sfputc_r+0x1c>
 800e8a2:	bc10      	pop	{r4}
 800e8a4:	f7fd be35 	b.w	800c512 <__swbuf_r>
 800e8a8:	6813      	ldr	r3, [r2, #0]
 800e8aa:	1c58      	adds	r0, r3, #1
 800e8ac:	6010      	str	r0, [r2, #0]
 800e8ae:	7019      	strb	r1, [r3, #0]
 800e8b0:	4608      	mov	r0, r1
 800e8b2:	bc10      	pop	{r4}
 800e8b4:	4770      	bx	lr

0800e8b6 <__sfputs_r>:
 800e8b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8b8:	4606      	mov	r6, r0
 800e8ba:	460f      	mov	r7, r1
 800e8bc:	4614      	mov	r4, r2
 800e8be:	18d5      	adds	r5, r2, r3
 800e8c0:	42ac      	cmp	r4, r5
 800e8c2:	d101      	bne.n	800e8c8 <__sfputs_r+0x12>
 800e8c4:	2000      	movs	r0, #0
 800e8c6:	e007      	b.n	800e8d8 <__sfputs_r+0x22>
 800e8c8:	463a      	mov	r2, r7
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8d0:	f7ff ffdc 	bl	800e88c <__sfputc_r>
 800e8d4:	1c43      	adds	r3, r0, #1
 800e8d6:	d1f3      	bne.n	800e8c0 <__sfputs_r+0xa>
 800e8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e8dc <_vfiprintf_r>:
 800e8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8e0:	460d      	mov	r5, r1
 800e8e2:	4614      	mov	r4, r2
 800e8e4:	4698      	mov	r8, r3
 800e8e6:	4606      	mov	r6, r0
 800e8e8:	b09d      	sub	sp, #116	@ 0x74
 800e8ea:	b118      	cbz	r0, 800e8f4 <_vfiprintf_r+0x18>
 800e8ec:	6a03      	ldr	r3, [r0, #32]
 800e8ee:	b90b      	cbnz	r3, 800e8f4 <_vfiprintf_r+0x18>
 800e8f0:	f7fd fcd2 	bl	800c298 <__sinit>
 800e8f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e8f6:	07d9      	lsls	r1, r3, #31
 800e8f8:	d405      	bmi.n	800e906 <_vfiprintf_r+0x2a>
 800e8fa:	89ab      	ldrh	r3, [r5, #12]
 800e8fc:	059a      	lsls	r2, r3, #22
 800e8fe:	d402      	bmi.n	800e906 <_vfiprintf_r+0x2a>
 800e900:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e902:	f7fd ffa4 	bl	800c84e <__retarget_lock_acquire_recursive>
 800e906:	89ab      	ldrh	r3, [r5, #12]
 800e908:	071b      	lsls	r3, r3, #28
 800e90a:	d501      	bpl.n	800e910 <_vfiprintf_r+0x34>
 800e90c:	692b      	ldr	r3, [r5, #16]
 800e90e:	b99b      	cbnz	r3, 800e938 <_vfiprintf_r+0x5c>
 800e910:	4629      	mov	r1, r5
 800e912:	4630      	mov	r0, r6
 800e914:	f7fd fe3c 	bl	800c590 <__swsetup_r>
 800e918:	b170      	cbz	r0, 800e938 <_vfiprintf_r+0x5c>
 800e91a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e91c:	07dc      	lsls	r4, r3, #31
 800e91e:	d504      	bpl.n	800e92a <_vfiprintf_r+0x4e>
 800e920:	f04f 30ff 	mov.w	r0, #4294967295
 800e924:	b01d      	add	sp, #116	@ 0x74
 800e926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e92a:	89ab      	ldrh	r3, [r5, #12]
 800e92c:	0598      	lsls	r0, r3, #22
 800e92e:	d4f7      	bmi.n	800e920 <_vfiprintf_r+0x44>
 800e930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e932:	f7fd ff8d 	bl	800c850 <__retarget_lock_release_recursive>
 800e936:	e7f3      	b.n	800e920 <_vfiprintf_r+0x44>
 800e938:	2300      	movs	r3, #0
 800e93a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e93c:	2320      	movs	r3, #32
 800e93e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e942:	2330      	movs	r3, #48	@ 0x30
 800e944:	f04f 0901 	mov.w	r9, #1
 800e948:	f8cd 800c 	str.w	r8, [sp, #12]
 800e94c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800eaf8 <_vfiprintf_r+0x21c>
 800e950:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e954:	4623      	mov	r3, r4
 800e956:	469a      	mov	sl, r3
 800e958:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e95c:	b10a      	cbz	r2, 800e962 <_vfiprintf_r+0x86>
 800e95e:	2a25      	cmp	r2, #37	@ 0x25
 800e960:	d1f9      	bne.n	800e956 <_vfiprintf_r+0x7a>
 800e962:	ebba 0b04 	subs.w	fp, sl, r4
 800e966:	d00b      	beq.n	800e980 <_vfiprintf_r+0xa4>
 800e968:	465b      	mov	r3, fp
 800e96a:	4622      	mov	r2, r4
 800e96c:	4629      	mov	r1, r5
 800e96e:	4630      	mov	r0, r6
 800e970:	f7ff ffa1 	bl	800e8b6 <__sfputs_r>
 800e974:	3001      	adds	r0, #1
 800e976:	f000 80a7 	beq.w	800eac8 <_vfiprintf_r+0x1ec>
 800e97a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e97c:	445a      	add	r2, fp
 800e97e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e980:	f89a 3000 	ldrb.w	r3, [sl]
 800e984:	2b00      	cmp	r3, #0
 800e986:	f000 809f 	beq.w	800eac8 <_vfiprintf_r+0x1ec>
 800e98a:	2300      	movs	r3, #0
 800e98c:	f04f 32ff 	mov.w	r2, #4294967295
 800e990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e994:	f10a 0a01 	add.w	sl, sl, #1
 800e998:	9304      	str	r3, [sp, #16]
 800e99a:	9307      	str	r3, [sp, #28]
 800e99c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e9a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e9a2:	4654      	mov	r4, sl
 800e9a4:	2205      	movs	r2, #5
 800e9a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9aa:	4853      	ldr	r0, [pc, #332]	@ (800eaf8 <_vfiprintf_r+0x21c>)
 800e9ac:	f7fd ff59 	bl	800c862 <memchr>
 800e9b0:	9a04      	ldr	r2, [sp, #16]
 800e9b2:	b9d8      	cbnz	r0, 800e9ec <_vfiprintf_r+0x110>
 800e9b4:	06d1      	lsls	r1, r2, #27
 800e9b6:	bf44      	itt	mi
 800e9b8:	2320      	movmi	r3, #32
 800e9ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9be:	0713      	lsls	r3, r2, #28
 800e9c0:	bf44      	itt	mi
 800e9c2:	232b      	movmi	r3, #43	@ 0x2b
 800e9c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9c8:	f89a 3000 	ldrb.w	r3, [sl]
 800e9cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9ce:	d015      	beq.n	800e9fc <_vfiprintf_r+0x120>
 800e9d0:	4654      	mov	r4, sl
 800e9d2:	2000      	movs	r0, #0
 800e9d4:	f04f 0c0a 	mov.w	ip, #10
 800e9d8:	9a07      	ldr	r2, [sp, #28]
 800e9da:	4621      	mov	r1, r4
 800e9dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9e0:	3b30      	subs	r3, #48	@ 0x30
 800e9e2:	2b09      	cmp	r3, #9
 800e9e4:	d94b      	bls.n	800ea7e <_vfiprintf_r+0x1a2>
 800e9e6:	b1b0      	cbz	r0, 800ea16 <_vfiprintf_r+0x13a>
 800e9e8:	9207      	str	r2, [sp, #28]
 800e9ea:	e014      	b.n	800ea16 <_vfiprintf_r+0x13a>
 800e9ec:	eba0 0308 	sub.w	r3, r0, r8
 800e9f0:	fa09 f303 	lsl.w	r3, r9, r3
 800e9f4:	4313      	orrs	r3, r2
 800e9f6:	46a2      	mov	sl, r4
 800e9f8:	9304      	str	r3, [sp, #16]
 800e9fa:	e7d2      	b.n	800e9a2 <_vfiprintf_r+0xc6>
 800e9fc:	9b03      	ldr	r3, [sp, #12]
 800e9fe:	1d19      	adds	r1, r3, #4
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	9103      	str	r1, [sp, #12]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	bfbb      	ittet	lt
 800ea08:	425b      	neglt	r3, r3
 800ea0a:	f042 0202 	orrlt.w	r2, r2, #2
 800ea0e:	9307      	strge	r3, [sp, #28]
 800ea10:	9307      	strlt	r3, [sp, #28]
 800ea12:	bfb8      	it	lt
 800ea14:	9204      	strlt	r2, [sp, #16]
 800ea16:	7823      	ldrb	r3, [r4, #0]
 800ea18:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea1a:	d10a      	bne.n	800ea32 <_vfiprintf_r+0x156>
 800ea1c:	7863      	ldrb	r3, [r4, #1]
 800ea1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea20:	d132      	bne.n	800ea88 <_vfiprintf_r+0x1ac>
 800ea22:	9b03      	ldr	r3, [sp, #12]
 800ea24:	3402      	adds	r4, #2
 800ea26:	1d1a      	adds	r2, r3, #4
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	9203      	str	r2, [sp, #12]
 800ea2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea30:	9305      	str	r3, [sp, #20]
 800ea32:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800eafc <_vfiprintf_r+0x220>
 800ea36:	2203      	movs	r2, #3
 800ea38:	4650      	mov	r0, sl
 800ea3a:	7821      	ldrb	r1, [r4, #0]
 800ea3c:	f7fd ff11 	bl	800c862 <memchr>
 800ea40:	b138      	cbz	r0, 800ea52 <_vfiprintf_r+0x176>
 800ea42:	2240      	movs	r2, #64	@ 0x40
 800ea44:	9b04      	ldr	r3, [sp, #16]
 800ea46:	eba0 000a 	sub.w	r0, r0, sl
 800ea4a:	4082      	lsls	r2, r0
 800ea4c:	4313      	orrs	r3, r2
 800ea4e:	3401      	adds	r4, #1
 800ea50:	9304      	str	r3, [sp, #16]
 800ea52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea56:	2206      	movs	r2, #6
 800ea58:	4829      	ldr	r0, [pc, #164]	@ (800eb00 <_vfiprintf_r+0x224>)
 800ea5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea5e:	f7fd ff00 	bl	800c862 <memchr>
 800ea62:	2800      	cmp	r0, #0
 800ea64:	d03f      	beq.n	800eae6 <_vfiprintf_r+0x20a>
 800ea66:	4b27      	ldr	r3, [pc, #156]	@ (800eb04 <_vfiprintf_r+0x228>)
 800ea68:	bb1b      	cbnz	r3, 800eab2 <_vfiprintf_r+0x1d6>
 800ea6a:	9b03      	ldr	r3, [sp, #12]
 800ea6c:	3307      	adds	r3, #7
 800ea6e:	f023 0307 	bic.w	r3, r3, #7
 800ea72:	3308      	adds	r3, #8
 800ea74:	9303      	str	r3, [sp, #12]
 800ea76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea78:	443b      	add	r3, r7
 800ea7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea7c:	e76a      	b.n	800e954 <_vfiprintf_r+0x78>
 800ea7e:	460c      	mov	r4, r1
 800ea80:	2001      	movs	r0, #1
 800ea82:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea86:	e7a8      	b.n	800e9da <_vfiprintf_r+0xfe>
 800ea88:	2300      	movs	r3, #0
 800ea8a:	f04f 0c0a 	mov.w	ip, #10
 800ea8e:	4619      	mov	r1, r3
 800ea90:	3401      	adds	r4, #1
 800ea92:	9305      	str	r3, [sp, #20]
 800ea94:	4620      	mov	r0, r4
 800ea96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea9a:	3a30      	subs	r2, #48	@ 0x30
 800ea9c:	2a09      	cmp	r2, #9
 800ea9e:	d903      	bls.n	800eaa8 <_vfiprintf_r+0x1cc>
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d0c6      	beq.n	800ea32 <_vfiprintf_r+0x156>
 800eaa4:	9105      	str	r1, [sp, #20]
 800eaa6:	e7c4      	b.n	800ea32 <_vfiprintf_r+0x156>
 800eaa8:	4604      	mov	r4, r0
 800eaaa:	2301      	movs	r3, #1
 800eaac:	fb0c 2101 	mla	r1, ip, r1, r2
 800eab0:	e7f0      	b.n	800ea94 <_vfiprintf_r+0x1b8>
 800eab2:	ab03      	add	r3, sp, #12
 800eab4:	9300      	str	r3, [sp, #0]
 800eab6:	462a      	mov	r2, r5
 800eab8:	4630      	mov	r0, r6
 800eaba:	4b13      	ldr	r3, [pc, #76]	@ (800eb08 <_vfiprintf_r+0x22c>)
 800eabc:	a904      	add	r1, sp, #16
 800eabe:	f7fc fd91 	bl	800b5e4 <_printf_float>
 800eac2:	4607      	mov	r7, r0
 800eac4:	1c78      	adds	r0, r7, #1
 800eac6:	d1d6      	bne.n	800ea76 <_vfiprintf_r+0x19a>
 800eac8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eaca:	07d9      	lsls	r1, r3, #31
 800eacc:	d405      	bmi.n	800eada <_vfiprintf_r+0x1fe>
 800eace:	89ab      	ldrh	r3, [r5, #12]
 800ead0:	059a      	lsls	r2, r3, #22
 800ead2:	d402      	bmi.n	800eada <_vfiprintf_r+0x1fe>
 800ead4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ead6:	f7fd febb 	bl	800c850 <__retarget_lock_release_recursive>
 800eada:	89ab      	ldrh	r3, [r5, #12]
 800eadc:	065b      	lsls	r3, r3, #25
 800eade:	f53f af1f 	bmi.w	800e920 <_vfiprintf_r+0x44>
 800eae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eae4:	e71e      	b.n	800e924 <_vfiprintf_r+0x48>
 800eae6:	ab03      	add	r3, sp, #12
 800eae8:	9300      	str	r3, [sp, #0]
 800eaea:	462a      	mov	r2, r5
 800eaec:	4630      	mov	r0, r6
 800eaee:	4b06      	ldr	r3, [pc, #24]	@ (800eb08 <_vfiprintf_r+0x22c>)
 800eaf0:	a904      	add	r1, sp, #16
 800eaf2:	f7fd f815 	bl	800bb20 <_printf_i>
 800eaf6:	e7e4      	b.n	800eac2 <_vfiprintf_r+0x1e6>
 800eaf8:	0800fd88 	.word	0x0800fd88
 800eafc:	0800fd8e 	.word	0x0800fd8e
 800eb00:	0800fd92 	.word	0x0800fd92
 800eb04:	0800b5e5 	.word	0x0800b5e5
 800eb08:	0800e8b7 	.word	0x0800e8b7

0800eb0c <__sflush_r>:
 800eb0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb12:	0716      	lsls	r6, r2, #28
 800eb14:	4605      	mov	r5, r0
 800eb16:	460c      	mov	r4, r1
 800eb18:	d454      	bmi.n	800ebc4 <__sflush_r+0xb8>
 800eb1a:	684b      	ldr	r3, [r1, #4]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	dc02      	bgt.n	800eb26 <__sflush_r+0x1a>
 800eb20:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	dd48      	ble.n	800ebb8 <__sflush_r+0xac>
 800eb26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eb28:	2e00      	cmp	r6, #0
 800eb2a:	d045      	beq.n	800ebb8 <__sflush_r+0xac>
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eb32:	682f      	ldr	r7, [r5, #0]
 800eb34:	6a21      	ldr	r1, [r4, #32]
 800eb36:	602b      	str	r3, [r5, #0]
 800eb38:	d030      	beq.n	800eb9c <__sflush_r+0x90>
 800eb3a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eb3c:	89a3      	ldrh	r3, [r4, #12]
 800eb3e:	0759      	lsls	r1, r3, #29
 800eb40:	d505      	bpl.n	800eb4e <__sflush_r+0x42>
 800eb42:	6863      	ldr	r3, [r4, #4]
 800eb44:	1ad2      	subs	r2, r2, r3
 800eb46:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eb48:	b10b      	cbz	r3, 800eb4e <__sflush_r+0x42>
 800eb4a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eb4c:	1ad2      	subs	r2, r2, r3
 800eb4e:	2300      	movs	r3, #0
 800eb50:	4628      	mov	r0, r5
 800eb52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eb54:	6a21      	ldr	r1, [r4, #32]
 800eb56:	47b0      	blx	r6
 800eb58:	1c43      	adds	r3, r0, #1
 800eb5a:	89a3      	ldrh	r3, [r4, #12]
 800eb5c:	d106      	bne.n	800eb6c <__sflush_r+0x60>
 800eb5e:	6829      	ldr	r1, [r5, #0]
 800eb60:	291d      	cmp	r1, #29
 800eb62:	d82b      	bhi.n	800ebbc <__sflush_r+0xb0>
 800eb64:	4a28      	ldr	r2, [pc, #160]	@ (800ec08 <__sflush_r+0xfc>)
 800eb66:	410a      	asrs	r2, r1
 800eb68:	07d6      	lsls	r6, r2, #31
 800eb6a:	d427      	bmi.n	800ebbc <__sflush_r+0xb0>
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	6062      	str	r2, [r4, #4]
 800eb70:	6922      	ldr	r2, [r4, #16]
 800eb72:	04d9      	lsls	r1, r3, #19
 800eb74:	6022      	str	r2, [r4, #0]
 800eb76:	d504      	bpl.n	800eb82 <__sflush_r+0x76>
 800eb78:	1c42      	adds	r2, r0, #1
 800eb7a:	d101      	bne.n	800eb80 <__sflush_r+0x74>
 800eb7c:	682b      	ldr	r3, [r5, #0]
 800eb7e:	b903      	cbnz	r3, 800eb82 <__sflush_r+0x76>
 800eb80:	6560      	str	r0, [r4, #84]	@ 0x54
 800eb82:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb84:	602f      	str	r7, [r5, #0]
 800eb86:	b1b9      	cbz	r1, 800ebb8 <__sflush_r+0xac>
 800eb88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eb8c:	4299      	cmp	r1, r3
 800eb8e:	d002      	beq.n	800eb96 <__sflush_r+0x8a>
 800eb90:	4628      	mov	r0, r5
 800eb92:	f7fe fcdd 	bl	800d550 <_free_r>
 800eb96:	2300      	movs	r3, #0
 800eb98:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb9a:	e00d      	b.n	800ebb8 <__sflush_r+0xac>
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	4628      	mov	r0, r5
 800eba0:	47b0      	blx	r6
 800eba2:	4602      	mov	r2, r0
 800eba4:	1c50      	adds	r0, r2, #1
 800eba6:	d1c9      	bne.n	800eb3c <__sflush_r+0x30>
 800eba8:	682b      	ldr	r3, [r5, #0]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d0c6      	beq.n	800eb3c <__sflush_r+0x30>
 800ebae:	2b1d      	cmp	r3, #29
 800ebb0:	d001      	beq.n	800ebb6 <__sflush_r+0xaa>
 800ebb2:	2b16      	cmp	r3, #22
 800ebb4:	d11d      	bne.n	800ebf2 <__sflush_r+0xe6>
 800ebb6:	602f      	str	r7, [r5, #0]
 800ebb8:	2000      	movs	r0, #0
 800ebba:	e021      	b.n	800ec00 <__sflush_r+0xf4>
 800ebbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebc0:	b21b      	sxth	r3, r3
 800ebc2:	e01a      	b.n	800ebfa <__sflush_r+0xee>
 800ebc4:	690f      	ldr	r7, [r1, #16]
 800ebc6:	2f00      	cmp	r7, #0
 800ebc8:	d0f6      	beq.n	800ebb8 <__sflush_r+0xac>
 800ebca:	0793      	lsls	r3, r2, #30
 800ebcc:	bf18      	it	ne
 800ebce:	2300      	movne	r3, #0
 800ebd0:	680e      	ldr	r6, [r1, #0]
 800ebd2:	bf08      	it	eq
 800ebd4:	694b      	ldreq	r3, [r1, #20]
 800ebd6:	1bf6      	subs	r6, r6, r7
 800ebd8:	600f      	str	r7, [r1, #0]
 800ebda:	608b      	str	r3, [r1, #8]
 800ebdc:	2e00      	cmp	r6, #0
 800ebde:	ddeb      	ble.n	800ebb8 <__sflush_r+0xac>
 800ebe0:	4633      	mov	r3, r6
 800ebe2:	463a      	mov	r2, r7
 800ebe4:	4628      	mov	r0, r5
 800ebe6:	6a21      	ldr	r1, [r4, #32]
 800ebe8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ebec:	47e0      	blx	ip
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	dc07      	bgt.n	800ec02 <__sflush_r+0xf6>
 800ebf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebfa:	f04f 30ff 	mov.w	r0, #4294967295
 800ebfe:	81a3      	strh	r3, [r4, #12]
 800ec00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec02:	4407      	add	r7, r0
 800ec04:	1a36      	subs	r6, r6, r0
 800ec06:	e7e9      	b.n	800ebdc <__sflush_r+0xd0>
 800ec08:	dfbffffe 	.word	0xdfbffffe

0800ec0c <_fflush_r>:
 800ec0c:	b538      	push	{r3, r4, r5, lr}
 800ec0e:	690b      	ldr	r3, [r1, #16]
 800ec10:	4605      	mov	r5, r0
 800ec12:	460c      	mov	r4, r1
 800ec14:	b913      	cbnz	r3, 800ec1c <_fflush_r+0x10>
 800ec16:	2500      	movs	r5, #0
 800ec18:	4628      	mov	r0, r5
 800ec1a:	bd38      	pop	{r3, r4, r5, pc}
 800ec1c:	b118      	cbz	r0, 800ec26 <_fflush_r+0x1a>
 800ec1e:	6a03      	ldr	r3, [r0, #32]
 800ec20:	b90b      	cbnz	r3, 800ec26 <_fflush_r+0x1a>
 800ec22:	f7fd fb39 	bl	800c298 <__sinit>
 800ec26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d0f3      	beq.n	800ec16 <_fflush_r+0xa>
 800ec2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ec30:	07d0      	lsls	r0, r2, #31
 800ec32:	d404      	bmi.n	800ec3e <_fflush_r+0x32>
 800ec34:	0599      	lsls	r1, r3, #22
 800ec36:	d402      	bmi.n	800ec3e <_fflush_r+0x32>
 800ec38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec3a:	f7fd fe08 	bl	800c84e <__retarget_lock_acquire_recursive>
 800ec3e:	4628      	mov	r0, r5
 800ec40:	4621      	mov	r1, r4
 800ec42:	f7ff ff63 	bl	800eb0c <__sflush_r>
 800ec46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ec48:	4605      	mov	r5, r0
 800ec4a:	07da      	lsls	r2, r3, #31
 800ec4c:	d4e4      	bmi.n	800ec18 <_fflush_r+0xc>
 800ec4e:	89a3      	ldrh	r3, [r4, #12]
 800ec50:	059b      	lsls	r3, r3, #22
 800ec52:	d4e1      	bmi.n	800ec18 <_fflush_r+0xc>
 800ec54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec56:	f7fd fdfb 	bl	800c850 <__retarget_lock_release_recursive>
 800ec5a:	e7dd      	b.n	800ec18 <_fflush_r+0xc>

0800ec5c <__swhatbuf_r>:
 800ec5c:	b570      	push	{r4, r5, r6, lr}
 800ec5e:	460c      	mov	r4, r1
 800ec60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec64:	4615      	mov	r5, r2
 800ec66:	2900      	cmp	r1, #0
 800ec68:	461e      	mov	r6, r3
 800ec6a:	b096      	sub	sp, #88	@ 0x58
 800ec6c:	da0c      	bge.n	800ec88 <__swhatbuf_r+0x2c>
 800ec6e:	89a3      	ldrh	r3, [r4, #12]
 800ec70:	2100      	movs	r1, #0
 800ec72:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ec76:	bf14      	ite	ne
 800ec78:	2340      	movne	r3, #64	@ 0x40
 800ec7a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ec7e:	2000      	movs	r0, #0
 800ec80:	6031      	str	r1, [r6, #0]
 800ec82:	602b      	str	r3, [r5, #0]
 800ec84:	b016      	add	sp, #88	@ 0x58
 800ec86:	bd70      	pop	{r4, r5, r6, pc}
 800ec88:	466a      	mov	r2, sp
 800ec8a:	f000 f863 	bl	800ed54 <_fstat_r>
 800ec8e:	2800      	cmp	r0, #0
 800ec90:	dbed      	blt.n	800ec6e <__swhatbuf_r+0x12>
 800ec92:	9901      	ldr	r1, [sp, #4]
 800ec94:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ec98:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ec9c:	4259      	negs	r1, r3
 800ec9e:	4159      	adcs	r1, r3
 800eca0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eca4:	e7eb      	b.n	800ec7e <__swhatbuf_r+0x22>

0800eca6 <__smakebuf_r>:
 800eca6:	898b      	ldrh	r3, [r1, #12]
 800eca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ecaa:	079d      	lsls	r5, r3, #30
 800ecac:	4606      	mov	r6, r0
 800ecae:	460c      	mov	r4, r1
 800ecb0:	d507      	bpl.n	800ecc2 <__smakebuf_r+0x1c>
 800ecb2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ecb6:	6023      	str	r3, [r4, #0]
 800ecb8:	6123      	str	r3, [r4, #16]
 800ecba:	2301      	movs	r3, #1
 800ecbc:	6163      	str	r3, [r4, #20]
 800ecbe:	b003      	add	sp, #12
 800ecc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecc2:	466a      	mov	r2, sp
 800ecc4:	ab01      	add	r3, sp, #4
 800ecc6:	f7ff ffc9 	bl	800ec5c <__swhatbuf_r>
 800ecca:	9f00      	ldr	r7, [sp, #0]
 800eccc:	4605      	mov	r5, r0
 800ecce:	4639      	mov	r1, r7
 800ecd0:	4630      	mov	r0, r6
 800ecd2:	f7fb fccb 	bl	800a66c <_malloc_r>
 800ecd6:	b948      	cbnz	r0, 800ecec <__smakebuf_r+0x46>
 800ecd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecdc:	059a      	lsls	r2, r3, #22
 800ecde:	d4ee      	bmi.n	800ecbe <__smakebuf_r+0x18>
 800ece0:	f023 0303 	bic.w	r3, r3, #3
 800ece4:	f043 0302 	orr.w	r3, r3, #2
 800ece8:	81a3      	strh	r3, [r4, #12]
 800ecea:	e7e2      	b.n	800ecb2 <__smakebuf_r+0xc>
 800ecec:	89a3      	ldrh	r3, [r4, #12]
 800ecee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ecf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ecf6:	81a3      	strh	r3, [r4, #12]
 800ecf8:	9b01      	ldr	r3, [sp, #4]
 800ecfa:	6020      	str	r0, [r4, #0]
 800ecfc:	b15b      	cbz	r3, 800ed16 <__smakebuf_r+0x70>
 800ecfe:	4630      	mov	r0, r6
 800ed00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed04:	f000 f838 	bl	800ed78 <_isatty_r>
 800ed08:	b128      	cbz	r0, 800ed16 <__smakebuf_r+0x70>
 800ed0a:	89a3      	ldrh	r3, [r4, #12]
 800ed0c:	f023 0303 	bic.w	r3, r3, #3
 800ed10:	f043 0301 	orr.w	r3, r3, #1
 800ed14:	81a3      	strh	r3, [r4, #12]
 800ed16:	89a3      	ldrh	r3, [r4, #12]
 800ed18:	431d      	orrs	r5, r3
 800ed1a:	81a5      	strh	r5, [r4, #12]
 800ed1c:	e7cf      	b.n	800ecbe <__smakebuf_r+0x18>

0800ed1e <memmove>:
 800ed1e:	4288      	cmp	r0, r1
 800ed20:	b510      	push	{r4, lr}
 800ed22:	eb01 0402 	add.w	r4, r1, r2
 800ed26:	d902      	bls.n	800ed2e <memmove+0x10>
 800ed28:	4284      	cmp	r4, r0
 800ed2a:	4623      	mov	r3, r4
 800ed2c:	d807      	bhi.n	800ed3e <memmove+0x20>
 800ed2e:	1e43      	subs	r3, r0, #1
 800ed30:	42a1      	cmp	r1, r4
 800ed32:	d008      	beq.n	800ed46 <memmove+0x28>
 800ed34:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed38:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed3c:	e7f8      	b.n	800ed30 <memmove+0x12>
 800ed3e:	4601      	mov	r1, r0
 800ed40:	4402      	add	r2, r0
 800ed42:	428a      	cmp	r2, r1
 800ed44:	d100      	bne.n	800ed48 <memmove+0x2a>
 800ed46:	bd10      	pop	{r4, pc}
 800ed48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed4c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed50:	e7f7      	b.n	800ed42 <memmove+0x24>
	...

0800ed54 <_fstat_r>:
 800ed54:	b538      	push	{r3, r4, r5, lr}
 800ed56:	2300      	movs	r3, #0
 800ed58:	4d06      	ldr	r5, [pc, #24]	@ (800ed74 <_fstat_r+0x20>)
 800ed5a:	4604      	mov	r4, r0
 800ed5c:	4608      	mov	r0, r1
 800ed5e:	4611      	mov	r1, r2
 800ed60:	602b      	str	r3, [r5, #0]
 800ed62:	f7f8 fd4a 	bl	80077fa <_fstat>
 800ed66:	1c43      	adds	r3, r0, #1
 800ed68:	d102      	bne.n	800ed70 <_fstat_r+0x1c>
 800ed6a:	682b      	ldr	r3, [r5, #0]
 800ed6c:	b103      	cbz	r3, 800ed70 <_fstat_r+0x1c>
 800ed6e:	6023      	str	r3, [r4, #0]
 800ed70:	bd38      	pop	{r3, r4, r5, pc}
 800ed72:	bf00      	nop
 800ed74:	20000d08 	.word	0x20000d08

0800ed78 <_isatty_r>:
 800ed78:	b538      	push	{r3, r4, r5, lr}
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	4d05      	ldr	r5, [pc, #20]	@ (800ed94 <_isatty_r+0x1c>)
 800ed7e:	4604      	mov	r4, r0
 800ed80:	4608      	mov	r0, r1
 800ed82:	602b      	str	r3, [r5, #0]
 800ed84:	f7f8 fd3e 	bl	8007804 <_isatty>
 800ed88:	1c43      	adds	r3, r0, #1
 800ed8a:	d102      	bne.n	800ed92 <_isatty_r+0x1a>
 800ed8c:	682b      	ldr	r3, [r5, #0]
 800ed8e:	b103      	cbz	r3, 800ed92 <_isatty_r+0x1a>
 800ed90:	6023      	str	r3, [r4, #0]
 800ed92:	bd38      	pop	{r3, r4, r5, pc}
 800ed94:	20000d08 	.word	0x20000d08

0800ed98 <__assert_func>:
 800ed98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ed9a:	4614      	mov	r4, r2
 800ed9c:	461a      	mov	r2, r3
 800ed9e:	4b09      	ldr	r3, [pc, #36]	@ (800edc4 <__assert_func+0x2c>)
 800eda0:	4605      	mov	r5, r0
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	68d8      	ldr	r0, [r3, #12]
 800eda6:	b954      	cbnz	r4, 800edbe <__assert_func+0x26>
 800eda8:	4b07      	ldr	r3, [pc, #28]	@ (800edc8 <__assert_func+0x30>)
 800edaa:	461c      	mov	r4, r3
 800edac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800edb0:	9100      	str	r1, [sp, #0]
 800edb2:	462b      	mov	r3, r5
 800edb4:	4905      	ldr	r1, [pc, #20]	@ (800edcc <__assert_func+0x34>)
 800edb6:	f000 f84f 	bl	800ee58 <fiprintf>
 800edba:	f000 f85f 	bl	800ee7c <abort>
 800edbe:	4b04      	ldr	r3, [pc, #16]	@ (800edd0 <__assert_func+0x38>)
 800edc0:	e7f4      	b.n	800edac <__assert_func+0x14>
 800edc2:	bf00      	nop
 800edc4:	20000188 	.word	0x20000188
 800edc8:	0800f240 	.word	0x0800f240
 800edcc:	0800fda6 	.word	0x0800fda6
 800edd0:	0800fd99 	.word	0x0800fd99

0800edd4 <_calloc_r>:
 800edd4:	b570      	push	{r4, r5, r6, lr}
 800edd6:	fba1 5402 	umull	r5, r4, r1, r2
 800edda:	b93c      	cbnz	r4, 800edec <_calloc_r+0x18>
 800eddc:	4629      	mov	r1, r5
 800edde:	f7fb fc45 	bl	800a66c <_malloc_r>
 800ede2:	4606      	mov	r6, r0
 800ede4:	b928      	cbnz	r0, 800edf2 <_calloc_r+0x1e>
 800ede6:	2600      	movs	r6, #0
 800ede8:	4630      	mov	r0, r6
 800edea:	bd70      	pop	{r4, r5, r6, pc}
 800edec:	220c      	movs	r2, #12
 800edee:	6002      	str	r2, [r0, #0]
 800edf0:	e7f9      	b.n	800ede6 <_calloc_r+0x12>
 800edf2:	462a      	mov	r2, r5
 800edf4:	4621      	mov	r1, r4
 800edf6:	f7fd fc31 	bl	800c65c <memset>
 800edfa:	e7f5      	b.n	800ede8 <_calloc_r+0x14>

0800edfc <_realloc_r>:
 800edfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee00:	4680      	mov	r8, r0
 800ee02:	4615      	mov	r5, r2
 800ee04:	460c      	mov	r4, r1
 800ee06:	b921      	cbnz	r1, 800ee12 <_realloc_r+0x16>
 800ee08:	4611      	mov	r1, r2
 800ee0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee0e:	f7fb bc2d 	b.w	800a66c <_malloc_r>
 800ee12:	b92a      	cbnz	r2, 800ee20 <_realloc_r+0x24>
 800ee14:	f7fe fb9c 	bl	800d550 <_free_r>
 800ee18:	2400      	movs	r4, #0
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee20:	f000 f833 	bl	800ee8a <_malloc_usable_size_r>
 800ee24:	4285      	cmp	r5, r0
 800ee26:	4606      	mov	r6, r0
 800ee28:	d802      	bhi.n	800ee30 <_realloc_r+0x34>
 800ee2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ee2e:	d8f4      	bhi.n	800ee1a <_realloc_r+0x1e>
 800ee30:	4629      	mov	r1, r5
 800ee32:	4640      	mov	r0, r8
 800ee34:	f7fb fc1a 	bl	800a66c <_malloc_r>
 800ee38:	4607      	mov	r7, r0
 800ee3a:	2800      	cmp	r0, #0
 800ee3c:	d0ec      	beq.n	800ee18 <_realloc_r+0x1c>
 800ee3e:	42b5      	cmp	r5, r6
 800ee40:	462a      	mov	r2, r5
 800ee42:	4621      	mov	r1, r4
 800ee44:	bf28      	it	cs
 800ee46:	4632      	movcs	r2, r6
 800ee48:	f7fd fd19 	bl	800c87e <memcpy>
 800ee4c:	4621      	mov	r1, r4
 800ee4e:	4640      	mov	r0, r8
 800ee50:	f7fe fb7e 	bl	800d550 <_free_r>
 800ee54:	463c      	mov	r4, r7
 800ee56:	e7e0      	b.n	800ee1a <_realloc_r+0x1e>

0800ee58 <fiprintf>:
 800ee58:	b40e      	push	{r1, r2, r3}
 800ee5a:	b503      	push	{r0, r1, lr}
 800ee5c:	4601      	mov	r1, r0
 800ee5e:	ab03      	add	r3, sp, #12
 800ee60:	4805      	ldr	r0, [pc, #20]	@ (800ee78 <fiprintf+0x20>)
 800ee62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee66:	6800      	ldr	r0, [r0, #0]
 800ee68:	9301      	str	r3, [sp, #4]
 800ee6a:	f7ff fd37 	bl	800e8dc <_vfiprintf_r>
 800ee6e:	b002      	add	sp, #8
 800ee70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee74:	b003      	add	sp, #12
 800ee76:	4770      	bx	lr
 800ee78:	20000188 	.word	0x20000188

0800ee7c <abort>:
 800ee7c:	2006      	movs	r0, #6
 800ee7e:	b508      	push	{r3, lr}
 800ee80:	f000 f834 	bl	800eeec <raise>
 800ee84:	2001      	movs	r0, #1
 800ee86:	f7f8 fc93 	bl	80077b0 <_exit>

0800ee8a <_malloc_usable_size_r>:
 800ee8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee8e:	1f18      	subs	r0, r3, #4
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	bfbc      	itt	lt
 800ee94:	580b      	ldrlt	r3, [r1, r0]
 800ee96:	18c0      	addlt	r0, r0, r3
 800ee98:	4770      	bx	lr

0800ee9a <_raise_r>:
 800ee9a:	291f      	cmp	r1, #31
 800ee9c:	b538      	push	{r3, r4, r5, lr}
 800ee9e:	4605      	mov	r5, r0
 800eea0:	460c      	mov	r4, r1
 800eea2:	d904      	bls.n	800eeae <_raise_r+0x14>
 800eea4:	2316      	movs	r3, #22
 800eea6:	6003      	str	r3, [r0, #0]
 800eea8:	f04f 30ff 	mov.w	r0, #4294967295
 800eeac:	bd38      	pop	{r3, r4, r5, pc}
 800eeae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eeb0:	b112      	cbz	r2, 800eeb8 <_raise_r+0x1e>
 800eeb2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eeb6:	b94b      	cbnz	r3, 800eecc <_raise_r+0x32>
 800eeb8:	4628      	mov	r0, r5
 800eeba:	f000 f831 	bl	800ef20 <_getpid_r>
 800eebe:	4622      	mov	r2, r4
 800eec0:	4601      	mov	r1, r0
 800eec2:	4628      	mov	r0, r5
 800eec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eec8:	f000 b818 	b.w	800eefc <_kill_r>
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d00a      	beq.n	800eee6 <_raise_r+0x4c>
 800eed0:	1c59      	adds	r1, r3, #1
 800eed2:	d103      	bne.n	800eedc <_raise_r+0x42>
 800eed4:	2316      	movs	r3, #22
 800eed6:	6003      	str	r3, [r0, #0]
 800eed8:	2001      	movs	r0, #1
 800eeda:	e7e7      	b.n	800eeac <_raise_r+0x12>
 800eedc:	2100      	movs	r1, #0
 800eede:	4620      	mov	r0, r4
 800eee0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eee4:	4798      	blx	r3
 800eee6:	2000      	movs	r0, #0
 800eee8:	e7e0      	b.n	800eeac <_raise_r+0x12>
	...

0800eeec <raise>:
 800eeec:	4b02      	ldr	r3, [pc, #8]	@ (800eef8 <raise+0xc>)
 800eeee:	4601      	mov	r1, r0
 800eef0:	6818      	ldr	r0, [r3, #0]
 800eef2:	f7ff bfd2 	b.w	800ee9a <_raise_r>
 800eef6:	bf00      	nop
 800eef8:	20000188 	.word	0x20000188

0800eefc <_kill_r>:
 800eefc:	b538      	push	{r3, r4, r5, lr}
 800eefe:	2300      	movs	r3, #0
 800ef00:	4d06      	ldr	r5, [pc, #24]	@ (800ef1c <_kill_r+0x20>)
 800ef02:	4604      	mov	r4, r0
 800ef04:	4608      	mov	r0, r1
 800ef06:	4611      	mov	r1, r2
 800ef08:	602b      	str	r3, [r5, #0]
 800ef0a:	f7f8 fc49 	bl	80077a0 <_kill>
 800ef0e:	1c43      	adds	r3, r0, #1
 800ef10:	d102      	bne.n	800ef18 <_kill_r+0x1c>
 800ef12:	682b      	ldr	r3, [r5, #0]
 800ef14:	b103      	cbz	r3, 800ef18 <_kill_r+0x1c>
 800ef16:	6023      	str	r3, [r4, #0]
 800ef18:	bd38      	pop	{r3, r4, r5, pc}
 800ef1a:	bf00      	nop
 800ef1c:	20000d08 	.word	0x20000d08

0800ef20 <_getpid_r>:
 800ef20:	f7f8 bc3c 	b.w	800779c <_getpid>

0800ef24 <_init>:
 800ef24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef26:	bf00      	nop
 800ef28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef2a:	bc08      	pop	{r3}
 800ef2c:	469e      	mov	lr, r3
 800ef2e:	4770      	bx	lr

0800ef30 <_fini>:
 800ef30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef32:	bf00      	nop
 800ef34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef36:	bc08      	pop	{r3}
 800ef38:	469e      	mov	lr, r3
 800ef3a:	4770      	bx	lr
