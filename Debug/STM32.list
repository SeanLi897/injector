
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e72c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f48  0800e840  0800e840  0000f840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f788  0800f788  000111d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f788  0800f788  00010788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f790  0800f790  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f790  0800f790  00010790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f794  0800f794  00010794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800f798  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b34  200001d8  0800f970  000111d8  2**3
                  ALLOC
 10 ._user_heap_stack 00001404  20000d0c  0800f970  00011d0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027ed7  00000000  00000000  00011201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a8c  00000000  00000000  000390d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00010c23  00000000  00000000  0003eb64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  0004f788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001798  00000000  00000000  00050eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e4c1  00000000  00000000  00052648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d4cf  00000000  00000000  00070b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a318  00000000  00000000  0009dfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001382f0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000585c  00000000  00000000  00138334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  0013db90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e824 	.word	0x0800e824

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800e824 	.word	0x0800e824

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b99e 	b.w	8000ed0 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f83c 	bl	8000c18 <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2lz>:
 8000bac:	b538      	push	{r3, r4, r5, lr}
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	460d      	mov	r5, r1
 8000bb6:	f7ff ff0b 	bl	80009d0 <__aeabi_dcmplt>
 8000bba:	b928      	cbnz	r0, 8000bc8 <__aeabi_d2lz+0x1c>
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	4629      	mov	r1, r5
 8000bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bc4:	f000 b80a 	b.w	8000bdc <__aeabi_d2ulz>
 8000bc8:	4620      	mov	r0, r4
 8000bca:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000bce:	f000 f805 	bl	8000bdc <__aeabi_d2ulz>
 8000bd2:	4240      	negs	r0, r0
 8000bd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd8:	bd38      	pop	{r3, r4, r5, pc}
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2ulz>:
 8000bdc:	b5d0      	push	{r4, r6, r7, lr}
 8000bde:	2200      	movs	r2, #0
 8000be0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <__aeabi_d2ulz+0x34>)
 8000be2:	4606      	mov	r6, r0
 8000be4:	460f      	mov	r7, r1
 8000be6:	f7ff fc81 	bl	80004ec <__aeabi_dmul>
 8000bea:	f7ff ff57 	bl	8000a9c <__aeabi_d2uiz>
 8000bee:	4604      	mov	r4, r0
 8000bf0:	f7ff fc02 	bl	80003f8 <__aeabi_ui2d>
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <__aeabi_d2ulz+0x38>)
 8000bf8:	f7ff fc78 	bl	80004ec <__aeabi_dmul>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	460b      	mov	r3, r1
 8000c00:	4630      	mov	r0, r6
 8000c02:	4639      	mov	r1, r7
 8000c04:	f7ff faba 	bl	800017c <__aeabi_dsub>
 8000c08:	f7ff ff48 	bl	8000a9c <__aeabi_d2uiz>
 8000c0c:	4621      	mov	r1, r4
 8000c0e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c10:	3df00000 	.word	0x3df00000
 8000c14:	41f00000 	.word	0x41f00000

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c4e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c52:	fa1f f68c 	uxth.w	r6, ip
 8000c56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8110 	bcs.w	8000e92 <__udivmoddi4+0x27a>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810d 	bls.w	8000e92 <__udivmoddi4+0x27a>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c82:	fb07 1110 	mls	r1, r7, r0, r1
 8000c86:	fb00 f606 	mul.w	r6, r0, r6
 8000c8a:	fa1f f38e 	uxth.w	r3, lr
 8000c8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fa 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f7 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	2100      	movs	r1, #0
 8000cae:	1b9b      	subs	r3, r3, r6
 8000cb0:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80ee 	bcc.w	8000ec0 <__udivmoddi4+0x2a8>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 808f 	bne.w	8000e1a <__udivmoddi4+0x202>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	2101      	movs	r1, #1
 8000d02:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d06:	fa1f f78c 	uxth.w	r7, ip
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d12:	fb07 f006 	mul.w	r0, r7, r6
 8000d16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d3e:	fb00 f707 	mul.w	r7, r0, r7
 8000d42:	fa1f f38e 	uxth.w	r3, lr
 8000d46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80ae 	bhi.w	8000eba <__udivmoddi4+0x2a2>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0720 	rsb	r7, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa24 f607 	lsr.w	r6, r4, r7
 8000d7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7e:	fbb6 f8f9 	udiv	r8, r6, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 6618 	mls	r6, r9, r8, r6
 8000d8a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d8e:	408c      	lsls	r4, r1
 8000d90:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d94:	fb08 f00e 	mul.w	r0, r8, lr
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000da0:	4298      	cmp	r0, r3
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	eb1c 0303 	adds.w	r3, ip, r3
 8000dac:	f108 36ff 	add.w	r6, r8, #4294967295
 8000db0:	f080 8081 	bcs.w	8000eb6 <__udivmoddi4+0x29e>
 8000db4:	4298      	cmp	r0, r3
 8000db6:	d97e      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000db8:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbc:	4463      	add	r3, ip
 8000dbe:	1a1e      	subs	r6, r3, r0
 8000dc0:	fbb6 f3f9 	udiv	r3, r6, r9
 8000dc4:	fb09 6613 	mls	r6, r9, r3, r6
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	b2a4      	uxth	r4, r4
 8000dce:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000dd2:	45a6      	cmp	lr, r4
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x1d0>
 8000dd6:	eb1c 0404 	adds.w	r4, ip, r4
 8000dda:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dde:	d266      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d964      	bls.n	8000eae <__udivmoddi4+0x296>
 8000de4:	3b02      	subs	r3, #2
 8000de6:	4464      	add	r4, ip
 8000de8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000dec:	fba0 8302 	umull	r8, r3, r0, r2
 8000df0:	eba4 040e 	sub.w	r4, r4, lr
 8000df4:	429c      	cmp	r4, r3
 8000df6:	46c6      	mov	lr, r8
 8000df8:	461e      	mov	r6, r3
 8000dfa:	d350      	bcc.n	8000e9e <__udivmoddi4+0x286>
 8000dfc:	d04d      	beq.n	8000e9a <__udivmoddi4+0x282>
 8000dfe:	b155      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000e00:	ebba 030e 	subs.w	r3, sl, lr
 8000e04:	eb64 0406 	sbc.w	r4, r4, r6
 8000e08:	fa04 f707 	lsl.w	r7, r4, r7
 8000e0c:	40cb      	lsrs	r3, r1
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 7400 	strd	r7, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e751      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1e:	f1c2 0320 	rsb	r3, r2, #32
 8000e22:	40d9      	lsrs	r1, r3
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	fa20 f303 	lsr.w	r3, r0, r3
 8000e2c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e30:	fbb1 f0f8 	udiv	r0, r1, r8
 8000e34:	fb08 1110 	mls	r1, r8, r0, r1
 8000e38:	4094      	lsls	r4, r2
 8000e3a:	431c      	orrs	r4, r3
 8000e3c:	fa1f f78c 	uxth.w	r7, ip
 8000e40:	0c23      	lsrs	r3, r4, #16
 8000e42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e46:	fb00 f107 	mul.w	r1, r0, r7
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x248>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e56:	d22c      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	d92a      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1a5b      	subs	r3, r3, r1
 8000e62:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e66:	fb08 3311 	mls	r3, r8, r1, r3
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e70:	fb01 f307 	mul.w	r3, r1, r7
 8000e74:	42a3      	cmp	r3, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x272>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e80:	d213      	bcs.n	8000eaa <__udivmoddi4+0x292>
 8000e82:	42a3      	cmp	r3, r4
 8000e84:	d911      	bls.n	8000eaa <__udivmoddi4+0x292>
 8000e86:	3902      	subs	r1, #2
 8000e88:	4464      	add	r4, ip
 8000e8a:	1ae4      	subs	r4, r4, r3
 8000e8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e90:	e73b      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e92:	4604      	mov	r4, r0
 8000e94:	e6f2      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e708      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9a:	45c2      	cmp	sl, r8
 8000e9c:	d2af      	bcs.n	8000dfe <__udivmoddi4+0x1e6>
 8000e9e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea2:	eb63 060c 	sbc.w	r6, r3, ip
 8000ea6:	3801      	subs	r0, #1
 8000ea8:	e7a9      	b.n	8000dfe <__udivmoddi4+0x1e6>
 8000eaa:	4631      	mov	r1, r6
 8000eac:	e7ed      	b.n	8000e8a <__udivmoddi4+0x272>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	e79a      	b.n	8000de8 <__udivmoddi4+0x1d0>
 8000eb2:	4630      	mov	r0, r6
 8000eb4:	e7d4      	b.n	8000e60 <__udivmoddi4+0x248>
 8000eb6:	46b0      	mov	r8, r6
 8000eb8:	e781      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000eba:	4463      	add	r3, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e74f      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	4623      	mov	r3, r4
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	e711      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ec8:	3e02      	subs	r6, #2
 8000eca:	4463      	add	r3, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ece:	bf00      	nop

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <AD24C02_Write2Byte>:
//
//    I2C_WriteData( AD24C02_ADDRESS, buffer, 3);
//
//}

void AD24C02_Write2Byte(uint8_t memAddress, uint16_t *data) {
 8000ed4:	b507      	push	{r0, r1, r2, lr}
    uint8_t buffer[3];
    buffer[0] = memAddress;          // Memory address
    buffer[1] = (uint8_t)(*data);    // Low byte of data
 8000ed6:	880b      	ldrh	r3, [r1, #0]
    buffer[0] = memAddress;          // Memory address
 8000ed8:	f88d 0004 	strb.w	r0, [sp, #4]
    buffer[1] = (uint8_t)(*data);    // Low byte of data
 8000edc:	f88d 3005 	strb.w	r3, [sp, #5]
    buffer[2] = (uint8_t)(*data >> 8); // High byte of data
    I2C_WriteData(AD24C02_ADDRESS, buffer, 3); // Write address + 2 bytes
 8000ee0:	2203      	movs	r2, #3
    buffer[2] = (uint8_t)(*data >> 8); // High byte of data
 8000ee2:	0a1b      	lsrs	r3, r3, #8
    I2C_WriteData(AD24C02_ADDRESS, buffer, 3); // Write address + 2 bytes
 8000ee4:	a901      	add	r1, sp, #4
 8000ee6:	20a0      	movs	r0, #160	@ 0xa0
    buffer[2] = (uint8_t)(*data >> 8); // High byte of data
 8000ee8:	f88d 3006 	strb.w	r3, [sp, #6]
    I2C_WriteData(AD24C02_ADDRESS, buffer, 3); // Write address + 2 bytes
 8000eec:	f005 fabc 	bl	8006468 <I2C_WriteData>
}
 8000ef0:	b003      	add	sp, #12
 8000ef2:	f85d fb04 	ldr.w	pc, [sp], #4

08000ef6 <AD24C02_Read2Byte>:

void AD24C02_Read2Byte(uint8_t memAddress, uint16_t *data) {
 8000ef6:	b513      	push	{r0, r1, r4, lr}
 8000ef8:	460c      	mov	r4, r1
 8000efa:	f88d 0007 	strb.w	r0, [sp, #7]
   I2C_WriteData(AD24C02_ADDRESS, &memAddress, 1);
 8000efe:	f10d 0107 	add.w	r1, sp, #7
 8000f02:	2201      	movs	r2, #1
 8000f04:	20a0      	movs	r0, #160	@ 0xa0
 8000f06:	f005 faaf 	bl	8006468 <I2C_WriteData>
   I2C_ReadData(AD24C02_ADDRESS, (uint8_t*)data, 2);
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	4621      	mov	r1, r4
 8000f0e:	20a0      	movs	r0, #160	@ 0xa0
 8000f10:	f005 faca 	bl	80064a8 <I2C_ReadData>
}
 8000f14:	b002      	add	sp, #8
 8000f16:	bd10      	pop	{r4, pc}

08000f18 <READOUT_SAVE_DATA>:

void READOUT_SAVE_DATA(void){
 8000f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	AD24C02_Read2Byte(SUM_DOSAGE_ADDRESS,&total_inject_Dosage);
 8000f1a:	4e19      	ldr	r6, [pc, #100]	@ (8000f80 <READOUT_SAVE_DATA+0x68>)
	HAL_Delay(10);
	AD24C02_Read2Byte(TOTAL_TREE_ADDRESS,&total_Times);
 8000f1c:	4f19      	ldr	r7, [pc, #100]	@ (8000f84 <READOUT_SAVE_DATA+0x6c>)
	AD24C02_Read2Byte(SUM_DOSAGE_ADDRESS,&total_inject_Dosage);
 8000f1e:	4631      	mov	r1, r6
 8000f20:	2020      	movs	r0, #32
 8000f22:	f7ff ffe8 	bl	8000ef6 <AD24C02_Read2Byte>
	HAL_Delay(10);
 8000f26:	200a      	movs	r0, #10
 8000f28:	f006 ff34 	bl	8007d94 <HAL_Delay>
	HAL_Delay(10);
	AD24C02_Read2Byte(CURRENT_TREE_NUMBER,&current_TreeNo);
 8000f2c:	4d16      	ldr	r5, [pc, #88]	@ (8000f88 <READOUT_SAVE_DATA+0x70>)
	AD24C02_Read2Byte(TOTAL_TREE_ADDRESS,&total_Times);
 8000f2e:	4639      	mov	r1, r7
 8000f30:	2030      	movs	r0, #48	@ 0x30
 8000f32:	f7ff ffe0 	bl	8000ef6 <AD24C02_Read2Byte>
	HAL_Delay(10);
 8000f36:	200a      	movs	r0, #10
	HAL_Delay(10);
//	Refresh_counter();
	sprintf(Tx_Buffer,"Main.n2.val=%d\xff\xff\xff",total_Times);
 8000f38:	4c14      	ldr	r4, [pc, #80]	@ (8000f8c <READOUT_SAVE_DATA+0x74>)
	HAL_Delay(10);
 8000f3a:	f006 ff2b 	bl	8007d94 <HAL_Delay>
	AD24C02_Read2Byte(CURRENT_TREE_NUMBER,&current_TreeNo);
 8000f3e:	4629      	mov	r1, r5
 8000f40:	2040      	movs	r0, #64	@ 0x40
 8000f42:	f7ff ffd8 	bl	8000ef6 <AD24C02_Read2Byte>
	HAL_Delay(10);
 8000f46:	200a      	movs	r0, #10
 8000f48:	f006 ff24 	bl	8007d94 <HAL_Delay>
	sprintf(Tx_Buffer,"Main.n2.val=%d\xff\xff\xff",total_Times);
 8000f4c:	883a      	ldrh	r2, [r7, #0]
 8000f4e:	4910      	ldr	r1, [pc, #64]	@ (8000f90 <READOUT_SAVE_DATA+0x78>)
 8000f50:	4620      	mov	r0, r4
 8000f52:	f00a fefb 	bl	800bd4c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8000f56:	4620      	mov	r0, r4
 8000f58:	f006 fdf0 	bl	8007b3c <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"Main.n3.val=%d\xff\xff\xff",total_inject_Dosage);
 8000f5c:	8832      	ldrh	r2, [r6, #0]
 8000f5e:	490d      	ldr	r1, [pc, #52]	@ (8000f94 <READOUT_SAVE_DATA+0x7c>)
 8000f60:	4620      	mov	r0, r4
 8000f62:	f00a fef3 	bl	800bd4c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8000f66:	4620      	mov	r0, r4
 8000f68:	f006 fde8 	bl	8007b3c <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"Main.n1.val=%d\xff\xff\xff",current_TreeNo);
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	882a      	ldrh	r2, [r5, #0]
 8000f70:	4909      	ldr	r1, [pc, #36]	@ (8000f98 <READOUT_SAVE_DATA+0x80>)
 8000f72:	f00a feeb 	bl	800bd4c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8000f76:	4620      	mov	r0, r4
}
 8000f78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8000f7c:	f006 bdde 	b.w	8007b3c <USART1_Tx_HMIdata>
 8000f80:	20000a4c 	.word	0x20000a4c
 8000f84:	20000a4a 	.word	0x20000a4a
 8000f88:	200008c2 	.word	0x200008c2
 8000f8c:	20000b8a 	.word	0x20000b8a
 8000f90:	0800e843 	.word	0x0800e843
 8000f94:	0800e855 	.word	0x0800e855
 8000f98:	0800e867 	.word	0x0800e867

08000f9c <AD24C02_DataCheck>:

void AD24C02_DataCheck(void){
 8000f9c:	b508      	push	{r3, lr}
	if(total_inject_Dosage > 9999){
 8000f9e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8000fa2:	4911      	ldr	r1, [pc, #68]	@ (8000fe8 <AD24C02_DataCheck+0x4c>)
 8000fa4:	880a      	ldrh	r2, [r1, #0]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d904      	bls.n	8000fb4 <AD24C02_DataCheck+0x18>
		total_inject_Dosage = 0;
 8000faa:	2300      	movs	r3, #0
		AD24C02_Write2Byte(SUM_DOSAGE_ADDRESS,&total_inject_Dosage);
 8000fac:	2020      	movs	r0, #32
		total_inject_Dosage = 0;
 8000fae:	800b      	strh	r3, [r1, #0]
		AD24C02_Write2Byte(SUM_DOSAGE_ADDRESS,&total_inject_Dosage);
 8000fb0:	f7ff ff90 	bl	8000ed4 <AD24C02_Write2Byte>
	}
	if(total_Times > 9999){
 8000fb4:	f242 730f 	movw	r3, #9999	@ 0x270f
 8000fb8:	490c      	ldr	r1, [pc, #48]	@ (8000fec <AD24C02_DataCheck+0x50>)
 8000fba:	880a      	ldrh	r2, [r1, #0]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d904      	bls.n	8000fca <AD24C02_DataCheck+0x2e>
		total_Times = 0;
 8000fc0:	2300      	movs	r3, #0
		AD24C02_Write2Byte(TOTAL_TREE_ADDRESS,&total_Times);
 8000fc2:	2030      	movs	r0, #48	@ 0x30
		total_Times = 0;
 8000fc4:	800b      	strh	r3, [r1, #0]
		AD24C02_Write2Byte(TOTAL_TREE_ADDRESS,&total_Times);
 8000fc6:	f7ff ff85 	bl	8000ed4 <AD24C02_Write2Byte>
	}
	if(current_TreeNo > 9999){
 8000fca:	f242 730f 	movw	r3, #9999	@ 0x270f
 8000fce:	4908      	ldr	r1, [pc, #32]	@ (8000ff0 <AD24C02_DataCheck+0x54>)
 8000fd0:	880a      	ldrh	r2, [r1, #0]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d906      	bls.n	8000fe4 <AD24C02_DataCheck+0x48>
		current_TreeNo = 0;
 8000fd6:	2300      	movs	r3, #0
		AD24C02_Write2Byte(CURRENT_TREE_NUMBER,&current_TreeNo);
 8000fd8:	2040      	movs	r0, #64	@ 0x40
		current_TreeNo = 0;
 8000fda:	800b      	strh	r3, [r1, #0]
	}
}
 8000fdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		AD24C02_Write2Byte(CURRENT_TREE_NUMBER,&current_TreeNo);
 8000fe0:	f7ff bf78 	b.w	8000ed4 <AD24C02_Write2Byte>
}
 8000fe4:	bd08      	pop	{r3, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000a4c 	.word	0x20000a4c
 8000fec:	20000a4a 	.word	0x20000a4a
 8000ff0:	200008c2 	.word	0x200008c2

08000ff4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8000ff4:	b507      	push	{r0, r1, r2, lr}
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
PUTCHAR_PROTOTYPE {
 8000ffa:	9001      	str	r0, [sp, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	a901      	add	r1, sp, #4
 8001000:	4803      	ldr	r0, [pc, #12]	@ (8001010 <__io_putchar+0x1c>)
 8001002:	f008 fc96 	bl	8009932 <HAL_UART_Transmit>
    return ch;
}
 8001006:	9801      	ldr	r0, [sp, #4]
 8001008:	b003      	add	sp, #12
 800100a:	f85d fb04 	ldr.w	pc, [sp], #4
 800100e:	bf00      	nop
 8001010:	20000b40 	.word	0x20000b40

08001014 <process_gps_data>:



/* 解析GPS-GGA数据 */
int process_gps_data(const char *data, GPS_Data* result) {
 8001014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001018:	460c      	mov	r4, r1
    if (!data || !result) return -1;
 800101a:	4605      	mov	r5, r0
int process_gps_data(const char *data, GPS_Data* result) {
 800101c:	b0a2      	sub	sp, #136	@ 0x88
    if (!data || !result) return -1;
 800101e:	b920      	cbnz	r0, 800102a <process_gps_data+0x16>
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
        }
        token = strtok_r(NULL, ",", &saveptr);
        field_index++;
    }
    return 0; // 成功
}
 8001024:	b022      	add	sp, #136	@ 0x88
 8001026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!data || !result) return -1;
 800102a:	2900      	cmp	r1, #0
 800102c:	d0f8      	beq.n	8001020 <process_gps_data+0xc>
    memset(result, 0, sizeof(GPS_Data));
 800102e:	223c      	movs	r2, #60	@ 0x3c
 8001030:	2100      	movs	r1, #0
 8001032:	4620      	mov	r0, r4
 8001034:	f00a ff92 	bl	800bf5c <memset>
    char *checksum_ptr = strchr(data, '*');
 8001038:	212a      	movs	r1, #42	@ 0x2a
 800103a:	4628      	mov	r0, r5
 800103c:	f00a ffa5 	bl	800bf8a <strchr>
    if (!checksum_ptr) return -1; // 无校验和
 8001040:	4606      	mov	r6, r0
 8001042:	2800      	cmp	r0, #0
 8001044:	d0ec      	beq.n	8001020 <process_gps_data+0xc>
    uint8_t checksum_recv = strtol(checksum_ptr + 1, NULL, 16);
 8001046:	2210      	movs	r2, #16
 8001048:	2100      	movs	r1, #0
 800104a:	3001      	adds	r0, #1
 800104c:	f009 fea2 	bl	800ad94 <strtol>
    for (const char *p = data + 1; p < checksum_ptr; p++) {
 8001050:	1c6f      	adds	r7, r5, #1
 8001052:	463a      	mov	r2, r7
    uint8_t checksum_calc = 0;
 8001054:	2300      	movs	r3, #0
    uint8_t checksum_recv = strtol(checksum_ptr + 1, NULL, 16);
 8001056:	b2c0      	uxtb	r0, r0
    for (const char *p = data + 1; p < checksum_ptr; p++) {
 8001058:	42b2      	cmp	r2, r6
 800105a:	d32a      	bcc.n	80010b2 <process_gps_data+0x9e>
    if (checksum_calc != checksum_recv) {
 800105c:	4283      	cmp	r3, r0
 800105e:	f040 80b4 	bne.w	80011ca <process_gps_data+0x1b6>
    if (strncmp(data + 1, "GNGGA", 5) != 0 && strncmp(data + 1, "GNRMC", 5) != 0) {
 8001062:	2205      	movs	r2, #5
 8001064:	4638      	mov	r0, r7
 8001066:	495c      	ldr	r1, [pc, #368]	@ (80011d8 <process_gps_data+0x1c4>)
 8001068:	f00a ff9c 	bl	800bfa4 <strncmp>
 800106c:	b138      	cbz	r0, 800107e <process_gps_data+0x6a>
 800106e:	2205      	movs	r2, #5
 8001070:	4638      	mov	r0, r7
 8001072:	495a      	ldr	r1, [pc, #360]	@ (80011dc <process_gps_data+0x1c8>)
 8001074:	f00a ff96 	bl	800bfa4 <strncmp>
 8001078:	2800      	cmp	r0, #0
 800107a:	f040 80a9 	bne.w	80011d0 <process_gps_data+0x1bc>
    result->header[5] = '\0';
 800107e:	2600      	movs	r6, #0
    strncpy(result->header, data + 1, 5);
 8001080:	4639      	mov	r1, r7
 8001082:	2205      	movs	r2, #5
 8001084:	4620      	mov	r0, r4
 8001086:	f00a ff9f 	bl	800bfc8 <strncpy>
    strncpy(data_copy, data, sizeof(data_copy));
 800108a:	4629      	mov	r1, r5
 800108c:	2280      	movs	r2, #128	@ 0x80
    result->header[5] = '\0';
 800108e:	7166      	strb	r6, [r4, #5]
    strncpy(data_copy, data, sizeof(data_copy));
 8001090:	a802      	add	r0, sp, #8
 8001092:	f00a ff99 	bl	800bfc8 <strncpy>
    token = strtok_r(data_copy, ",", &saveptr);
 8001096:	4952      	ldr	r1, [pc, #328]	@ (80011e0 <process_gps_data+0x1cc>)
 8001098:	aa01      	add	r2, sp, #4
 800109a:	a802      	add	r0, sp, #8
 800109c:	f00a ffcf 	bl	800c03e <strtok_r>
 80010a0:	4605      	mov	r5, r0
                if (strcmp(result->header, "GNGGA") == 0) {
 80010a2:	4f4d      	ldr	r7, [pc, #308]	@ (80011d8 <process_gps_data+0x1c4>)
        token = strtok_r(NULL, ",", &saveptr);
 80010a4:	f8df a138 	ldr.w	sl, [pc, #312]	@ 80011e0 <process_gps_data+0x1cc>
                strncpy(result->time, token, sizeof(result->time) - 1);
 80010a8:	f104 0907 	add.w	r9, r4, #7
    while (token) {
 80010ac:	b92d      	cbnz	r5, 80010ba <process_gps_data+0xa6>
    return 0; // 成功
 80010ae:	4628      	mov	r0, r5
 80010b0:	e7b8      	b.n	8001024 <process_gps_data+0x10>
        checksum_calc ^= *p;
 80010b2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80010b6:	404b      	eors	r3, r1
    for (const char *p = data + 1; p < checksum_ptr; p++) {
 80010b8:	e7ce      	b.n	8001058 <process_gps_data+0x44>
        switch (field_index) {
 80010ba:	1e73      	subs	r3, r6, #1
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d80d      	bhi.n	80010dc <process_gps_data+0xc8>
 80010c0:	e8df f003 	tbb	[pc, r3]
 80010c4:	2e241405 	.word	0x2e241405
 80010c8:	0c0c5544 	.word	0x0c0c5544
 80010cc:	67          	.byte	0x67
 80010cd:	00          	.byte	0x00
                strncpy(result->time, token, sizeof(result->time) - 1);
 80010ce:	220b      	movs	r2, #11
 80010d0:	4629      	mov	r1, r5
 80010d2:	4648      	mov	r0, r9
 80010d4:	f00a ff78 	bl	800bfc8 <strncpy>
                result->time[sizeof(result->time) - 1] = '\0';
 80010d8:	2300      	movs	r3, #0
 80010da:	74a3      	strb	r3, [r4, #18]
        token = strtok_r(NULL, ",", &saveptr);
 80010dc:	4651      	mov	r1, sl
 80010de:	2000      	movs	r0, #0
 80010e0:	aa01      	add	r2, sp, #4
 80010e2:	f00a ffac 	bl	800c03e <strtok_r>
        field_index++;
 80010e6:	3601      	adds	r6, #1
        token = strtok_r(NULL, ",", &saveptr);
 80010e8:	4605      	mov	r5, r0
        field_index++;
 80010ea:	e7df      	b.n	80010ac <process_gps_data+0x98>
								if (strcmp(result->header, "GNGGA") == 0){
 80010ec:	4639      	mov	r1, r7
            		} else if (strcmp(result->header, "GNRMC") == 0) {
 80010ee:	4620      	mov	r0, r4
 80010f0:	f7ff f82e 	bl	8000150 <strcmp>
 80010f4:	4680      	mov	r8, r0
 80010f6:	2800      	cmp	r0, #0
 80010f8:	d1f0      	bne.n	80010dc <process_gps_data+0xc8>
										strncpy(result->latitude, token, sizeof(result->latitude) - 1);
 80010fa:	220b      	movs	r2, #11
 80010fc:	4629      	mov	r1, r5
 80010fe:	f104 0013 	add.w	r0, r4, #19
 8001102:	f00a ff61 	bl	800bfc8 <strncpy>
										result->latitude[sizeof(result->latitude) - 1] = '\0';
 8001106:	f884 801e 	strb.w	r8, [r4, #30]
 800110a:	e7e7      	b.n	80010dc <process_gps_data+0xc8>
            		if (strcmp(result->header, "GNGGA") == 0){
 800110c:	4639      	mov	r1, r7
 800110e:	4620      	mov	r0, r4
 8001110:	f7ff f81e 	bl	8000150 <strcmp>
 8001114:	b910      	cbnz	r0, 800111c <process_gps_data+0x108>
										result->lat_dir = *token;
 8001116:	782b      	ldrb	r3, [r5, #0]
 8001118:	77e3      	strb	r3, [r4, #31]
 800111a:	e7df      	b.n	80010dc <process_gps_data+0xc8>
            		} else if (strcmp(result->header, "GNRMC") == 0) {
 800111c:	492f      	ldr	r1, [pc, #188]	@ (80011dc <process_gps_data+0x1c8>)
 800111e:	e7e6      	b.n	80010ee <process_gps_data+0xda>
								if (strcmp(result->header, "GNGGA") == 0){
 8001120:	4639      	mov	r1, r7
 8001122:	4620      	mov	r0, r4
 8001124:	f7ff f814 	bl	8000150 <strcmp>
 8001128:	4680      	mov	r8, r0
 800112a:	b940      	cbnz	r0, 800113e <process_gps_data+0x12a>
										strncpy(result->longitude, token, sizeof(result->longitude) - 1);
 800112c:	220b      	movs	r2, #11
 800112e:	4629      	mov	r1, r5
 8001130:	f104 0020 	add.w	r0, r4, #32
 8001134:	f00a ff48 	bl	800bfc8 <strncpy>
										result->longitude[sizeof(result->longitude) - 1] = '\0';
 8001138:	f884 802b 	strb.w	r8, [r4, #43]	@ 0x2b
 800113c:	e7ce      	b.n	80010dc <process_gps_data+0xc8>
								}else if (strcmp(result->header, "GNRMC") == 0) {
 800113e:	4620      	mov	r0, r4
 8001140:	4926      	ldr	r1, [pc, #152]	@ (80011dc <process_gps_data+0x1c8>)
 8001142:	f7ff f805 	bl	8000150 <strcmp>
 8001146:	2800      	cmp	r0, #0
 8001148:	d1c8      	bne.n	80010dc <process_gps_data+0xc8>
 800114a:	e7e4      	b.n	8001116 <process_gps_data+0x102>
								if (strcmp(result->header, "GNGGA") == 0){
 800114c:	4639      	mov	r1, r7
 800114e:	4620      	mov	r0, r4
 8001150:	f7fe fffe 	bl	8000150 <strcmp>
 8001154:	b918      	cbnz	r0, 800115e <process_gps_data+0x14a>
										result->lon_dir = *token;
 8001156:	782b      	ldrb	r3, [r5, #0]
 8001158:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800115c:	e7be      	b.n	80010dc <process_gps_data+0xc8>
								}else if (strcmp(result->header, "GNRMC") == 0) {
 800115e:	4620      	mov	r0, r4
 8001160:	491e      	ldr	r1, [pc, #120]	@ (80011dc <process_gps_data+0x1c8>)
 8001162:	f7fe fff5 	bl	8000150 <strcmp>
 8001166:	4680      	mov	r8, r0
 8001168:	2800      	cmp	r0, #0
 800116a:	d1b7      	bne.n	80010dc <process_gps_data+0xc8>
 800116c:	e7de      	b.n	800112c <process_gps_data+0x118>
								if (strcmp(result->header, "GNGGA") == 0){
 800116e:	4639      	mov	r1, r7
 8001170:	4620      	mov	r0, r4
 8001172:	f7fe ffed 	bl	8000150 <strcmp>
 8001176:	b928      	cbnz	r0, 8001184 <process_gps_data+0x170>
										result->fix_status = (uint8_t)atoi(token);
 8001178:	4628      	mov	r0, r5
 800117a:	f008 fec1 	bl	8009f00 <atoi>
 800117e:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8001182:	e7ab      	b.n	80010dc <process_gps_data+0xc8>
								}else if (strcmp(result->header, "GNRMC") == 0) {
 8001184:	4620      	mov	r0, r4
 8001186:	4915      	ldr	r1, [pc, #84]	@ (80011dc <process_gps_data+0x1c8>)
 8001188:	f7fe ffe2 	bl	8000150 <strcmp>
 800118c:	2800      	cmp	r0, #0
 800118e:	d1a5      	bne.n	80010dc <process_gps_data+0xc8>
 8001190:	e7e1      	b.n	8001156 <process_gps_data+0x142>
                if (strcmp(result->header, "GNGGA") == 0) {
 8001192:	4639      	mov	r1, r7
 8001194:	4620      	mov	r0, r4
 8001196:	f7fe ffdb 	bl	8000150 <strcmp>
 800119a:	b930      	cbnz	r0, 80011aa <process_gps_data+0x196>
                    result->altitude = atof(token);
 800119c:	4628      	mov	r0, r5
 800119e:	f008 feac 	bl	8009efa <atof>
 80011a2:	f7ff fc9b 	bl	8000adc <__aeabi_d2f>
 80011a6:	6320      	str	r0, [r4, #48]	@ 0x30
 80011a8:	e798      	b.n	80010dc <process_gps_data+0xc8>
                } else if (strcmp(result->header, "GNRMC") == 0) {
 80011aa:	4620      	mov	r0, r4
 80011ac:	490b      	ldr	r1, [pc, #44]	@ (80011dc <process_gps_data+0x1c8>)
 80011ae:	f7fe ffcf 	bl	8000150 <strcmp>
 80011b2:	4680      	mov	r8, r0
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d191      	bne.n	80010dc <process_gps_data+0xc8>
                    strncpy(result->date, token, sizeof(result->date) - 1);
 80011b8:	2206      	movs	r2, #6
 80011ba:	4629      	mov	r1, r5
 80011bc:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80011c0:	f00a ff02 	bl	800bfc8 <strncpy>
                    result->date[sizeof(result->date) - 1] = '\0';
 80011c4:	f884 803a 	strb.w	r8, [r4, #58]	@ 0x3a
 80011c8:	e788      	b.n	80010dc <process_gps_data+0xc8>
        return -2; // 校验和错误
 80011ca:	f06f 0001 	mvn.w	r0, #1
 80011ce:	e729      	b.n	8001024 <process_gps_data+0x10>
        return -3; // 不支持的消息类型
 80011d0:	f06f 0002 	mvn.w	r0, #2
 80011d4:	e726      	b.n	8001024 <process_gps_data+0x10>
 80011d6:	bf00      	nop
 80011d8:	0800e879 	.word	0x0800e879
 80011dc:	0800e87f 	.word	0x0800e87f
 80011e0:	0800ebcd 	.word	0x0800ebcd

080011e4 <Format_GPS_Date>:
//格式化日期字符串
void Format_GPS_Date(char* DateResault,char* time,char* date){
 80011e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011e8:	4615      	mov	r5, r2
		char Resault[12] = {0};
 80011ea:	2400      	movs	r4, #0
		// 解析日期字符串
		char dd_part[3] = {0};
 80011ec:	4b29      	ldr	r3, [pc, #164]	@ (8001294 <Format_GPS_Date+0xb0>)
void Format_GPS_Date(char* DateResault,char* time,char* date){
 80011ee:	b08a      	sub	sp, #40	@ 0x28
		char dd_part[3] = {0};
 80011f0:	f8b3 a000 	ldrh.w	sl, [r3]
void Format_GPS_Date(char* DateResault,char* time,char* date){
 80011f4:	4606      	mov	r6, r0
 80011f6:	4689      	mov	r9, r1
		char mm_part[3] = {0};
		char yy_part[3] = {0};

		strncpy(dd_part, date, 2);
 80011f8:	2202      	movs	r2, #2
 80011fa:	4629      	mov	r1, r5
 80011fc:	a803      	add	r0, sp, #12
		char Resault[12] = {0};
 80011fe:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001202:	9409      	str	r4, [sp, #36]	@ 0x24
		char dd_part[3] = {0};
 8001204:	f8ad a00c 	strh.w	sl, [sp, #12]
 8001208:	f88d 400e 	strb.w	r4, [sp, #14]
		char mm_part[3] = {0};
 800120c:	f8ad a010 	strh.w	sl, [sp, #16]
 8001210:	f88d 4012 	strb.w	r4, [sp, #18]
		char yy_part[3] = {0};
 8001214:	f8ad a014 	strh.w	sl, [sp, #20]
 8001218:	f88d 4016 	strb.w	r4, [sp, #22]
		strncpy(dd_part, date, 2);
 800121c:	f00a fed4 	bl	800bfc8 <strncpy>
		strncpy(mm_part, date + 2, 2);
 8001220:	2202      	movs	r2, #2
 8001222:	a804      	add	r0, sp, #16
 8001224:	18a9      	adds	r1, r5, r2
 8001226:	f00a fecf 	bl	800bfc8 <strncpy>
		strncpy(yy_part, date + 4, 2);
 800122a:	1d29      	adds	r1, r5, #4
 800122c:	2202      	movs	r2, #2
 800122e:	a805      	add	r0, sp, #20
 8001230:	f00a feca 	bl	800bfc8 <strncpy>

		int dd = atoi(dd_part);
 8001234:	a803      	add	r0, sp, #12
 8001236:	f008 fe63 	bl	8009f00 <atoi>
 800123a:	4680      	mov	r8, r0
		int mm = atoi(mm_part);
 800123c:	a804      	add	r0, sp, #16
 800123e:	f008 fe5f 	bl	8009f00 <atoi>
 8001242:	4607      	mov	r7, r0
		int yy = atoi(yy_part);
 8001244:	a805      	add	r0, sp, #20
 8001246:	f008 fe5b 	bl	8009f00 <atoi>

		// 解析时间字符串
		char hh_part[3] = {0};
		strncpy(hh_part, time, 2);
 800124a:	4649      	mov	r1, r9
		int yy = atoi(yy_part);
 800124c:	4605      	mov	r5, r0
		strncpy(hh_part, time, 2);
 800124e:	2202      	movs	r2, #2
 8001250:	a806      	add	r0, sp, #24
		char hh_part[3] = {0};
 8001252:	f8ad a018 	strh.w	sl, [sp, #24]
 8001256:	f88d 401a 	strb.w	r4, [sp, #26]
		strncpy(hh_part, time, 2);
 800125a:	f00a feb5 	bl	800bfc8 <strncpy>
		int hh = atoi(hh_part);
 800125e:	a806      	add	r0, sp, #24
 8001260:	f008 fe4e 	bl	8009f00 <atoi>

		// 格式化输出
		snprintf(Resault,12,"%4d/%02d/%02d", 2000 + yy, mm, dd+((hh+8)/24));
 8001264:	2318      	movs	r3, #24
 8001266:	f100 0208 	add.w	r2, r0, #8
 800126a:	fb92 f2f3 	sdiv	r2, r2, r3
 800126e:	4442      	add	r2, r8
 8001270:	e9cd 7200 	strd	r7, r2, [sp]
 8001274:	f505 63fa 	add.w	r3, r5, #2000	@ 0x7d0
 8001278:	210c      	movs	r1, #12
 800127a:	4a07      	ldr	r2, [pc, #28]	@ (8001298 <Format_GPS_Date+0xb4>)
 800127c:	a807      	add	r0, sp, #28
 800127e:	f00a fd31 	bl	800bce4 <sniprintf>
		strncpy(DateResault, Resault, 15);
 8001282:	220f      	movs	r2, #15
 8001284:	4630      	mov	r0, r6
 8001286:	a907      	add	r1, sp, #28
 8001288:	f00a fe9e 	bl	800bfc8 <strncpy>
}
 800128c:	b00a      	add	sp, #40	@ 0x28
 800128e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001292:	bf00      	nop
 8001294:	0800e840 	.word	0x0800e840
 8001298:	0800e885 	.word	0x0800e885

0800129c <Format_GPS_Time>:

//格式化日期时间字符串
void Format_GPS_Time(char* TimeResault,char* time){
		char Resault[10] = {0};
 800129c:	2300      	movs	r3, #0
void Format_GPS_Time(char* TimeResault,char* time){
 800129e:	b570      	push	{r4, r5, r6, lr}
		// 解析时间字符串
		char hh_part[3] = {0};
 80012a0:	4a20      	ldr	r2, [pc, #128]	@ (8001324 <Format_GPS_Time+0x88>)
void Format_GPS_Time(char* TimeResault,char* time){
 80012a2:	b088      	sub	sp, #32
		char hh_part[3] = {0};
 80012a4:	8812      	ldrh	r2, [r2, #0]
void Format_GPS_Time(char* TimeResault,char* time){
 80012a6:	4605      	mov	r5, r0
		char hh_part[3] = {0};
 80012a8:	f8ad 2008 	strh.w	r2, [sp, #8]
		char mi_part[3] = {0};
 80012ac:	f8ad 200c 	strh.w	r2, [sp, #12]
		char ss_part[3] = {0};
 80012b0:	f8ad 2010 	strh.w	r2, [sp, #16]

		strncpy(hh_part, time, 2);
 80012b4:	a802      	add	r0, sp, #8
 80012b6:	2202      	movs	r2, #2
		char Resault[10] = {0};
 80012b8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80012bc:	f8ad 301c 	strh.w	r3, [sp, #28]
		char hh_part[3] = {0};
 80012c0:	f88d 300a 	strb.w	r3, [sp, #10]
		char mi_part[3] = {0};
 80012c4:	f88d 300e 	strb.w	r3, [sp, #14]
		char ss_part[3] = {0};
 80012c8:	f88d 3012 	strb.w	r3, [sp, #18]
void Format_GPS_Time(char* TimeResault,char* time){
 80012cc:	460c      	mov	r4, r1
		strncpy(hh_part, time, 2);
 80012ce:	f00a fe7b 	bl	800bfc8 <strncpy>
		strncpy(mi_part, time + 2, 2);
 80012d2:	2202      	movs	r2, #2
 80012d4:	a803      	add	r0, sp, #12
 80012d6:	18a1      	adds	r1, r4, r2
 80012d8:	f00a fe76 	bl	800bfc8 <strncpy>
		strncpy(ss_part, time + 4, 2);
 80012dc:	1d21      	adds	r1, r4, #4
 80012de:	2202      	movs	r2, #2
 80012e0:	a804      	add	r0, sp, #16
 80012e2:	f00a fe71 	bl	800bfc8 <strncpy>

		int hh = atoi(hh_part);
 80012e6:	a802      	add	r0, sp, #8
 80012e8:	f008 fe0a 	bl	8009f00 <atoi>
 80012ec:	4604      	mov	r4, r0
		int mi = atoi(mi_part);
 80012ee:	a803      	add	r0, sp, #12
 80012f0:	f008 fe06 	bl	8009f00 <atoi>
 80012f4:	4606      	mov	r6, r0
		int ss = atoi(ss_part);
 80012f6:	a804      	add	r0, sp, #16
 80012f8:	f008 fe02 	bl	8009f00 <atoi>

		// 格式化输出
		sprintf(Resault,"%02d:%02d:%02d", (hh+8)%24, mi, ss);
 80012fc:	2218      	movs	r2, #24
 80012fe:	f104 0108 	add.w	r1, r4, #8
 8001302:	fb91 f4f2 	sdiv	r4, r1, r2
 8001306:	4633      	mov	r3, r6
 8001308:	fb02 1214 	mls	r2, r2, r4, r1
 800130c:	9000      	str	r0, [sp, #0]
 800130e:	4906      	ldr	r1, [pc, #24]	@ (8001328 <Format_GPS_Time+0x8c>)
 8001310:	a805      	add	r0, sp, #20
 8001312:	f00a fd1b 	bl	800bd4c <siprintf>
		strncpy(TimeResault, Resault, 12);
 8001316:	220c      	movs	r2, #12
 8001318:	4628      	mov	r0, r5
 800131a:	a905      	add	r1, sp, #20
 800131c:	f00a fe54 	bl	800bfc8 <strncpy>
}
 8001320:	b008      	add	sp, #32
 8001322:	bd70      	pop	{r4, r5, r6, pc}
 8001324:	0800e840 	.word	0x0800e840
 8001328:	0800e893 	.word	0x0800e893

0800132c <Format_FileName_Date>:

//格式化日期字符串(2025-02-22)
void Format_FileName_Date(char* NameResault,char* time,char* date){
 800132c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001330:	4614      	mov	r4, r2
//		char Resault[21] = {0};
		// 解析日期字符串
		char dd_part[3] = {0};
 8001332:	2500      	movs	r5, #0
 8001334:	4b25      	ldr	r3, [pc, #148]	@ (80013cc <Format_FileName_Date+0xa0>)
void Format_FileName_Date(char* NameResault,char* time,char* date){
 8001336:	b086      	sub	sp, #24
		char dd_part[3] = {0};
 8001338:	f8b3 a000 	ldrh.w	sl, [r3]
void Format_FileName_Date(char* NameResault,char* time,char* date){
 800133c:	4606      	mov	r6, r0
 800133e:	4689      	mov	r9, r1
		char mm_part[3] = {0};
		char yy_part[3] = {0};

		strncpy(dd_part, date, 2);
 8001340:	2202      	movs	r2, #2
 8001342:	4621      	mov	r1, r4
 8001344:	a802      	add	r0, sp, #8
		char dd_part[3] = {0};
 8001346:	f8ad a008 	strh.w	sl, [sp, #8]
 800134a:	f88d 500a 	strb.w	r5, [sp, #10]
		char mm_part[3] = {0};
 800134e:	f8ad a00c 	strh.w	sl, [sp, #12]
 8001352:	f88d 500e 	strb.w	r5, [sp, #14]
		char yy_part[3] = {0};
 8001356:	f8ad a010 	strh.w	sl, [sp, #16]
 800135a:	f88d 5012 	strb.w	r5, [sp, #18]
		strncpy(dd_part, date, 2);
 800135e:	f00a fe33 	bl	800bfc8 <strncpy>
		strncpy(mm_part, date + 2, 2);
 8001362:	2202      	movs	r2, #2
 8001364:	a803      	add	r0, sp, #12
 8001366:	18a1      	adds	r1, r4, r2
 8001368:	f00a fe2e 	bl	800bfc8 <strncpy>
		strncpy(yy_part, date + 4, 2);
 800136c:	1d21      	adds	r1, r4, #4
 800136e:	2202      	movs	r2, #2
 8001370:	a804      	add	r0, sp, #16
 8001372:	f00a fe29 	bl	800bfc8 <strncpy>

		int dd = atoi(dd_part);
 8001376:	a802      	add	r0, sp, #8
 8001378:	f008 fdc2 	bl	8009f00 <atoi>
 800137c:	4680      	mov	r8, r0
		int mm = atoi(mm_part);
 800137e:	a803      	add	r0, sp, #12
 8001380:	f008 fdbe 	bl	8009f00 <atoi>
 8001384:	4607      	mov	r7, r0
		int yy = atoi(yy_part);
 8001386:	a804      	add	r0, sp, #16
 8001388:	f008 fdba 	bl	8009f00 <atoi>

		// 解析时间字符串
		char hh_part[3] = {0};
		strncpy(hh_part, time, 2);
 800138c:	4649      	mov	r1, r9
		int yy = atoi(yy_part);
 800138e:	4604      	mov	r4, r0
		strncpy(hh_part, time, 2);
 8001390:	2202      	movs	r2, #2
 8001392:	a805      	add	r0, sp, #20
		char hh_part[3] = {0};
 8001394:	f8ad a014 	strh.w	sl, [sp, #20]
 8001398:	f88d 5016 	strb.w	r5, [sp, #22]
		strncpy(hh_part, time, 2);
 800139c:	f00a fe14 	bl	800bfc8 <strncpy>
		int hh = atoi(hh_part);
 80013a0:	a805      	add	r0, sp, #20
 80013a2:	f008 fdad 	bl	8009f00 <atoi>
		// 格式化输出
		snprintf(NameResault,12,"%4d%02d%02d", 2000 + yy, mm, dd+((hh+8)/24));
 80013a6:	2318      	movs	r3, #24
 80013a8:	f100 0208 	add.w	r2, r0, #8
 80013ac:	fb92 f2f3 	sdiv	r2, r2, r3
 80013b0:	4442      	add	r2, r8
 80013b2:	e9cd 7200 	strd	r7, r2, [sp]
 80013b6:	210c      	movs	r1, #12
 80013b8:	4630      	mov	r0, r6
 80013ba:	4a05      	ldr	r2, [pc, #20]	@ (80013d0 <Format_FileName_Date+0xa4>)
 80013bc:	f504 63fa 	add.w	r3, r4, #2000	@ 0x7d0
 80013c0:	f00a fc90 	bl	800bce4 <sniprintf>
//		strncpy(NameResault, Resault, 8);
}
 80013c4:	b006      	add	sp, #24
 80013c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013ca:	bf00      	nop
 80013cc:	0800e840 	.word	0x0800e840
 80013d0:	0800e8a2 	.word	0x0800e8a2

080013d4 <FormatLongitude>:

//格式化经度字符串
void FormatLongitude(char* LongitudeStr, char* Longitude, char Lon_dir) {
 80013d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    // 解析输入字符串格式：DDDMM.MMMMM
    char dd_part[4] = {0};      // 度（3位）
 80013d6:	2300      	movs	r3, #0
void FormatLongitude(char* LongitudeStr, char* Longitude, char Lon_dir) {
 80013d8:	460e      	mov	r6, r1
 80013da:	4615      	mov	r5, r2
    char mm_part[3] = {0};      // 分（2位）
 80013dc:	4a10      	ldr	r2, [pc, #64]	@ (8001420 <FormatLongitude+0x4c>)
void FormatLongitude(char* LongitudeStr, char* Longitude, char Lon_dir) {
 80013de:	4604      	mov	r4, r0
    char mm_part[3] = {0};      // 分（2位）
 80013e0:	8812      	ldrh	r2, [r2, #0]
    char decimal_part[6] = {0}; // 小数分（最多5位）

    // 分割字符串
    strncpy(dd_part, Longitude, 3);
 80013e2:	a803      	add	r0, sp, #12
    char mm_part[3] = {0};      // 分（2位）
 80013e4:	f8ad 2008 	strh.w	r2, [sp, #8]
    strncpy(dd_part, Longitude, 3);
 80013e8:	2203      	movs	r2, #3
    char dd_part[4] = {0};      // 度（3位）
 80013ea:	9303      	str	r3, [sp, #12]
    char mm_part[3] = {0};      // 分（2位）
 80013ec:	f88d 300a 	strb.w	r3, [sp, #10]
    strncpy(dd_part, Longitude, 3);
 80013f0:	f00a fdea 	bl	800bfc8 <strncpy>
    strncpy(mm_part, Longitude + 3, 2);
 80013f4:	1cf1      	adds	r1, r6, #3
 80013f6:	2202      	movs	r2, #2
 80013f8:	a802      	add	r0, sp, #8
 80013fa:	f00a fde5 	bl	800bfc8 <strncpy>
    if (dot_ptr) {
        strncpy(decimal_part, dot_ptr + 1, 5); // 取小数点后最多5位
    }

    // 转换为数值
    int dd = atoi(dd_part);
 80013fe:	a803      	add	r0, sp, #12
 8001400:	f008 fd7e 	bl	8009f00 <atoi>
 8001404:	4606      	mov	r6, r0
    int mm = atoi(mm_part);
 8001406:	a802      	add	r0, sp, #8
 8001408:	f008 fd7a 	bl	8009f00 <atoi>
//    int ss = (int)total_seconds;
//    int decimals = (int)((total_seconds - ss) * 1000.0 + 0.5); // 四舍五入到三位小数

    // 格式化输出到缓冲区（最大长度示例：E123°45'67.890）
//    snprintf(LongitudeStr, 20, "%c%03d°%02d’%02d.%03d\"", Lon_dir, dd, mm, ss, decimals);
    snprintf(LongitudeStr, 20, "%c%d°%02d’", Lon_dir, dd, mm);
 800140c:	462b      	mov	r3, r5
 800140e:	e9cd 6000 	strd	r6, r0, [sp]
 8001412:	2114      	movs	r1, #20
 8001414:	4620      	mov	r0, r4
 8001416:	4a03      	ldr	r2, [pc, #12]	@ (8001424 <FormatLongitude+0x50>)
 8001418:	f00a fc64 	bl	800bce4 <sniprintf>
}
 800141c:	b004      	add	sp, #16
 800141e:	bd70      	pop	{r4, r5, r6, pc}
 8001420:	0800e840 	.word	0x0800e840
 8001424:	0800e8ae 	.word	0x0800e8ae

08001428 <FormatLatitude>:

//格式化纬度字符串
void FormatLatitude(char* LatitudeStr, char* Latitude, char Lat_dir) {
 8001428:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    // 解析输入字符串格式：DDMM.MMMMM
    char dd_part[3] = {0};      // 度（2位）
 800142a:	4b14      	ldr	r3, [pc, #80]	@ (800147c <FormatLatitude+0x54>)
void FormatLatitude(char* LatitudeStr, char* Latitude, char Lat_dir) {
 800142c:	4615      	mov	r5, r2
    char dd_part[3] = {0};      // 度（2位）
 800142e:	881a      	ldrh	r2, [r3, #0]
 8001430:	2300      	movs	r3, #0
void FormatLatitude(char* LatitudeStr, char* Latitude, char Lat_dir) {
 8001432:	4604      	mov	r4, r0
    char dd_part[3] = {0};      // 度（2位）
 8001434:	f8ad 2008 	strh.w	r2, [sp, #8]
    char mm_part[3] = {0};      // 分（2位）
 8001438:	f8ad 200c 	strh.w	r2, [sp, #12]
    char decimal_part[6] = {0}; // 小数分（最多5位）

    // 分割字符串
    strncpy(dd_part, Latitude, 2);
 800143c:	a802      	add	r0, sp, #8
 800143e:	2202      	movs	r2, #2
    char dd_part[3] = {0};      // 度（2位）
 8001440:	f88d 300a 	strb.w	r3, [sp, #10]
    char mm_part[3] = {0};      // 分（2位）
 8001444:	f88d 300e 	strb.w	r3, [sp, #14]
void FormatLatitude(char* LatitudeStr, char* Latitude, char Lat_dir) {
 8001448:	460e      	mov	r6, r1
    strncpy(dd_part, Latitude, 2);
 800144a:	f00a fdbd 	bl	800bfc8 <strncpy>
    strncpy(mm_part, Latitude + 2, 2);
 800144e:	2202      	movs	r2, #2
 8001450:	a803      	add	r0, sp, #12
 8001452:	18b1      	adds	r1, r6, r2
 8001454:	f00a fdb8 	bl	800bfc8 <strncpy>
    if (dot_ptr) {
        strncpy(decimal_part, dot_ptr + 1, 5); // 取小数点后最多5位
    }

    // 转换为数值
    int dd = atoi(dd_part);
 8001458:	a802      	add	r0, sp, #8
 800145a:	f008 fd51 	bl	8009f00 <atoi>
 800145e:	4606      	mov	r6, r0
    int mm = atoi(mm_part);
 8001460:	a803      	add	r0, sp, #12
 8001462:	f008 fd4d 	bl	8009f00 <atoi>
//    int ss = (int)total_seconds;
//    int decimals = (int)((total_seconds - ss) * 1000.0 + 0.5); // 四舍五入到三位小数

    // 格式化输出到缓冲区（最大长度示例：N23°45'67.890）
//    snprintf(LatitudeStr, 20, "%c%02d°%02d’%02d.%03d\"", Lat_dir, dd, mm, ss, decimals);
    snprintf(LatitudeStr, 20, "%c%d°%02d’", Lat_dir, dd, mm);
 8001466:	462b      	mov	r3, r5
 8001468:	e9cd 6000 	strd	r6, r0, [sp]
 800146c:	2114      	movs	r1, #20
 800146e:	4620      	mov	r0, r4
 8001470:	4a03      	ldr	r2, [pc, #12]	@ (8001480 <FormatLatitude+0x58>)
 8001472:	f00a fc37 	bl	800bce4 <sniprintf>
}
 8001476:	b004      	add	sp, #16
 8001478:	bd70      	pop	{r4, r5, r6, pc}
 800147a:	bf00      	nop
 800147c:	0800e840 	.word	0x0800e840
 8001480:	0800e8ae 	.word	0x0800e8ae

08001484 <FormatAltitude>:

//海拔数据格式化（-9999.9~99999.9）
void FormatAltitude(char* AltitudeStr, float Altitude){
 8001484:	b513      	push	{r0, r1, r4, lr}
 8001486:	4604      	mov	r4, r0
	snprintf(AltitudeStr, 10, "%.1f", Altitude);
 8001488:	4608      	mov	r0, r1
 800148a:	f7fe ffd7 	bl	800043c <__aeabi_f2d>
 800148e:	4a04      	ldr	r2, [pc, #16]	@ (80014a0 <FormatAltitude+0x1c>)
 8001490:	e9cd 0100 	strd	r0, r1, [sp]
 8001494:	210a      	movs	r1, #10
 8001496:	4620      	mov	r0, r4
 8001498:	f00a fc24 	bl	800bce4 <sniprintf>
}
 800149c:	b002      	add	sp, #8
 800149e:	bd10      	pop	{r4, pc}
 80014a0:	0800e8bc 	.word	0x0800e8bc

080014a4 <HMI_init>:
uint8_t focus_key_pressed = 0;

enum HMI_PAGE page_location;
enum CONFIRM_RESAULT sec_confirm_resault;

void HMI_init(void){
 80014a4:	b538      	push	{r3, r4, r5, lr}
  refresh_bat_vlt();

	sprintf(Tx_Buffer,"Main.n0.val=0\xff\xff\xff");
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
	memset(Tx_Buffer,'\0',sizeof(Tx_Buffer));
 80014a6:	2532      	movs	r5, #50	@ 0x32
	sprintf(Tx_Buffer,"Main.n0.val=0\xff\xff\xff");
 80014a8:	4c1d      	ldr	r4, [pc, #116]	@ (8001520 <HMI_init+0x7c>)
  refresh_bat_vlt();
 80014aa:	f001 fa45 	bl	8002938 <refresh_bat_vlt>
	sprintf(Tx_Buffer,"Main.n0.val=0\xff\xff\xff");
 80014ae:	491d      	ldr	r1, [pc, #116]	@ (8001524 <HMI_init+0x80>)
 80014b0:	4620      	mov	r0, r4
 80014b2:	f00a fe4e 	bl	800c152 <strcpy>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80014b6:	4620      	mov	r0, r4
 80014b8:	f006 fb40 	bl	8007b3c <USART1_Tx_HMIdata>
	memset(Tx_Buffer,'\0',sizeof(Tx_Buffer));
 80014bc:	462a      	mov	r2, r5
 80014be:	2100      	movs	r1, #0
 80014c0:	4620      	mov	r0, r4
 80014c2:	f00a fd4b 	bl	800bf5c <memset>

	sprintf(Tx_Buffer,"Main.t3.txt=\"0.0\"\xff\xff\xff");
 80014c6:	4918      	ldr	r1, [pc, #96]	@ (8001528 <HMI_init+0x84>)
 80014c8:	4620      	mov	r0, r4
 80014ca:	f00a fe42 	bl	800c152 <strcpy>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80014ce:	4620      	mov	r0, r4
 80014d0:	f006 fb34 	bl	8007b3c <USART1_Tx_HMIdata>
	memset(Tx_Buffer,'\0',sizeof(Tx_Buffer));
 80014d4:	462a      	mov	r2, r5
 80014d6:	2100      	movs	r1, #0
 80014d8:	4620      	mov	r0, r4
 80014da:	f00a fd3f 	bl	800bf5c <memset>

	sprintf(Tx_Buffer,"Main.t0.txt=\"启动中...\"\xff\xff\xff");
 80014de:	4913      	ldr	r1, [pc, #76]	@ (800152c <HMI_init+0x88>)
 80014e0:	4620      	mov	r0, r4
 80014e2:	f00a fe36 	bl	800c152 <strcpy>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80014e6:	4620      	mov	r0, r4
 80014e8:	f006 fb28 	bl	8007b3c <USART1_Tx_HMIdata>
	memset(Tx_Buffer,'\0',sizeof(Tx_Buffer));
 80014ec:	462a      	mov	r2, r5
 80014ee:	2100      	movs	r1, #0
 80014f0:	4620      	mov	r0, r4
 80014f2:	f00a fd33 	bl	800bf5c <memset>

	sprintf(Tx_Buffer,"Main.t8.txt=\"\"\xff\xff\xff");
 80014f6:	490e      	ldr	r1, [pc, #56]	@ (8001530 <HMI_init+0x8c>)
 80014f8:	4620      	mov	r0, r4
 80014fa:	f00a fe2a 	bl	800c152 <strcpy>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80014fe:	4620      	mov	r0, r4
 8001500:	f006 fb1c 	bl	8007b3c <USART1_Tx_HMIdata>
	memset(Tx_Buffer,'\0',sizeof(Tx_Buffer));
 8001504:	462a      	mov	r2, r5
 8001506:	2100      	movs	r1, #0
 8001508:	4620      	mov	r0, r4
 800150a:	f00a fd27 	bl	800bf5c <memset>

	sprintf(Tx_Buffer,"page Main\xff\xff\xff");
 800150e:	4620      	mov	r0, r4
 8001510:	4908      	ldr	r1, [pc, #32]	@ (8001534 <HMI_init+0x90>)
 8001512:	f00a fe1e 	bl	800c152 <strcpy>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001516:	4620      	mov	r0, r4
}
 8001518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800151c:	f006 bb0e 	b.w	8007b3c <USART1_Tx_HMIdata>
 8001520:	20000b8a 	.word	0x20000b8a
 8001524:	0800e8c1 	.word	0x0800e8c1
 8001528:	0800e8d2 	.word	0x0800e8d2
 800152c:	0800e8e7 	.word	0x0800e8e7
 8001530:	0800e905 	.word	0x0800e905
 8001534:	0800e917 	.word	0x0800e917

08001538 <Send_To_HMI>:

void Send_To_HMI(uint8_t index,uint8_t* name) {
 8001538:	b510      	push	{r4, lr}
    /* 构造HMI指令并发送 */
    sprintf(Tx_Buffer, "File_M.t%d.txt=\"%s\"\xff\xff\xff", index, name);
 800153a:	4c06      	ldr	r4, [pc, #24]	@ (8001554 <Send_To_HMI+0x1c>)
void Send_To_HMI(uint8_t index,uint8_t* name) {
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
    sprintf(Tx_Buffer, "File_M.t%d.txt=\"%s\"\xff\xff\xff", index, name);
 8001540:	4620      	mov	r0, r4
 8001542:	4905      	ldr	r1, [pc, #20]	@ (8001558 <Send_To_HMI+0x20>)
 8001544:	f00a fc02 	bl	800bd4c <siprintf>
    USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001548:	4620      	mov	r0, r4
}
 800154a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800154e:	f006 baf5 	b.w	8007b3c <USART1_Tx_HMIdata>
 8001552:	bf00      	nop
 8001554:	20000b8a 	.word	0x20000b8a
 8001558:	0800e924 	.word	0x0800e924

0800155c <Clear_HMI_Item>:

void Clear_HMI_Item(uint8_t index) {
 800155c:	b510      	push	{r4, lr}
    /* 清空指定位置的显示 */
    sprintf(Tx_Buffer, "File_M.t%d.txt=\"\"\xff\xff\xff", index);
 800155e:	4c05      	ldr	r4, [pc, #20]	@ (8001574 <Clear_HMI_Item+0x18>)
void Clear_HMI_Item(uint8_t index) {
 8001560:	4602      	mov	r2, r0
    sprintf(Tx_Buffer, "File_M.t%d.txt=\"\"\xff\xff\xff", index);
 8001562:	4905      	ldr	r1, [pc, #20]	@ (8001578 <Clear_HMI_Item+0x1c>)
 8001564:	4620      	mov	r0, r4
 8001566:	f00a fbf1 	bl	800bd4c <siprintf>
    USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800156a:	4620      	mov	r0, r4
}
 800156c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001570:	f006 bae4 	b.w	8007b3c <USART1_Tx_HMIdata>
 8001574:	20000b8a 	.word	0x20000b8a
 8001578:	0800e93b 	.word	0x0800e93b

0800157c <Back_to_MainPage>:

void Back_to_MainPage(void){
	page_location = Main_page;
 800157c:	2200      	movs	r2, #0
void Back_to_MainPage(void){
 800157e:	b510      	push	{r4, lr}
	sprintf(Tx_Buffer,"page Main\xff\xff\xff");
 8001580:	4c13      	ldr	r4, [pc, #76]	@ (80015d0 <Back_to_MainPage+0x54>)
	page_location = Main_page;
 8001582:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <Back_to_MainPage+0x58>)
	sprintf(Tx_Buffer,"page Main\xff\xff\xff");
 8001584:	4914      	ldr	r1, [pc, #80]	@ (80015d8 <Back_to_MainPage+0x5c>)
 8001586:	4620      	mov	r0, r4
	page_location = Main_page;
 8001588:	701a      	strb	r2, [r3, #0]
	sprintf(Tx_Buffer,"page Main\xff\xff\xff");
 800158a:	f00a fde2 	bl	800c152 <strcpy>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800158e:	4620      	mov	r0, r4
 8001590:	f006 fad4 	bl	8007b3c <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"Main.n2.val=%d\xff\xff\xff",total_Times);
 8001594:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <Back_to_MainPage+0x60>)
 8001596:	4912      	ldr	r1, [pc, #72]	@ (80015e0 <Back_to_MainPage+0x64>)
 8001598:	881a      	ldrh	r2, [r3, #0]
 800159a:	4620      	mov	r0, r4
 800159c:	f00a fbd6 	bl	800bd4c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80015a0:	4620      	mov	r0, r4
 80015a2:	f006 facb 	bl	8007b3c <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"Main.n3.val=%d\xff\xff\xff",total_inject_Dosage);
 80015a6:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <Back_to_MainPage+0x68>)
 80015a8:	490f      	ldr	r1, [pc, #60]	@ (80015e8 <Back_to_MainPage+0x6c>)
 80015aa:	881a      	ldrh	r2, [r3, #0]
 80015ac:	4620      	mov	r0, r4
 80015ae:	f00a fbcd 	bl	800bd4c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80015b2:	4620      	mov	r0, r4
 80015b4:	f006 fac2 	bl	8007b3c <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"Main.n1.val=%d\xff\xff\xff",current_TreeNo);
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <Back_to_MainPage+0x70>)
 80015ba:	4620      	mov	r0, r4
 80015bc:	881a      	ldrh	r2, [r3, #0]
 80015be:	490c      	ldr	r1, [pc, #48]	@ (80015f0 <Back_to_MainPage+0x74>)
 80015c0:	f00a fbc4 	bl	800bd4c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80015c4:	4620      	mov	r0, r4
}
 80015c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80015ca:	f006 bab7 	b.w	8007b3c <USART1_Tx_HMIdata>
 80015ce:	bf00      	nop
 80015d0:	20000b8a 	.word	0x20000b8a
 80015d4:	20000370 	.word	0x20000370
 80015d8:	0800e917 	.word	0x0800e917
 80015dc:	20000a4a 	.word	0x20000a4a
 80015e0:	0800e843 	.word	0x0800e843
 80015e4:	20000a4c 	.word	0x20000a4c
 80015e8:	0800e855 	.word	0x0800e855
 80015ec:	200008c2 	.word	0x200008c2
 80015f0:	0800e867 	.word	0x0800e867

080015f4 <Refresh_Display>:

void Refresh_Display() {
 80015f4:	b570      	push	{r4, r5, r6, lr}
    // 计算显示标志
    paging.show_prev_more = (paging.start_index > 0);
 80015f6:	4c1e      	ldr	r4, [pc, #120]	@ (8001670 <Refresh_Display+0x7c>)
    paging.show_next_more = (paging.start_index + MAX_DISPLAY_ITEMS < paging.file_count);
 80015f8:	2500      	movs	r5, #0
    paging.show_prev_more = (paging.start_index > 0);
 80015fa:	8863      	ldrh	r3, [r4, #2]
 80015fc:	1e1a      	subs	r2, r3, #0
 80015fe:	bf18      	it	ne
 8001600:	2201      	movne	r2, #1
 8001602:	7322      	strb	r2, [r4, #12]
    paging.show_next_more = (paging.start_index + MAX_DISPLAY_ITEMS < paging.file_count);
 8001604:	8822      	ldrh	r2, [r4, #0]
 8001606:	3306      	adds	r3, #6
 8001608:	4293      	cmp	r3, r2
 800160a:	bfac      	ite	ge
 800160c:	2300      	movge	r3, #0
 800160e:	2301      	movlt	r3, #1
 8001610:	7363      	strb	r3, [r4, #13]

    // 清空显示
    for(uint8_t i=0; i<MAX_DISPLAY_ITEMS; i++)
        Clear_HMI_Item(i);
 8001612:	b2e8      	uxtb	r0, r5
    for(uint8_t i=0; i<MAX_DISPLAY_ITEMS; i++)
 8001614:	3501      	adds	r5, #1
        Clear_HMI_Item(i);
 8001616:	f7ff ffa1 	bl	800155c <Clear_HMI_Item>
    for(uint8_t i=0; i<MAX_DISPLAY_ITEMS; i++)
 800161a:	2d06      	cmp	r5, #6
 800161c:	d1f9      	bne.n	8001612 <Refresh_Display+0x1e>

    uint8_t display_pos = 0;

    // 显示前页提示
    if(paging.show_prev_more) {
 800161e:	7b20      	ldrb	r0, [r4, #12]
 8001620:	b120      	cbz	r0, 800162c <Refresh_Display+0x38>
        Send_To_HMI(display_pos++, "...");
 8001622:	2000      	movs	r0, #0
 8001624:	4913      	ldr	r1, [pc, #76]	@ (8001674 <Refresh_Display+0x80>)
 8001626:	f7ff ff87 	bl	8001538 <Send_To_HMI>
 800162a:	2001      	movs	r0, #1

    // 显示当前页文件
    for(uint8_t i=0; i < MAX_DISPLAY_ITEMS - paging.show_prev_more - paging.show_next_more; i++) {
        uint16_t actual_index = paging.start_index + i;
        if(actual_index < paging.file_count) {
            Send_To_HMI(display_pos++, paging.file_list[actual_index]);
 800162c:	2500      	movs	r5, #0
    for(uint8_t i=0; i < MAX_DISPLAY_ITEMS - paging.show_prev_more - paging.show_next_more; i++) {
 800162e:	7b22      	ldrb	r2, [r4, #12]
 8001630:	7b61      	ldrb	r1, [r4, #13]
 8001632:	f1c2 0206 	rsb	r2, r2, #6
 8001636:	b2eb      	uxtb	r3, r5
 8001638:	1a52      	subs	r2, r2, r1
 800163a:	4293      	cmp	r3, r2
 800163c:	db06      	blt.n	800164c <Refresh_Display+0x58>
        }
    }

    // 显示后页提示
    if(paging.show_next_more) {
 800163e:	b1a9      	cbz	r1, 800166c <Refresh_Display+0x78>
        Send_To_HMI(MAX_DISPLAY_ITEMS-1, "...");
    }
}
 8001640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        Send_To_HMI(MAX_DISPLAY_ITEMS-1, "...");
 8001644:	2005      	movs	r0, #5
 8001646:	490b      	ldr	r1, [pc, #44]	@ (8001674 <Refresh_Display+0x80>)
 8001648:	f7ff bf76 	b.w	8001538 <Send_To_HMI>
        uint16_t actual_index = paging.start_index + i;
 800164c:	8862      	ldrh	r2, [r4, #2]
 800164e:	4413      	add	r3, r2
        if(actual_index < paging.file_count) {
 8001650:	8822      	ldrh	r2, [r4, #0]
        uint16_t actual_index = paging.start_index + i;
 8001652:	b29b      	uxth	r3, r3
        if(actual_index < paging.file_count) {
 8001654:	429a      	cmp	r2, r3
 8001656:	d907      	bls.n	8001668 <Refresh_Display+0x74>
            Send_To_HMI(display_pos++, paging.file_list[actual_index]);
 8001658:	68a2      	ldr	r2, [r4, #8]
 800165a:	1c46      	adds	r6, r0, #1
 800165c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001660:	b2f6      	uxtb	r6, r6
 8001662:	f7ff ff69 	bl	8001538 <Send_To_HMI>
 8001666:	4630      	mov	r0, r6
    for(uint8_t i=0; i < MAX_DISPLAY_ITEMS - paging.show_prev_more - paging.show_next_more; i++) {
 8001668:	3501      	adds	r5, #1
 800166a:	e7e0      	b.n	800162e <Refresh_Display+0x3a>
}
 800166c:	bd70      	pop	{r4, r5, r6, pc}
 800166e:	bf00      	nop
 8001670:	20000374 	.word	0x20000374
 8001674:	0800e950 	.word	0x0800e950

08001678 <Cache_File_List>:

void Cache_File_List() {
 8001678:	b570      	push	{r4, r5, r6, lr}
    DIR dir;
    FILINFO fno;
    uint16_t count = 0;

    // 释放旧内存
    if(paging.file_list != NULL) {
 800167a:	4c2f      	ldr	r4, [pc, #188]	@ (8001738 <Cache_File_List+0xc0>)
void Cache_File_List() {
 800167c:	b0de      	sub	sp, #376	@ 0x178
    if(paging.file_list != NULL) {
 800167e:	68a3      	ldr	r3, [r4, #8]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d13e      	bne.n	8001702 <Cache_File_List+0x8a>
            free(paging.file_list[i]);
        free(paging.file_list);
    }
    // 第一次遍历统计数量
//    f_mount(&fs, "0:", 1);
    f_opendir(&dir, "/");
 8001684:	4668      	mov	r0, sp
 8001686:	492d      	ldr	r1, [pc, #180]	@ (800173c <Cache_File_List+0xc4>)
 8001688:	f003 fd5e 	bl	8005148 <f_opendir>
    uint16_t count = 0;
 800168c:	2500      	movs	r5, #0
    while(f_readdir(&dir, &fno) == FR_OK && fno.fname[0]) {
 800168e:	4668      	mov	r0, sp
 8001690:	a916      	add	r1, sp, #88	@ 0x58
 8001692:	f003 fdc4 	bl	800521e <f_readdir>
 8001696:	b910      	cbnz	r0, 800169e <Cache_File_List+0x26>
 8001698:	f89d 3072 	ldrb.w	r3, [sp, #114]	@ 0x72
 800169c:	bb9b      	cbnz	r3, 8001706 <Cache_File_List+0x8e>
        if(!(fno.fattrib & AM_DIR))
            count++;
    }
    f_closedir(&dir);
 800169e:	4668      	mov	r0, sp
 80016a0:	f003 fda9 	bl	80051f6 <f_closedir>

    // 分配内存
    paging.file_list = malloc(count * sizeof(char*));
 80016a4:	00a8      	lsls	r0, r5, #2
 80016a6:	f008 fc2f 	bl	8009f08 <malloc>
    paging.file_count = 0;
 80016aa:	2300      	movs	r3, #0
    paging.file_list = malloc(count * sizeof(char*));
 80016ac:	60a0      	str	r0, [r4, #8]

    // 第二次遍历存储文件名
    f_opendir(&dir, "/");
 80016ae:	4923      	ldr	r1, [pc, #140]	@ (800173c <Cache_File_List+0xc4>)
 80016b0:	4668      	mov	r0, sp
    paging.file_count = 0;
 80016b2:	8023      	strh	r3, [r4, #0]
    f_opendir(&dir, "/");
 80016b4:	f003 fd48 	bl	8005148 <f_opendir>
    while(f_readdir(&dir, &fno) == FR_OK && fno.fname[0]) {
 80016b8:	4668      	mov	r0, sp
 80016ba:	a916      	add	r1, sp, #88	@ 0x58
 80016bc:	f003 fdaf 	bl	800521e <f_readdir>
 80016c0:	b910      	cbnz	r0, 80016c8 <Cache_File_List+0x50>
 80016c2:	f89d 3072 	ldrb.w	r3, [sp, #114]	@ 0x72
 80016c6:	bb2b      	cbnz	r3, 8001714 <Cache_File_List+0x9c>
            paging.file_list[paging.file_count] = malloc(FF_MAX_LFN);
            strcpy(paging.file_list[paging.file_count], fno.fname);
            paging.file_count++;
        }
    }
    f_closedir(&dir);
 80016c8:	4668      	mov	r0, sp
 80016ca:	f003 fd94 	bl	80051f6 <f_closedir>
//    f_mount(NULL, "0:", 0);

    // 计算分页
    paging.total_pages = (paging.file_count + MAX_DISPLAY_ITEMS-1) / MAX_DISPLAY_ITEMS;
 80016ce:	2206      	movs	r2, #6
 80016d0:	8823      	ldrh	r3, [r4, #0]
 80016d2:	3305      	adds	r3, #5
 80016d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80016d8:	7163      	strb	r3, [r4, #5]
    paging.start_index = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	8063      	strh	r3, [r4, #2]
    paging.current_page = 1;
 80016de:	2301      	movs	r3, #1
 80016e0:	7123      	strb	r3, [r4, #4]
}
 80016e2:	b05e      	add	sp, #376	@ 0x178
 80016e4:	bd70      	pop	{r4, r5, r6, pc}
            free(paging.file_list[i]);
 80016e6:	b2ab      	uxth	r3, r5
 80016e8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80016ec:	f008 fc14 	bl	8009f18 <free>
        for(uint16_t i=0; i<paging.file_count; i++)
 80016f0:	3501      	adds	r5, #1
 80016f2:	8822      	ldrh	r2, [r4, #0]
 80016f4:	b2ab      	uxth	r3, r5
 80016f6:	429a      	cmp	r2, r3
            free(paging.file_list[i]);
 80016f8:	68a0      	ldr	r0, [r4, #8]
        for(uint16_t i=0; i<paging.file_count; i++)
 80016fa:	d8f4      	bhi.n	80016e6 <Cache_File_List+0x6e>
        free(paging.file_list);
 80016fc:	f008 fc0c 	bl	8009f18 <free>
 8001700:	e7c0      	b.n	8001684 <Cache_File_List+0xc>
 8001702:	2500      	movs	r5, #0
 8001704:	e7f5      	b.n	80016f2 <Cache_File_List+0x7a>
        if(!(fno.fattrib & AM_DIR))
 8001706:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800170a:	06da      	lsls	r2, r3, #27
            count++;
 800170c:	bf5c      	itt	pl
 800170e:	3501      	addpl	r5, #1
 8001710:	b2ad      	uxthpl	r5, r5
 8001712:	e7bc      	b.n	800168e <Cache_File_List+0x16>
        if(!(fno.fattrib & AM_DIR)) {
 8001714:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8001718:	06db      	lsls	r3, r3, #27
 800171a:	d4cd      	bmi.n	80016b8 <Cache_File_List+0x40>
            paging.file_list[paging.file_count] = malloc(FF_MAX_LFN);
 800171c:	2012      	movs	r0, #18
 800171e:	8825      	ldrh	r5, [r4, #0]
 8001720:	68a6      	ldr	r6, [r4, #8]
 8001722:	f008 fbf1 	bl	8009f08 <malloc>
            strcpy(paging.file_list[paging.file_count], fno.fname);
 8001726:	f10d 0172 	add.w	r1, sp, #114	@ 0x72
            paging.file_list[paging.file_count] = malloc(FF_MAX_LFN);
 800172a:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
            paging.file_count++;
 800172e:	3501      	adds	r5, #1
            strcpy(paging.file_list[paging.file_count], fno.fname);
 8001730:	f00a fd0f 	bl	800c152 <strcpy>
            paging.file_count++;
 8001734:	8025      	strh	r5, [r4, #0]
 8001736:	e7bf      	b.n	80016b8 <Cache_File_List+0x40>
 8001738:	20000374 	.word	0x20000374
 800173c:	0800e954 	.word	0x0800e954

08001740 <delete_file>:
	if(key_code == KEY_DELETE){
		On_Delete_Key_Pressed();
	}
}

FRESULT delete_file(const char* path) {
 8001740:	b510      	push	{r4, lr}
 8001742:	b0c8      	sub	sp, #288	@ 0x120
    FRESULT res;

    // 检查文件是否存在
    FILINFO fno;
    if((res = f_stat(path, &fno)) != FR_OK) {
 8001744:	4669      	mov	r1, sp
FRESULT delete_file(const char* path) {
 8001746:	4604      	mov	r4, r0
    if((res = f_stat(path, &fno)) != FR_OK) {
 8001748:	f003 fd91 	bl	800526e <f_stat>
 800174c:	b910      	cbnz	r0, 8001754 <delete_file+0x14>

        return res; // 返回错误码：FR_NO_FILE等
    }

    // 执行删除
    if((res = f_unlink(path)) != FR_OK) {
 800174e:	4620      	mov	r0, r4
 8001750:	f003 fdb1 	bl	80052b6 <f_unlink>
        return res; // 返回错误码：FR_DENIED（写保护）等
    }

    return FR_OK;
}
 8001754:	b048      	add	sp, #288	@ 0x120
 8001756:	bd10      	pop	{r4, pc}

08001758 <page_turning>:

void page_turning(void){
	// 在翻页操作前范围检查
	if(paging.start_index < 0) paging.start_index = 0;
	if(paging.start_index >= paging.file_count)
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <page_turning+0x4c>)
 800175a:	885a      	ldrh	r2, [r3, #2]
 800175c:	8819      	ldrh	r1, [r3, #0]
 800175e:	428a      	cmp	r2, r1
			paging.start_index = paging.file_count - MAX_DISPLAY_ITEMS;
 8001760:	bf24      	itt	cs
 8001762:	1f8a      	subcs	r2, r1, #6
 8001764:	805a      	strhcs	r2, [r3, #2]

	// 处理前页翻页
	if(current_focus_line == 0 && paging.show_prev_more) {
 8001766:	4a10      	ldr	r2, [pc, #64]	@ (80017a8 <page_turning+0x50>)
 8001768:	7812      	ldrb	r2, [r2, #0]
 800176a:	b962      	cbnz	r2, 8001786 <page_turning+0x2e>
 800176c:	7b1a      	ldrb	r2, [r3, #12]
 800176e:	b1ba      	cbz	r2, 80017a0 <page_turning+0x48>
			paging.start_index = (paging.start_index >= (MAX_DISPLAY_ITEMS-1)) ?
 8001770:	885a      	ldrh	r2, [r3, #2]
 8001772:	2a05      	cmp	r2, #5
 8001774:	bf38      	it	cc
 8001776:	2205      	movcc	r2, #5
 8001778:	3a05      	subs	r2, #5
 800177a:	805a      	strh	r2, [r3, #2]
													paging.start_index - (MAX_DISPLAY_ITEMS-1) : 0;
			paging.current_page--;
 800177c:	791a      	ldrb	r2, [r3, #4]
 800177e:	3a01      	subs	r2, #1
	// 处理后页翻页
	else
	if(current_focus_line == (MAX_DISPLAY_ITEMS-1) && paging.show_next_more) {
		if(paging.start_index + MAX_DISPLAY_ITEMS < paging.file_count) {
				paging.start_index += (MAX_DISPLAY_ITEMS-1);
				paging.current_page++;
 8001780:	711a      	strb	r2, [r3, #4]
				Refresh_Display();
 8001782:	f7ff bf37 	b.w	80015f4 <Refresh_Display>
	if(current_focus_line == (MAX_DISPLAY_ITEMS-1) && paging.show_next_more) {
 8001786:	2a05      	cmp	r2, #5
 8001788:	d10a      	bne.n	80017a0 <page_turning+0x48>
 800178a:	7b5a      	ldrb	r2, [r3, #13]
 800178c:	b142      	cbz	r2, 80017a0 <page_turning+0x48>
		if(paging.start_index + MAX_DISPLAY_ITEMS < paging.file_count) {
 800178e:	885a      	ldrh	r2, [r3, #2]
 8001790:	1d90      	adds	r0, r2, #6
 8001792:	4288      	cmp	r0, r1
 8001794:	da04      	bge.n	80017a0 <page_turning+0x48>
				paging.start_index += (MAX_DISPLAY_ITEMS-1);
 8001796:	3205      	adds	r2, #5
 8001798:	805a      	strh	r2, [r3, #2]
				paging.current_page++;
 800179a:	791a      	ldrb	r2, [r3, #4]
 800179c:	3201      	adds	r2, #1
 800179e:	e7ef      	b.n	8001780 <page_turning+0x28>
		}
	}
}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000374 	.word	0x20000374
 80017a8:	20000385 	.word	0x20000385

080017ac <On_Delete_Key_Pressed>:

void On_Delete_Key_Pressed(){
 80017ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(paging.show_prev_more && current_focus_line == 0)
 80017ae:	4d48      	ldr	r5, [pc, #288]	@ (80018d0 <On_Delete_Key_Pressed+0x124>)
 80017b0:	4a48      	ldr	r2, [pc, #288]	@ (80018d4 <On_Delete_Key_Pressed+0x128>)
 80017b2:	7b2b      	ldrb	r3, [r5, #12]
 80017b4:	7814      	ldrb	r4, [r2, #0]
void On_Delete_Key_Pressed(){
 80017b6:	f5ad 7d1d 	sub.w	sp, sp, #628	@ 0x274
	if(paging.show_prev_more && current_focus_line == 0)
 80017ba:	b11b      	cbz	r3, 80017c4 <On_Delete_Key_Pressed+0x18>
 80017bc:	2c00      	cmp	r4, #0
 80017be:	d06e      	beq.n	800189e <On_Delete_Key_Pressed+0xf2>
		return 1;
	else if(paging.show_prev_more && current_focus_line == 5)
 80017c0:	2c05      	cmp	r4, #5
 80017c2:	d06c      	beq.n	800189e <On_Delete_Key_Pressed+0xf2>
		return 1;

	// 计算实际文件索引（需考虑分页提示符）
	uint16_t actual_index = paging.start_index + current_focus_line;
 80017c4:	886a      	ldrh	r2, [r5, #2]
 80017c6:	4414      	add	r4, r2
 80017c8:	b2a4      	uxth	r4, r4
	if(paging.show_prev_more) actual_index -= 1; // 排除"..."行
 80017ca:	b10b      	cbz	r3, 80017d0 <On_Delete_Key_Pressed+0x24>
 80017cc:	3c01      	subs	r4, #1
 80017ce:	b2a4      	uxth	r4, r4

	// 构造完整路径
	char full_path[FF_MAX_LFN + 3] = "0:/";
 80017d0:	4b41      	ldr	r3, [pc, #260]	@ (80018d8 <On_Delete_Key_Pressed+0x12c>)
 80017d2:	2211      	movs	r2, #17
 80017d4:	2100      	movs	r1, #0
 80017d6:	a801      	add	r0, sp, #4
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	f00a fbbf 	bl	800bf5c <memset>
	strcat(full_path, paging.file_list[actual_index]);
 80017de:	68ae      	ldr	r6, [r5, #8]
 80017e0:	4668      	mov	r0, sp
 80017e2:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 80017e6:	f00a fbc1 	bl	800bf6c <strcat>

	sprintf(Tx_Buffer, "File_M.t7.txt=\"确认删除%s?\"\xff\xff\xff",paging.file_list[actual_index]);
 80017ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80017ee:	493b      	ldr	r1, [pc, #236]	@ (80018dc <On_Delete_Key_Pressed+0x130>)
 80017f0:	483b      	ldr	r0, [pc, #236]	@ (80018e0 <On_Delete_Key_Pressed+0x134>)
 80017f2:	f00a faab 	bl	800bd4c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80017f6:	483a      	ldr	r0, [pc, #232]	@ (80018e0 <On_Delete_Key_Pressed+0x134>)
 80017f8:	f006 f9a0 	bl	8007b3c <USART1_Tx_HMIdata>
	Confirm_Msg.display = 1;
 80017fc:	2301      	movs	r3, #1
 80017fe:	4e39      	ldr	r6, [pc, #228]	@ (80018e4 <On_Delete_Key_Pressed+0x138>)
	strcat(full_path, paging.file_list[actual_index]);
 8001800:	00a7      	lsls	r7, r4, #2
	Confirm_Msg.display = 1;
 8001802:	7033      	strb	r3, [r6, #0]
	Confirm_Msg.type = CONFIRM_DELETE_FILE;
 8001804:	2302      	movs	r3, #2

	while(1){
		if(key_code == KEY_CONFIRM){
 8001806:	4c38      	ldr	r4, [pc, #224]	@ (80018e8 <On_Delete_Key_Pressed+0x13c>)
	Confirm_Msg.type = CONFIRM_DELETE_FILE;
 8001808:	7073      	strb	r3, [r6, #1]
		if(key_code == KEY_CONFIRM){
 800180a:	7823      	ldrb	r3, [r4, #0]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d138      	bne.n	8001882 <On_Delete_Key_Pressed+0xd6>
			key_code = KEY_NULL;
 8001810:	2300      	movs	r3, #0
 8001812:	7023      	strb	r3, [r4, #0]
			key_code = KEY_NULL;
			return;
		}
	}

	sprintf(Tx_Buffer, "File_M.t7.txt=\"正在删除%s\"\xff\xff\xff",paging.file_list[actual_index]);
 8001814:	68ab      	ldr	r3, [r5, #8]
 8001816:	4935      	ldr	r1, [pc, #212]	@ (80018ec <On_Delete_Key_Pressed+0x140>)
 8001818:	59da      	ldr	r2, [r3, r7]
 800181a:	4831      	ldr	r0, [pc, #196]	@ (80018e0 <On_Delete_Key_Pressed+0x134>)
 800181c:	f00a fa96 	bl	800bd4c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001820:	482f      	ldr	r0, [pc, #188]	@ (80018e0 <On_Delete_Key_Pressed+0x134>)
 8001822:	f006 f98b 	bl	8007b3c <USART1_Tx_HMIdata>

	FIL fp;
	if(f_open(&fp, full_path, FA_READ) == FR_OK) {
 8001826:	2201      	movs	r2, #1
 8001828:	4669      	mov	r1, sp
 800182a:	a806      	add	r0, sp, #24
 800182c:	f003 f96c 	bl	8004b08 <f_open>
 8001830:	b910      	cbnz	r0, 8001838 <On_Delete_Key_Pressed+0x8c>
			f_close(&fp); // 确保文件未被占用
 8001832:	a806      	add	r0, sp, #24
 8001834:	f003 fc77 	bl	8005126 <f_close>
	}
	// 执行删除
	FRESULT res = delete_file(full_path);
 8001838:	4668      	mov	r0, sp
 800183a:	f7ff ff81 	bl	8001740 <delete_file>

	// 处理结果
	if(res == FR_OK) {
 800183e:	4602      	mov	r2, r0
 8001840:	2800      	cmp	r0, #0
 8001842:	d13f      	bne.n	80018c4 <On_Delete_Key_Pressed+0x118>
		// 在删除成功后更新缓存前释放旧内存
		if(paging.file_list != NULL) {
 8001844:	68ab      	ldr	r3, [r5, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d13a      	bne.n	80018c0 <On_Delete_Key_Pressed+0x114>
			for(uint16_t i=0; i<paging.file_count; i++)
					free(paging.file_list[i]);
			free(paging.file_list);
		}
			// 更新文件列表缓存
			Cache_File_List();
 800184a:	f7ff ff15 	bl	8001678 <Cache_File_List>
			Refresh_Display();
 800184e:	f7ff fed1 	bl	80015f4 <Refresh_Display>
			// HMI提示
			sprintf(Tx_Buffer, "File_M.t7.txt=\"删除成功\"\xff\xff\xff");
 8001852:	4927      	ldr	r1, [pc, #156]	@ (80018f0 <On_Delete_Key_Pressed+0x144>)
 8001854:	4822      	ldr	r0, [pc, #136]	@ (80018e0 <On_Delete_Key_Pressed+0x134>)
 8001856:	f00a fc7c 	bl	800c152 <strcpy>
	}
	else {
			sprintf(Tx_Buffer, "File_M.t7.txt=\"错误:%d\"\xff\xff\xff", res);
	}
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800185a:	4821      	ldr	r0, [pc, #132]	@ (80018e0 <On_Delete_Key_Pressed+0x134>)
 800185c:	f006 f96e 	bl	8007b3c <USART1_Tx_HMIdata>

	HAL_Delay(1000);
 8001860:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001864:	f006 fa96 	bl	8007d94 <HAL_Delay>

	sprintf(Tx_Buffer, "File_M.t7.txt=\"\"\xff\xff\xff",paging.file_list[actual_index]);
 8001868:	68ab      	ldr	r3, [r5, #8]
 800186a:	4922      	ldr	r1, [pc, #136]	@ (80018f4 <On_Delete_Key_Pressed+0x148>)
 800186c:	59da      	ldr	r2, [r3, r7]
 800186e:	481c      	ldr	r0, [pc, #112]	@ (80018e0 <On_Delete_Key_Pressed+0x134>)
 8001870:	f00a fa6c 	bl	800bd4c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001874:	481a      	ldr	r0, [pc, #104]	@ (80018e0 <On_Delete_Key_Pressed+0x134>)
 8001876:	f006 f961 	bl	8007b3c <USART1_Tx_HMIdata>
	Confirm_Msg.display = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	7033      	strb	r3, [r6, #0]
	Confirm_Msg.type = CONFIRM_NULL;
 800187e:	7073      	strb	r3, [r6, #1]
 8001880:	e00d      	b.n	800189e <On_Delete_Key_Pressed+0xf2>
		if(key_code == KEY_CANCEL){
 8001882:	7823      	ldrb	r3, [r4, #0]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d1c0      	bne.n	800180a <On_Delete_Key_Pressed+0x5e>
			sprintf(Tx_Buffer, "File_M.t7.txt=\"\"\xff\xff\xff");
 8001888:	491a      	ldr	r1, [pc, #104]	@ (80018f4 <On_Delete_Key_Pressed+0x148>)
 800188a:	4815      	ldr	r0, [pc, #84]	@ (80018e0 <On_Delete_Key_Pressed+0x134>)
 800188c:	f00a fc61 	bl	800c152 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001890:	4813      	ldr	r0, [pc, #76]	@ (80018e0 <On_Delete_Key_Pressed+0x134>)
 8001892:	f006 f953 	bl	8007b3c <USART1_Tx_HMIdata>
			Confirm_Msg.display = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	7033      	strb	r3, [r6, #0]
			Confirm_Msg.type = CONFIRM_NULL;
 800189a:	7073      	strb	r3, [r6, #1]
			key_code = KEY_NULL;
 800189c:	7023      	strb	r3, [r4, #0]
}
 800189e:	f50d 7d1d 	add.w	sp, sp, #628	@ 0x274
 80018a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					free(paging.file_list[i]);
 80018a4:	b2a3      	uxth	r3, r4
 80018a6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80018aa:	f008 fb35 	bl	8009f18 <free>
			for(uint16_t i=0; i<paging.file_count; i++)
 80018ae:	3401      	adds	r4, #1
 80018b0:	882a      	ldrh	r2, [r5, #0]
 80018b2:	b2a3      	uxth	r3, r4
 80018b4:	429a      	cmp	r2, r3
					free(paging.file_list[i]);
 80018b6:	68a8      	ldr	r0, [r5, #8]
			for(uint16_t i=0; i<paging.file_count; i++)
 80018b8:	d8f4      	bhi.n	80018a4 <On_Delete_Key_Pressed+0xf8>
			free(paging.file_list);
 80018ba:	f008 fb2d 	bl	8009f18 <free>
 80018be:	e7c4      	b.n	800184a <On_Delete_Key_Pressed+0x9e>
 80018c0:	4604      	mov	r4, r0
 80018c2:	e7f5      	b.n	80018b0 <On_Delete_Key_Pressed+0x104>
			sprintf(Tx_Buffer, "File_M.t7.txt=\"错误:%d\"\xff\xff\xff", res);
 80018c4:	490c      	ldr	r1, [pc, #48]	@ (80018f8 <On_Delete_Key_Pressed+0x14c>)
 80018c6:	4806      	ldr	r0, [pc, #24]	@ (80018e0 <On_Delete_Key_Pressed+0x134>)
 80018c8:	f00a fa40 	bl	800bd4c <siprintf>
 80018cc:	e7c5      	b.n	800185a <On_Delete_Key_Pressed+0xae>
 80018ce:	bf00      	nop
 80018d0:	20000374 	.word	0x20000374
 80018d4:	20000385 	.word	0x20000385
 80018d8:	002f3a30 	.word	0x002f3a30
 80018dc:	0800e956 	.word	0x0800e956
 80018e0:	20000b8a 	.word	0x20000b8a
 80018e4:	20000372 	.word	0x20000372
 80018e8:	2000091c 	.word	0x2000091c
 80018ec:	0800e979 	.word	0x0800e979
 80018f0:	0800e9af 	.word	0x0800e9af
 80018f4:	0800e99b 	.word	0x0800e99b
 80018f8:	0800e9cf 	.word	0x0800e9cf

080018fc <scroll_focus_line>:

void scroll_focus_line(void){
 80018fc:	b538      	push	{r3, r4, r5, lr}
	sprintf(Tx_Buffer,"File_M.t%d.bco=65535\xff\xff\xff",last_focus_line);
 80018fe:	4c12      	ldr	r4, [pc, #72]	@ (8001948 <scroll_focus_line+0x4c>)
 8001900:	4d12      	ldr	r5, [pc, #72]	@ (800194c <scroll_focus_line+0x50>)
 8001902:	4913      	ldr	r1, [pc, #76]	@ (8001950 <scroll_focus_line+0x54>)
 8001904:	782a      	ldrb	r2, [r5, #0]
 8001906:	4620      	mov	r0, r4
 8001908:	f00a fa20 	bl	800bd4c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800190c:	4620      	mov	r0, r4
 800190e:	f006 f915 	bl	8007b3c <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"File_M.t%d.pco=0\xff\xff\xff",last_focus_line);
 8001912:	782a      	ldrb	r2, [r5, #0]
 8001914:	490f      	ldr	r1, [pc, #60]	@ (8001954 <scroll_focus_line+0x58>)
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);

	sprintf(Tx_Buffer,"File_M.t%d.bco=825\xff\xff\xff",current_focus_line);
 8001916:	4d10      	ldr	r5, [pc, #64]	@ (8001958 <scroll_focus_line+0x5c>)
	sprintf(Tx_Buffer,"File_M.t%d.pco=0\xff\xff\xff",last_focus_line);
 8001918:	4620      	mov	r0, r4
 800191a:	f00a fa17 	bl	800bd4c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800191e:	4620      	mov	r0, r4
 8001920:	f006 f90c 	bl	8007b3c <USART1_Tx_HMIdata>
	sprintf(Tx_Buffer,"File_M.t%d.bco=825\xff\xff\xff",current_focus_line);
 8001924:	782a      	ldrb	r2, [r5, #0]
 8001926:	490d      	ldr	r1, [pc, #52]	@ (800195c <scroll_focus_line+0x60>)
 8001928:	4620      	mov	r0, r4
 800192a:	f00a fa0f 	bl	800bd4c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800192e:	4620      	mov	r0, r4
 8001930:	f006 f904 	bl	8007b3c <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"File_M.t%d.pco=65535\xff\xff\xff",current_focus_line);
 8001934:	4620      	mov	r0, r4
 8001936:	782a      	ldrb	r2, [r5, #0]
 8001938:	4909      	ldr	r1, [pc, #36]	@ (8001960 <scroll_focus_line+0x64>)
 800193a:	f00a fa07 	bl	800bd4c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800193e:	4620      	mov	r0, r4
}
 8001940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001944:	f006 b8fa 	b.w	8007b3c <USART1_Tx_HMIdata>
 8001948:	20000b8a 	.word	0x20000b8a
 800194c:	20000384 	.word	0x20000384
 8001950:	0800e9ec 	.word	0x0800e9ec
 8001954:	0800ea04 	.word	0x0800ea04
 8001958:	20000385 	.word	0x20000385
 800195c:	0800ea18 	.word	0x0800ea18
 8001960:	0800ea2e 	.word	0x0800ea2e

08001964 <f_write_retry>:
// 增加写入超时
#define SD_WRITE_TIMEOUT 10000  // 10秒
int SDCard_states = 0;
uint16_t csv_crt_line_No = 0;

FRESULT f_write_retry(FIL* fp, const void* buff, UINT btw) {
 8001964:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001968:	4607      	mov	r7, r0
 800196a:	4688      	mov	r8, r1
 800196c:	4615      	mov	r5, r2
  UINT bw;
  FRESULT res;
  uint32_t start = HAL_GetTick();
 800196e:	f006 fa0b 	bl	8007d88 <HAL_GetTick>

  do {
    res = f_write(fp, buff, btw, &bw);

    if(res != FR_OK) break;
    if(HAL_GetTick() - start > SD_WRITE_TIMEOUT) {
 8001972:	f242 7910 	movw	r9, #10000	@ 0x2710
  uint32_t start = HAL_GetTick();
 8001976:	4606      	mov	r6, r0
    res = f_write(fp, buff, btw, &bw);
 8001978:	462a      	mov	r2, r5
 800197a:	4641      	mov	r1, r8
 800197c:	4638      	mov	r0, r7
 800197e:	ab01      	add	r3, sp, #4
 8001980:	f003 fa34 	bl	8004dec <f_write>
    if(res != FR_OK) break;
 8001984:	4604      	mov	r4, r0
 8001986:	b938      	cbnz	r0, 8001998 <f_write_retry+0x34>
    if(HAL_GetTick() - start > SD_WRITE_TIMEOUT) {
 8001988:	f006 f9fe 	bl	8007d88 <HAL_GetTick>
 800198c:	1b80      	subs	r0, r0, r6
 800198e:	4548      	cmp	r0, r9
 8001990:	d806      	bhi.n	80019a0 <f_write_retry+0x3c>
      res = FR_TIMEOUT;
      break;
    }
  } while(bw != btw);
 8001992:	9b01      	ldr	r3, [sp, #4]
 8001994:	42ab      	cmp	r3, r5
 8001996:	d1ef      	bne.n	8001978 <f_write_retry+0x14>

  return res;
}
 8001998:	4620      	mov	r0, r4
 800199a:	b003      	add	sp, #12
 800199c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      res = FR_TIMEOUT;
 80019a0:	240f      	movs	r4, #15
 80019a2:	e7f9      	b.n	8001998 <f_write_retry+0x34>

080019a4 <SD_FS_Init>:
  }
  return SDCard_states;
}

uint8_t SD_FS_Init(void)
{
 80019a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    static FATFS sd_fs;
    uint32_t ret = 0;
    MKFS_PARM opt = {0};
 80019a6:	2210      	movs	r2, #16
 80019a8:	2100      	movs	r1, #0
 80019aa:	4668      	mov	r0, sp
 80019ac:	f00a fad6 	bl	800bf5c <memset>
    opt.fmt = FM_FAT;
 80019b0:	2201      	movs	r2, #1
    static uint8_t work_buf[512] = {0};
    ret = f_mount(&sd_fs, DISK_SD, 1);
 80019b2:	4911      	ldr	r1, [pc, #68]	@ (80019f8 <SD_FS_Init+0x54>)
 80019b4:	4811      	ldr	r0, [pc, #68]	@ (80019fc <SD_FS_Init+0x58>)
    opt.fmt = FM_FAT;
 80019b6:	f88d 2000 	strb.w	r2, [sp]
    ret = f_mount(&sd_fs, DISK_SD, 1);
 80019ba:	f003 f87b 	bl	8004ab4 <f_mount>

    if(ret != FR_OK)
 80019be:	4604      	mov	r4, r0
 80019c0:	b1a0      	cbz	r0, 80019ec <SD_FS_Init+0x48>
    {
        switch(ret)
 80019c2:	f1a0 030d 	sub.w	r3, r0, #13
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d808      	bhi.n	80019de <SD_FS_Init+0x3a>
        {
            case FR_NO_FILESYSTEM:
            {
                ret = f_mkfs(DISK_SD, &opt, work_buf, sizeof(work_buf));
 80019cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019d0:	4669      	mov	r1, sp
 80019d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001a00 <SD_FS_Init+0x5c>)
 80019d4:	4808      	ldr	r0, [pc, #32]	@ (80019f8 <SD_FS_Init+0x54>)
 80019d6:	f003 fcd1 	bl	800537c <f_mkfs>
            {
                ret = f_mkfs(DISK_SD, &opt, work_buf, sizeof(work_buf));
            }break;
        }
    }
    if(ret != 0)
 80019da:	4604      	mov	r4, r0
 80019dc:	b130      	cbz	r0, 80019ec <SD_FS_Init+0x48>
    {
      printf("sd fs f_mkfs fail(%d)\r\n", ret);
 80019de:	4621      	mov	r1, r4
 80019e0:	4808      	ldr	r0, [pc, #32]	@ (8001a04 <SD_FS_Init+0x60>)
 80019e2:	f00a f90f 	bl	800bc04 <iprintf>
    else
    {
    	printf("sd fs f_mkfs success!\r\n");
    }
    return ret;
}
 80019e6:	b2e0      	uxtb	r0, r4
 80019e8:	b004      	add	sp, #16
 80019ea:	bd10      	pop	{r4, pc}
    	printf("sd fs f_mkfs success!\r\n");
 80019ec:	4806      	ldr	r0, [pc, #24]	@ (8001a08 <SD_FS_Init+0x64>)
 80019ee:	f00a f971 	bl	800bcd4 <puts>
 80019f2:	2400      	movs	r4, #0
 80019f4:	e7f7      	b.n	80019e6 <SD_FS_Init+0x42>
 80019f6:	bf00      	nop
 80019f8:	0800ea46 	.word	0x0800ea46
 80019fc:	20000588 	.word	0x20000588
 8001a00:	20000388 	.word	0x20000388
 8001a04:	0800ea49 	.word	0x0800ea49
 8001a08:	0800ea61 	.word	0x0800ea61

08001a0c <SDCard_InsertCheck>:
int SDCard_InsertCheck(void){
 8001a0c:	b510      	push	{r4, lr}
  if(SD_INSERT){
 8001a0e:	2101      	movs	r1, #1
 8001a10:	480c      	ldr	r0, [pc, #48]	@ (8001a44 <SDCard_InsertCheck+0x38>)
 8001a12:	f006 ff81 	bl	8008918 <HAL_GPIO_ReadPin>
 8001a16:	b970      	cbnz	r0, 8001a36 <SDCard_InsertCheck+0x2a>
		ret = SD_FS_Init();
 8001a18:	f7ff ffc4 	bl	80019a4 <SD_FS_Init>
  	if(ret == 0){
 8001a1c:	4604      	mov	r4, r0
 8001a1e:	b920      	cbnz	r0, 8001a2a <SDCard_InsertCheck+0x1e>
  		printf("SDCard Init success!\r\n");
 8001a20:	4809      	ldr	r0, [pc, #36]	@ (8001a48 <SDCard_InsertCheck+0x3c>)
 8001a22:	f00a f957 	bl	800bcd4 <puts>
  		SDCard_states = 0; //正常
 8001a26:	4620      	mov	r0, r4
}
 8001a28:	bd10      	pop	{r4, pc}
  		printf("SDCard Init fail!\r\n");
 8001a2a:	4808      	ldr	r0, [pc, #32]	@ (8001a4c <SDCard_InsertCheck+0x40>)
 8001a2c:	f00a f952 	bl	800bcd4 <puts>
  		SDCard_states = -1;//初始化失败
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	e7f8      	b.n	8001a28 <SDCard_InsertCheck+0x1c>
  	printf("SDCard is not insert!\r\n");
 8001a36:	4806      	ldr	r0, [pc, #24]	@ (8001a50 <SDCard_InsertCheck+0x44>)
 8001a38:	f00a f94c 	bl	800bcd4 <puts>
  	SDCard_states = -2;//未插入SD卡
 8001a3c:	f06f 0001 	mvn.w	r0, #1
  return SDCard_states;
 8001a40:	e7f2      	b.n	8001a28 <SDCard_InsertCheck+0x1c>
 8001a42:	bf00      	nop
 8001a44:	40011400 	.word	0x40011400
 8001a48:	0800ea78 	.word	0x0800ea78
 8001a4c:	0800ea8e 	.word	0x0800ea8e
 8001a50:	0800eaa1 	.word	0x0800eaa1

08001a54 <check_file_exists>:

FRESULT check_file_exists(const char* path) {
 8001a54:	b500      	push	{lr}
 8001a56:	b0c9      	sub	sp, #292	@ 0x124
    FILINFO fno;
    return f_stat(path, &fno);
 8001a58:	4669      	mov	r1, sp
 8001a5a:	f003 fc08 	bl	800526e <f_stat>
}
 8001a5e:	b049      	add	sp, #292	@ 0x124
 8001a60:	f85d fb04 	ldr.w	pc, [sp], #4

08001a64 <CSV_sheet_Init>:
////		{
////			printf("unmount OK.\r\n");
////		}
//}

int CSV_sheet_Init(void){
 8001a64:	b530      	push	{r4, r5, lr}

	if(SDCard_states == 0){
 8001a66:	4b36      	ldr	r3, [pc, #216]	@ (8001b40 <CSV_sheet_Init+0xdc>)
int CSV_sheet_Init(void){
 8001a68:	f5ad 7d3f 	sub.w	sp, sp, #764	@ 0x2fc
	if(SDCard_states == 0){
 8001a6c:	681c      	ldr	r4, [r3, #0]
 8001a6e:	2c00      	cmp	r4, #0
 8001a70:	d163      	bne.n	8001b3a <CSV_sheet_Init+0xd6>
    FIL fp;
    FRESULT res;
    uint16_t File_Num = 1;

    char USER_FILE_NAME[20] = {0};
 8001a72:	2210      	movs	r2, #16
 8001a74:	4621      	mov	r1, r4
 8001a76:	eb0d 0002 	add.w	r0, sp, r2
 8001a7a:	9403      	str	r4, [sp, #12]
 8001a7c:	f00a fa6e 	bl	800bf5c <memset>
    char file_name_buf[20] = {0};
 8001a80:	2210      	movs	r2, #16
 8001a82:	4621      	mov	r1, r4
 8001a84:	a809      	add	r0, sp, #36	@ 0x24
 8001a86:	9408      	str	r4, [sp, #32]
 8001a88:	f00a fa68 	bl	800bf5c <memset>

    if(GPS_GGA_Data.fix_status == 1){
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b44 <CSV_sheet_Init+0xe0>)
 8001a8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d11a      	bne.n	8001acc <CSV_sheet_Init+0x68>
    	Format_FileName_Date(file_name_buf, GPS_RMC_Data.time, GPS_RMC_Data.date);
 8001a96:	4a2c      	ldr	r2, [pc, #176]	@ (8001b48 <CSV_sheet_Init+0xe4>)
 8001a98:	a808      	add	r0, sp, #32
 8001a9a:	f1a2 012d 	sub.w	r1, r2, #45	@ 0x2d
 8001a9e:	f7ff fc45 	bl	800132c <Format_FileName_Date>
    }
    else{
    	sprintf(file_name_buf,"20250101");
    }
    snprintf(USER_FILE_NAME,20,"0:/%s%03d.csv", file_name_buf, File_Num);
 8001aa2:	2501      	movs	r5, #1
 8001aa4:	2114      	movs	r1, #20
 8001aa6:	4a29      	ldr	r2, [pc, #164]	@ (8001b4c <CSV_sheet_Init+0xe8>)
 8001aa8:	ab08      	add	r3, sp, #32
 8001aaa:	9500      	str	r5, [sp, #0]
 8001aac:	a803      	add	r0, sp, #12
 8001aae:	f00a f919 	bl	800bce4 <sniprintf>

    res = check_file_exists(USER_FILE_NAME);
 8001ab2:	a803      	add	r0, sp, #12
 8001ab4:	f7ff ffce 	bl	8001a54 <check_file_exists>

    if (res == FR_OK) {//文件存在
 8001ab8:	4601      	mov	r1, r0
 8001aba:	b960      	cbnz	r0, 8001ad6 <CSV_sheet_Init+0x72>
    	AD24C02_Read2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);
 8001abc:	2050      	movs	r0, #80	@ 0x50
 8001abe:	4924      	ldr	r1, [pc, #144]	@ (8001b50 <CSV_sheet_Init+0xec>)
 8001ac0:	f7ff fa19 	bl	8000ef6 <AD24C02_Read2Byte>
	}
	else
	{
		return -1;//没发现SDCard
	}
}
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	f50d 7d3f 	add.w	sp, sp, #764	@ 0x2fc
 8001aca:	bd30      	pop	{r4, r5, pc}
    	sprintf(file_name_buf,"20250101");
 8001acc:	4921      	ldr	r1, [pc, #132]	@ (8001b54 <CSV_sheet_Init+0xf0>)
 8001ace:	a808      	add	r0, sp, #32
 8001ad0:	f00a fb3f 	bl	800c152 <strcpy>
 8001ad4:	e7e5      	b.n	8001aa2 <CSV_sheet_Init+0x3e>
    else if (res == FR_NO_FILE) {//文件不存在
 8001ad6:	2804      	cmp	r0, #4
 8001ad8:	d12d      	bne.n	8001b36 <CSV_sheet_Init+0xd2>
        FRESULT ret = f_open(&fp, USER_FILE_NAME, FA_WRITE | FA_OPEN_APPEND);
 8001ada:	2232      	movs	r2, #50	@ 0x32
 8001adc:	a903      	add	r1, sp, #12
 8001ade:	a828      	add	r0, sp, #160	@ 0xa0
 8001ae0:	f003 f812 	bl	8004b08 <f_open>
        if(ret != FR_OK)
 8001ae4:	b128      	cbz	r0, 8001af2 <CSV_sheet_Init+0x8e>
        	printf("f_open fail: %s\r\n", USER_FILE_NAME);
 8001ae6:	481c      	ldr	r0, [pc, #112]	@ (8001b58 <CSV_sheet_Init+0xf4>)
 8001ae8:	a903      	add	r1, sp, #12
        	printf("f_open fail:%d\r\n", ret );
 8001aea:	f00a f88b 	bl	800bc04 <iprintf>
          return 1;
 8001aee:	2401      	movs	r4, #1
 8001af0:	e7e8      	b.n	8001ac4 <CSV_sheet_Init+0x60>
    		char header[] = {0xE5,0xBA,0x8F,0xE5,0x8F,0xB7,0x2C,0xE6,0x97,0xA5,0xE6
 8001af2:	226a      	movs	r2, #106	@ 0x6a
 8001af4:	4919      	ldr	r1, [pc, #100]	@ (8001b5c <CSV_sheet_Init+0xf8>)
 8001af6:	a80d      	add	r0, sp, #52	@ 0x34
 8001af8:	f00a fb41 	bl	800c17e <memcpy>
        ret = f_write_retry(&fp, header, strlen(header));
 8001afc:	a80d      	add	r0, sp, #52	@ 0x34
 8001afe:	f7fe fb31 	bl	8000164 <strlen>
 8001b02:	a90d      	add	r1, sp, #52	@ 0x34
 8001b04:	4602      	mov	r2, r0
 8001b06:	a828      	add	r0, sp, #160	@ 0xa0
 8001b08:	f7ff ff2c 	bl	8001964 <f_write_retry>
 8001b0c:	4605      	mov	r5, r0
        f_sync(&fp);
 8001b0e:	a828      	add	r0, sp, #160	@ 0xa0
 8001b10:	f003 fa58 	bl	8004fc4 <f_sync>
        if(ret != FR_OK)
 8001b14:	b115      	cbz	r5, 8001b1c <CSV_sheet_Init+0xb8>
        	printf("f_open fail:%d\r\n", ret );
 8001b16:	4629      	mov	r1, r5
 8001b18:	4811      	ldr	r0, [pc, #68]	@ (8001b60 <CSV_sheet_Init+0xfc>)
 8001b1a:	e7e6      	b.n	8001aea <CSV_sheet_Init+0x86>
        ret = f_close(&fp);
 8001b1c:	a828      	add	r0, sp, #160	@ 0xa0
 8001b1e:	f003 fb02 	bl	8005126 <f_close>
        if(ret != FR_OK)
 8001b22:	b110      	cbz	r0, 8001b2a <CSV_sheet_Init+0xc6>
        	printf("f_close fail:%d\r\n", ret);
 8001b24:	4601      	mov	r1, r0
 8001b26:	480f      	ldr	r0, [pc, #60]	@ (8001b64 <CSV_sheet_Init+0x100>)
 8001b28:	e7df      	b.n	8001aea <CSV_sheet_Init+0x86>
        csv_crt_line_No = 0;
 8001b2a:	4909      	ldr	r1, [pc, #36]	@ (8001b50 <CSV_sheet_Init+0xec>)
 8001b2c:	8008      	strh	r0, [r1, #0]
        AD24C02_Write2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);
 8001b2e:	2050      	movs	r0, #80	@ 0x50
 8001b30:	f7ff f9d0 	bl	8000ed4 <AD24C02_Write2Byte>
        return 0;
 8001b34:	e7c6      	b.n	8001ac4 <CSV_sheet_Init+0x60>
        printf("错误码: %d\r\n", res);  // 其他错误（如硬件问题）
 8001b36:	480c      	ldr	r0, [pc, #48]	@ (8001b68 <CSV_sheet_Init+0x104>)
 8001b38:	e7d7      	b.n	8001aea <CSV_sheet_Init+0x86>
		return -1;//没发现SDCard
 8001b3a:	f04f 34ff 	mov.w	r4, #4294967295
 8001b3e:	e7c1      	b.n	8001ac4 <CSV_sheet_Init+0x60>
 8001b40:	200007c8 	.word	0x200007c8
 8001b44:	20000230 	.word	0x20000230
 8001b48:	20000228 	.word	0x20000228
 8001b4c:	0800eac1 	.word	0x0800eac1
 8001b50:	200007c4 	.word	0x200007c4
 8001b54:	0800eab8 	.word	0x0800eab8
 8001b58:	0800eacf 	.word	0x0800eacf
 8001b5c:	0800eb14 	.word	0x0800eb14
 8001b60:	0800eae1 	.word	0x0800eae1
 8001b64:	0800eaf2 	.word	0x0800eaf2
 8001b68:	0800eb04 	.word	0x0800eb04

08001b6c <SDCard_Write_log>:

int SDCard_Write_log(GPS_Data GGA_Result_Data, GPS_Data RMC_Result_Data){
 8001b6c:	b084      	sub	sp, #16
 8001b6e:	b530      	push	{r4, r5, lr}
 8001b70:	f5ad 7d5b 	sub.w	sp, sp, #876	@ 0x36c
 8001b74:	acde      	add	r4, sp, #888	@ 0x378
 8001b76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(SDCard_states == 0){
 8001b7a:	4b58      	ldr	r3, [pc, #352]	@ (8001cdc <SDCard_Write_log+0x170>)
 8001b7c:	681c      	ldr	r4, [r3, #0]
 8001b7e:	2c00      	cmp	r4, #0
 8001b80:	f040 8216 	bne.w	8001fb0 <SDCard_Write_log+0x444>
    FIL fp;
    FRESULT res;
    uint16_t File_Num = 1;
    char USER_FILE_NAME[20] = {0};
 8001b84:	2210      	movs	r2, #16
 8001b86:	4621      	mov	r1, r4
 8001b88:	eb0d 0002 	add.w	r0, sp, r2
 8001b8c:	9403      	str	r4, [sp, #12]
 8001b8e:	f00a f9e5 	bl	800bf5c <memset>
    char file_name_buf[20] = {0};
 8001b92:	2210      	movs	r2, #16
 8001b94:	4621      	mov	r1, r4
 8001b96:	a809      	add	r0, sp, #36	@ 0x24
 8001b98:	9408      	str	r4, [sp, #32]
 8001b9a:	f00a f9df 	bl	800bf5c <memset>
    SD_LogData LogBuf;

    if(GGA_Result_Data.fix_status == 1){    //按日期格式化文件名
 8001b9e:	f89d 33a5 	ldrb.w	r3, [sp, #933]	@ 0x3a5
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d11d      	bne.n	8001be2 <SDCard_Write_log+0x76>
    	Format_FileName_Date(file_name_buf, GPS_RMC_Data.time, GPS_RMC_Data.date);
 8001ba6:	4a4e      	ldr	r2, [pc, #312]	@ (8001ce0 <SDCard_Write_log+0x174>)
 8001ba8:	a808      	add	r0, sp, #32
 8001baa:	f1a2 012d 	sub.w	r1, r2, #45	@ 0x2d
 8001bae:	f7ff fbbd 	bl	800132c <Format_FileName_Date>
    }
    else{
    	sprintf(file_name_buf,"20250101");
    }
    snprintf(USER_FILE_NAME,20,"0:/%s%03d.csv", file_name_buf, File_Num);
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	2114      	movs	r1, #20
 8001bb6:	4a4b      	ldr	r2, [pc, #300]	@ (8001ce4 <SDCard_Write_log+0x178>)
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	a803      	add	r0, sp, #12
 8001bbc:	ab08      	add	r3, sp, #32
 8001bbe:	f00a f891 	bl	800bce4 <sniprintf>

    res = check_file_exists(USER_FILE_NAME);    //检查文件是否存在
 8001bc2:	a803      	add	r0, sp, #12
 8001bc4:	f7ff ff46 	bl	8001a54 <check_file_exists>
    FRESULT ret = f_open(&fp, USER_FILE_NAME, FA_WRITE | FA_OPEN_APPEND);    //打开文件，若文件不存在则创建新文件，并定位到文件末尾
 8001bc8:	2232      	movs	r2, #50	@ 0x32
    res = check_file_exists(USER_FILE_NAME);    //检查文件是否存在
 8001bca:	4604      	mov	r4, r0
    FRESULT ret = f_open(&fp, USER_FILE_NAME, FA_WRITE | FA_OPEN_APPEND);    //打开文件，若文件不存在则创建新文件，并定位到文件末尾
 8001bcc:	a903      	add	r1, sp, #12
 8001bce:	a844      	add	r0, sp, #272	@ 0x110
 8001bd0:	f002 ff9a 	bl	8004b08 <f_open>
    if(ret != FR_OK)
 8001bd4:	4605      	mov	r5, r0
 8001bd6:	b148      	cbz	r0, 8001bec <SDCard_Write_log+0x80>
    {
    	printf("f_open fail: %s\r\n", USER_FILE_NAME);
 8001bd8:	4843      	ldr	r0, [pc, #268]	@ (8001ce8 <SDCard_Write_log+0x17c>)
 8001bda:	a903      	add	r1, sp, #12
				f_sync(&fp);

        ret = f_close(&fp);
        if(ret != FR_OK)
        {
        	printf("f_close fail:%d\r\n", ret);
 8001bdc:	f00a f812 	bl	800bc04 <iprintf>
          return 1;
 8001be0:	e079      	b.n	8001cd6 <SDCard_Write_log+0x16a>
    	sprintf(file_name_buf,"20250101");
 8001be2:	4942      	ldr	r1, [pc, #264]	@ (8001cec <SDCard_Write_log+0x180>)
 8001be4:	a808      	add	r0, sp, #32
 8001be6:	f00a fab4 	bl	800c152 <strcpy>
 8001bea:	e7e2      	b.n	8001bb2 <SDCard_Write_log+0x46>
    switch(res){
 8001bec:	b1bc      	cbz	r4, 8001c1e <SDCard_Write_log+0xb2>
 8001bee:	2c04      	cmp	r4, #4
 8001bf0:	f040 81d9 	bne.w	8001fa6 <SDCard_Write_log+0x43a>
    		char header[] = {0xE5,0xBA,0x8F,0xE5,0x8F,0xB7,0x2C,0xE6,0x97,0xA5,0xE6,0x9C,0x9F,
 8001bf4:	226a      	movs	r2, #106	@ 0x6a
 8001bf6:	493e      	ldr	r1, [pc, #248]	@ (8001cf0 <SDCard_Write_log+0x184>)
 8001bf8:	a829      	add	r0, sp, #164	@ 0xa4
 8001bfa:	f00a fac0 	bl	800c17e <memcpy>
        ret = f_write_retry(&fp, header, strlen(header));
 8001bfe:	a829      	add	r0, sp, #164	@ 0xa4
 8001c00:	f7fe fab0 	bl	8000164 <strlen>
 8001c04:	a929      	add	r1, sp, #164	@ 0xa4
 8001c06:	4602      	mov	r2, r0
 8001c08:	a844      	add	r0, sp, #272	@ 0x110
 8001c0a:	f7ff feab 	bl	8001964 <f_write_retry>
        f_sync(&fp);
 8001c0e:	a844      	add	r0, sp, #272	@ 0x110
 8001c10:	f003 f9d8 	bl	8004fc4 <f_sync>
        csv_crt_line_No = 0;
 8001c14:	4937      	ldr	r1, [pc, #220]	@ (8001cf4 <SDCard_Write_log+0x188>)
        AD24C02_Write2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);
 8001c16:	2050      	movs	r0, #80	@ 0x50
        csv_crt_line_No = 0;
 8001c18:	800d      	strh	r5, [r1, #0]
        AD24C02_Write2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);
 8001c1a:	f7ff f95b 	bl	8000ed4 <AD24C02_Write2Byte>
				LogBuf.No = csv_crt_line_No++;
 8001c1e:	4c35      	ldr	r4, [pc, #212]	@ (8001cf4 <SDCard_Write_log+0x188>)
				Format_GPS_Date(LogBuf.Date,RMC_Result_Data.time,RMC_Result_Data.date);
 8001c20:	f20d 31bb 	addw	r1, sp, #955	@ 0x3bb
				LogBuf.No = csv_crt_line_No++;
 8001c24:	8823      	ldrh	r3, [r4, #0]
				Format_GPS_Date(LogBuf.Date,RMC_Result_Data.time,RMC_Result_Data.date);
 8001c26:	f10d 006a 	add.w	r0, sp, #106	@ 0x6a
				LogBuf.No = csv_crt_line_No++;
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	8022      	strh	r2, [r4, #0]
				Format_GPS_Date(LogBuf.Date,RMC_Result_Data.time,RMC_Result_Data.date);
 8001c2e:	aafa      	add	r2, sp, #1000	@ 0x3e8
				LogBuf.No = csv_crt_line_No++;
 8001c30:	f8ad 3068 	strh.w	r3, [sp, #104]	@ 0x68
				Format_GPS_Date(LogBuf.Date,RMC_Result_Data.time,RMC_Result_Data.date);
 8001c34:	f7ff fad6 	bl	80011e4 <Format_GPS_Date>
				Format_GPS_Time(LogBuf.Time,RMC_Result_Data.time);
 8001c38:	f20d 31bb 	addw	r1, sp, #955	@ 0x3bb
 8001c3c:	f10d 0075 	add.w	r0, sp, #117	@ 0x75
 8001c40:	f7ff fb2c 	bl	800129c <Format_GPS_Time>
				LogBuf.TreeSN = current_TreeNo;
 8001c44:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf8 <SDCard_Write_log+0x18c>)
				FormatLongitude(LogBuf.Lng, GGA_Result_Data.longitude, GGA_Result_Data.lon_dir);
 8001c46:	f89d 23a4 	ldrb.w	r2, [sp, #932]	@ 0x3a4
				LogBuf.TreeSN = current_TreeNo;
 8001c4a:	881b      	ldrh	r3, [r3, #0]
				FormatLongitude(LogBuf.Lng, GGA_Result_Data.longitude, GGA_Result_Data.lon_dir);
 8001c4c:	a9e6      	add	r1, sp, #920	@ 0x398
				LogBuf.TreeSN = current_TreeNo;
 8001c4e:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
				LogBuf.TreeDose = InjectTimes*2;
 8001c52:	4b2a      	ldr	r3, [pc, #168]	@ (8001cfc <SDCard_Write_log+0x190>)
				FormatLongitude(LogBuf.Lng, GGA_Result_Data.longitude, GGA_Result_Data.lon_dir);
 8001c54:	a821      	add	r0, sp, #132	@ 0x84
				LogBuf.TreeDose = InjectTimes*2;
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	f8ad 3082 	strh.w	r3, [sp, #130]	@ 0x82
				FormatLongitude(LogBuf.Lng, GGA_Result_Data.longitude, GGA_Result_Data.lon_dir);
 8001c5e:	f7ff fbb9 	bl	80013d4 <FormatLongitude>
				FormatLatitude(LogBuf.Lat, GGA_Result_Data.latitude, GGA_Result_Data.lat_dir);
 8001c62:	f89d 2397 	ldrb.w	r2, [sp, #919]	@ 0x397
 8001c66:	f20d 318b 	addw	r1, sp, #907	@ 0x38b
 8001c6a:	f10d 008e 	add.w	r0, sp, #142	@ 0x8e
 8001c6e:	f7ff fbdb 	bl	8001428 <FormatLatitude>
				FormatAltitude(LogBuf.Alt, GGA_Result_Data.altitude);
 8001c72:	98ea      	ldr	r0, [sp, #936]	@ 0x3a8
 8001c74:	f7fe fbe2 	bl	800043c <__aeabi_f2d>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	a826      	add	r0, sp, #152	@ 0x98
 8001c7e:	f7ff fc01 	bl	8001484 <FormatAltitude>
				LogBuf.CumDose = total_inject_Dosage;
 8001c82:	4b1f      	ldr	r3, [pc, #124]	@ (8001d00 <SDCard_Write_log+0x194>)
				AD24C02_Write2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);
 8001c84:	4621      	mov	r1, r4
				LogBuf.CumDose = total_inject_Dosage;
 8001c86:	881b      	ldrh	r3, [r3, #0]
				AD24C02_Write2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);
 8001c88:	2050      	movs	r0, #80	@ 0x50
				LogBuf.CumDose = total_inject_Dosage;
 8001c8a:	f8ad 30a0 	strh.w	r3, [sp, #160]	@ 0xa0
				LogBuf.CumQuty = total_Times;
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d04 <SDCard_Write_log+0x198>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	f8ad 30a2 	strh.w	r3, [sp, #162]	@ 0xa2
				AD24C02_Write2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);
 8001c96:	f7ff f91d 	bl	8000ed4 <AD24C02_Write2Byte>
				printf("\r\n");
 8001c9a:	481b      	ldr	r0, [pc, #108]	@ (8001d08 <SDCard_Write_log+0x19c>)
 8001c9c:	f00a f81a 	bl	800bcd4 <puts>
				printf("%04d,",LogBuf.No);//第1列：序号 0001
 8001ca0:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8001ca4:	4819      	ldr	r0, [pc, #100]	@ (8001d0c <SDCard_Write_log+0x1a0>)
 8001ca6:	f009 ffad 	bl	800bc04 <iprintf>
				sprintf(write_bf,"%4d,",LogBuf.No);
 8001caa:	f8bd 2068 	ldrh.w	r2, [sp, #104]	@ 0x68
 8001cae:	4918      	ldr	r1, [pc, #96]	@ (8001d10 <SDCard_Write_log+0x1a4>)
 8001cb0:	a80d      	add	r0, sp, #52	@ 0x34
 8001cb2:	f00a f84b 	bl	800bd4c <siprintf>
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 8001cb6:	a80d      	add	r0, sp, #52	@ 0x34
 8001cb8:	f7fe fa54 	bl	8000164 <strlen>
 8001cbc:	a90d      	add	r1, sp, #52	@ 0x34
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	a844      	add	r0, sp, #272	@ 0x110
 8001cc2:	f7ff fe4f 	bl	8001964 <f_write_retry>
				if (ret != FR_OK) {
 8001cc6:	4601      	mov	r1, r0
 8001cc8:	b330      	cbz	r0, 8001d18 <SDCard_Write_log+0x1ac>
				    printf("Write failed: %d\n", ret);
 8001cca:	4812      	ldr	r0, [pc, #72]	@ (8001d14 <SDCard_Write_log+0x1a8>)
 8001ccc:	f009 ff9a 	bl	800bc04 <iprintf>
				    f_close(&fp);
 8001cd0:	a844      	add	r0, sp, #272	@ 0x110
 8001cd2:	f003 fa28 	bl	8005126 <f_close>
      return 1;
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	e15f      	b.n	8001f9a <SDCard_Write_log+0x42e>
 8001cda:	bf00      	nop
 8001cdc:	200007c8 	.word	0x200007c8
 8001ce0:	20000228 	.word	0x20000228
 8001ce4:	0800eac1 	.word	0x0800eac1
 8001ce8:	0800eacf 	.word	0x0800eacf
 8001cec:	0800eab8 	.word	0x0800eab8
 8001cf0:	0800eb14 	.word	0x0800eb14
 8001cf4:	200007c4 	.word	0x200007c4
 8001cf8:	200008c2 	.word	0x200008c2
 8001cfc:	20000941 	.word	0x20000941
 8001d00:	20000a4c 	.word	0x20000a4c
 8001d04:	20000a4a 	.word	0x20000a4a
 8001d08:	0800f263 	.word	0x0800f263
 8001d0c:	0800eb7f 	.word	0x0800eb7f
 8001d10:	0800eb85 	.word	0x0800eb85
 8001d14:	0800eb8a 	.word	0x0800eb8a
				memset(write_bf,'\0',sizeof(write_bf));
 8001d18:	2232      	movs	r2, #50	@ 0x32
 8001d1a:	a80d      	add	r0, sp, #52	@ 0x34
 8001d1c:	f00a f91e 	bl	800bf5c <memset>
				if(GGA_Result_Data.fix_status == 1){
 8001d20:	f89d 33a5 	ldrb.w	r3, [sp, #933]	@ 0x3a5
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	f040 8109 	bne.w	8001f3c <SDCard_Write_log+0x3d0>
					printf("%s,",LogBuf.Date);//第2列：日期 2025/02/25
 8001d2a:	f10d 016a 	add.w	r1, sp, #106	@ 0x6a
 8001d2e:	48a2      	ldr	r0, [pc, #648]	@ (8001fb8 <SDCard_Write_log+0x44c>)
 8001d30:	f009 ff68 	bl	800bc04 <iprintf>
					sprintf(write_bf,"%s,",LogBuf.Date);//第2列：日期 2025/02/25
 8001d34:	49a0      	ldr	r1, [pc, #640]	@ (8001fb8 <SDCard_Write_log+0x44c>)
 8001d36:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 8001d3a:	a80d      	add	r0, sp, #52	@ 0x34
 8001d3c:	f00a f806 	bl	800bd4c <siprintf>
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 8001d40:	a80d      	add	r0, sp, #52	@ 0x34
 8001d42:	f7fe fa0f 	bl	8000164 <strlen>
 8001d46:	a90d      	add	r1, sp, #52	@ 0x34
 8001d48:	4602      	mov	r2, r0
 8001d4a:	a844      	add	r0, sp, #272	@ 0x110
 8001d4c:	f7ff fe0a 	bl	8001964 <f_write_retry>
				if (ret != FR_OK) {
 8001d50:	4601      	mov	r1, r0
 8001d52:	2800      	cmp	r0, #0
 8001d54:	d1b9      	bne.n	8001cca <SDCard_Write_log+0x15e>
				memset(write_bf,'\0',sizeof(write_bf));
 8001d56:	2232      	movs	r2, #50	@ 0x32
 8001d58:	a80d      	add	r0, sp, #52	@ 0x34
 8001d5a:	f00a f8ff 	bl	800bf5c <memset>
				if(GGA_Result_Data.fix_status == 1){
 8001d5e:	f89d 33a5 	ldrb.w	r3, [sp, #933]	@ 0x3a5
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	f040 80f2 	bne.w	8001f4c <SDCard_Write_log+0x3e0>
					printf("%s,",LogBuf.Time);//第3列：时间 18:21:21
 8001d68:	f10d 0175 	add.w	r1, sp, #117	@ 0x75
 8001d6c:	4892      	ldr	r0, [pc, #584]	@ (8001fb8 <SDCard_Write_log+0x44c>)
 8001d6e:	f009 ff49 	bl	800bc04 <iprintf>
					sprintf(write_bf,"%s,",LogBuf.Time);//第3列：时间 18:21:21
 8001d72:	4991      	ldr	r1, [pc, #580]	@ (8001fb8 <SDCard_Write_log+0x44c>)
 8001d74:	f10d 0275 	add.w	r2, sp, #117	@ 0x75
 8001d78:	a80d      	add	r0, sp, #52	@ 0x34
 8001d7a:	f009 ffe7 	bl	800bd4c <siprintf>
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 8001d7e:	a80d      	add	r0, sp, #52	@ 0x34
 8001d80:	f7fe f9f0 	bl	8000164 <strlen>
 8001d84:	a90d      	add	r1, sp, #52	@ 0x34
 8001d86:	4602      	mov	r2, r0
 8001d88:	a844      	add	r0, sp, #272	@ 0x110
 8001d8a:	f7ff fdeb 	bl	8001964 <f_write_retry>
				if (ret != FR_OK) {
 8001d8e:	4601      	mov	r1, r0
 8001d90:	2800      	cmp	r0, #0
 8001d92:	d19a      	bne.n	8001cca <SDCard_Write_log+0x15e>
				memset(write_bf,'\0',sizeof(write_bf));
 8001d94:	2232      	movs	r2, #50	@ 0x32
 8001d96:	a80d      	add	r0, sp, #52	@ 0x34
 8001d98:	f00a f8e0 	bl	800bf5c <memset>
				printf("%04d,",LogBuf.TreeSN);//第4列：序号 0001
 8001d9c:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8001da0:	4886      	ldr	r0, [pc, #536]	@ (8001fbc <SDCard_Write_log+0x450>)
 8001da2:	f009 ff2f 	bl	800bc04 <iprintf>
				sprintf(write_bf,"%4d,",LogBuf.TreeSN);
 8001da6:	f8bd 2080 	ldrh.w	r2, [sp, #128]	@ 0x80
 8001daa:	4985      	ldr	r1, [pc, #532]	@ (8001fc0 <SDCard_Write_log+0x454>)
 8001dac:	a80d      	add	r0, sp, #52	@ 0x34
 8001dae:	f009 ffcd 	bl	800bd4c <siprintf>
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 8001db2:	a80d      	add	r0, sp, #52	@ 0x34
 8001db4:	f7fe f9d6 	bl	8000164 <strlen>
 8001db8:	a90d      	add	r1, sp, #52	@ 0x34
 8001dba:	4602      	mov	r2, r0
 8001dbc:	a844      	add	r0, sp, #272	@ 0x110
 8001dbe:	f7ff fdd1 	bl	8001964 <f_write_retry>
				if (ret != FR_OK) {
 8001dc2:	4601      	mov	r1, r0
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	d180      	bne.n	8001cca <SDCard_Write_log+0x15e>
				memset(write_bf,'\0',sizeof(write_bf));
 8001dc8:	2232      	movs	r2, #50	@ 0x32
 8001dca:	a80d      	add	r0, sp, #52	@ 0x34
 8001dcc:	f00a f8c6 	bl	800bf5c <memset>
				printf("%d,",LogBuf.TreeDose);//第5列：注射剂量 30
 8001dd0:	f8bd 1082 	ldrh.w	r1, [sp, #130]	@ 0x82
 8001dd4:	487b      	ldr	r0, [pc, #492]	@ (8001fc4 <SDCard_Write_log+0x458>)
 8001dd6:	f009 ff15 	bl	800bc04 <iprintf>
				sprintf(write_bf,"%d,",LogBuf.TreeDose);
 8001dda:	f8bd 2082 	ldrh.w	r2, [sp, #130]	@ 0x82
 8001dde:	4979      	ldr	r1, [pc, #484]	@ (8001fc4 <SDCard_Write_log+0x458>)
 8001de0:	a80d      	add	r0, sp, #52	@ 0x34
 8001de2:	f009 ffb3 	bl	800bd4c <siprintf>
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 8001de6:	a80d      	add	r0, sp, #52	@ 0x34
 8001de8:	f7fe f9bc 	bl	8000164 <strlen>
 8001dec:	a90d      	add	r1, sp, #52	@ 0x34
 8001dee:	4602      	mov	r2, r0
 8001df0:	a844      	add	r0, sp, #272	@ 0x110
 8001df2:	f7ff fdb7 	bl	8001964 <f_write_retry>
				if (ret != FR_OK) {
 8001df6:	4601      	mov	r1, r0
 8001df8:	2800      	cmp	r0, #0
 8001dfa:	f47f af66 	bne.w	8001cca <SDCard_Write_log+0x15e>
				memset(write_bf,'\0',sizeof(write_bf));
 8001dfe:	2232      	movs	r2, #50	@ 0x32
 8001e00:	a80d      	add	r0, sp, #52	@ 0x34
 8001e02:	f00a f8ab 	bl	800bf5c <memset>
				if(GGA_Result_Data.fix_status == 1){
 8001e06:	f89d 33a5 	ldrb.w	r3, [sp, #933]	@ 0x3a5
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	f040 80a6 	bne.w	8001f5c <SDCard_Write_log+0x3f0>
					printf("%s,",LogBuf.Lng);//第6列：经度 E118°48'
 8001e10:	a921      	add	r1, sp, #132	@ 0x84
 8001e12:	4869      	ldr	r0, [pc, #420]	@ (8001fb8 <SDCard_Write_log+0x44c>)
 8001e14:	f009 fef6 	bl	800bc04 <iprintf>
					sprintf(write_bf,"%s,",LogBuf.Lng);//第6列：经度 E118°48'
 8001e18:	4967      	ldr	r1, [pc, #412]	@ (8001fb8 <SDCard_Write_log+0x44c>)
 8001e1a:	aa21      	add	r2, sp, #132	@ 0x84
 8001e1c:	a80d      	add	r0, sp, #52	@ 0x34
 8001e1e:	f009 ff95 	bl	800bd4c <siprintf>
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 8001e22:	a80d      	add	r0, sp, #52	@ 0x34
 8001e24:	f7fe f99e 	bl	8000164 <strlen>
 8001e28:	a90d      	add	r1, sp, #52	@ 0x34
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	a844      	add	r0, sp, #272	@ 0x110
 8001e2e:	f7ff fd99 	bl	8001964 <f_write_retry>
				if (ret != FR_OK) {
 8001e32:	4601      	mov	r1, r0
 8001e34:	2800      	cmp	r0, #0
 8001e36:	f47f af48 	bne.w	8001cca <SDCard_Write_log+0x15e>
				memset(write_bf,'\0',sizeof(write_bf));
 8001e3a:	2232      	movs	r2, #50	@ 0x32
 8001e3c:	a80d      	add	r0, sp, #52	@ 0x34
 8001e3e:	f00a f88d 	bl	800bf5c <memset>
				if(GGA_Result_Data.fix_status == 1){
 8001e42:	f89d 33a5 	ldrb.w	r3, [sp, #933]	@ 0x3a5
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	f040 8090 	bne.w	8001f6c <SDCard_Write_log+0x400>
					printf("%s,",LogBuf.Lat);//第7列：纬度 N31°50'
 8001e4c:	f10d 018e 	add.w	r1, sp, #142	@ 0x8e
 8001e50:	4859      	ldr	r0, [pc, #356]	@ (8001fb8 <SDCard_Write_log+0x44c>)
 8001e52:	f009 fed7 	bl	800bc04 <iprintf>
					sprintf(write_bf,"%s,",LogBuf.Lat);//第7列：纬度 N31°50'
 8001e56:	4958      	ldr	r1, [pc, #352]	@ (8001fb8 <SDCard_Write_log+0x44c>)
 8001e58:	f10d 028e 	add.w	r2, sp, #142	@ 0x8e
 8001e5c:	a80d      	add	r0, sp, #52	@ 0x34
 8001e5e:	f009 ff75 	bl	800bd4c <siprintf>
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 8001e62:	a80d      	add	r0, sp, #52	@ 0x34
 8001e64:	f7fe f97e 	bl	8000164 <strlen>
 8001e68:	a90d      	add	r1, sp, #52	@ 0x34
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	a844      	add	r0, sp, #272	@ 0x110
 8001e6e:	f7ff fd79 	bl	8001964 <f_write_retry>
				if (ret != FR_OK) {
 8001e72:	4601      	mov	r1, r0
 8001e74:	2800      	cmp	r0, #0
 8001e76:	f47f af28 	bne.w	8001cca <SDCard_Write_log+0x15e>
				memset(write_bf,'\0',sizeof(write_bf));
 8001e7a:	2232      	movs	r2, #50	@ 0x32
 8001e7c:	a80d      	add	r0, sp, #52	@ 0x34
 8001e7e:	f00a f86d 	bl	800bf5c <memset>
				if(GGA_Result_Data.fix_status == 1){
 8001e82:	f89d 33a5 	ldrb.w	r3, [sp, #933]	@ 0x3a5
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d178      	bne.n	8001f7c <SDCard_Write_log+0x410>
					printf("%s,",LogBuf.Alt);//第8列：海拔 88.9
 8001e8a:	a926      	add	r1, sp, #152	@ 0x98
 8001e8c:	484a      	ldr	r0, [pc, #296]	@ (8001fb8 <SDCard_Write_log+0x44c>)
 8001e8e:	f009 feb9 	bl	800bc04 <iprintf>
					sprintf(write_bf,"%s,",LogBuf.Alt);//第8列：海拔 88.9
 8001e92:	4949      	ldr	r1, [pc, #292]	@ (8001fb8 <SDCard_Write_log+0x44c>)
 8001e94:	aa26      	add	r2, sp, #152	@ 0x98
 8001e96:	a80d      	add	r0, sp, #52	@ 0x34
 8001e98:	f009 ff58 	bl	800bd4c <siprintf>
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 8001e9c:	a80d      	add	r0, sp, #52	@ 0x34
 8001e9e:	f7fe f961 	bl	8000164 <strlen>
 8001ea2:	a90d      	add	r1, sp, #52	@ 0x34
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	a844      	add	r0, sp, #272	@ 0x110
 8001ea8:	f7ff fd5c 	bl	8001964 <f_write_retry>
				if (ret != FR_OK) {
 8001eac:	4601      	mov	r1, r0
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	f47f af0b 	bne.w	8001cca <SDCard_Write_log+0x15e>
				memset(write_bf,'\0',sizeof(write_bf));
 8001eb4:	2232      	movs	r2, #50	@ 0x32
 8001eb6:	a80d      	add	r0, sp, #52	@ 0x34
 8001eb8:	f00a f850 	bl	800bf5c <memset>
				printf("%d,",LogBuf.CumDose);//第9列，累计剂量 892
 8001ebc:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	@ 0xa0
 8001ec0:	4840      	ldr	r0, [pc, #256]	@ (8001fc4 <SDCard_Write_log+0x458>)
 8001ec2:	f009 fe9f 	bl	800bc04 <iprintf>
				sprintf(write_bf,"%d,",LogBuf.CumDose);
 8001ec6:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	@ 0xa0
 8001eca:	493e      	ldr	r1, [pc, #248]	@ (8001fc4 <SDCard_Write_log+0x458>)
 8001ecc:	a80d      	add	r0, sp, #52	@ 0x34
 8001ece:	f009 ff3d 	bl	800bd4c <siprintf>
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 8001ed2:	a80d      	add	r0, sp, #52	@ 0x34
 8001ed4:	f7fe f946 	bl	8000164 <strlen>
 8001ed8:	a90d      	add	r1, sp, #52	@ 0x34
 8001eda:	4602      	mov	r2, r0
 8001edc:	a844      	add	r0, sp, #272	@ 0x110
 8001ede:	f7ff fd41 	bl	8001964 <f_write_retry>
				if (ret != FR_OK) {
 8001ee2:	4601      	mov	r1, r0
 8001ee4:	2800      	cmp	r0, #0
 8001ee6:	f47f aef0 	bne.w	8001cca <SDCard_Write_log+0x15e>
				memset(write_bf,'\0',sizeof(write_bf));
 8001eea:	2232      	movs	r2, #50	@ 0x32
 8001eec:	a80d      	add	r0, sp, #52	@ 0x34
 8001eee:	f00a f835 	bl	800bf5c <memset>
				printf("%d\r\n",LogBuf.CumQuty);//第10列，累计数量 112
 8001ef2:	f8bd 10a2 	ldrh.w	r1, [sp, #162]	@ 0xa2
 8001ef6:	4834      	ldr	r0, [pc, #208]	@ (8001fc8 <SDCard_Write_log+0x45c>)
 8001ef8:	f009 fe84 	bl	800bc04 <iprintf>
				sprintf(write_bf,"%d\r\n",LogBuf.CumQuty);
 8001efc:	f8bd 20a2 	ldrh.w	r2, [sp, #162]	@ 0xa2
 8001f00:	4931      	ldr	r1, [pc, #196]	@ (8001fc8 <SDCard_Write_log+0x45c>)
 8001f02:	a80d      	add	r0, sp, #52	@ 0x34
 8001f04:	f009 ff22 	bl	800bd4c <siprintf>
				ret = f_write_retry(&fp, write_bf, strlen(write_bf));
 8001f08:	a80d      	add	r0, sp, #52	@ 0x34
 8001f0a:	f7fe f92b 	bl	8000164 <strlen>
 8001f0e:	a90d      	add	r1, sp, #52	@ 0x34
 8001f10:	4602      	mov	r2, r0
 8001f12:	a844      	add	r0, sp, #272	@ 0x110
 8001f14:	f7ff fd26 	bl	8001964 <f_write_retry>
				if (ret != FR_OK) {
 8001f18:	4601      	mov	r1, r0
 8001f1a:	2800      	cmp	r0, #0
 8001f1c:	f47f aed5 	bne.w	8001cca <SDCard_Write_log+0x15e>
				memset(write_bf,'\0',sizeof(write_bf));
 8001f20:	2232      	movs	r2, #50	@ 0x32
 8001f22:	a80d      	add	r0, sp, #52	@ 0x34
 8001f24:	f00a f81a 	bl	800bf5c <memset>
				f_sync(&fp);
 8001f28:	a844      	add	r0, sp, #272	@ 0x110
 8001f2a:	f003 f84b 	bl	8004fc4 <f_sync>
        ret = f_close(&fp);
 8001f2e:	a844      	add	r0, sp, #272	@ 0x110
 8001f30:	f003 f8f9 	bl	8005126 <f_close>
        if(ret != FR_OK)
 8001f34:	4601      	mov	r1, r0
 8001f36:	b348      	cbz	r0, 8001f8c <SDCard_Write_log+0x420>
        	printf("f_close fail:%d\r\n", ret);
 8001f38:	4824      	ldr	r0, [pc, #144]	@ (8001fcc <SDCard_Write_log+0x460>)
 8001f3a:	e64f      	b.n	8001bdc <SDCard_Write_log+0x70>
					printf("2025/01/01,");//第2列：日期 2025/01/01
 8001f3c:	4824      	ldr	r0, [pc, #144]	@ (8001fd0 <SDCard_Write_log+0x464>)
 8001f3e:	f009 fe61 	bl	800bc04 <iprintf>
					sprintf(write_bf,"2025/01/01,");//第2列：日期 2025/01/01
 8001f42:	4923      	ldr	r1, [pc, #140]	@ (8001fd0 <SDCard_Write_log+0x464>)
 8001f44:	a80d      	add	r0, sp, #52	@ 0x34
 8001f46:	f00a f904 	bl	800c152 <strcpy>
 8001f4a:	e6f9      	b.n	8001d40 <SDCard_Write_log+0x1d4>
					printf("12:00:00,");//第3列：时间 12:00:00
 8001f4c:	4821      	ldr	r0, [pc, #132]	@ (8001fd4 <SDCard_Write_log+0x468>)
 8001f4e:	f009 fe59 	bl	800bc04 <iprintf>
					sprintf(write_bf,"12:00:00,");//第3列：时间 12:00:00
 8001f52:	4920      	ldr	r1, [pc, #128]	@ (8001fd4 <SDCard_Write_log+0x468>)
 8001f54:	a80d      	add	r0, sp, #52	@ 0x34
 8001f56:	f00a f8fc 	bl	800c152 <strcpy>
 8001f5a:	e710      	b.n	8001d7e <SDCard_Write_log+0x212>
					printf("E118°48',");//第6列：经度 E118°48'
 8001f5c:	481e      	ldr	r0, [pc, #120]	@ (8001fd8 <SDCard_Write_log+0x46c>)
 8001f5e:	f009 fe51 	bl	800bc04 <iprintf>
					sprintf(write_bf,"E118°48',");//第6列：经度 E118°48
 8001f62:	491d      	ldr	r1, [pc, #116]	@ (8001fd8 <SDCard_Write_log+0x46c>)
 8001f64:	a80d      	add	r0, sp, #52	@ 0x34
 8001f66:	f00a f8f4 	bl	800c152 <strcpy>
 8001f6a:	e75a      	b.n	8001e22 <SDCard_Write_log+0x2b6>
					printf("N31°50',");//第7列：纬度 N31°50'
 8001f6c:	481b      	ldr	r0, [pc, #108]	@ (8001fdc <SDCard_Write_log+0x470>)
 8001f6e:	f009 fe49 	bl	800bc04 <iprintf>
					sprintf(write_bf,"N31°50',");//第7列：纬度 N31°50'
 8001f72:	491a      	ldr	r1, [pc, #104]	@ (8001fdc <SDCard_Write_log+0x470>)
 8001f74:	a80d      	add	r0, sp, #52	@ 0x34
 8001f76:	f00a f8ec 	bl	800c152 <strcpy>
 8001f7a:	e772      	b.n	8001e62 <SDCard_Write_log+0x2f6>
					printf("88.9,");//第8列：海拔 88.9
 8001f7c:	4818      	ldr	r0, [pc, #96]	@ (8001fe0 <SDCard_Write_log+0x474>)
 8001f7e:	f009 fe41 	bl	800bc04 <iprintf>
					sprintf(write_bf,"88.9,");//第8列：海拔 88.9
 8001f82:	4917      	ldr	r1, [pc, #92]	@ (8001fe0 <SDCard_Write_log+0x474>)
 8001f84:	a80d      	add	r0, sp, #52	@ 0x34
 8001f86:	f00a f8e4 	bl	800c152 <strcpy>
 8001f8a:	e787      	b.n	8001e9c <SDCard_Write_log+0x330>
        }else{
        	sprintf(Tx_Buffer,"Main.t0.txt=\"SDCard write success！\"\xff\xff\xff");
 8001f8c:	4915      	ldr	r1, [pc, #84]	@ (8001fe4 <SDCard_Write_log+0x478>)
 8001f8e:	4816      	ldr	r0, [pc, #88]	@ (8001fe8 <SDCard_Write_log+0x47c>)
 8001f90:	f00a f8df 	bl	800c152 <strcpy>
        	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8001f94:	4814      	ldr	r0, [pc, #80]	@ (8001fe8 <SDCard_Write_log+0x47c>)
 8001f96:	f005 fdd1 	bl	8007b3c <USART1_Tx_HMIdata>
	}
	else
	{
		return -1;//没发现SDCard
	}
}
 8001f9a:	f50d 7d5b 	add.w	sp, sp, #876	@ 0x36c
 8001f9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001fa2:	b004      	add	sp, #16
 8001fa4:	4770      	bx	lr
				printf("错误码: %d\r\n", res);  // 其他错误（如硬件问题）
 8001fa6:	4621      	mov	r1, r4
 8001fa8:	4810      	ldr	r0, [pc, #64]	@ (8001fec <SDCard_Write_log+0x480>)
 8001faa:	f009 fe2b 	bl	800bc04 <iprintf>
}
 8001fae:	e7f4      	b.n	8001f9a <SDCard_Write_log+0x42e>
		return -1;//没发现SDCard
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	e7f1      	b.n	8001f9a <SDCard_Write_log+0x42e>
 8001fb6:	bf00      	nop
 8001fb8:	0800eb9c 	.word	0x0800eb9c
 8001fbc:	0800eb7f 	.word	0x0800eb7f
 8001fc0:	0800eb85 	.word	0x0800eb85
 8001fc4:	0800ebb6 	.word	0x0800ebb6
 8001fc8:	0800eb0f 	.word	0x0800eb0f
 8001fcc:	0800eaf2 	.word	0x0800eaf2
 8001fd0:	0800eba0 	.word	0x0800eba0
 8001fd4:	0800ebac 	.word	0x0800ebac
 8001fd8:	0800ebba 	.word	0x0800ebba
 8001fdc:	0800ebc5 	.word	0x0800ebc5
 8001fe0:	0800ebcf 	.word	0x0800ebcf
 8001fe4:	0800ebd5 	.word	0x0800ebd5
 8001fe8:	20000b8a 	.word	0x20000b8a
 8001fec:	0800eb04 	.word	0x0800eb04

08001ff0 <SD_WriteByte>:
//  /*!< Return the byte read from the SPI bus */
//  return SPI_I2S_ReceiveData(SD_SPI);
//}

// SPI单字节传输
uint8_t SD_WriteByte(uint8_t data) {
 8001ff0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t rx;
  HAL_SPI_TransmitReceive(&hspi1, &data, &rx, 1, 100);
 8001ff2:	2364      	movs	r3, #100	@ 0x64
uint8_t SD_WriteByte(uint8_t data) {
 8001ff4:	f88d 000f 	strb.w	r0, [sp, #15]
  HAL_SPI_TransmitReceive(&hspi1, &data, &rx, 1, 100);
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	f10d 0217 	add.w	r2, sp, #23
 8001ffe:	2301      	movs	r3, #1
 8002000:	f10d 010f 	add.w	r1, sp, #15
 8002004:	4803      	ldr	r0, [pc, #12]	@ (8002014 <SD_WriteByte+0x24>)
 8002006:	f007 f8cd 	bl	80091a4 <HAL_SPI_TransmitReceive>
  return rx;
}
 800200a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800200e:	b007      	add	sp, #28
 8002010:	f85d fb04 	ldr.w	pc, [sp], #4
 8002014:	20000944 	.word	0x20000944

08002018 <SD_SendCmd>:
{
 8002018:	b537      	push	{r0, r1, r2, r4, r5, lr}
  for (i = 0; i < 6; i++)
 800201a:	2400      	movs	r4, #0
 800201c:	466d      	mov	r5, sp
  Frame[1] = (uint8_t)(Arg >> 24); /*!< Construct byte 2 */
 800201e:	0e0b      	lsrs	r3, r1, #24
 8002020:	f88d 3001 	strb.w	r3, [sp, #1]
  Frame[2] = (uint8_t)(Arg >> 16); /*!< Construct byte 3 */
 8002024:	0c0b      	lsrs	r3, r1, #16
  Frame[0] = (Cmd | 0x40); /*!< Construct byte 1 */
 8002026:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
  Frame[2] = (uint8_t)(Arg >> 16); /*!< Construct byte 3 */
 800202a:	f88d 3002 	strb.w	r3, [sp, #2]
  Frame[3] = (uint8_t)(Arg >> 8); /*!< Construct byte 4 */
 800202e:	0a0b      	lsrs	r3, r1, #8
  Frame[0] = (Cmd | 0x40); /*!< Construct byte 1 */
 8002030:	f88d 0000 	strb.w	r0, [sp]
  Frame[3] = (uint8_t)(Arg >> 8); /*!< Construct byte 4 */
 8002034:	f88d 3003 	strb.w	r3, [sp, #3]
  Frame[4] = (uint8_t)(Arg); /*!< Construct byte 5 */
 8002038:	f88d 1004 	strb.w	r1, [sp, #4]
  Frame[5] = (Crc); /*!< Construct CRC: byte 6 */
 800203c:	f88d 2005 	strb.w	r2, [sp, #5]
    SD_WriteByte(Frame[i]); /*!< Send the Cmd bytes */
 8002040:	f815 0b01 	ldrb.w	r0, [r5], #1
  for (i = 0; i < 6; i++)
 8002044:	3401      	adds	r4, #1
    SD_WriteByte(Frame[i]); /*!< Send the Cmd bytes */
 8002046:	f7ff ffd3 	bl	8001ff0 <SD_WriteByte>
  for (i = 0; i < 6; i++)
 800204a:	2c06      	cmp	r4, #6
 800204c:	d1f8      	bne.n	8002040 <SD_SendCmd+0x28>
}
 800204e:	b003      	add	sp, #12
 8002050:	bd30      	pop	{r4, r5, pc}

08002052 <SD_ReadByte>:
  */
uint8_t SD_ReadByte(void)
{
  uint8_t Data = 0;

  Data = SD_WriteByte(SD_DUMMY_BYTE);
 8002052:	20ff      	movs	r0, #255	@ 0xff
 8002054:	f7ff bfcc 	b.w	8001ff0 <SD_WriteByte>

08002058 <SD_GetDataResponse>:
{
 8002058:	b538      	push	{r3, r4, r5, lr}
 800205a:	2541      	movs	r5, #65	@ 0x41
    response = SD_ReadByte();
 800205c:	f7ff fff9 	bl	8002052 <SD_ReadByte>
    response &= 0x1F;
 8002060:	f000 041f 	and.w	r4, r0, #31
    switch (response)
 8002064:	2c0b      	cmp	r4, #11
 8002066:	d009      	beq.n	800207c <SD_GetDataResponse+0x24>
 8002068:	2c0d      	cmp	r4, #13
 800206a:	d007      	beq.n	800207c <SD_GetDataResponse+0x24>
 800206c:	2c05      	cmp	r4, #5
 800206e:	d001      	beq.n	8002074 <SD_GetDataResponse+0x1c>
  while (i <= 64)
 8002070:	3d01      	subs	r5, #1
 8002072:	d1f3      	bne.n	800205c <SD_GetDataResponse+0x4>
  while (SD_ReadByte() == 0);
 8002074:	f7ff ffed 	bl	8002052 <SD_ReadByte>
 8002078:	2800      	cmp	r0, #0
 800207a:	d0fb      	beq.n	8002074 <SD_GetDataResponse+0x1c>
}
 800207c:	4620      	mov	r0, r4
 800207e:	bd38      	pop	{r3, r4, r5, pc}

08002080 <SD_GetResponse>:
{
 8002080:	b538      	push	{r3, r4, r5, lr}
 8002082:	4605      	mov	r5, r0
  uint32_t Count = 0xFFF;
 8002084:	f640 74ff 	movw	r4, #4095	@ 0xfff
  while ((SD_ReadByte() != Response) && Count)
 8002088:	f7ff ffe3 	bl	8002052 <SD_ReadByte>
 800208c:	42a8      	cmp	r0, r5
 800208e:	d000      	beq.n	8002092 <SD_GetResponse+0x12>
 8002090:	b92c      	cbnz	r4, 800209e <SD_GetResponse+0x1e>
  if (Count == 0)
 8002092:	fab4 f484 	clz	r4, r4
 8002096:	0964      	lsrs	r4, r4, #5
 8002098:	4264      	negs	r4, r4
}
 800209a:	b2e0      	uxtb	r0, r4
 800209c:	bd38      	pop	{r3, r4, r5, pc}
    Count--;
 800209e:	3c01      	subs	r4, #1
 80020a0:	e7f2      	b.n	8002088 <SD_GetResponse+0x8>
	...

080020a4 <SD_GoIdleState>:
{
 80020a4:	b510      	push	{r4, lr}
  SD_CS_LOW();
 80020a6:	2200      	movs	r2, #0
 80020a8:	2110      	movs	r1, #16
 80020aa:	480c      	ldr	r0, [pc, #48]	@ (80020dc <SD_GoIdleState+0x38>)
 80020ac:	f006 fc3a 	bl	8008924 <HAL_GPIO_WritePin>
  SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95);
 80020b0:	2100      	movs	r1, #0
 80020b2:	2295      	movs	r2, #149	@ 0x95
 80020b4:	4608      	mov	r0, r1
 80020b6:	f7ff ffaf 	bl	8002018 <SD_SendCmd>
  if (SD_GetResponse(SD_IN_IDLE_STATE))
 80020ba:	2001      	movs	r0, #1
 80020bc:	f7ff ffe0 	bl	8002080 <SD_GetResponse>
 80020c0:	4604      	mov	r4, r0
 80020c2:	b948      	cbnz	r0, 80020d8 <SD_GoIdleState+0x34>
	SD_CS_HIGH();
 80020c4:	4805      	ldr	r0, [pc, #20]	@ (80020dc <SD_GoIdleState+0x38>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	2110      	movs	r1, #16
 80020ca:	f006 fc2b 	bl	8008924 <HAL_GPIO_WritePin>
	SD_WriteByte(SD_DUMMY_BYTE);
 80020ce:	20ff      	movs	r0, #255	@ 0xff
 80020d0:	f7ff ff8e 	bl	8001ff0 <SD_WriteByte>
}
 80020d4:	4620      	mov	r0, r4
 80020d6:	bd10      	pop	{r4, pc}
    return SD_RESPONSE_FAILURE;
 80020d8:	24ff      	movs	r4, #255	@ 0xff
 80020da:	e7fb      	b.n	80020d4 <SD_GoIdleState+0x30>
 80020dc:	40010800 	.word	0x40010800

080020e0 <SD_ReadMultiBlocks>:
{
 80020e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020e4:	4615      	mov	r5, r2
	if (SD_Type == SD_TYPE_V2HC)
 80020e6:	4a24      	ldr	r2, [pc, #144]	@ (8002178 <SD_ReadMultiBlocks+0x98>)
{
 80020e8:	4606      	mov	r6, r0
	if (SD_Type == SD_TYPE_V2HC)
 80020ea:	7812      	ldrb	r2, [r2, #0]
  SD_CS_LOW();
 80020ec:	2110      	movs	r1, #16
	if (SD_Type == SD_TYPE_V2HC)
 80020ee:	2a04      	cmp	r2, #4
    ReadAddr /= 512;
 80020f0:	bf08      	it	eq
 80020f2:	0a6d      	lsreq	r5, r5, #9
  SD_CS_LOW();
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	4820      	ldr	r0, [pc, #128]	@ (800217c <SD_ReadMultiBlocks+0x9c>)
{
 80020fa:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 80020fe:	9f09      	ldr	r7, [sp, #36]	@ 0x24
    BlockSize = 512;
 8002100:	bf04      	itt	eq
 8002102:	f44f 7900 	moveq.w	r9, #512	@ 0x200
    ReadAddr /= 512;
 8002106:	ea45 55c3 	orreq.w	r5, r5, r3, lsl #23
  SD_Error rvalue = SD_RESPONSE_FAILURE;
 800210a:	24ff      	movs	r4, #255	@ 0xff
  SD_CS_LOW();
 800210c:	f006 fc0a 	bl	8008924 <HAL_GPIO_WritePin>
  uint32_t i = 0, Offset = 0;
 8002110:	f04f 0800 	mov.w	r8, #0
  while (NumberOfBlocks--)
 8002114:	b957      	cbnz	r7, 800212c <SD_ReadMultiBlocks+0x4c>
  SD_CS_HIGH();
 8002116:	4819      	ldr	r0, [pc, #100]	@ (800217c <SD_ReadMultiBlocks+0x9c>)
 8002118:	2201      	movs	r2, #1
 800211a:	2110      	movs	r1, #16
 800211c:	f006 fc02 	bl	8008924 <HAL_GPIO_WritePin>
  SD_WriteByte(SD_DUMMY_BYTE);
 8002120:	20ff      	movs	r0, #255	@ 0xff
 8002122:	f7ff ff65 	bl	8001ff0 <SD_WriteByte>
}
 8002126:	4620      	mov	r0, r4
 8002128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SD_SendCmd (SD_CMD_READ_SINGLE_BLOCK, ReadAddr + Offset, 0xFF);
 800212c:	2011      	movs	r0, #17
 800212e:	22ff      	movs	r2, #255	@ 0xff
 8002130:	eb08 0105 	add.w	r1, r8, r5
 8002134:	f7ff ff70 	bl	8002018 <SD_SendCmd>
    if (SD_GetResponse(SD_RESPONSE_NO_ERROR))
 8002138:	2000      	movs	r0, #0
 800213a:	f7ff ffa1 	bl	8002080 <SD_GetResponse>
 800213e:	b9c8      	cbnz	r0, 8002174 <SD_ReadMultiBlocks+0x94>
    if (!SD_GetResponse(SD_START_DATA_SINGLE_BLOCK_READ))
 8002140:	20fe      	movs	r0, #254	@ 0xfe
 8002142:	f7ff ff9d 	bl	8002080 <SD_GetResponse>
 8002146:	4604      	mov	r4, r0
 8002148:	b990      	cbnz	r0, 8002170 <SD_ReadMultiBlocks+0x90>
 800214a:	eb06 0a09 	add.w	sl, r6, r9
      for (i = 0; i < BlockSize; i++)
 800214e:	4556      	cmp	r6, sl
 8002150:	d109      	bne.n	8002166 <SD_ReadMultiBlocks+0x86>
      Offset += BlockSize;
 8002152:	44c8      	add	r8, r9
      SD_ReadByte();
 8002154:	f7ff ff7d 	bl	8002052 <SD_ReadByte>
      SD_ReadByte();
 8002158:	f7ff ff7b 	bl	8002052 <SD_ReadByte>
    SD_WriteByte(SD_DUMMY_BYTE);
 800215c:	20ff      	movs	r0, #255	@ 0xff
 800215e:	f7ff ff47 	bl	8001ff0 <SD_WriteByte>
 8002162:	3f01      	subs	r7, #1
 8002164:	e7d6      	b.n	8002114 <SD_ReadMultiBlocks+0x34>
        *pBuffer = SD_ReadByte();
 8002166:	f7ff ff74 	bl	8002052 <SD_ReadByte>
 800216a:	f806 0b01 	strb.w	r0, [r6], #1
      for (i = 0; i < BlockSize; i++)
 800216e:	e7ee      	b.n	800214e <SD_ReadMultiBlocks+0x6e>
      rvalue = SD_RESPONSE_FAILURE;
 8002170:	24ff      	movs	r4, #255	@ 0xff
 8002172:	e7f3      	b.n	800215c <SD_ReadMultiBlocks+0x7c>
      return  SD_RESPONSE_FAILURE;
 8002174:	24ff      	movs	r4, #255	@ 0xff
 8002176:	e7d6      	b.n	8002126 <SD_ReadMultiBlocks+0x46>
 8002178:	20000828 	.word	0x20000828
 800217c:	40010800 	.word	0x40010800

08002180 <SD_WriteMultiBlocks>:
{
 8002180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002184:	4615      	mov	r5, r2
	if (SD_Type == SD_TYPE_V2HC)
 8002186:	4a25      	ldr	r2, [pc, #148]	@ (800221c <SD_WriteMultiBlocks+0x9c>)
{
 8002188:	4606      	mov	r6, r0
	if (SD_Type == SD_TYPE_V2HC)
 800218a:	7812      	ldrb	r2, [r2, #0]
  SD_CS_LOW();
 800218c:	2110      	movs	r1, #16
	if (SD_Type == SD_TYPE_V2HC)
 800218e:	2a04      	cmp	r2, #4
    WriteAddr /= 512;
 8002190:	bf08      	it	eq
 8002192:	0a6d      	lsreq	r5, r5, #9
  SD_CS_LOW();
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	4821      	ldr	r0, [pc, #132]	@ (8002220 <SD_WriteMultiBlocks+0xa0>)
{
 800219a:	f8bd 8018 	ldrh.w	r8, [sp, #24]
    WriteAddr /= 512;
 800219e:	bf04      	itt	eq
 80021a0:	ea45 55c3 	orreq.w	r5, r5, r3, lsl #23
    BlockSize = 512;
 80021a4:	f44f 7800 	moveq.w	r8, #512	@ 0x200
{
 80021a8:	9f07      	ldr	r7, [sp, #28]
  SD_Error rvalue = SD_RESPONSE_FAILURE;
 80021aa:	24ff      	movs	r4, #255	@ 0xff
  SD_CS_LOW();
 80021ac:	f006 fbba 	bl	8008924 <HAL_GPIO_WritePin>
    SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, WriteAddr + Offset, 0xFF);
 80021b0:	1bad      	subs	r5, r5, r6
  while (NumberOfBlocks--)
 80021b2:	b957      	cbnz	r7, 80021ca <SD_WriteMultiBlocks+0x4a>
  SD_CS_HIGH();
 80021b4:	481a      	ldr	r0, [pc, #104]	@ (8002220 <SD_WriteMultiBlocks+0xa0>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	2110      	movs	r1, #16
 80021ba:	f006 fbb3 	bl	8008924 <HAL_GPIO_WritePin>
  SD_WriteByte(SD_DUMMY_BYTE);
 80021be:	20ff      	movs	r0, #255	@ 0xff
 80021c0:	f7ff ff16 	bl	8001ff0 <SD_WriteByte>
}
 80021c4:	4620      	mov	r0, r4
 80021c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, WriteAddr + Offset, 0xFF);
 80021ca:	2018      	movs	r0, #24
 80021cc:	22ff      	movs	r2, #255	@ 0xff
 80021ce:	1971      	adds	r1, r6, r5
 80021d0:	f7ff ff22 	bl	8002018 <SD_SendCmd>
    if (SD_GetResponse(SD_RESPONSE_NO_ERROR))
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7ff ff53 	bl	8002080 <SD_GetResponse>
 80021da:	b9e0      	cbnz	r0, 8002216 <SD_WriteMultiBlocks+0x96>
    SD_WriteByte(SD_DUMMY_BYTE);
 80021dc:	20ff      	movs	r0, #255	@ 0xff
 80021de:	f7ff ff07 	bl	8001ff0 <SD_WriteByte>
    SD_WriteByte(SD_START_DATA_SINGLE_BLOCK_WRITE);
 80021e2:	20fe      	movs	r0, #254	@ 0xfe
 80021e4:	f7ff ff04 	bl	8001ff0 <SD_WriteByte>
    for (i = 0; i < BlockSize; i++)
 80021e8:	4634      	mov	r4, r6
 80021ea:	4446      	add	r6, r8
 80021ec:	42b4      	cmp	r4, r6
 80021ee:	d10d      	bne.n	800220c <SD_WriteMultiBlocks+0x8c>
    SD_ReadByte();
 80021f0:	f7ff ff2f 	bl	8002052 <SD_ReadByte>
    SD_ReadByte();
 80021f4:	f7ff ff2d 	bl	8002052 <SD_ReadByte>
    if (SD_GetDataResponse() == SD_DATA_OK)
 80021f8:	f7ff ff2e 	bl	8002058 <SD_GetDataResponse>
 80021fc:	4626      	mov	r6, r4
 80021fe:	1f44      	subs	r4, r0, #5
 8002200:	bf18      	it	ne
 8002202:	f04f 34ff 	movne.w	r4, #4294967295
 8002206:	3f01      	subs	r7, #1
 8002208:	b2e4      	uxtb	r4, r4
 800220a:	e7d2      	b.n	80021b2 <SD_WriteMultiBlocks+0x32>
      SD_WriteByte(*pBuffer);
 800220c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002210:	f7ff feee 	bl	8001ff0 <SD_WriteByte>
    for (i = 0; i < BlockSize; i++)
 8002214:	e7ea      	b.n	80021ec <SD_WriteMultiBlocks+0x6c>
      return SD_RESPONSE_FAILURE;
 8002216:	24ff      	movs	r4, #255	@ 0xff
 8002218:	e7d4      	b.n	80021c4 <SD_WriteMultiBlocks+0x44>
 800221a:	bf00      	nop
 800221c:	20000828 	.word	0x20000828
 8002220:	40010800 	.word	0x40010800

08002224 <SD_GetCSDRegister>:
{
 8002224:	b5f0      	push	{r4, r5, r6, r7, lr}
  SD_CS_LOW();
 8002226:	2200      	movs	r2, #0
{
 8002228:	b085      	sub	sp, #20
  SD_CS_LOW();
 800222a:	2110      	movs	r1, #16
{
 800222c:	4604      	mov	r4, r0
  SD_CS_LOW();
 800222e:	4879      	ldr	r0, [pc, #484]	@ (8002414 <SD_GetCSDRegister+0x1f0>)
 8002230:	f006 fb78 	bl	8008924 <HAL_GPIO_WritePin>
  SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF);
 8002234:	22ff      	movs	r2, #255	@ 0xff
 8002236:	2100      	movs	r1, #0
 8002238:	2009      	movs	r0, #9
 800223a:	f7ff feed 	bl	8002018 <SD_SendCmd>
  if (!SD_GetResponse(SD_RESPONSE_NO_ERROR))
 800223e:	2000      	movs	r0, #0
 8002240:	f7ff ff1e 	bl	8002080 <SD_GetResponse>
 8002244:	4605      	mov	r5, r0
 8002246:	2800      	cmp	r0, #0
 8002248:	f040 80cd 	bne.w	80023e6 <SD_GetCSDRegister+0x1c2>
    if (!SD_GetResponse(SD_START_DATA_SINGLE_BLOCK_READ))
 800224c:	20fe      	movs	r0, #254	@ 0xfe
 800224e:	f7ff ff17 	bl	8002080 <SD_GetResponse>
 8002252:	2800      	cmp	r0, #0
 8002254:	f000 80bd 	beq.w	80023d2 <SD_GetCSDRegister+0x1ae>
    SD_WriteByte(SD_DUMMY_BYTE);
 8002258:	20ff      	movs	r0, #255	@ 0xff
 800225a:	f7ff fec9 	bl	8001ff0 <SD_WriteByte>
    SD_WriteByte(SD_DUMMY_BYTE);
 800225e:	20ff      	movs	r0, #255	@ 0xff
 8002260:	f7ff fec6 	bl	8001ff0 <SD_WriteByte>
  SD_CS_HIGH();
 8002264:	2201      	movs	r2, #1
 8002266:	2110      	movs	r1, #16
 8002268:	486a      	ldr	r0, [pc, #424]	@ (8002414 <SD_GetCSDRegister+0x1f0>)
 800226a:	f006 fb5b 	bl	8008924 <HAL_GPIO_WritePin>
  SD_WriteByte(SD_DUMMY_BYTE);
 800226e:	20ff      	movs	r0, #255	@ 0xff
 8002270:	f7ff febe 	bl	8001ff0 <SD_WriteByte>
  SD_csd->CSDStruct = (CSD_Tab[0] & 0xC0) >> 6;
 8002274:	f89d 3000 	ldrb.w	r3, [sp]
 8002278:	099a      	lsrs	r2, r3, #6
 800227a:	7022      	strb	r2, [r4, #0]
  SD_csd->SysSpecVersion = (CSD_Tab[0] & 0x3C) >> 2;
 800227c:	f3c3 0283 	ubfx	r2, r3, #2, #4
  SD_csd->Reserved1 = CSD_Tab[0] & 0x03;
 8002280:	f003 0303 	and.w	r3, r3, #3
  SD_csd->SysSpecVersion = (CSD_Tab[0] & 0x3C) >> 2;
 8002284:	7062      	strb	r2, [r4, #1]
  SD_csd->Reserved1 = CSD_Tab[0] & 0x03;
 8002286:	70a3      	strb	r3, [r4, #2]
  SD_csd->TAAC = CSD_Tab[1];
 8002288:	f89d 3001 	ldrb.w	r3, [sp, #1]
  SD_csd->CardComdClasses |= (CSD_Tab[5] & 0xF0) >> 4;
 800228c:	f89d 2005 	ldrb.w	r2, [sp, #5]
  SD_csd->TAAC = CSD_Tab[1];
 8002290:	70e3      	strb	r3, [r4, #3]
  SD_csd->NSAC = CSD_Tab[2];
 8002292:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002296:	7123      	strb	r3, [r4, #4]
  SD_csd->MaxBusClkFrec = CSD_Tab[3];
 8002298:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800229c:	7163      	strb	r3, [r4, #5]
  SD_csd->CardComdClasses = CSD_Tab[4] << 4;
 800229e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	80e3      	strh	r3, [r4, #6]
  SD_csd->CardComdClasses |= (CSD_Tab[5] & 0xF0) >> 4;
 80022a6:	88e3      	ldrh	r3, [r4, #6]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 80022ae:	80e3      	strh	r3, [r4, #6]
  SD_csd->PartBlockRead = (CSD_Tab[6] & 0x80) >> 7;
 80022b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
  SD_csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 80022b4:	f002 020f 	and.w	r2, r2, #15
 80022b8:	7222      	strb	r2, [r4, #8]
  SD_csd->PartBlockRead = (CSD_Tab[6] & 0x80) >> 7;
 80022ba:	09da      	lsrs	r2, r3, #7
 80022bc:	7262      	strb	r2, [r4, #9]
  SD_csd->WrBlockMisalign = (CSD_Tab[6] & 0x40) >> 6;
 80022be:	f3c3 1280 	ubfx	r2, r3, #6, #1
 80022c2:	72a2      	strb	r2, [r4, #10]
  SD_csd->RdBlockMisalign = (CSD_Tab[6] & 0x20) >> 5;
 80022c4:	f3c3 1240 	ubfx	r2, r3, #5, #1
 80022c8:	72e2      	strb	r2, [r4, #11]
  SD_csd->DSRImpl = (CSD_Tab[6] & 0x10) >> 4;
 80022ca:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80022ce:	7322      	strb	r2, [r4, #12]
  SD_csd->Reserved2 = 0; /*!< Reserved */
 80022d0:	2200      	movs	r2, #0
  SD_csd->DeviceSize = (CSD_Tab[6] & 0x03) << 10;
 80022d2:	029b      	lsls	r3, r3, #10
 80022d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
  SD_csd->Reserved2 = 0; /*!< Reserved */
 80022d8:	7362      	strb	r2, [r4, #13]
  SD_csd->DeviceSize = (CSD_Tab[6] & 0x03) << 10;
 80022da:	6123      	str	r3, [r4, #16]
  if ((SD_Type == SD_TYPE_V1) || (SD_Type == SD_TYPE_V2))
 80022dc:	4b4e      	ldr	r3, [pc, #312]	@ (8002418 <SD_GetCSDRegister+0x1f4>)
 80022de:	781a      	ldrb	r2, [r3, #0]
		SD_csd->DeviceSizeMul |= (CSD_Tab[10] & 0x80) >> 7;
 80022e0:	f89d 300a 	ldrb.w	r3, [sp, #10]
  if ((SD_Type == SD_TYPE_V1) || (SD_Type == SD_TYPE_V2))
 80022e4:	1e51      	subs	r1, r2, #1
 80022e6:	2901      	cmp	r1, #1
 80022e8:	d87f      	bhi.n	80023ea <SD_GetCSDRegister+0x1c6>
		SD_csd->DeviceSize |= (CSD_Tab[7]) << 2;
 80022ea:	6922      	ldr	r2, [r4, #16]
 80022ec:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80022f0:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 80022f4:	6122      	str	r2, [r4, #16]
		SD_csd->DeviceSize |= (CSD_Tab[8] & 0xC0) >> 6;
 80022f6:	6921      	ldr	r1, [r4, #16]
 80022f8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80022fc:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8002300:	6121      	str	r1, [r4, #16]
		SD_csd->MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 8002302:	f3c2 01c2 	ubfx	r1, r2, #3, #3
		SD_csd->MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07);
 8002306:	f002 0207 	and.w	r2, r2, #7
		SD_csd->MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 800230a:	7521      	strb	r1, [r4, #20]
		SD_csd->MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07);
 800230c:	7562      	strb	r2, [r4, #21]
		SD_csd->MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 800230e:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8002312:	0951      	lsrs	r1, r2, #5
 8002314:	75a1      	strb	r1, [r4, #22]
		SD_csd->MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 8002316:	f3c2 0182 	ubfx	r1, r2, #2, #3
		SD_csd->DeviceSizeMul = (CSD_Tab[9] & 0x03) << 1;
 800231a:	0052      	lsls	r2, r2, #1
 800231c:	f002 0206 	and.w	r2, r2, #6
		SD_csd->MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 8002320:	75e1      	strb	r1, [r4, #23]
		SD_csd->DeviceSizeMul = (CSD_Tab[9] & 0x03) << 1;
 8002322:	7622      	strb	r2, [r4, #24]
		SD_csd->DeviceSizeMul |= (CSD_Tab[10] & 0x80) >> 7;
 8002324:	7e22      	ldrb	r2, [r4, #24]
 8002326:	ea42 12d3 	orr.w	r2, r2, r3, lsr #7
 800232a:	7622      	strb	r2, [r4, #24]
  SD_csd->EraseGrSize = (CSD_Tab[10] & 0x40) >> 6;
 800232c:	f3c3 1280 	ubfx	r2, r3, #6, #1
  SD_csd->EraseGrMul = (CSD_Tab[10] & 0x3F) << 1;
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
  SD_csd->EraseGrSize = (CSD_Tab[10] & 0x40) >> 6;
 8002336:	7662      	strb	r2, [r4, #25]
  SD_csd->EraseGrMul = (CSD_Tab[10] & 0x3F) << 1;
 8002338:	76a3      	strb	r3, [r4, #26]
  SD_csd->EraseGrMul |= (CSD_Tab[11] & 0x80) >> 7;
 800233a:	7ea2      	ldrb	r2, [r4, #26]
 800233c:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
 8002340:	4628      	mov	r0, r5
  SD_csd->EraseGrMul |= (CSD_Tab[11] & 0x80) >> 7;
 8002342:	ea42 12d3 	orr.w	r2, r2, r3, lsr #7
  SD_csd->WrProtectGrSize = (CSD_Tab[11] & 0x7F);
 8002346:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
  SD_csd->EraseGrMul |= (CSD_Tab[11] & 0x80) >> 7;
 800234a:	76a2      	strb	r2, [r4, #26]
  SD_csd->WrProtectGrSize = (CSD_Tab[11] & 0x7F);
 800234c:	76e3      	strb	r3, [r4, #27]
  SD_csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 800234e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002352:	09da      	lsrs	r2, r3, #7
 8002354:	7722      	strb	r2, [r4, #28]
  SD_csd->ManDeflECC = (CSD_Tab[12] & 0x60) >> 5;
 8002356:	f3c3 1241 	ubfx	r2, r3, #5, #2
 800235a:	7762      	strb	r2, [r4, #29]
  SD_csd->WrSpeedFact = (CSD_Tab[12] & 0x1C) >> 2;
 800235c:	f3c3 0282 	ubfx	r2, r3, #2, #3
  SD_csd->MaxWrBlockLen = (CSD_Tab[12] & 0x03) << 2;
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	f003 030c 	and.w	r3, r3, #12
  SD_csd->WrSpeedFact = (CSD_Tab[12] & 0x1C) >> 2;
 8002366:	77a2      	strb	r2, [r4, #30]
  SD_csd->MaxWrBlockLen = (CSD_Tab[12] & 0x03) << 2;
 8002368:	77e3      	strb	r3, [r4, #31]
  SD_csd->MaxWrBlockLen |= (CSD_Tab[13] & 0xC0) >> 6;
 800236a:	7fe2      	ldrb	r2, [r4, #31]
 800236c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8002370:	ea42 1293 	orr.w	r2, r2, r3, lsr #6
 8002374:	77e2      	strb	r2, [r4, #31]
  SD_csd->WriteBlockPaPartial = (CSD_Tab[13] & 0x20) >> 5;
 8002376:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800237a:	f884 2020 	strb.w	r2, [r4, #32]
  SD_csd->Reserved3 = 0;
 800237e:	2200      	movs	r2, #0
  SD_csd->ContentProtectAppli = (CSD_Tab[13] & 0x01);
 8002380:	f003 0301 	and.w	r3, r3, #1
  SD_csd->Reserved3 = 0;
 8002384:	f884 2021 	strb.w	r2, [r4, #33]	@ 0x21
  SD_csd->ContentProtectAppli = (CSD_Tab[13] & 0x01);
 8002388:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  SD_csd->FileFormatGrouop = (CSD_Tab[14] & 0x80) >> 7;
 800238c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002390:	09da      	lsrs	r2, r3, #7
 8002392:	f884 2023 	strb.w	r2, [r4, #35]	@ 0x23
  SD_csd->CopyFlag = (CSD_Tab[14] & 0x40) >> 6;
 8002396:	f3c3 1280 	ubfx	r2, r3, #6, #1
 800239a:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
  SD_csd->PermWrProtect = (CSD_Tab[14] & 0x20) >> 5;
 800239e:	f3c3 1240 	ubfx	r2, r3, #5, #1
 80023a2:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
  SD_csd->TempWrProtect = (CSD_Tab[14] & 0x10) >> 4;
 80023a6:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80023aa:	f884 2026 	strb.w	r2, [r4, #38]	@ 0x26
  SD_csd->FileFormat = (CSD_Tab[14] & 0x0C) >> 2;
 80023ae:	f3c3 0281 	ubfx	r2, r3, #2, #2
  SD_csd->ECC = (CSD_Tab[14] & 0x03);
 80023b2:	f003 0303 	and.w	r3, r3, #3
  SD_csd->FileFormat = (CSD_Tab[14] & 0x0C) >> 2;
 80023b6:	f884 2027 	strb.w	r2, [r4, #39]	@ 0x27
  SD_csd->ECC = (CSD_Tab[14] & 0x03);
 80023ba:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
  SD_csd->CSD_CRC = (CSD_Tab[15] & 0xFE) >> 1;
 80023be:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80023c2:	085b      	lsrs	r3, r3, #1
 80023c4:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
  SD_csd->Reserved4 = 1;
 80023c8:	2301      	movs	r3, #1
 80023ca:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
}
 80023ce:	b005      	add	sp, #20
 80023d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d2:	466f      	mov	r7, sp
      for (i = 0; i < 16; i++)
 80023d4:	462e      	mov	r6, r5
        CSD_Tab[i] = SD_ReadByte();
 80023d6:	f7ff fe3c 	bl	8002052 <SD_ReadByte>
      for (i = 0; i < 16; i++)
 80023da:	3601      	adds	r6, #1
 80023dc:	2e10      	cmp	r6, #16
        CSD_Tab[i] = SD_ReadByte();
 80023de:	f807 0b01 	strb.w	r0, [r7], #1
      for (i = 0; i < 16; i++)
 80023e2:	d1f8      	bne.n	80023d6 <SD_GetCSDRegister+0x1b2>
 80023e4:	e738      	b.n	8002258 <SD_GetCSDRegister+0x34>
  SD_Error rvalue = SD_RESPONSE_FAILURE;
 80023e6:	25ff      	movs	r5, #255	@ 0xff
 80023e8:	e73c      	b.n	8002264 <SD_GetCSDRegister+0x40>
	else if (SD_Type == SD_TYPE_V2HC)
 80023ea:	2a04      	cmp	r2, #4
 80023ec:	d19e      	bne.n	800232c <SD_GetCSDRegister+0x108>
		SD_csd->DeviceSize = (CSD_Tab[7] & 0x3F) << 16;
 80023ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
		SD_csd->DeviceSize |= (CSD_Tab[8] << 8);
 80023f2:	f89d 1008 	ldrb.w	r1, [sp, #8]
		SD_csd->DeviceSize = (CSD_Tab[7] & 0x3F) << 16;
 80023f6:	0412      	lsls	r2, r2, #16
 80023f8:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 80023fc:	6122      	str	r2, [r4, #16]
		SD_csd->DeviceSize |= (CSD_Tab[8] << 8);
 80023fe:	6922      	ldr	r2, [r4, #16]
 8002400:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002404:	6122      	str	r2, [r4, #16]
		SD_csd->DeviceSize |= (CSD_Tab[9]);
 8002406:	6921      	ldr	r1, [r4, #16]
 8002408:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800240c:	430a      	orrs	r2, r1
 800240e:	6122      	str	r2, [r4, #16]
 8002410:	e78c      	b.n	800232c <SD_GetCSDRegister+0x108>
 8002412:	bf00      	nop
 8002414:	40010800 	.word	0x40010800
 8002418:	20000828 	.word	0x20000828

0800241c <SD_GetCIDRegister>:
{
 800241c:	b5f0      	push	{r4, r5, r6, r7, lr}
  SD_CS_LOW();
 800241e:	2200      	movs	r2, #0
{
 8002420:	b085      	sub	sp, #20
  SD_CS_LOW();
 8002422:	2110      	movs	r1, #16
{
 8002424:	4604      	mov	r4, r0
  SD_CS_LOW();
 8002426:	4840      	ldr	r0, [pc, #256]	@ (8002528 <SD_GetCIDRegister+0x10c>)
 8002428:	f006 fa7c 	bl	8008924 <HAL_GPIO_WritePin>
  SD_SendCmd(SD_CMD_SEND_CID, 0, 0xFF);
 800242c:	22ff      	movs	r2, #255	@ 0xff
 800242e:	2100      	movs	r1, #0
 8002430:	200a      	movs	r0, #10
 8002432:	f7ff fdf1 	bl	8002018 <SD_SendCmd>
  if (!SD_GetResponse(SD_RESPONSE_NO_ERROR))
 8002436:	2000      	movs	r0, #0
 8002438:	f7ff fe22 	bl	8002080 <SD_GetResponse>
 800243c:	4605      	mov	r5, r0
 800243e:	2800      	cmp	r0, #0
 8002440:	d170      	bne.n	8002524 <SD_GetCIDRegister+0x108>
    if (!SD_GetResponse(SD_START_DATA_SINGLE_BLOCK_READ))
 8002442:	20fe      	movs	r0, #254	@ 0xfe
 8002444:	f7ff fe1c 	bl	8002080 <SD_GetResponse>
 8002448:	b940      	cbnz	r0, 800245c <SD_GetCIDRegister+0x40>
 800244a:	466f      	mov	r7, sp
      for (i = 0; i < 16; i++)
 800244c:	462e      	mov	r6, r5
        CID_Tab[i] = SD_ReadByte();
 800244e:	f7ff fe00 	bl	8002052 <SD_ReadByte>
      for (i = 0; i < 16; i++)
 8002452:	3601      	adds	r6, #1
 8002454:	2e10      	cmp	r6, #16
        CID_Tab[i] = SD_ReadByte();
 8002456:	f807 0b01 	strb.w	r0, [r7], #1
      for (i = 0; i < 16; i++)
 800245a:	d1f8      	bne.n	800244e <SD_GetCIDRegister+0x32>
    SD_WriteByte(SD_DUMMY_BYTE);
 800245c:	20ff      	movs	r0, #255	@ 0xff
 800245e:	f7ff fdc7 	bl	8001ff0 <SD_WriteByte>
    SD_WriteByte(SD_DUMMY_BYTE);
 8002462:	20ff      	movs	r0, #255	@ 0xff
 8002464:	f7ff fdc4 	bl	8001ff0 <SD_WriteByte>
  SD_CS_HIGH();
 8002468:	2201      	movs	r2, #1
 800246a:	2110      	movs	r1, #16
 800246c:	482e      	ldr	r0, [pc, #184]	@ (8002528 <SD_GetCIDRegister+0x10c>)
 800246e:	f006 fa59 	bl	8008924 <HAL_GPIO_WritePin>
  SD_WriteByte(SD_DUMMY_BYTE);
 8002472:	20ff      	movs	r0, #255	@ 0xff
 8002474:	f7ff fdbc 	bl	8001ff0 <SD_WriteByte>
  SD_cid->ManufacturerID = CID_Tab[0];
 8002478:	f89d 3000 	ldrb.w	r3, [sp]
  SD_cid->OEM_AppliID |= CID_Tab[2];
 800247c:	f89d 2002 	ldrb.w	r2, [sp, #2]
  SD_cid->ManufacturerID = CID_Tab[0];
 8002480:	7023      	strb	r3, [r4, #0]
  SD_cid->OEM_AppliID = CID_Tab[1] << 8;
 8002482:	f89d 3001 	ldrb.w	r3, [sp, #1]
}
 8002486:	4628      	mov	r0, r5
  SD_cid->OEM_AppliID = CID_Tab[1] << 8;
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	8063      	strh	r3, [r4, #2]
  SD_cid->OEM_AppliID |= CID_Tab[2];
 800248c:	8863      	ldrh	r3, [r4, #2]
 800248e:	b29b      	uxth	r3, r3
 8002490:	4313      	orrs	r3, r2
 8002492:	8063      	strh	r3, [r4, #2]
  SD_cid->ProdName1 = CID_Tab[3] << 24;
 8002494:	f89d 3003 	ldrb.w	r3, [sp, #3]
  SD_cid->ProdName1 |= CID_Tab[4] << 16;
 8002498:	f89d 2004 	ldrb.w	r2, [sp, #4]
  SD_cid->ProdName1 = CID_Tab[3] << 24;
 800249c:	061b      	lsls	r3, r3, #24
 800249e:	6063      	str	r3, [r4, #4]
  SD_cid->ProdName1 |= CID_Tab[4] << 16;
 80024a0:	6863      	ldr	r3, [r4, #4]
 80024a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80024a6:	6063      	str	r3, [r4, #4]
  SD_cid->ProdName1 |= CID_Tab[5] << 8;
 80024a8:	6863      	ldr	r3, [r4, #4]
 80024aa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80024ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80024b2:	6063      	str	r3, [r4, #4]
  SD_cid->ProdName1 |= CID_Tab[6];
 80024b4:	6862      	ldr	r2, [r4, #4]
 80024b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	6063      	str	r3, [r4, #4]
  SD_cid->ProdName2 = CID_Tab[7];
 80024be:	f89d 3007 	ldrb.w	r3, [sp, #7]
  SD_cid->ProdSN |= CID_Tab[10] << 16;
 80024c2:	f89d 200a 	ldrb.w	r2, [sp, #10]
  SD_cid->ProdName2 = CID_Tab[7];
 80024c6:	7223      	strb	r3, [r4, #8]
  SD_cid->ProdRev = CID_Tab[8];
 80024c8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80024cc:	7263      	strb	r3, [r4, #9]
  SD_cid->ProdSN = CID_Tab[9] << 24;
 80024ce:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80024d2:	061b      	lsls	r3, r3, #24
 80024d4:	60e3      	str	r3, [r4, #12]
  SD_cid->ProdSN |= CID_Tab[10] << 16;
 80024d6:	68e3      	ldr	r3, [r4, #12]
 80024d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80024dc:	60e3      	str	r3, [r4, #12]
  SD_cid->ProdSN |= CID_Tab[11] << 8;
 80024de:	68e3      	ldr	r3, [r4, #12]
 80024e0:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80024e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80024e8:	60e3      	str	r3, [r4, #12]
  SD_cid->ProdSN |= CID_Tab[12];
 80024ea:	68e2      	ldr	r2, [r4, #12]
 80024ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60e3      	str	r3, [r4, #12]
  SD_cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 80024f4:	7c22      	ldrb	r2, [r4, #16]
 80024f6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80024fa:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
  SD_cid->ManufactDate = (CID_Tab[13] & 0x0F) << 8;
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
  SD_cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 8002504:	7422      	strb	r2, [r4, #16]
  SD_cid->ManufactDate = (CID_Tab[13] & 0x0F) << 8;
 8002506:	8263      	strh	r3, [r4, #18]
  SD_cid->ManufactDate |= CID_Tab[14];
 8002508:	8a63      	ldrh	r3, [r4, #18]
 800250a:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800250e:	b29b      	uxth	r3, r3
 8002510:	4313      	orrs	r3, r2
 8002512:	8263      	strh	r3, [r4, #18]
  SD_cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 8002514:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002518:	085b      	lsrs	r3, r3, #1
 800251a:	7523      	strb	r3, [r4, #20]
  SD_cid->Reserved2 = 1;
 800251c:	2301      	movs	r3, #1
 800251e:	7563      	strb	r3, [r4, #21]
}
 8002520:	b005      	add	sp, #20
 8002522:	bdf0      	pop	{r4, r5, r6, r7, pc}
  SD_Error rvalue = SD_RESPONSE_FAILURE;
 8002524:	25ff      	movs	r5, #255	@ 0xff
 8002526:	e79f      	b.n	8002468 <SD_GetCIDRegister+0x4c>
 8002528:	40010800 	.word	0x40010800

0800252c <SD_GetCardInfo>:
{
 800252c:	b570      	push	{r4, r5, r6, lr}
 800252e:	4604      	mov	r4, r0
  status = SD_GetCSDRegister(&(cardinfo->SD_csd));
 8002530:	f7ff fe78 	bl	8002224 <SD_GetCSDRegister>
  status = SD_GetCIDRegister(&(cardinfo->SD_cid));
 8002534:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8002538:	f7ff ff70 	bl	800241c <SD_GetCIDRegister>
	if ((SD_Type == SD_TYPE_V1) || (SD_Type == SD_TYPE_V2))
 800253c:	4b13      	ldr	r3, [pc, #76]	@ (800258c <SD_GetCardInfo+0x60>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	1e5a      	subs	r2, r3, #1
 8002542:	2a01      	cmp	r2, #1
 8002544:	d816      	bhi.n	8002574 <SD_GetCardInfo+0x48>
  cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 8002546:	2301      	movs	r3, #1
  cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
 8002548:	6925      	ldr	r5, [r4, #16]
  cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 800254a:	7e22      	ldrb	r2, [r4, #24]
  cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 800254c:	7a21      	ldrb	r1, [r4, #8]
  cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 800254e:	3202      	adds	r2, #2
  cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 8002550:	fa03 f101 	lsl.w	r1, r3, r1
  cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 8002554:	4093      	lsls	r3, r2
 8002556:	17de      	asrs	r6, r3, #31
  cardinfo->CardCapacity *= cardinfo->CardBlockSize;
 8002558:	fba3 3201 	umull	r3, r2, r3, r1
 800255c:	fb01 2206 	mla	r2, r1, r6, r2
  cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 8002560:	6521      	str	r1, [r4, #80]	@ 0x50
  cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
 8002562:	1c69      	adds	r1, r5, #1
  cardinfo->CardCapacity *= cardinfo->CardBlockSize;
 8002564:	fba3 3101 	umull	r3, r1, r3, r1
 8002568:	fb05 2202 	mla	r2, r5, r2, r2
 800256c:	440a      	add	r2, r1
 800256e:	e9c4 3212 	strd	r3, r2, [r4, #72]	@ 0x48
}
 8002572:	bd70      	pop	{r4, r5, r6, pc}
	else if (SD_Type == SD_TYPE_V2HC)
 8002574:	2b04      	cmp	r3, #4
 8002576:	d1fc      	bne.n	8002572 <SD_GetCardInfo+0x46>
	  cardinfo->CardCapacity = (uint64_t)(cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
 8002578:	6923      	ldr	r3, [r4, #16]
 800257a:	3301      	adds	r3, #1
 800257c:	0b5a      	lsrs	r2, r3, #13
 800257e:	04db      	lsls	r3, r3, #19
 8002580:	e9c4 3212 	strd	r3, r2, [r4, #72]	@ 0x48
    cardinfo->CardBlockSize = 512;
 8002584:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002588:	6523      	str	r3, [r4, #80]	@ 0x50
 800258a:	e7f2      	b.n	8002572 <SD_GetCardInfo+0x46>
 800258c:	20000828 	.word	0x20000828

08002590 <SD_GetCardType>:
{
 8002590:	b573      	push	{r0, r1, r4, r5, r6, lr}
	SD_CS_HIGH();
 8002592:	2201      	movs	r2, #1
 8002594:	2110      	movs	r1, #16
 8002596:	4854      	ldr	r0, [pc, #336]	@ (80026e8 <SD_GetCardType+0x158>)
 8002598:	f006 f9c4 	bl	8008924 <HAL_GPIO_WritePin>
	SD_WriteByte(SD_DUMMY_BYTE);
 800259c:	20ff      	movs	r0, #255	@ 0xff
 800259e:	f7ff fd27 	bl	8001ff0 <SD_WriteByte>
	SD_CS_LOW();
 80025a2:	2200      	movs	r2, #0
 80025a4:	2110      	movs	r1, #16
 80025a6:	4850      	ldr	r0, [pc, #320]	@ (80026e8 <SD_GetCardType+0x158>)
 80025a8:	f006 f9bc 	bl	8008924 <HAL_GPIO_WritePin>
  SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AA, 0x87);
 80025ac:	2287      	movs	r2, #135	@ 0x87
 80025ae:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80025b2:	2008      	movs	r0, #8
 80025b4:	f7ff fd30 	bl	8002018 <SD_SendCmd>
	uint32_t Count = 0xFFF;
 80025b8:	f640 74ff 	movw	r4, #4095	@ 0xfff
  while (( (R1_Resp = SD_ReadByte()) == 0xFF) && Count)
 80025bc:	f7ff fd49 	bl	8002052 <SD_ReadByte>
 80025c0:	28ff      	cmp	r0, #255	@ 0xff
 80025c2:	d105      	bne.n	80025d0 <SD_GetCardType+0x40>
 80025c4:	b914      	cbnz	r4, 80025cc <SD_GetCardType+0x3c>
    return SD_RESPONSE_FAILURE;
 80025c6:	20ff      	movs	r0, #255	@ 0xff
}
 80025c8:	b002      	add	sp, #8
 80025ca:	bd70      	pop	{r4, r5, r6, pc}
    Count--;
 80025cc:	3c01      	subs	r4, #1
 80025ce:	e7f5      	b.n	80025bc <SD_GetCardType+0x2c>
  if (Count == 0)
 80025d0:	2c00      	cmp	r4, #0
 80025d2:	d0f8      	beq.n	80025c6 <SD_GetCardType+0x36>
	if(R1_Resp == (SD_IN_IDLE_STATE|SD_ILLEGAL_COMMAND))
 80025d4:	2805      	cmp	r0, #5
 80025d6:	d11b      	bne.n	8002610 <SD_GetCardType+0x80>
			SD_CS_HIGH();
 80025d8:	4c43      	ldr	r4, [pc, #268]	@ (80026e8 <SD_GetCardType+0x158>)
 80025da:	2201      	movs	r2, #1
 80025dc:	2110      	movs	r1, #16
 80025de:	4620      	mov	r0, r4
 80025e0:	f006 f9a0 	bl	8008924 <HAL_GPIO_WritePin>
			SD_WriteByte(SD_DUMMY_BYTE);
 80025e4:	20ff      	movs	r0, #255	@ 0xff
 80025e6:	f7ff fd03 	bl	8001ff0 <SD_WriteByte>
			SD_CS_LOW();
 80025ea:	2200      	movs	r2, #0
 80025ec:	2110      	movs	r1, #16
 80025ee:	4620      	mov	r0, r4
 80025f0:	f006 f998 	bl	8008924 <HAL_GPIO_WritePin>
			SD_SendCmd(SD_CMD_SEND_OP_COND, 0, 0xFF);
 80025f4:	2001      	movs	r0, #1
 80025f6:	22ff      	movs	r2, #255	@ 0xff
 80025f8:	2100      	movs	r1, #0
 80025fa:	f7ff fd0d 	bl	8002018 <SD_SendCmd>
		while (SD_GetResponse(SD_RESPONSE_NO_ERROR));
 80025fe:	2000      	movs	r0, #0
 8002600:	f7ff fd3e 	bl	8002080 <SD_GetResponse>
 8002604:	2800      	cmp	r0, #0
 8002606:	d1e8      	bne.n	80025da <SD_GetCardType+0x4a>
		SD_Type = SD_TYPE_V1;
 8002608:	2201      	movs	r2, #1
 800260a:	4b38      	ldr	r3, [pc, #224]	@ (80026ec <SD_GetCardType+0x15c>)
                SD_Type = SD_TYPE_V2;
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	e05f      	b.n	80026d0 <SD_GetCardType+0x140>
  else if (R1_Resp == SD_IN_IDLE_STATE)
 8002610:	2801      	cmp	r0, #1
 8002612:	d15d      	bne.n	80026d0 <SD_GetCardType+0x140>
 8002614:	ad01      	add	r5, sp, #4
 8002616:	462e      	mov	r6, r5
      for (i = 0; i < 4; i++)
 8002618:	2400      	movs	r4, #0
        R7R3_Resp[i] = SD_ReadByte();
 800261a:	f7ff fd1a 	bl	8002052 <SD_ReadByte>
      for (i = 0; i < 4; i++)
 800261e:	3401      	adds	r4, #1
 8002620:	2c04      	cmp	r4, #4
        R7R3_Resp[i] = SD_ReadByte();
 8002622:	f806 0b01 	strb.w	r0, [r6], #1
      for (i = 0; i < 4; i++)
 8002626:	d1f8      	bne.n	800261a <SD_GetCardType+0x8a>
			SD_CS_HIGH();
 8002628:	2201      	movs	r2, #1
 800262a:	2110      	movs	r1, #16
 800262c:	482e      	ldr	r0, [pc, #184]	@ (80026e8 <SD_GetCardType+0x158>)
 800262e:	f006 f979 	bl	8008924 <HAL_GPIO_WritePin>
			SD_WriteByte(SD_DUMMY_BYTE);
 8002632:	20ff      	movs	r0, #255	@ 0xff
 8002634:	f7ff fcdc 	bl	8001ff0 <SD_WriteByte>
			SD_CS_LOW();
 8002638:	2200      	movs	r2, #0
 800263a:	2110      	movs	r1, #16
 800263c:	482a      	ldr	r0, [pc, #168]	@ (80026e8 <SD_GetCardType+0x158>)
 800263e:	f006 f971 	bl	8008924 <HAL_GPIO_WritePin>
			if(R7R3_Resp[2]==0x01 && R7R3_Resp[3]==0xAA)
 8002642:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d142      	bne.n	80026d0 <SD_GetCardType+0x140>
 800264a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800264e:	2baa      	cmp	r3, #170	@ 0xaa
 8002650:	d13e      	bne.n	80026d0 <SD_GetCardType+0x140>
 8002652:	24c9      	movs	r4, #201	@ 0xc9
    			SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF);
 8002654:	2037      	movs	r0, #55	@ 0x37
 8002656:	22ff      	movs	r2, #255	@ 0xff
 8002658:	2100      	movs	r1, #0
 800265a:	f7ff fcdd 	bl	8002018 <SD_SendCmd>
					if (!SD_GetResponse(SD_RESPONSE_NO_ERROR)) // SD_IN_IDLE_STATE
 800265e:	2000      	movs	r0, #0
 8002660:	f7ff fd0e 	bl	8002080 <SD_GetResponse>
 8002664:	2800      	cmp	r0, #0
 8002666:	d0ae      	beq.n	80025c6 <SD_GetCardType+0x36>
    			SD_SendCmd(SD_ACMD_SD_SEND_OP_COND, 0x40000000, 0xFF);
 8002668:	22ff      	movs	r2, #255	@ 0xff
 800266a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800266e:	2029      	movs	r0, #41	@ 0x29
 8002670:	f7ff fcd2 	bl	8002018 <SD_SendCmd>
					if(Count-- == 0)
 8002674:	3c01      	subs	r4, #1
 8002676:	d0a6      	beq.n	80025c6 <SD_GetCardType+0x36>
         }while(SD_GetResponse(SD_RESPONSE_NO_ERROR));
 8002678:	2000      	movs	r0, #0
 800267a:	f7ff fd01 	bl	8002080 <SD_GetResponse>
 800267e:	2800      	cmp	r0, #0
 8002680:	d1e8      	bne.n	8002654 <SD_GetCardType+0xc4>
						SD_CS_HIGH();
 8002682:	4e19      	ldr	r6, [pc, #100]	@ (80026e8 <SD_GetCardType+0x158>)
 8002684:	2201      	movs	r2, #1
 8002686:	2110      	movs	r1, #16
 8002688:	4630      	mov	r0, r6
 800268a:	f006 f94b 	bl	8008924 <HAL_GPIO_WritePin>
						SD_WriteByte(SD_DUMMY_BYTE);
 800268e:	20ff      	movs	r0, #255	@ 0xff
 8002690:	f7ff fcae 	bl	8001ff0 <SD_WriteByte>
						SD_CS_LOW();
 8002694:	2200      	movs	r2, #0
 8002696:	2110      	movs	r1, #16
 8002698:	4630      	mov	r0, r6
 800269a:	f006 f943 	bl	8008924 <HAL_GPIO_WritePin>
						SD_SendCmd(SD_CMD_READ_OCR, 0, 0xFF);
 800269e:	22ff      	movs	r2, #255	@ 0xff
 80026a0:	2100      	movs	r1, #0
 80026a2:	203a      	movs	r0, #58	@ 0x3a
 80026a4:	f7ff fcb8 	bl	8002018 <SD_SendCmd>
					while ( SD_GetResponse(SD_RESPONSE_NO_ERROR) || Count-- == 0);
 80026a8:	2000      	movs	r0, #0
 80026aa:	f7ff fce9 	bl	8002080 <SD_GetResponse>
 80026ae:	4604      	mov	r4, r0
 80026b0:	2800      	cmp	r0, #0
 80026b2:	d1e7      	bne.n	8002684 <SD_GetCardType+0xf4>
							R7R3_Resp[i] = SD_ReadByte();
 80026b4:	f7ff fccd 	bl	8002052 <SD_ReadByte>
						for (i = 0; i < 4; i++)
 80026b8:	3401      	adds	r4, #1
 80026ba:	2c04      	cmp	r4, #4
							R7R3_Resp[i] = SD_ReadByte();
 80026bc:	f805 0b01 	strb.w	r0, [r5], #1
						for (i = 0; i < 4; i++)
 80026c0:	d1f8      	bne.n	80026b4 <SD_GetCardType+0x124>
            if(R7R3_Resp[0]&0x40)    //检查CCS标志
 80026c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80026c6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80026ca:	4b08      	ldr	r3, [pc, #32]	@ (80026ec <SD_GetCardType+0x15c>)
 80026cc:	d00a      	beq.n	80026e4 <SD_GetCardType+0x154>
                SD_Type = SD_TYPE_V2HC;
 80026ce:	701c      	strb	r4, [r3, #0]
  SD_CS_HIGH();
 80026d0:	2201      	movs	r2, #1
 80026d2:	2110      	movs	r1, #16
 80026d4:	4804      	ldr	r0, [pc, #16]	@ (80026e8 <SD_GetCardType+0x158>)
 80026d6:	f006 f925 	bl	8008924 <HAL_GPIO_WritePin>
  SD_WriteByte(SD_DUMMY_BYTE);
 80026da:	20ff      	movs	r0, #255	@ 0xff
 80026dc:	f7ff fc88 	bl	8001ff0 <SD_WriteByte>
	return SD_RESPONSE_NO_ERROR;
 80026e0:	2000      	movs	r0, #0
 80026e2:	e771      	b.n	80025c8 <SD_GetCardType+0x38>
                SD_Type = SD_TYPE_V2;
 80026e4:	2202      	movs	r2, #2
 80026e6:	e791      	b.n	800260c <SD_GetCardType+0x7c>
 80026e8:	40010800 	.word	0x40010800
 80026ec:	20000828 	.word	0x20000828

080026f0 <SD_Init>:
{
 80026f0:	b510      	push	{r4, lr}
  SD_CS_HIGH();
 80026f2:	2201      	movs	r2, #1
 80026f4:	2110      	movs	r1, #16
 80026f6:	480b      	ldr	r0, [pc, #44]	@ (8002724 <SD_Init+0x34>)
 80026f8:	f006 f914 	bl	8008924 <HAL_GPIO_WritePin>
 80026fc:	240a      	movs	r4, #10
    SD_WriteByte(SD_DUMMY_BYTE);
 80026fe:	20ff      	movs	r0, #255	@ 0xff
 8002700:	f7ff fc76 	bl	8001ff0 <SD_WriteByte>
  for (i = 0; i <= 9; i++)
 8002704:	3c01      	subs	r4, #1
 8002706:	d1fa      	bne.n	80026fe <SD_Init+0xe>
		SD_GoIdleState();
 8002708:	f7ff fccc 	bl	80020a4 <SD_GoIdleState>
		SD_GetCardType();
 800270c:	f7ff ff40 	bl	8002590 <SD_GetCardType>
	}while(SD_Type == SD_TYPE_NOT_SD && i++ >10);
 8002710:	4b05      	ldr	r3, [pc, #20]	@ (8002728 <SD_Init+0x38>)
	if(SD_Type == SD_TYPE_NOT_SD)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	b123      	cbz	r3, 8002720 <SD_Init+0x30>
}
 8002716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return SD_GetCardInfo(&SDCardInfo);
 800271a:	4804      	ldr	r0, [pc, #16]	@ (800272c <SD_Init+0x3c>)
 800271c:	f7ff bf06 	b.w	800252c <SD_GetCardInfo>
}
 8002720:	20ff      	movs	r0, #255	@ 0xff
 8002722:	bd10      	pop	{r4, pc}
 8002724:	40010800 	.word	0x40010800
 8002728:	20000828 	.word	0x20000828
 800272c:	200007d0 	.word	0x200007d0

08002730 <MX_ADC1_Init>:

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002730:	4823      	ldr	r0, [pc, #140]	@ (80027c0 <MX_ADC1_Init+0x90>)
 8002732:	4b24      	ldr	r3, [pc, #144]	@ (80027c4 <MX_ADC1_Init+0x94>)
{
 8002734:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 8002736:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002738:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800273c:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800273e:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8002742:	2400      	movs	r4, #0
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002744:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002746:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 8002748:	2304      	movs	r3, #4
{
 800274a:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800274c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002750:	9403      	str	r4, [sp, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002752:	7305      	strb	r5, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002754:	7504      	strb	r4, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002756:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 4;
 8002758:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800275a:	f005 fd49 	bl	80081f0 <HAL_ADC_Init>
 800275e:	b108      	cbz	r0, 8002764 <MX_ADC1_Init+0x34>
  {
    Error_Handler();
 8002760:	f004 fa5a 	bl	8006c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002764:	e9cd 4501 	strd	r4, r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002768:	2402      	movs	r4, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800276a:	4815      	ldr	r0, [pc, #84]	@ (80027c0 <MX_ADC1_Init+0x90>)
 800276c:	a901      	add	r1, sp, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 800276e:	9403      	str	r4, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002770:	f005 fbd0 	bl	8007f14 <HAL_ADC_ConfigChannel>
 8002774:	b108      	cbz	r0, 800277a <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 8002776:	f004 fa4f 	bl	8006c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800277a:	2301      	movs	r3, #1
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800277c:	4810      	ldr	r0, [pc, #64]	@ (80027c0 <MX_ADC1_Init+0x90>)
 800277e:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002780:	e9cd 3401 	strd	r3, r4, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002784:	f005 fbc6 	bl	8007f14 <HAL_ADC_ConfigChannel>
 8002788:	b108      	cbz	r0, 800278e <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 800278a:	f004 fa45 	bl	8006c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800278e:	2108      	movs	r1, #8
 8002790:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002792:	480b      	ldr	r0, [pc, #44]	@ (80027c0 <MX_ADC1_Init+0x90>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002794:	e9cd 1301 	strd	r1, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002798:	a901      	add	r1, sp, #4
 800279a:	f005 fbbb 	bl	8007f14 <HAL_ADC_ConfigChannel>
 800279e:	b108      	cbz	r0, 80027a4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80027a0:	f004 fa3a 	bl	8006c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80027a4:	2304      	movs	r3, #4
 80027a6:	2209      	movs	r2, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027a8:	4805      	ldr	r0, [pc, #20]	@ (80027c0 <MX_ADC1_Init+0x90>)
 80027aa:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80027ae:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027b2:	f005 fbaf 	bl	8007f14 <HAL_ADC_ConfigChannel>
 80027b6:	b108      	cbz	r0, 80027bc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80027b8:	f004 fa2e 	bl	8006c18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027bc:	b005      	add	sp, #20
 80027be:	bd30      	pop	{r4, r5, pc}
 80027c0:	20000884 	.word	0x20000884
 80027c4:	40012400 	.word	0x40012400

080027c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	2210      	movs	r2, #16
{
 80027ca:	b530      	push	{r4, r5, lr}
 80027cc:	4605      	mov	r5, r0
 80027ce:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	eb0d 0002 	add.w	r0, sp, r2
 80027d4:	2100      	movs	r1, #0
 80027d6:	f009 fbc1 	bl	800bf5c <memset>
  if(adcHandle->Instance==ADC1)
 80027da:	682a      	ldr	r2, [r5, #0]
 80027dc:	4b27      	ldr	r3, [pc, #156]	@ (800287c <HAL_ADC_MspInit+0xb4>)
 80027de:	429a      	cmp	r2, r3
 80027e0:	d14a      	bne.n	8002878 <HAL_ADC_MspInit+0xb0>
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPS_PPS_Pin|ADC_GASP_Pin;
 80027e2:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027e4:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 80027e8:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ea:	4825      	ldr	r0, [pc, #148]	@ (8002880 <HAL_ADC_MspInit+0xb8>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027f0:	619a      	str	r2, [r3, #24]
 80027f2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f4:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027f6:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80027fa:	9201      	str	r2, [sp, #4]
 80027fc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fe:	699a      	ldr	r2, [r3, #24]
 8002800:	f042 0204 	orr.w	r2, r2, #4
 8002804:	619a      	str	r2, [r3, #24]
 8002806:	699a      	ldr	r2, [r3, #24]
 8002808:	f002 0204 	and.w	r2, r2, #4
 800280c:	9202      	str	r2, [sp, #8]
 800280e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002810:	699a      	ldr	r2, [r3, #24]
 8002812:	f042 0208 	orr.w	r2, r2, #8
 8002816:	619a      	str	r2, [r3, #24]
 8002818:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800281a:	e9cd 4404 	strd	r4, r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	9303      	str	r3, [sp, #12]
 8002824:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002826:	f005 ff9f 	bl	8008768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VADC_BDC1_Pin|ADC_BAT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282a:	4816      	ldr	r0, [pc, #88]	@ (8002884 <HAL_ADC_MspInit+0xbc>)
 800282c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800282e:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002832:	f005 ff99 	bl	8008768 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002836:	2300      	movs	r3, #0
    hdma_adc1.Instance = DMA1_Channel1;
 8002838:	4c13      	ldr	r4, [pc, #76]	@ (8002888 <HAL_ADC_MspInit+0xc0>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800283a:	4a14      	ldr	r2, [pc, #80]	@ (800288c <HAL_ADC_MspInit+0xc4>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800283c:	2180      	movs	r1, #128	@ 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800283e:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002842:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002846:	f44f 6080 	mov.w	r0, #1024	@ 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800284a:	e9c4 1203 	strd	r1, r2, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800284e:	2220      	movs	r2, #32
 8002850:	e9c4 0205 	strd	r0, r2, [r4, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002854:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002856:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002858:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800285a:	f005 fe1d 	bl	8008498 <HAL_DMA_Init>
 800285e:	b108      	cbz	r0, 8002864 <HAL_ADC_MspInit+0x9c>
    {
      Error_Handler();
 8002860:	f004 f9da 	bl	8006c18 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 12, 0);
 8002864:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002866:	622c      	str	r4, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 12, 0);
 8002868:	2200      	movs	r2, #0
 800286a:	210c      	movs	r1, #12
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800286c:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 12, 0);
 800286e:	f005 fdc1 	bl	80083f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002872:	2012      	movs	r0, #18
 8002874:	f005 fdee 	bl	8008454 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002878:	b009      	add	sp, #36	@ 0x24
 800287a:	bd30      	pop	{r4, r5, pc}
 800287c:	40012400 	.word	0x40012400
 8002880:	40010800 	.word	0x40010800
 8002884:	40010c00 	.word	0x40010c00
 8002888:	20000840 	.word	0x20000840
 800288c:	40020008 	.word	0x40020008

08002890 <HAL_ADC_ConvCpltCallback>:
{
    // 处理 ADC 转换结果
	static uint32_t adc_buf[4] = {0};
	static uint8_t i = 0;

	if(hadc->Instance == ADC1){
 8002890:	6802      	ldr	r2, [r0, #0]
 8002892:	4b1f      	ldr	r3, [pc, #124]	@ (8002910 <HAL_ADC_ConvCpltCallback+0x80>)
{
 8002894:	b530      	push	{r4, r5, lr}
	if(hadc->Instance == ADC1){
 8002896:	429a      	cmp	r2, r3
 8002898:	d117      	bne.n	80028ca <HAL_ADC_ConvCpltCallback+0x3a>
		if(i <= 9){
 800289a:	481e      	ldr	r0, [pc, #120]	@ (8002914 <HAL_ADC_ConvCpltCallback+0x84>)
 800289c:	7803      	ldrb	r3, [r0, #0]
 800289e:	2b09      	cmp	r3, #9
 80028a0:	d814      	bhi.n	80028cc <HAL_ADC_ConvCpltCallback+0x3c>
			adc_buf[0] += ADC_rslt[0];
 80028a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002918 <HAL_ADC_ConvCpltCallback+0x88>)
 80028a4:	491d      	ldr	r1, [pc, #116]	@ (800291c <HAL_ADC_ConvCpltCallback+0x8c>)
 80028a6:	6814      	ldr	r4, [r2, #0]
 80028a8:	880d      	ldrh	r5, [r1, #0]
			adc_buf[1] += ADC_rslt[1];
			adc_buf[2] += ADC_rslt[2];
			adc_buf[3] += ADC_rslt[3];
			i++;
 80028aa:	3301      	adds	r3, #1
			adc_buf[0] += ADC_rslt[0];
 80028ac:	442c      	add	r4, r5
 80028ae:	6014      	str	r4, [r2, #0]
			adc_buf[1] += ADC_rslt[1];
 80028b0:	884d      	ldrh	r5, [r1, #2]
 80028b2:	6854      	ldr	r4, [r2, #4]
			i++;
 80028b4:	7003      	strb	r3, [r0, #0]
			adc_buf[1] += ADC_rslt[1];
 80028b6:	442c      	add	r4, r5
 80028b8:	6054      	str	r4, [r2, #4]
			adc_buf[2] += ADC_rslt[2];
 80028ba:	888d      	ldrh	r5, [r1, #4]
 80028bc:	6894      	ldr	r4, [r2, #8]
 80028be:	442c      	add	r4, r5
 80028c0:	6094      	str	r4, [r2, #8]
			adc_buf[3] += ADC_rslt[3];
 80028c2:	88cc      	ldrh	r4, [r1, #6]
 80028c4:	68d1      	ldr	r1, [r2, #12]
 80028c6:	4421      	add	r1, r4
 80028c8:	60d1      	str	r1, [r2, #12]
			adc_buf[2]= 0;
			adc_buf[3]= 0;
			ADC_CONV_cplt = 1;
		}
	}
}
 80028ca:	bd30      	pop	{r4, r5, pc}
		else if(i == 10)
 80028cc:	2b0a      	cmp	r3, #10
 80028ce:	d1fc      	bne.n	80028ca <HAL_ADC_ConvCpltCallback+0x3a>
			motor1_adc_val 	= adc_buf[0]/10;
 80028d0:	4a11      	ldr	r2, [pc, #68]	@ (8002918 <HAL_ADC_ConvCpltCallback+0x88>)
 80028d2:	4c13      	ldr	r4, [pc, #76]	@ (8002920 <HAL_ADC_ConvCpltCallback+0x90>)
 80028d4:	6811      	ldr	r1, [r2, #0]
 80028d6:	fbb1 f1f3 	udiv	r1, r1, r3
 80028da:	8021      	strh	r1, [r4, #0]
			motor2_adc_val 	= adc_buf[1]/10;
 80028dc:	6851      	ldr	r1, [r2, #4]
 80028de:	4c11      	ldr	r4, [pc, #68]	@ (8002924 <HAL_ADC_ConvCpltCallback+0x94>)
 80028e0:	fbb1 f1f3 	udiv	r1, r1, r3
 80028e4:	8021      	strh	r1, [r4, #0]
			bat_adc_val 		= adc_buf[2]/10;
 80028e6:	6891      	ldr	r1, [r2, #8]
 80028e8:	4c0f      	ldr	r4, [pc, #60]	@ (8002928 <HAL_ADC_ConvCpltCallback+0x98>)
 80028ea:	fbb1 f1f3 	udiv	r1, r1, r3
 80028ee:	8021      	strh	r1, [r4, #0]
			gaspres_adc_val = adc_buf[3]/10;
 80028f0:	68d1      	ldr	r1, [r2, #12]
 80028f2:	fbb1 f1f3 	udiv	r1, r1, r3
 80028f6:	4b0d      	ldr	r3, [pc, #52]	@ (800292c <HAL_ADC_ConvCpltCallback+0x9c>)
 80028f8:	8019      	strh	r1, [r3, #0]
			i = 0;
 80028fa:	2300      	movs	r3, #0
			adc_buf[1]= 0;
 80028fc:	e9c2 3300 	strd	r3, r3, [r2]
			adc_buf[3]= 0;
 8002900:	e9c2 3302 	strd	r3, r3, [r2, #8]
			ADC_CONV_cplt = 1;
 8002904:	2201      	movs	r2, #1
			i = 0;
 8002906:	7003      	strb	r3, [r0, #0]
			ADC_CONV_cplt = 1;
 8002908:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <HAL_ADC_ConvCpltCallback+0xa0>)
 800290a:	701a      	strb	r2, [r3, #0]
}
 800290c:	e7dd      	b.n	80028ca <HAL_ADC_ConvCpltCallback+0x3a>
 800290e:	bf00      	nop
 8002910:	40012400 	.word	0x40012400
 8002914:	2000083c 	.word	0x2000083c
 8002918:	2000082c 	.word	0x2000082c
 800291c:	200008b6 	.word	0x200008b6
 8002920:	2000093c 	.word	0x2000093c
 8002924:	2000093a 	.word	0x2000093a
 8002928:	200008be 	.word	0x200008be
 800292c:	2000091a 	.word	0x2000091a
 8002930:	200008b4 	.word	0x200008b4
 8002934:	00000000 	.word	0x00000000

08002938 <refresh_bat_vlt>:

uint8_t low_power =0;
uint16_t bat_adc_val = 0;
uint8_t bat_val_refreshed = 0;

void refresh_bat_vlt(){
 8002938:	b510      	push	{r4, lr}
	level_20 = (uint16_t)(20.4/20/VREF*4095);//20.4V
	level_40 = (uint16_t)(21.0/20/VREF*4095);//21V
	level_60 = (uint16_t)(22.0/20/VREF*4095);//22V
	level_80 = (uint16_t)(24.0/20/VREF*4095);//24V

	bat_adc_val = (uint16_t)(bat_adc_val*1.01);
 800293a:	4c3d      	ldr	r4, [pc, #244]	@ (8002a30 <refresh_bat_vlt+0xf8>)
 800293c:	8820      	ldrh	r0, [r4, #0]
 800293e:	f7fd fd6b 	bl	8000418 <__aeabi_i2d>
 8002942:	a339      	add	r3, pc, #228	@ (adr r3, 8002a28 <refresh_bat_vlt+0xf0>)
 8002944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002948:	f7fd fdd0 	bl	80004ec <__aeabi_dmul>
 800294c:	f7fe f8a6 	bl	8000a9c <__aeabi_d2uiz>
	if(bat_adc_val <= level_0){
 8002950:	f240 43a3 	movw	r3, #1187	@ 0x4a3
	bat_adc_val = (uint16_t)(bat_adc_val*1.01);
 8002954:	b280      	uxth	r0, r0
	if(bat_adc_val <= level_0){
 8002956:	4298      	cmp	r0, r3
	bat_adc_val = (uint16_t)(bat_adc_val*1.01);
 8002958:	8020      	strh	r0, [r4, #0]
	if(bat_adc_val <= level_0){
 800295a:	4b36      	ldr	r3, [pc, #216]	@ (8002a34 <refresh_bat_vlt+0xfc>)
 800295c:	d818      	bhi.n	8002990 <refresh_bat_vlt+0x58>
		low_power = 1;
 800295e:	2201      	movs	r2, #1

		//请立即充电，0%
		sprintf(Tx_Buffer,"Main.n4.val=0\xff\xff\xff");
 8002960:	4935      	ldr	r1, [pc, #212]	@ (8002a38 <refresh_bat_vlt+0x100>)
 8002962:	4836      	ldr	r0, [pc, #216]	@ (8002a3c <refresh_bat_vlt+0x104>)
		low_power = 1;
 8002964:	701a      	strb	r2, [r3, #0]
		sprintf(Tx_Buffer,"Main.n4.val=0\xff\xff\xff");
 8002966:	f009 fbf4 	bl	800c152 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800296a:	4834      	ldr	r0, [pc, #208]	@ (8002a3c <refresh_bat_vlt+0x104>)
 800296c:	f005 f8e6 	bl	8007b3c <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.j0.val=0\xff\xff\xff");
 8002970:	4933      	ldr	r1, [pc, #204]	@ (8002a40 <refresh_bat_vlt+0x108>)
 8002972:	4832      	ldr	r0, [pc, #200]	@ (8002a3c <refresh_bat_vlt+0x104>)
 8002974:	f009 fbed 	bl	800c152 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002978:	4830      	ldr	r0, [pc, #192]	@ (8002a3c <refresh_bat_vlt+0x104>)
 800297a:	f005 f8df 	bl	8007b3c <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.t0.txt=\"请立即\r\n 充电\"\xff\xff\xff");
 800297e:	4931      	ldr	r1, [pc, #196]	@ (8002a44 <refresh_bat_vlt+0x10c>)
		//100%
		low_power = 0;

		sprintf(Tx_Buffer,"Main.n4.val=100\xff\xff\xff");
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
		sprintf(Tx_Buffer,"Main.j0.val=100\xff\xff\xff");
 8002980:	482e      	ldr	r0, [pc, #184]	@ (8002a3c <refresh_bat_vlt+0x104>)
 8002982:	f009 fbe6 	bl	800c152 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
	}

}
 8002986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800298a:	482c      	ldr	r0, [pc, #176]	@ (8002a3c <refresh_bat_vlt+0x104>)
 800298c:	f005 b8d6 	b.w	8007b3c <USART1_Tx_HMIdata>
	}else if(bat_adc_val > level_0 && bat_adc_val <= level_20){
 8002990:	f240 42ed 	movw	r2, #1261	@ 0x4ed
 8002994:	4290      	cmp	r0, r2
 8002996:	d811      	bhi.n	80029bc <refresh_bat_vlt+0x84>
		low_power = 0;
 8002998:	2200      	movs	r2, #0
		sprintf(Tx_Buffer,"Main.n4.val=20\xff\xff\xff");
 800299a:	492b      	ldr	r1, [pc, #172]	@ (8002a48 <refresh_bat_vlt+0x110>)
 800299c:	4827      	ldr	r0, [pc, #156]	@ (8002a3c <refresh_bat_vlt+0x104>)
		low_power = 0;
 800299e:	701a      	strb	r2, [r3, #0]
		sprintf(Tx_Buffer,"Main.n4.val=20\xff\xff\xff");
 80029a0:	f009 fbd7 	bl	800c152 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80029a4:	4825      	ldr	r0, [pc, #148]	@ (8002a3c <refresh_bat_vlt+0x104>)
 80029a6:	f005 f8c9 	bl	8007b3c <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.j0.val=20\xff\xff\xff");
 80029aa:	4928      	ldr	r1, [pc, #160]	@ (8002a4c <refresh_bat_vlt+0x114>)
 80029ac:	4823      	ldr	r0, [pc, #140]	@ (8002a3c <refresh_bat_vlt+0x104>)
 80029ae:	f009 fbd0 	bl	800c152 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80029b2:	4822      	ldr	r0, [pc, #136]	@ (8002a3c <refresh_bat_vlt+0x104>)
 80029b4:	f005 f8c2 	bl	8007b3c <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.t0.txt=\"请尽快\r\n 充电\"\xff\xff\xff");
 80029b8:	4925      	ldr	r1, [pc, #148]	@ (8002a50 <refresh_bat_vlt+0x118>)
 80029ba:	e7e1      	b.n	8002980 <refresh_bat_vlt+0x48>
	}else if(bat_adc_val > level_20 && bat_adc_val <= level_40){
 80029bc:	f240 5213 	movw	r2, #1299	@ 0x513
 80029c0:	4290      	cmp	r0, r2
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	d809      	bhi.n	80029dc <refresh_bat_vlt+0xa4>
		sprintf(Tx_Buffer,"Main.n4.val=40\xff\xff\xff");
 80029c8:	4922      	ldr	r1, [pc, #136]	@ (8002a54 <refresh_bat_vlt+0x11c>)
 80029ca:	481c      	ldr	r0, [pc, #112]	@ (8002a3c <refresh_bat_vlt+0x104>)
		low_power = 0;
 80029cc:	701a      	strb	r2, [r3, #0]
		sprintf(Tx_Buffer,"Main.n4.val=40\xff\xff\xff");
 80029ce:	f009 fbc0 	bl	800c152 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80029d2:	481a      	ldr	r0, [pc, #104]	@ (8002a3c <refresh_bat_vlt+0x104>)
 80029d4:	f005 f8b2 	bl	8007b3c <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.j0.val=40\xff\xff\xff");
 80029d8:	491f      	ldr	r1, [pc, #124]	@ (8002a58 <refresh_bat_vlt+0x120>)
 80029da:	e7d1      	b.n	8002980 <refresh_bat_vlt+0x48>
	}else if(bat_adc_val > level_40 && bat_adc_val <= level_60){
 80029dc:	f5b0 6faa 	cmp.w	r0, #1360	@ 0x550
 80029e0:	d809      	bhi.n	80029f6 <refresh_bat_vlt+0xbe>
		sprintf(Tx_Buffer,"Main.n4.val=60\xff\xff\xff");
 80029e2:	491e      	ldr	r1, [pc, #120]	@ (8002a5c <refresh_bat_vlt+0x124>)
 80029e4:	4815      	ldr	r0, [pc, #84]	@ (8002a3c <refresh_bat_vlt+0x104>)
		low_power = 0;
 80029e6:	701a      	strb	r2, [r3, #0]
		sprintf(Tx_Buffer,"Main.n4.val=60\xff\xff\xff");
 80029e8:	f009 fbb3 	bl	800c152 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80029ec:	4813      	ldr	r0, [pc, #76]	@ (8002a3c <refresh_bat_vlt+0x104>)
 80029ee:	f005 f8a5 	bl	8007b3c <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.j0.val=60\xff\xff\xff");
 80029f2:	491b      	ldr	r1, [pc, #108]	@ (8002a60 <refresh_bat_vlt+0x128>)
 80029f4:	e7c4      	b.n	8002980 <refresh_bat_vlt+0x48>
	}else if(bat_adc_val > level_60 && bat_adc_val <= level_80){
 80029f6:	f240 51cc 	movw	r1, #1484	@ 0x5cc
 80029fa:	4288      	cmp	r0, r1
		low_power = 0;
 80029fc:	701a      	strb	r2, [r3, #0]
	}else if(bat_adc_val > level_60 && bat_adc_val <= level_80){
 80029fe:	d808      	bhi.n	8002a12 <refresh_bat_vlt+0xda>
		sprintf(Tx_Buffer,"Main.n4.val=80\xff\xff\xff");
 8002a00:	4918      	ldr	r1, [pc, #96]	@ (8002a64 <refresh_bat_vlt+0x12c>)
 8002a02:	480e      	ldr	r0, [pc, #56]	@ (8002a3c <refresh_bat_vlt+0x104>)
 8002a04:	f009 fba5 	bl	800c152 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002a08:	480c      	ldr	r0, [pc, #48]	@ (8002a3c <refresh_bat_vlt+0x104>)
 8002a0a:	f005 f897 	bl	8007b3c <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.j0.val=80\xff\xff\xff");
 8002a0e:	4916      	ldr	r1, [pc, #88]	@ (8002a68 <refresh_bat_vlt+0x130>)
 8002a10:	e7b6      	b.n	8002980 <refresh_bat_vlt+0x48>
		sprintf(Tx_Buffer,"Main.n4.val=100\xff\xff\xff");
 8002a12:	4916      	ldr	r1, [pc, #88]	@ (8002a6c <refresh_bat_vlt+0x134>)
 8002a14:	4809      	ldr	r0, [pc, #36]	@ (8002a3c <refresh_bat_vlt+0x104>)
 8002a16:	f009 fb9c 	bl	800c152 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002a1a:	4808      	ldr	r0, [pc, #32]	@ (8002a3c <refresh_bat_vlt+0x104>)
 8002a1c:	f005 f88e 	bl	8007b3c <USART1_Tx_HMIdata>
		sprintf(Tx_Buffer,"Main.j0.val=100\xff\xff\xff");
 8002a20:	4913      	ldr	r1, [pc, #76]	@ (8002a70 <refresh_bat_vlt+0x138>)
 8002a22:	e7ad      	b.n	8002980 <refresh_bat_vlt+0x48>
 8002a24:	f3af 8000 	nop.w
 8002a28:	c28f5c29 	.word	0xc28f5c29
 8002a2c:	3ff028f5 	.word	0x3ff028f5
 8002a30:	200008be 	.word	0x200008be
 8002a34:	200008c0 	.word	0x200008c0
 8002a38:	0800ebfe 	.word	0x0800ebfe
 8002a3c:	20000b8a 	.word	0x20000b8a
 8002a40:	0800ec0f 	.word	0x0800ec0f
 8002a44:	0800ec20 	.word	0x0800ec20
 8002a48:	0800ec44 	.word	0x0800ec44
 8002a4c:	0800ec56 	.word	0x0800ec56
 8002a50:	0800ec68 	.word	0x0800ec68
 8002a54:	0800ec8c 	.word	0x0800ec8c
 8002a58:	0800ec9e 	.word	0x0800ec9e
 8002a5c:	0800ecb0 	.word	0x0800ecb0
 8002a60:	0800ecc2 	.word	0x0800ecc2
 8002a64:	0800ecd4 	.word	0x0800ecd4
 8002a68:	0800ece6 	.word	0x0800ece6
 8002a6c:	0800ecf8 	.word	0x0800ecf8
 8002a70:	0800ed0b 	.word	0x0800ed0b

08002a74 <Buzzer>:
#include "buzzer.h"

void Buzzer(uint16_t beep_ms){
 8002a74:	b538      	push	{r3, r4, r5, lr}
 8002a76:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002a78:	4d08      	ldr	r5, [pc, #32]	@ (8002a9c <Buzzer+0x28>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a80:	4628      	mov	r0, r5
 8002a82:	f005 ff4f 	bl	8008924 <HAL_GPIO_WritePin>
	HAL_Delay(beep_ms);
 8002a86:	4620      	mov	r0, r4
 8002a88:	f005 f984 	bl	8007d94 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002a8c:	4628      	mov	r0, r5
}
 8002a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002a92:	2200      	movs	r2, #0
 8002a94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a98:	f005 bf44 	b.w	8008924 <HAL_GPIO_WritePin>
 8002a9c:	40010c00 	.word	0x40010c00

08002aa0 <disk_status>:

  default:
      status = STA_NOINIT;
  }
  return status;
}
 8002aa0:	3800      	subs	r0, #0
 8002aa2:	bf18      	it	ne
 8002aa4:	2001      	movne	r0, #1
 8002aa6:	4770      	bx	lr

08002aa8 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002aa8:	b508      	push	{r3, lr}
  DSTATUS status = STA_NOINIT;
  switch (pdrv) {
 8002aaa:	b928      	cbnz	r0, 8002ab8 <disk_initialize+0x10>
  case DEV_SPI_SD:          /* SD CARD */
      if (SD_Init()==SD_RESPONSE_NO_ERROR) {
 8002aac:	f7ff fe20 	bl	80026f0 <SD_Init>
 8002ab0:	3800      	subs	r0, #0
 8002ab2:	bf18      	it	ne
 8002ab4:	2001      	movne	r0, #1

  default:
      status = STA_NOINIT;
  }
  return status;
}
 8002ab6:	bd08      	pop	{r3, pc}
          status = STA_NOINIT;
 8002ab8:	2001      	movs	r0, #1
 8002aba:	e7fc      	b.n	8002ab6 <disk_initialize+0xe>

08002abc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002abc:	b513      	push	{r0, r1, r4, lr}
 8002abe:	4604      	mov	r4, r0
 8002ac0:	4608      	mov	r0, r1
 8002ac2:	4619      	mov	r1, r3
  DRESULT status = RES_PARERR;
  SD_Error SD_state = SD_RESPONSE_NO_ERROR;

  switch (pdrv) {
 8002ac4:	4623      	mov	r3, r4
 8002ac6:	b964      	cbnz	r4, 8002ae2 <disk_read+0x26>
//              buff += SD_BLOCKSIZE;
//          }
//          return res;
//      }

      SD_state=SD_ReadMultiBlocks(buff,sector *SD_BLOCK_SIZE,SD_BLOCK_SIZE,count);
 8002ac8:	9101      	str	r1, [sp, #4]
 8002aca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ace:	0252      	lsls	r2, r2, #9
 8002ad0:	9100      	str	r1, [sp, #0]
 8002ad2:	f7ff fb05 	bl	80020e0 <SD_ReadMultiBlocks>
//          /* Check if the Transfer is finished */
//          SD_state=SD_WaitReadOperation();
//          while (SD_GetStatus() != SD_TRANSFER_OK);
//      }

      if (SD_state!=SD_RESPONSE_NO_ERROR)
 8002ad6:	3800      	subs	r0, #0
 8002ad8:	bf18      	it	ne
 8002ada:	2001      	movne	r0, #1
 8002adc:	0080      	lsls	r0, r0, #2

  default:
      status = RES_PARERR;
  }
  return status;
}
 8002ade:	b002      	add	sp, #8
 8002ae0:	bd10      	pop	{r4, pc}
  DRESULT status = RES_PARERR;
 8002ae2:	2004      	movs	r0, #4
 8002ae4:	e7fb      	b.n	8002ade <disk_read+0x22>

08002ae6 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8002ae6:	b513      	push	{r0, r1, r4, lr}
 8002ae8:	4604      	mov	r4, r0
 8002aea:	4608      	mov	r0, r1
  DRESULT status = RES_PARERR;
  SD_Error SD_state = SD_RESPONSE_NO_ERROR;

  if (!count) {
 8002aec:	b173      	cbz	r3, 8002b0c <disk_write+0x26>
      return RES_PARERR;    /* Check parameter */
  }

  switch (pdrv) {
 8002aee:	b96c      	cbnz	r4, 8002b0c <disk_write+0x26>
//              buff += SD_BLOCKSIZE;
//          }
//          return res;
//      }

      SD_state=SD_WriteMultiBlocks((uint8_t *)buff,sector*SD_BLOCK_SIZE,SD_BLOCK_SIZE,count);
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002af6:	0252      	lsls	r2, r2, #9
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	4623      	mov	r3, r4
 8002afc:	f7ff fb40 	bl	8002180 <SD_WriteMultiBlocks>
//          SD_state=SD_WaitReadOperation();
//
//          /* Wait until end of DMA transfer */
//          while (SD_GetStatus() != SD_TRANSFER_OK);
//      }
      if (SD_state!=SD_RESPONSE_NO_ERROR)
 8002b00:	3800      	subs	r0, #0
 8002b02:	bf18      	it	ne
 8002b04:	2001      	movne	r0, #1
 8002b06:	0080      	lsls	r0, r0, #2

  default:
      status = RES_PARERR;
  }
  return status;
}
 8002b08:	b002      	add	sp, #8
 8002b0a:	bd10      	pop	{r4, pc}
      return RES_PARERR;    /* Check parameter */
 8002b0c:	2004      	movs	r0, #4
 8002b0e:	e7fb      	b.n	8002b08 <disk_write+0x22>

08002b10 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002b10:	b538      	push	{r3, r4, r5, lr}
 8002b12:	4615      	mov	r5, r2
  DRESULT status = RES_PARERR;
  switch (pdrv) {
 8002b14:	4604      	mov	r4, r0
 8002b16:	b9b0      	cbnz	r0, 8002b46 <disk_ioctl+0x36>
  case DEV_SPI_SD: /* SD CARD */
      switch (cmd) {
 8002b18:	2902      	cmp	r1, #2
 8002b1a:	d00c      	beq.n	8002b36 <disk_ioctl+0x26>
 8002b1c:	2903      	cmp	r1, #3
 8002b1e:	d00f      	beq.n	8002b40 <disk_ioctl+0x30>
 8002b20:	2901      	cmp	r1, #1
 8002b22:	d10b      	bne.n	8002b3c <disk_ioctl+0x2c>
      case GET_BLOCK_SIZE :
          *(DWORD * )buff = 1;
          break;

      case GET_SECTOR_COUNT:
  *(DWORD*)buff = SDCardInfo.CardCapacity/SDCardInfo.CardBlockSize;
 8002b24:	4909      	ldr	r1, [pc, #36]	@ (8002b4c <disk_ioctl+0x3c>)
 8002b26:	4603      	mov	r3, r0
 8002b28:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8002b2a:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	@ 0x48
 8002b2e:	f7fe f825 	bl	8000b7c <__aeabi_uldivmod>
 8002b32:	6028      	str	r0, [r5, #0]
          break;
 8002b34:	e002      	b.n	8002b3c <disk_ioctl+0x2c>
          *(WORD * )buff = SD_BLOCK_SIZE;
 8002b36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b3a:	8013      	strh	r3, [r2, #0]

  default:
      status = RES_PARERR;
  }
  return status;
}
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	bd38      	pop	{r3, r4, r5, pc}
          *(DWORD * )buff = 1;
 8002b40:	2301      	movs	r3, #1
 8002b42:	6013      	str	r3, [r2, #0]
          break;
 8002b44:	e7fa      	b.n	8002b3c <disk_ioctl+0x2c>
  DRESULT status = RES_PARERR;
 8002b46:	2404      	movs	r4, #4
 8002b48:	e7f8      	b.n	8002b3c <disk_ioctl+0x2c>
 8002b4a:	bf00      	nop
 8002b4c:	200007d0 	.word	0x200007d0

08002b50 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b50:	4b0e      	ldr	r3, [pc, #56]	@ (8002b8c <MX_DMA_Init+0x3c>)
{
 8002b52:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b54:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 8002b56:	2106      	movs	r1, #6
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b58:	f042 0201 	orr.w	r2, r2, #1
 8002b5c:	615a      	str	r2, [r3, #20]
 8002b5e:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 8002b60:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 8002b68:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b6a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 8002b6c:	f005 fc42 	bl	80083f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b70:	200b      	movs	r0, #11
 8002b72:	f005 fc6f 	bl	8008454 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002b76:	2200      	movs	r2, #0
 8002b78:	200d      	movs	r0, #13
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	f005 fc3a 	bl	80083f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002b80:	200d      	movs	r0, #13

}
 8002b82:	b003      	add	sp, #12
 8002b84:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002b88:	f005 bc64 	b.w	8008454 <HAL_NVIC_EnableIRQ>
 8002b8c:	40021000 	.word	0x40021000

08002b90 <Set_Dosage>:
uint8_t read_i2c = 0;
uint16_t Dosage_set;
uint16_t Dosage_load;
uint16_t current_TreeNo = 0;

void Set_Dosage(){
 8002b90:	b538      	push	{r3, r4, r5, lr}
	//刷新注药量设定值
		if(key_value_Refresh){
 8002b92:	4c37      	ldr	r4, [pc, #220]	@ (8002c70 <Set_Dosage+0xe0>)
 8002b94:	7823      	ldrb	r3, [r4, #0]
 8002b96:	b18b      	cbz	r3, 8002bbc <Set_Dosage+0x2c>
			sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",Dosage_set);
 8002b98:	4b36      	ldr	r3, [pc, #216]	@ (8002c74 <Set_Dosage+0xe4>)
 8002b9a:	4937      	ldr	r1, [pc, #220]	@ (8002c78 <Set_Dosage+0xe8>)
 8002b9c:	881a      	ldrh	r2, [r3, #0]
 8002b9e:	4837      	ldr	r0, [pc, #220]	@ (8002c7c <Set_Dosage+0xec>)
 8002ba0:	f009 f8d4 	bl	800bd4c <siprintf>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002ba4:	4835      	ldr	r0, [pc, #212]	@ (8002c7c <Set_Dosage+0xec>)
 8002ba6:	f004 ffc9 	bl	8007b3c <USART1_Tx_HMIdata>
			key_value_Refresh = 0;
 8002baa:	2300      	movs	r3, #0

			sprintf(Tx_Buffer,"Main.t0.txt=\"\"\xff\xff\xff");
 8002bac:	4934      	ldr	r1, [pc, #208]	@ (8002c80 <Set_Dosage+0xf0>)
 8002bae:	4833      	ldr	r0, [pc, #204]	@ (8002c7c <Set_Dosage+0xec>)
			key_value_Refresh = 0;
 8002bb0:	7023      	strb	r3, [r4, #0]
			sprintf(Tx_Buffer,"Main.t0.txt=\"\"\xff\xff\xff");
 8002bb2:	f009 face 	bl	800c152 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002bb6:	4831      	ldr	r0, [pc, #196]	@ (8002c7c <Set_Dosage+0xec>)
 8002bb8:	f004 ffc0 	bl	8007b3c <USART1_Tx_HMIdata>
		}
	//确认键按下，等待启动按键按下
		if(confirm_pressed && waiting_start){
 8002bbc:	4a31      	ldr	r2, [pc, #196]	@ (8002c84 <Set_Dosage+0xf4>)
 8002bbe:	4c32      	ldr	r4, [pc, #200]	@ (8002c88 <Set_Dosage+0xf8>)
 8002bc0:	7811      	ldrb	r1, [r2, #0]
 8002bc2:	7823      	ldrb	r3, [r4, #0]
 8002bc4:	2900      	cmp	r1, #0
 8002bc6:	d030      	beq.n	8002c2a <Set_Dosage+0x9a>
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d030      	beq.n	8002c2e <Set_Dosage+0x9e>
			confirm_pressed = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	7013      	strb	r3, [r2, #0]
		}
	//等待START状态下START按键被按下，显示√
		if(waiting_start && start_pressed){
 8002bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8002c8c <Set_Dosage+0xfc>)
 8002bd2:	781a      	ldrb	r2, [r3, #0]
 8002bd4:	b35a      	cbz	r2, 8002c2e <Set_Dosage+0x9e>
			waiting_start = 0;
 8002bd6:	2200      	movs	r2, #0
			start_pressed = 0;
 8002bd8:	701a      	strb	r2, [r3, #0]
			Injecting = 1;
 8002bda:	2301      	movs	r3, #1
			waiting_start = 0;
 8002bdc:	7022      	strb	r2, [r4, #0]
			Injecting = 1;
 8002bde:	4a2c      	ldr	r2, [pc, #176]	@ (8002c90 <Set_Dosage+0x100>)
			first_run_clcDos = 1;
			current_TreeNo++;
 8002be0:	4d2c      	ldr	r5, [pc, #176]	@ (8002c94 <Set_Dosage+0x104>)
			Injecting = 1;
 8002be2:	7013      	strb	r3, [r2, #0]
			first_run_clcDos = 1;
 8002be4:	4a2c      	ldr	r2, [pc, #176]	@ (8002c98 <Set_Dosage+0x108>)

			AD24C02_Write2Byte(DOSAGE_SET_ADDRESS,&Dosage_load);
 8002be6:	492d      	ldr	r1, [pc, #180]	@ (8002c9c <Set_Dosage+0x10c>)
			first_run_clcDos = 1;
 8002be8:	7013      	strb	r3, [r2, #0]
			current_TreeNo++;
 8002bea:	882b      	ldrh	r3, [r5, #0]
			AD24C02_Write2Byte(DOSAGE_SET_ADDRESS,&Dosage_load);
 8002bec:	2010      	movs	r0, #16
			current_TreeNo++;
 8002bee:	3301      	adds	r3, #1
 8002bf0:	802b      	strh	r3, [r5, #0]
			AD24C02_Write2Byte(DOSAGE_SET_ADDRESS,&Dosage_load);
 8002bf2:	f7fe f96f 	bl	8000ed4 <AD24C02_Write2Byte>
			HAL_Delay(10);
 8002bf6:	200a      	movs	r0, #10
 8002bf8:	f005 f8cc 	bl	8007d94 <HAL_Delay>

			sprintf(Tx_Buffer,"Main.t8.txt=\"√\"\xff\xff\xff");
 8002bfc:	4928      	ldr	r1, [pc, #160]	@ (8002ca0 <Set_Dosage+0x110>)
 8002bfe:	481f      	ldr	r0, [pc, #124]	@ (8002c7c <Set_Dosage+0xec>)
 8002c00:	f009 faa7 	bl	800c152 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002c04:	481d      	ldr	r0, [pc, #116]	@ (8002c7c <Set_Dosage+0xec>)
 8002c06:	f004 ff99 	bl	8007b3c <USART1_Tx_HMIdata>

			sprintf(Tx_Buffer,"Main.t0.txt=\"\"\xff\xff\xff");
 8002c0a:	491d      	ldr	r1, [pc, #116]	@ (8002c80 <Set_Dosage+0xf0>)
 8002c0c:	481b      	ldr	r0, [pc, #108]	@ (8002c7c <Set_Dosage+0xec>)
 8002c0e:	f009 faa0 	bl	800c152 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002c12:	481a      	ldr	r0, [pc, #104]	@ (8002c7c <Set_Dosage+0xec>)
 8002c14:	f004 ff92 	bl	8007b3c <USART1_Tx_HMIdata>

			sprintf(Tx_Buffer,"Main.t19.txt=\"%04d\"\xff\xff\xff",current_TreeNo);
 8002c18:	882a      	ldrh	r2, [r5, #0]
 8002c1a:	4922      	ldr	r1, [pc, #136]	@ (8002ca4 <Set_Dosage+0x114>)
 8002c1c:	4817      	ldr	r0, [pc, #92]	@ (8002c7c <Set_Dosage+0xec>)
 8002c1e:	f009 f895 	bl	800bd4c <siprintf>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002c22:	4816      	ldr	r0, [pc, #88]	@ (8002c7c <Set_Dosage+0xec>)
 8002c24:	f004 ff8a 	bl	8007b3c <USART1_Tx_HMIdata>
 8002c28:	e001      	b.n	8002c2e <Set_Dosage+0x9e>
		if(waiting_start && start_pressed){
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1d0      	bne.n	8002bd0 <Set_Dosage+0x40>
		}
	//等待START时间超时，√消失，需要重新按下确认键
		if(waiting_start_timeout){
 8002c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ca8 <Set_Dosage+0x118>)
 8002c30:	7813      	ldrb	r3, [r2, #0]
 8002c32:	b113      	cbz	r3, 8002c3a <Set_Dosage+0xaa>
			waiting_start_timeout = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	7013      	strb	r3, [r2, #0]
			waiting_start = 0;
 8002c38:	7023      	strb	r3, [r4, #0]
		}

		//Q_SET按键按下，读取上次保存的剂量值
		if(read_i2c && !waiting_start && !Injecting){
 8002c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8002cac <Set_Dosage+0x11c>)
 8002c3c:	7813      	ldrb	r3, [r2, #0]
 8002c3e:	b1b3      	cbz	r3, 8002c6e <Set_Dosage+0xde>
 8002c40:	4913      	ldr	r1, [pc, #76]	@ (8002c90 <Set_Dosage+0x100>)
 8002c42:	7823      	ldrb	r3, [r4, #0]
 8002c44:	7809      	ldrb	r1, [r1, #0]
 8002c46:	430b      	orrs	r3, r1
 8002c48:	d111      	bne.n	8002c6e <Set_Dosage+0xde>
			read_i2c = 0;
			AD24C02_Read2Byte(DOSAGE_SET_ADDRESS,&Dosage_val);
 8002c4a:	4c19      	ldr	r4, [pc, #100]	@ (8002cb0 <Set_Dosage+0x120>)
 8002c4c:	2010      	movs	r0, #16
 8002c4e:	4621      	mov	r1, r4
			read_i2c = 0;
 8002c50:	7013      	strb	r3, [r2, #0]
			AD24C02_Read2Byte(DOSAGE_SET_ADDRESS,&Dosage_val);
 8002c52:	f7fe f950 	bl	8000ef6 <AD24C02_Read2Byte>
			Dosage_set = Dosage_val;
 8002c56:	8822      	ldrh	r2, [r4, #0]
 8002c58:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <Set_Dosage+0xe4>)
			sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",Dosage_set);
 8002c5a:	4907      	ldr	r1, [pc, #28]	@ (8002c78 <Set_Dosage+0xe8>)
 8002c5c:	4807      	ldr	r0, [pc, #28]	@ (8002c7c <Set_Dosage+0xec>)
			Dosage_set = Dosage_val;
 8002c5e:	801a      	strh	r2, [r3, #0]
			sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",Dosage_set);
 8002c60:	f009 f874 	bl	800bd4c <siprintf>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
		}
}
 8002c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002c68:	4804      	ldr	r0, [pc, #16]	@ (8002c7c <Set_Dosage+0xec>)
 8002c6a:	f004 bf67 	b.w	8007b3c <USART1_Tx_HMIdata>
}
 8002c6e:	bd38      	pop	{r3, r4, r5, pc}
 8002c70:	20000923 	.word	0x20000923
 8002c74:	200008c6 	.word	0x200008c6
 8002c78:	0800ed1e 	.word	0x0800ed1e
 8002c7c:	20000b8a 	.word	0x20000b8a
 8002c80:	0800ed30 	.word	0x0800ed30
 8002c84:	2000092b 	.word	0x2000092b
 8002c88:	2000092c 	.word	0x2000092c
 8002c8c:	2000092a 	.word	0x2000092a
 8002c90:	20000940 	.word	0x20000940
 8002c94:	200008c2 	.word	0x200008c2
 8002c98:	200008c9 	.word	0x200008c9
 8002c9c:	200008c4 	.word	0x200008c4
 8002ca0:	0800ed42 	.word	0x0800ed42
 8002ca4:	0800ed57 	.word	0x0800ed57
 8002ca8:	20000a49 	.word	0x20000a49
 8002cac:	200008c8 	.word	0x200008c8
 8002cb0:	200008ca 	.word	0x200008ca

08002cb4 <Refresh_counter>:

void Refresh_counter(){
 8002cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	AD24C02_Write2Byte(SUM_DOSAGE_ADDRESS,&total_inject_Dosage);
 8002cb6:	4e18      	ldr	r6, [pc, #96]	@ (8002d18 <Refresh_counter+0x64>)
	HAL_Delay(10);
	AD24C02_Write2Byte(TOTAL_TREE_ADDRESS,&total_Times);
 8002cb8:	4f18      	ldr	r7, [pc, #96]	@ (8002d1c <Refresh_counter+0x68>)
	AD24C02_Write2Byte(SUM_DOSAGE_ADDRESS,&total_inject_Dosage);
 8002cba:	4631      	mov	r1, r6
 8002cbc:	2020      	movs	r0, #32
 8002cbe:	f7fe f909 	bl	8000ed4 <AD24C02_Write2Byte>
	HAL_Delay(10);
 8002cc2:	200a      	movs	r0, #10
 8002cc4:	f005 f866 	bl	8007d94 <HAL_Delay>
	HAL_Delay(10);
	AD24C02_Write2Byte(CURRENT_TREE_NUMBER,&current_TreeNo);
 8002cc8:	4d15      	ldr	r5, [pc, #84]	@ (8002d20 <Refresh_counter+0x6c>)
	AD24C02_Write2Byte(TOTAL_TREE_ADDRESS,&total_Times);
 8002cca:	4639      	mov	r1, r7
 8002ccc:	2030      	movs	r0, #48	@ 0x30

	sprintf(Tx_Buffer,"Main.n2.val=%d\xff\xff\xff",total_Times);
 8002cce:	4c15      	ldr	r4, [pc, #84]	@ (8002d24 <Refresh_counter+0x70>)
	AD24C02_Write2Byte(TOTAL_TREE_ADDRESS,&total_Times);
 8002cd0:	f7fe f900 	bl	8000ed4 <AD24C02_Write2Byte>
	HAL_Delay(10);
 8002cd4:	200a      	movs	r0, #10
 8002cd6:	f005 f85d 	bl	8007d94 <HAL_Delay>
	AD24C02_Write2Byte(CURRENT_TREE_NUMBER,&current_TreeNo);
 8002cda:	4629      	mov	r1, r5
 8002cdc:	2040      	movs	r0, #64	@ 0x40
 8002cde:	f7fe f8f9 	bl	8000ed4 <AD24C02_Write2Byte>
	sprintf(Tx_Buffer,"Main.n2.val=%d\xff\xff\xff",total_Times);
 8002ce2:	883a      	ldrh	r2, [r7, #0]
 8002ce4:	4910      	ldr	r1, [pc, #64]	@ (8002d28 <Refresh_counter+0x74>)
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	f009 f830 	bl	800bd4c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002cec:	4620      	mov	r0, r4
 8002cee:	f004 ff25 	bl	8007b3c <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"Main.n3.val=%d\xff\xff\xff",total_inject_Dosage);
 8002cf2:	8832      	ldrh	r2, [r6, #0]
 8002cf4:	490d      	ldr	r1, [pc, #52]	@ (8002d2c <Refresh_counter+0x78>)
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	f009 f828 	bl	800bd4c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	f004 ff1d 	bl	8007b3c <USART1_Tx_HMIdata>

	sprintf(Tx_Buffer,"Main.t19.txt=\"%04d\"\xff\xff\xff",current_TreeNo);
 8002d02:	4620      	mov	r0, r4
 8002d04:	882a      	ldrh	r2, [r5, #0]
 8002d06:	490a      	ldr	r1, [pc, #40]	@ (8002d30 <Refresh_counter+0x7c>)
 8002d08:	f009 f820 	bl	800bd4c <siprintf>
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002d0c:	4620      	mov	r0, r4
}
 8002d0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002d12:	f004 bf13 	b.w	8007b3c <USART1_Tx_HMIdata>
 8002d16:	bf00      	nop
 8002d18:	20000a4c 	.word	0x20000a4c
 8002d1c:	20000a4a 	.word	0x20000a4a
 8002d20:	200008c2 	.word	0x200008c2
 8002d24:	20000b8a 	.word	0x20000b8a
 8002d28:	0800e843 	.word	0x0800e843
 8002d2c:	0800e855 	.word	0x0800e855
 8002d30:	0800ed57 	.word	0x0800ed57

08002d34 <Refresh_Dosage>:

void Refresh_Dosage(){
 8002d34:	b508      	push	{r3, lr}
	uint16_t RemainingDosage = 0;
	RemainingDosage = RemainingTimes * 2;

	if(Injecting){
 8002d36:	4b0c      	ldr	r3, [pc, #48]	@ (8002d68 <Refresh_Dosage+0x34>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	b1a3      	cbz	r3, 8002d66 <Refresh_Dosage+0x32>
	RemainingDosage = RemainingTimes * 2;
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d6c <Refresh_Dosage+0x38>)
		sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",RemainingDosage);
 8002d3e:	490c      	ldr	r1, [pc, #48]	@ (8002d70 <Refresh_Dosage+0x3c>)
	RemainingDosage = RemainingTimes * 2;
 8002d40:	781a      	ldrb	r2, [r3, #0]
		sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",RemainingDosage);
 8002d42:	480c      	ldr	r0, [pc, #48]	@ (8002d74 <Refresh_Dosage+0x40>)
 8002d44:	0052      	lsls	r2, r2, #1
 8002d46:	f009 f801 	bl	800bd4c <siprintf>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002d4a:	480a      	ldr	r0, [pc, #40]	@ (8002d74 <Refresh_Dosage+0x40>)
 8002d4c:	f004 fef6 	bl	8007b3c <USART1_Tx_HMIdata>

		sprintf(Tx_Buffer,"Main.t0.txt=\"正在注药\"\xff\xff\xff");
 8002d50:	4909      	ldr	r1, [pc, #36]	@ (8002d78 <Refresh_Dosage+0x44>)
 8002d52:	4808      	ldr	r0, [pc, #32]	@ (8002d74 <Refresh_Dosage+0x40>)
 8002d54:	f009 f9fd 	bl	800c152 <strcpy>
		USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8002d58:	4806      	ldr	r0, [pc, #24]	@ (8002d74 <Refresh_Dosage+0x40>)
 8002d5a:	f004 feef 	bl	8007b3c <USART1_Tx_HMIdata>

		Refresh_counter();
	}
}
 8002d5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Refresh_counter();
 8002d62:	f7ff bfa7 	b.w	8002cb4 <Refresh_counter>
}
 8002d66:	bd08      	pop	{r3, pc}
 8002d68:	20000940 	.word	0x20000940
 8002d6c:	20000a50 	.word	0x20000a50
 8002d70:	0800ed1e 	.word	0x0800ed1e
 8002d74:	20000b8a 	.word	0x20000b8a
 8002d78:	0800ed6e 	.word	0x0800ed6e

08002d7c <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 8002d7c:	6800      	ldr	r0, [r0, #0]
 8002d7e:	4770      	bx	lr

08002d80 <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8002d80:	4603      	mov	r3, r0
	rv = rv << 8 | ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 8002d82:	6800      	ldr	r0, [r0, #0]
 8002d84:	6859      	ldr	r1, [r3, #4]
 8002d86:	4770      	bx	lr

08002d88 <st_dword>:
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8002d88:	0a0b      	lsrs	r3, r1, #8
 8002d8a:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002d8c:	7043      	strb	r3, [r0, #1]
 8002d8e:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8002d90:	0e09      	lsrs	r1, r1, #24
 8002d92:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8002d94:	70c1      	strb	r1, [r0, #3]
}
 8002d96:	4770      	bx	lr

08002d98 <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8002d98:	0a11      	lsrs	r1, r2, #8
 8002d9a:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002d9c:	7041      	strb	r1, [r0, #1]
 8002d9e:	0c11      	lsrs	r1, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8002da0:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8002da2:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 8002da4:	0a1a      	lsrs	r2, r3, #8
 8002da6:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8002da8:	7142      	strb	r2, [r0, #5]
 8002daa:	0c1a      	lsrs	r2, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8002dac:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8002dae:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8002db0:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
 8002db2:	71c3      	strb	r3, [r0, #7]
}
 8002db4:	4770      	bx	lr
	...

08002db8 <chk_share>:

static FRESULT chk_share (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read mode open, 1:Write mode open, 2:Delete or rename) */
)
{
 8002db8:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search open object table for the object */
	be = 0;
 8002dba:	2400      	movs	r4, #0
 8002dbc:	4b14      	ldr	r3, [pc, #80]	@ (8002e10 <chk_share+0x58>)
	for (i = 0; i < FF_FS_LOCK; i++) {
 8002dbe:	4622      	mov	r2, r4
 8002dc0:	461d      	mov	r5, r3
		if (Files[i].fs) {	/* Existing entry */
 8002dc2:	681e      	ldr	r6, [r3, #0]
 8002dc4:	b16e      	cbz	r6, 8002de2 <chk_share+0x2a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 8002dc6:	6807      	ldr	r7, [r0, #0]
 8002dc8:	42be      	cmp	r6, r7
 8002dca:	d10b      	bne.n	8002de4 <chk_share+0x2c>
 8002dcc:	685f      	ldr	r7, [r3, #4]
 8002dce:	6886      	ldr	r6, [r0, #8]
 8002dd0:	42b7      	cmp	r7, r6
 8002dd2:	d107      	bne.n	8002de4 <chk_share+0x2c>
				Files[i].clu == dp->obj.sclust &&
 8002dd4:	689f      	ldr	r7, [r3, #8]
 8002dd6:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8002dd8:	42b7      	cmp	r7, r6
 8002dda:	d103      	bne.n	8002de4 <chk_share+0x2c>
	if (i == FF_FS_LOCK) {	/* The object has not been opened */
		return (!be && acc != 2) ? FR_TOO_MANY_OPEN_FILES : FR_OK;	/* Is there a blank entry for new object? */
	}

	/* The object was opened. Reject any open against writing file and all write mode open */
	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002ddc:	b179      	cbz	r1, 8002dfe <chk_share+0x46>
 8002dde:	2010      	movs	r0, #16
 8002de0:	e00c      	b.n	8002dfc <chk_share+0x44>
			be = 1;
 8002de2:	2401      	movs	r4, #1
	for (i = 0; i < FF_FS_LOCK; i++) {
 8002de4:	3201      	adds	r2, #1
 8002de6:	2a04      	cmp	r2, #4
 8002de8:	f103 0310 	add.w	r3, r3, #16
 8002dec:	d1e9      	bne.n	8002dc2 <chk_share+0xa>
		return (!be && acc != 2) ? FR_TOO_MANY_OPEN_FILES : FR_OK;	/* Is there a blank entry for new object? */
 8002dee:	b10c      	cbz	r4, 8002df4 <chk_share+0x3c>
 8002df0:	2000      	movs	r0, #0
 8002df2:	e003      	b.n	8002dfc <chk_share+0x44>
 8002df4:	2902      	cmp	r1, #2
 8002df6:	bf0c      	ite	eq
 8002df8:	2000      	moveq	r0, #0
 8002dfa:	2012      	movne	r0, #18
}
 8002dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002dfe:	eb05 1302 	add.w	r3, r5, r2, lsl #4
 8002e02:	68d8      	ldr	r0, [r3, #12]
 8002e04:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 8002e08:	4258      	negs	r0, r3
 8002e0a:	4158      	adcs	r0, r3
 8002e0c:	0100      	lsls	r0, r0, #4
 8002e0e:	e7f5      	b.n	8002dfc <chk_share+0x44>
 8002e10:	200008cc 	.word	0x200008cc

08002e14 <inc_share>:

static UINT inc_share (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e16:	4c1d      	ldr	r4, [pc, #116]	@ (8002e8c <inc_share+0x78>)
	UINT i;


	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 8002e18:	2300      	movs	r3, #0
 8002e1a:	4622      	mov	r2, r4
		if (Files[i].fs == dp->obj.fs
 8002e1c:	6807      	ldr	r7, [r0, #0]
 8002e1e:	6825      	ldr	r5, [r4, #0]
 8002e20:	42bd      	cmp	r5, r7
 8002e22:	d107      	bne.n	8002e34 <inc_share+0x20>
		 && Files[i].clu == dp->obj.sclust
 8002e24:	6866      	ldr	r6, [r4, #4]
 8002e26:	6885      	ldr	r5, [r0, #8]
 8002e28:	42ae      	cmp	r6, r5
 8002e2a:	d103      	bne.n	8002e34 <inc_share+0x20>
		 && Files[i].ofs == dp->dptr) break;
 8002e2c:	68a6      	ldr	r6, [r4, #8]
 8002e2e:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8002e30:	42ae      	cmp	r6, r5
 8002e32:	d015      	beq.n	8002e60 <inc_share+0x4c>
	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 8002e34:	3301      	adds	r3, #1
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	f104 0410 	add.w	r4, r4, #16
 8002e3c:	d1ef      	bne.n	8002e1e <inc_share+0xa>
 8002e3e:	2300      	movs	r3, #0
	}

	if (i == FF_FS_LOCK) {			/* Not opened. Register it as new. */
		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 8002e40:	011e      	lsls	r6, r3, #4
 8002e42:	5995      	ldr	r5, [r2, r6]
 8002e44:	eb02 1403 	add.w	r4, r2, r3, lsl #4
 8002e48:	b9c5      	cbnz	r5, 8002e7c <inc_share+0x68>
		if (i == FF_FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8002e4a:	5197      	str	r7, [r2, r6]
		Files[i].clu = dp->obj.sclust;
 8002e4c:	6886      	ldr	r6, [r0, #8]
		Files[i].ofs = dp->dptr;
 8002e4e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
		Files[i].ctr = 0;
	}

	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002e50:	2901      	cmp	r1, #1
		Files[i].ctr = 0;
 8002e52:	e9c4 0502 	strd	r0, r5, [r4, #8]
		Files[i].clu = dp->obj.sclust;
 8002e56:	6066      	str	r6, [r4, #4]
	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002e58:	d107      	bne.n	8002e6a <inc_share+0x56>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002e5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e5e:	e008      	b.n	8002e72 <inc_share+0x5e>
	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002e60:	eb02 1003 	add.w	r0, r2, r3, lsl #4
 8002e64:	2901      	cmp	r1, #1
 8002e66:	68c0      	ldr	r0, [r0, #12]
 8002e68:	d00d      	beq.n	8002e86 <inc_share+0x72>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002e6a:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8002e6e:	68c9      	ldr	r1, [r1, #12]
 8002e70:	3101      	adds	r1, #1
 8002e72:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002e76:	60d1      	str	r1, [r2, #12]

	return i + 1;	/* Index number origin from 1 */
 8002e78:	1c58      	adds	r0, r3, #1
}
 8002e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d1de      	bne.n	8002e40 <inc_share+0x2c>
		if (i == FF_FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002e82:	2000      	movs	r0, #0
 8002e84:	e7f9      	b.n	8002e7a <inc_share+0x66>
	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002e86:	2800      	cmp	r0, #0
 8002e88:	d0e7      	beq.n	8002e5a <inc_share+0x46>
 8002e8a:	e7fa      	b.n	8002e82 <inc_share+0x6e>
 8002e8c:	200008cc 	.word	0x200008cc

08002e90 <dec_share>:
{
	UINT n;
	FRESULT res;


	if (--i < FF_FS_LOCK) {	/* Index number origin from 0 */
 8002e90:	3801      	subs	r0, #1
 8002e92:	2803      	cmp	r0, #3
 8002e94:	d814      	bhi.n	8002ec0 <dec_share+0x30>
		n = Files[i].ctr;
 8002e96:	4a0b      	ldr	r2, [pc, #44]	@ (8002ec4 <dec_share+0x34>)
 8002e98:	0101      	lsls	r1, r0, #4
 8002e9a:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8002e9e:	68c3      	ldr	r3, [r0, #12]
		if (n == 0x100) n = 0;	/* If write mode open, delete the object semaphore */
 8002ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ea4:	d104      	bne.n	8002eb0 <dec_share+0x20>
		if (n > 0) n--;			/* Decrement read mode open count */
		Files[i].ctr = n;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60c3      	str	r3, [r0, #12]
		if (n == 0) {			/* Delete the object semaphore if open count becomes zero */
			Files[i].fs = 0;	/* Free the entry <<<If this memory write operation is not in atomic, FF_FS_REENTRANT == 1 and FF_VOLUMES > 1, there is a potential error in this process >>> */
 8002eaa:	2300      	movs	r3, #0
 8002eac:	5053      	str	r3, [r2, r1]
 8002eae:	e005      	b.n	8002ebc <dec_share+0x2c>
		if (n > 0) n--;			/* Decrement read mode open count */
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0fa      	beq.n	8002eaa <dec_share+0x1a>
 8002eb4:	3b01      	subs	r3, #1
		Files[i].ctr = n;
 8002eb6:	60c3      	str	r3, [r0, #12]
		if (n == 0) {			/* Delete the object semaphore if open count becomes zero */
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f6      	beq.n	8002eaa <dec_share+0x1a>
		}
		res = FR_OK;
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;		/* Invalid index number */
 8002ec0:	2002      	movs	r0, #2
	}
	return res;
}
 8002ec2:	4770      	bx	lr
 8002ec4:	200008cc 	.word	0x200008cc

08002ec8 <clear_share>:


static void clear_share (	/* Clear all lock entries of the volume */
	FATFS* fs
)
{
 8002ec8:	2300      	movs	r3, #0
	UINT i;

	for (i = 0; i < FF_FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002eca:	4619      	mov	r1, r3
{
 8002ecc:	b510      	push	{r4, lr}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002ece:	4a05      	ldr	r2, [pc, #20]	@ (8002ee4 <clear_share+0x1c>)
 8002ed0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002ed4:	4284      	cmp	r4, r0
 8002ed6:	bf08      	it	eq
 8002ed8:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < FF_FS_LOCK; i++) {
 8002edc:	3304      	adds	r3, #4
 8002ede:	2b10      	cmp	r3, #16
 8002ee0:	d1f6      	bne.n	8002ed0 <clear_share+0x8>
	}
}
 8002ee2:	bd10      	pop	{r4, pc}
 8002ee4:	200008cc 	.word	0x200008cc

08002ee8 <clst2sect>:
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8002ee8:	69c3      	ldr	r3, [r0, #28]
	clst -= 2;		/* Cluster number is origin from 2 */
 8002eea:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8002eec:	3b02      	subs	r3, #2
 8002eee:	428b      	cmp	r3, r1
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8002ef0:	bf83      	ittte	hi
 8002ef2:	8943      	ldrhhi	r3, [r0, #10]
 8002ef4:	6b00      	ldrhi	r0, [r0, #48]	@ 0x30
 8002ef6:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8002efa:	2000      	movls	r0, #0
}
 8002efc:	4770      	bx	lr

08002efe <clmt_clust>:

static DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8002efe:	4619      	mov	r1, r3
 8002f00:	b538      	push	{r3, r4, r5, lr}
	DWORD *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8002f02:	6803      	ldr	r3, [r0, #0]
 8002f04:	0a55      	lsrs	r5, r2, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002f06:	6d04      	ldr	r4, [r0, #80]	@ 0x50
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8002f08:	895a      	ldrh	r2, [r3, #10]
 8002f0a:	ea45 50c1 	orr.w	r0, r5, r1, lsl #23
 8002f0e:	2300      	movs	r3, #0
 8002f10:	0a49      	lsrs	r1, r1, #9
 8002f12:	f7fd fe33 	bl	8000b7c <__aeabi_uldivmod>
 8002f16:	4602      	mov	r2, r0
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002f18:	3404      	adds	r4, #4
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002f1a:	6820      	ldr	r0, [r4, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8002f1c:	b130      	cbz	r0, 8002f2c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8002f1e:	4282      	cmp	r2, r0
 8002f20:	d302      	bcc.n	8002f28 <clmt_clust+0x2a>
		cl -= ncl; tbl++;		/* Next fragment */
 8002f22:	1a12      	subs	r2, r2, r0
 8002f24:	3408      	adds	r4, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002f26:	e7f8      	b.n	8002f1a <clmt_clust+0x1c>
	}
	return cl + *tbl;	/* Return the cluster number */
 8002f28:	6860      	ldr	r0, [r4, #4]
 8002f2a:	4410      	add	r0, r2
}
 8002f2c:	bd38      	pop	{r3, r4, r5, pc}

08002f2e <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8002f34:	2000      	movs	r0, #0
	UINT n = 11;

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8002f36:	01c2      	lsls	r2, r0, #7
 8002f38:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
 8002f3c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8002f40:	4402      	add	r2, r0
	} while (--n);
 8002f42:	428b      	cmp	r3, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8002f44:	f002 00ff 	and.w	r0, r2, #255	@ 0xff
	} while (--n);
 8002f48:	d1f5      	bne.n	8002f36 <sum_sfn+0x8>
	return sum;
}
 8002f4a:	4770      	bx	lr

08002f4c <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8002f4c:	b510      	push	{r4, lr}
 8002f4e:	4604      	mov	r4, r0
	UINT i, szblk;
	WORD sum;


	szblk = ((UINT)dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 8002f50:	7841      	ldrb	r1, [r0, #1]
	for (i = sum = 0; i < szblk; i++) {
 8002f52:	2000      	movs	r0, #0
 8002f54:	4602      	mov	r2, r0
	szblk = ((UINT)dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 8002f56:	3101      	adds	r1, #1
 8002f58:	0149      	lsls	r1, r1, #5
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 8002f5a:	2a02      	cmp	r2, #2
			i++;
 8002f5c:	bf0c      	ite	eq
 8002f5e:	2203      	moveq	r2, #3
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8002f60:	5ca3      	ldrbne	r3, [r4, r2]
	for (i = sum = 0; i < szblk; i++) {
 8002f62:	f102 0201 	add.w	r2, r2, #1
 8002f66:	bf1f      	itttt	ne
 8002f68:	eb03 33c0 	addne.w	r3, r3, r0, lsl #15
 8002f6c:	b29b      	uxthne	r3, r3
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8002f6e:	eb03 0350 	addne.w	r3, r3, r0, lsr #1
 8002f72:	b298      	uxthne	r0, r3
	for (i = sum = 0; i < szblk; i++) {
 8002f74:	4291      	cmp	r1, r2
 8002f76:	d8f0      	bhi.n	8002f5a <xdir_sum+0xe>
		}
	}
	return sum;
}
 8002f78:	bd10      	pop	{r4, pc}

08002f7a <get_ldnumber>:
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *vsp;
	char vchr;
#endif

	tt = tp = *path;
 8002f7a:	6802      	ldr	r2, [r0, #0]
{
 8002f7c:	b510      	push	{r4, lr}
 8002f7e:	4604      	mov	r4, r0
	if (!tp) return -1;		/* Invalid path name? */
 8002f80:	b162      	cbz	r2, 8002f9c <get_ldnumber+0x22>
 8002f82:	4611      	mov	r1, r2
	do {					/* Find a colon in the path */
		chr = *tt++;
 8002f84:	f811 3b01 	ldrb.w	r3, [r1], #1
	} while (!IsTerminator(chr) && chr != ':');
 8002f88:	2b1f      	cmp	r3, #31
 8002f8a:	d911      	bls.n	8002fb0 <get_ldnumber+0x36>
 8002f8c:	2b3a      	cmp	r3, #58	@ 0x3a
 8002f8e:	d1f9      	bne.n	8002f84 <get_ldnumber+0xa>

	if (chr == ':') {	/* Is there a DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is it a numeric volume ID + colon? */
 8002f90:	7813      	ldrb	r3, [r2, #0]
 8002f92:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 8002f96:	b2c3      	uxtb	r3, r0
 8002f98:	2b09      	cmp	r3, #9
 8002f9a:	d902      	bls.n	8002fa2 <get_ldnumber+0x28>
	if (!tp) return -1;		/* Invalid path name? */
 8002f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa0:	e005      	b.n	8002fae <get_ldnumber+0x34>
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is it a numeric volume ID + colon? */
 8002fa2:	3202      	adds	r2, #2
 8002fa4:	4291      	cmp	r1, r2
 8002fa6:	d1f9      	bne.n	8002f9c <get_ldnumber+0x22>
					if (IsLower(chr)) chr -= 0x20;
				} while (vchr && (TCHAR)vchr == chr);
			} while ((vchr || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i >= FF_VOLUMES) return -1;	/* Not found or invalid volume ID */
 8002fa8:	2801      	cmp	r0, #1
 8002faa:	dcf7      	bgt.n	8002f9c <get_ldnumber+0x22>
		*path = tt;		/* Snip the drive prefix off */
 8002fac:	6021      	str	r1, [r4, #0]
#if FF_FS_RPATH != 0
	return (int)CurrVol;	/* Default drive is current drive */
#else
	return 0;				/* Default drive is 0 */
#endif
}
 8002fae:	bd10      	pop	{r4, pc}
	return 0;				/* Default drive is 0 */
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	e7fc      	b.n	8002fae <get_ldnumber+0x34>

08002fb4 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8002fb4:	b538      	push	{r3, r4, r5, lr}
 8002fb6:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8002fb8:	4604      	mov	r4, r0
 8002fba:	b918      	cbnz	r0, 8002fc4 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 8002fbc:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	602b      	str	r3, [r5, #0]
	return res;
}
 8002fc2:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8002fc4:	6803      	ldr	r3, [r0, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f8      	beq.n	8002fbc <validate+0x8>
 8002fca:	781a      	ldrb	r2, [r3, #0]
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d0f5      	beq.n	8002fbc <validate+0x8>
 8002fd0:	8881      	ldrh	r1, [r0, #4]
 8002fd2:	88da      	ldrh	r2, [r3, #6]
 8002fd4:	4291      	cmp	r1, r2
 8002fd6:	d1f1      	bne.n	8002fbc <validate+0x8>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
 8002fd8:	7858      	ldrb	r0, [r3, #1]
 8002fda:	f7ff fd61 	bl	8002aa0 <disk_status>
 8002fde:	f010 0001 	ands.w	r0, r0, #1
 8002fe2:	d1eb      	bne.n	8002fbc <validate+0x8>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8002fe4:	6823      	ldr	r3, [r4, #0]
 8002fe6:	e7eb      	b.n	8002fc0 <validate+0xc>

08002fe8 <sync_window>:
{
 8002fe8:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8002fea:	7903      	ldrb	r3, [r0, #4]
{
 8002fec:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8002fee:	b1c3      	cbz	r3, 8003022 <sync_window+0x3a>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8002ff0:	f100 053c 	add.w	r5, r0, #60	@ 0x3c
 8002ff4:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	7840      	ldrb	r0, [r0, #1]
 8002ffc:	f7ff fd73 	bl	8002ae6 <disk_write>
 8003000:	b988      	cbnz	r0, 8003026 <sync_window+0x3e>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8003002:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003004:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003006:	6a22      	ldr	r2, [r4, #32]
 8003008:	1acb      	subs	r3, r1, r3
 800300a:	4293      	cmp	r3, r2
			fs->wflag = 0;	/* Clear window dirty flag */
 800300c:	7120      	strb	r0, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800300e:	d208      	bcs.n	8003022 <sync_window+0x3a>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8003010:	78e3      	ldrb	r3, [r4, #3]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d105      	bne.n	8003022 <sync_window+0x3a>
 8003016:	440a      	add	r2, r1
 8003018:	2301      	movs	r3, #1
 800301a:	4629      	mov	r1, r5
 800301c:	7860      	ldrb	r0, [r4, #1]
 800301e:	f7ff fd62 	bl	8002ae6 <disk_write>
	FRESULT res = FR_OK;
 8003022:	2000      	movs	r0, #0
}
 8003024:	bd38      	pop	{r3, r4, r5, pc}
			res = FR_DISK_ERR;
 8003026:	2001      	movs	r0, #1
 8003028:	e7fc      	b.n	8003024 <sync_window+0x3c>

0800302a <put_utf>:
{
 800302a:	b538      	push	{r3, r4, r5, lr}
 800302c:	460d      	mov	r5, r1
	wc = ff_uni2oem(chr, CODEPAGE);
 800302e:	f240 11b5 	movw	r1, #437	@ 0x1b5
{
 8003032:	4614      	mov	r4, r2
	wc = ff_uni2oem(chr, CODEPAGE);
 8003034:	f002 ffc0 	bl	8005fb8 <ff_uni2oem>
	if (wc >= 0x100) {	/* Is this a DBC? */
 8003038:	28ff      	cmp	r0, #255	@ 0xff
 800303a:	d907      	bls.n	800304c <put_utf+0x22>
		if (szb < 2) return 0;
 800303c:	2c01      	cmp	r4, #1
 800303e:	d90b      	bls.n	8003058 <put_utf+0x2e>
		return 2;
 8003040:	2402      	movs	r4, #2
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 8003042:	0a03      	lsrs	r3, r0, #8
 8003044:	702b      	strb	r3, [r5, #0]
		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 8003046:	7068      	strb	r0, [r5, #1]
}
 8003048:	4620      	mov	r0, r4
 800304a:	bd38      	pop	{r3, r4, r5, pc}
	if (wc == 0 || szb < 1) return 0;	/* Invalid character or buffer overflow? */
 800304c:	b130      	cbz	r0, 800305c <put_utf+0x32>
 800304e:	2c00      	cmp	r4, #0
 8003050:	d0fa      	beq.n	8003048 <put_utf+0x1e>
	return 1;
 8003052:	2401      	movs	r4, #1
	*buf++ = (TCHAR)wc;					/* Store the character */
 8003054:	7028      	strb	r0, [r5, #0]
	return 1;
 8003056:	e7f7      	b.n	8003048 <put_utf+0x1e>
		if (szb < 2) return 0;
 8003058:	2400      	movs	r4, #0
 800305a:	e7f5      	b.n	8003048 <put_utf+0x1e>
 800305c:	4604      	mov	r4, r0
 800305e:	e7f3      	b.n	8003048 <put_utf+0x1e>

08003060 <get_fileinfo>:
{
 8003060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	fno->fname[0] = 0;			/* Invaidate file info */
 8003064:	2500      	movs	r5, #0
	FATFS *fs = dp->obj.fs;
 8003066:	6807      	ldr	r7, [r0, #0]
	fno->fname[0] = 0;			/* Invaidate file info */
 8003068:	768d      	strb	r5, [r1, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 800306a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
{
 800306c:	4606      	mov	r6, r0
 800306e:	460c      	mov	r4, r1
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8003070:	2b00      	cmp	r3, #0
 8003072:	d047      	beq.n	8003104 <get_fileinfo+0xa4>
	if (fs->fs_type == FS_EXFAT) {	/* exFAT volume */
 8003074:	783b      	ldrb	r3, [r7, #0]
 8003076:	2b04      	cmp	r3, #4
 8003078:	d149      	bne.n	800310e <get_fileinfo+0xae>
		hs = 0;
 800307a:	462b      	mov	r3, r5
		si = SZDIRE * 2; di = 0;	/* 1st C1 entry in the entry block */
 800307c:	462e      	mov	r6, r5
 800307e:	f04f 0840 	mov.w	r8, #64	@ 0x40
 8003082:	e020      	b.n	80030c6 <get_fileinfo+0x66>
			if (si >= MAXDIRB(FF_MAX_LFN)) {	/* Truncated directory block? */
 8003084:	f1b8 0f7f 	cmp.w	r8, #127	@ 0x7f
 8003088:	d824      	bhi.n	80030d4 <get_fileinfo+0x74>
			if ((si % SZDIRE) == 0) si += 2;	/* Skip entry type field */
 800308a:	f018 0f1f 	tst.w	r8, #31
 800308e:	bf08      	it	eq
 8003090:	f108 0802 	addeq.w	r8, r8, #2
			wc = ld_word(fs->dirbuf + si); si += 2; nc++;	/* Get a character */
 8003094:	f832 0008 	ldrh.w	r0, [r2, r8]
 8003098:	3501      	adds	r5, #1
 800309a:	f108 0802 	add.w	r8, r8, #2
			if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 800309e:	b92b      	cbnz	r3, 80030ac <get_fileinfo+0x4c>
 80030a0:	f500 5220 	add.w	r2, r0, #10240	@ 0x2800
 80030a4:	b292      	uxth	r2, r2
 80030a6:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 80030aa:	d30b      	bcc.n	80030c4 <get_fileinfo+0x64>
			nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 80030ac:	f106 011a 	add.w	r1, r6, #26
 80030b0:	f1c6 02ff 	rsb	r2, r6, #255	@ 0xff
 80030b4:	4421      	add	r1, r4
 80030b6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80030ba:	f7ff ffb6 	bl	800302a <put_utf>
			if (nw == 0) {						/* Buffer overflow or wrong char? */
 80030be:	b148      	cbz	r0, 80030d4 <get_fileinfo+0x74>
			di += nw;
 80030c0:	4406      	add	r6, r0
			hs = 0;
 80030c2:	2000      	movs	r0, #0
 80030c4:	4603      	mov	r3, r0
		while (nc < fs->dirbuf[XDIR_NumName]) {
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	f892 1023 	ldrb.w	r1, [r2, #35]	@ 0x23
 80030cc:	42a9      	cmp	r1, r5
 80030ce:	d8d9      	bhi.n	8003084 <get_fileinfo+0x24>
		if (hs != 0) di = 0;					/* Broken surrogate pair? */
 80030d0:	b903      	cbnz	r3, 80030d4 <get_fileinfo+0x74>
		if (di == 0) fno->fname[di++] = '\?';	/* Inaccessible object name? */
 80030d2:	b916      	cbnz	r6, 80030da <get_fileinfo+0x7a>
 80030d4:	233f      	movs	r3, #63	@ 0x3f
 80030d6:	2601      	movs	r6, #1
 80030d8:	76a3      	strb	r3, [r4, #26]
		fno->fname[di] = 0;						/* Terminate the name */
 80030da:	2300      	movs	r3, #0
 80030dc:	4426      	add	r6, r4
 80030de:	76b3      	strb	r3, [r6, #26]
		fno->altname[0] = 0;					/* exFAT does not support SFN */
 80030e0:	7363      	strb	r3, [r4, #13]
		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	7913      	ldrb	r3, [r2, #4]
 80030e6:	f003 0137 	and.w	r1, r3, #55	@ 0x37
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 80030ea:	06db      	lsls	r3, r3, #27
		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
 80030ec:	7321      	strb	r1, [r4, #12]
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 80030ee:	d40b      	bmi.n	8003108 <get_fileinfo+0xa8>
 80030f0:	f102 0038 	add.w	r0, r2, #56	@ 0x38
 80030f4:	f7ff fe44 	bl	8002d80 <ld_qword>
 80030f8:	e9c4 0100 	strd	r0, r1, [r4]
		fno->ftime = ld_word(fs->dirbuf + XDIR_ModTime + 0);	/* Time */
 80030fc:	8993      	ldrh	r3, [r2, #12]
 80030fe:	8163      	strh	r3, [r4, #10]
		fno->fdate = ld_word(fs->dirbuf + XDIR_ModTime + 2);	/* Date */
 8003100:	89d3      	ldrh	r3, [r2, #14]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 8003102:	8123      	strh	r3, [r4, #8]
}
 8003104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 8003108:	2000      	movs	r0, #0
 800310a:	4601      	mov	r1, r0
 800310c:	e7f4      	b.n	80030f8 <get_fileinfo+0x98>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800310e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8003110:	3301      	adds	r3, #1
 8003112:	d14d      	bne.n	80031b0 <get_fileinfo+0x150>
		wc = dp->dir[si++];			/* Get a char */
 8003114:	2300      	movs	r3, #0
 8003116:	6bf1      	ldr	r1, [r6, #60]	@ 0x3c
 8003118:	4618      	mov	r0, r3
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 800311a:	262e      	movs	r6, #46	@ 0x2e
 800311c:	1e4d      	subs	r5, r1, #1
		wc = dp->dir[si++];			/* Get a char */
 800311e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003122:	3001      	adds	r0, #1
		if (wc == ' ') continue;	/* Skip padding spaces */
 8003124:	2a20      	cmp	r2, #32
 8003126:	d00c      	beq.n	8003142 <get_fileinfo+0xe2>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 8003128:	2a05      	cmp	r2, #5
 800312a:	bf08      	it	eq
 800312c:	22e5      	moveq	r2, #229	@ 0xe5
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 800312e:	2809      	cmp	r0, #9
 8003130:	d104      	bne.n	800313c <get_fileinfo+0xdc>
 8003132:	2b0b      	cmp	r3, #11
 8003134:	bf9e      	ittt	ls
 8003136:	18e7      	addls	r7, r4, r3
 8003138:	737e      	strbls	r6, [r7, #13]
 800313a:	3301      	addls	r3, #1
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
 800313c:	18e7      	adds	r7, r4, r3
 800313e:	737a      	strb	r2, [r7, #13]
 8003140:	3301      	adds	r3, #1
	while (si < 11) {		/* Get SFN from SFN entry */
 8003142:	280b      	cmp	r0, #11
 8003144:	d1eb      	bne.n	800311e <get_fileinfo+0xbe>
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
 8003146:	2000      	movs	r0, #0
 8003148:	18e2      	adds	r2, r4, r3
 800314a:	7350      	strb	r0, [r2, #13]
	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
 800314c:	7ea2      	ldrb	r2, [r4, #26]
 800314e:	2a00      	cmp	r2, #0
 8003150:	d13a      	bne.n	80031c8 <get_fileinfo+0x168>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccessible */
 8003152:	b383      	cbz	r3, 80031b6 <get_fileinfo+0x156>
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 8003154:	2508      	movs	r5, #8
 8003156:	f104 030c 	add.w	r3, r4, #12
 800315a:	785a      	ldrb	r2, [r3, #1]
 800315c:	1c58      	adds	r0, r3, #1
 800315e:	2a00      	cmp	r2, #0
 8003160:	d141      	bne.n	80031e6 <get_fileinfo+0x186>
 8003162:	1b1b      	subs	r3, r3, r4
 8003164:	3b0c      	subs	r3, #12
 8003166:	e029      	b.n	80031bc <get_fileinfo+0x15c>
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 8003168:	f1b9 0f00 	cmp.w	r9, #0
 800316c:	d105      	bne.n	800317a <get_fileinfo+0x11a>
 800316e:	f500 5320 	add.w	r3, r0, #10240	@ 0x2800
 8003172:	b29b      	uxth	r3, r3
 8003174:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003178:	d30b      	bcc.n	8003192 <get_fileinfo+0x132>
				nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 800317a:	f108 011a 	add.w	r1, r8, #26
 800317e:	f1c8 02ff 	rsb	r2, r8, #255	@ 0xff
 8003182:	4421      	add	r1, r4
 8003184:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8003188:	f7ff ff4f 	bl	800302a <put_utf>
				if (nw == 0) {				/* Buffer overflow or wrong char? */
 800318c:	b140      	cbz	r0, 80031a0 <get_fileinfo+0x140>
				di += nw;
 800318e:	4480      	add	r8, r0
				hs = 0;
 8003190:	2000      	movs	r0, #0
 8003192:	4681      	mov	r9, r0
 8003194:	3502      	adds	r5, #2
			while (fs->lfnbuf[si] != 0) {
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	5b58      	ldrh	r0, [r3, r5]
 800319a:	2800      	cmp	r0, #0
 800319c:	d1e4      	bne.n	8003168 <get_fileinfo+0x108>
 800319e:	4640      	mov	r0, r8
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 80031a0:	f1b9 0f00 	cmp.w	r9, #0
 80031a4:	bf18      	it	ne
 80031a6:	2000      	movne	r0, #0
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 80031a8:	2200      	movs	r2, #0
 80031aa:	1823      	adds	r3, r4, r0
 80031ac:	769a      	strb	r2, [r3, #26]
	while (si < 11) {		/* Get SFN from SFN entry */
 80031ae:	e7b1      	b.n	8003114 <get_fileinfo+0xb4>
			hs = 0;
 80031b0:	46a9      	mov	r9, r5
			si = di = 0;
 80031b2:	46a8      	mov	r8, r5
 80031b4:	e7ef      	b.n	8003196 <get_fileinfo+0x136>
			fno->fname[di++] = '\?';
 80031b6:	233f      	movs	r3, #63	@ 0x3f
 80031b8:	76a3      	strb	r3, [r4, #26]
 80031ba:	2301      	movs	r3, #1
		fno->fname[di] = 0;	/* Terminate the LFN */
 80031bc:	2200      	movs	r2, #0
 80031be:	4423      	add	r3, r4
 80031c0:	769a      	strb	r2, [r3, #26]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
 80031c2:	7b0b      	ldrb	r3, [r1, #12]
 80031c4:	b903      	cbnz	r3, 80031c8 <get_fileinfo+0x168>
 80031c6:	7363      	strb	r3, [r4, #13]
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 80031c8:	7acb      	ldrb	r3, [r1, #11]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 80031ca:	f101 001c 	add.w	r0, r1, #28
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 80031ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031d2:	7323      	strb	r3, [r4, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 80031d4:	f7ff fdd2 	bl	8002d7c <ld_dword>
 80031d8:	2300      	movs	r3, #0
 80031da:	6020      	str	r0, [r4, #0]
 80031dc:	6063      	str	r3, [r4, #4]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 80031de:	8acb      	ldrh	r3, [r1, #22]
 80031e0:	8163      	strh	r3, [r4, #10]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 80031e2:	8b0b      	ldrh	r3, [r1, #24]
 80031e4:	e78d      	b.n	8003102 <get_fileinfo+0xa2>
				if (wc == '.') lcf = NS_EXT;
 80031e6:	2a2e      	cmp	r2, #46	@ 0x2e
 80031e8:	d00a      	beq.n	8003200 <get_fileinfo+0x1a0>
				wc = (WCHAR)fno->altname[si];
 80031ea:	4613      	mov	r3, r2
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 80031ec:	3a41      	subs	r2, #65	@ 0x41
 80031ee:	2a19      	cmp	r2, #25
 80031f0:	d803      	bhi.n	80031fa <get_fileinfo+0x19a>
 80031f2:	7b0a      	ldrb	r2, [r1, #12]
 80031f4:	4215      	tst	r5, r2
 80031f6:	d000      	beq.n	80031fa <get_fileinfo+0x19a>
 80031f8:	3320      	adds	r3, #32
				fno->fname[di] = (TCHAR)wc;
 80031fa:	7343      	strb	r3, [r0, #13]
 80031fc:	4603      	mov	r3, r0
 80031fe:	e7ac      	b.n	800315a <get_fileinfo+0xfa>
				if (wc == '.') lcf = NS_EXT;
 8003200:	2510      	movs	r5, #16
 8003202:	4613      	mov	r3, r2
 8003204:	e7f9      	b.n	80031fa <get_fileinfo+0x19a>

08003206 <xname_sum>:
{
 8003206:	b538      	push	{r3, r4, r5, lr}
 8003208:	4605      	mov	r5, r0
	WORD sum = 0;
 800320a:	2400      	movs	r4, #0
	while ((chr = *name++) != 0) {
 800320c:	f835 0b02 	ldrh.w	r0, [r5], #2
 8003210:	b908      	cbnz	r0, 8003216 <xname_sum+0x10>
}
 8003212:	4620      	mov	r0, r4
 8003214:	bd38      	pop	{r3, r4, r5, pc}
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 8003216:	f002 ff01 	bl	800601c <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800321a:	0862      	lsrs	r2, r4, #1
 800321c:	eb02 32c4 	add.w	r2, r2, r4, lsl #15
 8003220:	b2c3      	uxtb	r3, r0
 8003222:	441a      	add	r2, r3
 8003224:	b292      	uxth	r2, r2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8003226:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800322a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800322e:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 8003232:	b29c      	uxth	r4, r3
 8003234:	e7ea      	b.n	800320c <xname_sum+0x6>

08003236 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 8003236:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800323a:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 800323c:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 800323e:	7803      	ldrb	r3, [r0, #0]
 8003240:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003242:	bf01      	itttt	eq
 8003244:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8003246:	750a      	strbeq	r2, [r1, #20]
 8003248:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 800324a:	754a      	strbeq	r2, [r1, #21]
}
 800324c:	4770      	bx	lr

0800324e <move_window>:
{
 800324e:	b538      	push	{r3, r4, r5, lr}
	if (sect != fs->winsect) {	/* Window offset changed? */
 8003250:	6b83      	ldr	r3, [r0, #56]	@ 0x38
{
 8003252:	4605      	mov	r5, r0
	if (sect != fs->winsect) {	/* Window offset changed? */
 8003254:	428b      	cmp	r3, r1
{
 8003256:	460c      	mov	r4, r1
	if (sect != fs->winsect) {	/* Window offset changed? */
 8003258:	d010      	beq.n	800327c <move_window+0x2e>
		res = sync_window(fs);		/* Flush the window */
 800325a:	f7ff fec5 	bl	8002fe8 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800325e:	b960      	cbnz	r0, 800327a <move_window+0x2c>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8003260:	4622      	mov	r2, r4
 8003262:	2301      	movs	r3, #1
 8003264:	7868      	ldrb	r0, [r5, #1]
 8003266:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
 800326a:	f7ff fc27 	bl	8002abc <disk_read>
				res = FR_DISK_ERR;
 800326e:	2800      	cmp	r0, #0
 8003270:	bf1c      	itt	ne
 8003272:	f04f 34ff 	movne.w	r4, #4294967295
 8003276:	2001      	movne	r0, #1
			fs->winsect = sect;
 8003278:	63ac      	str	r4, [r5, #56]	@ 0x38
}
 800327a:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 800327c:	2000      	movs	r0, #0
 800327e:	e7fc      	b.n	800327a <move_window+0x2c>

08003280 <check_fs>:
{
 8003280:	b538      	push	{r3, r4, r5, lr}
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8003282:	2300      	movs	r3, #0
 8003284:	7103      	strb	r3, [r0, #4]
 8003286:	f04f 33ff 	mov.w	r3, #4294967295
 800328a:	6383      	str	r3, [r0, #56]	@ 0x38
{
 800328c:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800328e:	f7ff ffde 	bl	800324e <move_window>
 8003292:	2800      	cmp	r0, #0
 8003294:	d14b      	bne.n	800332e <check_fs+0xae>
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 8003296:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800329a:	f8b4 523a 	ldrh.w	r5, [r4, #570]	@ 0x23a
 800329e:	429d      	cmp	r5, r3
 80032a0:	d107      	bne.n	80032b2 <check_fs+0x32>
 80032a2:	220b      	movs	r2, #11
 80032a4:	4925      	ldr	r1, [pc, #148]	@ (800333c <check_fs+0xbc>)
 80032a6:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 80032aa:	f008 fe47 	bl	800bf3c <memcmp>
 80032ae:	2800      	cmp	r0, #0
 80032b0:	d03f      	beq.n	8003332 <check_fs+0xb2>
	b = fs->win[BS_JmpBoot];
 80032b2:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 80032b6:	2beb      	cmp	r3, #235	@ 0xeb
 80032b8:	d003      	beq.n	80032c2 <check_fs+0x42>
 80032ba:	3318      	adds	r3, #24
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d82e      	bhi.n	8003320 <check_fs+0xa0>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 80032c2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80032c6:	429d      	cmp	r5, r3
 80032c8:	d106      	bne.n	80032d8 <check_fs+0x58>
 80032ca:	2208      	movs	r2, #8
 80032cc:	491c      	ldr	r1, [pc, #112]	@ (8003340 <check_fs+0xc0>)
 80032ce:	f104 008e 	add.w	r0, r4, #142	@ 0x8e
 80032d2:	f008 fe33 	bl	800bf3c <memcmp>
 80032d6:	b348      	cbz	r0, 800332c <check_fs+0xac>
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 80032d8:	f8b4 3047 	ldrh.w	r3, [r4, #71]	@ 0x47
 80032dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032e0:	d11e      	bne.n	8003320 <check_fs+0xa0>
		b = fs->win[BPB_SecPerClus];
 80032e2:	f894 3049 	ldrb.w	r3, [r4, #73]	@ 0x49
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 80032e6:	b1db      	cbz	r3, 8003320 <check_fs+0xa0>
 80032e8:	1e5a      	subs	r2, r3, #1
 80032ea:	421a      	tst	r2, r3
 80032ec:	d118      	bne.n	8003320 <check_fs+0xa0>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of number of reserved sectors (MNBZ) */
 80032ee:	f8b4 304a 	ldrh.w	r3, [r4, #74]	@ 0x4a
 80032f2:	b1ab      	cbz	r3, 8003320 <check_fs+0xa0>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of number of FATs (1 or 2) */
 80032f4:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 80032f8:	3b01      	subs	r3, #1
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d810      	bhi.n	8003320 <check_fs+0xa0>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir size (MNBZ) */
 80032fe:	f8b4 304d 	ldrh.w	r3, [r4, #77]	@ 0x4d
 8003302:	b16b      	cbz	r3, 8003320 <check_fs+0xa0>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume size (>=128) */
 8003304:	f8b4 304f 	ldrh.w	r3, [r4, #79]	@ 0x4f
 8003308:	2b7f      	cmp	r3, #127	@ 0x7f
 800330a:	d806      	bhi.n	800331a <check_fs+0x9a>
 800330c:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8003310:	f7ff fd34 	bl	8002d7c <ld_dword>
 8003314:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8003318:	d302      	bcc.n	8003320 <check_fs+0xa0>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 800331a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 800331e:	b953      	cbnz	r3, 8003336 <check_fs+0xb6>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (with valid or invalid BS) */
 8003320:	f64a 2055 	movw	r0, #43605	@ 0xaa55
 8003324:	4285      	cmp	r5, r0
 8003326:	bf14      	ite	ne
 8003328:	2003      	movne	r0, #3
 800332a:	2002      	moveq	r0, #2
}
 800332c:	bd38      	pop	{r3, r4, r5, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800332e:	2004      	movs	r0, #4
 8003330:	e7fc      	b.n	800332c <check_fs+0xac>
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 8003332:	2001      	movs	r0, #1
 8003334:	e7fa      	b.n	800332c <check_fs+0xac>
			return 0;	/* It is an FAT32 VBR */
 8003336:	2000      	movs	r0, #0
 8003338:	e7f8      	b.n	800332c <check_fs+0xac>
 800333a:	bf00      	nop
 800333c:	0800ed8c 	.word	0x0800ed8c
 8003340:	0800edbf 	.word	0x0800edbf

08003344 <change_bitmap>:
{
 8003344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 8003348:	f04f 0a01 	mov.w	sl, #1
{
 800334c:	4605      	mov	r5, r0
 800334e:	4617      	mov	r7, r2
 8003350:	4698      	mov	r8, r3
	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8003352:	3902      	subs	r1, #2
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 8003354:	6b46      	ldr	r6, [r0, #52]	@ 0x34
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 8003356:	f001 0407 	and.w	r4, r1, #7
 800335a:	fa0a f404 	lsl.w	r4, sl, r4
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 800335e:	eb06 3611 	add.w	r6, r6, r1, lsr #12
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 8003362:	f3c1 09c8 	ubfx	r9, r1, #3, #9
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 8003366:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8003368:	4631      	mov	r1, r6
 800336a:	4628      	mov	r0, r5
 800336c:	3601      	adds	r6, #1
 800336e:	f7ff ff6e 	bl	800324e <move_window>
 8003372:	b118      	cbz	r0, 800337c <change_bitmap+0x38>
 8003374:	2001      	movs	r0, #1
}
 8003376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800337a:	4699      	mov	r9, r3
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800337c:	eb05 0209 	add.w	r2, r5, r9
 8003380:	f892 303c 	ldrb.w	r3, [r2, #60]	@ 0x3c
 8003384:	4223      	tst	r3, r4
 8003386:	bf14      	ite	ne
 8003388:	2101      	movne	r1, #1
 800338a:	2100      	moveq	r1, #0
 800338c:	4541      	cmp	r1, r8
 800338e:	d014      	beq.n	80033ba <change_bitmap+0x76>
				fs->win[i] ^= bm;	/* Flip the bit */
 8003390:	4063      	eors	r3, r4
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8003392:	3f01      	subs	r7, #1
				fs->win[i] ^= bm;	/* Flip the bit */
 8003394:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
				fs->wflag = 1;
 8003398:	f885 a004 	strb.w	sl, [r5, #4]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800339c:	d0eb      	beq.n	8003376 <change_bitmap+0x32>
			} while (bm <<= 1);		/* Next bit */
 800339e:	0064      	lsls	r4, r4, #1
 80033a0:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 80033a4:	d1ea      	bne.n	800337c <change_bitmap+0x38>
		} while (++i < SS(fs));		/* Next byte */
 80033a6:	f109 0301 	add.w	r3, r9, #1
 80033aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
			bm = 1;
 80033ae:	f04f 0401 	mov.w	r4, #1
		i = 0;
 80033b2:	f04f 0900 	mov.w	r9, #0
		} while (++i < SS(fs));		/* Next byte */
 80033b6:	d1e0      	bne.n	800337a <change_bitmap+0x36>
 80033b8:	e7d6      	b.n	8003368 <change_bitmap+0x24>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 80033ba:	2002      	movs	r0, #2
 80033bc:	e7db      	b.n	8003376 <change_bitmap+0x32>

080033be <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80033be:	2901      	cmp	r1, #1
{
 80033c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c2:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80033c4:	f240 808b 	bls.w	80034de <get_fat+0x120>
	FATFS *fs = obj->fs;
 80033c8:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80033ca:	69f3      	ldr	r3, [r6, #28]
 80033cc:	428b      	cmp	r3, r1
 80033ce:	f240 8086 	bls.w	80034de <get_fat+0x120>
		switch (fs->fs_type) {
 80033d2:	7833      	ldrb	r3, [r6, #0]
 80033d4:	3b01      	subs	r3, #1
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	f200 8081 	bhi.w	80034de <get_fat+0x120>
 80033dc:	e8df f003 	tbb	[pc, r3]
 80033e0:	4a372902 	.word	0x4a372902
			bc = (UINT)clst; bc += bc / 2;
 80033e4:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80033e8:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 80033ea:	4630      	mov	r0, r6
 80033ec:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 80033f0:	f7ff ff2d 	bl	800324e <move_window>
 80033f4:	b110      	cbz	r0, 80033fc <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80033f6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80033fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80033fc:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80033fe:	1c6f      	adds	r7, r5, #1
 8003400:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8003404:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003406:	4630      	mov	r0, r6
 8003408:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800340c:	f895 503c 	ldrb.w	r5, [r5, #60]	@ 0x3c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003410:	f7ff ff1d 	bl	800324e <move_window>
 8003414:	2800      	cmp	r0, #0
 8003416:	d1ee      	bne.n	80033f6 <get_fat+0x38>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8003418:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800341c:	4437      	add	r7, r6
 800341e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8003422:	ea45 2003 	orr.w	r0, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8003426:	07e3      	lsls	r3, r4, #31
 8003428:	bf4c      	ite	mi
 800342a:	0900      	lsrmi	r0, r0, #4
 800342c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8003430:	e7e3      	b.n	80033fa <get_fat+0x3c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003432:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 8003434:	4630      	mov	r0, r6
 8003436:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800343a:	f7ff ff08 	bl	800324e <move_window>
 800343e:	2800      	cmp	r0, #0
 8003440:	d1d9      	bne.n	80033f6 <get_fat+0x38>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8003442:	0064      	lsls	r4, r4, #1
 8003444:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 8003448:	4434      	add	r4, r6
 800344a:	8fa0      	ldrh	r0, [r4, #60]	@ 0x3c
			break;
 800344c:	e7d5      	b.n	80033fa <get_fat+0x3c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800344e:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 8003450:	4630      	mov	r0, r6
 8003452:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8003456:	f7ff fefa 	bl	800324e <move_window>
 800345a:	2800      	cmp	r0, #0
 800345c:	d1cb      	bne.n	80033f6 <get_fat+0x38>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800345e:	00a4      	lsls	r4, r4, #2
 8003460:	f106 003c 	add.w	r0, r6, #60	@ 0x3c
 8003464:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 8003468:	4420      	add	r0, r4
 800346a:	f7ff fc87 	bl	8002d7c <ld_dword>
 800346e:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 8003472:	e7c2      	b.n	80033fa <get_fat+0x3c>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 8003474:	e9d0 3104 	ldrd	r3, r1, [r0, #16]
 8003478:	ea53 0201 	orrs.w	r2, r3, r1
 800347c:	79c5      	ldrb	r5, [r0, #7]
 800347e:	d001      	beq.n	8003484 <get_fat+0xc6>
 8003480:	6882      	ldr	r2, [r0, #8]
 8003482:	b902      	cbnz	r2, 8003486 <get_fat+0xc8>
 8003484:	bb5d      	cbnz	r5, 80034de <get_fat+0x120>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8003486:	6882      	ldr	r2, [r0, #8]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8003488:	2d02      	cmp	r5, #2
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800348a:	8977      	ldrh	r7, [r6, #10]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800348c:	eba4 0202 	sub.w	r2, r4, r2
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8003490:	d10c      	bne.n	80034ac <get_fat+0xee>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 8003492:	3b01      	subs	r3, #1
 8003494:	f141 31ff 	adc.w	r1, r1, #4294967295
 8003498:	0a5b      	lsrs	r3, r3, #9
 800349a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800349e:	fbb3 f3f7 	udiv	r3, r3, r7
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d81b      	bhi.n	80034de <get_fat+0x120>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 80034a6:	d01c      	beq.n	80034e2 <get_fat+0x124>
 80034a8:	1c60      	adds	r0, r4, #1
 80034aa:	e7a6      	b.n	80033fa <get_fat+0x3c>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 80034ac:	2d03      	cmp	r5, #3
 80034ae:	d102      	bne.n	80034b6 <get_fat+0xf8>
 80034b0:	6983      	ldr	r3, [r0, #24]
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d8f8      	bhi.n	80034a8 <get_fat+0xea>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 80034b6:	69c3      	ldr	r3, [r0, #28]
 80034b8:	b99b      	cbnz	r3, 80034e2 <get_fat+0x124>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80034ba:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 80034bc:	4630      	mov	r0, r6
 80034be:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80034c2:	f7ff fec4 	bl	800324e <move_window>
 80034c6:	2800      	cmp	r0, #0
 80034c8:	d195      	bne.n	80033f6 <get_fat+0x38>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 80034ca:	00a0      	lsls	r0, r4, #2
 80034cc:	363c      	adds	r6, #60	@ 0x3c
 80034ce:	f400 70fe 	and.w	r0, r0, #508	@ 0x1fc
 80034d2:	4430      	add	r0, r6
 80034d4:	f7ff fc52 	bl	8002d7c <ld_dword>
 80034d8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80034dc:	e78d      	b.n	80033fa <get_fat+0x3c>
 80034de:	2001      	movs	r0, #1
 80034e0:	e78b      	b.n	80033fa <get_fat+0x3c>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 80034e2:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
	return val;
 80034e6:	e788      	b.n	80033fa <get_fat+0x3c>

080034e8 <dir_sdi>:
{
 80034e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = dp->obj.fs;
 80034ea:	6805      	ldr	r5, [r0, #0]
{
 80034ec:	4606      	mov	r6, r0
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80034ee:	782b      	ldrb	r3, [r5, #0]
{
 80034f0:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	bf0c      	ite	eq
 80034f6:	f04f 5280 	moveq.w	r2, #268435456	@ 0x10000000
 80034fa:	f44f 1200 	movne.w	r2, #2097152	@ 0x200000
 80034fe:	428a      	cmp	r2, r1
 8003500:	d801      	bhi.n	8003506 <dir_sdi+0x1e>
		return FR_INT_ERR;
 8003502:	2002      	movs	r0, #2
}
 8003504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8003506:	06ca      	lsls	r2, r1, #27
 8003508:	d1fb      	bne.n	8003502 <dir_sdi+0x1a>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800350a:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 800350c:	6301      	str	r1, [r0, #48]	@ 0x30
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800350e:	bb12      	cbnz	r2, 8003556 <dir_sdi+0x6e>
 8003510:	2b02      	cmp	r3, #2
 8003512:	d812      	bhi.n	800353a <dir_sdi+0x52>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8003514:	892b      	ldrh	r3, [r5, #8]
 8003516:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 800351a:	d9f2      	bls.n	8003502 <dir_sdi+0x1a>
		dp->sect = fs->dirbase;
 800351c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
	dp->clust = clst;					/* Current cluster# */
 800351e:	e9c6 200d 	strd	r2, r0, [r6, #52]	@ 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 8003522:	2800      	cmp	r0, #0
 8003524:	d0ed      	beq.n	8003502 <dir_sdi+0x1a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003526:	eb00 2054 	add.w	r0, r0, r4, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800352a:	353c      	adds	r5, #60	@ 0x3c
 800352c:	f3c4 0408 	ubfx	r4, r4, #0, #9
 8003530:	4425      	add	r5, r4
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003532:	63b0      	str	r0, [r6, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003534:	63f5      	str	r5, [r6, #60]	@ 0x3c
	return FR_OK;
 8003536:	2000      	movs	r0, #0
 8003538:	e7e4      	b.n	8003504 <dir_sdi+0x1c>
		clst = (DWORD)fs->dirbase;
 800353a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800353c:	71c2      	strb	r2, [r0, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0e8      	beq.n	8003514 <dir_sdi+0x2c>
		while (ofs >= csz) {				/* Follow cluster chain */
 8003542:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003544:	896f      	ldrh	r7, [r5, #10]
 8003546:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8003548:	42bc      	cmp	r4, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800354a:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 800354c:	d205      	bcs.n	800355a <dir_sdi+0x72>
		dp->sect = clst2sect(fs, clst);
 800354e:	4628      	mov	r0, r5
 8003550:	f7ff fcca 	bl	8002ee8 <clst2sect>
 8003554:	e7e3      	b.n	800351e <dir_sdi+0x36>
 8003556:	4613      	mov	r3, r2
 8003558:	e7f3      	b.n	8003542 <dir_sdi+0x5a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800355a:	4630      	mov	r0, r6
 800355c:	f7ff ff2f 	bl	80033be <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003560:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003562:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003564:	d006      	beq.n	8003574 <dir_sdi+0x8c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003566:	2801      	cmp	r0, #1
 8003568:	d9cb      	bls.n	8003502 <dir_sdi+0x1a>
 800356a:	69eb      	ldr	r3, [r5, #28]
 800356c:	4283      	cmp	r3, r0
 800356e:	d9c8      	bls.n	8003502 <dir_sdi+0x1a>
			ofs -= csz;
 8003570:	1be4      	subs	r4, r4, r7
 8003572:	e7e9      	b.n	8003548 <dir_sdi+0x60>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003574:	2001      	movs	r0, #1
 8003576:	e7c5      	b.n	8003504 <dir_sdi+0x1c>

08003578 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003578:	2901      	cmp	r1, #1
{
 800357a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800357e:	4606      	mov	r6, r0
 8003580:	460c      	mov	r4, r1
 8003582:	4615      	mov	r5, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003584:	d908      	bls.n	8003598 <put_fat+0x20>
 8003586:	69c3      	ldr	r3, [r0, #28]
 8003588:	428b      	cmp	r3, r1
 800358a:	d905      	bls.n	8003598 <put_fat+0x20>
		switch (fs->fs_type) {
 800358c:	7803      	ldrb	r3, [r0, #0]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d05e      	beq.n	8003650 <put_fat+0xd8>
 8003592:	d803      	bhi.n	800359c <put_fat+0x24>
 8003594:	2b01      	cmp	r3, #1
 8003596:	d021      	beq.n	80035dc <put_fat+0x64>
	FRESULT res = FR_INT_ERR;
 8003598:	2002      	movs	r0, #2
 800359a:	e04f      	b.n	800363c <put_fat+0xc4>
		switch (fs->fs_type) {
 800359c:	3b03      	subs	r3, #3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d8fa      	bhi.n	8003598 <put_fat+0x20>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80035a2:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80035a4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80035a8:	f7ff fe51 	bl	800324e <move_window>
			if (res != FR_OK) break;
 80035ac:	2800      	cmp	r0, #0
 80035ae:	d145      	bne.n	800363c <put_fat+0xc4>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80035b0:	7832      	ldrb	r2, [r6, #0]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80035b2:	00a4      	lsls	r4, r4, #2
			p = fs->win + bc++ % SS(fs);
 80035b4:	f106 033c 	add.w	r3, r6, #60	@ 0x3c
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80035b8:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80035bc:	2a04      	cmp	r2, #4
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80035be:	4423      	add	r3, r4
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80035c0:	d007      	beq.n	80035d2 <put_fat+0x5a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff fbda 	bl	8002d7c <ld_dword>
 80035c8:	f025 4570 	bic.w	r5, r5, #4026531840	@ 0xf0000000
 80035cc:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 80035d0:	4305      	orrs	r5, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80035d2:	4629      	mov	r1, r5
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff fbd7 	bl	8002d88 <st_dword>
			break;
 80035da:	e02c      	b.n	8003636 <put_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80035dc:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80035e0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80035e2:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80035e6:	f7ff fe32 	bl	800324e <move_window>
			if (res != FR_OK) break;
 80035ea:	bb38      	cbnz	r0, 800363c <put_fat+0xc4>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 80035ec:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 80035f0:	f106 083c 	add.w	r8, r6, #60	@ 0x3c
 80035f4:	f107 0901 	add.w	r9, r7, #1
 80035f8:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 80035fc:	bf1f      	itttt	ne
 80035fe:	f818 2007 	ldrbne.w	r2, [r8, r7]
 8003602:	012b      	lslne	r3, r5, #4
 8003604:	f003 03f0 	andne.w	r3, r3, #240	@ 0xf0
 8003608:	f002 020f 	andne.w	r2, r2, #15
 800360c:	bf14      	ite	ne
 800360e:	4313      	orrne	r3, r2
 8003610:	b2eb      	uxtbeq	r3, r5
 8003612:	f808 3007 	strb.w	r3, [r8, r7]
			fs->wflag = 1;
 8003616:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003618:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 800361a:	4630      	mov	r0, r6
			fs->wflag = 1;
 800361c:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800361e:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8003622:	f7ff fe14 	bl	800324e <move_window>
			if (res != FR_OK) break;
 8003626:	b948      	cbnz	r0, 800363c <put_fat+0xc4>
			p = fs->win + bc % SS(fs);
 8003628:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800362c:	b144      	cbz	r4, 8003640 <put_fat+0xc8>
 800362e:	f3c5 1507 	ubfx	r5, r5, #4, #8
 8003632:	f808 5009 	strb.w	r5, [r8, r9]
			fs->wflag = 1;
 8003636:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003638:	2000      	movs	r0, #0
			fs->wflag = 1;
 800363a:	7133      	strb	r3, [r6, #4]
}
 800363c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8003640:	f818 3009 	ldrb.w	r3, [r8, r9]
 8003644:	f3c5 2503 	ubfx	r5, r5, #8, #4
 8003648:	f023 030f 	bic.w	r3, r3, #15
 800364c:	431d      	orrs	r5, r3
 800364e:	e7f0      	b.n	8003632 <put_fat+0xba>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003650:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8003652:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8003656:	f7ff fdfa 	bl	800324e <move_window>
			if (res != FR_OK) break;
 800365a:	2800      	cmp	r0, #0
 800365c:	d1ee      	bne.n	800363c <put_fat+0xc4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800365e:	0064      	lsls	r4, r4, #1
 8003660:	f106 033c 	add.w	r3, r6, #60	@ 0x3c
 8003664:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 8003668:	551d      	strb	r5, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800366a:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800366c:	f3c5 2507 	ubfx	r5, r5, #8, #8
	*ptr++ = (BYTE)val;
 8003670:	7055      	strb	r5, [r2, #1]
			break;
 8003672:	e7e0      	b.n	8003636 <put_fat+0xbe>

08003674 <fill_last_frag>:
{
 8003674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003676:	4604      	mov	r4, r0
 8003678:	460e      	mov	r6, r1
 800367a:	4617      	mov	r7, r2
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800367c:	69e3      	ldr	r3, [r4, #28]
 800367e:	b90b      	cbnz	r3, 8003684 <fill_last_frag+0x10>
	return FR_OK;
 8003680:	4618      	mov	r0, r3
}
 8003682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8003684:	2b01      	cmp	r3, #1
 8003686:	eba6 0503 	sub.w	r5, r6, r3
 800368a:	bf0c      	ite	eq
 800368c:	463a      	moveq	r2, r7
 800368e:	1caa      	addne	r2, r5, #2
 8003690:	6820      	ldr	r0, [r4, #0]
 8003692:	1c69      	adds	r1, r5, #1
 8003694:	f7ff ff70 	bl	8003578 <put_fat>
		if (res != FR_OK) return res;
 8003698:	2800      	cmp	r0, #0
 800369a:	d1f2      	bne.n	8003682 <fill_last_frag+0xe>
		obj->n_frag--;
 800369c:	69e3      	ldr	r3, [r4, #28]
 800369e:	3b01      	subs	r3, #1
 80036a0:	61e3      	str	r3, [r4, #28]
 80036a2:	e7eb      	b.n	800367c <fill_last_frag+0x8>

080036a4 <fill_first_frag>:
{
 80036a4:	b570      	push	{r4, r5, r6, lr}
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 80036a6:	79c3      	ldrb	r3, [r0, #7]
{
 80036a8:	4604      	mov	r4, r0
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d001      	beq.n	80036b2 <fill_first_frag+0xe>
	return FR_OK;
 80036ae:	2000      	movs	r0, #0
}
 80036b0:	bd70      	pop	{r4, r5, r6, pc}
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80036b2:	6881      	ldr	r1, [r0, #8]
 80036b4:	6983      	ldr	r3, [r0, #24]
 80036b6:	18cd      	adds	r5, r1, r3
 80036b8:	42a9      	cmp	r1, r5
 80036ba:	d102      	bne.n	80036c2 <fill_first_frag+0x1e>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 80036bc:	2300      	movs	r3, #0
 80036be:	71e3      	strb	r3, [r4, #7]
 80036c0:	e7f5      	b.n	80036ae <fill_first_frag+0xa>
			res = put_fat(obj->fs, cl, cl + 1);
 80036c2:	1c4e      	adds	r6, r1, #1
 80036c4:	4632      	mov	r2, r6
 80036c6:	6820      	ldr	r0, [r4, #0]
 80036c8:	f7ff ff56 	bl	8003578 <put_fat>
			if (res != FR_OK) return res;
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d1ef      	bne.n	80036b0 <fill_first_frag+0xc>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80036d0:	4631      	mov	r1, r6
 80036d2:	e7f1      	b.n	80036b8 <fill_first_frag+0x14>

080036d4 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80036d4:	2901      	cmp	r1, #1
{
 80036d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036da:	4606      	mov	r6, r0
 80036dc:	460c      	mov	r4, r1
 80036de:	4617      	mov	r7, r2
	FATFS *fs = obj->fs;
 80036e0:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80036e2:	d802      	bhi.n	80036ea <remove_chain+0x16>
 80036e4:	2002      	movs	r0, #2
}
 80036e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80036ea:	69eb      	ldr	r3, [r5, #28]
 80036ec:	428b      	cmp	r3, r1
 80036ee:	d9f9      	bls.n	80036e4 <remove_chain+0x10>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80036f0:	b97a      	cbnz	r2, 8003712 <remove_chain+0x3e>
{
 80036f2:	46a1      	mov	r9, r4
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80036f4:	4621      	mov	r1, r4
 80036f6:	4630      	mov	r0, r6
 80036f8:	f7ff fe61 	bl	80033be <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 80036fc:	46a0      	mov	r8, r4
 80036fe:	4604      	mov	r4, r0
 8003700:	b9b0      	cbnz	r0, 8003730 <remove_chain+0x5c>
	if (fs->fs_type == FS_EXFAT) {
 8003702:	782b      	ldrb	r3, [r5, #0]
 8003704:	2b04      	cmp	r3, #4
 8003706:	d102      	bne.n	800370e <remove_chain+0x3a>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 8003708:	2f00      	cmp	r7, #0
 800370a:	d144      	bne.n	8003796 <remove_chain+0xc2>
			obj->stat = 0;		/* Change the chain status 'initial' */
 800370c:	71f7      	strb	r7, [r6, #7]
	return FR_OK;
 800370e:	2000      	movs	r0, #0
 8003710:	e7e9      	b.n	80036e6 <remove_chain+0x12>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003712:	782b      	ldrb	r3, [r5, #0]
 8003714:	2b04      	cmp	r3, #4
 8003716:	d102      	bne.n	800371e <remove_chain+0x4a>
 8003718:	79c3      	ldrb	r3, [r0, #7]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d0e9      	beq.n	80036f2 <remove_chain+0x1e>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800371e:	f04f 32ff 	mov.w	r2, #4294967295
 8003722:	4639      	mov	r1, r7
 8003724:	4628      	mov	r0, r5
 8003726:	f7ff ff27 	bl	8003578 <put_fat>
		if (res != FR_OK) return res;
 800372a:	2800      	cmp	r0, #0
 800372c:	d0e1      	beq.n	80036f2 <remove_chain+0x1e>
 800372e:	e7da      	b.n	80036e6 <remove_chain+0x12>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003730:	2801      	cmp	r0, #1
 8003732:	d0d7      	beq.n	80036e4 <remove_chain+0x10>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003734:	1c42      	adds	r2, r0, #1
 8003736:	d101      	bne.n	800373c <remove_chain+0x68>
 8003738:	2001      	movs	r0, #1
 800373a:	e7d4      	b.n	80036e6 <remove_chain+0x12>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800373c:	782b      	ldrb	r3, [r5, #0]
 800373e:	2b04      	cmp	r3, #4
 8003740:	d110      	bne.n	8003764 <remove_chain+0x90>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update allocation information if it is valid */
 8003742:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 8003746:	3a02      	subs	r2, #2
 8003748:	4293      	cmp	r3, r2
 800374a:	d313      	bcc.n	8003774 <remove_chain+0xa0>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800374c:	f108 0201 	add.w	r2, r8, #1
 8003750:	42a2      	cmp	r2, r4
 8003752:	d003      	beq.n	800375c <remove_chain+0x88>
			if (fs->fs_type == FS_EXFAT) {
 8003754:	782b      	ldrb	r3, [r5, #0]
 8003756:	2b04      	cmp	r3, #4
 8003758:	d013      	beq.n	8003782 <remove_chain+0xae>
{
 800375a:	46a1      	mov	r9, r4
	} while (clst < fs->n_fatent);	/* Repeat until the last link */
 800375c:	69eb      	ldr	r3, [r5, #28]
 800375e:	42a3      	cmp	r3, r4
 8003760:	d8c8      	bhi.n	80036f4 <remove_chain+0x20>
 8003762:	e7ce      	b.n	8003702 <remove_chain+0x2e>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003764:	2200      	movs	r2, #0
 8003766:	4641      	mov	r1, r8
 8003768:	4628      	mov	r0, r5
 800376a:	f7ff ff05 	bl	8003578 <put_fat>
			if (res != FR_OK) return res;
 800376e:	2800      	cmp	r0, #0
 8003770:	d0e7      	beq.n	8003742 <remove_chain+0x6e>
 8003772:	e7b8      	b.n	80036e6 <remove_chain+0x12>
			fs->free_clst++;
 8003774:	3301      	adds	r3, #1
 8003776:	61ab      	str	r3, [r5, #24]
			fs->fsi_flag |= 1;
 8003778:	796b      	ldrb	r3, [r5, #5]
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	716b      	strb	r3, [r5, #5]
 8003780:	e7e4      	b.n	800374c <remove_chain+0x78>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8003782:	2300      	movs	r3, #0
 8003784:	4649      	mov	r1, r9
 8003786:	4628      	mov	r0, r5
 8003788:	eba2 0209 	sub.w	r2, r2, r9
 800378c:	f7ff fdda 	bl	8003344 <change_bitmap>
				if (res != FR_OK) return res;
 8003790:	2800      	cmp	r0, #0
 8003792:	d0e2      	beq.n	800375a <remove_chain+0x86>
 8003794:	e7a7      	b.n	80036e6 <remove_chain+0x12>
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 8003796:	79f3      	ldrb	r3, [r6, #7]
 8003798:	b98b      	cbnz	r3, 80037be <remove_chain+0xea>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 800379a:	68b4      	ldr	r4, [r6, #8]
				while (clst != pclst) {
 800379c:	42bc      	cmp	r4, r7
 800379e:	d102      	bne.n	80037a6 <remove_chain+0xd2>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
 80037a0:	2302      	movs	r3, #2
 80037a2:	71f3      	strb	r3, [r6, #7]
 80037a4:	e7b3      	b.n	800370e <remove_chain+0x3a>
					nxt = get_fat(obj, clst);
 80037a6:	4621      	mov	r1, r4
 80037a8:	4630      	mov	r0, r6
 80037aa:	f7ff fe08 	bl	80033be <get_fat>
					if (nxt < 2) return FR_INT_ERR;
 80037ae:	2801      	cmp	r0, #1
 80037b0:	d998      	bls.n	80036e4 <remove_chain+0x10>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 80037b2:	1c43      	adds	r3, r0, #1
 80037b4:	d0c0      	beq.n	8003738 <remove_chain+0x64>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 80037b6:	3401      	adds	r4, #1
 80037b8:	4284      	cmp	r4, r0
 80037ba:	d0ef      	beq.n	800379c <remove_chain+0xc8>
 80037bc:	e7a7      	b.n	800370e <remove_chain+0x3a>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d1a5      	bne.n	800370e <remove_chain+0x3a>
 80037c2:	68b3      	ldr	r3, [r6, #8]
 80037c4:	42bb      	cmp	r3, r7
 80037c6:	d8a2      	bhi.n	800370e <remove_chain+0x3a>
 80037c8:	69b2      	ldr	r2, [r6, #24]
 80037ca:	4413      	add	r3, r2
 80037cc:	42bb      	cmp	r3, r7
 80037ce:	d2e7      	bcs.n	80037a0 <remove_chain+0xcc>
 80037d0:	e79d      	b.n	800370e <remove_chain+0x3a>

080037d2 <dir_clear>:
{
 80037d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d4:	4605      	mov	r5, r0
 80037d6:	460e      	mov	r6, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80037d8:	f7ff fc06 	bl	8002fe8 <sync_window>
 80037dc:	4604      	mov	r4, r0
 80037de:	b9f8      	cbnz	r0, 8003820 <dir_clear+0x4e>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80037e0:	4631      	mov	r1, r6
 80037e2:	4628      	mov	r0, r5
 80037e4:	f7ff fb80 	bl	8002ee8 <clst2sect>
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80037e8:	f105 073c 	add.w	r7, r5, #60	@ 0x3c
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80037ec:	4606      	mov	r6, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
 80037ee:	63a8      	str	r0, [r5, #56]	@ 0x38
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80037f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037f4:	4621      	mov	r1, r4
 80037f6:	4638      	mov	r0, r7
 80037f8:	f008 fbb0 	bl	800bf5c <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80037fc:	896b      	ldrh	r3, [r5, #10]
 80037fe:	429c      	cmp	r4, r3
 8003800:	d304      	bcc.n	800380c <dir_clear+0x3a>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8003802:	8968      	ldrh	r0, [r5, #10]
 8003804:	1b00      	subs	r0, r0, r4
 8003806:	bf18      	it	ne
 8003808:	2001      	movne	r0, #1
}
 800380a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800380c:	2301      	movs	r3, #1
 800380e:	4639      	mov	r1, r7
 8003810:	7868      	ldrb	r0, [r5, #1]
 8003812:	1932      	adds	r2, r6, r4
 8003814:	f7ff f967 	bl	8002ae6 <disk_write>
 8003818:	2800      	cmp	r0, #0
 800381a:	d1f2      	bne.n	8003802 <dir_clear+0x30>
 800381c:	3401      	adds	r4, #1
 800381e:	e7ed      	b.n	80037fc <dir_clear+0x2a>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003820:	2001      	movs	r0, #1
 8003822:	e7f2      	b.n	800380a <dir_clear+0x38>

08003824 <sync_fs>:
{
 8003824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003826:	4604      	mov	r4, r0
	res = sync_window(fs);
 8003828:	f7ff fbde 	bl	8002fe8 <sync_window>
 800382c:	4605      	mov	r5, r0
	if (res == FR_OK) {
 800382e:	2800      	cmp	r0, #0
 8003830:	d146      	bne.n	80038c0 <sync_fs+0x9c>
		if (fs->fsi_flag == 1) {	/* Allocation changed? */
 8003832:	7967      	ldrb	r7, [r4, #5]
 8003834:	2f01      	cmp	r7, #1
 8003836:	d13b      	bne.n	80038b0 <sync_fs+0x8c>
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
 8003838:	7823      	ldrb	r3, [r4, #0]
			fs->fsi_flag = 0;
 800383a:	7160      	strb	r0, [r4, #5]
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
 800383c:	2b03      	cmp	r3, #3
 800383e:	d140      	bne.n	80038c2 <sync_fs+0x9e>
				memset(fs->win, 0, sizeof fs->win);
 8003840:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 8003844:	4601      	mov	r1, r0
 8003846:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800384a:	4630      	mov	r0, r6
 800384c:	f008 fb86 	bl	800bf5c <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8003850:	2352      	movs	r3, #82	@ 0x52
	*ptr++ = (BYTE)val;
 8003852:	2241      	movs	r2, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8003854:	2172      	movs	r1, #114	@ 0x72
 8003856:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
 800385a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
	*ptr++ = (BYTE)val; val >>= 8;
 800385e:	2361      	movs	r3, #97	@ 0x61
	*ptr++ = (BYTE)val;
 8003860:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
	*ptr++ = (BYTE)val; val >>= 8;
 8003864:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
	*ptr++ = (BYTE)val;
 8003868:	f884 3223 	strb.w	r3, [r4, #547]	@ 0x223
	*ptr++ = (BYTE)val; val >>= 8;
 800386c:	f884 1220 	strb.w	r1, [r4, #544]	@ 0x220
	*ptr++ = (BYTE)val; val >>= 8;
 8003870:	f884 1221 	strb.w	r1, [r4, #545]	@ 0x221
	*ptr++ = (BYTE)val; val >>= 8;
 8003874:	f884 2222 	strb.w	r2, [r4, #546]	@ 0x222
				st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8003878:	69a1      	ldr	r1, [r4, #24]
 800387a:	f504 7009 	add.w	r0, r4, #548	@ 0x224
 800387e:	f7ff fa83 	bl	8002d88 <st_dword>
				st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8003882:	6961      	ldr	r1, [r4, #20]
 8003884:	f504 700a 	add.w	r0, r4, #552	@ 0x228
 8003888:	f7ff fa7e 	bl	8002d88 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800388c:	2355      	movs	r3, #85	@ 0x55
 800388e:	f884 3230 	strb.w	r3, [r4, #560]	@ 0x230
	*ptr++ = (BYTE)val;
 8003892:	23aa      	movs	r3, #170	@ 0xaa
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 8003894:	4631      	mov	r1, r6
	*ptr++ = (BYTE)val;
 8003896:	f884 3231 	strb.w	r3, [r4, #561]	@ 0x231
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 800389a:	463b      	mov	r3, r7
 800389c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800389e:	7860      	ldrb	r0, [r4, #1]
 80038a0:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80038a2:	f884 522e 	strb.w	r5, [r4, #558]	@ 0x22e
	*ptr++ = (BYTE)val; val >>= 8;
 80038a6:	f884 522f 	strb.w	r5, [r4, #559]	@ 0x22f
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 80038aa:	63a2      	str	r2, [r4, #56]	@ 0x38
						disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80038ac:	f7ff f91b 	bl	8002ae6 <disk_write>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80038b0:	2200      	movs	r2, #0
 80038b2:	7860      	ldrb	r0, [r4, #1]
 80038b4:	4611      	mov	r1, r2
 80038b6:	f7ff f92b 	bl	8002b10 <disk_ioctl>
 80038ba:	3800      	subs	r0, #0
 80038bc:	bf18      	it	ne
 80038be:	2001      	movne	r0, #1
}
 80038c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else if (fs->fs_type == FS_EXFAT) {	/* exFAT: Update PercInUse field in BPB */
 80038c2:	2b04      	cmp	r3, #4
				if (disk_read(fs->pdrv, fs->win, fs->winsect = fs->volbase, 1) == RES_OK) {	/* Load VBR */
 80038c4:	7860      	ldrb	r0, [r4, #1]
			else if (fs->fs_type == FS_EXFAT) {	/* exFAT: Update PercInUse field in BPB */
 80038c6:	d1f3      	bne.n	80038b0 <sync_fs+0x8c>
				if (disk_read(fs->pdrv, fs->win, fs->winsect = fs->volbase, 1) == RES_OK) {	/* Load VBR */
 80038c8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80038ca:	f104 053c 	add.w	r5, r4, #60	@ 0x3c
 80038ce:	463b      	mov	r3, r7
 80038d0:	4629      	mov	r1, r5
 80038d2:	63a2      	str	r2, [r4, #56]	@ 0x38
 80038d4:	f7ff f8f2 	bl	8002abc <disk_read>
 80038d8:	4603      	mov	r3, r0
 80038da:	2800      	cmp	r0, #0
 80038dc:	d1e8      	bne.n	80038b0 <sync_fs+0x8c>
					BYTE perc_inuse = (fs->free_clst <= fs->n_fatent - 2) ? (BYTE)((QWORD)(fs->n_fatent - 2 - fs->free_clst) * 100 / (fs->n_fatent - 2)) : 0xFF;	/* Precent in use 0-100 or 0xFF(unknown) */
 80038de:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80038e2:	3a02      	subs	r2, #2
 80038e4:	4291      	cmp	r1, r2
 80038e6:	d811      	bhi.n	800390c <sync_fs+0xe8>
 80038e8:	2064      	movs	r0, #100	@ 0x64
 80038ea:	1a51      	subs	r1, r2, r1
 80038ec:	fba1 0100 	umull	r0, r1, r1, r0
 80038f0:	f7fd f944 	bl	8000b7c <__aeabi_uldivmod>
 80038f4:	b2c3      	uxtb	r3, r0
					if (fs->win[BPB_PercInUseEx] != perc_inuse) {	/* Write it back into VBR if needed */
 80038f6:	f894 20ac 	ldrb.w	r2, [r4, #172]	@ 0xac
						disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80038fa:	7860      	ldrb	r0, [r4, #1]
					if (fs->win[BPB_PercInUseEx] != perc_inuse) {	/* Write it back into VBR if needed */
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d0d7      	beq.n	80038b0 <sync_fs+0x8c>
						fs->win[BPB_PercInUseEx] = perc_inuse;
 8003900:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
						disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8003904:	4629      	mov	r1, r5
 8003906:	2301      	movs	r3, #1
 8003908:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800390a:	e7cf      	b.n	80038ac <sync_fs+0x88>
					BYTE perc_inuse = (fs->free_clst <= fs->n_fatent - 2) ? (BYTE)((QWORD)(fs->n_fatent - 2 - fs->free_clst) * 100 / (fs->n_fatent - 2)) : 0xFF;	/* Precent in use 0-100 or 0xFF(unknown) */
 800390c:	23ff      	movs	r3, #255	@ 0xff
 800390e:	e7f2      	b.n	80038f6 <sync_fs+0xd2>

08003910 <mount_volume>:
{
 8003910:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 8003914:	2300      	movs	r3, #0
 8003916:	600b      	str	r3, [r1, #0]
{
 8003918:	460e      	mov	r6, r1
 800391a:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800391c:	f7ff fb2d 	bl	8002f7a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003920:	2800      	cmp	r0, #0
 8003922:	f2c0 81b9 	blt.w	8003c98 <mount_volume+0x388>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8003926:	4b7f      	ldr	r3, [pc, #508]	@ (8003b24 <mount_volume+0x214>)
 8003928:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800392c:	2c00      	cmp	r4, #0
 800392e:	f000 81b5 	beq.w	8003c9c <mount_volume+0x38c>
	*rfs = fs;							/* Return pointer to the filesystem object */
 8003932:	6034      	str	r4, [r6, #0]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8003934:	7823      	ldrb	r3, [r4, #0]
		stat = disk_status(fs->pdrv);
 8003936:	7860      	ldrb	r0, [r4, #1]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8003938:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800393c:	b163      	cbz	r3, 8003958 <mount_volume+0x48>
		stat = disk_status(fs->pdrv);
 800393e:	f7ff f8af 	bl	8002aa0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003942:	07c3      	lsls	r3, r0, #31
 8003944:	d408      	bmi.n	8003958 <mount_volume+0x48>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8003946:	b10d      	cbz	r5, 800394c <mount_volume+0x3c>
 8003948:	0747      	lsls	r7, r0, #29
 800394a:	d403      	bmi.n	8003954 <mount_volume+0x44>
			return FR_OK;				/* The filesystem object is already valid */
 800394c:	2000      	movs	r0, #0
}
 800394e:	b004      	add	sp, #16
 8003950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return FR_WRITE_PROTECTED;
 8003954:	200a      	movs	r0, #10
 8003956:	e7fa      	b.n	800394e <mount_volume+0x3e>
	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8003958:	2300      	movs	r3, #0
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 800395a:	7860      	ldrb	r0, [r4, #1]
	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800395c:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 800395e:	f7ff f8a3 	bl	8002aa8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003962:	07c6      	lsls	r6, r0, #31
 8003964:	f100 819c 	bmi.w	8003ca0 <mount_volume+0x390>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8003968:	b10d      	cbz	r5, 800396e <mount_volume+0x5e>
 800396a:	0741      	lsls	r1, r0, #29
 800396c:	d4f2      	bmi.n	8003954 <mount_volume+0x44>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 800396e:	2100      	movs	r1, #0
 8003970:	4620      	mov	r0, r4
 8003972:	f7ff fc85 	bl	8003280 <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 8003976:	2802      	cmp	r0, #2
 8003978:	f040 8095 	bne.w	8003aa6 <mount_volume+0x196>
 800397c:	466e      	mov	r6, sp
 800397e:	4632      	mov	r2, r6
 8003980:	f204 2302 	addw	r3, r4, #514	@ 0x202
 8003984:	f204 2142 	addw	r1, r4, #578	@ 0x242
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff f9f7 	bl	8002d7c <ld_dword>
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800398e:	3310      	adds	r3, #16
 8003990:	428b      	cmp	r3, r1
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8003992:	f842 0b04 	str.w	r0, [r2], #4
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8003996:	d1f7      	bne.n	8003988 <mount_volume+0x78>
 8003998:	2500      	movs	r5, #0
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800399a:	f856 1b04 	ldr.w	r1, [r6], #4
 800399e:	2900      	cmp	r1, #0
 80039a0:	d078      	beq.n	8003a94 <mount_volume+0x184>
 80039a2:	4620      	mov	r0, r4
 80039a4:	f7ff fc6c 	bl	8003280 <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 80039a8:	2801      	cmp	r0, #1
 80039aa:	d874      	bhi.n	8003a96 <mount_volume+0x186>
	if (fmt == 1) {
 80039ac:	2801      	cmp	r0, #1
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 80039ae:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
	if (fmt == 1) {
 80039b0:	f040 80be 	bne.w	8003b30 <mount_volume+0x220>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 80039b4:	230b      	movs	r3, #11
 80039b6:	f104 0146 	add.w	r1, r4, #70	@ 0x46
 80039ba:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80039be:	2d00      	cmp	r5, #0
 80039c0:	d176      	bne.n	8003ab0 <mount_volume+0x1a0>
 80039c2:	3301      	adds	r3, #1
 80039c4:	2b40      	cmp	r3, #64	@ 0x40
 80039c6:	d1f8      	bne.n	80039ba <mount_volume+0xaa>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 80039c8:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80039cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039d0:	d16e      	bne.n	8003ab0 <mount_volume+0x1a0>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 80039d2:	f894 30a8 	ldrb.w	r3, [r4, #168]	@ 0xa8
 80039d6:	2b09      	cmp	r3, #9
 80039d8:	d16a      	bne.n	8003ab0 <mount_volume+0x1a0>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 80039da:	f104 0084 	add.w	r0, r4, #132	@ 0x84
 80039de:	f7ff f9cf 	bl	8002d80 <ld_qword>
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
 80039e2:	f04f 33ff 	mov.w	r3, #4294967295
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 80039e6:	1816      	adds	r6, r2, r0
 80039e8:	f141 0100 	adc.w	r1, r1, #0
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
 80039ec:	42b3      	cmp	r3, r6
 80039ee:	eb75 0301 	sbcs.w	r3, r5, r1
 80039f2:	d35d      	bcc.n	8003ab0 <mount_volume+0x1a0>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 80039f4:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 80039f8:	f7ff f9c0 	bl	8002d7c <ld_dword>
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 80039fc:	f894 30aa 	ldrb.w	r3, [r4, #170]	@ 0xaa
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8003a00:	6220      	str	r0, [r4, #32]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8003a02:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8003a04:	70e3      	strb	r3, [r4, #3]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8003a06:	d153      	bne.n	8003ab0 <mount_volume+0x1a0>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8003a08:	f894 00a9 	ldrb.w	r0, [r4, #169]	@ 0xa9
 8003a0c:	4083      	lsls	r3, r0
 8003a0e:	b298      	uxth	r0, r3
 8003a10:	8160      	strh	r0, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
 8003a12:	2800      	cmp	r0, #0
 8003a14:	d04c      	beq.n	8003ab0 <mount_volume+0x1a0>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8003a16:	f104 0098 	add.w	r0, r4, #152	@ 0x98
 8003a1a:	f7ff f9af 	bl	8002d7c <ld_dword>
 8003a1e:	4680      	mov	r8, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8003a20:	4841      	ldr	r0, [pc, #260]	@ (8003b28 <mount_volume+0x218>)
 8003a22:	4580      	cmp	r8, r0
 8003a24:	d844      	bhi.n	8003ab0 <mount_volume+0x1a0>
		fs->n_fatent = nclst + 2;
 8003a26:	f108 0002 	add.w	r0, r8, #2
 8003a2a:	61e0      	str	r0, [r4, #28]
		fs->volbase = bsect;
 8003a2c:	6262      	str	r2, [r4, #36]	@ 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8003a2e:	f104 0094 	add.w	r0, r4, #148	@ 0x94
 8003a32:	f7ff f9a3 	bl	8002d7c <ld_dword>
 8003a36:	1887      	adds	r7, r0, r2
 8003a38:	6327      	str	r7, [r4, #48]	@ 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8003a3a:	f104 008c 	add.w	r0, r4, #140	@ 0x8c
 8003a3e:	f7ff f99d 	bl	8002d7c <ld_dword>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 8003a42:	b29b      	uxth	r3, r3
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8003a44:	4402      	add	r2, r0
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 8003a46:	fb08 f003 	mul.w	r0, r8, r3
 8003a4a:	19c0      	adds	r0, r0, r7
 8003a4c:	eb45 0305 	adc.w	r3, r5, r5
 8003a50:	4286      	cmp	r6, r0
 8003a52:	eb71 0303 	sbcs.w	r3, r1, r3
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8003a56:	62a2      	str	r2, [r4, #40]	@ 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 8003a58:	d32a      	bcc.n	8003ab0 <mount_volume+0x1a0>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8003a5a:	f104 009c 	add.w	r0, r4, #156	@ 0x9c
 8003a5e:	f7ff f98d 	bl	8002d7c <ld_dword>
		so = i = 0;
 8003a62:	462e      	mov	r6, r5
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8003a64:	62e0      	str	r0, [r4, #44]	@ 0x2c
			if (i == 0) {
 8003a66:	b965      	cbnz	r5, 8003a82 <mount_volume+0x172>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 8003a68:	8963      	ldrh	r3, [r4, #10]
 8003a6a:	42b3      	cmp	r3, r6
 8003a6c:	d920      	bls.n	8003ab0 <mount_volume+0x1a0>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 8003a6e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003a70:	4620      	mov	r0, r4
 8003a72:	f7ff fa39 	bl	8002ee8 <clst2sect>
 8003a76:	1981      	adds	r1, r0, r6
 8003a78:	4620      	mov	r0, r4
 8003a7a:	f7ff fbe8 	bl	800324e <move_window>
 8003a7e:	b980      	cbnz	r0, 8003aa2 <mount_volume+0x192>
				so++;
 8003a80:	3601      	adds	r6, #1
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 8003a82:	1963      	adds	r3, r4, r5
 8003a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a88:	2b81      	cmp	r3, #129	@ 0x81
 8003a8a:	d013      	beq.n	8003ab4 <mount_volume+0x1a4>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 8003a8c:	3520      	adds	r5, #32
 8003a8e:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (i == 0) {
 8003a92:	e7e8      	b.n	8003a66 <mount_volume+0x156>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8003a94:	2003      	movs	r0, #3
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8003a96:	3501      	adds	r5, #1
 8003a98:	2d04      	cmp	r5, #4
 8003a9a:	f47f af7e 	bne.w	800399a <mount_volume+0x8a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8003a9e:	2804      	cmp	r0, #4
 8003aa0:	d106      	bne.n	8003ab0 <mount_volume+0x1a0>
 8003aa2:	2001      	movs	r0, #1
 8003aa4:	e753      	b.n	800394e <mount_volume+0x3e>
 8003aa6:	2804      	cmp	r0, #4
 8003aa8:	d0fb      	beq.n	8003aa2 <mount_volume+0x192>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8003aaa:	2801      	cmp	r0, #1
 8003aac:	f67f af7e 	bls.w	80039ac <mount_volume+0x9c>
 8003ab0:	200d      	movs	r0, #13
 8003ab2:	e74c      	b.n	800394e <mount_volume+0x3e>
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
 8003ab4:	f105 0014 	add.w	r0, r5, #20
 8003ab8:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 8003abc:	4430      	add	r0, r6
 8003abe:	f7ff f95d 	bl	8002d7c <ld_dword>
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
 8003ac2:	2801      	cmp	r0, #1
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
 8003ac4:	4605      	mov	r5, r0
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
 8003ac6:	d9f3      	bls.n	8003ab0 <mount_volume+0x1a0>
 8003ac8:	69e3      	ldr	r3, [r4, #28]
 8003aca:	4283      	cmp	r3, r0
 8003acc:	d9f0      	bls.n	8003ab0 <mount_volume+0x1a0>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 8003ace:	8961      	ldrh	r1, [r4, #10]
 8003ad0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003ad2:	1e82      	subs	r2, r0, #2
 8003ad4:	fb02 3301 	mla	r3, r2, r1, r3
 8003ad8:	6363      	str	r3, [r4, #52]	@ 0x34
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 8003ada:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003adc:	4620      	mov	r0, r4
 8003ade:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8003ae2:	f7ff fbb4 	bl	800324e <move_window>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	d1da      	bne.n	8003aa2 <mount_volume+0x192>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 8003aec:	f005 007f 	and.w	r0, r5, #127	@ 0x7f
 8003af0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8003af4:	f7ff f942 	bl	8002d7c <ld_dword>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 8003af8:	1c42      	adds	r2, r0, #1
 8003afa:	d003      	beq.n	8003b04 <mount_volume+0x1f4>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented bitmap? */
 8003afc:	3501      	adds	r5, #1
 8003afe:	42a8      	cmp	r0, r5
 8003b00:	d0eb      	beq.n	8003ada <mount_volume+0x1ca>
 8003b02:	e7d5      	b.n	8003ab0 <mount_volume+0x1a0>
		fmt = FS_EXFAT;			/* FAT sub-type */
 8003b04:	2504      	movs	r5, #4
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 8003b06:	e9c4 0005 	strd	r0, r0, [r4, #20]
		fs->fsi_flag = 0;	/* Enable to sync PercInUse value in VBR */
 8003b0a:	7163      	strb	r3, [r4, #5]
	fs->id = ++Fsid;		/* Volume mount ID */
 8003b0c:	4a07      	ldr	r2, [pc, #28]	@ (8003b2c <mount_volume+0x21c>)
	clear_share(fs);
 8003b0e:	4620      	mov	r0, r4
	fs->id = ++Fsid;		/* Volume mount ID */
 8003b10:	8813      	ldrh	r3, [r2, #0]
	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 8003b12:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8003b14:	3301      	adds	r3, #1
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	80e3      	strh	r3, [r4, #6]
 8003b1a:	8013      	strh	r3, [r2, #0]
	clear_share(fs);
 8003b1c:	f7ff f9d4 	bl	8002ec8 <clear_share>
	return FR_OK;
 8003b20:	e714      	b.n	800394c <mount_volume+0x3c>
 8003b22:	bf00      	nop
 8003b24:	20000910 	.word	0x20000910
 8003b28:	7ffffffd 	.word	0x7ffffffd
 8003b2c:	2000090c 	.word	0x2000090c
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003b30:	f8b4 3047 	ldrh.w	r3, [r4, #71]	@ 0x47
 8003b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b38:	d1ba      	bne.n	8003ab0 <mount_volume+0x1a0>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8003b3a:	f8b4 1052 	ldrh.w	r1, [r4, #82]	@ 0x52
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003b3e:	b921      	cbnz	r1, 8003b4a <mount_volume+0x23a>
 8003b40:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 8003b44:	f7ff f91a 	bl	8002d7c <ld_dword>
 8003b48:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003b4a:	f894 504c 	ldrb.w	r5, [r4, #76]	@ 0x4c
		fs->fsize = fasize;
 8003b4e:	6221      	str	r1, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003b50:	1e6b      	subs	r3, r5, #1
 8003b52:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003b54:	70e5      	strb	r5, [r4, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003b56:	d8ab      	bhi.n	8003ab0 <mount_volume+0x1a0>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8003b58:	f894 8049 	ldrb.w	r8, [r4, #73]	@ 0x49
 8003b5c:	f8a4 800a 	strh.w	r8, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8003b60:	f1b8 0f00 	cmp.w	r8, #0
 8003b64:	d0a4      	beq.n	8003ab0 <mount_volume+0x1a0>
 8003b66:	f108 33ff 	add.w	r3, r8, #4294967295
 8003b6a:	ea13 0f08 	tst.w	r3, r8
 8003b6e:	d19f      	bne.n	8003ab0 <mount_volume+0x1a0>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003b70:	f8b4 704d 	ldrh.w	r7, [r4, #77]	@ 0x4d
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003b74:	073b      	lsls	r3, r7, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003b76:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003b78:	d19a      	bne.n	8003ab0 <mount_volume+0x1a0>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8003b7a:	f8b4 004f 	ldrh.w	r0, [r4, #79]	@ 0x4f
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8003b7e:	b918      	cbnz	r0, 8003b88 <mount_volume+0x278>
 8003b80:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8003b84:	f7ff f8fa 	bl	8002d7c <ld_dword>
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8003b88:	f8b4 304a 	ldrh.w	r3, [r4, #74]	@ 0x4a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d08f      	beq.n	8003ab0 <mount_volume+0x1a0>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003b90:	fb01 fc05 	mul.w	ip, r1, r5
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8003b94:	eb03 1e17 	add.w	lr, r3, r7, lsr #4
 8003b98:	44e6      	add	lr, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8003b9a:	4570      	cmp	r0, lr
 8003b9c:	d388      	bcc.n	8003ab0 <mount_volume+0x1a0>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003b9e:	eba0 050e 	sub.w	r5, r0, lr
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003ba2:	4545      	cmp	r5, r8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003ba4:	fbb5 f6f8 	udiv	r6, r5, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003ba8:	d382      	bcc.n	8003ab0 <mount_volume+0x1a0>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8003baa:	483e      	ldr	r0, [pc, #248]	@ (8003ca4 <mount_volume+0x394>)
 8003bac:	4286      	cmp	r6, r0
 8003bae:	f63f af7f 	bhi.w	8003ab0 <mount_volume+0x1a0>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003bb2:	f64f 70f5 	movw	r0, #65525	@ 0xfff5
 8003bb6:	4286      	cmp	r6, r0
 8003bb8:	d85d      	bhi.n	8003c76 <mount_volume+0x366>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003bba:	f640 75f5 	movw	r5, #4085	@ 0xff5
 8003bbe:	42ae      	cmp	r6, r5
 8003bc0:	bf8c      	ite	hi
 8003bc2:	2502      	movhi	r5, #2
 8003bc4:	2501      	movls	r5, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003bc6:	3602      	adds	r6, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003bc8:	4413      	add	r3, r2
		fs->database = bsect + sysect;					/* Data start sector */
 8003bca:	eb02 000e 	add.w	r0, r2, lr
		if (fmt == FS_FAT32) {
 8003bce:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003bd0:	61e6      	str	r6, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8003bd2:	6262      	str	r2, [r4, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003bd4:	62a3      	str	r3, [r4, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8003bd6:	6320      	str	r0, [r4, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8003bd8:	d14f      	bne.n	8003c7a <mount_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8003bda:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 8003bde:	433b      	orrs	r3, r7
 8003be0:	f47f af66 	bne.w	8003ab0 <mount_volume+0x1a0>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003be4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003be8:	f7ff f8c8 	bl	8002d7c <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8003bec:	00b3      	lsls	r3, r6, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003bee:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8003bf2:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003bf6:	62e0      	str	r0, [r4, #44]	@ 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003bf8:	f4ff af5a 	bcc.w	8003ab0 <mount_volume+0x1a0>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 8003bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003c00:	e9c4 3305 	strd	r3, r3, [r4, #20]
		fs->fsi_flag = 0x80;	/* Disable FSInfo by default */
 8003c04:	2380      	movs	r3, #128	@ 0x80
		if (fmt == FS_FAT32
 8003c06:	2d03      	cmp	r5, #3
		fs->fsi_flag = 0x80;	/* Disable FSInfo by default */
 8003c08:	7163      	strb	r3, [r4, #5]
		if (fmt == FS_FAT32
 8003c0a:	f47f af7f 	bne.w	8003b0c <mount_volume+0x1fc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1	/* FAT32: Enable FSInfo feature only if FSInfo sector is next to VBR */
 8003c0e:	f8b4 306c 	ldrh.w	r3, [r4, #108]	@ 0x6c
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	f47f af7a 	bne.w	8003b0c <mount_volume+0x1fc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003c18:	4620      	mov	r0, r4
 8003c1a:	1c51      	adds	r1, r2, #1
 8003c1c:	f7ff fb17 	bl	800324e <move_window>
 8003c20:	2800      	cmp	r0, #0
 8003c22:	f47f af73 	bne.w	8003b0c <mount_volume+0x1fc>
			fs->fsi_flag = 0;
 8003c26:	7160      	strb	r0, [r4, #5]
			if (   ld_dword(fs->win + FSI_LeadSig) == 0x41615252	/* Load FSInfo data if available */
 8003c28:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 8003c2c:	f7ff f8a6 	bl	8002d7c <ld_dword>
 8003c30:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca8 <mount_volume+0x398>)
 8003c32:	4298      	cmp	r0, r3
 8003c34:	f47f af6a 	bne.w	8003b0c <mount_volume+0x1fc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272
 8003c38:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 8003c3c:	f7ff f89e 	bl	8002d7c <ld_dword>
 8003c40:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
 8003c44:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c48:	3320      	adds	r3, #32
 8003c4a:	4298      	cmp	r0, r3
 8003c4c:	f47f af5e 	bne.w	8003b0c <mount_volume+0x1fc>
				&& ld_dword(fs->win + FSI_TrailSig) == 0xAA550000)
 8003c50:	f204 202e 	addw	r0, r4, #558	@ 0x22e
 8003c54:	f7ff f892 	bl	8002d7c <ld_dword>
 8003c58:	4b14      	ldr	r3, [pc, #80]	@ (8003cac <mount_volume+0x39c>)
 8003c5a:	4298      	cmp	r0, r3
 8003c5c:	f47f af56 	bne.w	8003b0c <mount_volume+0x1fc>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8003c60:	f504 7009 	add.w	r0, r4, #548	@ 0x224
 8003c64:	f7ff f88a 	bl	8002d7c <ld_dword>
 8003c68:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8003c6a:	f504 700a 	add.w	r0, r4, #552	@ 0x228
 8003c6e:	f7ff f885 	bl	8002d7c <ld_dword>
 8003c72:	6160      	str	r0, [r4, #20]
 8003c74:	e74a      	b.n	8003b0c <mount_volume+0x1fc>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8003c76:	2503      	movs	r5, #3
 8003c78:	e7a5      	b.n	8003bc6 <mount_volume+0x2b6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8003c7a:	2f00      	cmp	r7, #0
 8003c7c:	f43f af18 	beq.w	8003ab0 <mount_volume+0x1a0>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003c80:	2d02      	cmp	r5, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003c82:	eb03 000c 	add.w	r0, r3, ip
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8003c86:	ea4f 0346 	mov.w	r3, r6, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003c8a:	bf1e      	ittt	ne
 8003c8c:	199b      	addne	r3, r3, r6
 8003c8e:	f006 0601 	andne.w	r6, r6, #1
 8003c92:	eb06 0353 	addne.w	r3, r6, r3, lsr #1
 8003c96:	e7aa      	b.n	8003bee <mount_volume+0x2de>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003c98:	200b      	movs	r0, #11
 8003c9a:	e658      	b.n	800394e <mount_volume+0x3e>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8003c9c:	200c      	movs	r0, #12
 8003c9e:	e656      	b.n	800394e <mount_volume+0x3e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003ca0:	2003      	movs	r0, #3
 8003ca2:	e654      	b.n	800394e <mount_volume+0x3e>
 8003ca4:	0ffffff5 	.word	0x0ffffff5
 8003ca8:	41615252 	.word	0x41615252
 8003cac:	aa550000 	.word	0xaa550000

08003cb0 <create_chain>:
{
 8003cb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb4:	4606      	mov	r6, r0
	if (clst == 0) {	/* Create a new chain */
 8003cb6:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
 8003cb8:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8003cba:	b949      	cbnz	r1, 8003cd0 <create_chain+0x20>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8003cbc:	696f      	ldr	r7, [r5, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003cbe:	b1c7      	cbz	r7, 8003cf2 <create_chain+0x42>
 8003cc0:	69eb      	ldr	r3, [r5, #28]
 8003cc2:	42bb      	cmp	r3, r7
 8003cc4:	bf98      	it	ls
 8003cc6:	2701      	movls	r7, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8003cc8:	69ab      	ldr	r3, [r5, #24]
 8003cca:	b9a3      	cbnz	r3, 8003cf6 <create_chain+0x46>
 8003ccc:	2400      	movs	r4, #0
 8003cce:	e005      	b.n	8003cdc <create_chain+0x2c>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003cd0:	f7ff fb75 	bl	80033be <get_fat>
		if (cs < 2) return 1;				/* Test for insanity */
 8003cd4:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003cd6:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Test for insanity */
 8003cd8:	d803      	bhi.n	8003ce2 <create_chain+0x32>
 8003cda:	2401      	movs	r4, #1
}
 8003cdc:	4620      	mov	r0, r4
 8003cde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8003ce2:	1c42      	adds	r2, r0, #1
 8003ce4:	f000 80d8 	beq.w	8003e98 <create_chain+0x1e8>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003ce8:	69eb      	ldr	r3, [r5, #28]
 8003cea:	4283      	cmp	r3, r0
 8003cec:	d8f6      	bhi.n	8003cdc <create_chain+0x2c>
 8003cee:	4647      	mov	r7, r8
 8003cf0:	e7ea      	b.n	8003cc8 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003cf2:	2701      	movs	r7, #1
 8003cf4:	e7e8      	b.n	8003cc8 <create_chain+0x18>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8003cf6:	782a      	ldrb	r2, [r5, #0]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8003cf8:	69eb      	ldr	r3, [r5, #28]
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8003cfa:	2a04      	cmp	r2, #4
 8003cfc:	f040 8086 	bne.w	8003e0c <create_chain+0x15c>
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8003d00:	f1a7 0a02 	sub.w	sl, r7, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
 8003d04:	3b02      	subs	r3, #2
 8003d06:	459a      	cmp	sl, r3
 8003d08:	bf28      	it	cs
 8003d0a:	f04f 0a00 	movcs.w	sl, #0
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8003d0e:	f04f 0b01 	mov.w	fp, #1
	scl = val = clst; ctr = 0;
 8003d12:	46d1      	mov	r9, sl
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8003d14:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8003d16:	4628      	mov	r0, r5
 8003d18:	eb01 3119 	add.w	r1, r1, r9, lsr #12
 8003d1c:	f7ff fa97 	bl	800324e <move_window>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	d13b      	bne.n	8003d9c <create_chain+0xec>
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8003d24:	69ea      	ldr	r2, [r5, #28]
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8003d26:	f009 0307 	and.w	r3, r9, #7
 8003d2a:	fa0b f303 	lsl.w	r3, fp, r3
 8003d2e:	f3c9 01c8 	ubfx	r1, r9, #3, #9
 8003d32:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8003d34:	1e90      	subs	r0, r2, #2
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8003d36:	186a      	adds	r2, r5, r1
			bm = 1;
 8003d38:	464c      	mov	r4, r9
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8003d3a:	f892 203c 	ldrb.w	r2, [r2, #60]	@ 0x3c
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8003d3e:	f109 0901 	add.w	r9, r9, #1
 8003d42:	4581      	cmp	r9, r0
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8003d44:	ea02 0203 	and.w	r2, r2, r3
					val = 0; bm = 0; i = SS(fs);
 8003d48:	bf29      	itett	cs
 8003d4a:	2300      	movcs	r3, #0
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8003d4c:	005b      	lslcc	r3, r3, #1
					val = 0; bm = 0; i = SS(fs);
 8003d4e:	4699      	movcs	r9, r3
 8003d50:	f44f 7100 	movcs.w	r1, #512	@ 0x200
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8003d54:	bf38      	it	cc
 8003d56:	b2db      	uxtbcc	r3, r3
				if (bv == 0) {	/* Is it a free cluster? */
 8003d58:	b9b2      	cbnz	r2, 8003d88 <create_chain+0xd8>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8003d5a:	3402      	adds	r4, #2
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8003d5c:	1e63      	subs	r3, r4, #1
 8003d5e:	3303      	adds	r3, #3
 8003d60:	d8bc      	bhi.n	8003cdc <create_chain+0x2c>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8003d62:	2301      	movs	r3, #1
 8003d64:	4621      	mov	r1, r4
 8003d66:	461a      	mov	r2, r3
 8003d68:	4628      	mov	r0, r5
 8003d6a:	f7ff faeb 	bl	8003344 <change_bitmap>
		if (res == FR_INT_ERR) return 1;
 8003d6e:	2802      	cmp	r0, #2
 8003d70:	d0b3      	beq.n	8003cda <create_chain+0x2a>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8003d72:	2801      	cmp	r0, #1
 8003d74:	f000 8090 	beq.w	8003e98 <create_chain+0x1e8>
		if (clst == 0) {							/* Is it a new chain? */
 8003d78:	f1b8 0f00 	cmp.w	r8, #0
 8003d7c:	d113      	bne.n	8003da6 <create_chain+0xf6>
			obj->stat = 2;							/* Set status 'contiguous' */
 8003d7e:	2302      	movs	r3, #2
 8003d80:	71f3      	strb	r3, [r6, #7]
	if (res == FR_OK) {			/* Update allocation information if the function succeeded */
 8003d82:	2800      	cmp	r0, #0
 8003d84:	d1a9      	bne.n	8003cda <create_chain+0x2a>
 8003d86:	e030      	b.n	8003dea <create_chain+0x13a>
				if (val == clst) return 0;	/* All cluster scanned? */
 8003d88:	45ca      	cmp	sl, r9
 8003d8a:	d00a      	beq.n	8003da2 <create_chain+0xf2>
			} while (bm != 0);
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1d2      	bne.n	8003d36 <create_chain+0x86>
		} while (++i < SS(fs));
 8003d90:	3101      	adds	r1, #1
 8003d92:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8003d96:	d2bd      	bcs.n	8003d14 <create_chain+0x64>
			bm = 1;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e7cc      	b.n	8003d36 <create_chain+0x86>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8003d9c:	f04f 34ff 	mov.w	r4, #4294967295
 8003da0:	e7dc      	b.n	8003d5c <create_chain+0xac>
				if (val == clst) return 0;	/* All cluster scanned? */
 8003da2:	2400      	movs	r4, #0
 8003da4:	e7da      	b.n	8003d5c <create_chain+0xac>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8003da6:	79f3      	ldrb	r3, [r6, #7]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d107      	bne.n	8003dbc <create_chain+0x10c>
 8003dac:	1c7b      	adds	r3, r7, #1
 8003dae:	42a3      	cmp	r3, r4
 8003db0:	d0e7      	beq.n	8003d82 <create_chain+0xd2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8003db2:	68b3      	ldr	r3, [r6, #8]
 8003db4:	1afb      	subs	r3, r7, r3
 8003db6:	61b3      	str	r3, [r6, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8003db8:	2303      	movs	r3, #3
 8003dba:	71f3      	strb	r3, [r6, #7]
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8003dbc:	f108 0201 	add.w	r2, r8, #1
 8003dc0:	42a2      	cmp	r2, r4
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8003dc2:	69f3      	ldr	r3, [r6, #28]
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8003dc4:	d105      	bne.n	8003dd2 <create_chain+0x122>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8003dc6:	b113      	cbz	r3, 8003dce <create_chain+0x11e>
 8003dc8:	3301      	adds	r3, #1
 8003dca:	61f3      	str	r3, [r6, #28]
 8003dcc:	e7d9      	b.n	8003d82 <create_chain+0xd2>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e7fb      	b.n	8003dca <create_chain+0x11a>
				if (obj->n_frag == 0) obj->n_frag = 1;
 8003dd2:	b90b      	cbnz	r3, 8003dd8 <create_chain+0x128>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	61f3      	str	r3, [r6, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8003dd8:	4622      	mov	r2, r4
 8003dda:	4641      	mov	r1, r8
 8003ddc:	4630      	mov	r0, r6
 8003dde:	f7ff fc49 	bl	8003674 <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
 8003de2:	2800      	cmp	r0, #0
 8003de4:	d155      	bne.n	8003e92 <create_chain+0x1e2>
 8003de6:	2301      	movs	r3, #1
 8003de8:	61f3      	str	r3, [r6, #28]
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
 8003dea:	69ab      	ldr	r3, [r5, #24]
		fs->last_clst = ncl;
 8003dec:	616c      	str	r4, [r5, #20]
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f43f af74 	beq.w	8003cdc <create_chain+0x2c>
 8003df4:	69ea      	ldr	r2, [r5, #28]
 8003df6:	3a02      	subs	r2, #2
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	f63f af6f 	bhi.w	8003cdc <create_chain+0x2c>
			fs->free_clst--;
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	61ab      	str	r3, [r5, #24]
			fs->fsi_flag |= 1;
 8003e02:	796b      	ldrb	r3, [r5, #5]
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	716b      	strb	r3, [r5, #5]
 8003e0a:	e767      	b.n	8003cdc <create_chain+0x2c>
		if (scl == clst) {						/* Stretching an existing chain? */
 8003e0c:	4547      	cmp	r7, r8
 8003e0e:	d115      	bne.n	8003e3c <create_chain+0x18c>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8003e10:	1c7c      	adds	r4, r7, #1
			if (ncl >= fs->n_fatent) ncl = 2;
 8003e12:	42a3      	cmp	r3, r4
 8003e14:	bf98      	it	ls
 8003e16:	2402      	movls	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8003e18:	4630      	mov	r0, r6
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	f7ff facf 	bl	80033be <get_fat>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8003e20:	2801      	cmp	r0, #1
 8003e22:	f43f af5a 	beq.w	8003cda <create_chain+0x2a>
 8003e26:	1c43      	adds	r3, r0, #1
 8003e28:	d036      	beq.n	8003e98 <create_chain+0x1e8>
			if (cs != 0) {						/* Not free? */
 8003e2a:	b1f8      	cbz	r0, 8003e6c <create_chain+0x1bc>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8003e2c:	f8d5 9014 	ldr.w	r9, [r5, #20]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8003e30:	f1b9 0f01 	cmp.w	r9, #1
 8003e34:	d902      	bls.n	8003e3c <create_chain+0x18c>
 8003e36:	69eb      	ldr	r3, [r5, #28]
 8003e38:	454b      	cmp	r3, r9
 8003e3a:	d800      	bhi.n	8003e3e <create_chain+0x18e>
			if (ncl >= fs->n_fatent) ncl = 2;
 8003e3c:	46b9      	mov	r9, r7
 8003e3e:	464c      	mov	r4, r9
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003e40:	69eb      	ldr	r3, [r5, #28]
				ncl++;							/* Next cluster */
 8003e42:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003e44:	42a3      	cmp	r3, r4
 8003e46:	d804      	bhi.n	8003e52 <create_chain+0x1a2>
					if (ncl > scl) return 0;	/* No free cluster found? */
 8003e48:	f1b9 0f01 	cmp.w	r9, #1
 8003e4c:	f43f af3e 	beq.w	8003ccc <create_chain+0x1c>
					ncl = 2;
 8003e50:	2402      	movs	r4, #2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003e52:	4621      	mov	r1, r4
 8003e54:	4630      	mov	r0, r6
 8003e56:	f7ff fab2 	bl	80033be <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
 8003e5a:	b148      	cbz	r0, 8003e70 <create_chain+0x1c0>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8003e5c:	2801      	cmp	r0, #1
 8003e5e:	f43f af3c 	beq.w	8003cda <create_chain+0x2a>
 8003e62:	3001      	adds	r0, #1
 8003e64:	d018      	beq.n	8003e98 <create_chain+0x1e8>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8003e66:	454c      	cmp	r4, r9
 8003e68:	d1ea      	bne.n	8003e40 <create_chain+0x190>
 8003e6a:	e72f      	b.n	8003ccc <create_chain+0x1c>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8003e6c:	2c00      	cmp	r4, #0
 8003e6e:	d0e5      	beq.n	8003e3c <create_chain+0x18c>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8003e70:	f04f 32ff 	mov.w	r2, #4294967295
 8003e74:	4621      	mov	r1, r4
 8003e76:	4628      	mov	r0, r5
 8003e78:	f7ff fb7e 	bl	8003578 <put_fat>
		if (res == FR_OK && clst != 0) {
 8003e7c:	b948      	cbnz	r0, 8003e92 <create_chain+0x1e2>
 8003e7e:	f1b8 0f00 	cmp.w	r8, #0
 8003e82:	d0b2      	beq.n	8003dea <create_chain+0x13a>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8003e84:	4622      	mov	r2, r4
 8003e86:	4641      	mov	r1, r8
 8003e88:	4628      	mov	r0, r5
 8003e8a:	f7ff fb75 	bl	8003578 <put_fat>
	if (res == FR_OK) {			/* Update allocation information if the function succeeded */
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	d0ab      	beq.n	8003dea <create_chain+0x13a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003e92:	2801      	cmp	r0, #1
 8003e94:	f47f af21 	bne.w	8003cda <create_chain+0x2a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8003e98:	f04f 34ff 	mov.w	r4, #4294967295
 8003e9c:	e71e      	b.n	8003cdc <create_chain+0x2c>

08003e9e <dir_next>:
{
 8003e9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 8003ea2:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003ea4:	6b07      	ldr	r7, [r0, #48]	@ 0x30
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8003ea6:	7833      	ldrb	r3, [r6, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003ea8:	3720      	adds	r7, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	bf14      	ite	ne
 8003eae:	f44f 1300 	movne.w	r3, #2097152	@ 0x200000
 8003eb2:	f04f 5380 	moveq.w	r3, #268435456	@ 0x10000000
 8003eb6:	42bb      	cmp	r3, r7
 8003eb8:	bf9c      	itt	ls
 8003eba:	2300      	movls	r3, #0
 8003ebc:	6383      	strls	r3, [r0, #56]	@ 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8003ebe:	6b83      	ldr	r3, [r0, #56]	@ 0x38
{
 8003ec0:	4604      	mov	r4, r0
 8003ec2:	4689      	mov	r9, r1
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8003ec4:	b173      	cbz	r3, 8003ee4 <dir_next+0x46>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003ec6:	f3c7 0808 	ubfx	r8, r7, #0, #9
 8003eca:	f1b8 0f00 	cmp.w	r8, #0
 8003ece:	d13c      	bne.n	8003f4a <dir_next+0xac>
		if (dp->clust == 0) {	/* Static table */
 8003ed0:	6b41      	ldr	r1, [r0, #52]	@ 0x34
		dp->sect++;				/* Next sector */
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	6383      	str	r3, [r0, #56]	@ 0x38
		if (dp->clust == 0) {	/* Static table */
 8003ed6:	b941      	cbnz	r1, 8003eea <dir_next+0x4c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003ed8:	8933      	ldrh	r3, [r6, #8]
 8003eda:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 8003ede:	d834      	bhi.n	8003f4a <dir_next+0xac>
				dp->sect = 0; return FR_NO_FILE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	63a3      	str	r3, [r4, #56]	@ 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8003ee4:	2004      	movs	r0, #4
}
 8003ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8003eea:	8973      	ldrh	r3, [r6, #10]
 8003eec:	3b01      	subs	r3, #1
 8003eee:	ea13 2357 	ands.w	r3, r3, r7, lsr #9
 8003ef2:	d12a      	bne.n	8003f4a <dir_next+0xac>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8003ef4:	f7ff fa63 	bl	80033be <get_fat>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8003ef8:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8003efa:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8003efc:	d801      	bhi.n	8003f02 <dir_next+0x64>
 8003efe:	2002      	movs	r0, #2
 8003f00:	e7f1      	b.n	8003ee6 <dir_next+0x48>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003f02:	1c42      	adds	r2, r0, #1
 8003f04:	d101      	bne.n	8003f0a <dir_next+0x6c>
 8003f06:	2001      	movs	r0, #1
 8003f08:	e7ed      	b.n	8003ee6 <dir_next+0x48>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8003f0a:	69f3      	ldr	r3, [r6, #28]
 8003f0c:	4283      	cmp	r3, r0
 8003f0e:	d816      	bhi.n	8003f3e <dir_next+0xa0>
					if (!stretch) {								/* If no stretch, report EOT */
 8003f10:	f1b9 0f00 	cmp.w	r9, #0
 8003f14:	d0e4      	beq.n	8003ee0 <dir_next+0x42>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003f16:	4620      	mov	r0, r4
 8003f18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f1a:	f7ff fec9 	bl	8003cb0 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003f1e:	4605      	mov	r5, r0
 8003f20:	b1c8      	cbz	r0, 8003f56 <dir_next+0xb8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003f22:	2801      	cmp	r0, #1
 8003f24:	d0eb      	beq.n	8003efe <dir_next+0x60>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003f26:	1c43      	adds	r3, r0, #1
 8003f28:	d0ed      	beq.n	8003f06 <dir_next+0x68>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8003f2a:	4601      	mov	r1, r0
 8003f2c:	4630      	mov	r0, r6
 8003f2e:	f7ff fc50 	bl	80037d2 <dir_clear>
 8003f32:	2800      	cmp	r0, #0
 8003f34:	d1e7      	bne.n	8003f06 <dir_next+0x68>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 8003f36:	79e3      	ldrb	r3, [r4, #7]
 8003f38:	f043 0304 	orr.w	r3, r3, #4
 8003f3c:	71e3      	strb	r3, [r4, #7]
				dp->sect = clst2sect(fs, clst);
 8003f3e:	4629      	mov	r1, r5
 8003f40:	4630      	mov	r0, r6
				dp->clust = clst;		/* Initialize data for new cluster */
 8003f42:	6365      	str	r5, [r4, #52]	@ 0x34
				dp->sect = clst2sect(fs, clst);
 8003f44:	f7fe ffd0 	bl	8002ee8 <clst2sect>
 8003f48:	63a0      	str	r0, [r4, #56]	@ 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003f4a:	363c      	adds	r6, #60	@ 0x3c
 8003f4c:	4446      	add	r6, r8
	return FR_OK;
 8003f4e:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 8003f50:	6327      	str	r7, [r4, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003f52:	63e6      	str	r6, [r4, #60]	@ 0x3c
	return FR_OK;
 8003f54:	e7c7      	b.n	8003ee6 <dir_next+0x48>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003f56:	2007      	movs	r0, #7
 8003f58:	e7c5      	b.n	8003ee6 <dir_next+0x48>

08003f5a <dir_alloc>:
{
 8003f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5c:	460e      	mov	r6, r1
	res = dir_sdi(dp, 0);
 8003f5e:	2100      	movs	r1, #0
{
 8003f60:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8003f62:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 8003f64:	f7ff fac0 	bl	80034e8 <dir_sdi>
	if (res == FR_OK) {
 8003f68:	b998      	cbnz	r0, 8003f92 <dir_alloc+0x38>
		n = 0;
 8003f6a:	4605      	mov	r5, r0
			res = move_window(fs, dp->sect);
 8003f6c:	4638      	mov	r0, r7
 8003f6e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003f70:	f7ff f96d 	bl	800324e <move_window>
			if (res != FR_OK) break;
 8003f74:	b968      	cbnz	r0, 8003f92 <dir_alloc+0x38>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 8003f76:	783a      	ldrb	r2, [r7, #0]
 8003f78:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003f7a:	2a04      	cmp	r2, #4
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	d10c      	bne.n	8003f9a <dir_alloc+0x40>
 8003f80:	061b      	lsls	r3, r3, #24
 8003f82:	d50e      	bpl.n	8003fa2 <dir_alloc+0x48>
				n = 0;				/* Not a free entry, restart to search */
 8003f84:	4605      	mov	r5, r0
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8003f86:	2101      	movs	r1, #1
 8003f88:	4620      	mov	r0, r4
 8003f8a:	f7ff ff88 	bl	8003e9e <dir_next>
		} while (res == FR_OK);
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	d0ec      	beq.n	8003f6c <dir_alloc+0x12>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003f92:	2804      	cmp	r0, #4
 8003f94:	bf08      	it	eq
 8003f96:	2007      	moveq	r0, #7
 8003f98:	e006      	b.n	8003fa8 <dir_alloc+0x4e>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 8003f9a:	2be5      	cmp	r3, #229	@ 0xe5
 8003f9c:	d001      	beq.n	8003fa2 <dir_alloc+0x48>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <dir_alloc+0x2a>
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 8003fa2:	3501      	adds	r5, #1
 8003fa4:	42b5      	cmp	r5, r6
 8003fa6:	d1ee      	bne.n	8003f86 <dir_alloc+0x2c>
}
 8003fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003faa <dir_remove>:
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8003faa:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
{
 8003fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8003fae:	1c4b      	adds	r3, r1, #1
{
 8003fb0:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8003fb2:	6805      	ldr	r5, [r0, #0]
	DWORD last = dp->dptr;
 8003fb4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8003fb6:	d11c      	bne.n	8003ff2 <dir_remove+0x48>
			fs->wflag = 1;
 8003fb8:	2701      	movs	r7, #1
			res = move_window(fs, dp->sect);
 8003fba:	4628      	mov	r0, r5
 8003fbc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003fbe:	f7ff f946 	bl	800324e <move_window>
			if (res != FR_OK) break;
 8003fc2:	b990      	cbnz	r0, 8003fea <dir_remove+0x40>
			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8003fc4:	782b      	ldrb	r3, [r5, #0]
				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
 8003fc6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8003fc8:	2b04      	cmp	r3, #4
				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
 8003fca:	bf12      	itee	ne
 8003fcc:	23e5      	movne	r3, #229	@ 0xe5
 8003fce:	7813      	ldrbeq	r3, [r2, #0]
 8003fd0:	f003 037f 	andeq.w	r3, r3, #127	@ 0x7f
 8003fd4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003fd6:	712f      	strb	r7, [r5, #4]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8003fd8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003fda:	42b3      	cmp	r3, r6
 8003fdc:	d20d      	bcs.n	8003ffa <dir_remove+0x50>
			res = dir_next(dp, 0);	/* Next entry */
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	f7ff ff5c 	bl	8003e9e <dir_next>
		} while (res == FR_OK);
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	d0e7      	beq.n	8003fba <dir_remove+0x10>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8003fea:	2804      	cmp	r0, #4
 8003fec:	bf08      	it	eq
 8003fee:	2002      	moveq	r0, #2
 8003ff0:	e003      	b.n	8003ffa <dir_remove+0x50>
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8003ff2:	f7ff fa79 	bl	80034e8 <dir_sdi>
	if (res == FR_OK) {
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	d0de      	beq.n	8003fb8 <dir_remove+0xe>
}
 8003ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ffc <load_xdir>:
{
 8003ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffe:	4604      	mov	r4, r0
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 8004000:	6800      	ldr	r0, [r0, #0]
	res = move_window(dp->obj.fs, dp->sect);
 8004002:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 8004004:	6905      	ldr	r5, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
 8004006:	f7ff f922 	bl	800324e <move_window>
	if (res != FR_OK) return res;
 800400a:	b920      	cbnz	r0, 8004016 <load_xdir+0x1a>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order? */
 800400c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800400e:	781a      	ldrb	r2, [r3, #0]
 8004010:	2a85      	cmp	r2, #133	@ 0x85
 8004012:	d001      	beq.n	8004018 <load_xdir+0x1c>
 8004014:	2002      	movs	r0, #2
}
 8004016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 8004018:	462a      	mov	r2, r5
 800401a:	f103 0120 	add.w	r1, r3, #32
 800401e:	f853 0b04 	ldr.w	r0, [r3], #4
 8004022:	428b      	cmp	r3, r1
 8004024:	f842 0b04 	str.w	r0, [r2], #4
 8004028:	d1f9      	bne.n	800401e <load_xdir+0x22>
	sz_ent = ((UINT)dirb[XDIR_NumSec] + 1) * SZDIRE;	/* Size of this entry block */
 800402a:	786e      	ldrb	r6, [r5, #1]
 800402c:	3601      	adds	r6, #1
 800402e:	0176      	lsls	r6, r6, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;	/* Invalid block size? */
 8004030:	f1a6 0360 	sub.w	r3, r6, #96	@ 0x60
 8004034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004038:	d8ec      	bhi.n	8004014 <load_xdir+0x18>
	res = dir_next(dp, 0);
 800403a:	2100      	movs	r1, #0
 800403c:	4620      	mov	r0, r4
 800403e:	f7ff ff2e 	bl	8003e9e <dir_next>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8004042:	2804      	cmp	r0, #4
 8004044:	d0e6      	beq.n	8004014 <load_xdir+0x18>
	if (res != FR_OK) return res;
 8004046:	2800      	cmp	r0, #0
 8004048:	d1e5      	bne.n	8004016 <load_xdir+0x1a>
	res = move_window(dp->obj.fs, dp->sect);
 800404a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800404c:	6820      	ldr	r0, [r4, #0]
 800404e:	f7ff f8fe 	bl	800324e <move_window>
	if (res != FR_OK) return res;
 8004052:	2800      	cmp	r0, #0
 8004054:	d1df      	bne.n	8004016 <load_xdir+0x1a>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order? */
 8004056:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004058:	781a      	ldrb	r2, [r3, #0]
 800405a:	2ac0      	cmp	r2, #192	@ 0xc0
 800405c:	d1da      	bne.n	8004014 <load_xdir+0x18>
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800405e:	f105 0220 	add.w	r2, r5, #32
 8004062:	f103 0120 	add.w	r1, r3, #32
 8004066:	f853 0b04 	ldr.w	r0, [r3], #4
 800406a:	428b      	cmp	r3, r1
 800406c:	f842 0b04 	str.w	r0, [r2], #4
 8004070:	d1f9      	bne.n	8004066 <load_xdir+0x6a>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;	/* Invalid block size for the name? */
 8004072:	220f      	movs	r2, #15
 8004074:	f895 3023 	ldrb.w	r3, [r5, #35]	@ 0x23
 8004078:	332c      	adds	r3, #44	@ 0x2c
 800407a:	fbb3 f3f2 	udiv	r3, r3, r2
 800407e:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 8004082:	d3c7      	bcc.n	8004014 <load_xdir+0x18>
	i = 2 * SZDIRE;	/* Name offset to load */
 8004084:	2740      	movs	r7, #64	@ 0x40
		res = dir_next(dp, 0);
 8004086:	2100      	movs	r1, #0
 8004088:	4620      	mov	r0, r4
 800408a:	f7ff ff08 	bl	8003e9e <dir_next>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800408e:	2804      	cmp	r0, #4
 8004090:	d0c0      	beq.n	8004014 <load_xdir+0x18>
		if (res != FR_OK) return res;
 8004092:	2800      	cmp	r0, #0
 8004094:	d1bf      	bne.n	8004016 <load_xdir+0x1a>
		res = move_window(dp->obj.fs, dp->sect);
 8004096:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004098:	6820      	ldr	r0, [r4, #0]
 800409a:	f7ff f8d8 	bl	800324e <move_window>
		if (res != FR_OK) return res;
 800409e:	2800      	cmp	r0, #0
 80040a0:	d1b9      	bne.n	8004016 <load_xdir+0x1a>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order? */
 80040a2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80040a4:	781a      	ldrb	r2, [r3, #0]
 80040a6:	2ac1      	cmp	r2, #193	@ 0xc1
 80040a8:	d1b4      	bne.n	8004014 <load_xdir+0x18>
		if (i < MAXDIRB(FF_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);	/* Load name entries only if the object is accessible */
 80040aa:	2f7f      	cmp	r7, #127	@ 0x7f
 80040ac:	d808      	bhi.n	80040c0 <load_xdir+0xc4>
 80040ae:	19ea      	adds	r2, r5, r7
 80040b0:	f103 0120 	add.w	r1, r3, #32
 80040b4:	f853 cb04 	ldr.w	ip, [r3], #4
 80040b8:	428b      	cmp	r3, r1
 80040ba:	f842 cb04 	str.w	ip, [r2], #4
 80040be:	d1f9      	bne.n	80040b4 <load_xdir+0xb8>
	} while ((i += SZDIRE) < sz_ent);
 80040c0:	3720      	adds	r7, #32
 80040c2:	42be      	cmp	r6, r7
 80040c4:	d8df      	bhi.n	8004086 <load_xdir+0x8a>
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 80040c6:	2f80      	cmp	r7, #128	@ 0x80
 80040c8:	d8a5      	bhi.n	8004016 <load_xdir+0x1a>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 80040ca:	4628      	mov	r0, r5
 80040cc:	f7fe ff3e 	bl	8002f4c <xdir_sum>
 80040d0:	886b      	ldrh	r3, [r5, #2]
 80040d2:	1a18      	subs	r0, r3, r0
 80040d4:	bf18      	it	ne
 80040d6:	2001      	movne	r0, #1
 80040d8:	0040      	lsls	r0, r0, #1
 80040da:	e79c      	b.n	8004016 <load_xdir+0x1a>

080040dc <store_xdir>:
{
 80040dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the entry set 85+C0+C1s */
 80040de:	6803      	ldr	r3, [r0, #0]
{
 80040e0:	4605      	mov	r5, r0
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the entry set 85+C0+C1s */
 80040e2:	691c      	ldr	r4, [r3, #16]
		dp->obj.fs->wflag = 1;
 80040e4:	2701      	movs	r7, #1
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));	/* Create check sum */
 80040e6:	4620      	mov	r0, r4
 80040e8:	f7fe ff30 	bl	8002f4c <xdir_sum>
	*ptr++ = (BYTE)val; val >>= 8;
 80040ec:	70a0      	strb	r0, [r4, #2]
 80040ee:	0a00      	lsrs	r0, r0, #8
	*ptr++ = (BYTE)val;
 80040f0:	70e0      	strb	r0, [r4, #3]
	res = dir_sdi(dp, dp->blk_ofs);	/* Top of the entry set */
 80040f2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80040f4:	4628      	mov	r0, r5
	nent = dirb[XDIR_NumSec] + 1;	/* Number of entries */
 80040f6:	7866      	ldrb	r6, [r4, #1]
	res = dir_sdi(dp, dp->blk_ofs);	/* Top of the entry set */
 80040f8:	f7ff f9f6 	bl	80034e8 <dir_sdi>
	while (res == FR_OK) {
 80040fc:	b120      	cbz	r0, 8004108 <store_xdir+0x2c>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 80040fe:	2802      	cmp	r0, #2
 8004100:	bf28      	it	cs
 8004102:	2002      	movcs	r0, #2
}
 8004104:	b2c0      	uxtb	r0, r0
 8004106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		res = move_window(dp->obj.fs, dp->sect);
 8004108:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 800410a:	6828      	ldr	r0, [r5, #0]
 800410c:	f7ff f89f 	bl	800324e <move_window>
		if (res != FR_OK) break;
 8004110:	2800      	cmp	r0, #0
 8004112:	d1f4      	bne.n	80040fe <store_xdir+0x22>
		memcpy(dp->dir, dirb, SZDIRE);
 8004114:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8004116:	f104 0220 	add.w	r2, r4, #32
 800411a:	f854 1b04 	ldr.w	r1, [r4], #4
 800411e:	4294      	cmp	r4, r2
 8004120:	f843 1b04 	str.w	r1, [r3], #4
 8004124:	d1f9      	bne.n	800411a <store_xdir+0x3e>
		dp->obj.fs->wflag = 1;
 8004126:	682b      	ldr	r3, [r5, #0]
 8004128:	711f      	strb	r7, [r3, #4]
		if (--nent == 0) break;	/* All done? */
 800412a:	2e00      	cmp	r6, #0
 800412c:	d0e7      	beq.n	80040fe <store_xdir+0x22>
		res = dir_next(dp, 0);	/* Next entry */
 800412e:	2100      	movs	r1, #0
 8004130:	4628      	mov	r0, r5
 8004132:	f7ff feb4 	bl	8003e9e <dir_next>
 8004136:	3e01      	subs	r6, #1
 8004138:	e7e0      	b.n	80040fc <store_xdir+0x20>
	...

0800413c <dir_read.constprop.0>:
static FRESULT dir_read (
 800413c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BYTE ord = 0xFF, sum = 0xFF;
 8004140:	27ff      	movs	r7, #255	@ 0xff
static FRESULT dir_read (
 8004142:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8004144:	6806      	ldr	r6, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 8004146:	463d      	mov	r5, r7
	FRESULT res = FR_NO_FILE;
 8004148:	2004      	movs	r0, #4
	while (dp->sect) {
 800414a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800414c:	b911      	cbnz	r1, 8004154 <dir_read.constprop.0+0x18>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800414e:	b1d8      	cbz	r0, 8004188 <dir_read.constprop.0+0x4c>
 8004150:	2004      	movs	r0, #4
 8004152:	e062      	b.n	800421a <dir_read.constprop.0+0xde>
		res = move_window(fs, dp->sect);
 8004154:	4630      	mov	r0, r6
 8004156:	f7ff f87a 	bl	800324e <move_window>
		if (res != FR_OK) break;
 800415a:	2800      	cmp	r0, #0
 800415c:	d15d      	bne.n	800421a <dir_read.constprop.0+0xde>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 800415e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004160:	7803      	ldrb	r3, [r0, #0]
		if (b == 0) {
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0f4      	beq.n	8004150 <dir_read.constprop.0+0x14>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8004166:	7832      	ldrb	r2, [r6, #0]
 8004168:	2a04      	cmp	r2, #4
 800416a:	d110      	bne.n	800418e <dir_read.constprop.0+0x52>
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 800416c:	2b85      	cmp	r3, #133	@ 0x85
 800416e:	d14e      	bne.n	800420e <dir_read.constprop.0+0xd2>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8004170:	6b23      	ldr	r3, [r4, #48]	@ 0x30
					res = load_xdir(dp);	/* Load the entry block */
 8004172:	4620      	mov	r0, r4
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8004174:	64e3      	str	r3, [r4, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8004176:	f7ff ff41 	bl	8003ffc <load_xdir>
					if (res == FR_OK) {
 800417a:	2800      	cmp	r0, #0
 800417c:	d14d      	bne.n	800421a <dir_read.constprop.0+0xde>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800417e:	6933      	ldr	r3, [r6, #16]
 8004180:	791b      	ldrb	r3, [r3, #4]
 8004182:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004186:	71a3      	strb	r3, [r4, #6]
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8004188:	2000      	movs	r0, #0
}
 800418a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800418e:	7ac2      	ldrb	r2, [r0, #11]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8004190:	2be5      	cmp	r3, #229	@ 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8004192:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8004196:	71a2      	strb	r2, [r4, #6]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8004198:	d044      	beq.n	8004224 <dir_read.constprop.0+0xe8>
 800419a:	2b2e      	cmp	r3, #46	@ 0x2e
 800419c:	d042      	beq.n	8004224 <dir_read.constprop.0+0xe8>
 800419e:	f022 0120 	bic.w	r1, r2, #32
 80041a2:	2908      	cmp	r1, #8
 80041a4:	d03e      	beq.n	8004224 <dir_read.constprop.0+0xe8>
				if (attr == AM_LFN) {	/* An LFN entry is found */
 80041a6:	2a0f      	cmp	r2, #15
 80041a8:	d141      	bne.n	800422e <dir_read.constprop.0+0xf2>
					if (b & LLEF) {		/* Is it start of an LFN sequence? */
 80041aa:	0659      	lsls	r1, r3, #25
 80041ac:	d538      	bpl.n	8004220 <dir_read.constprop.0+0xe4>
						b &= (BYTE)~LLEF; ord = b;
 80041ae:	f003 05bf 	and.w	r5, r3, #191	@ 0xbf
						dp->blk_ofs = dp->dptr;
 80041b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
						sum = dp->dir[LDIR_Chksum];
 80041b4:	7b47      	ldrb	r7, [r0, #13]
						dp->blk_ofs = dp->dptr;
 80041b6:	64e3      	str	r3, [r4, #76]	@ 0x4c
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80041b8:	7b43      	ldrb	r3, [r0, #13]
 80041ba:	42bb      	cmp	r3, r7
 80041bc:	d132      	bne.n	8004224 <dir_read.constprop.0+0xe8>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check if LDIR_FstClusLO is 0 */
 80041be:	8b42      	ldrh	r2, [r0, #26]
 80041c0:	bb82      	cbnz	r2, 8004224 <dir_read.constprop.0+0xe8>
	ni = (UINT)((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the name buffer */
 80041c2:	210d      	movs	r1, #13
 80041c4:	7803      	ldrb	r3, [r0, #0]
			if (chr != 0xFFFF) return 0;		/* Check filler */
 80041c6:	f64f 79ff 	movw	r9, #65535	@ 0xffff
	ni = (UINT)((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the name buffer */
 80041ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041ce:	3b01      	subs	r3, #1
 80041d0:	434b      	muls	r3, r1
	for (pchr = 1, di = 0; di < 13; di++) {		/* Process all characters in the entry */
 80041d2:	2101      	movs	r1, #1
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80041d4:	f8d6 e00c 	ldr.w	lr, [r6, #12]
	for (pchr = 1, di = 0; di < 13; di++) {		/* Process all characters in the entry */
 80041d8:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 8004240 <dir_read.constprop.0+0x104>
		chr = ld_word(dir + LfnOfs[di]);		/* Pick a character from the entry */
 80041dc:	f818 cb01 	ldrb.w	ip, [r8], #1
	rv = ptr[1];
 80041e0:	f830 c00c 	ldrh.w	ip, [r0, ip]
		if (pchr != 0) {
 80041e4:	b301      	cbz	r1, 8004228 <dir_read.constprop.0+0xec>
			if (ni >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 80041e6:	2b12      	cmp	r3, #18
 80041e8:	d81c      	bhi.n	8004224 <dir_read.constprop.0+0xe8>
	rv = rv << 8 | ptr[0];
 80041ea:	4661      	mov	r1, ip
			lfnbuf[ni++] = pchr = chr;			/* Store it */
 80041ec:	f82e c013 	strh.w	ip, [lr, r3, lsl #1]
 80041f0:	3301      	adds	r3, #1
	for (pchr = 1, di = 0; di < 13; di++) {		/* Process all characters in the entry */
 80041f2:	3201      	adds	r2, #1
 80041f4:	2a0d      	cmp	r2, #13
 80041f6:	d1f1      	bne.n	80041dc <dir_read.constprop.0+0xa0>
	if (dir[LDIR_Ord] & LLEF && pchr != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 80041f8:	7802      	ldrb	r2, [r0, #0]
 80041fa:	0652      	lsls	r2, r2, #25
 80041fc:	d505      	bpl.n	800420a <dir_read.constprop.0+0xce>
 80041fe:	b121      	cbz	r1, 800420a <dir_read.constprop.0+0xce>
		if (ni >= FF_MAX_LFN + 1) return 0;		/* Buffer overflow? */
 8004200:	2b12      	cmp	r3, #18
 8004202:	d80f      	bhi.n	8004224 <dir_read.constprop.0+0xe8>
		lfnbuf[ni] = 0;
 8004204:	2200      	movs	r2, #0
 8004206:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800420a:	3d01      	subs	r5, #1
 800420c:	b2ed      	uxtb	r5, r5
		res = dir_next(dp, 0);		/* Next entry */
 800420e:	2100      	movs	r1, #0
 8004210:	4620      	mov	r0, r4
 8004212:	f7ff fe44 	bl	8003e9e <dir_next>
		if (res != FR_OK) break;
 8004216:	2800      	cmp	r0, #0
 8004218:	d097      	beq.n	800414a <dir_read.constprop.0+0xe>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800421a:	2300      	movs	r3, #0
 800421c:	63a3      	str	r3, [r4, #56]	@ 0x38
	return res;
 800421e:	e7b4      	b.n	800418a <dir_read.constprop.0+0x4e>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004220:	42ab      	cmp	r3, r5
 8004222:	d0c9      	beq.n	80041b8 <dir_read.constprop.0+0x7c>
				ord = 0xFF;
 8004224:	25ff      	movs	r5, #255	@ 0xff
 8004226:	e7f2      	b.n	800420e <dir_read.constprop.0+0xd2>
			if (chr != 0xFFFF) return 0;		/* Check filler */
 8004228:	45cc      	cmp	ip, r9
 800422a:	d0e2      	beq.n	80041f2 <dir_read.constprop.0+0xb6>
 800422c:	e7fa      	b.n	8004224 <dir_read.constprop.0+0xe8>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800422e:	b91d      	cbnz	r5, 8004238 <dir_read.constprop.0+0xfc>
 8004230:	f7fe fe7d 	bl	8002f2e <sum_sfn>
 8004234:	42b8      	cmp	r0, r7
 8004236:	d0a7      	beq.n	8004188 <dir_read.constprop.0+0x4c>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 8004238:	f04f 33ff 	mov.w	r3, #4294967295
 800423c:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800423e:	e7a3      	b.n	8004188 <dir_read.constprop.0+0x4c>
 8004240:	0800ee88 	.word	0x0800ee88

08004244 <dir_find>:
{
 8004244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004248:	2100      	movs	r1, #0
{
 800424a:	b087      	sub	sp, #28
 800424c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800424e:	f8d0 9000 	ldr.w	r9, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004252:	f7ff f949 	bl	80034e8 <dir_sdi>
	if (res != FR_OK) return res;
 8004256:	4680      	mov	r8, r0
 8004258:	bb10      	cbnz	r0, 80042a0 <dir_find+0x5c>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800425a:	f899 3000 	ldrb.w	r3, [r9]
 800425e:	2b04      	cmp	r3, #4
 8004260:	d13f      	bne.n	80042e2 <dir_find+0x9e>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8004262:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8004266:	f7fe ffce 	bl	8003206 <xname_sum>
 800426a:	4607      	mov	r7, r0
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 800426c:	4620      	mov	r0, r4
 800426e:	f7ff ff65 	bl	800413c <dir_read.constprop.0>
 8004272:	4605      	mov	r5, r0
 8004274:	b108      	cbz	r0, 800427a <dir_find+0x36>
 8004276:	4680      	mov	r8, r0
 8004278:	e012      	b.n	80042a0 <dir_find+0x5c>
			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;		/* Skip comparison if inaccessible object name */
 800427a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800427e:	f893 6023 	ldrb.w	r6, [r3, #35]	@ 0x23
 8004282:	2e12      	cmp	r6, #18
 8004284:	d8f2      	bhi.n	800426c <dir_find+0x28>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8004286:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004288:	42bb      	cmp	r3, r7
 800428a:	d1ef      	bne.n	800426c <dir_find+0x28>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800428c:	f04f 0a40 	mov.w	sl, #64	@ 0x40
 8004290:	42b5      	cmp	r5, r6
 8004292:	d109      	bne.n	80042a8 <dir_find+0x64>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8004294:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004298:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e5      	bne.n	800426c <dir_find+0x28>
}
 80042a0:	4640      	mov	r0, r8
 80042a2:	b007      	add	sp, #28
 80042a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if ((di % SZDIRE) == 0) di += 2;
 80042a8:	f01a 0f1f 	tst.w	sl, #31
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80042ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
				if ((di % SZDIRE) == 0) di += 2;
 80042b0:	bf08      	it	eq
 80042b2:	f10a 0a02 	addeq.w	sl, sl, #2
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80042b6:	f833 000a 	ldrh.w	r0, [r3, sl]
 80042ba:	f001 feaf 	bl	800601c <ff_wtoupper>
 80042be:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80042c2:	4683      	mov	fp, r0
 80042c4:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 80042c8:	f001 fea8 	bl	800601c <ff_wtoupper>
 80042cc:	4583      	cmp	fp, r0
 80042ce:	d103      	bne.n	80042d8 <dir_find+0x94>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80042d0:	f10a 0a02 	add.w	sl, sl, #2
 80042d4:	3501      	adds	r5, #1
 80042d6:	e7db      	b.n	8004290 <dir_find+0x4c>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80042d8:	1b76      	subs	r6, r6, r5
 80042da:	b2f6      	uxtb	r6, r6
 80042dc:	2e00      	cmp	r6, #0
 80042de:	d1c5      	bne.n	800426c <dir_find+0x28>
 80042e0:	e7d8      	b.n	8004294 <dir_find+0x50>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80042e2:	f04f 0aff 	mov.w	sl, #255	@ 0xff
 80042e6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ea:	4655      	mov	r5, sl
 80042ec:	64e3      	str	r3, [r4, #76]	@ 0x4c
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80042ee:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80042f2:	9302      	str	r3, [sp, #8]
		res = move_window(fs, dp->sect);
 80042f4:	4648      	mov	r0, r9
 80042f6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80042f8:	f7fe ffa9 	bl	800324e <move_window>
		if (res != FR_OK) break;
 80042fc:	2800      	cmp	r0, #0
 80042fe:	d15a      	bne.n	80043b6 <dir_find+0x172>
		c = dp->dir[DIR_Name];
 8004300:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8004302:	7837      	ldrb	r7, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached end of directory table */
 8004304:	2f00      	cmp	r7, #0
 8004306:	d077      	beq.n	80043f8 <dir_find+0x1b4>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8004308:	7af2      	ldrb	r2, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800430a:	2fe5      	cmp	r7, #229	@ 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800430c:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
 8004310:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004312:	d003      	beq.n	800431c <dir_find+0xd8>
 8004314:	0712      	lsls	r2, r2, #28
 8004316:	d505      	bpl.n	8004324 <dir_find+0xe0>
 8004318:	2b0f      	cmp	r3, #15
 800431a:	d005      	beq.n	8004328 <dir_find+0xe4>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Not matched, reset LFN sequence */
 800431c:	f04f 33ff 	mov.w	r3, #4294967295
 8004320:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8004322:	e04f      	b.n	80043c4 <dir_find+0x180>
			if (a == AM_LFN) {			/* Is it an LFN entry? */
 8004324:	2b0f      	cmp	r3, #15
 8004326:	d154      	bne.n	80043d2 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8004328:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 800432c:	065b      	lsls	r3, r3, #25
 800432e:	d43c      	bmi.n	80043aa <dir_find+0x166>
					if (c & LLEF) {		/* Is it start of an entry set? */
 8004330:	0678      	lsls	r0, r7, #25
 8004332:	d542      	bpl.n	80043ba <dir_find+0x176>
						dp->blk_ofs = dp->dptr;		/* Start offset of LFN */
 8004334:	6b23      	ldr	r3, [r4, #48]	@ 0x30
						c &= (BYTE)~LLEF;
 8004336:	f007 07bf 	and.w	r7, r7, #191	@ 0xbf
						dp->blk_ofs = dp->dptr;		/* Start offset of LFN */
 800433a:	64e3      	str	r3, [r4, #76]	@ 0x4c
						sum = dp->dir[LDIR_Chksum];	/* Sum of the SFN */
 800433c:	f896 a00d 	ldrb.w	sl, [r6, #13]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check if LDIR_FstClusLO is 0 */
 8004340:	8b73      	ldrh	r3, [r6, #26]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d13e      	bne.n	80043c4 <dir_find+0x180>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004346:	f8d9 300c 	ldr.w	r3, [r9, #12]
	for (pchr = 1, di = 0; di < 13; di++) {	/* Process all characters in the entry */
 800434a:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800434c:	9301      	str	r3, [sp, #4]
	ni = (UINT)((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the name to be compared */
 800434e:	230d      	movs	r3, #13
 8004350:	7835      	ldrb	r5, [r6, #0]
 8004352:	f8df b0ac 	ldr.w	fp, [pc, #172]	@ 8004400 <dir_find+0x1bc>
 8004356:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 800435a:	3d01      	subs	r5, #1
 800435c:	435d      	muls	r5, r3
		chr = ld_word(dir + LfnOfs[di]);	/* Pick a character from the entry */
 800435e:	f81b 3b01 	ldrb.w	r3, [fp], #1
	rv = ptr[1];
 8004362:	5af3      	ldrh	r3, [r6, r3]
		if (pchr != 0) {
 8004364:	b382      	cbz	r2, 80043c8 <dir_find+0x184>
			if (ni >= FF_MAX_LFN + 1 || ff_wtoupper(chr) != ff_wtoupper(lfnbuf[ni++])) {	/* Compare it with name */
 8004366:	2d12      	cmp	r5, #18
 8004368:	d82c      	bhi.n	80043c4 <dir_find+0x180>
 800436a:	4618      	mov	r0, r3
 800436c:	9305      	str	r3, [sp, #20]
 800436e:	f001 fe55 	bl	800601c <ff_wtoupper>
 8004372:	9b01      	ldr	r3, [sp, #4]
 8004374:	9004      	str	r0, [sp, #16]
 8004376:	1c69      	adds	r1, r5, #1
 8004378:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 800437c:	9103      	str	r1, [sp, #12]
 800437e:	f001 fe4d 	bl	800601c <ff_wtoupper>
 8004382:	9a04      	ldr	r2, [sp, #16]
 8004384:	4282      	cmp	r2, r0
 8004386:	d11d      	bne.n	80043c4 <dir_find+0x180>
	rv = rv << 8 | ptr[0];
 8004388:	9b05      	ldr	r3, [sp, #20]
			if (ni >= FF_MAX_LFN + 1 || ff_wtoupper(chr) != ff_wtoupper(lfnbuf[ni++])) {	/* Compare it with name */
 800438a:	9903      	ldr	r1, [sp, #12]
	rv = rv << 8 | ptr[0];
 800438c:	461a      	mov	r2, r3
			if (ni >= FF_MAX_LFN + 1 || ff_wtoupper(chr) != ff_wtoupper(lfnbuf[ni++])) {	/* Compare it with name */
 800438e:	460d      	mov	r5, r1
	for (pchr = 1, di = 0; di < 13; di++) {	/* Process all characters in the entry */
 8004390:	4b1c      	ldr	r3, [pc, #112]	@ (8004404 <dir_find+0x1c0>)
 8004392:	459b      	cmp	fp, r3
 8004394:	d1e3      	bne.n	800435e <dir_find+0x11a>
	if ((dir[LDIR_Ord] & LLEF) && pchr && lfnbuf[ni]) return 0;	/* Last name segment matched but different length */
 8004396:	7833      	ldrb	r3, [r6, #0]
 8004398:	0659      	lsls	r1, r3, #25
 800439a:	d504      	bpl.n	80043a6 <dir_find+0x162>
 800439c:	b11a      	cbz	r2, 80043a6 <dir_find+0x162>
 800439e:	9b01      	ldr	r3, [sp, #4]
 80043a0:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 80043a4:	b973      	cbnz	r3, 80043c4 <dir_find+0x180>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80043a6:	3f01      	subs	r7, #1
 80043a8:	b2fd      	uxtb	r5, r7
		res = dir_next(dp, 0);	/* Next entry */
 80043aa:	2100      	movs	r1, #0
 80043ac:	4620      	mov	r0, r4
 80043ae:	f7ff fd76 	bl	8003e9e <dir_next>
	} while (res == FR_OK);
 80043b2:	2800      	cmp	r0, #0
 80043b4:	d09e      	beq.n	80042f4 <dir_find+0xb0>
		res = move_window(fs, dp->sect);
 80043b6:	4680      	mov	r8, r0
 80043b8:	e772      	b.n	80042a0 <dir_find+0x5c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80043ba:	42bd      	cmp	r5, r7
 80043bc:	d102      	bne.n	80043c4 <dir_find+0x180>
 80043be:	7b73      	ldrb	r3, [r6, #13]
 80043c0:	4553      	cmp	r3, sl
 80043c2:	d0bd      	beq.n	8004340 <dir_find+0xfc>
 80043c4:	25ff      	movs	r5, #255	@ 0xff
 80043c6:	e7f0      	b.n	80043aa <dir_find+0x166>
			if (chr != 0xFFFF) return 0;	/* Check filler */
 80043c8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80043cc:	428b      	cmp	r3, r1
 80043ce:	d0df      	beq.n	8004390 <dir_find+0x14c>
 80043d0:	e7f8      	b.n	80043c4 <dir_find+0x180>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80043d2:	b92d      	cbnz	r5, 80043e0 <dir_find+0x19c>
 80043d4:	4630      	mov	r0, r6
 80043d6:	f7fe fdaa 	bl	8002f2e <sum_sfn>
 80043da:	4550      	cmp	r0, sl
 80043dc:	f43f af60 	beq.w	80042a0 <dir_find+0x5c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80043e0:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 80043e4:	07db      	lsls	r3, r3, #31
 80043e6:	d499      	bmi.n	800431c <dir_find+0xd8>
 80043e8:	220b      	movs	r2, #11
 80043ea:	4630      	mov	r0, r6
 80043ec:	9902      	ldr	r1, [sp, #8]
 80043ee:	f007 fda5 	bl	800bf3c <memcmp>
 80043f2:	2800      	cmp	r0, #0
 80043f4:	d192      	bne.n	800431c <dir_find+0xd8>
 80043f6:	e753      	b.n	80042a0 <dir_find+0x5c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached end of directory table */
 80043f8:	f04f 0804 	mov.w	r8, #4
 80043fc:	e750      	b.n	80042a0 <dir_find+0x5c>
 80043fe:	bf00      	nop
 8004400:	0800ee88 	.word	0x0800ee88
 8004404:	0800ee95 	.word	0x0800ee95

08004408 <dir_register>:
{
 8004408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800440c:	f890 b04b 	ldrb.w	fp, [r0, #75]	@ 0x4b
{
 8004410:	4604      	mov	r4, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8004412:	f01b 05a0 	ands.w	r5, fp, #160	@ 0xa0
{
 8004416:	b09b      	sub	sp, #108	@ 0x6c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8004418:	f040 81b8 	bne.w	800478c <dir_register+0x384>
	FATFS *fs = dp->obj.fs;
 800441c:	6806      	ldr	r6, [r0, #0]
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 800441e:	68f2      	ldr	r2, [r6, #12]
 8004420:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d160      	bne.n	80044ea <dir_register+0xe2>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8004428:	7833      	ldrb	r3, [r6, #0]
 800442a:	2b04      	cmp	r3, #4
 800442c:	f040 809c 	bne.w	8004568 <dir_register+0x160>
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8004430:	230f      	movs	r3, #15
 8004432:	350e      	adds	r5, #14
 8004434:	fbb5 f5f3 	udiv	r5, r5, r3
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
 8004438:	4620      	mov	r0, r4
 800443a:	1ca9      	adds	r1, r5, #2
 800443c:	f7ff fd8d 	bl	8003f5a <dir_alloc>
		if (res != FR_OK) return res;
 8004440:	4681      	mov	r9, r0
 8004442:	2800      	cmp	r0, #0
 8004444:	f040 808a 	bne.w	800455c <dir_register+0x154>
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
 8004448:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800444a:	3501      	adds	r5, #1
 800444c:	eba3 1345 	sub.w	r3, r3, r5, lsl #5
 8004450:	64e3      	str	r3, [r4, #76]	@ 0x4c
		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 8004452:	79e3      	ldrb	r3, [r4, #7]
 8004454:	075f      	lsls	r7, r3, #29
 8004456:	d54a      	bpl.n	80044ee <dir_register+0xe6>
			dp->obj.stat &= ~4;
 8004458:	f023 0304 	bic.w	r3, r3, #4
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 800445c:	4620      	mov	r0, r4
			dp->obj.stat &= ~4;
 800445e:	71e3      	strb	r3, [r4, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 8004460:	f7ff f920 	bl	80036a4 <fill_first_frag>
			if (res != FR_OK) return res;
 8004464:	2800      	cmp	r0, #0
 8004466:	d13e      	bne.n	80044e6 <dir_register+0xde>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 8004468:	f04f 32ff 	mov.w	r2, #4294967295
 800446c:	4620      	mov	r0, r4
 800446e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004470:	f7ff f900 	bl	8003674 <fill_last_frag>
			if (res != FR_OK) return res;
 8004474:	2800      	cmp	r0, #0
 8004476:	d136      	bne.n	80044e6 <dir_register+0xde>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 8004478:	68a3      	ldr	r3, [r4, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d037      	beq.n	80044ee <dir_register+0xe6>
	dp->obj.fs = obj->fs;
 800447e:	6823      	ldr	r3, [r4, #0]
	dp->blk_ofs = obj->c_ofs;
 8004480:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
	dp->obj.fs = obj->fs;
 8004482:	9304      	str	r3, [sp, #16]
	dp->obj.sclust = obj->c_scl;
 8004484:	6a23      	ldr	r3, [r4, #32]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8004486:	a804      	add	r0, sp, #16
	dp->obj.sclust = obj->c_scl;
 8004488:	9306      	str	r3, [sp, #24]
	dp->obj.stat = (BYTE)obj->c_size;
 800448a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
	dp->obj.n_frag = 0;
 800448c:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
	dp->obj.stat = (BYTE)obj->c_size;
 8004490:	f88d 3017 	strb.w	r3, [sp, #23]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8004494:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004498:	e9cd 3908 	strd	r3, r9, [sp, #32]
	dp->blk_ofs = obj->c_ofs;
 800449c:	9117      	str	r1, [sp, #92]	@ 0x5c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800449e:	f7ff f823 	bl	80034e8 <dir_sdi>
	if (res == FR_OK) {
 80044a2:	bb00      	cbnz	r0, 80044e6 <dir_register+0xde>
		res = load_xdir(dp);		/* Load the object's entry block */
 80044a4:	a804      	add	r0, sp, #16
 80044a6:	f7ff fda9 	bl	8003ffc <load_xdir>
				if (res != FR_OK) return res;
 80044aa:	b9e0      	cbnz	r0, 80044e6 <dir_register+0xde>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 80044ac:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80044b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044b4:	8970      	ldrh	r0, [r6, #10]
 80044b6:	fbe0 2301 	umlal	r2, r3, r0, r1
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 80044ba:	6930      	ldr	r0, [r6, #16]
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 80044bc:	e9c4 2304 	strd	r2, r3, [r4, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 80044c0:	3038      	adds	r0, #56	@ 0x38
 80044c2:	f7fe fc69 	bl	8002d98 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 80044c6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80044ca:	6930      	ldr	r0, [r6, #16]
 80044cc:	3028      	adds	r0, #40	@ 0x28
 80044ce:	f7fe fc63 	bl	8002d98 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
 80044d2:	79e3      	ldrb	r3, [r4, #7]
 80044d4:	6932      	ldr	r2, [r6, #16]
 80044d6:	f043 0301 	orr.w	r3, r3, #1
 80044da:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
				res = store_xdir(&dj);				/* Store the object status */
 80044de:	a804      	add	r0, sp, #16
 80044e0:	f7ff fdfc 	bl	80040dc <store_xdir>
				if (res != FR_OK) return res;
 80044e4:	b118      	cbz	r0, 80044ee <dir_register+0xe6>
 80044e6:	4681      	mov	r9, r0
 80044e8:	e038      	b.n	800455c <dir_register+0x154>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 80044ea:	3501      	adds	r5, #1
 80044ec:	e798      	b.n	8004420 <dir_register+0x18>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 80044ee:	e9d6 5403 	ldrd	r5, r4, [r6, #12]
	memset(dirb, 0, 2 * SZDIRE);
 80044f2:	1c67      	adds	r7, r4, #1
 80044f4:	223f      	movs	r2, #63	@ 0x3f
 80044f6:	2100      	movs	r1, #0
 80044f8:	4638      	mov	r0, r7
 80044fa:	f007 fd2f 	bl	800bf5c <memset>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 80044fe:	2385      	movs	r3, #133	@ 0x85
 8004500:	7023      	strb	r3, [r4, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 8004502:	23c0      	movs	r3, #192	@ 0xc0
 8004504:	f884 3020 	strb.w	r3, [r4, #32]
	nlen = n_c1 = 0; chr = 1;
 8004508:	2300      	movs	r3, #0
 800450a:	2001      	movs	r0, #1
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 800450c:	4619      	mov	r1, r3
	i = SZDIRE * 2;	/* Top of file name entries */
 800450e:	2240      	movs	r2, #64	@ 0x40
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 8004510:	f04f 0ec1 	mov.w	lr, #193	@ 0xc1
 8004514:	4698      	mov	r8, r3
 8004516:	1c56      	adds	r6, r2, #1
 8004518:	f804 e002 	strb.w	lr, [r4, r2]
 800451c:	f804 8006 	strb.w	r8, [r4, r6]
 8004520:	3202      	adds	r2, #2
			if (chr != 0 && (chr = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 8004522:	b120      	cbz	r0, 800452e <dir_register+0x126>
 8004524:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
 8004528:	b108      	cbz	r0, 800452e <dir_register+0x126>
 800452a:	3301      	adds	r3, #1
 800452c:	b2db      	uxtb	r3, r3
	*ptr++ = (BYTE)val; val >>= 8;
 800452e:	0a06      	lsrs	r6, r0, #8
 8004530:	54a0      	strb	r0, [r4, r2]
	*ptr++ = (BYTE)val;
 8004532:	54be      	strb	r6, [r7, r2]
			i += 2;
 8004534:	3202      	adds	r2, #2
		} while (i % SZDIRE != 0);
 8004536:	06d6      	lsls	r6, r2, #27
 8004538:	d1f3      	bne.n	8004522 <dir_register+0x11a>
	} while (lfn[nlen]);	/* Fill next C1 entry if any char follows */
 800453a:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
 800453e:	f101 0c01 	add.w	ip, r1, #1
 8004542:	b97e      	cbnz	r6, 8004564 <dir_register+0x15c>
	dirb[XDIR_NumSec] = 1 + n_c1;	/* Set secondary count (C0 + C1s) */
 8004544:	3102      	adds	r1, #2
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8004546:	4628      	mov	r0, r5
	dirb[XDIR_NumName] = nlen;		/* Set name length */
 8004548:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
	dirb[XDIR_NumSec] = 1 + n_c1;	/* Set secondary count (C0 + C1s) */
 800454c:	7061      	strb	r1, [r4, #1]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800454e:	f7fe fe5a 	bl	8003206 <xname_sum>
	*ptr++ = (BYTE)val; val >>= 8;
 8004552:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
 8004556:	0a00      	lsrs	r0, r0, #8
	*ptr++ = (BYTE)val;
 8004558:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
}
 800455c:	4648      	mov	r0, r9
 800455e:	b01b      	add	sp, #108	@ 0x6c
 8004560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004564:	4661      	mov	r1, ip
 8004566:	e7d6      	b.n	8004516 <dir_register+0x10e>
	memcpy(sn, dp->fn, 12);
 8004568:	f10d 0810 	add.w	r8, sp, #16
 800456c:	f104 0740 	add.w	r7, r4, #64	@ 0x40
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004570:	f01b 0f01 	tst.w	fp, #1
	memcpy(sn, dp->fn, 12);
 8004574:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004578:	e888 0007 	stmia.w	r8, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800457c:	d07b      	beq.n	8004676 <dir_register+0x26e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800457e:	2340      	movs	r3, #64	@ 0x40
		for (n = 1; n < 100; n++) {
 8004580:	f04f 0a01 	mov.w	sl, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8004584:	f884 304b 	strb.w	r3, [r4, #75]	@ 0x4b
	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 8004588:	46bc      	mov	ip, r7
 800458a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800458e:	68f3      	ldr	r3, [r6, #12]
	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 8004590:	e8ac 0003 	stmia.w	ip!, {r0, r1}
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004594:	f1ba 0f05 	cmp.w	sl, #5
	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 8004598:	f82c 2b02 	strh.w	r2, [ip], #2
 800459c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80045a0:	f88c 2000 	strb.w	r2, [ip]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80045a4:	d95e      	bls.n	8004664 <dir_register+0x25c>
 80045a6:	4652      	mov	r2, sl
 80045a8:	1e98      	subs	r0, r3, #2
		while (*lfn) {	/* Create a CRC value as a hash of LFN */
 80045aa:	f830 1f02 	ldrh.w	r1, [r0, #2]!
 80045ae:	2900      	cmp	r1, #0
 80045b0:	d146      	bne.n	8004640 <dir_register+0x238>
 80045b2:	46c4      	mov	ip, r8
 80045b4:	2107      	movs	r1, #7
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 80045b6:	f002 0e0f 	and.w	lr, r2, #15
 80045ba:	f10e 0030 	add.w	r0, lr, #48	@ 0x30
		if (c > '9') c += 7;
 80045be:	2839      	cmp	r0, #57	@ 0x39
 80045c0:	bf88      	it	hi
 80045c2:	f10e 0037 	addhi.w	r0, lr, #55	@ 0x37
	} while (i && seq);
 80045c6:	3901      	subs	r1, #1
 80045c8:	4691      	mov	r9, r2
		ns[i--] = c;
 80045ca:	f80c 0d01 	strb.w	r0, [ip, #-1]!
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 80045ce:	ea4f 1212 	mov.w	r2, r2, lsr #4
	} while (i && seq);
 80045d2:	d002      	beq.n	80045da <dir_register+0x1d2>
 80045d4:	f1b9 0f0f 	cmp.w	r9, #15
 80045d8:	d8ed      	bhi.n	80045b6 <dir_register+0x1ae>
	ns[i] = '~';
 80045da:	207e      	movs	r0, #126	@ 0x7e
 80045dc:	f101 0368 	add.w	r3, r1, #104	@ 0x68
 80045e0:	eb0d 0203 	add.w	r2, sp, r3
 80045e4:	f802 0c60 	strb.w	r0, [r2, #-96]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 80045e8:	2200      	movs	r2, #0
 80045ea:	f104 003f 	add.w	r0, r4, #63	@ 0x3f
 80045ee:	428a      	cmp	r2, r1
 80045f0:	d006      	beq.n	8004600 <dir_register+0x1f8>
 80045f2:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 80045f6:	f102 0e01 	add.w	lr, r2, #1
 80045fa:	f1bc 0f20 	cmp.w	ip, #32
 80045fe:	d133      	bne.n	8004668 <dir_register+0x260>
 8004600:	323f      	adds	r2, #63	@ 0x3f
 8004602:	4422      	add	r2, r4
 8004604:	f104 0c47 	add.w	ip, r4, #71	@ 0x47
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004608:	2907      	cmp	r1, #7
 800460a:	bf8f      	iteee	hi
 800460c:	2020      	movhi	r0, #32
 800460e:	f101 0368 	addls.w	r3, r1, #104	@ 0x68
 8004612:	eb0d 0003 	addls.w	r0, sp, r3
 8004616:	f810 0c60 	ldrbls.w	r0, [r0, #-96]
 800461a:	bf98      	it	ls
 800461c:	3101      	addls	r1, #1
 800461e:	f802 0f01 	strb.w	r0, [r2, #1]!
	} while (j < 8);
 8004622:	4594      	cmp	ip, r2
 8004624:	d1f0      	bne.n	8004608 <dir_register+0x200>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004626:	4620      	mov	r0, r4
 8004628:	f7ff fe0c 	bl	8004244 <dir_find>
			if (res != FR_OK) break;
 800462c:	4681      	mov	r9, r0
 800462e:	b9e8      	cbnz	r0, 800466c <dir_register+0x264>
		for (n = 1; n < 100; n++) {
 8004630:	f10a 0a01 	add.w	sl, sl, #1
 8004634:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 8004638:	d1a6      	bne.n	8004588 <dir_register+0x180>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800463a:	f04f 0907 	mov.w	r9, #7
 800463e:	e78d      	b.n	800455c <dir_register+0x154>
 8004640:	f04f 0c10 	mov.w	ip, #16
				crc_sreg = (crc_sreg << 1) + (wc & 1);
 8004644:	f001 0e01 	and.w	lr, r1, #1
 8004648:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
				if (crc_sreg & 0x10000) crc_sreg ^= 0x11021;
 800464c:	03d3      	lsls	r3, r2, #15
 800464e:	bf44      	itt	mi
 8004650:	f482 3288 	eormi.w	r2, r2, #69632	@ 0x11000
 8004654:	f082 0221 	eormi.w	r2, r2, #33	@ 0x21
			for (i = 0; i < 16; i++) {
 8004658:	f1bc 0c01 	subs.w	ip, ip, #1
				wc >>= 1;
 800465c:	ea4f 0151 	mov.w	r1, r1, lsr #1
			for (i = 0; i < 16; i++) {
 8004660:	d1f0      	bne.n	8004644 <dir_register+0x23c>
 8004662:	e7a2      	b.n	80045aa <dir_register+0x1a2>
 8004664:	4652      	mov	r2, sl
 8004666:	e7a4      	b.n	80045b2 <dir_register+0x1aa>
 8004668:	4672      	mov	r2, lr
 800466a:	e7c0      	b.n	80045ee <dir_register+0x1e6>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800466c:	2804      	cmp	r0, #4
 800466e:	f47f af75 	bne.w	800455c <dir_register+0x154>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8004672:	f884 b04b 	strb.w	fp, [r4, #75]	@ 0x4b
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8004676:	f01b 0f02 	tst.w	fp, #2
 800467a:	bf1d      	ittte	ne
 800467c:	230d      	movne	r3, #13
 800467e:	350c      	addne	r5, #12
 8004680:	fbb5 f5f3 	udivne	r5, r5, r3
 8004684:	2501      	moveq	r5, #1
 8004686:	bf18      	it	ne
 8004688:	3501      	addne	r5, #1
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 800468a:	4629      	mov	r1, r5
 800468c:	4620      	mov	r0, r4
 800468e:	f7ff fc64 	bl	8003f5a <dir_alloc>
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 8004692:	4681      	mov	r9, r0
 8004694:	2800      	cmp	r0, #0
 8004696:	f47f af61 	bne.w	800455c <dir_register+0x154>
 800469a:	3d01      	subs	r5, #1
 800469c:	d11d      	bne.n	80046da <dir_register+0x2d2>
		res = move_window(fs, dp->sect);
 800469e:	4630      	mov	r0, r6
 80046a0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80046a2:	f7fe fdd4 	bl	800324e <move_window>
		if (res == FR_OK) {
 80046a6:	4681      	mov	r9, r0
 80046a8:	2800      	cmp	r0, #0
 80046aa:	f47f af57 	bne.w	800455c <dir_register+0x154>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80046ae:	4601      	mov	r1, r0
 80046b0:	2220      	movs	r2, #32
 80046b2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80046b4:	f007 fc52 	bl	800bf5c <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80046b8:	cf03      	ldmia	r7!, {r0, r1}
 80046ba:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80046bc:	6018      	str	r0, [r3, #0]
 80046be:	6059      	str	r1, [r3, #4]
 80046c0:	78ba      	ldrb	r2, [r7, #2]
 80046c2:	8839      	ldrh	r1, [r7, #0]
 80046c4:	729a      	strb	r2, [r3, #10]
 80046c6:	8119      	strh	r1, [r3, #8]
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80046c8:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 80046cc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80046ce:	f003 0318 	and.w	r3, r3, #24
 80046d2:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 80046d4:	2301      	movs	r3, #1
 80046d6:	7133      	strb	r3, [r6, #4]
 80046d8:	e740      	b.n	800455c <dir_register+0x154>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 80046da:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80046dc:	4620      	mov	r0, r4
 80046de:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 80046e2:	f7fe ff01 	bl	80034e8 <dir_sdi>
		if (res == FR_OK) {
 80046e6:	4681      	mov	r9, r0
 80046e8:	2800      	cmp	r0, #0
 80046ea:	f47f af37 	bne.w	800455c <dir_register+0x154>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80046ee:	4638      	mov	r0, r7
 80046f0:	f7fe fc1d 	bl	8002f2e <sum_sfn>
		if (chr != 0xFFFF) chr = lfn[ni++];	/* Get an effective character */
 80046f4:	f64f 78ff 	movw	r8, #65535	@ 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80046f8:	9001      	str	r0, [sp, #4]
				res = move_window(fs, dp->sect);
 80046fa:	4630      	mov	r0, r6
 80046fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80046fe:	f7fe fda6 	bl	800324e <move_window>
 8004702:	4681      	mov	r9, r0
				if (res != FR_OK) break;
 8004704:	2800      	cmp	r0, #0
 8004706:	f47f af29 	bne.w	800455c <dir_register+0x154>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 800470a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800470c:	9a01      	ldr	r2, [sp, #4]
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 800470e:	f8d6 e00c 	ldr.w	lr, [r6, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8004712:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute */
 8004714:	f04f 020f 	mov.w	r2, #15
	ni = (UINT)(ord - 1) * 13;		/* Offset in the name */
 8004718:	f04f 0c0d 	mov.w	ip, #13
 800471c:	b2e9      	uxtb	r1, r5
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute */
 800471e:	72da      	strb	r2, [r3, #11]
	ni = (UINT)(ord - 1) * 13;		/* Offset in the name */
 8004720:	1e4a      	subs	r2, r1, #1
 8004722:	fb0c f202 	mul.w	r2, ip, r2
	di = chr = 0;
 8004726:	4684      	mov	ip, r0
 8004728:	f8df a068 	ldr.w	sl, [pc, #104]	@ 8004794 <dir_register+0x38c>
	dir[LDIR_Type] = 0;
 800472c:	7318      	strb	r0, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800472e:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
 8004730:	76d8      	strb	r0, [r3, #27]
		if (chr != 0xFFFF) chr = lfn[ni++];	/* Get an effective character */
 8004732:	4540      	cmp	r0, r8
 8004734:	bf18      	it	ne
 8004736:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
		st_word(dir + LfnOfs[di], chr);	/* Set it */
 800473a:	f81a 9b01 	ldrb.w	r9, [sl], #1
	} while (++di < 13);
 800473e:	f10c 0c01 	add.w	ip, ip, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8004742:	f803 0009 	strb.w	r0, [r3, r9]
		if (chr != 0xFFFF) chr = lfn[ni++];	/* Get an effective character */
 8004746:	bf18      	it	ne
 8004748:	3201      	addne	r2, #1
		st_word(dir + LfnOfs[di], chr);	/* Set it */
 800474a:	eb03 0b09 	add.w	fp, r3, r9
	*ptr++ = (BYTE)val; val >>= 8;
 800474e:	ea4f 2910 	mov.w	r9, r0, lsr #8
		if (chr == 0) chr = 0xFFFF;		/* Padding characters after the terminator */
 8004752:	2800      	cmp	r0, #0
 8004754:	bf08      	it	eq
 8004756:	4640      	moveq	r0, r8
	} while (++di < 13);
 8004758:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
 800475c:	f88b 9001 	strb.w	r9, [fp, #1]
	} while (++di < 13);
 8004760:	d1e7      	bne.n	8004732 <dir_register+0x32a>
	if (chr == 0xFFFF || !lfn[ni]) ord |= LLEF;	/* Last LFN part is the start of an enrty set */
 8004762:	4540      	cmp	r0, r8
 8004764:	d002      	beq.n	800476c <dir_register+0x364>
 8004766:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 800476a:	b90a      	cbnz	r2, 8004770 <dir_register+0x368>
 800476c:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
	dir[LDIR_Ord] = ord;			/* Set order in the entry set */
 8004770:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
 8004772:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 8004774:	2100      	movs	r1, #0
 8004776:	4620      	mov	r0, r4
				fs->wflag = 1;
 8004778:	7133      	strb	r3, [r6, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800477a:	f7ff fb90 	bl	8003e9e <dir_next>
			} while (res == FR_OK && --n_ent);
 800477e:	4681      	mov	r9, r0
 8004780:	2800      	cmp	r0, #0
 8004782:	f47f aeeb 	bne.w	800455c <dir_register+0x154>
 8004786:	3d01      	subs	r5, #1
 8004788:	d1b7      	bne.n	80046fa <dir_register+0x2f2>
 800478a:	e788      	b.n	800469e <dir_register+0x296>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800478c:	f04f 0906 	mov.w	r9, #6
 8004790:	e6e4      	b.n	800455c <dir_register+0x154>
 8004792:	bf00      	nop
 8004794:	0800ee88 	.word	0x0800ee88

08004798 <init_alloc_info.isra.0>:
static void init_alloc_info (
 8004798:	b510      	push	{r4, lr}
 800479a:	4604      	mov	r4, r0
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 800479c:	3034      	adds	r0, #52	@ 0x34
 800479e:	f7fe faed 	bl	8002d7c <ld_dword>
 80047a2:	6088      	str	r0, [r1, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 80047a4:	f104 0038 	add.w	r0, r4, #56	@ 0x38
static void init_alloc_info (
 80047a8:	460a      	mov	r2, r1
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 80047aa:	f7fe fae9 	bl	8002d80 <ld_qword>
 80047ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 80047b2:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	71d3      	strb	r3, [r2, #7]
	obj->n_frag = 0;										/* No last fragment info */
 80047bc:	2300      	movs	r3, #0
 80047be:	61d3      	str	r3, [r2, #28]
}
 80047c0:	bd10      	pop	{r4, pc}

080047c2 <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 80047c2:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 80047c4:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80047c6:	bf04      	itt	eq
 80047c8:	8a8a      	ldrheq	r2, [r1, #20]
 80047ca:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	4770      	bx	lr
	...

080047d4 <follow_path>:
{
 80047d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d8:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 80047da:	6803      	ldr	r3, [r0, #0]
{
 80047dc:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 80047de:	9301      	str	r3, [sp, #4]
		while (IsSeparator(*path)) path++;	/* Strip separators */
 80047e0:	468a      	mov	sl, r1
 80047e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80047e8:	d0fa      	beq.n	80047e0 <follow_path+0xc>
 80047ea:	2b5c      	cmp	r3, #92	@ 0x5c
 80047ec:	d0f8      	beq.n	80047e0 <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from the root directory */
 80047ee:	2300      	movs	r3, #0
 80047f0:	60ab      	str	r3, [r5, #8]
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 80047f2:	61eb      	str	r3, [r5, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80047f4:	f89a 3000 	ldrb.w	r3, [sl]
 80047f8:	2b1f      	cmp	r3, #31
 80047fa:	f200 80d6 	bhi.w	80049aa <follow_path+0x1d6>
		dp->fn[NSFLAG] = NS_NONAME;
 80047fe:	2380      	movs	r3, #128	@ 0x80
		res = dir_sdi(dp, 0);
 8004800:	2100      	movs	r1, #0
 8004802:	4628      	mov	r0, r5
		dp->fn[NSFLAG] = NS_NONAME;
 8004804:	f885 304b 	strb.w	r3, [r5, #75]	@ 0x4b
}
 8004808:	b005      	add	sp, #20
 800480a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800480e:	f7fe be6b 	b.w	80034e8 <dir_sdi>
		cf = NS_LAST;			/* Last segment */
 8004812:	2404      	movs	r4, #4
 8004814:	e109      	b.n	8004a2a <follow_path+0x256>
		wc = lfn[di - 1];
 8004816:	f832 3017 	ldrh.w	r3, [r2, r7, lsl #1]
		if (wc != ' ' && wc != '.') break;
 800481a:	2b20      	cmp	r3, #32
 800481c:	d002      	beq.n	8004824 <follow_path+0x50>
 800481e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004820:	f040 8108 	bne.w	8004a34 <follow_path+0x260>
		di--;
 8004824:	3f01      	subs	r7, #1
 8004826:	e102      	b.n	8004a2e <follow_path+0x25a>
		if (i >= ni || si == di) {		/* End of field? */
 8004828:	4599      	cmp	r9, r3
 800482a:	d204      	bcs.n	8004836 <follow_path+0x62>
 800482c:	42ba      	cmp	r2, r7
 800482e:	d14f      	bne.n	80048d0 <follow_path+0xfc>
			if (ni == 11) {				/* Name extension overflow? */
 8004830:	2b0b      	cmp	r3, #11
 8004832:	d144      	bne.n	80048be <follow_path+0xea>
 8004834:	e001      	b.n	800483a <follow_path+0x66>
 8004836:	2b0b      	cmp	r3, #11
 8004838:	d13b      	bne.n	80048b2 <follow_path+0xde>
				break;
 800483a:	230b      	movs	r3, #11
				cf |= NS_LOSS | NS_LFN;
 800483c:	f044 0403 	orr.w	r4, r4, #3
 8004840:	b2e4      	uxtb	r4, r4
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004842:	f895 2040 	ldrb.w	r2, [r5, #64]	@ 0x40
 8004846:	2ae5      	cmp	r2, #229	@ 0xe5
 8004848:	bf04      	itt	eq
 800484a:	2205      	moveq	r2, #5
 800484c:	f885 2040 	strbeq.w	r2, [r5, #64]	@ 0x40
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8004850:	2b08      	cmp	r3, #8
 8004852:	bf04      	itt	eq
 8004854:	ea4f 0888 	moveq.w	r8, r8, lsl #2
 8004858:	fa5f f888 	uxtbeq.w	r8, r8
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 800485c:	f008 030c 	and.w	r3, r8, #12
 8004860:	2b0c      	cmp	r3, #12
 8004862:	d003      	beq.n	800486c <follow_path+0x98>
 8004864:	f008 0303 	and.w	r3, r8, #3
 8004868:	2b03      	cmp	r3, #3
 800486a:	d102      	bne.n	8004872 <follow_path+0x9e>
 800486c:	f044 0402 	orr.w	r4, r4, #2
 8004870:	b2e4      	uxtb	r4, r4
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004872:	07a1      	lsls	r1, r4, #30
 8004874:	d40b      	bmi.n	800488e <follow_path+0xba>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 8004876:	f018 0f01 	tst.w	r8, #1
 800487a:	bf1c      	itt	ne
 800487c:	f044 0410 	orrne.w	r4, r4, #16
 8004880:	b2e4      	uxtbne	r4, r4
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 8004882:	f018 0f04 	tst.w	r8, #4
 8004886:	bf1c      	itt	ne
 8004888:	f044 0408 	orrne.w	r4, r4, #8
 800488c:	b2e4      	uxtbne	r4, r4
			res = dir_find(dp);				/* Find an object with the segment name */
 800488e:	4628      	mov	r0, r5
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 8004890:	f885 404b 	strb.w	r4, [r5, #75]	@ 0x4b
			res = dir_find(dp);				/* Find an object with the segment name */
 8004894:	f7ff fcd6 	bl	8004244 <dir_find>
			ns = dp->fn[NSFLAG];
 8004898:	f895 304b 	ldrb.w	r3, [r5, #75]	@ 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 800489c:	2800      	cmp	r0, #0
 800489e:	d06c      	beq.n	800497a <follow_path+0x1a6>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80048a0:	2804      	cmp	r0, #4
 80048a2:	d103      	bne.n	80048ac <follow_path+0xd8>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80048a4:	f013 0f04 	tst.w	r3, #4
 80048a8:	bf08      	it	eq
 80048aa:	2005      	moveq	r0, #5
}
 80048ac:	b005      	add	sp, #20
 80048ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 80048b2:	42ba      	cmp	r2, r7
 80048b4:	d003      	beq.n	80048be <follow_path+0xea>
 80048b6:	f044 0403 	orr.w	r4, r4, #3
 80048ba:	b2e4      	uxtb	r4, r4
			if (si > di) break;						/* No name extension? */
 80048bc:	d8c1      	bhi.n	8004842 <follow_path+0x6e>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 80048be:	ea4f 0888 	mov.w	r8, r8, lsl #2
			continue;
 80048c2:	463a      	mov	r2, r7
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 80048c4:	230b      	movs	r3, #11
 80048c6:	f04f 0908 	mov.w	r9, #8
 80048ca:	fa5f f888 	uxtb.w	r8, r8
			continue;
 80048ce:	e0e8      	b.n	8004aa2 <follow_path+0x2ce>
		if (wc >= 0x80) {	/* Is this an extended character? */
 80048d0:	2e7f      	cmp	r6, #127	@ 0x7f
 80048d2:	d93e      	bls.n	8004952 <follow_path+0x17e>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 80048d4:	f044 0102 	orr.w	r1, r4, #2
 80048d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 80048dc:	4630      	mov	r0, r6
			cf |= NS_LFN;	/* LFN entry needs to be created */
 80048de:	b2cb      	uxtb	r3, r1
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 80048e0:	f240 11b5 	movw	r1, #437	@ 0x1b5
			cf |= NS_LFN;	/* LFN entry needs to be created */
 80048e4:	9300      	str	r3, [sp, #0]
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 80048e6:	f001 fb67 	bl	8005fb8 <ff_uni2oem>
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 80048ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048ee:	f010 0f80 	tst.w	r0, #128	@ 0x80
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 80048f2:	4606      	mov	r6, r0
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 80048f4:	d014      	beq.n	8004920 <follow_path+0x14c>
 80048f6:	496c      	ldr	r1, [pc, #432]	@ (8004aa8 <follow_path+0x2d4>)
 80048f8:	f000 067f 	and.w	r6, r0, #127	@ 0x7f
 80048fc:	5d8e      	ldrb	r6, [r1, r6]
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 80048fe:	b146      	cbz	r6, 8004912 <follow_path+0x13e>
 8004900:	4631      	mov	r1, r6
 8004902:	486a      	ldr	r0, [pc, #424]	@ (8004aac <follow_path+0x2d8>)
 8004904:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004908:	f007 fb3f 	bl	800bf8a <strchr>
 800490c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004910:	b308      	cbz	r0, 8004956 <follow_path+0x182>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004912:	9900      	ldr	r1, [sp, #0]
 8004914:	265f      	movs	r6, #95	@ 0x5f
 8004916:	f041 0103 	orr.w	r1, r1, #3
 800491a:	b2c9      	uxtb	r1, r1
 800491c:	9100      	str	r1, [sp, #0]
 800491e:	e010      	b.n	8004942 <follow_path+0x16e>
		if (wc >= 0x100) {				/* Is this a DBC? */
 8004920:	28ff      	cmp	r0, #255	@ 0xff
 8004922:	d9ec      	bls.n	80048fe <follow_path+0x12a>
			if (i >= ni - 1) {			/* Field overflow? */
 8004924:	1e59      	subs	r1, r3, #1
 8004926:	4589      	cmp	r9, r1
 8004928:	d304      	bcc.n	8004934 <follow_path+0x160>
				cf |= NS_LOSS | NS_LFN;
 800492a:	f044 0403 	orr.w	r4, r4, #3
				i = ni; continue;		/* Next field */
 800492e:	4699      	mov	r9, r3
				cf |= NS_LOSS | NS_LFN;
 8004930:	b2e4      	uxtb	r4, r4
				i = ni; continue;		/* Next field */
 8004932:	e0b6      	b.n	8004aa2 <follow_path+0x2ce>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 8004934:	eb05 0109 	add.w	r1, r5, r9
 8004938:	0a00      	lsrs	r0, r0, #8
 800493a:	f881 0040 	strb.w	r0, [r1, #64]	@ 0x40
 800493e:	f109 0901 	add.w	r9, r9, #1
		dp->fn[i++] = (BYTE)wc;
 8004942:	eb05 0109 	add.w	r1, r5, r9
 8004946:	9c00      	ldr	r4, [sp, #0]
 8004948:	f881 6040 	strb.w	r6, [r1, #64]	@ 0x40
 800494c:	f109 0901 	add.w	r9, r9, #1
 8004950:	e0a7      	b.n	8004aa2 <follow_path+0x2ce>
 8004952:	9400      	str	r4, [sp, #0]
 8004954:	e7d4      	b.n	8004900 <follow_path+0x12c>
				if (IsUpper(wc)) {		/* ASCII upper case? */
 8004956:	f1a6 0141 	sub.w	r1, r6, #65	@ 0x41
 800495a:	b289      	uxth	r1, r1
 800495c:	2919      	cmp	r1, #25
 800495e:	d802      	bhi.n	8004966 <follow_path+0x192>
					b |= 2;
 8004960:	f048 0802 	orr.w	r8, r8, #2
				if (IsLower(wc)) {		/* ASCII lower case? */
 8004964:	e7ed      	b.n	8004942 <follow_path+0x16e>
 8004966:	f1a6 0161 	sub.w	r1, r6, #97	@ 0x61
 800496a:	b289      	uxth	r1, r1
 800496c:	2919      	cmp	r1, #25
					b |= 1; wc -= 0x20;
 800496e:	bf9e      	ittt	ls
 8004970:	3e20      	subls	r6, #32
 8004972:	f048 0801 	orrls.w	r8, r8, #1
 8004976:	b2b6      	uxthls	r6, r6
 8004978:	e7e3      	b.n	8004942 <follow_path+0x16e>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800497a:	075a      	lsls	r2, r3, #29
 800497c:	d496      	bmi.n	80048ac <follow_path+0xd8>
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800497e:	79ab      	ldrb	r3, [r5, #6]
 8004980:	06db      	lsls	r3, r3, #27
 8004982:	d542      	bpl.n	8004a0a <follow_path+0x236>
			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
 8004984:	9b01      	ldr	r3, [sp, #4]
 8004986:	7818      	ldrb	r0, [r3, #0]
 8004988:	2804      	cmp	r0, #4
 800498a:	d131      	bne.n	80049f0 <follow_path+0x21c>
				dp->obj.c_scl = dp->obj.sclust;
 800498c:	68ab      	ldr	r3, [r5, #8]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800498e:	79ea      	ldrb	r2, [r5, #7]
				dp->obj.c_scl = dp->obj.sclust;
 8004990:	622b      	str	r3, [r5, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8004992:	692b      	ldr	r3, [r5, #16]
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 8004994:	4629      	mov	r1, r5
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8004996:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800499a:	4313      	orrs	r3, r2
 800499c:	626b      	str	r3, [r5, #36]	@ 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 800499e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80049a0:	62ab      	str	r3, [r5, #40]	@ 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 80049a2:	9b01      	ldr	r3, [sp, #4]
 80049a4:	6918      	ldr	r0, [r3, #16]
 80049a6:	f7ff fef7 	bl	8004798 <init_alloc_info.isra.0>
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 80049aa:	2700      	movs	r7, #0
 80049ac:	682b      	ldr	r3, [r5, #0]
 80049ae:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	wc = (BYTE)*p++;			/* Get a byte */
 80049b2:	f81a 0b01 	ldrb.w	r0, [sl], #1
	if (wc != 0) {
 80049b6:	2800      	cmp	r0, #0
 80049b8:	f43f af2b 	beq.w	8004812 <follow_path+0x3e>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 80049bc:	f240 11b5 	movw	r1, #437	@ 0x1b5
 80049c0:	f001 fb18 	bl	8005ff4 <ff_oem2uni>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 80049c4:	4604      	mov	r4, r0
 80049c6:	b1f0      	cbz	r0, 8004a06 <follow_path+0x232>
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 80049c8:	281f      	cmp	r0, #31
 80049ca:	f67f af22 	bls.w	8004812 <follow_path+0x3e>
 80049ce:	282f      	cmp	r0, #47	@ 0x2f
 80049d0:	d01d      	beq.n	8004a0e <follow_path+0x23a>
 80049d2:	285c      	cmp	r0, #92	@ 0x5c
 80049d4:	d01b      	beq.n	8004a0e <follow_path+0x23a>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80049d6:	287f      	cmp	r0, #127	@ 0x7f
 80049d8:	d804      	bhi.n	80049e4 <follow_path+0x210>
 80049da:	4601      	mov	r1, r0
 80049dc:	4834      	ldr	r0, [pc, #208]	@ (8004ab0 <follow_path+0x2dc>)
 80049de:	f007 fad4 	bl	800bf8a <strchr>
 80049e2:	b980      	cbnz	r0, 8004a06 <follow_path+0x232>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80049e4:	2f12      	cmp	r7, #18
 80049e6:	d00e      	beq.n	8004a06 <follow_path+0x232>
		lfn[di++] = wc;				/* Store the Unicode character */
 80049e8:	f82b 4017 	strh.w	r4, [fp, r7, lsl #1]
	for (;;) {
 80049ec:	3701      	adds	r7, #1
		uc = tchar2uni(&p);			/* Get a character */
 80049ee:	e7e0      	b.n	80049b2 <follow_path+0x1de>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80049f0:	9b01      	ldr	r3, [sp, #4]
 80049f2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80049f6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80049f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fc:	4419      	add	r1, r3
 80049fe:	f7ff fee0 	bl	80047c2 <ld_clust.isra.0>
 8004a02:	60a8      	str	r0, [r5, #8]
 8004a04:	e7d1      	b.n	80049aa <follow_path+0x1d6>
				break;
 8004a06:	2006      	movs	r0, #6
 8004a08:	e750      	b.n	80048ac <follow_path+0xd8>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004a0a:	2005      	movs	r0, #5
	return res;
 8004a0c:	e74e      	b.n	80048ac <follow_path+0xd8>
	if (wc < ' ') {				/* Stopped at end of the path? */
 8004a0e:	4653      	mov	r3, sl
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
 8004a10:	781c      	ldrb	r4, [r3, #0]
 8004a12:	469a      	mov	sl, r3
 8004a14:	2c2f      	cmp	r4, #47	@ 0x2f
 8004a16:	f103 0301 	add.w	r3, r3, #1
 8004a1a:	d0f9      	beq.n	8004a10 <follow_path+0x23c>
 8004a1c:	2c5c      	cmp	r4, #92	@ 0x5c
 8004a1e:	d0f7      	beq.n	8004a10 <follow_path+0x23c>
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 8004a20:	2c1f      	cmp	r4, #31
 8004a22:	bf8c      	ite	hi
 8004a24:	2400      	movhi	r4, #0
 8004a26:	2401      	movls	r4, #1
 8004a28:	00a4      	lsls	r4, r4, #2
		wc = lfn[di - 1];
 8004a2a:	f1ab 0202 	sub.w	r2, fp, #2
	while (di) {					/* Snip off trailing spaces and dots if exist */
 8004a2e:	2f00      	cmp	r7, #0
 8004a30:	f47f aef1 	bne.w	8004816 <follow_path+0x42>
	lfn[di] = 0;							/* LFN is created into the working buffer */
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	f82b 3017 	strh.w	r3, [fp, r7, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 8004a3c:	2f00      	cmp	r7, #0
 8004a3e:	d0e2      	beq.n	8004a06 <follow_path+0x232>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 8004a40:	2300      	movs	r3, #0
 8004a42:	f83b 2013 	ldrh.w	r2, [fp, r3, lsl #1]
 8004a46:	4619      	mov	r1, r3
 8004a48:	2a20      	cmp	r2, #32
 8004a4a:	f103 0301 	add.w	r3, r3, #1
 8004a4e:	d0f8      	beq.n	8004a42 <follow_path+0x26e>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8004a50:	b909      	cbnz	r1, 8004a56 <follow_path+0x282>
 8004a52:	2a2e      	cmp	r2, #46	@ 0x2e
 8004a54:	d102      	bne.n	8004a5c <follow_path+0x288>
 8004a56:	f044 0403 	orr.w	r4, r4, #3
 8004a5a:	b2e4      	uxtb	r4, r4
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 8004a5c:	f1ab 0202 	sub.w	r2, fp, #2
 8004a60:	f832 3017 	ldrh.w	r3, [r2, r7, lsl #1]
 8004a64:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a66:	d001      	beq.n	8004a6c <follow_path+0x298>
 8004a68:	3f01      	subs	r7, #1
 8004a6a:	d1f9      	bne.n	8004a60 <follow_path+0x28c>
	memset(dp->fn, ' ', 11);
 8004a6c:	f04f 3320 	mov.w	r3, #538976288	@ 0x20202020
	i = b = 0; ni = 8;
 8004a70:	f04f 0900 	mov.w	r9, #0
	memset(dp->fn, ' ', 11);
 8004a74:	646b      	str	r3, [r5, #68]	@ 0x44
 8004a76:	642b      	str	r3, [r5, #64]	@ 0x40
 8004a78:	f8c5 3047 	str.w	r3, [r5, #71]	@ 0x47
	i = b = 0; ni = 8;
 8004a7c:	46c8      	mov	r8, r9
 8004a7e:	2308      	movs	r3, #8
		wc = lfn[si++];					/* Get an LFN character */
 8004a80:	f83b 6011 	ldrh.w	r6, [fp, r1, lsl #1]
 8004a84:	1c4a      	adds	r2, r1, #1
		if (wc == 0) break;				/* Break on end of the LFN */
 8004a86:	2e00      	cmp	r6, #0
 8004a88:	f43f aedb 	beq.w	8004842 <follow_path+0x6e>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8004a8c:	2e20      	cmp	r6, #32
 8004a8e:	d005      	beq.n	8004a9c <follow_path+0x2c8>
 8004a90:	2e2e      	cmp	r6, #46	@ 0x2e
 8004a92:	f47f aec9 	bne.w	8004828 <follow_path+0x54>
 8004a96:	42ba      	cmp	r2, r7
 8004a98:	f43f aec6 	beq.w	8004828 <follow_path+0x54>
			cf |= NS_LOSS | NS_LFN;
 8004a9c:	f044 0403 	orr.w	r4, r4, #3
 8004aa0:	b2e4      	uxtb	r4, r4
		dp->fn[i++] = (BYTE)wc;
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	e7ec      	b.n	8004a80 <follow_path+0x2ac>
 8004aa6:	bf00      	nop
 8004aa8:	0800ee08 	.word	0x0800ee08
 8004aac:	0800eda1 	.word	0x0800eda1
 8004ab0:	0800ed98 	.word	0x0800ed98

08004ab4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8004ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 8004abc:	a803      	add	r0, sp, #12
{
 8004abe:	4614      	mov	r4, r2
	const TCHAR *rp = path;
 8004ac0:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8004ac2:	f7fe fa5a 	bl	8002f7a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004ac6:	1e05      	subs	r5, r0, #0
 8004ac8:	db1a      	blt.n	8004b00 <f_mount+0x4c>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8004aca:	4e0e      	ldr	r6, [pc, #56]	@ (8004b04 <f_mount+0x50>)
 8004acc:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]

	if (cfs) {					/* Unregister current filesystem object if registered */
 8004ad0:	b128      	cbz	r0, 8004ade <f_mount+0x2a>
		FatFs[vol] = 0;
 8004ad2:	2700      	movs	r7, #0
 8004ad4:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
#if FF_FS_LOCK
		clear_share(cfs);
 8004ad8:	f7fe f9f6 	bl	8002ec8 <clear_share>
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 8004adc:	7007      	strb	r7, [r0, #0]
	}

	if (fs) {					/* Register new filesystem object */
 8004ade:	9b01      	ldr	r3, [sp, #4]
 8004ae0:	b123      	cbz	r3, 8004aec <f_mount+0x38>
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8004ae2:	2200      	movs	r2, #0
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 8004ae4:	705d      	strb	r5, [r3, #1]
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8004ae6:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 8004ae8:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 8004aec:	b12c      	cbz	r4, 8004afa <f_mount+0x46>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004aee:	2200      	movs	r2, #0
 8004af0:	4668      	mov	r0, sp
 8004af2:	a901      	add	r1, sp, #4
 8004af4:	f7fe ff0c 	bl	8003910 <mount_volume>
 8004af8:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
}
 8004afa:	4620      	mov	r0, r4
 8004afc:	b005      	add	sp, #20
 8004afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8004b00:	240b      	movs	r4, #11
 8004b02:	e7fa      	b.n	8004afa <f_mount+0x46>
 8004b04:	20000910 	.word	0x20000910

08004b08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 8004b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b0c:	b0c5      	sub	sp, #276	@ 0x114
 8004b0e:	4690      	mov	r8, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004b10:	4605      	mov	r5, r0
{
 8004b12:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8004b14:	2800      	cmp	r0, #0
 8004b16:	f000 8164 	beq.w	8004de2 <f_open+0x2da>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8004b1a:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = mount_volume(&path, &fs, mode);
 8004b1e:	463a      	mov	r2, r7
 8004b20:	a903      	add	r1, sp, #12
 8004b22:	a801      	add	r0, sp, #4
 8004b24:	f7fe fef4 	bl	8003910 <mount_volume>
	if (res == FR_OK) {
 8004b28:	4681      	mov	r9, r0
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	f040 8151 	bne.w	8004dd2 <f_open+0x2ca>
		dj.obj.fs = fs;
 8004b30:	9e03      	ldr	r6, [sp, #12]
		INIT_NAMBUF(fs);
 8004b32:	ab04      	add	r3, sp, #16
 8004b34:	60f3      	str	r3, [r6, #12]
 8004b36:	ab24      	add	r3, sp, #144	@ 0x90
		res = follow_path(&dj, path);	/* Follow the file path */
 8004b38:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 8004b3a:	6133      	str	r3, [r6, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8004b3c:	a80e      	add	r0, sp, #56	@ 0x38
		dj.obj.fs = fs;
 8004b3e:	960e      	str	r6, [sp, #56]	@ 0x38
		res = follow_path(&dj, path);	/* Follow the file path */
 8004b40:	f7ff fe48 	bl	80047d4 <follow_path>
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8004b44:	4604      	mov	r4, r0
 8004b46:	b960      	cbnz	r0, 8004b62 <f_open+0x5a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004b48:	f99d 3083 	ldrsb.w	r3, [sp, #131]	@ 0x83
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	db5d      	blt.n	8004c0c <f_open+0x104>
				res = FR_INVALID_NAME;
			}
#if FF_FS_LOCK
			else {
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
 8004b50:	f018 0f3e 	tst.w	r8, #62	@ 0x3e
 8004b54:	bf14      	ite	ne
 8004b56:	2101      	movne	r1, #1
 8004b58:	2100      	moveq	r1, #0
 8004b5a:	a80e      	add	r0, sp, #56	@ 0x38
 8004b5c:	f7fe f92c 	bl	8002db8 <chk_share>
 8004b60:	4604      	mov	r4, r0
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004b62:	f018 0f1c 	tst.w	r8, #28
 8004b66:	f000 8098 	beq.w	8004c9a <f_open+0x192>
			if (res != FR_OK) {					/* No file, create new */
 8004b6a:	2c00      	cmp	r4, #0
 8004b6c:	d055      	beq.n	8004c1a <f_open+0x112>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004b6e:	2c04      	cmp	r4, #4
 8004b70:	d145      	bne.n	8004bfe <f_open+0xf6>
	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 8004b72:	2300      	movs	r3, #0
 8004b74:	499c      	ldr	r1, [pc, #624]	@ (8004de8 <f_open+0x2e0>)
 8004b76:	011a      	lsls	r2, r3, #4
 8004b78:	588a      	ldr	r2, [r1, r2]
 8004b7a:	2a00      	cmp	r2, #0
 8004b7c:	d148      	bne.n	8004c10 <f_open+0x108>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004b7e:	a80e      	add	r0, sp, #56	@ 0x38
 8004b80:	f7ff fc42 	bl	8004408 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8004b84:	4604      	mov	r4, r0
 8004b86:	2800      	cmp	r0, #0
 8004b88:	d139      	bne.n	8004bfe <f_open+0xf6>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004b8a:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8004b8e:	0738      	lsls	r0, r7, #28
 8004b90:	f140 8094 	bpl.w	8004cbc <f_open+0x1b4>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8004b94:	7833      	ldrb	r3, [r6, #0]
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d14a      	bne.n	8004c30 <f_open+0x128>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8004b9a:	6934      	ldr	r4, [r6, #16]
					init_alloc_info(fs, &fp->obj);
 8004b9c:	4629      	mov	r1, r5
 8004b9e:	4620      	mov	r0, r4
					fp->obj.fs = fs;
 8004ba0:	602e      	str	r6, [r5, #0]
					init_alloc_info(fs, &fp->obj);
 8004ba2:	f7ff fdf9 	bl	8004798 <init_alloc_info.isra.0>
					/* Set directory entry block initial state */
					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
 8004ba6:	221e      	movs	r2, #30
 8004ba8:	2100      	movs	r1, #0
 8004baa:	1ca0      	adds	r0, r4, #2
 8004bac:	f007 f9d6 	bl	800bf5c <memset>
					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 8004bb0:	6930      	ldr	r0, [r6, #16]
 8004bb2:	221a      	movs	r2, #26
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	3026      	adds	r0, #38	@ 0x26
 8004bb8:	f007 f9d0 	bl	800bf5c <memset>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	6933      	ldr	r3, [r6, #16]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
					fs->dirbuf[XDIR_GenFlags] = 1;
					res = store_xdir(&dj);
 8004bc0:	a80e      	add	r0, sp, #56	@ 0x38
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 8004bc2:	711a      	strb	r2, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8004bc4:	2200      	movs	r2, #0
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 8004bc6:	6933      	ldr	r3, [r6, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8004bc8:	721a      	strb	r2, [r3, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8004bca:	725a      	strb	r2, [r3, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 8004bcc:	2261      	movs	r2, #97	@ 0x61
 8004bce:	729a      	strb	r2, [r3, #10]
	*ptr++ = (BYTE)val;
 8004bd0:	225b      	movs	r2, #91	@ 0x5b
 8004bd2:	72da      	strb	r2, [r3, #11]
					fs->dirbuf[XDIR_GenFlags] = 1;
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	6933      	ldr	r3, [r6, #16]
 8004bd8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					res = store_xdir(&dj);
 8004bdc:	f7ff fa7e 	bl	80040dc <store_xdir>
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 8004be0:	4604      	mov	r4, r0
 8004be2:	b960      	cbnz	r0, 8004bfe <f_open+0xf6>
 8004be4:	68a9      	ldr	r1, [r5, #8]
 8004be6:	2900      	cmp	r1, #0
 8004be8:	d064      	beq.n	8004cb4 <f_open+0x1ac>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8004bea:	4602      	mov	r2, r0
 8004bec:	4628      	mov	r0, r5
 8004bee:	f7fe fd71 	bl	80036d4 <remove_chain>
 8004bf2:	4604      	mov	r4, r0
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8004bf4:	68ab      	ldr	r3, [r5, #8]
 8004bf6:	3b01      	subs	r3, #1
					if (cl != 0) {						/* Remove the cluster chain if exist */
						sc = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
						if (res == FR_OK) {
							res = move_window(fs, sc);
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004bf8:	6173      	str	r3, [r6, #20]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 8004bfa:	2c00      	cmp	r4, #0
 8004bfc:	d05a      	beq.n	8004cb4 <f_open+0x1ac>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004bfe:	2300      	movs	r3, #0
 8004c00:	46a1      	mov	r9, r4
 8004c02:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 8004c04:	4648      	mov	r0, r9
 8004c06:	b045      	add	sp, #276	@ 0x114
 8004c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				res = FR_INVALID_NAME;
 8004c0c:	2406      	movs	r4, #6
 8004c0e:	e7a8      	b.n	8004b62 <f_open+0x5a>
	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 8004c10:	3301      	adds	r3, #1
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d1af      	bne.n	8004b76 <f_open+0x6e>
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004c16:	2412      	movs	r4, #18
 8004c18:	e7f1      	b.n	8004bfe <f_open+0xf6>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004c1a:	f89d 303e 	ldrb.w	r3, [sp, #62]	@ 0x3e
 8004c1e:	f013 0f11 	tst.w	r3, #17
 8004c22:	f040 80da 	bne.w	8004dda <f_open+0x2d2>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004c26:	f018 0f04 	tst.w	r8, #4
 8004c2a:	d0b0      	beq.n	8004b8e <f_open+0x86>
 8004c2c:	2408      	movs	r4, #8
 8004c2e:	e7e6      	b.n	8004bfe <f_open+0xf6>
	*ptr++ = (BYTE)val; val >>= 8;
 8004c30:	2400      	movs	r4, #0
	*ptr++ = (BYTE)val;
 8004c32:	225b      	movs	r2, #91	@ 0x5b
	*ptr++ = (BYTE)val; val >>= 8;
 8004c34:	2161      	movs	r1, #97	@ 0x61
					st_dword(dj.dir + DIR_CrtTime, tm);
 8004c36:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
	*ptr++ = (BYTE)val;
 8004c38:	745a      	strb	r2, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c3a:	739c      	strb	r4, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c3c:	73dc      	strb	r4, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c3e:	7419      	strb	r1, [r3, #16]
					st_dword(dj.dir + DIR_ModTime, tm);
 8004c40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
	*ptr++ = (BYTE)val;
 8004c42:	765a      	strb	r2, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c44:	759c      	strb	r4, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c46:	75dc      	strb	r4, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c48:	7619      	strb	r1, [r3, #24]
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8004c4a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8004c4c:	7830      	ldrb	r0, [r6, #0]
 8004c4e:	f7ff fdb8 	bl	80047c2 <ld_clust.isra.0>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004c52:	2320      	movs	r3, #32
 8004c54:	72cb      	strb	r3, [r1, #11]
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8004c56:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004c58:	4622      	mov	r2, r4
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8004c5e:	f7fe faea 	bl	8003236 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004c62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
	*ptr++ = (BYTE)val; val >>= 8;
 8004c64:	771c      	strb	r4, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c66:	775c      	strb	r4, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c68:	779c      	strb	r4, [r3, #30]
	*ptr++ = (BYTE)val;
 8004c6a:	77dc      	strb	r4, [r3, #31]
					fs->wflag = 1;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	7133      	strb	r3, [r6, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8004c70:	f1b8 0f00 	cmp.w	r8, #0
 8004c74:	d01e      	beq.n	8004cb4 <f_open+0x1ac>
						res = remove_chain(&dj.obj, cl, 0);
 8004c76:	4622      	mov	r2, r4
 8004c78:	4641      	mov	r1, r8
 8004c7a:	a80e      	add	r0, sp, #56	@ 0x38
						sc = fs->winsect;
 8004c7c:	f8d6 a038 	ldr.w	sl, [r6, #56]	@ 0x38
						res = remove_chain(&dj.obj, cl, 0);
 8004c80:	f7fe fd28 	bl	80036d4 <remove_chain>
						if (res == FR_OK) {
 8004c84:	4604      	mov	r4, r0
 8004c86:	2800      	cmp	r0, #0
 8004c88:	d1b9      	bne.n	8004bfe <f_open+0xf6>
							res = move_window(fs, sc);
 8004c8a:	4651      	mov	r1, sl
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	f7fe fade 	bl	800324e <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004c92:	f108 33ff 	add.w	r3, r8, #4294967295
							res = move_window(fs, sc);
 8004c96:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004c98:	e7ae      	b.n	8004bf8 <f_open+0xf0>
			if (res == FR_OK) {					/* Is the object exsiting? */
 8004c9a:	2c00      	cmp	r4, #0
 8004c9c:	d1af      	bne.n	8004bfe <f_open+0xf6>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8004c9e:	f89d 303e 	ldrb.w	r3, [sp, #62]	@ 0x3e
 8004ca2:	06da      	lsls	r2, r3, #27
 8004ca4:	f100 8097 	bmi.w	8004dd6 <f_open+0x2ce>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8004ca8:	f018 0f02 	tst.w	r8, #2
 8004cac:	d002      	beq.n	8004cb4 <f_open+0x1ac>
 8004cae:	07dc      	lsls	r4, r3, #31
 8004cb0:	f100 8093 	bmi.w	8004dda <f_open+0x2d2>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8004cb4:	0738      	lsls	r0, r7, #28
 8004cb6:	bf48      	it	mi
 8004cb8:	f047 0740 	orrmi.w	r7, r7, #64	@ 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004cbc:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
			fp->dir_ptr = dj.dir;
 8004cbe:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 8004cc0:	2f01      	cmp	r7, #1
 8004cc2:	bf94      	ite	ls
 8004cc4:	2100      	movls	r1, #0
 8004cc6:	2101      	movhi	r1, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004cc8:	64ab      	str	r3, [r5, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 8004cca:	64ec      	str	r4, [r5, #76]	@ 0x4c
			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 8004ccc:	a80e      	add	r0, sp, #56	@ 0x38
 8004cce:	f7fe f8a1 	bl	8002e14 <inc_share>
 8004cd2:	62e8      	str	r0, [r5, #44]	@ 0x2c
			if (fp->obj.lockid == 0) res = FR_INT_ERR;
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	f000 8082 	beq.w	8004dde <f_open+0x2d6>
			if (fs->fs_type == FS_EXFAT) {
 8004cda:	7830      	ldrb	r0, [r6, #0]
 8004cdc:	2804      	cmp	r0, #4
 8004cde:	d166      	bne.n	8004dae <f_open+0x2a6>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8004ce0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8004ce2:	f89d 203f 	ldrb.w	r2, [sp, #63]	@ 0x3f
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8004ce6:	622b      	str	r3, [r5, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8004ce8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
				init_alloc_info(fs, &fp->obj);
 8004cea:	4629      	mov	r1, r5
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8004cec:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	626b      	str	r3, [r5, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8004cf4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
				init_alloc_info(fs, &fp->obj);
 8004cf6:	6930      	ldr	r0, [r6, #16]
				fp->obj.c_ofs = dj.blk_ofs;
 8004cf8:	62ab      	str	r3, [r5, #40]	@ 0x28
				init_alloc_info(fs, &fp->obj);
 8004cfa:	f7ff fd4d 	bl	8004798 <init_alloc_info.isra.0>
			fp->obj.id = fs->id;
 8004cfe:	88f3      	ldrh	r3, [r6, #6]
			fp->cltbl = 0;		/* Disable fast seek mode */
 8004d00:	2400      	movs	r4, #0
			fp->fptr = 0;		/* Set file pointer top of the file */
 8004d02:	2200      	movs	r2, #0
			fp->obj.id = fs->id;
 8004d04:	80ab      	strh	r3, [r5, #4]
			fp->fptr = 0;		/* Set file pointer top of the file */
 8004d06:	2300      	movs	r3, #0
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8004d08:	f105 0854 	add.w	r8, r5, #84	@ 0x54
			fp->fptr = 0;		/* Set file pointer top of the file */
 8004d0c:	e9c5 230e 	strd	r2, r3, [r5, #56]	@ 0x38
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8004d10:	4621      	mov	r1, r4
 8004d12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d16:	4640      	mov	r0, r8
			fp->cltbl = 0;		/* Disable fast seek mode */
 8004d18:	652c      	str	r4, [r5, #80]	@ 0x50
			fp->obj.fs = fs;	/* Validate the file object */
 8004d1a:	602e      	str	r6, [r5, #0]
			fp->flag = mode;	/* Set file access mode */
 8004d1c:	f885 7030 	strb.w	r7, [r5, #48]	@ 0x30
			fp->err = 0;		/* Clear error flag */
 8004d20:	f885 4031 	strb.w	r4, [r5, #49]	@ 0x31
			fp->sect = 0;		/* Invalidate current data sector */
 8004d24:	646c      	str	r4, [r5, #68]	@ 0x44
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8004d26:	f007 f919 	bl	800bf5c <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004d2a:	06ba      	lsls	r2, r7, #26
 8004d2c:	f57f af6a 	bpl.w	8004c04 <f_open+0xfc>
 8004d30:	e9d5 7a04 	ldrd	r7, sl, [r5, #16]
 8004d34:	ea57 030a 	orrs.w	r3, r7, sl
 8004d38:	f43f af64 	beq.w	8004c04 <f_open+0xfc>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004d3c:	f8b6 b00a 	ldrh.w	fp, [r6, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004d40:	e9c5 7a0e 	strd	r7, sl, [r5, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004d44:	ea4f 2b4b 	mov.w	fp, fp, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004d48:	45bb      	cmp	fp, r7
 8004d4a:	eb74 030a 	sbcs.w	r3, r4, sl
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004d4e:	68a9      	ldr	r1, [r5, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004d50:	d210      	bcs.n	8004d74 <f_open+0x26c>
					clst = get_fat(&fp->obj, clst);
 8004d52:	4628      	mov	r0, r5
 8004d54:	f7fe fb33 	bl	80033be <get_fat>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004d58:	ebb7 070b 	subs.w	r7, r7, fp
 8004d5c:	f16a 0a00 	sbc.w	sl, sl, #0
					if (clst <= 1) res = FR_INT_ERR;
 8004d60:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8004d62:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8004d64:	d92f      	bls.n	8004dc6 <f_open+0x2be>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004d66:	1c43      	adds	r3, r0, #1
 8004d68:	d02f      	beq.n	8004dca <f_open+0x2c2>
 8004d6a:	45bb      	cmp	fp, r7
 8004d6c:	eb74 030a 	sbcs.w	r3, r4, sl
 8004d70:	d3ef      	bcc.n	8004d52 <f_open+0x24a>
 8004d72:	2400      	movs	r4, #0
				fp->clust = clst;
 8004d74:	6429      	str	r1, [r5, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004d76:	b9b4      	cbnz	r4, 8004da6 <f_open+0x29e>
 8004d78:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f43f af41 	beq.w	8004c04 <f_open+0xfc>
					sc = clst2sect(fs, clst);
 8004d82:	4630      	mov	r0, r6
 8004d84:	f7fe f8b0 	bl	8002ee8 <clst2sect>
					if (sc == 0) {
 8004d88:	b308      	cbz	r0, 8004dce <f_open+0x2c6>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004d8a:	0a7f      	lsrs	r7, r7, #9
 8004d8c:	ea47 57ca 	orr.w	r7, r7, sl, lsl #23
 8004d90:	19c2      	adds	r2, r0, r7
 8004d92:	646a      	str	r2, [r5, #68]	@ 0x44
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	4641      	mov	r1, r8
 8004d98:	7870      	ldrb	r0, [r6, #1]
 8004d9a:	f7fd fe8f 	bl	8002abc <disk_read>
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	f43f af30 	beq.w	8004c04 <f_open+0xfc>
 8004da4:	2401      	movs	r4, #1
				if (res != FR_OK) dec_share(fp->obj.lockid); /* Decrement file open counter if seek failed */
 8004da6:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8004da8:	f7fe f872 	bl	8002e90 <dec_share>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004dac:	e727      	b.n	8004bfe <f_open+0xf6>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004dae:	4621      	mov	r1, r4
 8004db0:	f7ff fd07 	bl	80047c2 <ld_clust.isra.0>
 8004db4:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004db6:	f104 001c 	add.w	r0, r4, #28
 8004dba:	f7fd ffdf 	bl	8002d7c <ld_dword>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	6128      	str	r0, [r5, #16]
 8004dc2:	616b      	str	r3, [r5, #20]
 8004dc4:	e79b      	b.n	8004cfe <f_open+0x1f6>
					if (clst <= 1) res = FR_INT_ERR;
 8004dc6:	2402      	movs	r4, #2
 8004dc8:	e7d4      	b.n	8004d74 <f_open+0x26c>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004dca:	2401      	movs	r4, #1
 8004dcc:	e7d2      	b.n	8004d74 <f_open+0x26c>
						res = FR_INT_ERR;
 8004dce:	2402      	movs	r4, #2
 8004dd0:	e7e9      	b.n	8004da6 <f_open+0x29e>
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	e713      	b.n	8004bfe <f_open+0xf6>
					res = FR_NO_FILE;
 8004dd6:	2404      	movs	r4, #4
 8004dd8:	e711      	b.n	8004bfe <f_open+0xf6>
					res = FR_DENIED;
 8004dda:	2407      	movs	r4, #7
 8004ddc:	e70f      	b.n	8004bfe <f_open+0xf6>
			if (fp->obj.lockid == 0) res = FR_INT_ERR;
 8004dde:	2402      	movs	r4, #2
 8004de0:	e70d      	b.n	8004bfe <f_open+0xf6>
	if (!fp) return FR_INVALID_OBJECT;
 8004de2:	f04f 0909 	mov.w	r9, #9
 8004de6:	e70d      	b.n	8004c04 <f_open+0xfc>
 8004de8:	200008cc 	.word	0x200008cc

08004dec <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 8004dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df0:	469a      	mov	sl, r3
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8004df2:	2300      	movs	r3, #0
{
 8004df4:	b085      	sub	sp, #20
 8004df6:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 8004df8:	f8ca 3000 	str.w	r3, [sl]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004dfc:	a903      	add	r1, sp, #12
{
 8004dfe:	4604      	mov	r4, r0
 8004e00:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004e02:	f7fe f8d7 	bl	8002fb4 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004e06:	4605      	mov	r5, r0
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d13a      	bne.n	8004e82 <f_write+0x96>
 8004e0c:	f894 5031 	ldrb.w	r5, [r4, #49]	@ 0x31
 8004e10:	bbbd      	cbnz	r5, 8004e82 <f_write+0x96>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004e12:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8004e16:	079a      	lsls	r2, r3, #30
 8004e18:	f140 80d2 	bpl.w	8004fc0 <f_write+0x1d4>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004e1c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004e20:	f898 3000 	ldrb.w	r3, [r8]
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d003      	beq.n	8004e30 <f_write+0x44>
 8004e28:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004e2a:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004e2c:	bf28      	it	cs
 8004e2e:	43de      	mvncs	r6, r3
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8004e30:	f104 0354 	add.w	r3, r4, #84	@ 0x54
 8004e34:	9300      	str	r3, [sp, #0]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8004e36:	b1f6      	cbz	r6, 8004e76 <f_write+0x8a>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004e38:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8004e3c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004e40:	2900      	cmp	r1, #0
 8004e42:	f040 80a8 	bne.w	8004f96 <f_write+0x1aa>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8004e46:	f8b8 700a 	ldrh.w	r7, [r8, #10]
 8004e4a:	0a51      	lsrs	r1, r2, #9
 8004e4c:	3f01      	subs	r7, #1
 8004e4e:	ea41 51c3 	orr.w	r1, r1, r3, lsl #23
			if (csect == 0) {				/* On the cluster boundary? */
 8004e52:	400f      	ands	r7, r1
 8004e54:	d129      	bne.n	8004eaa <f_write+0xbe>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004e56:	ea52 0103 	orrs.w	r1, r2, r3
 8004e5a:	d106      	bne.n	8004e6a <f_write+0x7e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8004e5c:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8004e5e:	b9b0      	cbnz	r0, 8004e8e <f_write+0xa2>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004e60:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004e62:	4620      	mov	r0, r4
 8004e64:	f7fe ff24 	bl	8003cb0 <create_chain>
 8004e68:	e004      	b.n	8004e74 <f_write+0x88>
					if (fp->cltbl) {
 8004e6a:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8004e6c:	b169      	cbz	r1, 8004e8a <f_write+0x9e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f7fe f845 	bl	8002efe <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004e74:	b958      	cbnz	r0, 8004e8e <f_write+0xa2>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8004e76:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8004e7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e7e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
}
 8004e82:	4628      	mov	r0, r5
 8004e84:	b005      	add	sp, #20
 8004e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004e8a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8004e8c:	e7e9      	b.n	8004e62 <f_write+0x76>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004e8e:	2801      	cmp	r0, #1
 8004e90:	d103      	bne.n	8004e9a <f_write+0xae>
 8004e92:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004e94:	f884 5031 	strb.w	r5, [r4, #49]	@ 0x31
 8004e98:	e7f3      	b.n	8004e82 <f_write+0x96>
 8004e9a:	1c43      	adds	r3, r0, #1
 8004e9c:	d101      	bne.n	8004ea2 <f_write+0xb6>
 8004e9e:	2501      	movs	r5, #1
 8004ea0:	e7f8      	b.n	8004e94 <f_write+0xa8>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004ea2:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8004ea4:	6420      	str	r0, [r4, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004ea6:	b903      	cbnz	r3, 8004eaa <f_write+0xbe>
 8004ea8:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004eaa:	f994 3030 	ldrsb.w	r3, [r4, #48]	@ 0x30
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	da0f      	bge.n	8004ed2 <f_write+0xe6>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004eb6:	f898 0001 	ldrb.w	r0, [r8, #1]
 8004eba:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 8004ebe:	f7fd fe12 	bl	8002ae6 <disk_write>
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	d1eb      	bne.n	8004e9e <f_write+0xb2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004ec6:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8004eca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ece:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8004ed2:	4640      	mov	r0, r8
 8004ed4:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8004ed6:	f7fe f807 	bl	8002ee8 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d0d9      	beq.n	8004e92 <f_write+0xa6>
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8004ede:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
			sect += csect;
 8004ee2:	eb07 0b00 	add.w	fp, r7, r0
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8004ee6:	d340      	bcc.n	8004f6a <f_write+0x17e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004ee8:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 8004eec:	eb07 2056 	add.w	r0, r7, r6, lsr #9
 8004ef0:	4288      	cmp	r0, r1
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8004ef2:	ea4f 2356 	mov.w	r3, r6, lsr #9
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004ef6:	465a      	mov	r2, fp
					cc = fs->csize - csect;
 8004ef8:	bf88      	it	hi
 8004efa:	1bcb      	subhi	r3, r1, r7
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004efc:	f898 0001 	ldrb.w	r0, [r8, #1]
 8004f00:	4649      	mov	r1, r9
 8004f02:	9301      	str	r3, [sp, #4]
 8004f04:	f7fd fdef 	bl	8002ae6 <disk_write>
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	d1c8      	bne.n	8004e9e <f_write+0xb2>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004f0c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004f0e:	9b01      	ldr	r3, [sp, #4]
 8004f10:	eba1 010b 	sub.w	r1, r1, fp
 8004f14:	4299      	cmp	r1, r3
 8004f16:	d20e      	bcs.n	8004f36 <f_write+0x14a>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8004f18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f1c:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8004f20:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8004f24:	f007 f92b 	bl	800c17e <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004f28:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
 8004f2c:	9b01      	ldr	r3, [sp, #4]
 8004f2e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f32:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004f36:	025f      	lsls	r7, r3, #9
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8004f38:	f8da 3000 	ldr.w	r3, [sl]
 8004f3c:	1bf6      	subs	r6, r6, r7
 8004f3e:	443b      	add	r3, r7
 8004f40:	f8ca 3000 	str.w	r3, [sl]
 8004f44:	44b9      	add	r9, r7
 8004f46:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8004f4a:	18bf      	adds	r7, r7, r2
 8004f4c:	f143 0300 	adc.w	r3, r3, #0
 8004f50:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8004f54:	42b9      	cmp	r1, r7
 8004f56:	eb72 0003 	sbcs.w	r0, r2, r3
 8004f5a:	bf3c      	itt	cc
 8004f5c:	4639      	movcc	r1, r7
 8004f5e:	461a      	movcc	r2, r3
 8004f60:	e9c4 730e 	strd	r7, r3, [r4, #56]	@ 0x38
 8004f64:	e9c4 1204 	strd	r1, r2, [r4, #16]
 8004f68:	e765      	b.n	8004e36 <f_write+0x4a>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004f6a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
				fp->fptr < fp->obj.objsize &&
 8004f6c:	e9d4 730e 	ldrd	r7, r3, [r4, #56]	@ 0x38
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004f70:	4559      	cmp	r1, fp
 8004f72:	d00e      	beq.n	8004f92 <f_write+0x1a6>
 8004f74:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8004f78:	4287      	cmp	r7, r0
 8004f7a:	418b      	sbcs	r3, r1
 8004f7c:	d209      	bcs.n	8004f92 <f_write+0x1a6>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8004f7e:	2301      	movs	r3, #1
 8004f80:	465a      	mov	r2, fp
 8004f82:	f898 0001 	ldrb.w	r0, [r8, #1]
 8004f86:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 8004f8a:	f7fd fd97 	bl	8002abc <disk_read>
				fp->fptr < fp->obj.objsize &&
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	d185      	bne.n	8004e9e <f_write+0xb2>
			fp->sect = sect;
 8004f92:	f8c4 b044 	str.w	fp, [r4, #68]	@ 0x44
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8004f96:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8004f98:	9b00      	ldr	r3, [sp, #0]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8004f9a:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8004f9e:	f5c0 7700 	rsb	r7, r0, #512	@ 0x200
 8004fa2:	42b7      	cmp	r7, r6
 8004fa4:	bf28      	it	cs
 8004fa6:	4637      	movcs	r7, r6
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8004fa8:	4418      	add	r0, r3
 8004faa:	463a      	mov	r2, r7
 8004fac:	4649      	mov	r1, r9
 8004fae:	f007 f8e6 	bl	800c17e <memcpy>
		fp->flag |= FA_DIRTY;
 8004fb2:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8004fb6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004fba:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8004fbe:	e7bb      	b.n	8004f38 <f_write+0x14c>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004fc0:	2507      	movs	r5, #7
 8004fc2:	e75e      	b.n	8004e82 <f_write+0x96>

08004fc4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 8004fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc6:	b0c3      	sub	sp, #268	@ 0x10c
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004fc8:	a901      	add	r1, sp, #4
{
 8004fca:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004fcc:	f7fd fff2 	bl	8002fb4 <validate>
	if (res == FR_OK) {
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	2800      	cmp	r0, #0
 8004fd4:	f040 8081 	bne.w	80050da <f_sync+0x116>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8004fd8:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 8004fdc:	f013 0440 	ands.w	r4, r3, #64	@ 0x40
 8004fe0:	d07b      	beq.n	80050da <f_sync+0x116>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004fe2:	061b      	lsls	r3, r3, #24
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004fe4:	9e01      	ldr	r6, [sp, #4]
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004fe6:	d50f      	bpl.n	8005008 <f_sync+0x44>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004fe8:	2301      	movs	r3, #1
 8004fea:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8004fec:	7870      	ldrb	r0, [r6, #1]
 8004fee:	f105 0154 	add.w	r1, r5, #84	@ 0x54
 8004ff2:	f7fd fd78 	bl	8002ae6 <disk_write>
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	f040 8093 	bne.w	8005122 <f_sync+0x15e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004ffc:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 8005000:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005004:	f885 3030 	strb.w	r3, [r5, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8005008:	7833      	ldrb	r3, [r6, #0]
 800500a:	2b04      	cmp	r3, #4
 800500c:	d168      	bne.n	80050e0 <f_sync+0x11c>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800500e:	4628      	mov	r0, r5
 8005010:	f7fe fb48 	bl	80036a4 <fill_first_frag>
				if (res == FR_OK) {
 8005014:	4604      	mov	r4, r0
 8005016:	2800      	cmp	r0, #0
 8005018:	d15f      	bne.n	80050da <f_sync+0x116>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800501a:	f04f 32ff 	mov.w	r2, #4294967295
 800501e:	4628      	mov	r0, r5
 8005020:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8005022:	f7fe fb27 	bl	8003674 <fill_last_frag>
				}
				if (res == FR_OK) {
 8005026:	4604      	mov	r4, r0
 8005028:	2800      	cmp	r0, #0
 800502a:	d156      	bne.n	80050da <f_sync+0x116>
					DIR dj;
					DEF_NAMBUF

					INIT_NAMBUF(fs);
 800502c:	ab02      	add	r3, sp, #8
 800502e:	60f3      	str	r3, [r6, #12]
 8005030:	ab22      	add	r3, sp, #136	@ 0x88
 8005032:	6133      	str	r3, [r6, #16]
	dp->obj.fs = obj->fs;
 8005034:	682b      	ldr	r3, [r5, #0]
	dp->blk_ofs = obj->c_ofs;
 8005036:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
	dp->obj.fs = obj->fs;
 8005038:	930c      	str	r3, [sp, #48]	@ 0x30
	dp->obj.sclust = obj->c_scl;
 800503a:	6a2b      	ldr	r3, [r5, #32]
	dp->obj.n_frag = 0;
 800503c:	9013      	str	r0, [sp, #76]	@ 0x4c
	dp->obj.sclust = obj->c_scl;
 800503e:	930e      	str	r3, [sp, #56]	@ 0x38
	dp->obj.stat = (BYTE)obj->c_size;
 8005040:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
	dp->blk_ofs = obj->c_ofs;
 8005042:	911f      	str	r1, [sp, #124]	@ 0x7c
	dp->obj.stat = (BYTE)obj->c_size;
 8005044:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8005048:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800504c:	e9cd 3010 	strd	r3, r0, [sp, #64]	@ 0x40
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8005050:	a80c      	add	r0, sp, #48	@ 0x30
 8005052:	f7fe fa49 	bl	80034e8 <dir_sdi>
	if (res == FR_OK) {
 8005056:	4604      	mov	r4, r0
 8005058:	2800      	cmp	r0, #0
 800505a:	d13e      	bne.n	80050da <f_sync+0x116>
		res = load_xdir(dp);		/* Load the object's entry block */
 800505c:	a80c      	add	r0, sp, #48	@ 0x30
 800505e:	f7fe ffcd 	bl	8003ffc <load_xdir>
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
					if (res == FR_OK) {
 8005062:	4604      	mov	r4, r0
 8005064:	2800      	cmp	r0, #0
 8005066:	d138      	bne.n	80050da <f_sync+0x116>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 8005068:	6932      	ldr	r2, [r6, #16]
 800506a:	7913      	ldrb	r3, [r2, #4]
 800506c:	f043 0320 	orr.w	r3, r3, #32
 8005070:	7113      	strb	r3, [r2, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 8005072:	79eb      	ldrb	r3, [r5, #7]
 8005074:	6932      	ldr	r2, [r6, #16]
 8005076:	f043 0301 	orr.w	r3, r3, #1
 800507a:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
 800507e:	6930      	ldr	r0, [r6, #16]
 8005080:	68a9      	ldr	r1, [r5, #8]
 8005082:	3034      	adds	r0, #52	@ 0x34
 8005084:	f7fd fe80 	bl	8002d88 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
 8005088:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800508c:	6930      	ldr	r0, [r6, #16]
 800508e:	3038      	adds	r0, #56	@ 0x38
 8005090:	f7fd fe82 	bl	8002d98 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 8005094:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8005098:	6930      	ldr	r0, [r6, #16]
 800509a:	3028      	adds	r0, #40	@ 0x28
 800509c:	f7fd fe7c 	bl	8002d98 <st_qword>
	*ptr++ = (BYTE)val; val >>= 8;
 80050a0:	2261      	movs	r2, #97	@ 0x61
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 80050a2:	6933      	ldr	r3, [r6, #16]
						fs->dirbuf[XDIR_ModTime10] = 0;
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
						res = store_xdir(&dj);	/* Restore it to the directory */
 80050a4:	a80c      	add	r0, sp, #48	@ 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 80050a6:	739a      	strb	r2, [r3, #14]
	*ptr++ = (BYTE)val;
 80050a8:	225b      	movs	r2, #91	@ 0x5b
	*ptr++ = (BYTE)val; val >>= 8;
 80050aa:	731c      	strb	r4, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 80050ac:	735c      	strb	r4, [r3, #13]
	*ptr++ = (BYTE)val;
 80050ae:	73da      	strb	r2, [r3, #15]
						fs->dirbuf[XDIR_ModTime10] = 0;
 80050b0:	6933      	ldr	r3, [r6, #16]
 80050b2:	755c      	strb	r4, [r3, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 80050b4:	6933      	ldr	r3, [r6, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 80050b6:	741c      	strb	r4, [r3, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 80050b8:	745c      	strb	r4, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 80050ba:	749c      	strb	r4, [r3, #18]
	*ptr++ = (BYTE)val;
 80050bc:	74dc      	strb	r4, [r3, #19]
						res = store_xdir(&dj);	/* Restore it to the directory */
 80050be:	f7ff f80d 	bl	80040dc <store_xdir>
						if (res == FR_OK) {
 80050c2:	4604      	mov	r4, r0
 80050c4:	b948      	cbnz	r0, 80050da <f_sync+0x116>
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
					res = sync_fs(fs);					/* Restore it to the directory */
 80050c6:	4630      	mov	r0, r6
 80050c8:	f7fe fbac 	bl	8003824 <sync_fs>
 80050cc:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 80050ce:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 80050d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050d6:	f885 3030 	strb.w	r3, [r5, #48]	@ 0x30
			}
		}
	}

	LEAVE_FF(fs, res);
}
 80050da:	4620      	mov	r0, r4
 80050dc:	b043      	add	sp, #268	@ 0x10c
 80050de:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = move_window(fs, fp->dir_sect);
 80050e0:	4630      	mov	r0, r6
 80050e2:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 80050e4:	f7fe f8b3 	bl	800324e <move_window>
				if (res == FR_OK) {
 80050e8:	4604      	mov	r4, r0
 80050ea:	2800      	cmp	r0, #0
 80050ec:	d1f5      	bne.n	80050da <f_sync+0x116>
					dir = fp->dir_ptr;
 80050ee:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 80050f0:	7afb      	ldrb	r3, [r7, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 80050f2:	4639      	mov	r1, r7
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 80050f4:	f043 0320 	orr.w	r3, r3, #32
 80050f8:	72fb      	strb	r3, [r7, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 80050fa:	6828      	ldr	r0, [r5, #0]
 80050fc:	68aa      	ldr	r2, [r5, #8]
 80050fe:	f7fe f89a 	bl	8003236 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005102:	6929      	ldr	r1, [r5, #16]
 8005104:	f107 001c 	add.w	r0, r7, #28
 8005108:	f7fd fe3e 	bl	8002d88 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800510c:	2361      	movs	r3, #97	@ 0x61
 800510e:	763b      	strb	r3, [r7, #24]
	*ptr++ = (BYTE)val;
 8005110:	235b      	movs	r3, #91	@ 0x5b
 8005112:	767b      	strb	r3, [r7, #25]
					fs->wflag = 1;
 8005114:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8005116:	75bc      	strb	r4, [r7, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8005118:	75fc      	strb	r4, [r7, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 800511a:	74bc      	strb	r4, [r7, #18]
	*ptr++ = (BYTE)val;
 800511c:	74fc      	strb	r4, [r7, #19]
					fs->wflag = 1;
 800511e:	7133      	strb	r3, [r6, #4]
 8005120:	e7d1      	b.n	80050c6 <f_sync+0x102>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005122:	2401      	movs	r4, #1
 8005124:	e7d9      	b.n	80050da <f_sync+0x116>

08005126 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 8005126:	b513      	push	{r0, r1, r4, lr}
 8005128:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800512a:	f7ff ff4b 	bl	8004fc4 <f_sync>
	if (res == FR_OK)
 800512e:	b948      	cbnz	r0, 8005144 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005130:	4620      	mov	r0, r4
 8005132:	a901      	add	r1, sp, #4
 8005134:	f7fd ff3e 	bl	8002fb4 <validate>
		if (res == FR_OK) {
 8005138:	b920      	cbnz	r0, 8005144 <f_close+0x1e>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
 800513a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800513c:	f7fd fea8 	bl	8002e90 <dec_share>
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
 8005140:	b900      	cbnz	r0, 8005144 <f_close+0x1e>
 8005142:	6020      	str	r0, [r4, #0]
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8005144:	b002      	add	sp, #8
 8005146:	bd10      	pop	{r4, pc}

08005148 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8005148:	b570      	push	{r4, r5, r6, lr}
 800514a:	b0ae      	sub	sp, #184	@ 0xb8
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800514c:	4604      	mov	r4, r0
{
 800514e:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 8005150:	2800      	cmp	r0, #0
 8005152:	d04e      	beq.n	80051f2 <f_opendir+0xaa>

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
 8005154:	2200      	movs	r2, #0
 8005156:	a903      	add	r1, sp, #12
 8005158:	a801      	add	r0, sp, #4
 800515a:	f7fe fbd9 	bl	8003910 <mount_volume>
	if (res == FR_OK) {
 800515e:	4605      	mov	r5, r0
 8005160:	b9a0      	cbnz	r0, 800518c <f_opendir+0x44>
		dp->obj.fs = fs;
 8005162:	9e03      	ldr	r6, [sp, #12]
		INIT_NAMBUF(fs);
 8005164:	ab04      	add	r3, sp, #16
		dp->obj.fs = fs;
 8005166:	6026      	str	r6, [r4, #0]
		INIT_NAMBUF(fs);
 8005168:	60f3      	str	r3, [r6, #12]
 800516a:	ab0e      	add	r3, sp, #56	@ 0x38
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800516c:	4620      	mov	r0, r4
 800516e:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 8005170:	6133      	str	r3, [r6, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8005172:	f7ff fb2f 	bl	80047d4 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8005176:	4605      	mov	r5, r0
 8005178:	2800      	cmp	r0, #0
 800517a:	d135      	bne.n	80051e8 <f_opendir+0xa0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800517c:	f994 304b 	ldrsb.w	r3, [r4, #75]	@ 0x4b
 8005180:	2b00      	cmp	r3, #0
 8005182:	db17      	blt.n	80051b4 <f_opendir+0x6c>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 8005184:	79a3      	ldrb	r3, [r4, #6]
 8005186:	06db      	lsls	r3, r3, #27
 8005188:	d403      	bmi.n	8005192 <f_opendir+0x4a>
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800518a:	2505      	movs	r5, #5
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function failed */
 800518c:	2300      	movs	r3, #0
 800518e:	6023      	str	r3, [r4, #0]
 8005190:	e020      	b.n	80051d4 <f_opendir+0x8c>
					if (fs->fs_type == FS_EXFAT) {
 8005192:	7830      	ldrb	r0, [r6, #0]
 8005194:	2804      	cmp	r0, #4
 8005196:	d120      	bne.n	80051da <f_opendir+0x92>
						dp->obj.c_scl = dp->obj.sclust;	/* Get containing directory information */
 8005198:	68a3      	ldr	r3, [r4, #8]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800519a:	79e2      	ldrb	r2, [r4, #7]
						dp->obj.c_scl = dp->obj.sclust;	/* Get containing directory information */
 800519c:	6223      	str	r3, [r4, #32]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800519e:	6923      	ldr	r3, [r4, #16]
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 80051a0:	4621      	mov	r1, r4
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 80051a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80051a6:	4313      	orrs	r3, r2
 80051a8:	6263      	str	r3, [r4, #36]	@ 0x24
						dp->obj.c_ofs = dp->blk_ofs;
 80051aa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 80051ac:	6930      	ldr	r0, [r6, #16]
						dp->obj.c_ofs = dp->blk_ofs;
 80051ae:	62a3      	str	r3, [r4, #40]	@ 0x28
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 80051b0:	f7ff faf2 	bl	8004798 <init_alloc_info.isra.0>
				dp->obj.id = fs->id;
 80051b4:	88f3      	ldrh	r3, [r6, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80051b6:	2100      	movs	r1, #0
 80051b8:	4620      	mov	r0, r4
				dp->obj.id = fs->id;
 80051ba:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80051bc:	f7fe f994 	bl	80034e8 <dir_sdi>
				if (res == FR_OK) {
 80051c0:	4605      	mov	r5, r0
 80051c2:	b988      	cbnz	r0, 80051e8 <f_opendir+0xa0>
					if (dp->obj.sclust != 0) {
 80051c4:	68a3      	ldr	r3, [r4, #8]
 80051c6:	b16b      	cbz	r3, 80051e4 <f_opendir+0x9c>
						dp->obj.lockid = inc_share(dp, 0);	/* Lock the sub directory */
 80051c8:	4601      	mov	r1, r0
 80051ca:	4620      	mov	r0, r4
 80051cc:	f7fd fe22 	bl	8002e14 <inc_share>
 80051d0:	62e0      	str	r0, [r4, #44]	@ 0x2c
						if (!dp->obj.lockid) res = FR_TOO_MANY_OPEN_FILES;
 80051d2:	b160      	cbz	r0, 80051ee <f_opendir+0xa6>

	LEAVE_FF(fs, res);
}
 80051d4:	4628      	mov	r0, r5
 80051d6:	b02e      	add	sp, #184	@ 0xb8
 80051d8:	bd70      	pop	{r4, r5, r6, pc}
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80051da:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80051dc:	f7ff faf1 	bl	80047c2 <ld_clust.isra.0>
 80051e0:	60a0      	str	r0, [r4, #8]
 80051e2:	e7e7      	b.n	80051b4 <f_opendir+0x6c>
						dp->obj.lockid = 0;	/* Root directory need not to be locked */
 80051e4:	62e0      	str	r0, [r4, #44]	@ 0x2c
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function failed */
 80051e6:	e7f5      	b.n	80051d4 <f_opendir+0x8c>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80051e8:	2d04      	cmp	r5, #4
 80051ea:	d0ce      	beq.n	800518a <f_opendir+0x42>
 80051ec:	e7ce      	b.n	800518c <f_opendir+0x44>
						if (!dp->obj.lockid) res = FR_TOO_MANY_OPEN_FILES;
 80051ee:	2512      	movs	r5, #18
 80051f0:	e7cc      	b.n	800518c <f_opendir+0x44>
	if (!dp) return FR_INVALID_OBJECT;
 80051f2:	2509      	movs	r5, #9
 80051f4:	e7ee      	b.n	80051d4 <f_opendir+0x8c>

080051f6 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80051f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 80051f8:	a901      	add	r1, sp, #4
{
 80051fa:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 80051fc:	f7fd feda 	bl	8002fb4 <validate>
	if (res == FR_OK) {
 8005200:	4604      	mov	r4, r0
 8005202:	b918      	cbnz	r0, 800520c <f_closedir+0x16>
#if FF_FS_LOCK
		if (dp->obj.lockid) res = dec_share(dp->obj.lockid);	/* Decrement sub-directory open counter */
 8005204:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8005206:	b920      	cbnz	r0, 8005212 <f_closedir+0x1c>
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
 8005208:	2300      	movs	r3, #0
 800520a:	602b      	str	r3, [r5, #0]
#if FF_FS_REENTRANT
		unlock_volume(fs, FR_OK);	/* Unlock volume */
#endif
	}
	return res;
}
 800520c:	4620      	mov	r0, r4
 800520e:	b003      	add	sp, #12
 8005210:	bd30      	pop	{r4, r5, pc}
		if (dp->obj.lockid) res = dec_share(dp->obj.lockid);	/* Decrement sub-directory open counter */
 8005212:	f7fd fe3d 	bl	8002e90 <dec_share>
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
 8005216:	2800      	cmp	r0, #0
 8005218:	d0f6      	beq.n	8005208 <f_closedir+0x12>
 800521a:	4604      	mov	r4, r0
 800521c:	e7f6      	b.n	800520c <f_closedir+0x16>

0800521e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800521e:	b570      	push	{r4, r5, r6, lr}
 8005220:	b0ac      	sub	sp, #176	@ 0xb0
 8005222:	460d      	mov	r5, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8005224:	a901      	add	r1, sp, #4
{
 8005226:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8005228:	f7fd fec4 	bl	8002fb4 <validate>
	if (res == FR_OK) {
 800522c:	b9e8      	cbnz	r0, 800526a <f_readdir+0x4c>
		if (!fno) {
 800522e:	b935      	cbnz	r5, 800523e <f_readdir+0x20>
			res = dir_sdi(dp, 0);		/* Rewind the directory object */
 8005230:	4629      	mov	r1, r5
 8005232:	4620      	mov	r0, r4
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 8005234:	b02c      	add	sp, #176	@ 0xb0
 8005236:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			res = dir_sdi(dp, 0);		/* Rewind the directory object */
 800523a:	f7fe b955 	b.w	80034e8 <dir_sdi>
			INIT_NAMBUF(fs);
 800523e:	9b01      	ldr	r3, [sp, #4]
 8005240:	aa02      	add	r2, sp, #8
 8005242:	60da      	str	r2, [r3, #12]
 8005244:	aa0c      	add	r2, sp, #48	@ 0x30
			res = DIR_READ_FILE(dp);		/* Read an item */
 8005246:	4620      	mov	r0, r4
			INIT_NAMBUF(fs);
 8005248:	611a      	str	r2, [r3, #16]
			res = DIR_READ_FILE(dp);		/* Read an item */
 800524a:	f7fe ff77 	bl	800413c <dir_read.constprop.0>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800524e:	f010 06fb 	ands.w	r6, r0, #251	@ 0xfb
 8005252:	d10a      	bne.n	800526a <f_readdir+0x4c>
				get_fileinfo(dp, fno);		/* Get the object information */
 8005254:	4629      	mov	r1, r5
 8005256:	4620      	mov	r0, r4
 8005258:	f7fd ff02 	bl	8003060 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800525c:	4631      	mov	r1, r6
 800525e:	4620      	mov	r0, r4
 8005260:	f7fe fe1d 	bl	8003e9e <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8005264:	2804      	cmp	r0, #4
 8005266:	bf08      	it	eq
 8005268:	2000      	moveq	r0, #0
}
 800526a:	b02c      	add	sp, #176	@ 0xb0
 800526c:	bd70      	pop	{r4, r5, r6, pc}

0800526e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800526e:	b530      	push	{r4, r5, lr}
 8005270:	b0c3      	sub	sp, #268	@ 0x10c
 8005272:	9001      	str	r0, [sp, #4]
 8005274:	460d      	mov	r5, r1
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &dj.obj.fs, 0);
 8005276:	2200      	movs	r2, #0
 8005278:	a90c      	add	r1, sp, #48	@ 0x30
 800527a:	a801      	add	r0, sp, #4
 800527c:	f7fe fb48 	bl	8003910 <mount_volume>
	if (res == FR_OK) {
 8005280:	4604      	mov	r4, r0
 8005282:	b998      	cbnz	r0, 80052ac <f_stat+0x3e>
		INIT_NAMBUF(dj.obj.fs);
 8005284:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005286:	aa02      	add	r2, sp, #8
 8005288:	60da      	str	r2, [r3, #12]
 800528a:	aa22      	add	r2, sp, #136	@ 0x88
		res = follow_path(&dj, path);	/* Follow the file path */
 800528c:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(dj.obj.fs);
 800528e:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8005290:	a80c      	add	r0, sp, #48	@ 0x30
 8005292:	f7ff fa9f 	bl	80047d4 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 8005296:	4604      	mov	r4, r0
 8005298:	b940      	cbnz	r0, 80052ac <f_stat+0x3e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800529a:	f99d 307b 	ldrsb.w	r3, [sp, #123]	@ 0x7b
 800529e:	2b00      	cmp	r3, #0
 80052a0:	db07      	blt.n	80052b2 <f_stat+0x44>
				res = FR_INVALID_NAME;
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80052a2:	b11d      	cbz	r5, 80052ac <f_stat+0x3e>
 80052a4:	4629      	mov	r1, r5
 80052a6:	a80c      	add	r0, sp, #48	@ 0x30
 80052a8:	f7fd feda 	bl	8003060 <get_fileinfo>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 80052ac:	4620      	mov	r0, r4
 80052ae:	b043      	add	sp, #268	@ 0x10c
 80052b0:	bd30      	pop	{r4, r5, pc}
				res = FR_INVALID_NAME;
 80052b2:	2406      	movs	r4, #6
 80052b4:	e7fa      	b.n	80052ac <f_stat+0x3e>

080052b6 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80052b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052b8:	b0e7      	sub	sp, #412	@ 0x19c
 80052ba:	9001      	str	r0, [sp, #4]
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
 80052bc:	2202      	movs	r2, #2
 80052be:	a903      	add	r1, sp, #12
 80052c0:	a801      	add	r0, sp, #4
 80052c2:	f7fe fb25 	bl	8003910 <mount_volume>
	if (res == FR_OK) {
 80052c6:	b9c0      	cbnz	r0, 80052fa <f_unlink+0x44>
		dj.obj.fs = fs;
 80052c8:	9c03      	ldr	r4, [sp, #12]
		INIT_NAMBUF(fs);
 80052ca:	ab04      	add	r3, sp, #16
 80052cc:	60e3      	str	r3, [r4, #12]
 80052ce:	ab46      	add	r3, sp, #280	@ 0x118
		res = follow_path(&dj, path);		/* Follow the file path */
 80052d0:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 80052d2:	6123      	str	r3, [r4, #16]
		res = follow_path(&dj, path);		/* Follow the file path */
 80052d4:	a81a      	add	r0, sp, #104	@ 0x68
		dj.obj.fs = fs;
 80052d6:	941a      	str	r4, [sp, #104]	@ 0x68
		res = follow_path(&dj, path);		/* Follow the file path */
 80052d8:	f7ff fa7c 	bl	80047d4 <follow_path>
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if FF_FS_LOCK
		if (res == FR_OK) res = chk_share(&dj, 2);	/* Check if it is an open object */
 80052dc:	b968      	cbnz	r0, 80052fa <f_unlink+0x44>
 80052de:	2102      	movs	r1, #2
 80052e0:	a81a      	add	r0, sp, #104	@ 0x68
 80052e2:	f7fd fd69 	bl	8002db8 <chk_share>
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80052e6:	b940      	cbnz	r0, 80052fa <f_unlink+0x44>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80052e8:	f99d 30b3 	ldrsb.w	r3, [sp, #179]	@ 0xb3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	db43      	blt.n	8005378 <f_unlink+0xc2>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
 80052f0:	f89d 706e 	ldrb.w	r7, [sp, #110]	@ 0x6e
 80052f4:	07fa      	lsls	r2, r7, #31
 80052f6:	d502      	bpl.n	80052fe <f_unlink+0x48>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80052f8:	2007      	movs	r0, #7
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 80052fa:	b067      	add	sp, #412	@ 0x19c
 80052fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (fs->fs_type == FS_EXFAT) {
 80052fe:	7826      	ldrb	r6, [r4, #0]
				obj.fs = fs;
 8005300:	940e      	str	r4, [sp, #56]	@ 0x38
				if (fs->fs_type == FS_EXFAT) {
 8005302:	2e04      	cmp	r6, #4
 8005304:	d110      	bne.n	8005328 <f_unlink+0x72>
					init_alloc_info(fs, &obj);
 8005306:	6920      	ldr	r0, [r4, #16]
 8005308:	a90e      	add	r1, sp, #56	@ 0x38
 800530a:	f7ff fa45 	bl	8004798 <init_alloc_info.isra.0>
					dclst = obj.sclust;
 800530e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8005310:	06fb      	lsls	r3, r7, #27
 8005312:	d40f      	bmi.n	8005334 <f_unlink+0x7e>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8005314:	a81a      	add	r0, sp, #104	@ 0x68
 8005316:	f7fe fe48 	bl	8003faa <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 800531a:	2800      	cmp	r0, #0
 800531c:	d1ed      	bne.n	80052fa <f_unlink+0x44>
 800531e:	bb1d      	cbnz	r5, 8005368 <f_unlink+0xb2>
				if (res == FR_OK) res = sync_fs(fs);
 8005320:	4620      	mov	r0, r4
 8005322:	f7fe fa7f 	bl	8003824 <sync_fs>
 8005326:	e7e8      	b.n	80052fa <f_unlink+0x44>
					dclst = ld_clust(fs, dj.dir);
 8005328:	4630      	mov	r0, r6
 800532a:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800532c:	f7ff fa49 	bl	80047c2 <ld_clust.isra.0>
 8005330:	4605      	mov	r5, r0
 8005332:	e7ed      	b.n	8005310 <f_unlink+0x5a>
						if (fs->fs_type == FS_EXFAT) {
 8005334:	2e04      	cmp	r6, #4
						sdj.obj.fs = fs;			/* Open the sub-directory */
 8005336:	9430      	str	r4, [sp, #192]	@ 0xc0
						sdj.obj.sclust = dclst;
 8005338:	9532      	str	r5, [sp, #200]	@ 0xc8
						if (fs->fs_type == FS_EXFAT) {
 800533a:	d107      	bne.n	800534c <f_unlink+0x96>
							sdj.obj.objsize = obj.objsize;
 800533c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	@ 0x48
 8005340:	e9cd 2334 	strd	r2, r3, [sp, #208]	@ 0xd0
							sdj.obj.stat = obj.stat;
 8005344:	f89d 303f 	ldrb.w	r3, [sp, #63]	@ 0x3f
 8005348:	f88d 30c7 	strb.w	r3, [sp, #199]	@ 0xc7
						res = dir_sdi(&sdj, 0);
 800534c:	2100      	movs	r1, #0
 800534e:	a830      	add	r0, sp, #192	@ 0xc0
 8005350:	f7fe f8ca 	bl	80034e8 <dir_sdi>
						if (res == FR_OK) {
 8005354:	2800      	cmp	r0, #0
 8005356:	d1d0      	bne.n	80052fa <f_unlink+0x44>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
 8005358:	a830      	add	r0, sp, #192	@ 0xc0
 800535a:	f7fe feef 	bl	800413c <dir_read.constprop.0>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800535e:	2800      	cmp	r0, #0
 8005360:	d0ca      	beq.n	80052f8 <f_unlink+0x42>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8005362:	2804      	cmp	r0, #4
 8005364:	d1c9      	bne.n	80052fa <f_unlink+0x44>
 8005366:	e7d5      	b.n	8005314 <f_unlink+0x5e>
					res = remove_chain(&obj, dclst, 0);
 8005368:	4602      	mov	r2, r0
 800536a:	4629      	mov	r1, r5
 800536c:	a80e      	add	r0, sp, #56	@ 0x38
 800536e:	f7fe f9b1 	bl	80036d4 <remove_chain>
				if (res == FR_OK) res = sync_fs(fs);
 8005372:	2800      	cmp	r0, #0
 8005374:	d1c1      	bne.n	80052fa <f_unlink+0x44>
 8005376:	e7d3      	b.n	8005320 <f_unlink+0x6a>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8005378:	2006      	movs	r0, #6
 800537a:	e7be      	b.n	80052fa <f_unlink+0x44>

0800537c <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 800537c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005380:	b099      	sub	sp, #100	@ 0x64
 8005382:	9011      	str	r0, [sp, #68]	@ 0x44
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8005384:	a811      	add	r0, sp, #68	@ 0x44
{
 8005386:	460e      	mov	r6, r1
 8005388:	4614      	mov	r4, r2
 800538a:	9306      	str	r3, [sp, #24]
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800538c:	f7fd fdf5 	bl	8002f7a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005390:	2800      	cmp	r0, #0
 8005392:	f2c0 84d2 	blt.w	8005d3a <f_mkfs+0x9be>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 8005396:	4baa      	ldr	r3, [pc, #680]	@ (8005640 <f_mkfs+0x2c4>)
 8005398:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800539c:	b10b      	cbz	r3, 80053a2 <f_mkfs+0x26>
 800539e:	2200      	movs	r2, #0
 80053a0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 80053a2:	b2c3      	uxtb	r3, r0
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 80053a4:	4618      	mov	r0, r3
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 80053a6:	9300      	str	r3, [sp, #0]
	ds = disk_initialize(pdrv);
 80053a8:	f7fd fb7e 	bl	8002aa8 <disk_initialize>
	if (ds & STA_NOINIT) return FR_NOT_READY;
 80053ac:	07c3      	lsls	r3, r0, #31
 80053ae:	f100 84c6 	bmi.w	8005d3e <f_mkfs+0x9c2>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 80053b2:	0747      	lsls	r7, r0, #29
 80053b4:	f100 84c5 	bmi.w	8005d42 <f_mkfs+0x9c6>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 80053b8:	4ba2      	ldr	r3, [pc, #648]	@ (8005644 <f_mkfs+0x2c8>)
 80053ba:	2e00      	cmp	r6, #0
 80053bc:	bf08      	it	eq
 80053be:	461e      	moveq	r6, r3
	sz_blk = opt->align;
 80053c0:	6873      	ldr	r3, [r6, #4]
 80053c2:	9312      	str	r3, [sp, #72]	@ 0x48
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the parameter or lower layer */
 80053c4:	b923      	cbnz	r3, 80053d0 <f_mkfs+0x54>
 80053c6:	2103      	movs	r1, #3
 80053c8:	9800      	ldr	r0, [sp, #0]
 80053ca:	aa12      	add	r2, sp, #72	@ 0x48
 80053cc:	f7fd fba0 	bl	8002b10 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 80053d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80053d2:	1e53      	subs	r3, r2, #1
 80053d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053d8:	d201      	bcs.n	80053de <f_mkfs+0x62>
 80053da:	421a      	tst	r2, r3
 80053dc:	d001      	beq.n	80053e2 <f_mkfs+0x66>
 80053de:	2301      	movs	r3, #1
 80053e0:	9312      	str	r3, [sp, #72]	@ 0x48
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 80053e2:	7873      	ldrb	r3, [r6, #1]
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 80053e4:	f8d6 9008 	ldr.w	r9, [r6, #8]
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 80053e8:	9302      	str	r3, [sp, #8]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	9b02      	ldr	r3, [sp, #8]
 80053f0:	bf88      	it	hi
 80053f2:	2301      	movhi	r3, #1
 80053f4:	9302      	str	r3, [sp, #8]
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 80053f6:	f109 33ff 	add.w	r3, r9, #4294967295
 80053fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053fe:	d22d      	bcs.n	800545c <f_mkfs+0xe0>
 8005400:	f019 0f0f 	tst.w	r9, #15
 8005404:	bf18      	it	ne
 8005406:	f44f 7900 	movne.w	r9, #512	@ 0x200
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800540a:	68f5      	ldr	r5, [r6, #12]
 800540c:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
 8005410:	d827      	bhi.n	8005462 <f_mkfs+0xe6>
 8005412:	1e6b      	subs	r3, r5, #1
 8005414:	422b      	tst	r3, r5
 8005416:	bf18      	it	ne
 8005418:	2500      	movne	r5, #0
	sz_au /= ss;	/* Byte --> Sector */

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800541a:	9b06      	ldr	r3, [sp, #24]
 800541c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005420:	f0c0 8491 	bcc.w	8005d46 <f_mkfs+0x9ca>
	buf = (BYTE*)work;		/* Working buffer */
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 8005424:	2c00      	cmp	r4, #0
 8005426:	f000 848e 	beq.w	8005d46 <f_mkfs+0x9ca>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 800542a:	2200      	movs	r2, #0
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 800542c:	7833      	ldrb	r3, [r6, #0]
	b_vol = sz_vol = 0;
 800542e:	9213      	str	r2, [sp, #76]	@ 0x4c
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005430:	2101      	movs	r1, #1
 8005432:	9800      	ldr	r0, [sp, #0]
 8005434:	aa13      	add	r2, sp, #76	@ 0x4c
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 8005436:	9301      	str	r3, [sp, #4]
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005438:	f7fd fb6a 	bl	8002b10 <disk_ioctl>
 800543c:	2800      	cmp	r0, #0
 800543e:	f040 80fb 	bne.w	8005638 <f_mkfs+0x2bc>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 8005442:	9b01      	ldr	r3, [sp, #4]
 8005444:	f013 0208 	ands.w	r2, r3, #8
 8005448:	920a      	str	r2, [sp, #40]	@ 0x28
 800544a:	d10c      	bne.n	8005466 <f_mkfs+0xea>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 800544c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800544e:	2a3f      	cmp	r2, #63	@ 0x3f
 8005450:	d94b      	bls.n	80054ea <f_mkfs+0x16e>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 8005452:	3a3f      	subs	r2, #63	@ 0x3f
 8005454:	9213      	str	r2, [sp, #76]	@ 0x4c
 8005456:	223f      	movs	r2, #63	@ 0x3f
	b_vol = sz_vol = 0;
 8005458:	9201      	str	r2, [sp, #4]
 800545a:	e005      	b.n	8005468 <f_mkfs+0xec>
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800545c:	f44f 7900 	mov.w	r9, #512	@ 0x200
 8005460:	e7d3      	b.n	800540a <f_mkfs+0x8e>
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 8005462:	2500      	movs	r5, #0
 8005464:	e7d9      	b.n	800541a <f_mkfs+0x9e>
	b_vol = sz_vol = 0;
 8005466:	9001      	str	r0, [sp, #4]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128 sectors */
 8005468:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800546a:	2f7f      	cmp	r7, #127	@ 0x7f
 800546c:	f240 8369 	bls.w	8005b42 <f_mkfs+0x7c6>

	/* Now start to create an FAT volume at b_vol and sz_vol */

	do {	/* Pre-determine the FAT type */
		if (FF_FS_EXFAT && (fsopt & FM_EXFAT)) {	/* exFAT possible? */
 8005470:	075e      	lsls	r6, r3, #29
	sz_au /= ss;	/* Byte --> Sector */
 8005472:	ea4f 2b55 	mov.w	fp, r5, lsr #9
		if (FF_FS_EXFAT && (fsopt & FM_EXFAT)) {	/* exFAT possible? */
 8005476:	d53a      	bpl.n	80054ee <f_mkfs+0x172>
			if ((fsopt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || sz_au > 128) {	/* exFAT only, vol >= 64M sectors or sz_au > 128 sectors ? */
 8005478:	f003 0207 	and.w	r2, r3, #7
 800547c:	2a04      	cmp	r2, #4
 800547e:	d00c      	beq.n	800549a <f_mkfs+0x11e>
 8005480:	f1b7 6f80 	cmp.w	r7, #67108864	@ 0x4000000
 8005484:	d23e      	bcs.n	8005504 <f_mkfs+0x188>
 8005486:	f5b5 3f81 	cmp.w	r5, #66048	@ 0x10200
 800548a:	d23b      	bcs.n	8005504 <f_mkfs+0x188>
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 800548c:	0798      	lsls	r0, r3, #30
 800548e:	f003 0201 	and.w	r2, r3, #1
 8005492:	d532      	bpl.n	80054fa <f_mkfs+0x17e>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 8005494:	f1c2 0203 	rsb	r2, r2, #3
 8005498:	b2d2      	uxtb	r2, r2
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800549a:	9906      	ldr	r1, [sp, #24]
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */

#if FF_FS_EXFAT
	if (fsty == FS_EXFAT) {	/* Create an exFAT volume */
 800549c:	2a04      	cmp	r2, #4
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800549e:	ea4f 2151 	mov.w	r1, r1, lsr #9
 80054a2:	9104      	str	r1, [sp, #16]
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 80054a4:	f107 41b6 	add.w	r1, r7, #1526726656	@ 0x5b000000
 80054a8:	f501 01c2 	add.w	r1, r1, #6356992	@ 0x610000
 80054ac:	910b      	str	r1, [sp, #44]	@ 0x2c
	if (fsty == FS_EXFAT) {	/* Create an exFAT volume */
 80054ae:	d02b      	beq.n	8005508 <f_mkfs+0x18c>
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 80054b0:	9812      	ldr	r0, [sp, #72]	@ 0x48
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 80054b2:	f3c9 1116 	ubfx	r1, r9, #4, #23
 80054b6:	910c      	str	r1, [sp, #48]	@ 0x30
 80054b8:	1e41      	subs	r1, r0, #1
 80054ba:	9109      	str	r1, [sp, #36]	@ 0x24
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 80054bc:	2a03      	cmp	r2, #3
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 80054be:	f1c0 0100 	rsb	r1, r0, #0
 80054c2:	9108      	str	r1, [sp, #32]
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 80054c4:	f040 8375 	bne.w	8005bb2 <f_mkfs+0x836>
				if (pau == 0) {	/* AU auto-selection */
 80054c8:	f1bb 0f00 	cmp.w	fp, #0
 80054cc:	f040 833d 	bne.w	8005b4a <f_mkfs+0x7ce>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80054d0:	2601      	movs	r6, #1
 80054d2:	495d      	ldr	r1, [pc, #372]	@ (8005648 <f_mkfs+0x2cc>)
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80054d4:	0c7d      	lsrs	r5, r7, #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80054d6:	f831 2b02 	ldrh.w	r2, [r1], #2
 80054da:	2a00      	cmp	r2, #0
 80054dc:	f000 82e8 	beq.w	8005ab0 <f_mkfs+0x734>
 80054e0:	42aa      	cmp	r2, r5
 80054e2:	f200 82e5 	bhi.w	8005ab0 <f_mkfs+0x734>
 80054e6:	0076      	lsls	r6, r6, #1
 80054e8:	e7f5      	b.n	80054d6 <f_mkfs+0x15a>
	b_vol = sz_vol = 0;
 80054ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80054ec:	e7b4      	b.n	8005458 <f_mkfs+0xdc>
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 80054ee:	f5b5 3f81 	cmp.w	r5, #66048	@ 0x10200
 80054f2:	bf28      	it	cs
 80054f4:	f04f 0b80 	movcs.w	fp, #128	@ 0x80
 80054f8:	e7c8      	b.n	800548c <f_mkfs+0x110>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 80054fa:	2a00      	cmp	r2, #0
 80054fc:	f000 8425 	beq.w	8005d4a <f_mkfs+0x9ce>
		fsty = FS_FAT16;
 8005500:	2202      	movs	r2, #2
 8005502:	e7ca      	b.n	800549a <f_mkfs+0x11e>
				fsty = FS_EXFAT; break;
 8005504:	2204      	movs	r2, #4
 8005506:	e7c8      	b.n	800549a <f_mkfs+0x11e>
		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume for exFAT? */
 8005508:	f5b7 5f80 	cmp.w	r7, #4096	@ 0x1000
 800550c:	f0c0 8319 	bcc.w	8005b42 <f_mkfs+0x7c6>
		if (sz_au == 0) {	/* AU auto-selection */
 8005510:	f1bb 0f00 	cmp.w	fp, #0
 8005514:	d109      	bne.n	800552a <f_mkfs+0x1ae>
			if (sz_vol >= 0x80000) sz_au = 64;		/* >= 512Ks */
 8005516:	f5b7 2f00 	cmp.w	r7, #524288	@ 0x80000
 800551a:	d353      	bcc.n	80055c4 <f_mkfs+0x248>
			if (sz_vol >= 0x4000000) sz_au = 256;	/* >= 64Ms */
 800551c:	f1b7 6f80 	cmp.w	r7, #67108864	@ 0x4000000
 8005520:	bf34      	ite	cc
 8005522:	f04f 0b40 	movcc.w	fp, #64	@ 0x40
 8005526:	f44f 7b80 	movcs.w	fp, #256	@ 0x100
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
 800552a:	9b01      	ldr	r3, [sp, #4]
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
 800552c:	9912      	ldr	r1, [sp, #72]	@ 0x48
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
 800552e:	3320      	adds	r3, #32
 8005530:	9305      	str	r3, [sp, #20]
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
 8005532:	fbb7 f3fb 	udiv	r3, r7, fp
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	f203 2307 	addw	r3, r3, #519	@ 0x207
 800553c:	0a5a      	lsrs	r2, r3, #9
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
 800553e:	9805      	ldr	r0, [sp, #20]
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
 8005540:	920e      	str	r2, [sp, #56]	@ 0x38
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
 8005542:	1e4a      	subs	r2, r1, #1
 8005544:	4402      	add	r2, r0
 8005546:	eb02 2353 	add.w	r3, r2, r3, lsr #9
 800554a:	4249      	negs	r1, r1
		if (b_data - b_vol >= sz_vol / 2) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 800554c:	9a01      	ldr	r2, [sp, #4]
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
 800554e:	400b      	ands	r3, r1
 8005550:	9302      	str	r3, [sp, #8]
		if (b_data - b_vol >= sz_vol / 2) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 8005552:	1a9b      	subs	r3, r3, r2
 8005554:	ebb3 0f57 	cmp.w	r3, r7, lsr #1
 8005558:	930d      	str	r3, [sp, #52]	@ 0x34
 800555a:	f080 82f2 	bcs.w	8005b42 <f_mkfs+0x7c6>
		n_clst = (DWORD)((sz_vol - (b_data - b_vol)) / sz_au);	/* Number of clusters */
 800555e:	9b02      	ldr	r3, [sp, #8]
 8005560:	4417      	add	r7, r2
 8005562:	1aff      	subs	r7, r7, r3
 8005564:	fbb7 f3fb 	udiv	r3, r7, fp
		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORTED);			/* Too few clusters? */
 8005568:	f1a3 0210 	sub.w	r2, r3, #16
		n_clst = (DWORD)((sz_vol - (b_data - b_vol)) / sz_au);	/* Number of clusters */
 800556c:	930c      	str	r3, [sp, #48]	@ 0x30
		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORTED);			/* Too few clusters? */
 800556e:	4b37      	ldr	r3, [pc, #220]	@ (800564c <f_mkfs+0x2d0>)
 8005570:	429a      	cmp	r2, r3
 8005572:	f200 82e6 	bhi.w	8005b42 <f_mkfs+0x7c6>
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
 8005576:	2600      	movs	r6, #0
		szb_bit = (n_clst + 7) / 8;								/* Size of allocation bitmap */
 8005578:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
 800557a:	ea4f 284b 	mov.w	r8, fp, lsl #9
		szb_bit = (n_clst + 7) / 8;								/* Size of allocation bitmap */
 800557e:	3307      	adds	r3, #7
 8005580:	08da      	lsrs	r2, r3, #3
 8005582:	920f      	str	r2, [sp, #60]	@ 0x3c
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
 8005584:	f108 32ff 	add.w	r2, r8, #4294967295
 8005588:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
 800558c:	fbb3 f3f8 	udiv	r3, r3, r8
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
 8005590:	4637      	mov	r7, r6
 8005592:	4635      	mov	r5, r6
 8005594:	46b1      	mov	r9, r6
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
 8005596:	9303      	str	r3, [sp, #12]
 8005598:	9210      	str	r2, [sp, #64]	@ 0x40
 800559a:	9315      	str	r3, [sp, #84]	@ 0x54
		sect = b_data + sz_au * clen[0];	/* Table start sector */
 800559c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80055a0:	fb0b 3302 	mla	r3, fp, r2, r3
 80055a4:	9308      	str	r3, [sp, #32]
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
 80055a6:	9b06      	ldr	r3, [sp, #24]
		sum = 0;							/* Table checksum to be stored in the 82 entry */
 80055a8:	9609      	str	r6, [sp, #36]	@ 0x24
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
 80055aa:	f423 7aff 	bic.w	sl, r3, #510	@ 0x1fe
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
 80055ae:	9607      	str	r6, [sp, #28]
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
 80055b0:	f02a 0a01 	bic.w	sl, sl, #1
			switch (st) {
 80055b4:	b14e      	cbz	r6, 80055ca <f_mkfs+0x24e>
 80055b6:	2e01      	cmp	r6, #1
 80055b8:	d016      	beq.n	80055e8 <f_mkfs+0x26c>
				ch = (WCHAR)j; si += (WCHAR)j;	/* Number of chars to skip */
 80055ba:	b2b8      	uxth	r0, r7
 80055bc:	4405      	add	r5, r0
				st = 0;
 80055be:	2600      	movs	r6, #0
				ch = (WCHAR)j; si += (WCHAR)j;	/* Number of chars to skip */
 80055c0:	b2ad      	uxth	r5, r5
				st = 0;
 80055c2:	e018      	b.n	80055f6 <f_mkfs+0x27a>
			sz_au = 8;
 80055c4:	f04f 0b08 	mov.w	fp, #8
 80055c8:	e7af      	b.n	800552a <f_mkfs+0x1ae>
				ch = (WCHAR)ff_wtoupper(si);	/* Get an up-case char */
 80055ca:	4628      	mov	r0, r5
 80055cc:	f000 fd26 	bl	800601c <ff_wtoupper>
 80055d0:	b280      	uxth	r0, r0
					si++; break;		/* Store the up-case char if exist */
 80055d2:	1c6a      	adds	r2, r5, #1
				if (ch != si) {
 80055d4:	4285      	cmp	r5, r0
					si++; break;		/* Store the up-case char if exist */
 80055d6:	b292      	uxth	r2, r2
				if (ch != si) {
 80055d8:	d141      	bne.n	800565e <f_mkfs+0x2e2>
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
 80055da:	2701      	movs	r7, #1
 80055dc:	19ee      	adds	r6, r5, r7
 80055de:	b2b6      	uxth	r6, r6
 80055e0:	2e00      	cmp	r6, #0
 80055e2:	d135      	bne.n	8005650 <f_mkfs+0x2d4>
				if (j >= 128) {
 80055e4:	2f7f      	cmp	r7, #127	@ 0x7f
 80055e6:	d83c      	bhi.n	8005662 <f_mkfs+0x2e6>
				if (--j == 0) st = 0;
 80055e8:	3f01      	subs	r7, #1
 80055ea:	bf14      	ite	ne
 80055ec:	2601      	movne	r6, #1
 80055ee:	2600      	moveq	r6, #0
				ch = si++;		/* Fill the short run */
 80055f0:	1c6a      	adds	r2, r5, #1
				if (--j == 0) st = 0;
 80055f2:	4628      	mov	r0, r5
				ch = si++;		/* Fill the short run */
 80055f4:	b295      	uxth	r5, r2
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 80055f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);	/* Put it into the write buffer */
 80055f8:	b2c2      	uxtb	r2, r0
 80055fa:	f804 2009 	strb.w	r2, [r4, r9]
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
 80055fe:	f3c0 200f 	ubfx	r0, r0, #8, #16
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 8005602:	eb02 0273 	add.w	r2, r2, r3, ror #1
 8005606:	eb00 0372 	add.w	r3, r0, r2, ror #1
 800560a:	9309      	str	r3, [sp, #36]	@ 0x24
			i += 2; szb_case += 2;
 800560c:	9b07      	ldr	r3, [sp, #28]
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
 800560e:	eb04 0109 	add.w	r1, r4, r9
			i += 2; szb_case += 2;
 8005612:	3302      	adds	r3, #2
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
 8005614:	7048      	strb	r0, [r1, #1]
			i += 2; szb_case += 2;
 8005616:	9307      	str	r3, [sp, #28]
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
 8005618:	b11d      	cbz	r5, 8005622 <f_mkfs+0x2a6>
			i += 2; szb_case += 2;
 800561a:	f109 0002 	add.w	r0, r9, #2
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
 800561e:	4582      	cmp	sl, r0
 8005620:	d127      	bne.n	8005672 <f_mkfs+0x2f6>
				n = (i + ss - 1) / ss;
 8005622:	f209 2301 	addw	r3, r9, #513	@ 0x201
 8005626:	ea4f 2953 	mov.w	r9, r3, lsr #9
				if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800562a:	464b      	mov	r3, r9
 800562c:	4621      	mov	r1, r4
 800562e:	9a08      	ldr	r2, [sp, #32]
 8005630:	9800      	ldr	r0, [sp, #0]
 8005632:	f7fd fa58 	bl	8002ae6 <disk_write>
 8005636:	b1c0      	cbz	r0, 800566a <f_mkfs+0x2ee>
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8005638:	2001      	movs	r0, #1
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);

	LEAVE_MKFS(FR_OK);
}
 800563a:	b019      	add	sp, #100	@ 0x64
 800563c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005640:	20000910 	.word	0x20000910
 8005644:	0800edf8 	.word	0x0800edf8
 8005648:	0800edea 	.word	0x0800edea
 800564c:	7fffffed 	.word	0x7fffffed
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
 8005650:	4630      	mov	r0, r6
 8005652:	f000 fce3 	bl	800601c <ff_wtoupper>
 8005656:	4286      	cmp	r6, r0
 8005658:	d1c4      	bne.n	80055e4 <f_mkfs+0x268>
 800565a:	3701      	adds	r7, #1
 800565c:	e7be      	b.n	80055dc <f_mkfs+0x260>
					si++; break;		/* Store the up-case char if exist */
 800565e:	4615      	mov	r5, r2
 8005660:	e7c9      	b.n	80055f6 <f_mkfs+0x27a>
					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 chars */
 8005662:	2602      	movs	r6, #2
 8005664:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005668:	e7c5      	b.n	80055f6 <f_mkfs+0x27a>
				sect += n; i = 0;
 800566a:	9b08      	ldr	r3, [sp, #32]
 800566c:	444b      	add	r3, r9
 800566e:	9308      	str	r3, [sp, #32]
		} while (si);
 8005670:	b10d      	cbz	r5, 8005676 <f_mkfs+0x2fa>
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
 8005672:	4681      	mov	r9, r0
 8005674:	e79e      	b.n	80055b4 <f_mkfs+0x238>
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
 8005676:	9a07      	ldr	r2, [sp, #28]
 8005678:	9b10      	ldr	r3, [sp, #64]	@ 0x40
		clen[2] = 1;	/* Number of root directory clusters */
 800567a:	f04f 0901 	mov.w	r9, #1
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
 800567e:	4413      	add	r3, r2
 8005680:	fbb3 f3f8 	udiv	r3, r3, r8
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
 8005684:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
 8005686:	9316      	str	r3, [sp, #88]	@ 0x58
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
 8005688:	f202 15ff 	addw	r5, r2, #511	@ 0x1ff
		nbit = clen[0] + clen[1] + clen[2];				/* Number of clusters in-use by system (bitmap, up-case and root-dir) */
 800568c:	9a03      	ldr	r2, [sp, #12]
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
 800568e:	f8dd 8008 	ldr.w	r8, [sp, #8]
		nbit = clen[0] + clen[1] + clen[2];				/* Number of clusters in-use by system (bitmap, up-case and root-dir) */
 8005692:	18d3      	adds	r3, r2, r3
 8005694:	9308      	str	r3, [sp, #32]
 8005696:	eb03 0a09 	add.w	sl, r3, r9
			memset(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
 800569a:	9b06      	ldr	r3, [sp, #24]
		clen[2] = 1;	/* Number of root directory clusters */
 800569c:	f8cd 905c 	str.w	r9, [sp, #92]	@ 0x5c
			memset(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
 80056a0:	f423 77ff 	bic.w	r7, r3, #510	@ 0x1fe
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
 80056a4:	0a6d      	lsrs	r5, r5, #9
			memset(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
 80056a6:	f027 0701 	bic.w	r7, r7, #1
 80056aa:	463a      	mov	r2, r7
 80056ac:	2100      	movs	r1, #0
 80056ae:	4620      	mov	r0, r4
 80056b0:	f006 fc54 	bl	800bf5c <memset>
			for (i = 0; nbit != 0 && i / 8 < sz_buf * ss; buf[i / 8] |= 1 << (i % 8), i++, nbit--) ;	/* Mark used clusters */
 80056b4:	4656      	mov	r6, sl
 80056b6:	ebaa 0306 	sub.w	r3, sl, r6
 80056ba:	b12e      	cbz	r6, 80056c8 <f_mkfs+0x34c>
 80056bc:	ebb7 0fd3 	cmp.w	r7, r3, lsr #3
 80056c0:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 80056c4:	f200 813c 	bhi.w	8005940 <f_mkfs+0x5c4>
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
 80056c8:	f8dd a010 	ldr.w	sl, [sp, #16]
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80056cc:	4642      	mov	r2, r8
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
 80056ce:	45aa      	cmp	sl, r5
 80056d0:	bf28      	it	cs
 80056d2:	46aa      	movcs	sl, r5
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80056d4:	4621      	mov	r1, r4
 80056d6:	4653      	mov	r3, sl
 80056d8:	9800      	ldr	r0, [sp, #0]
 80056da:	f7fd fa04 	bl	8002ae6 <disk_write>
 80056de:	2800      	cmp	r0, #0
 80056e0:	d1aa      	bne.n	8005638 <f_mkfs+0x2bc>
		} while (nsect);
 80056e2:	ebb5 050a 	subs.w	r5, r5, sl
			sect += n; nsect -= n;
 80056e6:	44d0      	add	r8, sl
		} while (nsect);
 80056e8:	f040 8128 	bne.w	800593c <f_mkfs+0x5c0>
		j = nbit = clu = 0;
 80056ec:	46aa      	mov	sl, r5
 80056ee:	46a9      	mov	r9, r5
	*ptr++ = (BYTE)val; val >>= 8;
 80056f0:	f04f 08ff 	mov.w	r8, #255	@ 0xff
		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
 80056f4:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
			memset(buf, 0, sz_buf * ss); i = 0;	/* Clear work area and reset write offset */
 80056f6:	463a      	mov	r2, r7
 80056f8:	2100      	movs	r1, #0
 80056fa:	4620      	mov	r0, r4
 80056fc:	f006 fc2e 	bl	800bf5c <memset>
			if (clu == 0) {	/* Initialize FAT [0] and FAT[1] */
 8005700:	f1ba 0f00 	cmp.w	sl, #0
 8005704:	f040 8135 	bne.w	8005972 <f_mkfs+0x5f6>
	*ptr++ = (BYTE)val; val >>= 8;
 8005708:	f06f 0307 	mvn.w	r3, #7
				st_dword(buf + i, 0xFFFFFFFF); i += 4; clu++;
 800570c:	f04f 0a02 	mov.w	sl, #2
 8005710:	2208      	movs	r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8005712:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005714:	f884 8001 	strb.w	r8, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8005718:	f884 8002 	strb.w	r8, [r4, #2]
	*ptr++ = (BYTE)val;
 800571c:	f884 8003 	strb.w	r8, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 8005720:	f884 8004 	strb.w	r8, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8005724:	f884 8005 	strb.w	r8, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 8005728:	f884 8006 	strb.w	r8, [r4, #6]
	*ptr++ = (BYTE)val;
 800572c:	f884 8007 	strb.w	r8, [r4, #7]
					i += 4; clu++; nbit--;
 8005730:	462b      	mov	r3, r5
				while (nbit != 0 && i < sz_buf * ss) {	/* Create a chain */
 8005732:	f1b9 0f00 	cmp.w	r9, #0
 8005736:	f000 811e 	beq.w	8005976 <f_mkfs+0x5fa>
 800573a:	4297      	cmp	r7, r2
 800573c:	f200 8109 	bhi.w	8005952 <f_mkfs+0x5d6>
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
 8005740:	9b04      	ldr	r3, [sp, #16]
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005742:	4621      	mov	r1, r4
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
 8005744:	42b3      	cmp	r3, r6
 8005746:	bf28      	it	cs
 8005748:	4633      	movcs	r3, r6
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800574a:	9a05      	ldr	r2, [sp, #20]
 800574c:	9800      	ldr	r0, [sp, #0]
 800574e:	9306      	str	r3, [sp, #24]
 8005750:	f7fd f9c9 	bl	8002ae6 <disk_write>
 8005754:	2800      	cmp	r0, #0
 8005756:	f47f af6f 	bne.w	8005638 <f_mkfs+0x2bc>
			sect += n; nsect -= n;
 800575a:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 800575e:	441a      	add	r2, r3
		} while (nsect);
 8005760:	1af6      	subs	r6, r6, r3
			sect += n; nsect -= n;
 8005762:	9205      	str	r2, [sp, #20]
		} while (nsect);
 8005764:	d1c7      	bne.n	80056f6 <f_mkfs+0x37a>
		memset(buf, 0, sz_buf * ss);
 8005766:	4631      	mov	r1, r6
 8005768:	463a      	mov	r2, r7
 800576a:	4620      	mov	r0, r4
 800576c:	f006 fbf6 	bl	800bf5c <memset>
		buf[SZDIRE * 0 + 0] = ET_VLABEL;				/* Volume label entry (no label) */
 8005770:	2383      	movs	r3, #131	@ 0x83
 8005772:	7023      	strb	r3, [r4, #0]
		buf[SZDIRE * 1 + 0] = ET_BITMAP;				/* Bitmap entry */
 8005774:	2381      	movs	r3, #129	@ 0x81
 8005776:	f884 3020 	strb.w	r3, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 800577a:	2302      	movs	r3, #2
		st_dword(buf + SZDIRE * 1 + 24, szb_bit);		/*  size */
 800577c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
 800577e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8005782:	f884 6035 	strb.w	r6, [r4, #53]	@ 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 8005786:	f884 6036 	strb.w	r6, [r4, #54]	@ 0x36
	*ptr++ = (BYTE)val;
 800578a:	f884 6037 	strb.w	r6, [r4, #55]	@ 0x37
		st_dword(buf + SZDIRE * 1 + 24, szb_bit);		/*  size */
 800578e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8005792:	f7fd faf9 	bl	8002d88 <st_dword>
		buf[SZDIRE * 2 + 0] = ET_UPCASE;				/* Up-case table entry */
 8005796:	2382      	movs	r3, #130	@ 0x82
		sect = b_data + sz_au * (clen[0] + clen[1]); nsect = sz_au;	/* Start of the root directory and number of sectors */
 8005798:	465e      	mov	r6, fp
		st_dword(buf + SZDIRE * 2 + 4, sum);			/*  sum */
 800579a:	9909      	ldr	r1, [sp, #36]	@ 0x24
		buf[SZDIRE * 2 + 0] = ET_UPCASE;				/* Up-case table entry */
 800579c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		st_dword(buf + SZDIRE * 2 + 4, sum);			/*  sum */
 80057a0:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 80057a4:	f7fd faf0 	bl	8002d88 <st_dword>
		st_dword(buf + SZDIRE * 2 + 20, 2 + clen[0]);	/*  cluster */
 80057a8:	9903      	ldr	r1, [sp, #12]
 80057aa:	f104 0354 	add.w	r3, r4, #84	@ 0x54
 80057ae:	4618      	mov	r0, r3
 80057b0:	3102      	adds	r1, #2
 80057b2:	9305      	str	r3, [sp, #20]
 80057b4:	f7fd fae8 	bl	8002d88 <st_dword>
		st_dword(buf + SZDIRE * 2 + 24, szb_case);		/*  size */
 80057b8:	f104 0358 	add.w	r3, r4, #88	@ 0x58
 80057bc:	4618      	mov	r0, r3
 80057be:	9907      	ldr	r1, [sp, #28]
 80057c0:	9306      	str	r3, [sp, #24]
 80057c2:	f7fd fae1 	bl	8002d88 <st_dword>
		sect = b_data + sz_au * (clen[0] + clen[1]); nsect = sz_au;	/* Start of the root directory and number of sectors */
 80057c6:	9b02      	ldr	r3, [sp, #8]
 80057c8:	9a08      	ldr	r2, [sp, #32]
 80057ca:	fb0b 3502 	mla	r5, fp, r2, r3
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80057ce:	9f04      	ldr	r7, [sp, #16]
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80057d0:	4621      	mov	r1, r4
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80057d2:	42b7      	cmp	r7, r6
 80057d4:	bf28      	it	cs
 80057d6:	4637      	movcs	r7, r6
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80057d8:	462a      	mov	r2, r5
 80057da:	463b      	mov	r3, r7
 80057dc:	9800      	ldr	r0, [sp, #0]
 80057de:	f7fd f982 	bl	8002ae6 <disk_write>
 80057e2:	4601      	mov	r1, r0
 80057e4:	2800      	cmp	r0, #0
 80057e6:	f47f af27 	bne.w	8005638 <f_mkfs+0x2bc>
			memset(buf, 0, ss);	/* Rest of entries are filled with zero */
 80057ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057ee:	4620      	mov	r0, r4
 80057f0:	f006 fbb4 	bl	800bf5c <memset>
		} while (nsect);
 80057f4:	1bf6      	subs	r6, r6, r7
			sect += n; nsect -= n;
 80057f6:	443d      	add	r5, r7
		} while (nsect);
 80057f8:	d1e9      	bne.n	80057ce <f_mkfs+0x452>
 80057fa:	2302      	movs	r3, #2
		sect = b_vol;
 80057fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
			memcpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 8005800:	f8df a2a0 	ldr.w	sl, [pc, #672]	@ 8005aa4 <f_mkfs+0x728>
 8005804:	9304      	str	r3, [sp, #16]
			memset(buf, 0, ss);
 8005806:	2100      	movs	r1, #0
 8005808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800580c:	4620      	mov	r0, r4
 800580e:	f006 fba5 	bl	800bf5c <memset>
			memcpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 8005812:	f8da 3000 	ldr.w	r3, [sl]
			st_qword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
 8005816:	9a01      	ldr	r2, [sp, #4]
			memcpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	f8da 3004 	ldr.w	r3, [sl, #4]
			st_qword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
 800581e:	f104 0040 	add.w	r0, r4, #64	@ 0x40
			memcpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 8005822:	6063      	str	r3, [r4, #4]
 8005824:	f8ba 3008 	ldrh.w	r3, [sl, #8]
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
 8005828:	465d      	mov	r5, fp
			memcpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 800582a:	8123      	strh	r3, [r4, #8]
 800582c:	f89a 300a 	ldrb.w	r3, [sl, #10]
 8005830:	72a3      	strb	r3, [r4, #10]
			st_qword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
 8005832:	2300      	movs	r3, #0
 8005834:	f7fd fab0 	bl	8002d98 <st_qword>
			st_qword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
 8005838:	2300      	movs	r3, #0
 800583a:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 800583e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005840:	f7fd faaa 	bl	8002d98 <st_qword>
	*ptr++ = (BYTE)val; val >>= 8;
 8005844:	2320      	movs	r3, #32
			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
 8005846:	990e      	ldr	r1, [sp, #56]	@ 0x38
	*ptr++ = (BYTE)val; val >>= 8;
 8005848:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
 800584c:	9805      	ldr	r0, [sp, #20]
 800584e:	f7fd fa9b 	bl	8002d88 <st_dword>
			st_dword(buf + BPB_DataOfsEx, (DWORD)(b_data - b_vol));	/* Data offset [sector] */
 8005852:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005854:	9806      	ldr	r0, [sp, #24]
 8005856:	f7fd fa97 	bl	8002d88 <st_dword>
			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
 800585a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800585c:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8005860:	f7fd fa92 	bl	8002d88 <st_dword>
			st_dword(buf + BPB_RootClusEx, 2 + clen[0] + clen[1]);	/* Root directory cluster number */
 8005864:	9b08      	ldr	r3, [sp, #32]
 8005866:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 800586a:	1c99      	adds	r1, r3, #2
 800586c:	f7fd fa8c 	bl	8002d88 <st_dword>
			st_dword(buf + BPB_VolIDEx, vsn);						/* VSN */
 8005870:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005872:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8005876:	f7fd fa87 	bl	8002d88 <st_dword>
	*ptr++ = (BYTE)val;
 800587a:	f04f 0301 	mov.w	r3, #1
 800587e:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;		/* Log2 of sector size [byte] */
 8005882:	2309      	movs	r3, #9
 8005884:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
 8005888:	086d      	lsrs	r5, r5, #1
 800588a:	f040 8088 	bne.w	800599e <f_mkfs+0x622>
			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
 800588e:	f04f 0301 	mov.w	r3, #1
 8005892:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
 8005896:	2380      	movs	r3, #128	@ 0x80
 8005898:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
	*ptr++ = (BYTE)val; val >>= 8;
 800589c:	23eb      	movs	r3, #235	@ 0xeb
 800589e:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
	*ptr++ = (BYTE)val;
 80058a2:	23fe      	movs	r3, #254	@ 0xfe
 80058a4:	f884 3079 	strb.w	r3, [r4, #121]	@ 0x79
	*ptr++ = (BYTE)val; val >>= 8;
 80058a8:	2355      	movs	r3, #85	@ 0x55
 80058aa:	f884 31fe 	strb.w	r3, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 80058ae:	23aa      	movs	r3, #170	@ 0xaa
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 80058b0:	462e      	mov	r6, r5
 80058b2:	462f      	mov	r7, r5
	*ptr++ = (BYTE)val;
 80058b4:	f884 31ff 	strb.w	r3, [r4, #511]	@ 0x1ff
				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], sum);
 80058b8:	f1a7 036a 	sub.w	r3, r7, #106	@ 0x6a
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d904      	bls.n	80058ca <f_mkfs+0x54e>
 80058c0:	2f70      	cmp	r7, #112	@ 0x70
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 80058c2:	bf1c      	itt	ne
 80058c4:	5de3      	ldrbne	r3, [r4, r7]
 80058c6:	eb03 0676 	addne.w	r6, r3, r6, ror #1
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 80058ca:	3701      	adds	r7, #1
 80058cc:	f5b7 7f00 	cmp.w	r7, #512	@ 0x200
 80058d0:	d1f2      	bne.n	80058b8 <f_mkfs+0x53c>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80058d2:	4621      	mov	r1, r4
 80058d4:	2301      	movs	r3, #1
 80058d6:	4642      	mov	r2, r8
 80058d8:	9800      	ldr	r0, [sp, #0]
 80058da:	f7fd f904 	bl	8002ae6 <disk_write>
 80058de:	f108 0901 	add.w	r9, r8, #1
 80058e2:	4601      	mov	r1, r0
 80058e4:	2800      	cmp	r0, #0
 80058e6:	f47f aea7 	bne.w	8005638 <f_mkfs+0x2bc>
			memset(buf, 0, ss);
 80058ea:	463a      	mov	r2, r7
 80058ec:	4620      	mov	r0, r4
 80058ee:	f006 fb35 	bl	800bf5c <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 80058f2:	2355      	movs	r3, #85	@ 0x55
 80058f4:	f884 31fe 	strb.w	r3, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 80058f8:	23aa      	movs	r3, #170	@ 0xaa
 80058fa:	f884 31ff 	strb.w	r3, [r4, #511]	@ 0x1ff
			for (j = 1; j < 9; j++) {
 80058fe:	1e63      	subs	r3, r4, #1
 8005900:	9303      	str	r3, [sp, #12]
 8005902:	f204 13ff 	addw	r3, r4, #511	@ 0x1ff
 8005906:	f108 0709 	add.w	r7, r8, #9
 800590a:	9302      	str	r3, [sp, #8]
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 800590c:	9b03      	ldr	r3, [sp, #12]
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 800590e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005912:	eb02 0676 	add.w	r6, r2, r6, ror #1
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 8005916:	9a02      	ldr	r2, [sp, #8]
 8005918:	429a      	cmp	r2, r3
 800591a:	d1f8      	bne.n	800590e <f_mkfs+0x592>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800591c:	4621      	mov	r1, r4
 800591e:	2301      	movs	r3, #1
 8005920:	464a      	mov	r2, r9
 8005922:	9800      	ldr	r0, [sp, #0]
 8005924:	f7fd f8df 	bl	8002ae6 <disk_write>
 8005928:	f109 0801 	add.w	r8, r9, #1
 800592c:	4601      	mov	r1, r0
 800592e:	2800      	cmp	r0, #0
 8005930:	f47f ae82 	bne.w	8005638 <f_mkfs+0x2bc>
			for (j = 1; j < 9; j++) {
 8005934:	4547      	cmp	r7, r8
 8005936:	d038      	beq.n	80059aa <f_mkfs+0x62e>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005938:	46c1      	mov	r9, r8
 800593a:	e7e7      	b.n	800590c <f_mkfs+0x590>
 800593c:	46b2      	mov	sl, r6
 800593e:	e6b4      	b.n	80056aa <f_mkfs+0x32e>
			for (i = 0; nbit != 0 && i / 8 < sz_buf * ss; buf[i / 8] |= 1 << (i % 8), i++, nbit--) ;	/* Mark used clusters */
 8005940:	5ca1      	ldrb	r1, [r4, r2]
 8005942:	f003 0307 	and.w	r3, r3, #7
 8005946:	fa09 f303 	lsl.w	r3, r9, r3
 800594a:	430b      	orrs	r3, r1
 800594c:	54a3      	strb	r3, [r4, r2]
 800594e:	3e01      	subs	r6, #1
 8005950:	e6b1      	b.n	80056b6 <f_mkfs+0x33a>
					st_dword(buf + i, (nbit > 1) ? clu + 1 : 0xFFFFFFFF);
 8005952:	f1b9 0f01 	cmp.w	r9, #1
 8005956:	f10a 0a01 	add.w	sl, sl, #1
 800595a:	eb04 0002 	add.w	r0, r4, r2
 800595e:	bf14      	ite	ne
 8005960:	4651      	movne	r1, sl
 8005962:	f04f 31ff 	moveq.w	r1, #4294967295
 8005966:	f7fd fa0f 	bl	8002d88 <st_dword>
					i += 4; clu++; nbit--;
 800596a:	3204      	adds	r2, #4
 800596c:	f109 39ff 	add.w	r9, r9, #4294967295
 8005970:	e6de      	b.n	8005730 <f_mkfs+0x3b4>
			memset(buf, 0, sz_buf * ss); i = 0;	/* Clear work area and reset write offset */
 8005972:	2200      	movs	r2, #0
 8005974:	e6dc      	b.n	8005730 <f_mkfs+0x3b4>
				if (nbit == 0 && j < 3) nbit = clen[j++];	/* Get next chain length */
 8005976:	2d02      	cmp	r5, #2
 8005978:	f63f aee2 	bhi.w	8005740 <f_mkfs+0x3c4>
 800597c:	a918      	add	r1, sp, #96	@ 0x60
 800597e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005982:	f853 9c0c 	ldr.w	r9, [r3, #-12]
 8005986:	3501      	adds	r5, #1
			} while (nbit != 0 && i < sz_buf * ss);
 8005988:	f1b9 0f00 	cmp.w	r9, #0
 800598c:	f43f aed8 	beq.w	8005740 <f_mkfs+0x3c4>
 8005990:	4297      	cmp	r7, r2
 8005992:	f63f aecd 	bhi.w	8005730 <f_mkfs+0x3b4>
 8005996:	e6d3      	b.n	8005740 <f_mkfs+0x3c4>
 8005998:	2301      	movs	r3, #1
 800599a:	9304      	str	r3, [sp, #16]
 800599c:	e733      	b.n	8005806 <f_mkfs+0x48a>
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
 800599e:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 80059a2:	3301      	adds	r3, #1
 80059a4:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80059a8:	e76e      	b.n	8005888 <f_mkfs+0x50c>
			memset(buf, 0, ss);
 80059aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059ae:	4620      	mov	r0, r4
 80059b0:	f006 fad4 	bl	800bf5c <memset>
			for ( ; j < 11; j++) {
 80059b4:	f109 0903 	add.w	r9, r9, #3
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80059b8:	9b03      	ldr	r3, [sp, #12]
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 80059ba:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80059be:	eb02 0676 	add.w	r6, r2, r6, ror #1
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 80059c2:	9a02      	ldr	r2, [sp, #8]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d1f8      	bne.n	80059ba <f_mkfs+0x63e>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80059c8:	2301      	movs	r3, #1
 80059ca:	4642      	mov	r2, r8
 80059cc:	4621      	mov	r1, r4
 80059ce:	9800      	ldr	r0, [sp, #0]
 80059d0:	f108 0701 	add.w	r7, r8, #1
 80059d4:	f7fd f887 	bl	8002ae6 <disk_write>
 80059d8:	2800      	cmp	r0, #0
 80059da:	f47f ae2d 	bne.w	8005638 <f_mkfs+0x2bc>
			for ( ; j < 11; j++) {
 80059de:	454f      	cmp	r7, r9
 80059e0:	d001      	beq.n	80059e6 <f_mkfs+0x66a>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80059e2:	46b8      	mov	r8, r7
 80059e4:	e7e8      	b.n	80059b8 <f_mkfs+0x63c>
			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
 80059e6:	1960      	adds	r0, r4, r5
 80059e8:	4631      	mov	r1, r6
 80059ea:	3504      	adds	r5, #4
 80059ec:	f7fd f9cc 	bl	8002d88 <st_dword>
 80059f0:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80059f4:	d1f7      	bne.n	80059e6 <f_mkfs+0x66a>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80059f6:	2301      	movs	r3, #1
 80059f8:	463a      	mov	r2, r7
 80059fa:	4621      	mov	r1, r4
 80059fc:	9800      	ldr	r0, [sp, #0]
 80059fe:	f108 0802 	add.w	r8, r8, #2
 8005a02:	f7fd f870 	bl	8002ae6 <disk_write>
 8005a06:	2800      	cmp	r0, #0
 8005a08:	f47f ae16 	bne.w	8005638 <f_mkfs+0x2bc>
		for (n = 0; n < 2; n++) {
 8005a0c:	9b04      	ldr	r3, [sp, #16]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d1c2      	bne.n	8005998 <f_mkfs+0x61c>
		sys = 0x07;		/* exFAT */
 8005a12:	f04f 0907 	mov.w	r9, #7
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 8005a16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d13a      	bne.n	8005a92 <f_mkfs+0x716>
			lba[0] = sz_vol; lba[1] = 0;
 8005a1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8005a1e:	2101      	movs	r1, #1
			lba[0] = sz_vol; lba[1] = 0;
 8005a20:	9315      	str	r3, [sp, #84]	@ 0x54
 8005a22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8005a24:	9800      	ldr	r0, [sp, #0]
 8005a26:	aa14      	add	r2, sp, #80	@ 0x50
			lba[0] = sz_vol; lba[1] = 0;
 8005a28:	9316      	str	r3, [sp, #88]	@ 0x58
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8005a2a:	f7fd f871 	bl	8002b10 <disk_ioctl>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	f47f ae02 	bne.w	8005638 <f_mkfs+0x2bc>
		sz_drv32 = (DWORD)sz_drv;
 8005a34:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 8005a38:	4b1b      	ldr	r3, [pc, #108]	@ (8005aa8 <f_mkfs+0x72c>)
 8005a3a:	4598      	cmp	r8, r3
 8005a3c:	f240 8117 	bls.w	8005c6e <f_mkfs+0x8f2>
 8005a40:	2305      	movs	r3, #5
 8005a42:	2508      	movs	r5, #8
 8005a44:	f64f 423e 	movw	r2, #64574	@ 0xfc3e
 8005a48:	006d      	lsls	r5, r5, #1
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b2ed      	uxtb	r5, r5
 8005a4e:	f000 8110 	beq.w	8005c72 <f_mkfs+0x8f6>
 8005a52:	fbb8 f1f5 	udiv	r1, r8, r5
 8005a56:	4291      	cmp	r1, r2
 8005a58:	d8f6      	bhi.n	8005a48 <f_mkfs+0x6cc>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 8005a5a:	2d00      	cmp	r5, #0
 8005a5c:	bf08      	it	eq
 8005a5e:	25ff      	moveq	r5, #255	@ 0xff
		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 8005a60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a64:	2100      	movs	r1, #0
 8005a66:	4620      	mov	r0, r4
 8005a68:	f006 fa78 	bl	800bf5c <memset>
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8005a6c:	f1b8 0f3f 	cmp.w	r8, #63	@ 0x3f
 8005a70:	f200 8101 	bhi.w	8005c76 <f_mkfs+0x8fa>
	*ptr++ = (BYTE)val; val >>= 8;
 8005a74:	2355      	movs	r3, #85	@ 0x55
 8005a76:	f884 31fe 	strb.w	r3, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 8005a7a:	23aa      	movs	r3, #170	@ 0xaa
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8005a7c:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val;
 8005a7e:	f884 31ff 	strb.w	r3, [r4, #511]	@ 0x1ff
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8005a82:	4621      	mov	r1, r4
 8005a84:	2301      	movs	r3, #1
 8005a86:	9800      	ldr	r0, [sp, #0]
 8005a88:	f7fd f82d 	bl	8002ae6 <disk_write>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	f47f add3 	bne.w	8005638 <f_mkfs+0x2bc>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005a92:	2200      	movs	r2, #0
 8005a94:	9800      	ldr	r0, [sp, #0]
 8005a96:	4611      	mov	r1, r2
 8005a98:	f7fd f83a 	bl	8002b10 <disk_ioctl>
 8005a9c:	3800      	subs	r0, #0
 8005a9e:	bf18      	it	ne
 8005aa0:	2001      	movne	r0, #1
 8005aa2:	e5ca      	b.n	800563a <f_mkfs+0x2be>
 8005aa4:	0800ed8c 	.word	0x0800ed8c
 8005aa8:	0007e1f7 	.word	0x0007e1f7
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8005aac:	0876      	lsrs	r6, r6, #1
 8005aae:	46b3      	mov	fp, r6
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 8005ab0:	fbb7 f2f6 	udiv	r2, r7, r6
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8005ab4:	49a6      	ldr	r1, [pc, #664]	@ (8005d50 <f_mkfs+0x9d4>)
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8005ab6:	0095      	lsls	r5, r2, #2
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8005ab8:	f5a2 427f 	sub.w	r2, r2, #65280	@ 0xff00
 8005abc:	3af6      	subs	r2, #246	@ 0xf6
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8005abe:	f205 2507 	addw	r5, r5, #519	@ 0x207
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8005ac2:	428a      	cmp	r2, r1
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8005ac4:	ea4f 2555 	mov.w	r5, r5, lsr #9
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8005ac8:	d83b      	bhi.n	8005b42 <f_mkfs+0x7c6>
				sz_dir = 0;		/* No static directory */
 8005aca:	2200      	movs	r2, #0
 8005acc:	9207      	str	r2, [sp, #28]
				sz_rsv = 32;	/* Number of reserved sectors */
 8005ace:	2220      	movs	r2, #32
 8005ad0:	46dc      	mov	ip, fp
 8005ad2:	f04f 0803 	mov.w	r8, #3
 8005ad6:	9203      	str	r2, [sp, #12]
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8005ad8:	9a01      	ldr	r2, [sp, #4]
 8005ada:	9903      	ldr	r1, [sp, #12]
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8005adc:	9808      	ldr	r0, [sp, #32]
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8005ade:	eb02 0a01 	add.w	sl, r2, r1
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 8005ae2:	9a02      	ldr	r2, [sp, #8]
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 8005ae4:	f1b8 0f03 	cmp.w	r8, #3
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 8005ae8:	fb02 a105 	mla	r1, r2, r5, sl
 8005aec:	9a07      	ldr	r2, [sp, #28]
 8005aee:	4411      	add	r1, r2
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8005af0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005af2:	440a      	add	r2, r1
 8005af4:	ea02 0200 	and.w	r2, r2, r0
 8005af8:	eba2 0201 	sub.w	r2, r2, r1
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 8005afc:	d12b      	bne.n	8005b56 <f_mkfs+0x7da>
				sz_rsv += n; b_fat += n;
 8005afe:	9803      	ldr	r0, [sp, #12]
 8005b00:	4492      	add	sl, r2
 8005b02:	4410      	add	r0, r2
 8005b04:	9003      	str	r0, [sp, #12]
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 8005b06:	9a01      	ldr	r2, [sp, #4]
 8005b08:	ebc2 1206 	rsb	r2, r2, r6, lsl #4
 8005b0c:	440a      	add	r2, r1
 8005b0e:	4297      	cmp	r7, r2
 8005b10:	d317      	bcc.n	8005b42 <f_mkfs+0x7c6>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 8005b12:	9a07      	ldr	r2, [sp, #28]
 8005b14:	9903      	ldr	r1, [sp, #12]
 8005b16:	1aba      	subs	r2, r7, r2
 8005b18:	1a52      	subs	r2, r2, r1
 8005b1a:	9902      	ldr	r1, [sp, #8]
			if (fsty == FS_FAT32) {
 8005b1c:	f1b8 0f03 	cmp.w	r8, #3
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 8005b20:	fb01 2215 	mls	r2, r1, r5, r2
 8005b24:	fbb2 f2f6 	udiv	r2, r2, r6
 8005b28:	9205      	str	r2, [sp, #20]
			if (fsty == FS_FAT32) {
 8005b2a:	d127      	bne.n	8005b7c <f_mkfs+0x800>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 8005b2c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005b30:	9905      	ldr	r1, [sp, #20]
 8005b32:	4291      	cmp	r1, r2
 8005b34:	f200 811a 	bhi.w	8005d6c <f_mkfs+0x9f0>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8005b38:	f1bb 0f00 	cmp.w	fp, #0
 8005b3c:	d101      	bne.n	8005b42 <f_mkfs+0x7c6>
 8005b3e:	2e01      	cmp	r6, #1
 8005b40:	d8b4      	bhi.n	8005aac <f_mkfs+0x730>
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128 sectors */
 8005b42:	200e      	movs	r0, #14
 8005b44:	e579      	b.n	800563a <f_mkfs+0x2be>
 8005b46:	46e3      	mov	fp, ip
 8005b48:	e4be      	b.n	80054c8 <f_mkfs+0x14c>
 8005b4a:	465e      	mov	r6, fp
 8005b4c:	e7b0      	b.n	8005ab0 <f_mkfs+0x734>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8005b4e:	0076      	lsls	r6, r6, #1
 8005b50:	e035      	b.n	8005bbe <f_mkfs+0x842>
 8005b52:	465e      	mov	r6, fp
 8005b54:	e038      	b.n	8005bc8 <f_mkfs+0x84c>
				if (n % n_fat) {	/* Adjust fractional error if needed */
 8005b56:	9802      	ldr	r0, [sp, #8]
 8005b58:	fbb2 fef0 	udiv	lr, r2, r0
 8005b5c:	fb00 2e1e 	mls	lr, r0, lr, r2
 8005b60:	f1be 0f00 	cmp.w	lr, #0
 8005b64:	d005      	beq.n	8005b72 <f_mkfs+0x7f6>
					n--; sz_rsv++; b_fat++;
 8005b66:	9803      	ldr	r0, [sp, #12]
 8005b68:	3a01      	subs	r2, #1
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	9003      	str	r0, [sp, #12]
 8005b6e:	f10a 0a01 	add.w	sl, sl, #1
				sz_fat += n / n_fat;
 8005b72:	9802      	ldr	r0, [sp, #8]
 8005b74:	fbb2 f2f0 	udiv	r2, r2, r0
 8005b78:	4415      	add	r5, r2
 8005b7a:	e7c4      	b.n	8005b06 <f_mkfs+0x78a>
			if (fsty == FS_FAT16) {
 8005b7c:	f1b8 0f02 	cmp.w	r8, #2
 8005b80:	f040 80ec 	bne.w	8005d5c <f_mkfs+0x9e0>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8005b84:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005b88:	9905      	ldr	r1, [sp, #20]
 8005b8a:	4291      	cmp	r1, r2
 8005b8c:	d93a      	bls.n	8005c04 <f_mkfs+0x888>
					if (sz_au == 0 && (pau * 2) <= 64) {
 8005b8e:	f1bb 0f00 	cmp.w	fp, #0
 8005b92:	d104      	bne.n	8005b9e <f_mkfs+0x822>
 8005b94:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 8005b98:	f1bb 0f40 	cmp.w	fp, #64	@ 0x40
 8005b9c:	d909      	bls.n	8005bb2 <f_mkfs+0x836>
					if ((fsopt & FM_FAT32)) {
 8005b9e:	079a      	lsls	r2, r3, #30
 8005ba0:	d4d1      	bmi.n	8005b46 <f_mkfs+0x7ca>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8005ba2:	f1bc 0f00 	cmp.w	ip, #0
 8005ba6:	d1cc      	bne.n	8005b42 <f_mkfs+0x7c6>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8005ba8:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 8005bac:	f1bb 0f80 	cmp.w	fp, #128	@ 0x80
 8005bb0:	d8c7      	bhi.n	8005b42 <f_mkfs+0x7c6>
				if (pau == 0) {	/* au auto-selection */
 8005bb2:	f1bb 0f00 	cmp.w	fp, #0
 8005bb6:	d1cc      	bne.n	8005b52 <f_mkfs+0x7d6>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8005bb8:	2601      	movs	r6, #1
 8005bba:	4966      	ldr	r1, [pc, #408]	@ (8005d54 <f_mkfs+0x9d8>)
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8005bbc:	0b3d      	lsrs	r5, r7, #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8005bbe:	f831 2b02 	ldrh.w	r2, [r1], #2
 8005bc2:	b10a      	cbz	r2, 8005bc8 <f_mkfs+0x84c>
 8005bc4:	42aa      	cmp	r2, r5
 8005bc6:	d9c2      	bls.n	8005b4e <f_mkfs+0x7d2>
				n_clst = (DWORD)sz_vol / pau;
 8005bc8:	fbb7 f5f6 	udiv	r5, r7, r6
				if (n_clst > MAX_FAT12) {
 8005bcc:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005bd0:	4295      	cmp	r5, r2
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 8005bd2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8005bd4:	bf98      	it	ls
 8005bd6:	eb05 0545 	addls.w	r5, r5, r5, lsl #1
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 8005bda:	9207      	str	r2, [sp, #28]
				sz_rsv = 1;						/* Number of reserved sectors */
 8005bdc:	f04f 0201 	mov.w	r2, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8005be0:	bf95      	itete	ls
 8005be2:	3501      	addls	r5, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8005be4:	3502      	addhi	r5, #2
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8005be6:	086d      	lsrls	r5, r5, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8005be8:	006d      	lslhi	r5, r5, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8005bea:	bf98      	it	ls
 8005bec:	3503      	addls	r5, #3
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8005bee:	f205 15ff 	addw	r5, r5, #511	@ 0x1ff
 8005bf2:	bf8c      	ite	hi
 8005bf4:	f04f 0802 	movhi.w	r8, #2
					fsty = FS_FAT12;
 8005bf8:	f04f 0801 	movls.w	r8, #1
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8005bfc:	46dc      	mov	ip, fp
 8005bfe:	0a6d      	lsrs	r5, r5, #9
				sz_rsv = 1;						/* Number of reserved sectors */
 8005c00:	9203      	str	r2, [sp, #12]
 8005c02:	e769      	b.n	8005ad8 <f_mkfs+0x75c>
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8005c04:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005c08:	9905      	ldr	r1, [sp, #20]
 8005c0a:	4291      	cmp	r1, r2
 8005c0c:	f200 80ae 	bhi.w	8005d6c <f_mkfs+0x9f0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8005c10:	f1bb 0f00 	cmp.w	fp, #0
 8005c14:	d0c8      	beq.n	8005ba8 <f_mkfs+0x82c>
 8005c16:	e794      	b.n	8005b42 <f_mkfs+0x7c6>
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 8005c18:	4639      	mov	r1, r7
 8005c1a:	f104 0020 	add.w	r0, r4, #32
 8005c1e:	f7fd f8b3 	bl	8002d88 <st_dword>
 8005c22:	e0d0      	b.n	8005dc6 <f_mkfs+0xa4a>
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 8005c24:	f104 0027 	add.w	r0, r4, #39	@ 0x27
 8005c28:	f7fd f8ae 	bl	8002d88 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 8005c2c:	f3c5 2307 	ubfx	r3, r5, #8, #8
	*ptr++ = (BYTE)val;
 8005c30:	75e3      	strb	r3, [r4, #23]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8005c32:	2380      	movs	r3, #128	@ 0x80
 8005c34:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8005c38:	2329      	movs	r3, #41	@ 0x29
 8005c3a:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8005c3e:	4b46      	ldr	r3, [pc, #280]	@ (8005d58 <f_mkfs+0x9dc>)
	*ptr++ = (BYTE)val; val >>= 8;
 8005c40:	75a5      	strb	r5, [r4, #22]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8005c42:	f104 022b 	add.w	r2, r4, #43	@ 0x2b
 8005c46:	f103 0110 	add.w	r1, r3, #16
 8005c4a:	f853 0b04 	ldr.w	r0, [r3], #4
 8005c4e:	428b      	cmp	r3, r1
 8005c50:	f842 0b04 	str.w	r0, [r2], #4
 8005c54:	d1f9      	bne.n	8005c4a <f_mkfs+0x8ce>
 8005c56:	e0e9      	b.n	8005e2c <f_mkfs+0xab0>
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 8005c58:	4620      	mov	r0, r4
 8005c5a:	9901      	ldr	r1, [sp, #4]
 8005c5c:	f7fd f894 	bl	8002d88 <st_dword>
 8005c60:	e15a      	b.n	8005f18 <f_mkfs+0xb9c>
		sys = 0x0C;		/* FAT32X */
 8005c62:	f04f 090c 	mov.w	r9, #12
 8005c66:	e6d6      	b.n	8005a16 <f_mkfs+0x69a>
		sys = 0x06;		/* FAT12/16 (large) */
 8005c68:	f04f 0906 	mov.w	r9, #6
 8005c6c:	e6d3      	b.n	8005a16 <f_mkfs+0x69a>
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 8005c6e:	2508      	movs	r5, #8
 8005c70:	e6f6      	b.n	8005a60 <f_mkfs+0x6e4>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 8005c72:	25ff      	movs	r5, #255	@ 0xff
 8005c74:	e6f4      	b.n	8005a60 <f_mkfs+0x6e4>
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8005c76:	223f      	movs	r2, #63	@ 0x3f
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Partitio start CHS cylinder */
 8005c78:	4693      	mov	fp, r2
 8005c7a:	f10d 0a54 	add.w	sl, sp, #84	@ 0x54
 8005c7e:	f504 76e3 	add.w	r6, r4, #454	@ 0x1c6
 8005c82:	f504 73fb 	add.w	r3, r4, #502	@ 0x1f6
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 8005c86:	f85a 7b04 	ldr.w	r7, [sl], #4
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 8005c8a:	2f64      	cmp	r7, #100	@ 0x64
 8005c8c:	d805      	bhi.n	8005c9a <f_mkfs+0x91e>
 8005c8e:	bf1b      	ittet	ne
 8005c90:	2164      	movne	r1, #100	@ 0x64
 8005c92:	fbb8 f1f1 	udivne	r1, r8, r1
 8005c96:	4647      	moveq	r7, r8
 8005c98:	434f      	mulne	r7, r1
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 8005c9a:	18b8      	adds	r0, r7, r2
 8005c9c:	bf2c      	ite	cs
 8005c9e:	2101      	movcs	r1, #1
 8005ca0:	2100      	movcc	r1, #0
 8005ca2:	4580      	cmp	r8, r0
 8005ca4:	d301      	bcc.n	8005caa <f_mkfs+0x92e>
 8005ca6:	2900      	cmp	r1, #0
 8005ca8:	d044      	beq.n	8005d34 <f_mkfs+0x9b8>
 8005caa:	eba8 0702 	sub.w	r7, r8, r2
			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Partition start LBA sector */
 8005cae:	4611      	mov	r1, r2
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	9301      	str	r3, [sp, #4]
 8005cb4:	f7fd f868 	bl	8002d88 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Size of partition [sector] */
 8005cb8:	4639      	mov	r1, r7
 8005cba:	1d30      	adds	r0, r6, #4
 8005cbc:	f7fd f864 	bl	8002d88 <st_dword>
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Partitio start CHS cylinder */
 8005cc0:	fbb2 f1fb 	udiv	r1, r2, fp
 8005cc4:	fbb1 f0f5 	udiv	r0, r1, r5
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Partition start CHS head */
 8005cc8:	fb05 1c10 	mls	ip, r5, r0, r1
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Partition start CHS sector */
 8005ccc:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
 8005cd0:	1a51      	subs	r1, r2, r1
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Partition start CHS head */
 8005cd2:	f806 cc07 	strb.w	ip, [r6, #-7]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8005cd6:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 8005cda:	f02c 0c3f 	bic.w	ip, ip, #63	@ 0x3f
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Partition start CHS sector */
 8005cde:	3101      	adds	r1, #1
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8005ce0:	ea41 010c 	orr.w	r1, r1, ip
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* Partition end CHS cylinder */
 8005ce4:	443a      	add	r2, r7
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8005ce6:	f806 1c06 	strb.w	r1, [r6, #-6]
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* Partition end CHS cylinder */
 8005cea:	1e51      	subs	r1, r2, #1
 8005cec:	fbb1 f7fb 	udiv	r7, r1, fp
			pte[PTE_StCyl] = (BYTE)cy;
 8005cf0:	f806 0c05 	strb.w	r0, [r6, #-5]
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* Partition end CHS cylinder */
 8005cf4:	fbb7 f0f5 	udiv	r0, r7, r5
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* Partition end CHS head */
 8005cf8:	fb05 7c10 	mls	ip, r5, r0, r7
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* Partition end CHS sector */
 8005cfc:	ebc7 1787 	rsb	r7, r7, r7, lsl #6
 8005d00:	1bc9      	subs	r1, r1, r7
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8005d02:	9b01      	ldr	r3, [sp, #4]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8005d04:	0887      	lsrs	r7, r0, #2
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* Partition end CHS sector */
 8005d06:	3101      	adds	r1, #1
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8005d08:	f027 073f 	bic.w	r7, r7, #63	@ 0x3f
 8005d0c:	4339      	orrs	r1, r7
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8005d0e:	42b3      	cmp	r3, r6
			pte[PTE_System] = sys;					/* System type */
 8005d10:	f806 9c04 	strb.w	r9, [r6, #-4]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* Partition end CHS head */
 8005d14:	f806 cc03 	strb.w	ip, [r6, #-3]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8005d18:	f806 1c02 	strb.w	r1, [r6, #-2]
			pte[PTE_EdCyl] = (BYTE)cy;
 8005d1c:	f806 0c01 	strb.w	r0, [r6, #-1]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8005d20:	f43f aea8 	beq.w	8005a74 <f_mkfs+0x6f8>
 8005d24:	2a00      	cmp	r2, #0
 8005d26:	f43f aea5 	beq.w	8005a74 <f_mkfs+0x6f8>
 8005d2a:	4590      	cmp	r8, r2
 8005d2c:	f106 0610 	add.w	r6, r6, #16
 8005d30:	d8a9      	bhi.n	8005c86 <f_mkfs+0x90a>
 8005d32:	e69f      	b.n	8005a74 <f_mkfs+0x6f8>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 8005d34:	2f00      	cmp	r7, #0
 8005d36:	d1ba      	bne.n	8005cae <f_mkfs+0x932>
 8005d38:	e69c      	b.n	8005a74 <f_mkfs+0x6f8>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005d3a:	200b      	movs	r0, #11
 8005d3c:	e47d      	b.n	800563a <f_mkfs+0x2be>
	if (ds & STA_NOINIT) return FR_NOT_READY;
 8005d3e:	2003      	movs	r0, #3
 8005d40:	e47b      	b.n	800563a <f_mkfs+0x2be>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 8005d42:	200a      	movs	r0, #10
 8005d44:	e479      	b.n	800563a <f_mkfs+0x2be>
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 8005d46:	2011      	movs	r0, #17
 8005d48:	e477      	b.n	800563a <f_mkfs+0x2be>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 8005d4a:	2013      	movs	r0, #19
 8005d4c:	e475      	b.n	800563a <f_mkfs+0x2be>
 8005d4e:	bf00      	nop
 8005d50:	0ffeffff 	.word	0x0ffeffff
 8005d54:	0800eddc 	.word	0x0800eddc
 8005d58:	0800edc8 	.word	0x0800edc8
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 8005d5c:	f640 73f5 	movw	r3, #4085	@ 0xff5
 8005d60:	9a05      	ldr	r2, [sp, #20]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	f63f aeed 	bhi.w	8005b42 <f_mkfs+0x7c6>
 8005d68:	f04f 0801 	mov.w	r8, #1
		memset(buf, 0, ss);
 8005d6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d70:	2100      	movs	r1, #0
 8005d72:	4620      	mov	r0, r4
 8005d74:	f006 f8f2 	bl	800bf5c <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8005d78:	4b8c      	ldr	r3, [pc, #560]	@ (8005fac <f_mkfs+0xc30>)
 8005d7a:	f1b8 0f03 	cmp.w	r8, #3
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	bf08      	it	eq
 8005d82:	f04f 0900 	moveq.w	r9, #0
 8005d86:	6022      	str	r2, [r4, #0]
 8005d88:	685a      	ldr	r2, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d8a:	f884 9011 	strb.w	r9, [r4, #17]
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8005d8e:	6062      	str	r2, [r4, #4]
 8005d90:	891a      	ldrh	r2, [r3, #8]
 8005d92:	7a9b      	ldrb	r3, [r3, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d94:	f3c9 2907 	ubfx	r9, r9, #8, #8
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8005d98:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	7323      	strb	r3, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d9e:	9b03      	ldr	r3, [sp, #12]
		if (sz_vol < 0x10000) {
 8005da0:	f5b7 3f80 	cmp.w	r7, #65536	@ 0x10000
	*ptr++ = (BYTE)val; val >>= 8;
 8005da4:	f3c3 2b07 	ubfx	fp, r3, #8, #8
 8005da8:	73a3      	strb	r3, [r4, #14]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 8005daa:	9b02      	ldr	r3, [sp, #8]
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8005dac:	8122      	strh	r2, [r4, #8]
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8005dae:	7366      	strb	r6, [r4, #13]
	*ptr++ = (BYTE)val;
 8005db0:	f884 b00f 	strb.w	fp, [r4, #15]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 8005db4:	7423      	strb	r3, [r4, #16]
	*ptr++ = (BYTE)val;
 8005db6:	f884 9012 	strb.w	r9, [r4, #18]
		if (sz_vol < 0x10000) {
 8005dba:	f4bf af2d 	bcs.w	8005c18 <f_mkfs+0x89c>
	*ptr++ = (BYTE)val; val >>= 8;
 8005dbe:	74e7      	strb	r7, [r4, #19]
 8005dc0:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8005dc4:	7527      	strb	r7, [r4, #20]
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8005dc6:	23f8      	movs	r3, #248	@ 0xf8
 8005dc8:	7563      	strb	r3, [r4, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 8005dca:	233f      	movs	r3, #63	@ 0x3f
 8005dcc:	7623      	strb	r3, [r4, #24]
 8005dce:	23ff      	movs	r3, #255	@ 0xff
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 8005dd0:	9901      	ldr	r1, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8005dd2:	76a3      	strb	r3, [r4, #26]
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 8005dd4:	f104 001c 	add.w	r0, r4, #28
 8005dd8:	f7fc ffd6 	bl	8002d88 <st_dword>
		if (fsty == FS_FAT32) {
 8005ddc:	f1b8 0f03 	cmp.w	r8, #3
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 8005de0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
		if (fsty == FS_FAT32) {
 8005de2:	f47f af1f 	bne.w	8005c24 <f_mkfs+0x8a8>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 8005de6:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 8005dea:	f7fc ffcd 	bl	8002d88 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8005dee:	4629      	mov	r1, r5
 8005df0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005df4:	f7fc ffc8 	bl	8002d88 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 8005df8:	2302      	movs	r3, #2
 8005dfa:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8005e04:	2306      	movs	r3, #6
 8005e06:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8005e0a:	2380      	movs	r3, #128	@ 0x80
 8005e0c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8005e10:	2329      	movs	r3, #41	@ 0x29
 8005e12:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8005e16:	4b66      	ldr	r3, [pc, #408]	@ (8005fb0 <f_mkfs+0xc34>)
 8005e18:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005e1c:	f103 0110 	add.w	r1, r3, #16
 8005e20:	f853 0b04 	ldr.w	r0, [r3], #4
 8005e24:	428b      	cmp	r3, r1
 8005e26:	f842 0b04 	str.w	r0, [r2], #4
 8005e2a:	d1f9      	bne.n	8005e20 <f_mkfs+0xaa4>
	*ptr++ = (BYTE)val; val >>= 8;
 8005e2c:	f04f 0b55 	mov.w	fp, #85	@ 0x55
	*ptr++ = (BYTE)val;
 8005e30:	f04f 09aa 	mov.w	r9, #170	@ 0xaa
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8005e34:	8819      	ldrh	r1, [r3, #0]
 8005e36:	789b      	ldrb	r3, [r3, #2]
 8005e38:	8011      	strh	r1, [r2, #0]
 8005e3a:	7093      	strb	r3, [r2, #2]
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	2301      	movs	r3, #1
 8005e40:	9a01      	ldr	r2, [sp, #4]
 8005e42:	9800      	ldr	r0, [sp, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e44:	f884 b1fe 	strb.w	fp, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 8005e48:	f884 91ff 	strb.w	r9, [r4, #511]	@ 0x1ff
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8005e4c:	f7fc fe4b 	bl	8002ae6 <disk_write>
 8005e50:	4607      	mov	r7, r0
 8005e52:	2800      	cmp	r0, #0
 8005e54:	f47f abf0 	bne.w	8005638 <f_mkfs+0x2bc>
		if (fsty == FS_FAT32) {
 8005e58:	f1b8 0f03 	cmp.w	r8, #3
 8005e5c:	d137      	bne.n	8005ece <f_mkfs+0xb52>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8005e5e:	9a01      	ldr	r2, [sp, #4]
 8005e60:	2301      	movs	r3, #1
 8005e62:	4621      	mov	r1, r4
 8005e64:	3206      	adds	r2, #6
 8005e66:	9800      	ldr	r0, [sp, #0]
 8005e68:	f7fc fe3d 	bl	8002ae6 <disk_write>
			memset(buf, 0, ss);
 8005e6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e70:	4639      	mov	r1, r7
 8005e72:	4620      	mov	r0, r4
 8005e74:	f006 f872 	bl	800bf5c <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8005e78:	2352      	movs	r3, #82	@ 0x52
 8005e7a:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e7c:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e7e:	2361      	movs	r3, #97	@ 0x61
	*ptr++ = (BYTE)val;
 8005e80:	2241      	movs	r2, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8005e82:	2172      	movs	r1, #114	@ 0x72
	*ptr++ = (BYTE)val; val >>= 8;
 8005e84:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 8005e86:	f884 31e7 	strb.w	r3, [r4, #487]	@ 0x1e7
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8005e8a:	9b05      	ldr	r3, [sp, #20]
	*ptr++ = (BYTE)val;
 8005e8c:	70e2      	strb	r2, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e8e:	f884 11e4 	strb.w	r1, [r4, #484]	@ 0x1e4
	*ptr++ = (BYTE)val; val >>= 8;
 8005e92:	f884 11e5 	strb.w	r1, [r4, #485]	@ 0x1e5
	*ptr++ = (BYTE)val; val >>= 8;
 8005e96:	f884 21e6 	strb.w	r2, [r4, #486]	@ 0x1e6
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8005e9a:	1e59      	subs	r1, r3, #1
 8005e9c:	f504 70f4 	add.w	r0, r4, #488	@ 0x1e8
 8005ea0:	f7fc ff72 	bl	8002d88 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 8005ea4:	2302      	movs	r3, #2
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8005ea6:	9a01      	ldr	r2, [sp, #4]
 8005ea8:	4621      	mov	r1, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8005eaa:	f884 31ec 	strb.w	r3, [r4, #492]	@ 0x1ec
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8005eae:	3207      	adds	r2, #7
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	9800      	ldr	r0, [sp, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005eb4:	f884 b1fe 	strb.w	fp, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 8005eb8:	f884 91ff 	strb.w	r9, [r4, #511]	@ 0x1ff
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8005ebc:	f7fc fe13 	bl	8002ae6 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	9a01      	ldr	r2, [sp, #4]
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	9800      	ldr	r0, [sp, #0]
 8005ec8:	441a      	add	r2, r3
 8005eca:	f7fc fe0c 	bl	8002ae6 <disk_write>
		memset(buf, 0, sz_buf * ss);
 8005ece:	9b06      	ldr	r3, [sp, #24]
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f022 0201 	bic.w	r2, r2, #1
 8005edc:	f006 f83e 	bl	800bf5c <memset>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8005ee0:	f1b8 0f01 	cmp.w	r8, #1
 8005ee4:	4b33      	ldr	r3, [pc, #204]	@ (8005fb4 <f_mkfs+0xc38>)
 8005ee6:	bf18      	it	ne
 8005ee8:	f06f 0307 	mvnne.w	r3, #7
 8005eec:	f04f 0b00 	mov.w	fp, #0
 8005ef0:	9301      	str	r3, [sp, #4]
			if (fsty == FS_FAT32) {
 8005ef2:	f1b8 0f03 	cmp.w	r8, #3
 8005ef6:	f47f aeaf 	bne.w	8005c58 <f_mkfs+0x8dc>
	*ptr++ = (BYTE)val; val >>= 8;
 8005efa:	23f8      	movs	r3, #248	@ 0xf8
 8005efc:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005efe:	23ff      	movs	r3, #255	@ 0xff
 8005f00:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f02:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 8005f04:	70e3      	strb	r3, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f06:	7123      	strb	r3, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f08:	7163      	strb	r3, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f0a:	71a3      	strb	r3, [r4, #6]
	*ptr++ = (BYTE)val;
 8005f0c:	71e3      	strb	r3, [r4, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f0e:	7223      	strb	r3, [r4, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f10:	7263      	strb	r3, [r4, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f12:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 8005f14:	230f      	movs	r3, #15
 8005f16:	72e3      	strb	r3, [r4, #11]
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8005f18:	462f      	mov	r7, r5
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8005f1a:	f8dd 9010 	ldr.w	r9, [sp, #16]
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005f1e:	4621      	mov	r1, r4
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8005f20:	45b9      	cmp	r9, r7
 8005f22:	bf28      	it	cs
 8005f24:	46b9      	movcs	r9, r7
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005f26:	4652      	mov	r2, sl
 8005f28:	464b      	mov	r3, r9
 8005f2a:	9800      	ldr	r0, [sp, #0]
 8005f2c:	f7fc fddb 	bl	8002ae6 <disk_write>
 8005f30:	4601      	mov	r1, r0
 8005f32:	2800      	cmp	r0, #0
 8005f34:	f47f ab80 	bne.w	8005638 <f_mkfs+0x2bc>
				memset(buf, 0, ss);	/* Rest of FAT area is initially zero */
 8005f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f006 f80d 	bl	800bf5c <memset>
			} while (nsect);
 8005f42:	ebb7 0709 	subs.w	r7, r7, r9
				sect += n; nsect -= n;
 8005f46:	44ca      	add	sl, r9
			} while (nsect);
 8005f48:	d1e7      	bne.n	8005f1a <f_mkfs+0xb9e>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8005f4a:	f1bb 0f00 	cmp.w	fp, #0
 8005f4e:	bf0c      	ite	eq
 8005f50:	2301      	moveq	r3, #1
 8005f52:	2302      	movne	r3, #2
 8005f54:	9a02      	ldr	r2, [sp, #8]
 8005f56:	f04f 0b01 	mov.w	fp, #1
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d8c9      	bhi.n	8005ef2 <f_mkfs+0xb76>
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8005f5e:	9b07      	ldr	r3, [sp, #28]
 8005f60:	f1b8 0f03 	cmp.w	r8, #3
 8005f64:	bf18      	it	ne
 8005f66:	461e      	movne	r6, r3
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8005f68:	9d04      	ldr	r5, [sp, #16]
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005f6a:	4652      	mov	r2, sl
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8005f6c:	42b5      	cmp	r5, r6
 8005f6e:	bf28      	it	cs
 8005f70:	4635      	movcs	r5, r6
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8005f72:	4621      	mov	r1, r4
 8005f74:	462b      	mov	r3, r5
 8005f76:	9800      	ldr	r0, [sp, #0]
 8005f78:	f7fc fdb5 	bl	8002ae6 <disk_write>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	f47f ab5b 	bne.w	8005638 <f_mkfs+0x2bc>
		} while (nsect);
 8005f82:	1b76      	subs	r6, r6, r5
			sect += n; nsect -= n;
 8005f84:	44aa      	add	sl, r5
		} while (nsect);
 8005f86:	d1ef      	bne.n	8005f68 <f_mkfs+0xbec>
	} else if (fsty == FS_FAT32) {
 8005f88:	f1b8 0f03 	cmp.w	r8, #3
 8005f8c:	f43f ae69 	beq.w	8005c62 <f_mkfs+0x8e6>
	} else if (sz_vol >= 0x10000) {
 8005f90:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005f92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f96:	f4bf ae67 	bcs.w	8005c68 <f_mkfs+0x8ec>
		sys = 0x04;		/* FAT16 */
 8005f9a:	f1b8 0f02 	cmp.w	r8, #2
 8005f9e:	bf14      	ite	ne
 8005fa0:	f04f 0901 	movne.w	r9, #1
 8005fa4:	f04f 0904 	moveq.w	r9, #4
 8005fa8:	e535      	b.n	8005a16 <f_mkfs+0x69a>
 8005faa:	bf00      	nop
 8005fac:	0800eda8 	.word	0x0800eda8
 8005fb0:	0800edb4 	.word	0x0800edb4
 8005fb4:	00fffff8 	.word	0x00fffff8

08005fb8 <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
 8005fb8:	287f      	cmp	r0, #127	@ 0x7f
 8005fba:	d801      	bhi.n	8005fc0 <ff_uni2oem+0x8>
		c = (WCHAR)uni;
 8005fbc:	b280      	uxth	r0, r0
 8005fbe:	4770      	bx	lr

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 8005fc0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005fc4:	d211      	bcs.n	8005fea <ff_uni2oem+0x32>
 8005fc6:	f240 13b5 	movw	r3, #437	@ 0x1b5
 8005fca:	4299      	cmp	r1, r3
 8005fcc:	d10d      	bne.n	8005fea <ff_uni2oem+0x32>
 8005fce:	2300      	movs	r3, #0
 8005fd0:	4a07      	ldr	r2, [pc, #28]	@ (8005ff0 <ff_uni2oem+0x38>)
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 8005fd2:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005fd6:	4281      	cmp	r1, r0
 8005fd8:	d101      	bne.n	8005fde <ff_uni2oem+0x26>
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	e002      	b.n	8005fe4 <ff_uni2oem+0x2c>
 8005fde:	3301      	adds	r3, #1
 8005fe0:	2b80      	cmp	r3, #128	@ 0x80
 8005fe2:	d1f6      	bne.n	8005fd2 <ff_uni2oem+0x1a>
			c = (c + 0x80) & 0xFF;
 8005fe4:	3380      	adds	r3, #128	@ 0x80
 8005fe6:	b2d8      	uxtb	r0, r3
 8005fe8:	4770      	bx	lr
	WCHAR c = 0;
 8005fea:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	0800f144 	.word	0x0800f144

08005ff4 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
 8005ff4:	287f      	cmp	r0, #127	@ 0x7f
 8005ff6:	d90d      	bls.n	8006014 <ff_oem2uni+0x20>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 8005ff8:	f240 13b5 	movw	r3, #437	@ 0x1b5
 8005ffc:	4299      	cmp	r1, r3
 8005ffe:	d108      	bne.n	8006012 <ff_oem2uni+0x1e>
			if (oem < 0x100) c = p[oem - 0x80];
 8006000:	28ff      	cmp	r0, #255	@ 0xff
 8006002:	d806      	bhi.n	8006012 <ff_oem2uni+0x1e>
 8006004:	4b04      	ldr	r3, [pc, #16]	@ (8006018 <ff_oem2uni+0x24>)
 8006006:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800600a:	3880      	subs	r0, #128	@ 0x80
 800600c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006010:	4770      	bx	lr
	WCHAR c = 0;
 8006012:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	0800f144 	.word	0x0800f144

0800601c <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 800601c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
{
 8006020:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (uni < 0x10000) {	/* Is it in BMP? */
 8006022:	d221      	bcs.n	8006068 <ff_wtoupper+0x4c>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
 8006024:	4a1f      	ldr	r2, [pc, #124]	@ (80060a4 <ff_wtoupper+0x88>)
 8006026:	4920      	ldr	r1, [pc, #128]	@ (80060a8 <ff_wtoupper+0x8c>)
		uc = (WORD)uni;
 8006028:	b283      	uxth	r3, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
 800602a:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800602e:	bf28      	it	cs
 8006030:	460a      	movcs	r2, r1
 8006032:	1d14      	adds	r4, r2, #4
		for (;;) {
			bc = *p++;								/* Get the block base */
 8006034:	f834 2c04 	ldrh.w	r2, [r4, #-4]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8006038:	4621      	mov	r1, r4
 800603a:	b1a2      	cbz	r2, 8006066 <ff_wtoupper+0x4a>
 800603c:	4293      	cmp	r3, r2
 800603e:	d312      	bcc.n	8006066 <ff_wtoupper+0x4a>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006040:	f834 5c02 	ldrh.w	r5, [r4, #-2]
 8006044:	0a2e      	lsrs	r6, r5, #8
 8006046:	b2ed      	uxtb	r5, r5
			if (uc < bc + nc) {	/* In the block? */
 8006048:	18af      	adds	r7, r5, r2
 800604a:	42b8      	cmp	r0, r7
 800604c:	da23      	bge.n	8006096 <ff_wtoupper+0x7a>
				switch (cmd) {
 800604e:	2e08      	cmp	r6, #8
 8006050:	d809      	bhi.n	8006066 <ff_wtoupper+0x4a>
 8006052:	e8df f006 	tbb	[pc, r6]
 8006056:	0a05      	.short	0x0a05
 8006058:	17151310 	.word	0x17151310
 800605c:	1b19      	.short	0x1b19
 800605e:	1d          	.byte	0x1d
 800605f:	00          	.byte	0x00
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8006060:	1a80      	subs	r0, r0, r2
 8006062:	f834 3010 	ldrh.w	r3, [r4, r0, lsl #1]
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
		}
		uni = uc;
 8006066:	4618      	mov	r0, r3
	}

	return uni;
}
 8006068:	bdf0      	pop	{r4, r5, r6, r7, pc}
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 800606a:	1a9a      	subs	r2, r3, r2
 800606c:	f002 0201 	and.w	r2, r2, #1
 8006070:	1a9a      	subs	r2, r3, r2
 8006072:	b293      	uxth	r3, r2
 8006074:	e7f7      	b.n	8006066 <ff_wtoupper+0x4a>
				case 2: uc -= 16; break;			/* Shift -16 */
 8006076:	3b10      	subs	r3, #16
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8006078:	b29b      	uxth	r3, r3
 800607a:	e7f4      	b.n	8006066 <ff_wtoupper+0x4a>
				case 3:	uc -= 32; break;			/* Shift -32 */
 800607c:	3b20      	subs	r3, #32
 800607e:	e7fb      	b.n	8006078 <ff_wtoupper+0x5c>
				case 4:	uc -= 48; break;			/* Shift -48 */
 8006080:	3b30      	subs	r3, #48	@ 0x30
 8006082:	e7f9      	b.n	8006078 <ff_wtoupper+0x5c>
				case 5:	uc -= 26; break;			/* Shift -26 */
 8006084:	3b1a      	subs	r3, #26
 8006086:	e7f7      	b.n	8006078 <ff_wtoupper+0x5c>
				case 6:	uc += 8; break;				/* Shift +8 */
 8006088:	3308      	adds	r3, #8
 800608a:	e7f5      	b.n	8006078 <ff_wtoupper+0x5c>
				case 7: uc -= 80; break;			/* Shift -80 */
 800608c:	3b50      	subs	r3, #80	@ 0x50
 800608e:	e7f3      	b.n	8006078 <ff_wtoupper+0x5c>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8006090:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8006094:	e7f0      	b.n	8006078 <ff_wtoupper+0x5c>
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8006096:	3404      	adds	r4, #4
 8006098:	2e00      	cmp	r6, #0
 800609a:	d1cb      	bne.n	8006034 <ff_wtoupper+0x18>
 800609c:	eb01 0245 	add.w	r2, r1, r5, lsl #1
 80060a0:	e7c7      	b.n	8006032 <ff_wtoupper+0x16>
 80060a2:	bf00      	nop
 80060a4:	0800ef52 	.word	0x0800ef52
 80060a8:	0800ee96 	.word	0x0800ee96

080060ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80060ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060b0:	2410      	movs	r4, #16
{
 80060b2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060b4:	4622      	mov	r2, r4
 80060b6:	eb0d 0004 	add.w	r0, sp, r4
 80060ba:	2100      	movs	r1, #0
 80060bc:	f005 ff4e 	bl	800bf5c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80060c0:	4b5f      	ldr	r3, [pc, #380]	@ (8006240 <MX_GPIO_Init+0x194>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80060c2:	f8df a180 	ldr.w	sl, [pc, #384]	@ 8006244 <MX_GPIO_Init+0x198>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80060c6:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80060c8:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 8006248 <MX_GPIO_Init+0x19c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80060cc:	4322      	orrs	r2, r4
 80060ce:	619a      	str	r2, [r3, #24]
 80060d0:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TF_CS_GPIO_Port, TF_CS_Pin, GPIO_PIN_SET);
 80060d2:	f8df 8178 	ldr.w	r8, [pc, #376]	@ 800624c <MX_GPIO_Init+0x1a0>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80060d6:	4022      	ands	r2, r4
 80060d8:	9200      	str	r2, [sp, #0]
 80060da:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80060dc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80060de:	4650      	mov	r0, sl
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80060e0:	f042 0220 	orr.w	r2, r2, #32
 80060e4:	619a      	str	r2, [r3, #24]
 80060e6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80060e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80060ec:	f002 0220 	and.w	r2, r2, #32
 80060f0:	9201      	str	r2, [sp, #4]
 80060f2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80060f4:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLE_LED_Pin|PH1_Pin|BDC_EN2_Pin|LED_Y_Pin
 80060f6:	4f56      	ldr	r7, [pc, #344]	@ (8006250 <MX_GPIO_Init+0x1a4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80060f8:	f042 0204 	orr.w	r2, r2, #4
 80060fc:	619a      	str	r2, [r3, #24]
 80060fe:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006100:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006102:	f002 0204 	and.w	r2, r2, #4
 8006106:	9202      	str	r2, [sp, #8]
 8006108:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800610a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800610c:	2602      	movs	r6, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800610e:	f042 0208 	orr.w	r2, r2, #8
 8006112:	619a      	str	r2, [r3, #24]
 8006114:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8006116:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	9303      	str	r3, [sp, #12]
 800611e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8006120:	f002 fc00 	bl	8008924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8006124:	4648      	mov	r0, r9
 8006126:	2200      	movs	r2, #0
 8006128:	2102      	movs	r1, #2
 800612a:	f002 fbfb 	bl	8008924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TF_CS_GPIO_Port, TF_CS_Pin, GPIO_PIN_SET);
 800612e:	4621      	mov	r1, r4
 8006130:	4640      	mov	r0, r8
 8006132:	2201      	movs	r2, #1
 8006134:	f002 fbf6 	bl	8008924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, BLE_LED_Pin|PH1_Pin|BDC_EN2_Pin|LED_Y_Pin
 8006138:	4638      	mov	r0, r7
 800613a:	2200      	movs	r2, #0
 800613c:	f24c 21d4 	movw	r1, #49876	@ 0xc2d4
 8006140:	f002 fbf0 	bl	8008924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BDC_EN1_GPIO_Port, BDC_EN1_Pin, GPIO_PIN_RESET);
 8006144:	2200      	movs	r2, #0
 8006146:	4640      	mov	r0, r8
 8006148:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800614c:	f002 fbea 	bl	8008924 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006150:	2400      	movs	r4, #0
 8006152:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006156:	4650      	mov	r0, sl
 8006158:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800615a:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800615e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006160:	f002 fb02 	bl	8008768 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006164:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8006168:	4650      	mov	r0, sl
 800616a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800616c:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006170:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006172:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8006174:	f002 faf8 	bl	8008768 <HAL_GPIO_Init>

  /*Configure GPIO pin : TF_CD_Pin */
  GPIO_InitStruct.Pin = TF_CD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(TF_CD_GPIO_Port, &GPIO_InitStruct);
 8006178:	4648      	mov	r0, r9
 800617a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800617c:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006180:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(TF_CD_GPIO_Port, &GPIO_InitStruct);
 8006182:	f002 faf1 	bl	8008768 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED_G_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8006186:	4648      	mov	r0, r9
 8006188:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800618a:	e9cd 6504 	strd	r6, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800618e:	e9cd 5606 	strd	r5, r6, [sp, #24]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8006192:	f002 fae9 	bl	8008768 <HAL_GPIO_Init>

  /*Configure GPIO pins : TF_CS_Pin BDC_EN1_Pin */
  GPIO_InitStruct.Pin = TF_CS_Pin|BDC_EN1_Pin;
 8006196:	f44f 7388 	mov.w	r3, #272	@ 0x110
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800619a:	4640      	mov	r0, r8
 800619c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800619e:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061a2:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061a6:	f002 fadf 	bl	8008768 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_LED_Pin PH1_Pin BDC_EN2_Pin LED_Y_Pin
                           SCL_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = BLE_LED_Pin|PH1_Pin|BDC_EN2_Pin|LED_Y_Pin
 80061aa:	f24c 2354 	movw	r3, #49748	@ 0xc254
                          |SCL_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061ae:	4638      	mov	r0, r7
 80061b0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061b2:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061b6:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061ba:	f002 fad5 	bl	8008768 <HAL_GPIO_Init>

  /*Configure GPIO pins : BDC1_STP_Pin NRESET_Pin INCREASE_Pin EX_GAS_Pin */
  GPIO_InitStruct.Pin = BDC1_STP_Pin|NRESET_Pin|INCREASE_Pin|EX_GAS_Pin;
 80061be:	f243 1308 	movw	r3, #12552	@ 0x3108
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061c2:	4638      	mov	r0, r7
 80061c4:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061c6:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ca:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061cc:	f002 facc 	bl	8008768 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_EXTI11_Pin */
  GPIO_InitStruct.Pin = KEY_EXTI11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80061d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061d4:	4b1f      	ldr	r3, [pc, #124]	@ (8006254 <MX_GPIO_Init+0x1a8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(KEY_EXTI11_GPIO_Port, &GPIO_InitStruct);
 80061d6:	4640      	mov	r0, r8
 80061d8:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80061da:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061de:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(KEY_EXTI11_GPIO_Port, &GPIO_InitStruct);
 80061e0:	f002 fac2 	bl	8008768 <HAL_GPIO_Init>

  /*Configure GPIO pins : Q_SET_Pin START_Pin */
  GPIO_InitStruct.Pin = Q_SET_Pin|START_Pin;
 80061e4:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061e8:	4640      	mov	r0, r8
 80061ea:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061f2:	f002 fab9 	bl	8008768 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONFIRM_Pin */
  GPIO_InitStruct.Pin = CONFIRM_Pin;
 80061f6:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(CONFIRM_GPIO_Port, &GPIO_InitStruct);
 80061f8:	4638      	mov	r0, r7
 80061fa:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061fc:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006200:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(CONFIRM_GPIO_Port, &GPIO_InitStruct);
 8006202:	f002 fab1 	bl	8008768 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDA_Pin */
  GPIO_InitStruct.Pin = SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8006206:	2311      	movs	r3, #17
 8006208:	2180      	movs	r1, #128	@ 0x80
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 800620a:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800620c:	e9cd 1304 	strd	r1, r3, [sp, #16]
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8006210:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006212:	e9cd 5606 	strd	r5, r6, [sp, #24]
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8006216:	f002 faa7 	bl	8008768 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 800621a:	4a0f      	ldr	r2, [pc, #60]	@ (8006258 <MX_GPIO_Init+0x1ac>)

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 800621c:	210a      	movs	r1, #10
  __HAL_AFIO_REMAP_PD01_ENABLE();
 800621e:	6853      	ldr	r3, [r2, #4]
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 8006220:	2028      	movs	r0, #40	@ 0x28
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8006222:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8006226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800622a:	6053      	str	r3, [r2, #4]
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 800622c:	4622      	mov	r2, r4
 800622e:	f002 f8e1 	bl	80083f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006232:	2028      	movs	r0, #40	@ 0x28
 8006234:	f002 f90e 	bl	8008454 <HAL_NVIC_EnableIRQ>

}
 8006238:	b008      	add	sp, #32
 800623a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623e:	bf00      	nop
 8006240:	40021000 	.word	0x40021000
 8006244:	40011000 	.word	0x40011000
 8006248:	40011400 	.word	0x40011400
 800624c:	40010800 	.word	0x40010800
 8006250:	40010c00 	.word	0x40010c00
 8006254:	10310000 	.word	0x10310000
 8006258:	40010000 	.word	0x40010000

0800625c <SDA_IN>:

/* USER CODE BEGIN 2 */
void SDA_IN(void) {
 800625c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800625e:	2300      	movs	r3, #0
 8006260:	9301      	str	r3, [sp, #4]
 8006262:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pin = SDA_Pin;
 8006264:	2380      	movs	r3, #128	@ 0x80
 8006266:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006268:	2301      	movs	r3, #1
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 800626a:	4669      	mov	r1, sp
 800626c:	4803      	ldr	r0, [pc, #12]	@ (800627c <SDA_IN+0x20>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800626e:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8006270:	f002 fa7a 	bl	8008768 <HAL_GPIO_Init>
}
 8006274:	b005      	add	sp, #20
 8006276:	f85d fb04 	ldr.w	pc, [sp], #4
 800627a:	bf00      	nop
 800627c:	40010c00 	.word	0x40010c00

08006280 <SDA_OUT>:

void SDA_OUT(void) {
 8006280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  GPIO_InitStruct.Pin = SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8006282:	2280      	movs	r2, #128	@ 0x80
 8006284:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006286:	2101      	movs	r1, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8006288:	e9cd 2300 	strd	r2, r3, [sp]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800628c:	2302      	movs	r3, #2
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 800628e:	4804      	ldr	r0, [pc, #16]	@ (80062a0 <SDA_OUT+0x20>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006290:	e9cd 1302 	strd	r1, r3, [sp, #8]
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8006294:	4669      	mov	r1, sp
 8006296:	f002 fa67 	bl	8008768 <HAL_GPIO_Init>
}
 800629a:	b005      	add	sp, #20
 800629c:	f85d fb04 	ldr.w	pc, [sp], #4
 80062a0:	40010c00 	.word	0x40010c00

080062a4 <I2C_Start>:
/**
 * @brief  I2C start signal
 * @param  None
 * @retval None
 */
void I2C_Start(void) {
 80062a4:	b510      	push	{r4, lr}
  SDA_OUT();
  SDA_H();
 80062a6:	4c0c      	ldr	r4, [pc, #48]	@ (80062d8 <I2C_Start+0x34>)
  SDA_OUT();
 80062a8:	f7ff ffea 	bl	8006280 <SDA_OUT>
  SDA_H();
 80062ac:	4620      	mov	r0, r4
 80062ae:	2201      	movs	r2, #1
 80062b0:	2180      	movs	r1, #128	@ 0x80
 80062b2:	f002 fb37 	bl	8008924 <HAL_GPIO_WritePin>
  SCL_H();
 80062b6:	4620      	mov	r0, r4
 80062b8:	2201      	movs	r2, #1
 80062ba:	2140      	movs	r1, #64	@ 0x40
 80062bc:	f002 fb32 	bl	8008924 <HAL_GPIO_WritePin>
  I2C_Delay();
  SDA_L();
 80062c0:	4620      	mov	r0, r4
 80062c2:	2200      	movs	r2, #0
 80062c4:	2180      	movs	r1, #128	@ 0x80
 80062c6:	f002 fb2d 	bl	8008924 <HAL_GPIO_WritePin>
  I2C_Delay();
  SCL_L();
 80062ca:	4620      	mov	r0, r4
  I2C_Delay();
}
 80062cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SCL_L();
 80062d0:	2200      	movs	r2, #0
 80062d2:	2140      	movs	r1, #64	@ 0x40
 80062d4:	f002 bb26 	b.w	8008924 <HAL_GPIO_WritePin>
 80062d8:	40010c00 	.word	0x40010c00

080062dc <I2C_Stop>:
/**
 * @brief  I2C stop signal
 * @param  None
 * @retval None
 */
void I2C_Stop(void) {
 80062dc:	b510      	push	{r4, lr}
  SDA_OUT();
  SCL_L();
 80062de:	4c0c      	ldr	r4, [pc, #48]	@ (8006310 <I2C_Stop+0x34>)
  SDA_OUT();
 80062e0:	f7ff ffce 	bl	8006280 <SDA_OUT>
  SCL_L();
 80062e4:	4620      	mov	r0, r4
 80062e6:	2200      	movs	r2, #0
 80062e8:	2140      	movs	r1, #64	@ 0x40
 80062ea:	f002 fb1b 	bl	8008924 <HAL_GPIO_WritePin>
  SDA_L();
 80062ee:	4620      	mov	r0, r4
 80062f0:	2200      	movs	r2, #0
 80062f2:	2180      	movs	r1, #128	@ 0x80
 80062f4:	f002 fb16 	bl	8008924 <HAL_GPIO_WritePin>
  I2C_Delay();
  SCL_H();
 80062f8:	4620      	mov	r0, r4
 80062fa:	2201      	movs	r2, #1
 80062fc:	2140      	movs	r1, #64	@ 0x40
 80062fe:	f002 fb11 	bl	8008924 <HAL_GPIO_WritePin>
  SDA_H();
 8006302:	4620      	mov	r0, r4
  I2C_Delay();
}
 8006304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SDA_H();
 8006308:	2201      	movs	r2, #1
 800630a:	2180      	movs	r1, #128	@ 0x80
 800630c:	f002 bb0a 	b.w	8008924 <HAL_GPIO_WritePin>
 8006310:	40010c00 	.word	0x40010c00

08006314 <I2C_Ack>:
/**
 * @brief  I2C send ACK signal
 * @param  None
 * @retval None
 */
void I2C_Ack(void) {
 8006314:	b510      	push	{r4, lr}
  SCL_L();
 8006316:	4c0c      	ldr	r4, [pc, #48]	@ (8006348 <I2C_Ack+0x34>)
 8006318:	2200      	movs	r2, #0
 800631a:	4620      	mov	r0, r4
 800631c:	2140      	movs	r1, #64	@ 0x40
 800631e:	f002 fb01 	bl	8008924 <HAL_GPIO_WritePin>
  SDA_OUT();
 8006322:	f7ff ffad 	bl	8006280 <SDA_OUT>
  SDA_L();
 8006326:	4620      	mov	r0, r4
 8006328:	2200      	movs	r2, #0
 800632a:	2180      	movs	r1, #128	@ 0x80
 800632c:	f002 fafa 	bl	8008924 <HAL_GPIO_WritePin>
  I2C_Delay();
  SCL_H();
 8006330:	4620      	mov	r0, r4
 8006332:	2201      	movs	r2, #1
 8006334:	2140      	movs	r1, #64	@ 0x40
 8006336:	f002 faf5 	bl	8008924 <HAL_GPIO_WritePin>
  I2C_Delay();
  SCL_L();
 800633a:	4620      	mov	r0, r4
  I2C_Delay();
}
 800633c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SCL_L();
 8006340:	2200      	movs	r2, #0
 8006342:	2140      	movs	r1, #64	@ 0x40
 8006344:	f002 baee 	b.w	8008924 <HAL_GPIO_WritePin>
 8006348:	40010c00 	.word	0x40010c00

0800634c <I2C_NAck>:
/**
 * @brief  I2C send NACK signal
 * @param  None
 * @retval None
 */
void I2C_NAck(void) {
 800634c:	b510      	push	{r4, lr}
  SCL_L();
 800634e:	4c0c      	ldr	r4, [pc, #48]	@ (8006380 <I2C_NAck+0x34>)
 8006350:	2200      	movs	r2, #0
 8006352:	4620      	mov	r0, r4
 8006354:	2140      	movs	r1, #64	@ 0x40
 8006356:	f002 fae5 	bl	8008924 <HAL_GPIO_WritePin>
  SDA_OUT();
 800635a:	f7ff ff91 	bl	8006280 <SDA_OUT>
  SDA_H();
 800635e:	4620      	mov	r0, r4
 8006360:	2201      	movs	r2, #1
 8006362:	2180      	movs	r1, #128	@ 0x80
 8006364:	f002 fade 	bl	8008924 <HAL_GPIO_WritePin>
  I2C_Delay();
  SCL_H();
 8006368:	4620      	mov	r0, r4
 800636a:	2201      	movs	r2, #1
 800636c:	2140      	movs	r1, #64	@ 0x40
 800636e:	f002 fad9 	bl	8008924 <HAL_GPIO_WritePin>
  I2C_Delay();
  SCL_L();
 8006372:	4620      	mov	r0, r4
  I2C_Delay();
}
 8006374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SCL_L();
 8006378:	2200      	movs	r2, #0
 800637a:	2140      	movs	r1, #64	@ 0x40
 800637c:	f002 bad2 	b.w	8008924 <HAL_GPIO_WritePin>
 8006380:	40010c00 	.word	0x40010c00

08006384 <I2C_WaitAck>:
/**
 * @brief  I2C wait ACK signal
 * @param  None
 * @retval 1: ACK 0: NACK
 */
uint8_t I2C_WaitAck(void) {
 8006384:	b538      	push	{r3, r4, r5, lr}
  uint8_t ucErrTime = 0;
  SDA_IN();
 8006386:	f7ff ff69 	bl	800625c <SDA_IN>
  SDA_H();
 800638a:	2201      	movs	r2, #1
 800638c:	2180      	movs	r1, #128	@ 0x80
 800638e:	480f      	ldr	r0, [pc, #60]	@ (80063cc <I2C_WaitAck+0x48>)
 8006390:	f002 fac8 	bl	8008924 <HAL_GPIO_WritePin>
  I2C_Delay();
  SCL_H();
 8006394:	2201      	movs	r2, #1
 8006396:	2140      	movs	r1, #64	@ 0x40
 8006398:	480c      	ldr	r0, [pc, #48]	@ (80063cc <I2C_WaitAck+0x48>)
 800639a:	f002 fac3 	bl	8008924 <HAL_GPIO_WritePin>
 800639e:	25fb      	movs	r5, #251	@ 0xfb
  I2C_Delay();
  while (SDA_READ()) {
 80063a0:	2180      	movs	r1, #128	@ 0x80
 80063a2:	480a      	ldr	r0, [pc, #40]	@ (80063cc <I2C_WaitAck+0x48>)
 80063a4:	f002 fab8 	bl	8008918 <HAL_GPIO_ReadPin>
 80063a8:	4604      	mov	r4, r0
 80063aa:	b928      	cbnz	r0, 80063b8 <I2C_WaitAck+0x34>
    if (ucErrTime > 250) {
      I2C_Stop();
      return 1;
    }
  }
  SCL_L();
 80063ac:	4602      	mov	r2, r0
 80063ae:	2140      	movs	r1, #64	@ 0x40
 80063b0:	4806      	ldr	r0, [pc, #24]	@ (80063cc <I2C_WaitAck+0x48>)
 80063b2:	f002 fab7 	bl	8008924 <HAL_GPIO_WritePin>
  I2C_Delay();
  return 0;
 80063b6:	e006      	b.n	80063c6 <I2C_WaitAck+0x42>
    if (ucErrTime > 250) {
 80063b8:	3d01      	subs	r5, #1
 80063ba:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 80063be:	d1ef      	bne.n	80063a0 <I2C_WaitAck+0x1c>
      I2C_Stop();
 80063c0:	f7ff ff8c 	bl	80062dc <I2C_Stop>
      return 1;
 80063c4:	2401      	movs	r4, #1
}
 80063c6:	4620      	mov	r0, r4
 80063c8:	bd38      	pop	{r3, r4, r5, pc}
 80063ca:	bf00      	nop
 80063cc:	40010c00 	.word	0x40010c00

080063d0 <I2C_SendByte>:
/**
 * @brief  I2C send byte
 * @param  sendbyte: byte to send
 * @retval None
 */
void I2C_SendByte(uint8_t SendByte) {
 80063d0:	b570      	push	{r4, r5, r6, lr}
 80063d2:	4604      	mov	r4, r0
  uint8_t i = 0;
  SDA_OUT();
 80063d4:	f7ff ff54 	bl	8006280 <SDA_OUT>
  SCL_L();
 80063d8:	2200      	movs	r2, #0
 80063da:	2140      	movs	r1, #64	@ 0x40
 80063dc:	480e      	ldr	r0, [pc, #56]	@ (8006418 <I2C_SendByte+0x48>)
 80063de:	f002 faa1 	bl	8008924 <HAL_GPIO_WritePin>
 80063e2:	2508      	movs	r5, #8
  for (i = 0; i < 8; i++) {
    if (SendByte & 0x80)
      SDA_H();
    else
      SDA_L();
 80063e4:	4e0c      	ldr	r6, [pc, #48]	@ (8006418 <I2C_SendByte+0x48>)
    if (SendByte & 0x80)
 80063e6:	0623      	lsls	r3, r4, #24
      SDA_H();
 80063e8:	bf4c      	ite	mi
 80063ea:	2201      	movmi	r2, #1
      SDA_L();
 80063ec:	2200      	movpl	r2, #0
 80063ee:	2180      	movs	r1, #128	@ 0x80
 80063f0:	4630      	mov	r0, r6
 80063f2:	f002 fa97 	bl	8008924 <HAL_GPIO_WritePin>
    SendByte <<= 1;
    I2C_Delay();
    SCL_H();
 80063f6:	2201      	movs	r2, #1
 80063f8:	2140      	movs	r1, #64	@ 0x40
 80063fa:	4630      	mov	r0, r6
 80063fc:	f002 fa92 	bl	8008924 <HAL_GPIO_WritePin>
  for (i = 0; i < 8; i++) {
 8006400:	3d01      	subs	r5, #1
    I2C_Delay();
    SCL_L();
 8006402:	2200      	movs	r2, #0
 8006404:	2140      	movs	r1, #64	@ 0x40
 8006406:	4630      	mov	r0, r6
 8006408:	f002 fa8c 	bl	8008924 <HAL_GPIO_WritePin>
    SendByte <<= 1;
 800640c:	0064      	lsls	r4, r4, #1
  for (i = 0; i < 8; i++) {
 800640e:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
    SendByte <<= 1;
 8006412:	b2e4      	uxtb	r4, r4
  for (i = 0; i < 8; i++) {
 8006414:	d1e7      	bne.n	80063e6 <I2C_SendByte+0x16>
    I2C_Delay();
  }
}
 8006416:	bd70      	pop	{r4, r5, r6, pc}
 8006418:	40010c00 	.word	0x40010c00

0800641c <I2C_ReadByte>:
/**
 * @brief  I2C read byte
 * @param  None
 * @retval read byte
 */
uint8_t I2C_ReadByte(void) {
 800641c:	b570      	push	{r4, r5, r6, lr}
  uint8_t i = 0, ReceiveByte = 0;
  SDA_IN();
 800641e:	f7ff ff1d 	bl	800625c <SDA_IN>
 8006422:	2508      	movs	r5, #8
  uint8_t i = 0, ReceiveByte = 0;
 8006424:	2400      	movs	r4, #0
  for (i = 0; i < 8; i++) {
    SCL_L();
 8006426:	4e0f      	ldr	r6, [pc, #60]	@ (8006464 <I2C_ReadByte+0x48>)
 8006428:	2200      	movs	r2, #0
 800642a:	2140      	movs	r1, #64	@ 0x40
 800642c:	4630      	mov	r0, r6
 800642e:	f002 fa79 	bl	8008924 <HAL_GPIO_WritePin>
    I2C_Delay();
    SCL_H();
 8006432:	2140      	movs	r1, #64	@ 0x40
 8006434:	4630      	mov	r0, r6
 8006436:	2201      	movs	r2, #1
 8006438:	f002 fa74 	bl	8008924 <HAL_GPIO_WritePin>
    ReceiveByte <<= 1;
 800643c:	0064      	lsls	r4, r4, #1
    if (SDA_READ())
 800643e:	2180      	movs	r1, #128	@ 0x80
 8006440:	4630      	mov	r0, r6
    ReceiveByte <<= 1;
 8006442:	b2e4      	uxtb	r4, r4
    if (SDA_READ())
 8006444:	f002 fa68 	bl	8008918 <HAL_GPIO_ReadPin>
 8006448:	b108      	cbz	r0, 800644e <I2C_ReadByte+0x32>
      ReceiveByte++;
 800644a:	3401      	adds	r4, #1
 800644c:	b2e4      	uxtb	r4, r4
  for (i = 0; i < 8; i++) {
 800644e:	3d01      	subs	r5, #1
 8006450:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 8006454:	d1e8      	bne.n	8006428 <I2C_ReadByte+0xc>
    I2C_Delay();
  }
  SCL_L();
 8006456:	462a      	mov	r2, r5
 8006458:	2140      	movs	r1, #64	@ 0x40
 800645a:	4802      	ldr	r0, [pc, #8]	@ (8006464 <I2C_ReadByte+0x48>)
 800645c:	f002 fa62 	bl	8008924 <HAL_GPIO_WritePin>
  return ReceiveByte;
}
 8006460:	4620      	mov	r0, r4
 8006462:	bd70      	pop	{r4, r5, r6, pc}
 8006464:	40010c00 	.word	0x40010c00

08006468 <I2C_WriteData>:
 * @param  SlaveAddress: slave address
 * @param  Data: data buffer
 * @param  len: data length
 * @retval 0: success 1: fail
 */
uint8_t I2C_WriteData(uint8_t SlaveAddress, uint8_t *Data, uint8_t len) {
 8006468:	b570      	push	{r4, r5, r6, lr}
 800646a:	4605      	mov	r5, r0
 800646c:	460c      	mov	r4, r1
 800646e:	4616      	mov	r6, r2
  uint8_t i = 0;
  I2C_Start();
 8006470:	f7ff ff18 	bl	80062a4 <I2C_Start>
  I2C_SendByte(SlaveAddress);
 8006474:	4628      	mov	r0, r5
 8006476:	f7ff ffab 	bl	80063d0 <I2C_SendByte>
  if (I2C_WaitAck()) {
 800647a:	f7ff ff83 	bl	8006384 <I2C_WaitAck>
 800647e:	4605      	mov	r5, r0
 8006480:	b968      	cbnz	r0, 800649e <I2C_WriteData+0x36>
 8006482:	4426      	add	r6, r4
    I2C_Stop();
    return 1;
  }
  for (i = 0; i < len; i++) {
 8006484:	42b4      	cmp	r4, r6
 8006486:	d102      	bne.n	800648e <I2C_WriteData+0x26>
    if (I2C_WaitAck()) {
      I2C_Stop();
      return 1;
    }
  }
  I2C_Stop();
 8006488:	f7ff ff28 	bl	80062dc <I2C_Stop>
  return 0;
 800648c:	e00a      	b.n	80064a4 <I2C_WriteData+0x3c>
    I2C_SendByte(Data[i]);
 800648e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006492:	f7ff ff9d 	bl	80063d0 <I2C_SendByte>
    if (I2C_WaitAck()) {
 8006496:	f7ff ff75 	bl	8006384 <I2C_WaitAck>
 800649a:	2800      	cmp	r0, #0
 800649c:	d0f2      	beq.n	8006484 <I2C_WriteData+0x1c>
    I2C_Stop();
 800649e:	f7ff ff1d 	bl	80062dc <I2C_Stop>
    return 1;
 80064a2:	2501      	movs	r5, #1
}
 80064a4:	4628      	mov	r0, r5
 80064a6:	bd70      	pop	{r4, r5, r6, pc}

080064a8 <I2C_ReadData>:
 * @param  SlaveAddress: slave address
 * @param  Data: data buffer
 * @param  len: data length
 * @retval 0: success 1: fail
 */
uint8_t I2C_ReadData(uint8_t SlaveAddress, uint8_t *Data, uint8_t len) {
 80064a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ac:	4604      	mov	r4, r0
 80064ae:	460f      	mov	r7, r1
 80064b0:	4616      	mov	r6, r2
  uint8_t i = 0;
  I2C_Start();
 80064b2:	f7ff fef7 	bl	80062a4 <I2C_Start>
  I2C_SendByte(SlaveAddress + 1);
 80064b6:	1c60      	adds	r0, r4, #1
 80064b8:	b2c0      	uxtb	r0, r0
 80064ba:	f7ff ff89 	bl	80063d0 <I2C_SendByte>
  if (I2C_WaitAck()) {
 80064be:	f7ff ff61 	bl	8006384 <I2C_WaitAck>
 80064c2:	4604      	mov	r4, r0
 80064c4:	b938      	cbnz	r0, 80064d6 <I2C_ReadData+0x2e>
 80064c6:	4605      	mov	r5, r0
    I2C_Stop();
    return 1;
  }
  for (i = 0; i < len; i++) {
    Data[i] = I2C_ReadByte();
    if (i == (len - 1))
 80064c8:	f106 38ff 	add.w	r8, r6, #4294967295
  for (i = 0; i < len; i++) {
 80064cc:	42b5      	cmp	r5, r6
 80064ce:	d108      	bne.n	80064e2 <I2C_ReadData+0x3a>
      I2C_NAck();
    else
      I2C_Ack();
  }
  I2C_Stop();
 80064d0:	f7ff ff04 	bl	80062dc <I2C_Stop>
  return 0;
 80064d4:	e002      	b.n	80064dc <I2C_ReadData+0x34>
    I2C_Stop();
 80064d6:	f7ff ff01 	bl	80062dc <I2C_Stop>
    return 1;
 80064da:	2401      	movs	r4, #1
}
 80064dc:	4620      	mov	r0, r4
 80064de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Data[i] = I2C_ReadByte();
 80064e2:	f7ff ff9b 	bl	800641c <I2C_ReadByte>
    if (i == (len - 1))
 80064e6:	45a8      	cmp	r8, r5
    Data[i] = I2C_ReadByte();
 80064e8:	5578      	strb	r0, [r7, r5]
    if (i == (len - 1))
 80064ea:	d103      	bne.n	80064f4 <I2C_ReadData+0x4c>
      I2C_NAck();
 80064ec:	f7ff ff2e 	bl	800634c <I2C_NAck>
  for (i = 0; i < len; i++) {
 80064f0:	3501      	adds	r5, #1
 80064f2:	e7eb      	b.n	80064cc <I2C_ReadData+0x24>
      I2C_Ack();
 80064f4:	f7ff ff0e 	bl	8006314 <I2C_Ack>
 80064f8:	e7fa      	b.n	80064f0 <I2C_ReadData+0x48>
	...

080064fc <key_scan>:
volatile uint16_t key_press_time = 0;

volatile enum KEY_VAL key_code;

//在按键中断中调用
uint8_t key_scan(){
 80064fc:	b508      	push	{r3, lr}

	if(KEY_EXTI11 == GPIO_PIN_RESET){
 80064fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006502:	4829      	ldr	r0, [pc, #164]	@ (80065a8 <key_scan+0xac>)
 8006504:	f002 fa08 	bl	8008918 <HAL_GPIO_ReadPin>
 8006508:	b108      	cbz	r0, 800650e <key_scan+0x12>
			else if(!START_KEY) 		return START_KEY_PRESS;
			else if(!NRESET_KEY) 		return NRESET_KEY_PRESS;
			else if(!PAUSE_KEY) 		return PAUSE_KEY_PRESS;
		}
	}
	return 0;
 800650a:	2000      	movs	r0, #0
}
 800650c:	bd08      	pop	{r3, pc}
		HAL_Delay(20);
 800650e:	2014      	movs	r0, #20
 8006510:	f001 fc40 	bl	8007d94 <HAL_Delay>
		if(KEY_EXTI11 == GPIO_PIN_RESET){
 8006514:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006518:	4823      	ldr	r0, [pc, #140]	@ (80065a8 <key_scan+0xac>)
 800651a:	f002 f9fd 	bl	8008918 <HAL_GPIO_ReadPin>
 800651e:	2800      	cmp	r0, #0
 8006520:	d1f3      	bne.n	800650a <key_scan+0xe>
			if(!DECREASE_KEY) 			return DECREASE_KEY_PRESS;
 8006522:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 8006526:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800652a:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 800652e:	f002 f9f3 	bl	8008918 <HAL_GPIO_ReadPin>
 8006532:	b358      	cbz	r0, 800658c <key_scan+0x90>
			else if(!CONFIRM_KEY) 	return CONFIRM_KEY_PRESS;
 8006534:	2120      	movs	r1, #32
 8006536:	481d      	ldr	r0, [pc, #116]	@ (80065ac <key_scan+0xb0>)
 8006538:	f002 f9ee 	bl	8008918 <HAL_GPIO_ReadPin>
 800653c:	b340      	cbz	r0, 8006590 <key_scan+0x94>
			else if(!INCREASE_KEY) 	return INCREASE_KEY_PRESS;
 800653e:	2108      	movs	r1, #8
 8006540:	481a      	ldr	r0, [pc, #104]	@ (80065ac <key_scan+0xb0>)
 8006542:	f002 f9e9 	bl	8008918 <HAL_GPIO_ReadPin>
 8006546:	b328      	cbz	r0, 8006594 <key_scan+0x98>
			else if(!Q_SET_KEY) 		return Q_SET_KEY_PRESS;
 8006548:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800654c:	4816      	ldr	r0, [pc, #88]	@ (80065a8 <key_scan+0xac>)
 800654e:	f002 f9e3 	bl	8008918 <HAL_GPIO_ReadPin>
 8006552:	b308      	cbz	r0, 8006598 <key_scan+0x9c>
			else if(!EX_GAS_KEY) 		return EX_GAS_KEY_PRESS;
 8006554:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006558:	4814      	ldr	r0, [pc, #80]	@ (80065ac <key_scan+0xb0>)
 800655a:	f002 f9dd 	bl	8008918 <HAL_GPIO_ReadPin>
 800655e:	b1e8      	cbz	r0, 800659c <key_scan+0xa0>
			else if(!START_KEY) 		return START_KEY_PRESS;
 8006560:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006564:	4810      	ldr	r0, [pc, #64]	@ (80065a8 <key_scan+0xac>)
 8006566:	f002 f9d7 	bl	8008918 <HAL_GPIO_ReadPin>
 800656a:	b1c8      	cbz	r0, 80065a0 <key_scan+0xa4>
			else if(!NRESET_KEY) 		return NRESET_KEY_PRESS;
 800656c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006570:	480e      	ldr	r0, [pc, #56]	@ (80065ac <key_scan+0xb0>)
 8006572:	f002 f9d1 	bl	8008918 <HAL_GPIO_ReadPin>
 8006576:	b1a8      	cbz	r0, 80065a4 <key_scan+0xa8>
			else if(!PAUSE_KEY) 		return PAUSE_KEY_PRESS;
 8006578:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800657c:	480c      	ldr	r0, [pc, #48]	@ (80065b0 <key_scan+0xb4>)
 800657e:	f002 f9cb 	bl	8008918 <HAL_GPIO_ReadPin>
 8006582:	fab0 f080 	clz	r0, r0
 8006586:	0940      	lsrs	r0, r0, #5
 8006588:	00c0      	lsls	r0, r0, #3
 800658a:	e7bf      	b.n	800650c <key_scan+0x10>
			if(!DECREASE_KEY) 			return DECREASE_KEY_PRESS;
 800658c:	2001      	movs	r0, #1
 800658e:	e7bd      	b.n	800650c <key_scan+0x10>
			else if(!CONFIRM_KEY) 	return CONFIRM_KEY_PRESS;
 8006590:	2002      	movs	r0, #2
 8006592:	e7bb      	b.n	800650c <key_scan+0x10>
			else if(!INCREASE_KEY) 	return INCREASE_KEY_PRESS;
 8006594:	2003      	movs	r0, #3
 8006596:	e7b9      	b.n	800650c <key_scan+0x10>
			else if(!Q_SET_KEY) 		return Q_SET_KEY_PRESS;
 8006598:	2004      	movs	r0, #4
 800659a:	e7b7      	b.n	800650c <key_scan+0x10>
			else if(!EX_GAS_KEY) 		return EX_GAS_KEY_PRESS;
 800659c:	2005      	movs	r0, #5
 800659e:	e7b5      	b.n	800650c <key_scan+0x10>
			else if(!START_KEY) 		return START_KEY_PRESS;
 80065a0:	2006      	movs	r0, #6
 80065a2:	e7b3      	b.n	800650c <key_scan+0x10>
			else if(!NRESET_KEY) 		return NRESET_KEY_PRESS;
 80065a4:	2007      	movs	r0, #7
 80065a6:	e7b1      	b.n	800650c <key_scan+0x10>
 80065a8:	40010800 	.word	0x40010800
 80065ac:	40010c00 	.word	0x40010c00
 80065b0:	40011000 	.word	0x40011000

080065b4 <deal_key>:

void deal_key(){
		if(key_value && key_press_sigle){
 80065b4:	4b79      	ldr	r3, [pc, #484]	@ (800679c <deal_key+0x1e8>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d045      	beq.n	8006648 <deal_key+0x94>
 80065bc:	4a78      	ldr	r2, [pc, #480]	@ (80067a0 <deal_key+0x1ec>)
 80065be:	7811      	ldrb	r1, [r2, #0]
 80065c0:	2900      	cmp	r1, #0
 80065c2:	d041      	beq.n	8006648 <deal_key+0x94>
		key_press_sigle = 0;//清除单次按标记，防止重复执行
 80065c4:	2100      	movs	r1, #0

		switch(key_value){//检测按键值
 80065c6:	3b01      	subs	r3, #1
		key_press_sigle = 0;//清除单次按标记，防止重复执行
 80065c8:	7011      	strb	r1, [r2, #0]
		switch(key_value){//检测按键值
 80065ca:	2b07      	cmp	r3, #7
 80065cc:	d83c      	bhi.n	8006648 <deal_key+0x94>
 80065ce:	e8df f013 	tbh	[pc, r3, lsl #1]
 80065d2:	0008      	.short	0x0008
 80065d4:	0062002e 	.word	0x0062002e
 80065d8:	008e0084 	.word	0x008e0084
 80065dc:	00c30094 	.word	0x00c30094
 80065e0:	00cd      	.short	0x00cd
			case DECREASE_KEY_PRESS://减小
			{
			if(page_location == Main_page){
 80065e2:	4b70      	ldr	r3, [pc, #448]	@ (80067a4 <deal_key+0x1f0>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	b993      	cbnz	r3, 800660e <deal_key+0x5a>
				if(!waiting_start && !Injecting){//不处于已按确认等待按开始键状态
 80065e8:	4b6f      	ldr	r3, [pc, #444]	@ (80067a8 <deal_key+0x1f4>)
 80065ea:	4a70      	ldr	r2, [pc, #448]	@ (80067ac <deal_key+0x1f8>)
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	7812      	ldrb	r2, [r2, #0]
 80065f0:	431a      	orrs	r2, r3
 80065f2:	d129      	bne.n	8006648 <deal_key+0x94>
					if(Dosage_set > 1000)
 80065f4:	496e      	ldr	r1, [pc, #440]	@ (80067b0 <deal_key+0x1fc>)
 80065f6:	880b      	ldrh	r3, [r1, #0]
 80065f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80065fc:	d902      	bls.n	8006604 <deal_key+0x50>
						Dosage_set = 0;
 80065fe:	800a      	strh	r2, [r1, #0]
				if(!waiting_start && !Injecting){
					if(Dosage_set < 1000)
						Dosage_set+=2;
					else if(Dosage_set >= 1000)
						Dosage_set = 1000;
					key_value_Refresh = 1;
 8006600:	4b6c      	ldr	r3, [pc, #432]	@ (80067b4 <deal_key+0x200>)
 8006602:	e00f      	b.n	8006624 <deal_key+0x70>
					else if(Dosage_set > 0)
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0fb      	beq.n	8006600 <deal_key+0x4c>
						Dosage_set -= 2;
 8006608:	3b02      	subs	r3, #2
 800660a:	800b      	strh	r3, [r1, #0]
					key_value_Refresh = 1;
 800660c:	e7f8      	b.n	8006600 <deal_key+0x4c>
			if(page_location == File_M_page){//光标下移
 800660e:	2b01      	cmp	r3, #1
 8006610:	d11a      	bne.n	8006648 <deal_key+0x94>
				last_focus_line = current_focus_line;
 8006612:	4a69      	ldr	r2, [pc, #420]	@ (80067b8 <deal_key+0x204>)
 8006614:	4969      	ldr	r1, [pc, #420]	@ (80067bc <deal_key+0x208>)
 8006616:	7813      	ldrb	r3, [r2, #0]
 8006618:	700b      	strb	r3, [r1, #0]
				if(current_focus_line > 0){
 800661a:	b133      	cbz	r3, 800662a <deal_key+0x76>
					current_focus_line--;
 800661c:	3b01      	subs	r3, #1
 800661e:	b2db      	uxtb	r3, r3
 8006620:	7013      	strb	r3, [r2, #0]
				dir_display_refresh = 1;
 8006622:	4b67      	ldr	r3, [pc, #412]	@ (80067c0 <deal_key+0x20c>)
 8006624:	2201      	movs	r2, #1
				pause_pressed = 1;
				if(Injecting && !pause_state){
					pause_state = 1;
				}
				else if(Injecting && pause_state && !cheat_flag){
					pause_state = 0;
 8006626:	701a      	strb	r2, [r3, #0]
			}
			}
			break;
		}
	}
}
 8006628:	e00e      	b.n	8006648 <deal_key+0x94>
					current_focus_line = 5;
 800662a:	2305      	movs	r3, #5
 800662c:	e7f8      	b.n	8006620 <deal_key+0x6c>
				if(page_location == Main_page){
 800662e:	4b5d      	ldr	r3, [pc, #372]	@ (80067a4 <deal_key+0x1f0>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d128      	bne.n	8006688 <deal_key+0xd4>
					if(!Injecting && (Dosage_set != 0)){
 8006636:	4b5d      	ldr	r3, [pc, #372]	@ (80067ac <deal_key+0x1f8>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	b133      	cbz	r3, 800664a <deal_key+0x96>
					if(Injecting && cheat_flag){
 800663c:	4b61      	ldr	r3, [pc, #388]	@ (80067c4 <deal_key+0x210>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	b99b      	cbnz	r3, 800666a <deal_key+0xb6>
					if(Injecting && over_pressure){
 8006642:	4b61      	ldr	r3, [pc, #388]	@ (80067c8 <deal_key+0x214>)
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	b933      	cbnz	r3, 8006656 <deal_key+0xa2>
}
 8006648:	4770      	bx	lr
					if(!Injecting && (Dosage_set != 0)){
 800664a:	4b59      	ldr	r3, [pc, #356]	@ (80067b0 <deal_key+0x1fc>)
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0fa      	beq.n	8006648 <deal_key+0x94>
						Dosage_load = Dosage_set;
 8006652:	4a5e      	ldr	r2, [pc, #376]	@ (80067cc <deal_key+0x218>)
 8006654:	8013      	strh	r3, [r2, #0]
						confirm_time = now_time;
 8006656:	4b5e      	ldr	r3, [pc, #376]	@ (80067d0 <deal_key+0x21c>)
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	4b5e      	ldr	r3, [pc, #376]	@ (80067d4 <deal_key+0x220>)
 800665c:	601a      	str	r2, [r3, #0]
						confirm_pressed = 1;
 800665e:	2301      	movs	r3, #1
 8006660:	4a5d      	ldr	r2, [pc, #372]	@ (80067d8 <deal_key+0x224>)
 8006662:	7013      	strb	r3, [r2, #0]
						waiting_start = 1;
 8006664:	4a50      	ldr	r2, [pc, #320]	@ (80067a8 <deal_key+0x1f4>)
					key_code = KEY_CANCEL;
 8006666:	7013      	strb	r3, [r2, #0]
 8006668:	4770      	bx	lr
						Dosage_load = RemainingTimes*2;
 800666a:	4b5c      	ldr	r3, [pc, #368]	@ (80067dc <deal_key+0x228>)
 800666c:	4a57      	ldr	r2, [pc, #348]	@ (80067cc <deal_key+0x218>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	8013      	strh	r3, [r2, #0]
						confirm_time = now_time;
 8006674:	4b56      	ldr	r3, [pc, #344]	@ (80067d0 <deal_key+0x21c>)
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	4b56      	ldr	r3, [pc, #344]	@ (80067d4 <deal_key+0x220>)
 800667a:	601a      	str	r2, [r3, #0]
						confirm_pressed = 1;
 800667c:	2301      	movs	r3, #1
 800667e:	4a56      	ldr	r2, [pc, #344]	@ (80067d8 <deal_key+0x224>)
 8006680:	7013      	strb	r3, [r2, #0]
						waiting_start = 1;
 8006682:	4a49      	ldr	r2, [pc, #292]	@ (80067a8 <deal_key+0x1f4>)
 8006684:	7013      	strb	r3, [r2, #0]
					if(Injecting && over_pressure){
 8006686:	e7dc      	b.n	8006642 <deal_key+0x8e>
				if(page_location == File_M_page){//确认、翻页
 8006688:	2b01      	cmp	r3, #1
 800668a:	d1dd      	bne.n	8006648 <deal_key+0x94>
					focus_key_pressed = 1;
 800668c:	4a54      	ldr	r2, [pc, #336]	@ (80067e0 <deal_key+0x22c>)
 800668e:	7013      	strb	r3, [r2, #0]
					key_code = KEY_CONFIRM;
 8006690:	2202      	movs	r2, #2
 8006692:	4b54      	ldr	r3, [pc, #336]	@ (80067e4 <deal_key+0x230>)
 8006694:	e7c7      	b.n	8006626 <deal_key+0x72>
			if(page_location == Main_page){
 8006696:	4b43      	ldr	r3, [pc, #268]	@ (80067a4 <deal_key+0x1f0>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	b983      	cbnz	r3, 80066be <deal_key+0x10a>
				if(!waiting_start && !Injecting){
 800669c:	4b42      	ldr	r3, [pc, #264]	@ (80067a8 <deal_key+0x1f4>)
 800669e:	4a43      	ldr	r2, [pc, #268]	@ (80067ac <deal_key+0x1f8>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	7812      	ldrb	r2, [r2, #0]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	d1cf      	bne.n	8006648 <deal_key+0x94>
					if(Dosage_set < 1000)
 80066a8:	4a41      	ldr	r2, [pc, #260]	@ (80067b0 <deal_key+0x1fc>)
 80066aa:	8813      	ldrh	r3, [r2, #0]
 80066ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
						Dosage_set = 1000;
 80066b0:	bf2e      	itee	cs
 80066b2:	f44f 737a 	movcs.w	r3, #1000	@ 0x3e8
						Dosage_set+=2;
 80066b6:	3302      	addcc	r3, #2
 80066b8:	b29b      	uxthcc	r3, r3
 80066ba:	8013      	strh	r3, [r2, #0]
 80066bc:	e7a0      	b.n	8006600 <deal_key+0x4c>
			if(page_location == File_M_page){//光标上移
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d1c2      	bne.n	8006648 <deal_key+0x94>
				last_focus_line = current_focus_line;
 80066c2:	4a3d      	ldr	r2, [pc, #244]	@ (80067b8 <deal_key+0x204>)
 80066c4:	493d      	ldr	r1, [pc, #244]	@ (80067bc <deal_key+0x208>)
 80066c6:	7813      	ldrb	r3, [r2, #0]
				if(current_focus_line < 5){
 80066c8:	2b04      	cmp	r3, #4
				last_focus_line = current_focus_line;
 80066ca:	700b      	strb	r3, [r1, #0]
				if(current_focus_line < 5){
 80066cc:	d801      	bhi.n	80066d2 <deal_key+0x11e>
					current_focus_line++;
 80066ce:	3301      	adds	r3, #1
 80066d0:	e7a6      	b.n	8006620 <deal_key+0x6c>
				}else if(current_focus_line == 5){
 80066d2:	2b05      	cmp	r3, #5
 80066d4:	d1a5      	bne.n	8006622 <deal_key+0x6e>
					current_focus_line = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	e7a2      	b.n	8006620 <deal_key+0x6c>
			if(page_location == Main_page){
 80066da:	4b32      	ldr	r3, [pc, #200]	@ (80067a4 <deal_key+0x1f0>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	b90b      	cbnz	r3, 80066e4 <deal_key+0x130>
				read_i2c = 1;
 80066e0:	4b41      	ldr	r3, [pc, #260]	@ (80067e8 <deal_key+0x234>)
 80066e2:	e79f      	b.n	8006624 <deal_key+0x70>
			if(page_location == File_M_page){//删除文件
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d1af      	bne.n	8006648 <deal_key+0x94>
				key_code = KEY_DELETE;
 80066e8:	2203      	movs	r2, #3
 80066ea:	4b3e      	ldr	r3, [pc, #248]	@ (80067e4 <deal_key+0x230>)
 80066ec:	e79b      	b.n	8006626 <deal_key+0x72>
			if(page_location == Main_page){
 80066ee:	4b2d      	ldr	r3, [pc, #180]	@ (80067a4 <deal_key+0x1f0>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d12a      	bne.n	800674c <deal_key+0x198>
				EX_GAS_pressed = 1;
 80066f6:	4b3d      	ldr	r3, [pc, #244]	@ (80067ec <deal_key+0x238>)
 80066f8:	e794      	b.n	8006624 <deal_key+0x70>
			if(page_location == Main_page){
 80066fa:	4b2a      	ldr	r3, [pc, #168]	@ (80067a4 <deal_key+0x1f0>)
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	bb2b      	cbnz	r3, 800674c <deal_key+0x198>
				if(waiting_start && (Dosage_load > 0) && !Injecting){
 8006700:	4b29      	ldr	r3, [pc, #164]	@ (80067a8 <deal_key+0x1f4>)
 8006702:	781a      	ldrb	r2, [r3, #0]
 8006704:	4b3a      	ldr	r3, [pc, #232]	@ (80067f0 <deal_key+0x23c>)
 8006706:	b1f2      	cbz	r2, 8006746 <deal_key+0x192>
 8006708:	4a30      	ldr	r2, [pc, #192]	@ (80067cc <deal_key+0x218>)
 800670a:	8812      	ldrh	r2, [r2, #0]
 800670c:	b1da      	cbz	r2, 8006746 <deal_key+0x192>
 800670e:	4a27      	ldr	r2, [pc, #156]	@ (80067ac <deal_key+0x1f8>)
 8006710:	7812      	ldrb	r2, [r2, #0]
 8006712:	b9c2      	cbnz	r2, 8006746 <deal_key+0x192>
					start_pressed = 1;
 8006714:	2101      	movs	r1, #1
 8006716:	7019      	strb	r1, [r3, #0]
					Dosage_set = 0;
 8006718:	4b25      	ldr	r3, [pc, #148]	@ (80067b0 <deal_key+0x1fc>)
 800671a:	801a      	strh	r2, [r3, #0]
				if(cheat_flag){
 800671c:	4a29      	ldr	r2, [pc, #164]	@ (80067c4 <deal_key+0x210>)
 800671e:	7813      	ldrb	r3, [r2, #0]
 8006720:	b13b      	cbz	r3, 8006732 <deal_key+0x17e>
					cheat_flag = 0;
 8006722:	2300      	movs	r3, #0
 8006724:	7013      	strb	r3, [r2, #0]
					GasPrs_LOW_time = 0;
 8006726:	4a33      	ldr	r2, [pc, #204]	@ (80067f4 <deal_key+0x240>)
 8006728:	8013      	strh	r3, [r2, #0]
					GasPrs_LOW = 0;
 800672a:	4a33      	ldr	r2, [pc, #204]	@ (80067f8 <deal_key+0x244>)
 800672c:	7013      	strb	r3, [r2, #0]
					pause_state = 0;
 800672e:	4a33      	ldr	r2, [pc, #204]	@ (80067fc <deal_key+0x248>)
 8006730:	7013      	strb	r3, [r2, #0]
				if(over_pressure){
 8006732:	4a25      	ldr	r2, [pc, #148]	@ (80067c8 <deal_key+0x214>)
 8006734:	7813      	ldrb	r3, [r2, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d086      	beq.n	8006648 <deal_key+0x94>
					over_pressure = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	7013      	strb	r3, [r2, #0]
					GasPrs_HIGH = 0;
 800673e:	4a30      	ldr	r2, [pc, #192]	@ (8006800 <deal_key+0x24c>)
 8006740:	7013      	strb	r3, [r2, #0]
					pause_state = 0;
 8006742:	4a2e      	ldr	r2, [pc, #184]	@ (80067fc <deal_key+0x248>)
 8006744:	e78f      	b.n	8006666 <deal_key+0xb2>
					start_pressed = 0;
 8006746:	2200      	movs	r2, #0
 8006748:	701a      	strb	r2, [r3, #0]
 800674a:	e7e7      	b.n	800671c <deal_key+0x168>
			if(page_location == File_M_page){
 800674c:	2b01      	cmp	r3, #1
 800674e:	f47f af7b 	bne.w	8006648 <deal_key+0x94>
				key_code = KEY_SENDFILE;
 8006752:	2204      	movs	r2, #4
 8006754:	4b23      	ldr	r3, [pc, #140]	@ (80067e4 <deal_key+0x230>)
 8006756:	e766      	b.n	8006626 <deal_key+0x72>
				if(page_location == Main_page){
 8006758:	4b12      	ldr	r3, [pc, #72]	@ (80067a4 <deal_key+0x1f0>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	b90b      	cbnz	r3, 8006762 <deal_key+0x1ae>
					nReset_pressed = 1;
 800675e:	4b29      	ldr	r3, [pc, #164]	@ (8006804 <deal_key+0x250>)
 8006760:	e760      	b.n	8006624 <deal_key+0x70>
				if(page_location == File_M_page){
 8006762:	2b01      	cmp	r3, #1
 8006764:	f47f af70 	bne.w	8006648 <deal_key+0x94>
					key_code = KEY_CANCEL;
 8006768:	4a1e      	ldr	r2, [pc, #120]	@ (80067e4 <deal_key+0x230>)
 800676a:	e77c      	b.n	8006666 <deal_key+0xb2>
			if(page_location == Main_page){
 800676c:	4b0d      	ldr	r3, [pc, #52]	@ (80067a4 <deal_key+0x1f0>)
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	f47f af69 	bne.w	8006648 <deal_key+0x94>
				pause_pressed = 1;
 8006776:	2201      	movs	r2, #1
 8006778:	4b23      	ldr	r3, [pc, #140]	@ (8006808 <deal_key+0x254>)
 800677a:	701a      	strb	r2, [r3, #0]
				if(Injecting && !pause_state){
 800677c:	4b0b      	ldr	r3, [pc, #44]	@ (80067ac <deal_key+0x1f8>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	f43f af61 	beq.w	8006648 <deal_key+0x94>
 8006786:	4b1d      	ldr	r3, [pc, #116]	@ (80067fc <deal_key+0x248>)
 8006788:	7819      	ldrb	r1, [r3, #0]
 800678a:	2900      	cmp	r1, #0
 800678c:	f43f af4b 	beq.w	8006626 <deal_key+0x72>
				else if(Injecting && pause_state && !cheat_flag){
 8006790:	4a0c      	ldr	r2, [pc, #48]	@ (80067c4 <deal_key+0x210>)
 8006792:	7812      	ldrb	r2, [r2, #0]
 8006794:	2a00      	cmp	r2, #0
 8006796:	f47f af57 	bne.w	8006648 <deal_key+0x94>
 800679a:	e744      	b.n	8006626 <deal_key+0x72>
 800679c:	20000924 	.word	0x20000924
 80067a0:	20000921 	.word	0x20000921
 80067a4:	20000370 	.word	0x20000370
 80067a8:	2000092c 	.word	0x2000092c
 80067ac:	20000940 	.word	0x20000940
 80067b0:	200008c6 	.word	0x200008c6
 80067b4:	20000923 	.word	0x20000923
 80067b8:	20000385 	.word	0x20000385
 80067bc:	20000384 	.word	0x20000384
 80067c0:	20000387 	.word	0x20000387
 80067c4:	20000a59 	.word	0x20000a59
 80067c8:	20000a5a 	.word	0x20000a5a
 80067cc:	200008c4 	.word	0x200008c4
 80067d0:	20000a3c 	.word	0x20000a3c
 80067d4:	20000a54 	.word	0x20000a54
 80067d8:	2000092b 	.word	0x2000092b
 80067dc:	20000a50 	.word	0x20000a50
 80067e0:	20000371 	.word	0x20000371
 80067e4:	2000091c 	.word	0x2000091c
 80067e8:	200008c8 	.word	0x200008c8
 80067ec:	20000925 	.word	0x20000925
 80067f0:	2000092a 	.word	0x2000092a
 80067f4:	20000a5e 	.word	0x20000a5e
 80067f8:	20000919 	.word	0x20000919
 80067fc:	2000093e 	.word	0x2000093e
 8006800:	20000918 	.word	0x20000918
 8006804:	20000929 	.word	0x20000929
 8006808:	20000928 	.word	0x20000928

0800680c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (HAL_GPIO_ReadPin(KEY_EXTI11_GPIO_Port, KEY_EXTI11_Pin) == GPIO_PIN_SET) {
 800680c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8006810:	b538      	push	{r3, r4, r5, lr}
	if (HAL_GPIO_ReadPin(KEY_EXTI11_GPIO_Port, KEY_EXTI11_Pin) == GPIO_PIN_SET) {
 8006812:	4833      	ldr	r0, [pc, #204]	@ (80068e0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8006814:	f002 f880 	bl	8008918 <HAL_GPIO_ReadPin>
 8006818:	2801      	cmp	r0, #1
 800681a:	d134      	bne.n	8006886 <HAL_GPIO_EXTI_Callback+0x7a>
	// 处理上升沿中断
		HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_RESET);
		key_pressed = 0;
 800681c:	2400      	movs	r4, #0
		HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_RESET);
 800681e:	2200      	movs	r2, #0
 8006820:	2110      	movs	r1, #16
 8006822:	4830      	ldr	r0, [pc, #192]	@ (80068e4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8006824:	f002 f87e 	bl	8008924 <HAL_GPIO_WritePin>
		key_pressed = 0;
 8006828:	4b2f      	ldr	r3, [pc, #188]	@ (80068e8 <HAL_GPIO_EXTI_Callback+0xdc>)
		key_now_time = 0;
		key_value_Refresh = 0;
		key_press_time = 0;
		key_press_long = 0;

		if(HAL_GPIO_ReadPin(NRESET_GPIO_Port,NRESET_Pin) == GPIO_PIN_SET){
 800682a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
		key_pressed = 0;
 800682e:	701c      	strb	r4, [r3, #0]
		key_value = 0;
 8006830:	4b2e      	ldr	r3, [pc, #184]	@ (80068ec <HAL_GPIO_EXTI_Callback+0xe0>)
		if(HAL_GPIO_ReadPin(NRESET_GPIO_Port,NRESET_Pin) == GPIO_PIN_SET){
 8006832:	482c      	ldr	r0, [pc, #176]	@ (80068e4 <HAL_GPIO_EXTI_Callback+0xd8>)
		key_value = 0;
 8006834:	701c      	strb	r4, [r3, #0]
		key_last_time = 0;
 8006836:	4b2e      	ldr	r3, [pc, #184]	@ (80068f0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8006838:	601c      	str	r4, [r3, #0]
		key_now_time = 0;
 800683a:	4b2e      	ldr	r3, [pc, #184]	@ (80068f4 <HAL_GPIO_EXTI_Callback+0xe8>)
 800683c:	601c      	str	r4, [r3, #0]
		key_value_Refresh = 0;
 800683e:	4b2e      	ldr	r3, [pc, #184]	@ (80068f8 <HAL_GPIO_EXTI_Callback+0xec>)
 8006840:	701c      	strb	r4, [r3, #0]
		key_press_time = 0;
 8006842:	4b2e      	ldr	r3, [pc, #184]	@ (80068fc <HAL_GPIO_EXTI_Callback+0xf0>)
 8006844:	801c      	strh	r4, [r3, #0]
		key_press_long = 0;
 8006846:	4b2e      	ldr	r3, [pc, #184]	@ (8006900 <HAL_GPIO_EXTI_Callback+0xf4>)
 8006848:	701c      	strb	r4, [r3, #0]
		if(HAL_GPIO_ReadPin(NRESET_GPIO_Port,NRESET_Pin) == GPIO_PIN_SET){
 800684a:	f002 f865 	bl	8008918 <HAL_GPIO_ReadPin>
 800684e:	2801      	cmp	r0, #1
			nReset_pressed = 0;
 8006850:	bf08      	it	eq
 8006852:	4b2c      	ldreq	r3, [pc, #176]	@ (8006904 <HAL_GPIO_EXTI_Callback+0xf8>)
		}

		if(HAL_GPIO_ReadPin(PAUSE_GPIO_Port,PAUSE_Pin) == GPIO_PIN_SET){
 8006854:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006858:	482b      	ldr	r0, [pc, #172]	@ (8006908 <HAL_GPIO_EXTI_Callback+0xfc>)
			nReset_pressed = 0;
 800685a:	bf08      	it	eq
 800685c:	701c      	strbeq	r4, [r3, #0]
		if(HAL_GPIO_ReadPin(PAUSE_GPIO_Port,PAUSE_Pin) == GPIO_PIN_SET){
 800685e:	f002 f85b 	bl	8008918 <HAL_GPIO_ReadPin>
 8006862:	2801      	cmp	r0, #1
			pause_pressed = 0;
 8006864:	bf04      	itt	eq
 8006866:	2200      	moveq	r2, #0
 8006868:	4b28      	ldreq	r3, [pc, #160]	@ (800690c <HAL_GPIO_EXTI_Callback+0x100>)
		}

		if(HAL_GPIO_ReadPin(EX_GAS_GPIO_Port,EX_GAS_Pin) == GPIO_PIN_SET){
 800686a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800686e:	481d      	ldr	r0, [pc, #116]	@ (80068e4 <HAL_GPIO_EXTI_Callback+0xd8>)
			pause_pressed = 0;
 8006870:	bf08      	it	eq
 8006872:	701a      	strbeq	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(EX_GAS_GPIO_Port,EX_GAS_Pin) == GPIO_PIN_SET){
 8006874:	f002 f850 	bl	8008918 <HAL_GPIO_ReadPin>
 8006878:	2801      	cmp	r0, #1
 800687a:	d104      	bne.n	8006886 <HAL_GPIO_EXTI_Callback+0x7a>
			EX_GAS_start = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	4a24      	ldr	r2, [pc, #144]	@ (8006910 <HAL_GPIO_EXTI_Callback+0x104>)
 8006880:	7013      	strb	r3, [r2, #0]
			EX_GAS_pressed = 0;
 8006882:	4a24      	ldr	r2, [pc, #144]	@ (8006914 <HAL_GPIO_EXTI_Callback+0x108>)
 8006884:	7013      	strb	r3, [r2, #0]
		}
	}

	if (HAL_GPIO_ReadPin(KEY_EXTI11_GPIO_Port, KEY_EXTI11_Pin) == GPIO_PIN_RESET) {
 8006886:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800688a:	4815      	ldr	r0, [pc, #84]	@ (80068e0 <HAL_GPIO_EXTI_Callback+0xd4>)
 800688c:	f002 f844 	bl	8008918 <HAL_GPIO_ReadPin>
	// 处理下降沿中断
		if(!key_scan_lock){
 8006890:	4b21      	ldr	r3, [pc, #132]	@ (8006918 <HAL_GPIO_EXTI_Callback+0x10c>)
 8006892:	781a      	ldrb	r2, [r3, #0]
 8006894:	4310      	orrs	r0, r2
 8006896:	f010 05ff 	ands.w	r5, r0, #255	@ 0xff
 800689a:	d11f      	bne.n	80068dc <HAL_GPIO_EXTI_Callback+0xd0>
			key_scan_lock = 1;//防止多次执行下降沿中断函数
 800689c:	2401      	movs	r4, #1
 800689e:	701c      	strb	r4, [r3, #0]
			key_lock_time = now_time;
 80068a0:	4b1e      	ldr	r3, [pc, #120]	@ (800691c <HAL_GPIO_EXTI_Callback+0x110>)

			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_SET);
 80068a2:	2110      	movs	r1, #16
			key_lock_time = now_time;
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	4b1e      	ldr	r3, [pc, #120]	@ (8006920 <HAL_GPIO_EXTI_Callback+0x114>)
			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_SET);
 80068a8:	480e      	ldr	r0, [pc, #56]	@ (80068e4 <HAL_GPIO_EXTI_Callback+0xd8>)
			key_lock_time = now_time;
 80068aa:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_SET);
 80068ac:	4622      	mov	r2, r4
 80068ae:	f002 f839 	bl	8008924 <HAL_GPIO_WritePin>
			key_pressed = 1;
 80068b2:	4b0d      	ldr	r3, [pc, #52]	@ (80068e8 <HAL_GPIO_EXTI_Callback+0xdc>)
 80068b4:	701c      	strb	r4, [r3, #0]
			key_value = key_scan();
 80068b6:	f7ff fe21 	bl	80064fc <key_scan>
 80068ba:	4b0c      	ldr	r3, [pc, #48]	@ (80068ec <HAL_GPIO_EXTI_Callback+0xe0>)
 80068bc:	7018      	strb	r0, [r3, #0]
			key_last_time = key_now_time;
 80068be:	4b0d      	ldr	r3, [pc, #52]	@ (80068f4 <HAL_GPIO_EXTI_Callback+0xe8>)
			key_press_sigle = 1;

			deal_key();
			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_RESET);
 80068c0:	4808      	ldr	r0, [pc, #32]	@ (80068e4 <HAL_GPIO_EXTI_Callback+0xd8>)
			key_last_time = key_now_time;
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	4b0a      	ldr	r3, [pc, #40]	@ (80068f0 <HAL_GPIO_EXTI_Callback+0xe4>)
 80068c6:	601a      	str	r2, [r3, #0]
			key_press_sigle = 1;
 80068c8:	4b16      	ldr	r3, [pc, #88]	@ (8006924 <HAL_GPIO_EXTI_Callback+0x118>)
 80068ca:	701c      	strb	r4, [r3, #0]
			deal_key();
 80068cc:	f7ff fe72 	bl	80065b4 <deal_key>
			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_RESET);
 80068d0:	462a      	mov	r2, r5
		}
	}
}
 80068d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin,GPIO_PIN_RESET);
 80068d6:	2110      	movs	r1, #16
 80068d8:	f002 b824 	b.w	8008924 <HAL_GPIO_WritePin>
}
 80068dc:	bd38      	pop	{r3, r4, r5, pc}
 80068de:	bf00      	nop
 80068e0:	40010800 	.word	0x40010800
 80068e4:	40010c00 	.word	0x40010c00
 80068e8:	20000920 	.word	0x20000920
 80068ec:	20000924 	.word	0x20000924
 80068f0:	20000a44 	.word	0x20000a44
 80068f4:	20000a40 	.word	0x20000a40
 80068f8:	20000923 	.word	0x20000923
 80068fc:	2000091e 	.word	0x2000091e
 8006900:	20000922 	.word	0x20000922
 8006904:	20000929 	.word	0x20000929
 8006908:	40011000 	.word	0x40011000
 800690c:	20000928 	.word	0x20000928
 8006910:	20000a48 	.word	0x20000a48
 8006914:	20000925 	.word	0x20000925
 8006918:	20000934 	.word	0x20000934
 800691c:	20000a3c 	.word	0x20000a3c
 8006920:	20000930 	.word	0x20000930
 8006924:	20000921 	.word	0x20000921

08006928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006928:	b530      	push	{r4, r5, lr}
 800692a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800692c:	2220      	movs	r2, #32
 800692e:	2100      	movs	r1, #0
 8006930:	a80b      	add	r0, sp, #44	@ 0x2c
 8006932:	f005 fb13 	bl	800bf5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006936:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006938:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800693a:	2100      	movs	r1, #0
 800693c:	eb0d 0002 	add.w	r0, sp, r2
 8006940:	f005 fb0c 	bl	800bf5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006944:	462a      	mov	r2, r5
 8006946:	2100      	movs	r1, #0
 8006948:	a801      	add	r0, sp, #4
 800694a:	f005 fb07 	bl	800bf5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800694e:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006950:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006952:	e9cd 350e 	strd	r3, r5, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8006956:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800695a:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800695c:	940a      	str	r4, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800695e:	9411      	str	r4, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8006960:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006962:	f001 fff9 	bl	8008958 <HAL_RCC_OscConfig>
 8006966:	b108      	cbz	r0, 800696c <SystemClock_Config+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006968:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800696a:	e7fe      	b.n	800696a <SystemClock_Config+0x42>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800696c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800696e:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006972:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006976:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006978:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800697c:	4621      	mov	r1, r4
 800697e:	a805      	add	r0, sp, #20
 8006980:	f002 f9ac 	bl	8008cdc <HAL_RCC_ClockConfig>
 8006984:	b108      	cbz	r0, 800698a <SystemClock_Config+0x62>
 8006986:	b672      	cpsid	i
  while (1)
 8006988:	e7fe      	b.n	8006988 <SystemClock_Config+0x60>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800698a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800698e:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006990:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8006992:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006994:	f002 fa5e 	bl	8008e54 <HAL_RCCEx_PeriphCLKConfig>
 8006998:	b108      	cbz	r0, 800699e <SystemClock_Config+0x76>
 800699a:	b672      	cpsid	i
  while (1)
 800699c:	e7fe      	b.n	800699c <SystemClock_Config+0x74>
}
 800699e:	b015      	add	sp, #84	@ 0x54
 80069a0:	bd30      	pop	{r4, r5, pc}
	...

080069a4 <main>:
  first_run_clcDos = 1;
 80069a4:	2401      	movs	r4, #1
{
 80069a6:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
  HAL_Init();
 80069aa:	f001 f9cf 	bl	8007d4c <HAL_Init>
  SystemClock_Config();
 80069ae:	f7ff ffbb 	bl	8006928 <SystemClock_Config>
  MX_GPIO_Init();
 80069b2:	f7ff fb7b 	bl	80060ac <MX_GPIO_Init>
  MX_DMA_Init();
 80069b6:	f7fc f8cb 	bl	8002b50 <MX_DMA_Init>
  MX_ADC1_Init();
 80069ba:	f7fb feb9 	bl	8002730 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80069be:	f000 ffab 	bl	8007918 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80069c2:	f000 fc45 	bl	8007250 <MX_TIM4_Init>
  MX_TIM3_Init();
 80069c6:	f000 fc0d 	bl	80071e4 <MX_TIM3_Init>
  MX_SPI1_Init();
 80069ca:	f000 fafb 	bl	8006fc4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80069ce:	f000 ffbf 	bl	8007950 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80069d2:	f000 ffd9 	bl	8007988 <MX_USART3_UART_Init>
  HAL_ADCEx_Calibration_Start(&hadc1);
 80069d6:	4874      	ldr	r0, [pc, #464]	@ (8006ba8 <main+0x204>)
 80069d8:	f001 fc88 	bl	80082ec <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_rslt, 4);
 80069dc:	4973      	ldr	r1, [pc, #460]	@ (8006bac <main+0x208>)
 80069de:	2204      	movs	r2, #4
 80069e0:	4871      	ldr	r0, [pc, #452]	@ (8006ba8 <main+0x204>)
 80069e2:	f001 fb51 	bl	8008088 <HAL_ADC_Start_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 80069e6:	4b72      	ldr	r3, [pc, #456]	@ (8006bb0 <main+0x20c>)
  HAL_Delay(10);
 80069e8:	200a      	movs	r0, #10
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 80069ea:	681a      	ldr	r2, [r3, #0]
  first_run_clcDos = 1;
 80069ec:	4e71      	ldr	r6, [pc, #452]	@ (8006bb4 <main+0x210>)
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 80069ee:	6813      	ldr	r3, [r2, #0]
	page_location = Main_page;
 80069f0:	4f71      	ldr	r7, [pc, #452]	@ (8006bb8 <main+0x214>)
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 80069f2:	f023 0304 	bic.w	r3, r3, #4
 80069f6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10);
 80069f8:	f001 f9cc 	bl	8007d94 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim3);
 80069fc:	486f      	ldr	r0, [pc, #444]	@ (8006bbc <main+0x218>)
 80069fe:	f002 fccd 	bl	800939c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8006a02:	486f      	ldr	r0, [pc, #444]	@ (8006bc0 <main+0x21c>)
 8006a04:	f002 fcca 	bl	800939c <HAL_TIM_Base_Start_IT>
  HAL_Delay(10);
 8006a08:	200a      	movs	r0, #10
 8006a0a:	f001 f9c3 	bl	8007d94 <HAL_Delay>
  HMI_init();
 8006a0e:	f7fa fd49 	bl	80014a4 <HMI_init>
	HAL_Delay(100);
 8006a12:	2064      	movs	r0, #100	@ 0x64
 8006a14:	f001 f9be 	bl	8007d94 <HAL_Delay>
  Motor_init();
 8006a18:	f000 f948 	bl	8006cac <Motor_init>
  first_run = 1;
 8006a1c:	4b69      	ldr	r3, [pc, #420]	@ (8006bc4 <main+0x220>)
  first_run_clcDos = 1;
 8006a1e:	7034      	strb	r4, [r6, #0]
  first_run = 1;
 8006a20:	701c      	strb	r4, [r3, #0]
	READOUT_SAVE_DATA();
 8006a22:	f7fa fa79 	bl	8000f18 <READOUT_SAVE_DATA>
	AD24C02_DataCheck();
 8006a26:	f7fa fab9 	bl	8000f9c <AD24C02_DataCheck>
	HAL_Delay(10);
 8006a2a:	200a      	movs	r0, #10
 8006a2c:	f001 f9b2 	bl	8007d94 <HAL_Delay>
	page_location = Main_page;
 8006a30:	2300      	movs	r3, #0
  HAL_UART_Receive_DMA(&huart3, &gps_rx_buffer[0], 1); // 启动接收
 8006a32:	4622      	mov	r2, r4
 8006a34:	4964      	ldr	r1, [pc, #400]	@ (8006bc8 <main+0x224>)
 8006a36:	4865      	ldr	r0, [pc, #404]	@ (8006bcc <main+0x228>)
	page_location = Main_page;
 8006a38:	703b      	strb	r3, [r7, #0]
  HAL_UART_Receive_DMA(&huart3, &gps_rx_buffer[0], 1); // 启动接收
 8006a3a:	f003 fa4d 	bl	8009ed8 <HAL_UART_Receive_DMA>
  SDCard_states = SDCard_InsertCheck();
 8006a3e:	f7fa ffe5 	bl	8001a0c <SDCard_InsertCheck>
 8006a42:	4d63      	ldr	r5, [pc, #396]	@ (8006bd0 <main+0x22c>)
 8006a44:	6028      	str	r0, [r5, #0]
  if(SDCard_states == 0){
 8006a46:	bb00      	cbnz	r0, 8006a8a <main+0xe6>
    CSV_sheet_Init();
 8006a48:	f7fb f80c 	bl	8001a64 <CSV_sheet_Init>
  AD24C02_Read2Byte(CSV_LAST_LINE_ADDRESS, &csv_crt_line_No);//读取最后一次保存的行号
 8006a4c:	2050      	movs	r0, #80	@ 0x50
 8006a4e:	4961      	ldr	r1, [pc, #388]	@ (8006bd4 <main+0x230>)
 8006a50:	f7fa fa51 	bl	8000ef6 <AD24C02_Read2Byte>
  printf("System Initialized\r\n");
 8006a54:	4860      	ldr	r0, [pc, #384]	@ (8006bd8 <main+0x234>)
 8006a56:	f005 f93d 	bl	800bcd4 <puts>
  	if(i++ >=10000){
 8006a5a:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 8006bdc <main+0x238>
			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin,GPIO_PIN_SET);
 8006a5e:	f8df 9180 	ldr.w	r9, [pc, #384]	@ 8006be0 <main+0x23c>
  	if(i++ >=10000){
 8006a62:	f8b8 3000 	ldrh.w	r3, [r8]
 8006a66:	1c5a      	adds	r2, r3, #1
 8006a68:	f8a8 2000 	strh.w	r2, [r8]
 8006a6c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d91a      	bls.n	8006aaa <main+0x106>
			if(SDCard_states != 0 || !SD_INSERT){
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	b163      	cbz	r3, 8006a92 <main+0xee>
				SDCard_states = SDCard_InsertCheck();
 8006a78:	f7fa ffc8 	bl	8001a0c <SDCard_InsertCheck>
				HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_SET);
 8006a7c:	2201      	movs	r2, #1
				SDCard_states = SDCard_InsertCheck();
 8006a7e:	6028      	str	r0, [r5, #0]
				HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_RESET);
 8006a80:	2110      	movs	r1, #16
 8006a82:	4858      	ldr	r0, [pc, #352]	@ (8006be4 <main+0x240>)
 8006a84:	f001 ff4e 	bl	8008924 <HAL_GPIO_WritePin>
 8006a88:	e00c      	b.n	8006aa4 <main+0x100>
  	printf("CSV file initialization failed!\r\n");
 8006a8a:	4857      	ldr	r0, [pc, #348]	@ (8006be8 <main+0x244>)
 8006a8c:	f005 f922 	bl	800bcd4 <puts>
 8006a90:	e7dc      	b.n	8006a4c <main+0xa8>
			if(SDCard_states != 0 || !SD_INSERT){
 8006a92:	2101      	movs	r1, #1
 8006a94:	4855      	ldr	r0, [pc, #340]	@ (8006bec <main+0x248>)
 8006a96:	f001 ff3f 	bl	8008918 <HAL_GPIO_ReadPin>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d1ec      	bne.n	8006a78 <main+0xd4>
			else if(SDCard_states == 0){
 8006a9e:	682a      	ldr	r2, [r5, #0]
 8006aa0:	2a00      	cmp	r2, #0
 8006aa2:	d0ed      	beq.n	8006a80 <main+0xdc>
			i = 0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f8a8 3000 	strh.w	r3, [r8]
  	if(Injecting && (page_location == Main_page)){
 8006aaa:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006bf0 <main+0x24c>
 8006aae:	783c      	ldrb	r4, [r7, #0]
 8006ab0:	f89b 3000 	ldrb.w	r3, [fp]
 8006ab4:	b363      	cbz	r3, 8006b10 <main+0x16c>
 8006ab6:	b984      	cbnz	r4, 8006ada <main+0x136>
			sprintf(Tx_Buffer,"Main.t0.txt=\"正在注药\"\xff\xff\xff");
 8006ab8:	494e      	ldr	r1, [pc, #312]	@ (8006bf4 <main+0x250>)
 8006aba:	484f      	ldr	r0, [pc, #316]	@ (8006bf8 <main+0x254>)
 8006abc:	f005 fb49 	bl	800c152 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8006ac0:	484d      	ldr	r0, [pc, #308]	@ (8006bf8 <main+0x254>)
 8006ac2:	f001 f83b 	bl	8007b3c <USART1_Tx_HMIdata>
			if(first_run_clcDos == 1){
 8006ac6:	7833      	ldrb	r3, [r6, #0]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d104      	bne.n	8006ad6 <main+0x132>
				Inject_times(Dosage_load);
 8006acc:	4b4b      	ldr	r3, [pc, #300]	@ (8006bfc <main+0x258>)
 8006ace:	8818      	ldrh	r0, [r3, #0]
 8006ad0:	f000 f9a8 	bl	8006e24 <Inject_times>
				first_run_clcDos = 0;
 8006ad4:	7034      	strb	r4, [r6, #0]
			Inject_working();
 8006ad6:	f000 f9d3 	bl	8006e80 <Inject_working>
		if(clear_counter && (page_location == Main_page)){
 8006ada:	4b49      	ldr	r3, [pc, #292]	@ (8006c00 <main+0x25c>)
 8006adc:	781a      	ldrb	r2, [r3, #0]
 8006ade:	2a00      	cmp	r2, #0
 8006ae0:	d0bf      	beq.n	8006a62 <main+0xbe>
 8006ae2:	783c      	ldrb	r4, [r7, #0]
 8006ae4:	2c00      	cmp	r4, #0
 8006ae6:	d1bc      	bne.n	8006a62 <main+0xbe>
			clear_counter = 0;
 8006ae8:	701c      	strb	r4, [r3, #0]
			Refresh_Dosage();
 8006aea:	f7fc f923 	bl	8002d34 <Refresh_Dosage>
			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin,GPIO_PIN_SET);
 8006aee:	2201      	movs	r2, #1
 8006af0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006af4:	4648      	mov	r0, r9
 8006af6:	f001 ff15 	bl	8008924 <HAL_GPIO_WritePin>
			HAL_Delay(300);
 8006afa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8006afe:	f001 f949 	bl	8007d94 <HAL_Delay>
			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin,GPIO_PIN_RESET);
 8006b02:	4622      	mov	r2, r4
 8006b04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006b08:	4648      	mov	r0, r9
 8006b0a:	f001 ff0b 	bl	8008924 <HAL_GPIO_WritePin>
 8006b0e:	e7a8      	b.n	8006a62 <main+0xbe>
		if(!Injecting && EX_GAS_start && (page_location == Main_page)){
 8006b10:	f8df a0f0 	ldr.w	sl, [pc, #240]	@ 8006c04 <main+0x260>
 8006b14:	f89a 3000 	ldrb.w	r3, [sl]
 8006b18:	b163      	cbz	r3, 8006b34 <main+0x190>
 8006b1a:	2c00      	cmp	r4, #0
 8006b1c:	d141      	bne.n	8006ba2 <main+0x1fe>
				while(!Injecting && EX_GAS_start)
 8006b1e:	f89b 3000 	ldrb.w	r3, [fp]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1d9      	bne.n	8006ada <main+0x136>
 8006b26:	f89a 3000 	ldrb.w	r3, [sl]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0d5      	beq.n	8006ada <main+0x136>
					Ex_GAS_Cycle();
 8006b2e:	f000 f95d 	bl	8006dec <Ex_GAS_Cycle>
 8006b32:	e7f4      	b.n	8006b1e <main+0x17a>
		if(!Injecting && (page_location == File_M_page)){
 8006b34:	2c01      	cmp	r4, #1
 8006b36:	d12f      	bne.n	8006b98 <main+0x1f4>
			if(refresh_dir || first_display_dir){
 8006b38:	4c33      	ldr	r4, [pc, #204]	@ (8006c08 <main+0x264>)
 8006b3a:	f8df a0d0 	ldr.w	sl, [pc, #208]	@ 8006c0c <main+0x268>
 8006b3e:	7823      	ldrb	r3, [r4, #0]
 8006b40:	f89a 2000 	ldrb.w	r2, [sl]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	d009      	beq.n	8006b5c <main+0x1b8>
				Cache_File_List();
 8006b48:	f7fa fd96 	bl	8001678 <Cache_File_List>
				Refresh_Display();
 8006b4c:	f7fa fd52 	bl	80015f4 <Refresh_Display>
				scroll_focus_line();
 8006b50:	f7fa fed4 	bl	80018fc <scroll_focus_line>
				first_display_dir = 0;
 8006b54:	2300      	movs	r3, #0
 8006b56:	f88a 3000 	strb.w	r3, [sl]
				refresh_dir = 0;
 8006b5a:	7023      	strb	r3, [r4, #0]
			switch(key_code){
 8006b5c:	4c2c      	ldr	r4, [pc, #176]	@ (8006c10 <main+0x26c>)
 8006b5e:	7822      	ldrb	r2, [r4, #0]
 8006b60:	2a02      	cmp	r2, #2
 8006b62:	b2d3      	uxtb	r3, r2
 8006b64:	d012      	beq.n	8006b8c <main+0x1e8>
 8006b66:	2b03      	cmp	r3, #3
 8006b68:	d013      	beq.n	8006b92 <main+0x1ee>
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d101      	bne.n	8006b72 <main+0x1ce>
					Back_to_MainPage();
 8006b6e:	f7fa fd05 	bl	800157c <Back_to_MainPage>
			key_code = KEY_NULL;
 8006b72:	f04f 0a00 	mov.w	sl, #0
 8006b76:	f884 a000 	strb.w	sl, [r4]
			if(dir_display_refresh){
 8006b7a:	4c26      	ldr	r4, [pc, #152]	@ (8006c14 <main+0x270>)
 8006b7c:	7823      	ldrb	r3, [r4, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0ab      	beq.n	8006ada <main+0x136>
				scroll_focus_line();
 8006b82:	f7fa febb 	bl	80018fc <scroll_focus_line>
				dir_display_refresh = 0;
 8006b86:	f884 a000 	strb.w	sl, [r4]
 8006b8a:	e7a6      	b.n	8006ada <main+0x136>
					page_turning();
 8006b8c:	f7fa fde4 	bl	8001758 <page_turning>
					break;
 8006b90:	e7ef      	b.n	8006b72 <main+0x1ce>
					On_Delete_Key_Pressed();
 8006b92:	f7fa fe0b 	bl	80017ac <On_Delete_Key_Pressed>
					break;
 8006b96:	e7ec      	b.n	8006b72 <main+0x1ce>
		if(page_location == Main_page)
 8006b98:	2c00      	cmp	r4, #0
 8006b9a:	d19e      	bne.n	8006ada <main+0x136>
			Set_Dosage();
 8006b9c:	f7fb fff8 	bl	8002b90 <Set_Dosage>
 8006ba0:	e79b      	b.n	8006ada <main+0x136>
		if(!Injecting && (page_location == File_M_page)){
 8006ba2:	2c01      	cmp	r4, #1
 8006ba4:	d199      	bne.n	8006ada <main+0x136>
 8006ba6:	e7c7      	b.n	8006b38 <main+0x194>
 8006ba8:	20000884 	.word	0x20000884
 8006bac:	200008b6 	.word	0x200008b6
 8006bb0:	20000840 	.word	0x20000840
 8006bb4:	200008c9 	.word	0x200008c9
 8006bb8:	20000370 	.word	0x20000370
 8006bbc:	200009e8 	.word	0x200009e8
 8006bc0:	200009a0 	.word	0x200009a0
 8006bc4:	20000003 	.word	0x20000003
 8006bc8:	20000270 	.word	0x20000270
 8006bcc:	20000ab0 	.word	0x20000ab0
 8006bd0:	200007c8 	.word	0x200007c8
 8006bd4:	200007c4 	.word	0x200007c4
 8006bd8:	0800f265 	.word	0x0800f265
 8006bdc:	20000936 	.word	0x20000936
 8006be0:	40011000 	.word	0x40011000
 8006be4:	40010c00 	.word	0x40010c00
 8006be8:	0800f244 	.word	0x0800f244
 8006bec:	40011400 	.word	0x40011400
 8006bf0:	20000940 	.word	0x20000940
 8006bf4:	0800ed6e 	.word	0x0800ed6e
 8006bf8:	20000b8a 	.word	0x20000b8a
 8006bfc:	200008c4 	.word	0x200008c4
 8006c00:	20000927 	.word	0x20000927
 8006c04:	20000a48 	.word	0x20000a48
 8006c08:	20000386 	.word	0x20000386
 8006c0c:	20000002 	.word	0x20000002
 8006c10:	2000091c 	.word	0x2000091c
 8006c14:	20000387 	.word	0x20000387

08006c18 <Error_Handler>:
 8006c18:	b672      	cpsid	i
  while (1)
 8006c1a:	e7fe      	b.n	8006c1a <Error_Handler+0x2>

08006c1c <Motor_Forward>:
	Motor_Reverse();
	HAL_Delay(1800);
	Motor_Brake();
}

void Motor_Forward(){
 8006c1c:	b510      	push	{r4, lr}
	motor_direction = FORWARD;
 8006c1e:	2401      	movs	r4, #1
 8006c20:	4b07      	ldr	r3, [pc, #28]	@ (8006c40 <Motor_Forward+0x24>)

	Motor_1_PH_SET;
 8006c22:	4622      	mov	r2, r4
 8006c24:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006c28:	4806      	ldr	r0, [pc, #24]	@ (8006c44 <Motor_Forward+0x28>)
	motor_direction = FORWARD;
 8006c2a:	701c      	strb	r4, [r3, #0]
	Motor_1_PH_SET;
 8006c2c:	f001 fe7a 	bl	8008924 <HAL_GPIO_WritePin>
	Motor_1_EN_SET;
 8006c30:	4622      	mov	r2, r4
}
 8006c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Motor_1_EN_SET;
 8006c36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006c3a:	4803      	ldr	r0, [pc, #12]	@ (8006c48 <Motor_Forward+0x2c>)
 8006c3c:	f001 be72 	b.w	8008924 <HAL_GPIO_WritePin>
 8006c40:	20000942 	.word	0x20000942
 8006c44:	40010c00 	.word	0x40010c00
 8006c48:	40010800 	.word	0x40010800

08006c4c <Motor_Reverse>:

void Motor_Reverse(){
	motor_direction = REVERSE;
 8006c4c:	22ff      	movs	r2, #255	@ 0xff
void Motor_Reverse(){
 8006c4e:	b508      	push	{r3, lr}
	motor_direction = REVERSE;
 8006c50:	4b07      	ldr	r3, [pc, #28]	@ (8006c70 <Motor_Reverse+0x24>)

	Motor_1_EN_SET;
 8006c52:	f44f 7180 	mov.w	r1, #256	@ 0x100
	motor_direction = REVERSE;
 8006c56:	701a      	strb	r2, [r3, #0]
	Motor_1_EN_SET;
 8006c58:	4806      	ldr	r0, [pc, #24]	@ (8006c74 <Motor_Reverse+0x28>)
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f001 fe62 	bl	8008924 <HAL_GPIO_WritePin>
	Motor_1_PH_RESET;
}
 8006c60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Motor_1_PH_RESET;
 8006c64:	2200      	movs	r2, #0
 8006c66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006c6a:	4803      	ldr	r0, [pc, #12]	@ (8006c78 <Motor_Reverse+0x2c>)
 8006c6c:	f001 be5a 	b.w	8008924 <HAL_GPIO_WritePin>
 8006c70:	20000942 	.word	0x20000942
 8006c74:	40010800 	.word	0x40010800
 8006c78:	40010c00 	.word	0x40010c00

08006c7c <Motor_Brake>:

void Motor_Brake(){
 8006c7c:	b510      	push	{r4, lr}
	motor_direction = 0;
 8006c7e:	2400      	movs	r4, #0
 8006c80:	4b07      	ldr	r3, [pc, #28]	@ (8006ca0 <Motor_Brake+0x24>)

	Motor_1_EN_RESET;
 8006c82:	4622      	mov	r2, r4
 8006c84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006c88:	4806      	ldr	r0, [pc, #24]	@ (8006ca4 <Motor_Brake+0x28>)
	motor_direction = 0;
 8006c8a:	701c      	strb	r4, [r3, #0]
	Motor_1_EN_RESET;
 8006c8c:	f001 fe4a 	bl	8008924 <HAL_GPIO_WritePin>
	Motor_1_PH_RESET;
 8006c90:	4622      	mov	r2, r4
}
 8006c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Motor_1_PH_RESET;
 8006c96:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006c9a:	4803      	ldr	r0, [pc, #12]	@ (8006ca8 <Motor_Brake+0x2c>)
 8006c9c:	f001 be42 	b.w	8008924 <HAL_GPIO_WritePin>
 8006ca0:	20000942 	.word	0x20000942
 8006ca4:	40010800 	.word	0x40010800
 8006ca8:	40010c00 	.word	0x40010c00

08006cac <Motor_init>:
void Motor_init(){
 8006cac:	b508      	push	{r3, lr}
	Motor_Reverse();
 8006cae:	f7ff ffcd 	bl	8006c4c <Motor_Reverse>
	HAL_Delay(1800);
 8006cb2:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 8006cb6:	f001 f86d 	bl	8007d94 <HAL_Delay>
}
 8006cba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Motor_Brake();
 8006cbe:	f7ff bfdd 	b.w	8006c7c <Motor_Brake>
	...

08006cc4 <PAUSE_chk>:
	}
	Motor_2_EN_RESET;
	motor_Reverse_Cycle();
}

void PAUSE_chk(){
 8006cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t pause_show = 0;
 8006cc6:	2400      	movs	r4, #0
	static uint8_t enter_pause = 0;
	while(Injecting && pause_state){
 8006cc8:	4f26      	ldr	r7, [pc, #152]	@ (8006d64 <PAUSE_chk+0xa0>)
		enter_pause = 1;
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
		if((now_time_inject % 5 == 0) && !pause_show){
 8006cca:	4e27      	ldr	r6, [pc, #156]	@ (8006d68 <PAUSE_chk+0xa4>)
	while(Injecting && pause_state){
 8006ccc:	783b      	ldrb	r3, [r7, #0]
 8006cce:	4d27      	ldr	r5, [pc, #156]	@ (8006d6c <PAUSE_chk+0xa8>)
 8006cd0:	b113      	cbz	r3, 8006cd8 <PAUSE_chk+0x14>
 8006cd2:	4b27      	ldr	r3, [pc, #156]	@ (8006d70 <PAUSE_chk+0xac>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	b95b      	cbnz	r3, 8006cf0 <PAUSE_chk+0x2c>
			clear_counter = 0;
			Refresh_counter();
		}
	}

	if(enter_pause){
 8006cd8:	782b      	ldrb	r3, [r5, #0]
 8006cda:	b143      	cbz	r3, 8006cee <PAUSE_chk+0x2a>
			sprintf(Tx_Buffer,"Main.t0.txt=\"\"\xff\xff\xff");
 8006cdc:	4925      	ldr	r1, [pc, #148]	@ (8006d74 <PAUSE_chk+0xb0>)
 8006cde:	4826      	ldr	r0, [pc, #152]	@ (8006d78 <PAUSE_chk+0xb4>)
 8006ce0:	f005 fa37 	bl	800c152 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8006ce4:	4824      	ldr	r0, [pc, #144]	@ (8006d78 <PAUSE_chk+0xb4>)
 8006ce6:	f000 ff29 	bl	8007b3c <USART1_Tx_HMIdata>
			enter_pause = 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	702b      	strb	r3, [r5, #0]
	}
}
 8006cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		enter_pause = 1;
 8006cf0:	2301      	movs	r3, #1
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	2102      	movs	r1, #2
 8006cf6:	4821      	ldr	r0, [pc, #132]	@ (8006d7c <PAUSE_chk+0xb8>)
		enter_pause = 1;
 8006cf8:	702b      	strb	r3, [r5, #0]
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8006cfa:	f001 fe13 	bl	8008924 <HAL_GPIO_WritePin>
		if((now_time_inject % 5 == 0) && !pause_show){
 8006cfe:	6833      	ldr	r3, [r6, #0]
 8006d00:	4a1f      	ldr	r2, [pc, #124]	@ (8006d80 <PAUSE_chk+0xbc>)
 8006d02:	4353      	muls	r3, r2
 8006d04:	f1b3 3f33 	cmp.w	r3, #858993459	@ 0x33333333
 8006d08:	d814      	bhi.n	8006d34 <PAUSE_chk+0x70>
 8006d0a:	b99c      	cbnz	r4, 8006d34 <PAUSE_chk+0x70>
			if(cheat_flag == 1){
 8006d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8006d84 <PAUSE_chk+0xc0>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d108      	bne.n	8006d26 <PAUSE_chk+0x62>
				sprintf(Tx_Buffer,"Main.t0.txt=\"请按规\r\n范操作\"\xff\xff\xff");
 8006d14:	491c      	ldr	r1, [pc, #112]	@ (8006d88 <PAUSE_chk+0xc4>)
 8006d16:	4818      	ldr	r0, [pc, #96]	@ (8006d78 <PAUSE_chk+0xb4>)
 8006d18:	f005 fa1b 	bl	800c152 <strcpy>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8006d1c:	4816      	ldr	r0, [pc, #88]	@ (8006d78 <PAUSE_chk+0xb4>)
 8006d1e:	f000 ff0d 	bl	8007b3c <USART1_Tx_HMIdata>
			pause_show = !pause_show;
 8006d22:	2401      	movs	r4, #1
 8006d24:	e7d2      	b.n	8006ccc <PAUSE_chk+0x8>
			else if(over_pressure == 1){
 8006d26:	4b19      	ldr	r3, [pc, #100]	@ (8006d8c <PAUSE_chk+0xc8>)
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b01      	cmp	r3, #1
				sprintf(Tx_Buffer,"Main.t0.txt=\"注射压\r\n力超压\"\xff\xff\xff");
 8006d2c:	bf0c      	ite	eq
 8006d2e:	4918      	ldreq	r1, [pc, #96]	@ (8006d90 <PAUSE_chk+0xcc>)
				sprintf(Tx_Buffer,"Main.t0.txt=\"已暂停\"\xff\xff\xff");
 8006d30:	4918      	ldrne	r1, [pc, #96]	@ (8006d94 <PAUSE_chk+0xd0>)
 8006d32:	e7f0      	b.n	8006d16 <PAUSE_chk+0x52>
		else if((now_time_inject % 5 == 0) && pause_show){
 8006d34:	6833      	ldr	r3, [r6, #0]
 8006d36:	4353      	muls	r3, r2
 8006d38:	f1b3 3f33 	cmp.w	r3, #858993459	@ 0x33333333
 8006d3c:	d809      	bhi.n	8006d52 <PAUSE_chk+0x8e>
 8006d3e:	b144      	cbz	r4, 8006d52 <PAUSE_chk+0x8e>
			sprintf(Tx_Buffer,"Main.t0.txt=\"\"\xff\xff\xff");
 8006d40:	490c      	ldr	r1, [pc, #48]	@ (8006d74 <PAUSE_chk+0xb0>)
 8006d42:	480d      	ldr	r0, [pc, #52]	@ (8006d78 <PAUSE_chk+0xb4>)
 8006d44:	f005 fa05 	bl	800c152 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8006d48:	480b      	ldr	r0, [pc, #44]	@ (8006d78 <PAUSE_chk+0xb4>)
 8006d4a:	f000 fef7 	bl	8007b3c <USART1_Tx_HMIdata>
			pause_show = !pause_show;
 8006d4e:	2400      	movs	r4, #0
 8006d50:	e7bc      	b.n	8006ccc <PAUSE_chk+0x8>
		else if(clear_counter){
 8006d52:	4b11      	ldr	r3, [pc, #68]	@ (8006d98 <PAUSE_chk+0xd4>)
 8006d54:	781a      	ldrb	r2, [r3, #0]
 8006d56:	2a00      	cmp	r2, #0
 8006d58:	d0b8      	beq.n	8006ccc <PAUSE_chk+0x8>
			clear_counter = 0;
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	701a      	strb	r2, [r3, #0]
			Refresh_counter();
 8006d5e:	f7fb ffa9 	bl	8002cb4 <Refresh_counter>
 8006d62:	e7b3      	b.n	8006ccc <PAUSE_chk+0x8>
 8006d64:	20000940 	.word	0x20000940
 8006d68:	20000a64 	.word	0x20000a64
 8006d6c:	20000938 	.word	0x20000938
 8006d70:	2000093e 	.word	0x2000093e
 8006d74:	0800ed30 	.word	0x0800ed30
 8006d78:	20000b8a 	.word	0x20000b8a
 8006d7c:	40011400 	.word	0x40011400
 8006d80:	cccccccd 	.word	0xcccccccd
 8006d84:	20000a59 	.word	0x20000a59
 8006d88:	0800f279 	.word	0x0800f279
 8006d8c:	20000a5a 	.word	0x20000a5a
 8006d90:	0800f29f 	.word	0x0800f29f
 8006d94:	0800f2c5 	.word	0x0800f2c5
 8006d98:	20000927 	.word	0x20000927

08006d9c <motor_Forward_Cycle>:

void motor_Forward_Cycle(){
 8006d9c:	b508      	push	{r3, lr}
	Motor_Forward();
 8006d9e:	f7ff ff3d 	bl	8006c1c <Motor_Forward>
	last_time_inject = now_time_inject;
 8006da2:	4906      	ldr	r1, [pc, #24]	@ (8006dbc <motor_Forward_Cycle+0x20>)
 8006da4:	4a06      	ldr	r2, [pc, #24]	@ (8006dc0 <motor_Forward_Cycle+0x24>)
 8006da6:	680b      	ldr	r3, [r1, #0]
 8006da8:	6013      	str	r3, [r2, #0]
//				Motor_Brake();
//				break;
//		}
//	}
	//调试用
	while(now_time_inject - last_time_inject <= 15);//推杆泵前推1.5s
 8006daa:	680b      	ldr	r3, [r1, #0]
 8006dac:	6810      	ldr	r0, [r2, #0]
 8006dae:	1a1b      	subs	r3, r3, r0
 8006db0:	2b0f      	cmp	r3, #15
 8006db2:	d9fa      	bls.n	8006daa <motor_Forward_Cycle+0xe>
//	HAL_Delay(1500);
				Motor_Brake();

}
 8006db4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				Motor_Brake();
 8006db8:	f7ff bf60 	b.w	8006c7c <Motor_Brake>
 8006dbc:	20000a64 	.word	0x20000a64
 8006dc0:	20000a60 	.word	0x20000a60

08006dc4 <motor_Reverse_Cycle>:

void motor_Reverse_Cycle(){
 8006dc4:	b508      	push	{r3, lr}
	Motor_Reverse();
 8006dc6:	f7ff ff41 	bl	8006c4c <Motor_Reverse>
	last_time_inject = now_time_inject;
 8006dca:	4906      	ldr	r1, [pc, #24]	@ (8006de4 <motor_Reverse_Cycle+0x20>)
 8006dcc:	4a06      	ldr	r2, [pc, #24]	@ (8006de8 <motor_Reverse_Cycle+0x24>)
 8006dce:	680b      	ldr	r3, [r1, #0]
 8006dd0:	6013      	str	r3, [r2, #0]
	while(now_time_inject - last_time_inject <= 15);//推杆泵收缩1.5s
 8006dd2:	680b      	ldr	r3, [r1, #0]
 8006dd4:	6810      	ldr	r0, [r2, #0]
 8006dd6:	1a1b      	subs	r3, r3, r0
 8006dd8:	2b0f      	cmp	r3, #15
 8006dda:	d9fa      	bls.n	8006dd2 <motor_Reverse_Cycle+0xe>
//	HAL_Delay(1500);
	Motor_Brake();
}
 8006ddc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Motor_Brake();
 8006de0:	f7ff bf4c 	b.w	8006c7c <Motor_Brake>
 8006de4:	20000a64 	.word	0x20000a64
 8006de8:	20000a60 	.word	0x20000a60

08006dec <Ex_GAS_Cycle>:
void Ex_GAS_Cycle(){
 8006dec:	b538      	push	{r3, r4, r5, lr}
	motor_Forward_Cycle();
 8006dee:	f7ff ffd5 	bl	8006d9c <motor_Forward_Cycle>
	while(EX_GAS_start){
 8006df2:	4c0a      	ldr	r4, [pc, #40]	@ (8006e1c <Ex_GAS_Cycle+0x30>)
		Motor_2_EN_SET;
 8006df4:	4d0a      	ldr	r5, [pc, #40]	@ (8006e20 <Ex_GAS_Cycle+0x34>)
	while(EX_GAS_start){
 8006df6:	7822      	ldrb	r2, [r4, #0]
 8006df8:	b942      	cbnz	r2, 8006e0c <Ex_GAS_Cycle+0x20>
	Motor_2_EN_RESET;
 8006dfa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006dfe:	4808      	ldr	r0, [pc, #32]	@ (8006e20 <Ex_GAS_Cycle+0x34>)
 8006e00:	f001 fd90 	bl	8008924 <HAL_GPIO_WritePin>
}
 8006e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	motor_Reverse_Cycle();
 8006e08:	f7ff bfdc 	b.w	8006dc4 <motor_Reverse_Cycle>
		Motor_2_EN_SET;
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006e12:	4628      	mov	r0, r5
 8006e14:	f001 fd86 	bl	8008924 <HAL_GPIO_WritePin>
 8006e18:	e7ed      	b.n	8006df6 <Ex_GAS_Cycle+0xa>
 8006e1a:	bf00      	nop
 8006e1c:	20000a48 	.word	0x20000a48
 8006e20:	40010c00 	.word	0x40010c00

08006e24 <Inject_times>:

void Inject_times(uint16_t Dosage_load){
	totalCycles = Dosage_load / 2;
 8006e24:	4b04      	ldr	r3, [pc, #16]	@ (8006e38 <Inject_times+0x14>)
 8006e26:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8006e2a:	7018      	strb	r0, [r3, #0]
	Dosage_load = 0;
	RemainingTimes = totalCycles;
 8006e2c:	4b03      	ldr	r3, [pc, #12]	@ (8006e3c <Inject_times+0x18>)
 8006e2e:	7018      	strb	r0, [r3, #0]
	InjectTimes = totalCycles;
 8006e30:	4b03      	ldr	r3, [pc, #12]	@ (8006e40 <Inject_times+0x1c>)
 8006e32:	7018      	strb	r0, [r3, #0]
}
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	2000093f 	.word	0x2000093f
 8006e3c:	20000a50 	.word	0x20000a50
 8006e40:	20000941 	.word	0x20000941

08006e44 <Pump_work>:

void Pump_work(){
	Motor_2_EN_SET;
 8006e44:	2201      	movs	r2, #1
 8006e46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
void Pump_work(){
 8006e4a:	b508      	push	{r3, lr}
	Motor_2_EN_SET;
 8006e4c:	4809      	ldr	r0, [pc, #36]	@ (8006e74 <Pump_work+0x30>)
 8006e4e:	f001 fd69 	bl	8008924 <HAL_GPIO_WritePin>
	last_time_inject = now_time_inject;
 8006e52:	4909      	ldr	r1, [pc, #36]	@ (8006e78 <Pump_work+0x34>)
 8006e54:	4a09      	ldr	r2, [pc, #36]	@ (8006e7c <Pump_work+0x38>)
 8006e56:	680b      	ldr	r3, [r1, #0]
 8006e58:	6013      	str	r3, [r2, #0]
	while(now_time_inject - last_time_inject <= 6);
 8006e5a:	680b      	ldr	r3, [r1, #0]
 8006e5c:	6810      	ldr	r0, [r2, #0]
 8006e5e:	1a1b      	subs	r3, r3, r0
 8006e60:	2b06      	cmp	r3, #6
 8006e62:	d9fa      	bls.n	8006e5a <Pump_work+0x16>
//	HAL_Delay(800);
	Motor_2_EN_RESET;
}
 8006e64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Motor_2_EN_RESET;
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006e6e:	4801      	ldr	r0, [pc, #4]	@ (8006e74 <Pump_work+0x30>)
 8006e70:	f001 bd58 	b.w	8008924 <HAL_GPIO_WritePin>
 8006e74:	40010c00 	.word	0x40010c00
 8006e78:	20000a64 	.word	0x20000a64
 8006e7c:	20000a60 	.word	0x20000a60

08006e80 <Inject_working>:

void Inject_working(void){
 8006e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t i =0;
	Invalid_action_times = 0;
 8006e84:	2400      	movs	r4, #0
 8006e86:	4d3d      	ldr	r5, [pc, #244]	@ (8006f7c <Inject_working+0xfc>)
	GasPrs_LOW_time = 0;
 8006e88:	4b3d      	ldr	r3, [pc, #244]	@ (8006f80 <Inject_working+0x100>)
	for(i = 0;i < InjectTimes;i++){
 8006e8a:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 8006f84 <Inject_working+0x104>
		motor_Forward_Cycle();				//推杆泵前推1.5s

		RemainingTimes--;
 8006e8e:	4e3e      	ldr	r6, [pc, #248]	@ (8006f88 <Inject_working+0x108>)

		total_inject_Times++;
 8006e90:	4f3e      	ldr	r7, [pc, #248]	@ (8006f8c <Inject_working+0x10c>)
void Inject_working(void){
 8006e92:	b09a      	sub	sp, #104	@ 0x68
	Invalid_action_times = 0;
 8006e94:	702c      	strb	r4, [r5, #0]
	GasPrs_LOW_time = 0;
 8006e96:	801c      	strh	r4, [r3, #0]
	for(i = 0;i < InjectTimes;i++){
 8006e98:	f898 2000 	ldrb.w	r2, [r8]
 8006e9c:	b2e3      	uxtb	r3, r4
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d845      	bhi.n	8006f2e <Inject_working+0xae>
		Pump_work();								 //泵工作0.8s

		PAUSE_chk();
	}

	if(clear_counter){
 8006ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8006f90 <Inject_working+0x110>)
 8006ea4:	781a      	ldrb	r2, [r3, #0]
 8006ea6:	b10a      	cbz	r2, 8006eac <Inject_working+0x2c>
			clear_counter = 0;
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	701a      	strb	r2, [r3, #0]
		}

	if(cancel_break){
 8006eac:	4b39      	ldr	r3, [pc, #228]	@ (8006f94 <Inject_working+0x114>)
 8006eae:	781a      	ldrb	r2, [r3, #0]
 8006eb0:	2a00      	cmp	r2, #0
 8006eb2:	d05d      	beq.n	8006f70 <Inject_working+0xf0>
			cancel_break = 0;
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	701a      	strb	r2, [r3, #0]
		}
	else{
			total_Times++;
		}

	sprintf(Tx_Buffer,"Main.t0.txt=\"注药结束\"\xff\xff\xff");
 8006eb8:	4937      	ldr	r1, [pc, #220]	@ (8006f98 <Inject_working+0x118>)
 8006eba:	4838      	ldr	r0, [pc, #224]	@ (8006f9c <Inject_working+0x11c>)
 8006ebc:	f005 f949 	bl	800c152 <strcpy>

	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);

	Refresh_counter();

	SDCard_Write_log(GPS_GGA_Data,GPS_RMC_Data);
 8006ec0:	4d37      	ldr	r5, [pc, #220]	@ (8006fa0 <Inject_working+0x120>)
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8006ec2:	4836      	ldr	r0, [pc, #216]	@ (8006f9c <Inject_working+0x11c>)
 8006ec4:	f000 fe3a 	bl	8007b3c <USART1_Tx_HMIdata>
	SDCard_Write_log(GPS_GGA_Data,GPS_RMC_Data);
 8006ec8:	ac0b      	add	r4, sp, #44	@ 0x2c
	USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8006eca:	4834      	ldr	r0, [pc, #208]	@ (8006f9c <Inject_working+0x11c>)
 8006ecc:	f000 fe36 	bl	8007b3c <USART1_Tx_HMIdata>
	Refresh_counter();
 8006ed0:	f7fb fef0 	bl	8002cb4 <Refresh_counter>
	SDCard_Write_log(GPS_GGA_Data,GPS_RMC_Data);
 8006ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ee0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006ee4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006ee8:	466c      	mov	r4, sp
 8006eea:	4e2e      	ldr	r6, [pc, #184]	@ (8006fa4 <Inject_working+0x124>)
 8006eec:	f106 0510 	add.w	r5, r6, #16
 8006ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ef8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006efc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	refresh_dir = 1;
 8006f00:	2401      	movs	r4, #1
	SDCard_Write_log(GPS_GGA_Data,GPS_RMC_Data);
 8006f02:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006f06:	f7fa fe31 	bl	8001b6c <SDCard_Write_log>
	refresh_dir = 1;
 8006f0a:	4b27      	ldr	r3, [pc, #156]	@ (8006fa8 <Inject_working+0x128>)

	Buzzer(1000);
 8006f0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
	refresh_dir = 1;
 8006f10:	701c      	strb	r4, [r3, #0]
	Buzzer(1000);
 8006f12:	f7fb fdaf 	bl	8002a74 <Buzzer>

	Injecting = 0;
 8006f16:	2200      	movs	r2, #0
	first_run = 1;
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8006f18:	2102      	movs	r1, #2
	Injecting = 0;
 8006f1a:	4b24      	ldr	r3, [pc, #144]	@ (8006fac <Inject_working+0x12c>)
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8006f1c:	4824      	ldr	r0, [pc, #144]	@ (8006fb0 <Inject_working+0x130>)
	Injecting = 0;
 8006f1e:	701a      	strb	r2, [r3, #0]
	first_run = 1;
 8006f20:	4b24      	ldr	r3, [pc, #144]	@ (8006fb4 <Inject_working+0x134>)
 8006f22:	701c      	strb	r4, [r3, #0]
}
 8006f24:	b01a      	add	sp, #104	@ 0x68
 8006f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8006f2a:	f001 bcfb 	b.w	8008924 <HAL_GPIO_WritePin>
		motor_Forward_Cycle();				//推杆泵前推1.5s
 8006f2e:	f7ff ff35 	bl	8006d9c <motor_Forward_Cycle>
		RemainingTimes--;
 8006f32:	7833      	ldrb	r3, [r6, #0]
		total_inject_Dosage += 2;
 8006f34:	4a20      	ldr	r2, [pc, #128]	@ (8006fb8 <Inject_working+0x138>)
		RemainingTimes--;
 8006f36:	3b01      	subs	r3, #1
 8006f38:	7033      	strb	r3, [r6, #0]
		total_inject_Times++;
 8006f3a:	883b      	ldrh	r3, [r7, #0]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	803b      	strh	r3, [r7, #0]
		total_inject_Dosage += 2;
 8006f40:	8813      	ldrh	r3, [r2, #0]
 8006f42:	3302      	adds	r3, #2
 8006f44:	8013      	strh	r3, [r2, #0]
		Refresh_Dosage();
 8006f46:	f7fb fef5 	bl	8002d34 <Refresh_Dosage>
		if(GasPrs_LOW){
 8006f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8006fbc <Inject_working+0x13c>)
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	b113      	cbz	r3, 8006f56 <Inject_working+0xd6>
			Invalid_action_times++;
 8006f50:	782b      	ldrb	r3, [r5, #0]
 8006f52:	3301      	adds	r3, #1
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	702b      	strb	r3, [r5, #0]
		motor_Reverse_Cycle();       //推杆泵收缩1.5s
 8006f58:	f7ff ff34 	bl	8006dc4 <motor_Reverse_Cycle>
		HAL_Delay(1000);//停顿1s			 //停顿1s
 8006f5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006f60:	f000 ff18 	bl	8007d94 <HAL_Delay>
		Pump_work();								 //泵工作0.8s
 8006f64:	3401      	adds	r4, #1
 8006f66:	f7ff ff6d 	bl	8006e44 <Pump_work>
		PAUSE_chk();
 8006f6a:	f7ff feab 	bl	8006cc4 <PAUSE_chk>
	for(i = 0;i < InjectTimes;i++){
 8006f6e:	e793      	b.n	8006e98 <Inject_working+0x18>
			total_Times++;
 8006f70:	4a13      	ldr	r2, [pc, #76]	@ (8006fc0 <Inject_working+0x140>)
 8006f72:	8813      	ldrh	r3, [r2, #0]
 8006f74:	3301      	adds	r3, #1
 8006f76:	8013      	strh	r3, [r2, #0]
 8006f78:	e79e      	b.n	8006eb8 <Inject_working+0x38>
 8006f7a:	bf00      	nop
 8006f7c:	20000a58 	.word	0x20000a58
 8006f80:	20000a5e 	.word	0x20000a5e
 8006f84:	20000941 	.word	0x20000941
 8006f88:	20000a50 	.word	0x20000a50
 8006f8c:	20000a4e 	.word	0x20000a4e
 8006f90:	20000927 	.word	0x20000927
 8006f94:	20000926 	.word	0x20000926
 8006f98:	0800f2e0 	.word	0x0800f2e0
 8006f9c:	20000b8a 	.word	0x20000b8a
 8006fa0:	200001f4 	.word	0x200001f4
 8006fa4:	20000230 	.word	0x20000230
 8006fa8:	20000386 	.word	0x20000386
 8006fac:	20000940 	.word	0x20000940
 8006fb0:	40011400 	.word	0x40011400
 8006fb4:	20000003 	.word	0x20000003
 8006fb8:	20000a4c 	.word	0x20000a4c
 8006fbc:	20000919 	.word	0x20000919
 8006fc0:	20000a4a 	.word	0x20000a4a

08006fc4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006fc4:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006fc6:	f44f 7382 	mov.w	r3, #260	@ 0x104
  hspi1.Instance = SPI1;
 8006fca:	480d      	ldr	r0, [pc, #52]	@ (8007000 <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8007004 <MX_SPI1_Init+0x40>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8006fce:	f44f 7100 	mov.w	r1, #512	@ 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006fd2:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006fd6:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8006fd8:	2238      	movs	r2, #56	@ 0x38
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006fda:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006fde:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006fe2:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fe6:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006fe8:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8006fea:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8006fee:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006ff0:	f002 f880 	bl	80090f4 <HAL_SPI_Init>
 8006ff4:	b118      	cbz	r0, 8006ffe <MX_SPI1_Init+0x3a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006ff6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006ffa:	f7ff be0d 	b.w	8006c18 <Error_Handler>
}
 8006ffe:	bd08      	pop	{r3, pc}
 8007000:	20000944 	.word	0x20000944
 8007004:	40013000 	.word	0x40013000

08007008 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007008:	b510      	push	{r4, lr}
 800700a:	4604      	mov	r4, r0
 800700c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800700e:	2210      	movs	r2, #16
 8007010:	2100      	movs	r1, #0
 8007012:	a802      	add	r0, sp, #8
 8007014:	f004 ffa2 	bl	800bf5c <memset>
  if(spiHandle->Instance==SPI1)
 8007018:	6822      	ldr	r2, [r4, #0]
 800701a:	4b16      	ldr	r3, [pc, #88]	@ (8007074 <HAL_SPI_MspInit+0x6c>)
 800701c:	429a      	cmp	r2, r3
 800701e:	d126      	bne.n	800706e <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007020:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8007024:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007026:	4814      	ldr	r0, [pc, #80]	@ (8007078 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007028:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800702c:	619a      	str	r2, [r3, #24]
 800702e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007030:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007032:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007036:	9200      	str	r2, [sp, #0]
 8007038:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800703a:	699a      	ldr	r2, [r3, #24]
 800703c:	f042 0204 	orr.w	r2, r2, #4
 8007040:	619a      	str	r2, [r3, #24]
 8007042:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007044:	22a0      	movs	r2, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007046:	f003 0304 	and.w	r3, r3, #4
 800704a:	9301      	str	r3, [sp, #4]
 800704c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800704e:	2302      	movs	r3, #2
 8007050:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007054:	2303      	movs	r3, #3
 8007056:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007058:	f001 fb86 	bl	8008768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800705c:	2140      	movs	r1, #64	@ 0x40
 800705e:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007060:	4805      	ldr	r0, [pc, #20]	@ (8007078 <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007062:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007066:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007068:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800706a:	f001 fb7d 	bl	8008768 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800706e:	b006      	add	sp, #24
 8007070:	bd10      	pop	{r4, pc}
 8007072:	bf00      	nop
 8007074:	40013000 	.word	0x40013000
 8007078:	40010800 	.word	0x40010800

0800707c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800707c:	4b0e      	ldr	r3, [pc, #56]	@ (80070b8 <HAL_MspInit+0x3c>)
{
 800707e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8007080:	699a      	ldr	r2, [r3, #24]
 8007082:	f042 0201 	orr.w	r2, r2, #1
 8007086:	619a      	str	r2, [r3, #24]
 8007088:	699a      	ldr	r2, [r3, #24]
 800708a:	f002 0201 	and.w	r2, r2, #1
 800708e:	9200      	str	r2, [sp, #0]
 8007090:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007092:	69da      	ldr	r2, [r3, #28]
 8007094:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007098:	61da      	str	r2, [r3, #28]
 800709a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800709c:	4a07      	ldr	r2, [pc, #28]	@ (80070bc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800709e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070a2:	9301      	str	r3, [sp, #4]
 80070a4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80070a6:	6853      	ldr	r3, [r2, #4]
 80070a8:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80070ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80070b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80070b2:	b002      	add	sp, #8
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	40021000 	.word	0x40021000
 80070bc:	40010000 	.word	0x40010000

080070c0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80070c0:	e7fe      	b.n	80070c0 <NMI_Handler>

080070c2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80070c2:	e7fe      	b.n	80070c2 <HardFault_Handler>

080070c4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80070c4:	e7fe      	b.n	80070c4 <MemManage_Handler>

080070c6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80070c6:	e7fe      	b.n	80070c6 <BusFault_Handler>

080070c8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80070c8:	e7fe      	b.n	80070c8 <UsageFault_Handler>

080070ca <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80070ca:	4770      	bx	lr

080070cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80070cc:	4770      	bx	lr

080070ce <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80070ce:	4770      	bx	lr

080070d0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80070d0:	f000 be4e 	b.w	8007d70 <HAL_IncTick>

080070d4 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80070d4:	4801      	ldr	r0, [pc, #4]	@ (80070dc <DMA1_Channel1_IRQHandler+0x8>)
 80070d6:	f001 bab3 	b.w	8008640 <HAL_DMA_IRQHandler>
 80070da:	bf00      	nop
 80070dc:	20000840 	.word	0x20000840

080070e0 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80070e0:	4801      	ldr	r0, [pc, #4]	@ (80070e8 <DMA1_Channel3_IRQHandler+0x8>)
 80070e2:	f001 baad 	b.w	8008640 <HAL_DMA_IRQHandler>
 80070e6:	bf00      	nop
 80070e8:	20000a6c 	.word	0x20000a6c

080070ec <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80070ec:	4801      	ldr	r0, [pc, #4]	@ (80070f4 <ADC1_2_IRQHandler+0x8>)
 80070ee:	f000 be91 	b.w	8007e14 <HAL_ADC_IRQHandler>
 80070f2:	bf00      	nop
 80070f4:	20000884 	.word	0x20000884

080070f8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80070f8:	4801      	ldr	r0, [pc, #4]	@ (8007100 <TIM3_IRQHandler+0x8>)
 80070fa:	f002 b97d 	b.w	80093f8 <HAL_TIM_IRQHandler>
 80070fe:	bf00      	nop
 8007100:	200009e8 	.word	0x200009e8

08007104 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007104:	4801      	ldr	r0, [pc, #4]	@ (800710c <TIM4_IRQHandler+0x8>)
 8007106:	f002 b977 	b.w	80093f8 <HAL_TIM_IRQHandler>
 800710a:	bf00      	nop
 800710c:	200009a0 	.word	0x200009a0

08007110 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007110:	4801      	ldr	r0, [pc, #4]	@ (8007118 <USART2_IRQHandler+0x8>)
 8007112:	f002 bd4b 	b.w	8009bac <HAL_UART_IRQHandler>
 8007116:	bf00      	nop
 8007118:	20000af8 	.word	0x20000af8

0800711c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800711c:	4801      	ldr	r0, [pc, #4]	@ (8007124 <USART3_IRQHandler+0x8>)
 800711e:	f002 bd45 	b.w	8009bac <HAL_UART_IRQHandler>
 8007122:	bf00      	nop
 8007124:	20000ab0 	.word	0x20000ab0

08007128 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_EXTI11_Pin);
 8007128:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800712c:	f001 bc08 	b.w	8008940 <HAL_GPIO_EXTI_IRQHandler>

08007130 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8007130:	2001      	movs	r0, #1
 8007132:	4770      	bx	lr

08007134 <_kill>:

int _kill(int pid, int sig)
{
 8007134:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007136:	f004 ffdf 	bl	800c0f8 <__errno>
 800713a:	2316      	movs	r3, #22
 800713c:	6003      	str	r3, [r0, #0]
  return -1;
}
 800713e:	f04f 30ff 	mov.w	r0, #4294967295
 8007142:	bd08      	pop	{r3, pc}

08007144 <_exit>:

void _exit (int status)
{
 8007144:	b508      	push	{r3, lr}
  errno = EINVAL;
 8007146:	f004 ffd7 	bl	800c0f8 <__errno>
 800714a:	2316      	movs	r3, #22
 800714c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800714e:	e7fe      	b.n	800714e <_exit+0xa>

08007150 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007150:	b570      	push	{r4, r5, r6, lr}
 8007152:	460d      	mov	r5, r1
 8007154:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007156:	460e      	mov	r6, r1
 8007158:	1b73      	subs	r3, r6, r5
 800715a:	429c      	cmp	r4, r3
 800715c:	dc01      	bgt.n	8007162 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800715e:	4620      	mov	r0, r4
 8007160:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8007162:	f3af 8000 	nop.w
 8007166:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800716a:	e7f5      	b.n	8007158 <_read+0x8>

0800716c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800716c:	b570      	push	{r4, r5, r6, lr}
 800716e:	460d      	mov	r5, r1
 8007170:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007172:	460e      	mov	r6, r1
 8007174:	1b73      	subs	r3, r6, r5
 8007176:	429c      	cmp	r4, r3
 8007178:	dc01      	bgt.n	800717e <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 800717a:	4620      	mov	r0, r4
 800717c:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800717e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8007182:	f7f9 ff37 	bl	8000ff4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007186:	e7f5      	b.n	8007174 <_write+0x8>

08007188 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8007188:	f04f 30ff 	mov.w	r0, #4294967295
 800718c:	4770      	bx	lr

0800718e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800718e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8007192:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8007194:	604b      	str	r3, [r1, #4]
}
 8007196:	4770      	bx	lr

08007198 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8007198:	2001      	movs	r0, #1
 800719a:	4770      	bx	lr

0800719c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800719c:	2000      	movs	r0, #0
 800719e:	4770      	bx	lr

080071a0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80071a0:	4a0b      	ldr	r2, [pc, #44]	@ (80071d0 <_sbrk+0x30>)
{
 80071a2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80071a4:	6811      	ldr	r1, [r2, #0]
{
 80071a6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80071a8:	b909      	cbnz	r1, 80071ae <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80071aa:	490a      	ldr	r1, [pc, #40]	@ (80071d4 <_sbrk+0x34>)
 80071ac:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80071ae:	6810      	ldr	r0, [r2, #0]
 80071b0:	4909      	ldr	r1, [pc, #36]	@ (80071d8 <_sbrk+0x38>)
 80071b2:	4c0a      	ldr	r4, [pc, #40]	@ (80071dc <_sbrk+0x3c>)
 80071b4:	4403      	add	r3, r0
 80071b6:	1b09      	subs	r1, r1, r4
 80071b8:	428b      	cmp	r3, r1
 80071ba:	d906      	bls.n	80071ca <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80071bc:	f004 ff9c 	bl	800c0f8 <__errno>
 80071c0:	230c      	movs	r3, #12
 80071c2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80071c4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80071c8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80071ca:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80071cc:	e7fc      	b.n	80071c8 <_sbrk+0x28>
 80071ce:	bf00      	nop
 80071d0:	2000099c 	.word	0x2000099c
 80071d4:	20000d10 	.word	0x20000d10
 80071d8:	20005000 	.word	0x20005000
 80071dc:	00000400 	.word	0x00000400

080071e0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80071e0:	4770      	bx	lr
	...

080071e4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80071e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80071e6:	2210      	movs	r2, #16
 80071e8:	2100      	movs	r1, #0
 80071ea:	a802      	add	r0, sp, #8
 80071ec:	f004 feb6 	bl	800bf5c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 6400-1;
 80071f0:	f641 02ff 	movw	r2, #6399	@ 0x18ff
  htim3.Instance = TIM3;
 80071f4:	4814      	ldr	r0, [pc, #80]	@ (8007248 <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 6400-1;
 80071f6:	4915      	ldr	r1, [pc, #84]	@ (800724c <MX_TIM3_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80071f8:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 6400-1;
 80071fa:	e9c0 1200 	strd	r1, r2, [r0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1000-1;
 80071fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007202:	e9cd 3300 	strd	r3, r3, [sp]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007206:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800720a:	6083      	str	r3, [r0, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800720c:	2380      	movs	r3, #128	@ 0x80
 800720e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007210:	f002 f9c6 	bl	80095a0 <HAL_TIM_Base_Init>
 8007214:	b108      	cbz	r0, 800721a <MX_TIM3_Init+0x36>
  {
    Error_Handler();
 8007216:	f7ff fcff 	bl	8006c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800721a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800721e:	480a      	ldr	r0, [pc, #40]	@ (8007248 <MX_TIM3_Init+0x64>)
 8007220:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007222:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007224:	f002 f9f2 	bl	800960c <HAL_TIM_ConfigClockSource>
 8007228:	b108      	cbz	r0, 800722e <MX_TIM3_Init+0x4a>
  {
    Error_Handler();
 800722a:	f7ff fcf5 	bl	8006c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800722e:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007230:	4669      	mov	r1, sp
 8007232:	4805      	ldr	r0, [pc, #20]	@ (8007248 <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007234:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007238:	f002 fa82 	bl	8009740 <HAL_TIMEx_MasterConfigSynchronization>
 800723c:	b108      	cbz	r0, 8007242 <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
 800723e:	f7ff fceb 	bl	8006c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8007242:	b007      	add	sp, #28
 8007244:	f85d fb04 	ldr.w	pc, [sp], #4
 8007248:	200009e8 	.word	0x200009e8
 800724c:	40000400 	.word	0x40000400

08007250 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007250:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007252:	2210      	movs	r2, #16
 8007254:	2100      	movs	r1, #0
 8007256:	a802      	add	r0, sp, #8
 8007258:	f004 fe80 	bl	800bf5c <memset>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 64-1;
 800725c:	223f      	movs	r2, #63	@ 0x3f
  htim4.Instance = TIM4;
 800725e:	4815      	ldr	r0, [pc, #84]	@ (80072b4 <MX_TIM4_Init+0x64>)
  htim4.Init.Prescaler = 64-1;
 8007260:	4915      	ldr	r1, [pc, #84]	@ (80072b8 <MX_TIM4_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007262:	2300      	movs	r3, #0
  htim4.Init.Prescaler = 64-1;
 8007264:	e9c0 1200 	strd	r1, r2, [r0]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 1000-1;
 8007268:	f240 32e7 	movw	r2, #999	@ 0x3e7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800726c:	e9cd 3300 	strd	r3, r3, [sp]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007270:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007274:	6083      	str	r3, [r0, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007276:	2380      	movs	r3, #128	@ 0x80
 8007278:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800727a:	f002 f991 	bl	80095a0 <HAL_TIM_Base_Init>
 800727e:	b108      	cbz	r0, 8007284 <MX_TIM4_Init+0x34>
  {
    Error_Handler();
 8007280:	f7ff fcca 	bl	8006c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007288:	480a      	ldr	r0, [pc, #40]	@ (80072b4 <MX_TIM4_Init+0x64>)
 800728a:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800728c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800728e:	f002 f9bd 	bl	800960c <HAL_TIM_ConfigClockSource>
 8007292:	b108      	cbz	r0, 8007298 <MX_TIM4_Init+0x48>
  {
    Error_Handler();
 8007294:	f7ff fcc0 	bl	8006c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007298:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800729a:	4669      	mov	r1, sp
 800729c:	4805      	ldr	r0, [pc, #20]	@ (80072b4 <MX_TIM4_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800729e:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80072a2:	f002 fa4d 	bl	8009740 <HAL_TIMEx_MasterConfigSynchronization>
 80072a6:	b108      	cbz	r0, 80072ac <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80072a8:	f7ff fcb6 	bl	8006c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80072ac:	b007      	add	sp, #28
 80072ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80072b2:	bf00      	nop
 80072b4:	200009a0 	.word	0x200009a0
 80072b8:	40000800 	.word	0x40000800

080072bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80072bc:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM3)
 80072be:	6803      	ldr	r3, [r0, #0]
 80072c0:	4a17      	ldr	r2, [pc, #92]	@ (8007320 <HAL_TIM_Base_MspInit+0x64>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d114      	bne.n	80072f0 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80072c6:	4b17      	ldr	r3, [pc, #92]	@ (8007324 <HAL_TIM_Base_MspInit+0x68>)

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 13, 0);
 80072c8:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80072ca:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 13, 0);
 80072cc:	210d      	movs	r1, #13
    __HAL_RCC_TIM3_CLK_ENABLE();
 80072ce:	f042 0202 	orr.w	r2, r2, #2
 80072d2:	61da      	str	r2, [r3, #28]
 80072d4:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 13, 0);
 80072d6:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80072d8:	f003 0302 	and.w	r3, r3, #2
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 13, 0);
 80072e0:	f001 f888 	bl	80083f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80072e4:	201d      	movs	r0, #29
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80072e6:	b003      	add	sp, #12
 80072e8:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80072ec:	f001 b8b2 	b.w	8008454 <HAL_NVIC_EnableIRQ>
  else if(tim_baseHandle->Instance==TIM4)
 80072f0:	4a0d      	ldr	r2, [pc, #52]	@ (8007328 <HAL_TIM_Base_MspInit+0x6c>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d110      	bne.n	8007318 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80072f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007324 <HAL_TIM_Base_MspInit+0x68>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 13, 0);
 80072f8:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 80072fa:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 13, 0);
 80072fc:	210d      	movs	r1, #13
    __HAL_RCC_TIM4_CLK_ENABLE();
 80072fe:	f042 0204 	orr.w	r2, r2, #4
 8007302:	61da      	str	r2, [r3, #28]
 8007304:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 13, 0);
 8007306:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007308:	f003 0304 	and.w	r3, r3, #4
 800730c:	9301      	str	r3, [sp, #4]
 800730e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 13, 0);
 8007310:	f001 f870 	bl	80083f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007314:	201e      	movs	r0, #30
 8007316:	e7e6      	b.n	80072e6 <HAL_TIM_Base_MspInit+0x2a>
}
 8007318:	b003      	add	sp, #12
 800731a:	f85d fb04 	ldr.w	pc, [sp], #4
 800731e:	bf00      	nop
 8007320:	40000400 	.word	0x40000400
 8007324:	40021000 	.word	0x40021000
 8007328:	40000800 	.word	0x40000800

0800732c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
//Timer3 重装载中断间�???100ms
//Timer4 重装载中断间�???1ms
//Timer3、Timer4 共用同一回调函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800732c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(htim == &htim3){
 800732e:	4b97      	ldr	r3, [pc, #604]	@ (800758c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8007330:	4298      	cmp	r0, r3
 8007332:	f040 818a 	bne.w	800764a <HAL_TIM_PeriodElapsedCallback+0x31e>
		now_time_inject++;

		if((now_time_inject % 10 == 0) && ADC_CONV_cplt){
 8007336:	220a      	movs	r2, #10
		now_time_inject++;
 8007338:	4c95      	ldr	r4, [pc, #596]	@ (8007590 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	3301      	adds	r3, #1
 800733e:	6023      	str	r3, [r4, #0]
		if((now_time_inject % 10 == 0) && ADC_CONV_cplt){
 8007340:	6823      	ldr	r3, [r4, #0]
 8007342:	fbb3 f1f2 	udiv	r1, r3, r2
 8007346:	fb02 3311 	mls	r3, r2, r1, r3
 800734a:	b91b      	cbnz	r3, 8007354 <HAL_TIM_PeriodElapsedCallback+0x28>
 800734c:	4a91      	ldr	r2, [pc, #580]	@ (8007594 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800734e:	7811      	ldrb	r1, [r2, #0]
 8007350:	b101      	cbz	r1, 8007354 <HAL_TIM_PeriodElapsedCallback+0x28>
			ADC_CONV_cplt = 0;
 8007352:	7013      	strb	r3, [r2, #0]
//			refresh_bat_vlt();
//			refresh_gasPrs();
		}

		if(Injecting){
 8007354:	4d90      	ldr	r5, [pc, #576]	@ (8007598 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8007356:	782b      	ldrb	r3, [r5, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d04a      	beq.n	80073f2 <HAL_TIM_PeriodElapsedCallback+0xc6>
			if(cheat_flag == 1){
 800735c:	4b8f      	ldr	r3, [pc, #572]	@ (800759c <HAL_TIM_PeriodElapsedCallback+0x270>)
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d13f      	bne.n	80073e4 <HAL_TIM_PeriodElapsedCallback+0xb8>
				sprintf(Tx_Buffer,"Main.t0.txt=\"请按规\r\n范操作\"\xff\xff\xff");
 8007364:	498e      	ldr	r1, [pc, #568]	@ (80075a0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8007366:	488f      	ldr	r0, [pc, #572]	@ (80075a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8007368:	f004 fef3 	bl	800c152 <strcpy>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 800736c:	488d      	ldr	r0, [pc, #564]	@ (80075a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800736e:	f000 fbe5 	bl	8007b3c <USART1_Tx_HMIdata>

				if(now_time_inject % 5 == 0){
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	4a8c      	ldr	r2, [pc, #560]	@ (80075a8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8007376:	4353      	muls	r3, r2
 8007378:	f1b3 3f33 	cmp.w	r3, #858993459	@ 0x33333333
 800737c:	d803      	bhi.n	8007386 <HAL_TIM_PeriodElapsedCallback+0x5a>
					HAL_GPIO_TogglePin(LED_Y_GPIO_Port, LED_Y_Pin);
 800737e:	2110      	movs	r1, #16
 8007380:	488a      	ldr	r0, [pc, #552]	@ (80075ac <HAL_TIM_PeriodElapsedCallback+0x280>)
 8007382:	f001 fad4 	bl	800892e <HAL_GPIO_TogglePin>
				}

				pause_state = 1;
 8007386:	2201      	movs	r2, #1
 8007388:	4b89      	ldr	r3, [pc, #548]	@ (80075b0 <HAL_TIM_PeriodElapsedCallback+0x284>)

				InjectTimes += Invalid_action_times;
 800738a:	488a      	ldr	r0, [pc, #552]	@ (80075b4 <HAL_TIM_PeriodElapsedCallback+0x288>)
				pause_state = 1;
 800738c:	701a      	strb	r2, [r3, #0]
				InjectTimes += Invalid_action_times;
 800738e:	4a8a      	ldr	r2, [pc, #552]	@ (80075b8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007390:	7801      	ldrb	r1, [r0, #0]
 8007392:	7813      	ldrb	r3, [r2, #0]
				RemainingTimes += Invalid_action_times;

				if(total_inject_Times > Invalid_action_times){
 8007394:	4e89      	ldr	r6, [pc, #548]	@ (80075bc <HAL_TIM_PeriodElapsedCallback+0x290>)
				InjectTimes += Invalid_action_times;
 8007396:	440b      	add	r3, r1
 8007398:	7013      	strb	r3, [r2, #0]
				RemainingTimes += Invalid_action_times;
 800739a:	4b89      	ldr	r3, [pc, #548]	@ (80075c0 <HAL_TIM_PeriodElapsedCallback+0x294>)
				}
				else{
					total_inject_Times = 0;
				}

				if(total_inject_Dosage > (Invalid_action_times)*2){
 800739c:	004f      	lsls	r7, r1, #1
				RemainingTimes += Invalid_action_times;
 800739e:	781a      	ldrb	r2, [r3, #0]
 80073a0:	440a      	add	r2, r1
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	701a      	strb	r2, [r3, #0]
				if(total_inject_Times > Invalid_action_times){
 80073a6:	8833      	ldrh	r3, [r6, #0]
				else {
					total_inject_Dosage = 0;
				}
				Invalid_action_times  = 0;

				sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",RemainingTimes*2);//RemainingDosage
 80073a8:	0052      	lsls	r2, r2, #1
				if(total_inject_Times > Invalid_action_times){
 80073aa:	4299      	cmp	r1, r3
					total_inject_Times = 0;
 80073ac:	bf2e      	itee	cs
 80073ae:	2300      	movcs	r3, #0
					total_inject_Times -= Invalid_action_times;
 80073b0:	1a5b      	subcc	r3, r3, r1
 80073b2:	b29b      	uxthcc	r3, r3
 80073b4:	8033      	strh	r3, [r6, #0]
				if(total_inject_Dosage > (Invalid_action_times)*2){
 80073b6:	4e83      	ldr	r6, [pc, #524]	@ (80075c4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80073b8:	8833      	ldrh	r3, [r6, #0]
 80073ba:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
					total_inject_Dosage = 0;
 80073be:	bfd2      	itee	le
 80073c0:	2300      	movle	r3, #0
					total_inject_Dosage =total_inject_Dosage - (Invalid_action_times)*2 ;
 80073c2:	1bdb      	subgt	r3, r3, r7
 80073c4:	b29b      	uxthgt	r3, r3
 80073c6:	8033      	strh	r3, [r6, #0]
				Invalid_action_times  = 0;
 80073c8:	2300      	movs	r3, #0
				sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",RemainingTimes*2);//RemainingDosage
 80073ca:	497f      	ldr	r1, [pc, #508]	@ (80075c8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
				Invalid_action_times  = 0;
 80073cc:	7003      	strb	r3, [r0, #0]
				sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",RemainingTimes*2);//RemainingDosage
 80073ce:	4875      	ldr	r0, [pc, #468]	@ (80075a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80073d0:	f004 fcbc 	bl	800bd4c <siprintf>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80073d4:	4873      	ldr	r0, [pc, #460]	@ (80075a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80073d6:	f000 fbb1 	bl	8007b3c <USART1_Tx_HMIdata>

				Refresh_counter();
 80073da:	f7fb fc6b 	bl	8002cb4 <Refresh_counter>

				HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_RESET);
			}
		}

		if(Injecting && !pause_state){
 80073de:	782b      	ldrb	r3, [r5, #0]
 80073e0:	b923      	cbnz	r3, 80073ec <HAL_TIM_PeriodElapsedCallback+0xc0>
 80073e2:	e006      	b.n	80073f2 <HAL_TIM_PeriodElapsedCallback+0xc6>
			}else if(cheat_flag == 0 || cancel_break){
 80073e4:	b32b      	cbz	r3, 8007432 <HAL_TIM_PeriodElapsedCallback+0x106>
 80073e6:	4b79      	ldr	r3, [pc, #484]	@ (80075cc <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	bb13      	cbnz	r3, 8007432 <HAL_TIM_PeriodElapsedCallback+0x106>
		if(Injecting && !pause_state){
 80073ec:	4b70      	ldr	r3, [pc, #448]	@ (80075b0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	b32b      	cbz	r3, 800743e <HAL_TIM_PeriodElapsedCallback+0x112>
			if(now_time_inject % 5 == 0)
				HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
			}
			else
			{
				if(clear_delay_time >= 3000){
 80073f2:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80073f6:	4b76      	ldr	r3, [pc, #472]	@ (80075d0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80073f8:	6819      	ldr	r1, [r3, #0]
 80073fa:	4291      	cmp	r1, r2
 80073fc:	d929      	bls.n	8007452 <HAL_TIM_PeriodElapsedCallback+0x126>
					total_inject_Times = 0;
 80073fe:	2600      	movs	r6, #0
					total_Times = 0;
					total_inject_Dosage = 0;
					current_TreeNo = 0;
					clear_counter = 1;
 8007400:	2101      	movs	r1, #1
					total_inject_Times = 0;
 8007402:	4a6e      	ldr	r2, [pc, #440]	@ (80075bc <HAL_TIM_PeriodElapsedCallback+0x290>)
					clear_delay_time = 0;

					Buzzer(1000);
 8007404:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
					total_inject_Times = 0;
 8007408:	8016      	strh	r6, [r2, #0]
					total_Times = 0;
 800740a:	4a72      	ldr	r2, [pc, #456]	@ (80075d4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
					clear_delay_time = 0;
 800740c:	601e      	str	r6, [r3, #0]
					total_Times = 0;
 800740e:	8016      	strh	r6, [r2, #0]
					total_inject_Dosage = 0;
 8007410:	4a6c      	ldr	r2, [pc, #432]	@ (80075c4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8007412:	8016      	strh	r6, [r2, #0]
					current_TreeNo = 0;
 8007414:	4a70      	ldr	r2, [pc, #448]	@ (80075d8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8007416:	8016      	strh	r6, [r2, #0]
					clear_counter = 1;
 8007418:	4a70      	ldr	r2, [pc, #448]	@ (80075dc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800741a:	7011      	strb	r1, [r2, #0]
					Buzzer(1000);
 800741c:	f7fb fb2a 	bl	8002a74 <Buzzer>
					Refresh_counter();
 8007420:	f7fb fc48 	bl	8002cb4 <Refresh_counter>

					HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin,GPIO_PIN_RESET);
 8007424:	4632      	mov	r2, r6
 8007426:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800742a:	486d      	ldr	r0, [pc, #436]	@ (80075e0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800742c:	f001 fa7a 	bl	8008924 <HAL_GPIO_WritePin>
 8007430:	e00f      	b.n	8007452 <HAL_TIM_PeriodElapsedCallback+0x126>
				HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_RESET);
 8007432:	2200      	movs	r2, #0
 8007434:	2110      	movs	r1, #16
 8007436:	485d      	ldr	r0, [pc, #372]	@ (80075ac <HAL_TIM_PeriodElapsedCallback+0x280>)
 8007438:	f001 fa74 	bl	8008924 <HAL_GPIO_WritePin>
 800743c:	e7cf      	b.n	80073de <HAL_TIM_PeriodElapsedCallback+0xb2>
			if(now_time_inject % 5 == 0)
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	4a59      	ldr	r2, [pc, #356]	@ (80075a8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8007442:	4353      	muls	r3, r2
 8007444:	f1b3 3f33 	cmp.w	r3, #858993459	@ 0x33333333
 8007448:	d803      	bhi.n	8007452 <HAL_TIM_PeriodElapsedCallback+0x126>
				HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 800744a:	2102      	movs	r1, #2
 800744c:	4865      	ldr	r0, [pc, #404]	@ (80075e4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800744e:	f001 fa6e 	bl	800892e <HAL_GPIO_TogglePin>
				}
			}

		if(cancel_delay_time >= 3000 && (page_location == Main_page)){
 8007452:	f640 33b7 	movw	r3, #2999	@ 0xbb7
 8007456:	4964      	ldr	r1, [pc, #400]	@ (80075e8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8007458:	680a      	ldr	r2, [r1, #0]
 800745a:	429a      	cmp	r2, r3
 800745c:	d93c      	bls.n	80074d8 <HAL_TIM_PeriodElapsedCallback+0x1ac>
 800745e:	4b63      	ldr	r3, [pc, #396]	@ (80075ec <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d138      	bne.n	80074d8 <HAL_TIM_PeriodElapsedCallback+0x1ac>
			if(Injecting && pause_state){
 8007466:	782a      	ldrb	r2, [r5, #0]
 8007468:	4e61      	ldr	r6, [pc, #388]	@ (80075f0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800746a:	2a00      	cmp	r2, #0
 800746c:	d075      	beq.n	800755a <HAL_TIM_PeriodElapsedCallback+0x22e>
 800746e:	4a50      	ldr	r2, [pc, #320]	@ (80075b0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8007470:	7812      	ldrb	r2, [r2, #0]
 8007472:	2a00      	cmp	r2, #0
 8007474:	d071      	beq.n	800755a <HAL_TIM_PeriodElapsedCallback+0x22e>
				cancel_delay_time = 0;
 8007476:	600b      	str	r3, [r1, #0]
				Injecting = 0;
				totalCycles = 0;
				InjectTimes = 0;
				RemainingTimes = 0;
				cancel_break = 1;
 8007478:	2101      	movs	r1, #1
				totalCycles = 0;
 800747a:	4a5e      	ldr	r2, [pc, #376]	@ (80075f4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
				Injecting = 0;
 800747c:	702b      	strb	r3, [r5, #0]
				totalCycles = 0;
 800747e:	7013      	strb	r3, [r2, #0]
				InjectTimes = 0;
 8007480:	4a4d      	ldr	r2, [pc, #308]	@ (80075b8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
				cheat_flag = 0;
				current_TreeNo--;

				sprintf(Tx_Buffer,"Main.t0.txt=\"取消中...\"\xff\xff\xff");
 8007482:	4848      	ldr	r0, [pc, #288]	@ (80075a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
				InjectTimes = 0;
 8007484:	7013      	strb	r3, [r2, #0]
				RemainingTimes = 0;
 8007486:	4a4e      	ldr	r2, [pc, #312]	@ (80075c0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007488:	7013      	strb	r3, [r2, #0]
				cancel_break = 1;
 800748a:	4a50      	ldr	r2, [pc, #320]	@ (80075cc <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800748c:	7011      	strb	r1, [r2, #0]
				cheat_flag = 0;
 800748e:	4a43      	ldr	r2, [pc, #268]	@ (800759c <HAL_TIM_PeriodElapsedCallback+0x270>)
				sprintf(Tx_Buffer,"Main.t0.txt=\"取消中...\"\xff\xff\xff");
 8007490:	4959      	ldr	r1, [pc, #356]	@ (80075f8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
				cheat_flag = 0;
 8007492:	7013      	strb	r3, [r2, #0]
				current_TreeNo--;
 8007494:	4a50      	ldr	r2, [pc, #320]	@ (80075d8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8007496:	8813      	ldrh	r3, [r2, #0]
 8007498:	3b01      	subs	r3, #1
 800749a:	8013      	strh	r3, [r2, #0]
				sprintf(Tx_Buffer,"Main.t0.txt=\"取消中...\"\xff\xff\xff");
 800749c:	f004 fe59 	bl	800c152 <strcpy>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80074a0:	4840      	ldr	r0, [pc, #256]	@ (80075a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80074a2:	f000 fb4b 	bl	8007b3c <USART1_Tx_HMIdata>

				sprintf(Tx_Buffer,"Main.n0.val=0\xff\xff\xff");
 80074a6:	4955      	ldr	r1, [pc, #340]	@ (80075fc <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80074a8:	483e      	ldr	r0, [pc, #248]	@ (80075a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80074aa:	f004 fe52 	bl	800c152 <strcpy>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80074ae:	483d      	ldr	r0, [pc, #244]	@ (80075a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80074b0:	f000 fb44 	bl	8007b3c <USART1_Tx_HMIdata>

				sprintf(Tx_Buffer,"Main.t8.txt=\"\"\xff\xff\xff");
 80074b4:	4952      	ldr	r1, [pc, #328]	@ (8007600 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80074b6:	483b      	ldr	r0, [pc, #236]	@ (80075a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80074b8:	f004 fe4b 	bl	800c152 <strcpy>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80074bc:	4839      	ldr	r0, [pc, #228]	@ (80075a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80074be:	f000 fb3d 	bl	8007b3c <USART1_Tx_HMIdata>

				Motor_Reverse();
 80074c2:	f7ff fbc3 	bl	8006c4c <Motor_Reverse>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);

				sprintf(Tx_Buffer,"Main.t8.txt=\"\"\xff\xff\xff");
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
			}
			Dosage_set = 0;
 80074c6:	2300      	movs	r3, #0
			sprintf(Tx_Buffer,"Main.t0.txt=\"\"\xff\xff\xff");
 80074c8:	494e      	ldr	r1, [pc, #312]	@ (8007604 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80074ca:	4836      	ldr	r0, [pc, #216]	@ (80075a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
			Dosage_set = 0;
 80074cc:	8033      	strh	r3, [r6, #0]
			sprintf(Tx_Buffer,"Main.t0.txt=\"\"\xff\xff\xff");
 80074ce:	f004 fe40 	bl	800c152 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 80074d2:	4834      	ldr	r0, [pc, #208]	@ (80075a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80074d4:	f000 fb32 	bl	8007b3c <USART1_Tx_HMIdata>
		}

		if(ExGas_delay_time >= 3500 && (page_location == Main_page)){
 80074d8:	f640 52ab 	movw	r2, #3499	@ 0xdab
 80074dc:	4b4a      	ldr	r3, [pc, #296]	@ (8007608 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80074de:	6819      	ldr	r1, [r3, #0]
 80074e0:	4291      	cmp	r1, r2
 80074e2:	f240 80a3 	bls.w	800762c <HAL_TIM_PeriodElapsedCallback+0x300>
 80074e6:	4a41      	ldr	r2, [pc, #260]	@ (80075ec <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80074e8:	7812      	ldrb	r2, [r2, #0]
 80074ea:	2a00      	cmp	r2, #0
 80074ec:	f040 809e 	bne.w	800762c <HAL_TIM_PeriodElapsedCallback+0x300>
			EX_GAS_start = 1;
 80074f0:	2201      	movs	r2, #1
 80074f2:	4b46      	ldr	r3, [pc, #280]	@ (800760c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
		}
		else
		if(ExGas_delay_time >= 3500 && (page_location == File_M_page)){
				ExGas_delay_time = 0;
				EX_GAS_start = 0;
 80074f4:	701a      	strb	r2, [r3, #0]
			}

		if(Injecting && over_pressure){
 80074f6:	782b      	ldrb	r3, [r5, #0]
 80074f8:	b1b3      	cbz	r3, 8007528 <HAL_TIM_PeriodElapsedCallback+0x1fc>
 80074fa:	4b45      	ldr	r3, [pc, #276]	@ (8007610 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	b19b      	cbz	r3, 8007528 <HAL_TIM_PeriodElapsedCallback+0x1fc>
			sprintf(Tx_Buffer,"Main.t0.txt=\"注射压\r\n力超压\"\xff\xff\xff");
 8007500:	4944      	ldr	r1, [pc, #272]	@ (8007614 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8007502:	4828      	ldr	r0, [pc, #160]	@ (80075a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8007504:	f004 fe25 	bl	800c152 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8007508:	4826      	ldr	r0, [pc, #152]	@ (80075a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800750a:	f000 fb17 	bl	8007b3c <USART1_Tx_HMIdata>

			if(now_time_inject % 5 == 0){
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	4a25      	ldr	r2, [pc, #148]	@ (80075a8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8007512:	4353      	muls	r3, r2
 8007514:	f1b3 3f33 	cmp.w	r3, #858993459	@ 0x33333333
 8007518:	d803      	bhi.n	8007522 <HAL_TIM_PeriodElapsedCallback+0x1f6>
				HAL_GPIO_TogglePin(LED_Y_GPIO_Port, LED_Y_Pin);
 800751a:	2110      	movs	r1, #16
 800751c:	4823      	ldr	r0, [pc, #140]	@ (80075ac <HAL_TIM_PeriodElapsedCallback+0x280>)
 800751e:	f001 fa06 	bl	800892e <HAL_GPIO_TogglePin>
			}
			pause_state = 1;
 8007522:	2201      	movs	r2, #1
 8007524:	4b22      	ldr	r3, [pc, #136]	@ (80075b0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8007526:	701a      	strb	r2, [r3, #0]
		}

		if(confirm_press_time >= 3000 && (page_location == Main_page)){
 8007528:	f640 33b7 	movw	r3, #2999	@ 0xbb7
 800752c:	4a3a      	ldr	r2, [pc, #232]	@ (8007618 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800752e:	8811      	ldrh	r1, [r2, #0]
 8007530:	4299      	cmp	r1, r3
 8007532:	d911      	bls.n	8007558 <HAL_TIM_PeriodElapsedCallback+0x22c>
 8007534:	4b2d      	ldr	r3, [pc, #180]	@ (80075ec <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8007536:	7819      	ldrb	r1, [r3, #0]
 8007538:	b971      	cbnz	r1, 8007558 <HAL_TIM_PeriodElapsedCallback+0x22c>
			confirm_press_time = 0;
			page_location = File_M_page;
 800753a:	2401      	movs	r4, #1
			confirm_press_time = 0;
 800753c:	8011      	strh	r1, [r2, #0]
			sprintf(Tx_Buffer,"page File_M\xff\xff\xff");
 800753e:	4819      	ldr	r0, [pc, #100]	@ (80075a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8007540:	4936      	ldr	r1, [pc, #216]	@ (800761c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
			page_location = File_M_page;
 8007542:	701c      	strb	r4, [r3, #0]
			sprintf(Tx_Buffer,"page File_M\xff\xff\xff");
 8007544:	f004 fe05 	bl	800c152 <strcpy>
			USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8007548:	4816      	ldr	r0, [pc, #88]	@ (80075a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800754a:	f000 faf7 	bl	8007b3c <USART1_Tx_HMIdata>
			HAL_Delay(20);
 800754e:	2014      	movs	r0, #20
 8007550:	f000 fc20 	bl	8007d94 <HAL_Delay>
			refresh_dir = 1;
 8007554:	4b32      	ldr	r3, [pc, #200]	@ (8007620 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8007556:	701c      	strb	r4, [r3, #0]
				waiting_start_timeout = 1;
			}
		}

	}//&htim4
}
 8007558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else if(waiting_start){
 800755a:	4b32      	ldr	r3, [pc, #200]	@ (8007624 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800755c:	781a      	ldrb	r2, [r3, #0]
 800755e:	2a00      	cmp	r2, #0
 8007560:	d0b1      	beq.n	80074c6 <HAL_TIM_PeriodElapsedCallback+0x19a>
				waiting_start = 0;
 8007562:	2200      	movs	r2, #0
 8007564:	701a      	strb	r2, [r3, #0]
				Dosage_load = 0;
 8007566:	4b30      	ldr	r3, [pc, #192]	@ (8007628 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
				cancel_delay_time = 0;
 8007568:	600a      	str	r2, [r1, #0]
				sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",Dosage_set);
 800756a:	480e      	ldr	r0, [pc, #56]	@ (80075a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800756c:	4916      	ldr	r1, [pc, #88]	@ (80075c8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
				Dosage_load = 0;
 800756e:	801a      	strh	r2, [r3, #0]
				Dosage_set = 0;
 8007570:	8032      	strh	r2, [r6, #0]
				sprintf(Tx_Buffer,"Main.n0.val=%d\xff\xff\xff",Dosage_set);
 8007572:	f004 fbeb 	bl	800bd4c <siprintf>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8007576:	480b      	ldr	r0, [pc, #44]	@ (80075a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8007578:	f000 fae0 	bl	8007b3c <USART1_Tx_HMIdata>
				sprintf(Tx_Buffer,"Main.t8.txt=\"\"\xff\xff\xff");
 800757c:	4920      	ldr	r1, [pc, #128]	@ (8007600 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800757e:	4809      	ldr	r0, [pc, #36]	@ (80075a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8007580:	f004 fde7 	bl	800c152 <strcpy>
				USART1_Tx_HMIdata((uint8_t*)Tx_Buffer);
 8007584:	4807      	ldr	r0, [pc, #28]	@ (80075a4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8007586:	f000 fad9 	bl	8007b3c <USART1_Tx_HMIdata>
 800758a:	e79c      	b.n	80074c6 <HAL_TIM_PeriodElapsedCallback+0x19a>
 800758c:	200009e8 	.word	0x200009e8
 8007590:	20000a64 	.word	0x20000a64
 8007594:	200008b4 	.word	0x200008b4
 8007598:	20000940 	.word	0x20000940
 800759c:	20000a59 	.word	0x20000a59
 80075a0:	0800f279 	.word	0x0800f279
 80075a4:	20000b8a 	.word	0x20000b8a
 80075a8:	cccccccd 	.word	0xcccccccd
 80075ac:	40010c00 	.word	0x40010c00
 80075b0:	2000093e 	.word	0x2000093e
 80075b4:	20000a58 	.word	0x20000a58
 80075b8:	20000941 	.word	0x20000941
 80075bc:	20000a4e 	.word	0x20000a4e
 80075c0:	20000a50 	.word	0x20000a50
 80075c4:	20000a4c 	.word	0x20000a4c
 80075c8:	0800ed1e 	.word	0x0800ed1e
 80075cc:	20000926 	.word	0x20000926
 80075d0:	20000a38 	.word	0x20000a38
 80075d4:	20000a4a 	.word	0x20000a4a
 80075d8:	200008c2 	.word	0x200008c2
 80075dc:	20000927 	.word	0x20000927
 80075e0:	40011000 	.word	0x40011000
 80075e4:	40011400 	.word	0x40011400
 80075e8:	20000a34 	.word	0x20000a34
 80075ec:	20000370 	.word	0x20000370
 80075f0:	200008c6 	.word	0x200008c6
 80075f4:	2000093f 	.word	0x2000093f
 80075f8:	0800f316 	.word	0x0800f316
 80075fc:	0800e8c1 	.word	0x0800e8c1
 8007600:	0800e905 	.word	0x0800e905
 8007604:	0800ed30 	.word	0x0800ed30
 8007608:	20000a30 	.word	0x20000a30
 800760c:	20000a48 	.word	0x20000a48
 8007610:	20000a5a 	.word	0x20000a5a
 8007614:	0800f29f 	.word	0x0800f29f
 8007618:	20000a5c 	.word	0x20000a5c
 800761c:	0800f334 	.word	0x0800f334
 8007620:	20000386 	.word	0x20000386
 8007624:	2000092c 	.word	0x2000092c
 8007628:	200008c4 	.word	0x200008c4
		if(ExGas_delay_time >= 3500 && (page_location == File_M_page)){
 800762c:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8007630:	6819      	ldr	r1, [r3, #0]
 8007632:	4291      	cmp	r1, r2
 8007634:	f67f af5f 	bls.w	80074f6 <HAL_TIM_PeriodElapsedCallback+0x1ca>
 8007638:	4a98      	ldr	r2, [pc, #608]	@ (800789c <HAL_TIM_PeriodElapsedCallback+0x570>)
 800763a:	7812      	ldrb	r2, [r2, #0]
 800763c:	2a01      	cmp	r2, #1
 800763e:	f47f af5a 	bne.w	80074f6 <HAL_TIM_PeriodElapsedCallback+0x1ca>
				ExGas_delay_time = 0;
 8007642:	2200      	movs	r2, #0
 8007644:	601a      	str	r2, [r3, #0]
				EX_GAS_start = 0;
 8007646:	4b96      	ldr	r3, [pc, #600]	@ (80078a0 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8007648:	e754      	b.n	80074f4 <HAL_TIM_PeriodElapsedCallback+0x1c8>
	if(htim == &htim4){
 800764a:	4b96      	ldr	r3, [pc, #600]	@ (80078a4 <HAL_TIM_PeriodElapsedCallback+0x578>)
 800764c:	4298      	cmp	r0, r3
 800764e:	d183      	bne.n	8007558 <HAL_TIM_PeriodElapsedCallback+0x22c>
		now_time++;
 8007650:	4c95      	ldr	r4, [pc, #596]	@ (80078a8 <HAL_TIM_PeriodElapsedCallback+0x57c>)
		if((key_lock_time - now_time >= 50) && key_scan_lock){//下降沿中断触发后50ms内锁止，防止反复触发
 8007652:	4a96      	ldr	r2, [pc, #600]	@ (80078ac <HAL_TIM_PeriodElapsedCallback+0x580>)
		now_time++;
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	3301      	adds	r3, #1
 8007658:	6023      	str	r3, [r4, #0]
		if((key_lock_time - now_time >= 50) && key_scan_lock){//下降沿中断触发后50ms内锁止，防止反复触发
 800765a:	6821      	ldr	r1, [r4, #0]
 800765c:	6813      	ldr	r3, [r2, #0]
 800765e:	1a5b      	subs	r3, r3, r1
 8007660:	2b31      	cmp	r3, #49	@ 0x31
 8007662:	d905      	bls.n	8007670 <HAL_TIM_PeriodElapsedCallback+0x344>
 8007664:	4992      	ldr	r1, [pc, #584]	@ (80078b0 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8007666:	780b      	ldrb	r3, [r1, #0]
 8007668:	b113      	cbz	r3, 8007670 <HAL_TIM_PeriodElapsedCallback+0x344>
			key_scan_lock = 0;
 800766a:	2300      	movs	r3, #0
 800766c:	700b      	strb	r3, [r1, #0]
			key_lock_time = 0;
 800766e:	6013      	str	r3, [r2, #0]
		if(key_pressed)
 8007670:	4d90      	ldr	r5, [pc, #576]	@ (80078b4 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8007672:	782b      	ldrb	r3, [r5, #0]
 8007674:	b11b      	cbz	r3, 800767e <HAL_TIM_PeriodElapsedCallback+0x352>
			key_now_time++;
 8007676:	4a90      	ldr	r2, [pc, #576]	@ (80078b8 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8007678:	6813      	ldr	r3, [r2, #0]
 800767a:	3301      	adds	r3, #1
 800767c:	6013      	str	r3, [r2, #0]
		if(GasPrs_LOW == 1){
 800767e:	4b8f      	ldr	r3, [pc, #572]	@ (80078bc <HAL_TIM_PeriodElapsedCallback+0x590>)
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d174      	bne.n	8007770 <HAL_TIM_PeriodElapsedCallback+0x444>
			if(motor_direction == FORWARD){
 8007686:	4b8e      	ldr	r3, [pc, #568]	@ (80078c0 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8007688:	f993 3000 	ldrsb.w	r3, [r3]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d104      	bne.n	800769a <HAL_TIM_PeriodElapsedCallback+0x36e>
				GasPrs_LOW_time++;
 8007690:	4a8c      	ldr	r2, [pc, #560]	@ (80078c4 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8007692:	8813      	ldrh	r3, [r2, #0]
 8007694:	3301      	adds	r3, #1
 8007696:	b29b      	uxth	r3, r3
			GasPrs_LOW_time = 0;
 8007698:	8013      	strh	r3, [r2, #0]
		if(GasPrs_HIGH == 1){
 800769a:	4b8b      	ldr	r3, [pc, #556]	@ (80078c8 <HAL_TIM_PeriodElapsedCallback+0x59c>)
		if((PAUSE_KEY == GPIO_PIN_SET) || (NRESET_KEY == GPIO_PIN_SET)){
 800769c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
		if(GasPrs_HIGH == 1){
 80076a0:	781b      	ldrb	r3, [r3, #0]
		if((PAUSE_KEY == GPIO_PIN_SET) || (NRESET_KEY == GPIO_PIN_SET)){
 80076a2:	488a      	ldr	r0, [pc, #552]	@ (80078cc <HAL_TIM_PeriodElapsedCallback+0x5a0>)
		if(GasPrs_HIGH == 1){
 80076a4:	2b01      	cmp	r3, #1
			over_pressure = 1;
 80076a6:	bf04      	itt	eq
 80076a8:	4a89      	ldreq	r2, [pc, #548]	@ (80078d0 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80076aa:	7013      	strbeq	r3, [r2, #0]
		if((PAUSE_KEY == GPIO_PIN_SET) || (NRESET_KEY == GPIO_PIN_SET)){
 80076ac:	f001 f934 	bl	8008918 <HAL_GPIO_ReadPin>
 80076b0:	2801      	cmp	r0, #1
 80076b2:	d161      	bne.n	8007778 <HAL_TIM_PeriodElapsedCallback+0x44c>
    	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin,GPIO_PIN_RESET);
 80076b4:	2200      	movs	r2, #0
 80076b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80076ba:	4884      	ldr	r0, [pc, #528]	@ (80078cc <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80076bc:	f001 f932 	bl	8008924 <HAL_GPIO_WritePin>
    	clear_delay_time = 0;
 80076c0:	2200      	movs	r2, #0
 80076c2:	4b84      	ldr	r3, [pc, #528]	@ (80078d4 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80076c4:	601a      	str	r2, [r3, #0]
		if(PAUSE_KEY == GPIO_PIN_SET){
 80076c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80076ca:	4880      	ldr	r0, [pc, #512]	@ (80078cc <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80076cc:	f001 f924 	bl	8008918 <HAL_GPIO_ReadPin>
 80076d0:	2801      	cmp	r0, #1
 80076d2:	d178      	bne.n	80077c6 <HAL_TIM_PeriodElapsedCallback+0x49a>
			cancel_delay_time = 0;
 80076d4:	2200      	movs	r2, #0
 80076d6:	4b80      	ldr	r3, [pc, #512]	@ (80078d8 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80076d8:	601a      	str	r2, [r3, #0]
		if(EX_GAS_KEY == GPIO_PIN_SET){
 80076da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80076de:	487f      	ldr	r0, [pc, #508]	@ (80078dc <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80076e0:	f001 f91a 	bl	8008918 <HAL_GPIO_ReadPin>
 80076e4:	2801      	cmp	r0, #1
 80076e6:	d17a      	bne.n	80077de <HAL_TIM_PeriodElapsedCallback+0x4b2>
			ExGas_delay_time = 0;
 80076e8:	2200      	movs	r2, #0
 80076ea:	4b7d      	ldr	r3, [pc, #500]	@ (80078e0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 80076ec:	601a      	str	r2, [r3, #0]
		if(CONFIRM_KEY == GPIO_PIN_SET){
 80076ee:	2120      	movs	r1, #32
 80076f0:	487a      	ldr	r0, [pc, #488]	@ (80078dc <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80076f2:	f001 f911 	bl	8008918 <HAL_GPIO_ReadPin>
 80076f6:	2801      	cmp	r0, #1
 80076f8:	f040 8082 	bne.w	8007800 <HAL_TIM_PeriodElapsedCallback+0x4d4>
			confirm_press_time = 0;
 80076fc:	2200      	movs	r2, #0
 80076fe:	4b79      	ldr	r3, [pc, #484]	@ (80078e4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8007700:	801a      	strh	r2, [r3, #0]
			if(key_pressed && key_value && (key_now_time - key_last_time > 1200) && !key_press_long){
 8007702:	4979      	ldr	r1, [pc, #484]	@ (80078e8 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8007704:	782a      	ldrb	r2, [r5, #0]
 8007706:	780b      	ldrb	r3, [r1, #0]
 8007708:	2a00      	cmp	r2, #0
 800770a:	f000 808a 	beq.w	8007822 <HAL_TIM_PeriodElapsedCallback+0x4f6>
 800770e:	4a77      	ldr	r2, [pc, #476]	@ (80078ec <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8007710:	7812      	ldrb	r2, [r2, #0]
 8007712:	2a00      	cmp	r2, #0
 8007714:	f000 8085 	beq.w	8007822 <HAL_TIM_PeriodElapsedCallback+0x4f6>
 8007718:	4d67      	ldr	r5, [pc, #412]	@ (80078b8 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800771a:	4875      	ldr	r0, [pc, #468]	@ (80078f0 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800771c:	682a      	ldr	r2, [r5, #0]
 800771e:	6806      	ldr	r6, [r0, #0]
 8007720:	1b92      	subs	r2, r2, r6
 8007722:	f5b2 6f96 	cmp.w	r2, #1200	@ 0x4b0
 8007726:	d97c      	bls.n	8007822 <HAL_TIM_PeriodElapsedCallback+0x4f6>
 8007728:	b91b      	cbnz	r3, 8007732 <HAL_TIM_PeriodElapsedCallback+0x406>
				key_now_time = 0;
 800772a:	602b      	str	r3, [r5, #0]
				key_last_time = 0;
 800772c:	6003      	str	r3, [r0, #0]
				key_press_long = 1;
 800772e:	2301      	movs	r3, #1
 8007730:	700b      	strb	r3, [r1, #0]
		if(key_press_long && (page_location == Main_page)){
 8007732:	4b5a      	ldr	r3, [pc, #360]	@ (800789c <HAL_TIM_PeriodElapsedCallback+0x570>)
 8007734:	7818      	ldrb	r0, [r3, #0]
 8007736:	2800      	cmp	r0, #0
 8007738:	d175      	bne.n	8007826 <HAL_TIM_PeriodElapsedCallback+0x4fa>
			key_press_time++;
 800773a:	496e      	ldr	r1, [pc, #440]	@ (80078f4 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800773c:	880b      	ldrh	r3, [r1, #0]
 800773e:	3301      	adds	r3, #1
 8007740:	b29b      	uxth	r3, r3
 8007742:	800b      	strh	r3, [r1, #0]
			if(key_press_time >= 500){
 8007744:	880b      	ldrh	r3, [r1, #0]
 8007746:	b29b      	uxth	r3, r3
 8007748:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800774c:	d36b      	bcc.n	8007826 <HAL_TIM_PeriodElapsedCallback+0x4fa>
				if(key_value == DECREASE_KEY_PRESS){
 800774e:	4b67      	ldr	r3, [pc, #412]	@ (80078ec <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	2b01      	cmp	r3, #1
 8007754:	f040 8085 	bne.w	8007862 <HAL_TIM_PeriodElapsedCallback+0x536>
				  if(Dosage_set > 1000)
 8007758:	4a67      	ldr	r2, [pc, #412]	@ (80078f8 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800775a:	8813      	ldrh	r3, [r2, #0]
 800775c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007760:	d97a      	bls.n	8007858 <HAL_TIM_PeriodElapsedCallback+0x52c>
					  Dosage_set = 0;
 8007762:	8010      	strh	r0, [r2, #0]
					key_value_Refresh = 1;
 8007764:	2201      	movs	r2, #1
 8007766:	4b65      	ldr	r3, [pc, #404]	@ (80078fc <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8007768:	701a      	strb	r2, [r3, #0]
				key_press_time = 0;
 800776a:	2300      	movs	r3, #0
 800776c:	800b      	strh	r3, [r1, #0]
 800776e:	e05a      	b.n	8007826 <HAL_TIM_PeriodElapsedCallback+0x4fa>
		}else if(GasPrs_LOW == 0)
 8007770:	2b00      	cmp	r3, #0
 8007772:	d192      	bne.n	800769a <HAL_TIM_PeriodElapsedCallback+0x36e>
			GasPrs_LOW_time = 0;
 8007774:	4a53      	ldr	r2, [pc, #332]	@ (80078c4 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8007776:	e78f      	b.n	8007698 <HAL_TIM_PeriodElapsedCallback+0x36c>
		if((PAUSE_KEY == GPIO_PIN_SET) || (NRESET_KEY == GPIO_PIN_SET)){
 8007778:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800777c:	4857      	ldr	r0, [pc, #348]	@ (80078dc <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800777e:	f001 f8cb 	bl	8008918 <HAL_GPIO_ReadPin>
 8007782:	2801      	cmp	r0, #1
 8007784:	d096      	beq.n	80076b4 <HAL_TIM_PeriodElapsedCallback+0x388>
		else if((clear_counter == 0) && (PAUSE_KEY == GPIO_PIN_RESET) && (NRESET_KEY == GPIO_PIN_RESET)){
 8007786:	4b5e      	ldr	r3, [pc, #376]	@ (8007900 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d19b      	bne.n	80076c6 <HAL_TIM_PeriodElapsedCallback+0x39a>
 800778e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007792:	484e      	ldr	r0, [pc, #312]	@ (80078cc <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8007794:	f001 f8c0 	bl	8008918 <HAL_GPIO_ReadPin>
 8007798:	2800      	cmp	r0, #0
 800779a:	d194      	bne.n	80076c6 <HAL_TIM_PeriodElapsedCallback+0x39a>
 800779c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80077a0:	484e      	ldr	r0, [pc, #312]	@ (80078dc <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80077a2:	f001 f8b9 	bl	8008918 <HAL_GPIO_ReadPin>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	d18d      	bne.n	80076c6 <HAL_TIM_PeriodElapsedCallback+0x39a>
    	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin,GPIO_PIN_SET);
 80077aa:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 80077ae:	2201      	movs	r2, #1
 80077b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80077b4:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 80077b8:	f001 f8b4 	bl	8008924 <HAL_GPIO_WritePin>
    	clear_delay_time++;
 80077bc:	4a45      	ldr	r2, [pc, #276]	@ (80078d4 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80077be:	6813      	ldr	r3, [r2, #0]
 80077c0:	3301      	adds	r3, #1
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	e77f      	b.n	80076c6 <HAL_TIM_PeriodElapsedCallback+0x39a>
		else if(PAUSE_KEY == GPIO_PIN_RESET){
 80077c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80077ca:	4840      	ldr	r0, [pc, #256]	@ (80078cc <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80077cc:	f001 f8a4 	bl	8008918 <HAL_GPIO_ReadPin>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d182      	bne.n	80076da <HAL_TIM_PeriodElapsedCallback+0x3ae>
			cancel_delay_time++;
 80077d4:	4a40      	ldr	r2, [pc, #256]	@ (80078d8 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80077d6:	6813      	ldr	r3, [r2, #0]
 80077d8:	3301      	adds	r3, #1
 80077da:	6013      	str	r3, [r2, #0]
 80077dc:	e77d      	b.n	80076da <HAL_TIM_PeriodElapsedCallback+0x3ae>
		else if(EX_GAS_start != 1 && EX_GAS_KEY == GPIO_PIN_RESET){
 80077de:	4b30      	ldr	r3, [pc, #192]	@ (80078a0 <HAL_TIM_PeriodElapsedCallback+0x574>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d083      	beq.n	80076ee <HAL_TIM_PeriodElapsedCallback+0x3c2>
 80077e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80077ea:	483c      	ldr	r0, [pc, #240]	@ (80078dc <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80077ec:	f001 f894 	bl	8008918 <HAL_GPIO_ReadPin>
 80077f0:	2800      	cmp	r0, #0
 80077f2:	f47f af7c 	bne.w	80076ee <HAL_TIM_PeriodElapsedCallback+0x3c2>
			ExGas_delay_time++;
 80077f6:	4a3a      	ldr	r2, [pc, #232]	@ (80078e0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 80077f8:	6813      	ldr	r3, [r2, #0]
 80077fa:	3301      	adds	r3, #1
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	e776      	b.n	80076ee <HAL_TIM_PeriodElapsedCallback+0x3c2>
		else if(Injecting != 1 && CONFIRM_KEY == GPIO_PIN_RESET){
 8007800:	4b40      	ldr	r3, [pc, #256]	@ (8007904 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b01      	cmp	r3, #1
 8007806:	f43f af7c 	beq.w	8007702 <HAL_TIM_PeriodElapsedCallback+0x3d6>
 800780a:	2120      	movs	r1, #32
 800780c:	4833      	ldr	r0, [pc, #204]	@ (80078dc <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800780e:	f001 f883 	bl	8008918 <HAL_GPIO_ReadPin>
 8007812:	2800      	cmp	r0, #0
 8007814:	f47f af75 	bne.w	8007702 <HAL_TIM_PeriodElapsedCallback+0x3d6>
			confirm_press_time++;
 8007818:	4a32      	ldr	r2, [pc, #200]	@ (80078e4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800781a:	8813      	ldrh	r3, [r2, #0]
 800781c:	3301      	adds	r3, #1
 800781e:	8013      	strh	r3, [r2, #0]
 8007820:	e76f      	b.n	8007702 <HAL_TIM_PeriodElapsedCallback+0x3d6>
		if(key_press_long && (page_location == Main_page)){
 8007822:	2b00      	cmp	r3, #0
 8007824:	d185      	bne.n	8007732 <HAL_TIM_PeriodElapsedCallback+0x406>
		if(waiting_start){
 8007826:	4938      	ldr	r1, [pc, #224]	@ (8007908 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8007828:	780b      	ldrb	r3, [r1, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	f43f ae94 	beq.w	8007558 <HAL_TIM_PeriodElapsedCallback+0x22c>
			if((now_time > confirm_time) && (now_time - confirm_time > 5000)){
 8007830:	4a36      	ldr	r2, [pc, #216]	@ (800790c <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8007832:	6820      	ldr	r0, [r4, #0]
 8007834:	6813      	ldr	r3, [r2, #0]
 8007836:	4298      	cmp	r0, r3
 8007838:	d91f      	bls.n	800787a <HAL_TIM_PeriodElapsedCallback+0x54e>
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	6810      	ldr	r0, [r2, #0]
 800783e:	1a1b      	subs	r3, r3, r0
 8007840:	f241 3088 	movw	r0, #5000	@ 0x1388
 8007844:	4283      	cmp	r3, r0
 8007846:	d918      	bls.n	800787a <HAL_TIM_PeriodElapsedCallback+0x54e>
				waiting_start = 0;
 8007848:	2300      	movs	r3, #0
				Dosage_load = 0;
 800784a:	4a31      	ldr	r2, [pc, #196]	@ (8007910 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
				waiting_start = 0;
 800784c:	700b      	strb	r3, [r1, #0]
				Dosage_load = 0;
 800784e:	8013      	strh	r3, [r2, #0]
				waiting_start_timeout = 1;
 8007850:	2201      	movs	r2, #1
 8007852:	4b30      	ldr	r3, [pc, #192]	@ (8007914 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8007854:	701a      	strb	r2, [r3, #0]
 8007856:	e67f      	b.n	8007558 <HAL_TIM_PeriodElapsedCallback+0x22c>
				  else if(Dosage_set >= 2)
 8007858:	2b01      	cmp	r3, #1
 800785a:	d983      	bls.n	8007764 <HAL_TIM_PeriodElapsedCallback+0x438>
					  Dosage_set-=2;
 800785c:	3b02      	subs	r3, #2
 800785e:	8013      	strh	r3, [r2, #0]
 8007860:	e780      	b.n	8007764 <HAL_TIM_PeriodElapsedCallback+0x438>
				else if(key_value == INCREASE_KEY_PRESS)
 8007862:	2b03      	cmp	r3, #3
 8007864:	d181      	bne.n	800776a <HAL_TIM_PeriodElapsedCallback+0x43e>
				  if(Dosage_set < 1000)
 8007866:	4a24      	ldr	r2, [pc, #144]	@ (80078f8 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8007868:	8813      	ldrh	r3, [r2, #0]
 800786a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
					  Dosage_set+=2;
 800786e:	bf36      	itet	cc
 8007870:	3302      	addcc	r3, #2
					  Dosage_set = 1000;
 8007872:	f44f 737a 	movcs.w	r3, #1000	@ 0x3e8
					  Dosage_set+=2;
 8007876:	b29b      	uxthcc	r3, r3
 8007878:	e7f1      	b.n	800785e <HAL_TIM_PeriodElapsedCallback+0x532>
			else if((now_time <= confirm_time) && (0xffff - confirm_time + now_time> 5000)){
 800787a:	6820      	ldr	r0, [r4, #0]
 800787c:	6813      	ldr	r3, [r2, #0]
 800787e:	4298      	cmp	r0, r3
 8007880:	f63f ae6a 	bhi.w	8007558 <HAL_TIM_PeriodElapsedCallback+0x22c>
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	6812      	ldr	r2, [r2, #0]
 8007888:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800788c:	33ff      	adds	r3, #255	@ 0xff
 800788e:	1a9b      	subs	r3, r3, r2
 8007890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007894:	4293      	cmp	r3, r2
 8007896:	d8d7      	bhi.n	8007848 <HAL_TIM_PeriodElapsedCallback+0x51c>
 8007898:	e65e      	b.n	8007558 <HAL_TIM_PeriodElapsedCallback+0x22c>
 800789a:	bf00      	nop
 800789c:	20000370 	.word	0x20000370
 80078a0:	20000a48 	.word	0x20000a48
 80078a4:	200009a0 	.word	0x200009a0
 80078a8:	20000a3c 	.word	0x20000a3c
 80078ac:	20000930 	.word	0x20000930
 80078b0:	20000934 	.word	0x20000934
 80078b4:	20000920 	.word	0x20000920
 80078b8:	20000a40 	.word	0x20000a40
 80078bc:	20000919 	.word	0x20000919
 80078c0:	20000942 	.word	0x20000942
 80078c4:	20000a5e 	.word	0x20000a5e
 80078c8:	20000918 	.word	0x20000918
 80078cc:	40011000 	.word	0x40011000
 80078d0:	20000a5a 	.word	0x20000a5a
 80078d4:	20000a38 	.word	0x20000a38
 80078d8:	20000a34 	.word	0x20000a34
 80078dc:	40010c00 	.word	0x40010c00
 80078e0:	20000a30 	.word	0x20000a30
 80078e4:	20000a5c 	.word	0x20000a5c
 80078e8:	20000922 	.word	0x20000922
 80078ec:	20000924 	.word	0x20000924
 80078f0:	20000a44 	.word	0x20000a44
 80078f4:	2000091e 	.word	0x2000091e
 80078f8:	200008c6 	.word	0x200008c6
 80078fc:	20000923 	.word	0x20000923
 8007900:	20000927 	.word	0x20000927
 8007904:	20000940 	.word	0x20000940
 8007908:	2000092c 	.word	0x2000092c
 800790c:	20000a54 	.word	0x20000a54
 8007910:	200008c4 	.word	0x200008c4
 8007914:	20000a49 	.word	0x20000a49

08007918 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007918:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 800791a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart1.Instance = USART1;
 800791e:	480a      	ldr	r0, [pc, #40]	@ (8007948 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8007920:	4a0a      	ldr	r2, [pc, #40]	@ (800794c <MX_USART1_UART_Init+0x34>)
 8007922:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007926:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007928:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800792a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800792e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007932:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007934:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007936:	f001 ffcd 	bl	80098d4 <HAL_UART_Init>
 800793a:	b118      	cbz	r0, 8007944 <MX_USART1_UART_Init+0x2c>
  /* USER CODE BEGIN USART1_Init 2 */
//  // 手动添加：启用空闲中断
//  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
  /* USER CODE END USART1_Init 2 */

}
 800793c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8007940:	f7ff b96a 	b.w	8006c18 <Error_Handler>
}
 8007944:	bd08      	pop	{r3, pc}
 8007946:	bf00      	nop
 8007948:	20000b40 	.word	0x20000b40
 800794c:	40013800 	.word	0x40013800

08007950 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007950:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8007952:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart2.Instance = USART2;
 8007956:	480a      	ldr	r0, [pc, #40]	@ (8007980 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8007958:	4a0a      	ldr	r2, [pc, #40]	@ (8007984 <MX_USART2_UART_Init+0x34>)
 800795a:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800795e:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007960:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007962:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007966:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 800796a:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800796c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800796e:	f001 ffb1 	bl	80098d4 <HAL_UART_Init>
 8007972:	b118      	cbz	r0, 800797c <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007974:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8007978:	f7ff b94e 	b.w	8006c18 <Error_Handler>
}
 800797c:	bd08      	pop	{r3, pc}
 800797e:	bf00      	nop
 8007980:	20000af8 	.word	0x20000af8
 8007984:	40004400 	.word	0x40004400

08007988 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007988:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 9600;
 800798a:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
  huart3.Instance = USART3;
 800798e:	480a      	ldr	r0, [pc, #40]	@ (80079b8 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 9600;
 8007990:	4a0a      	ldr	r2, [pc, #40]	@ (80079bc <MX_USART3_UART_Init+0x34>)
 8007992:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007996:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007998:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 800799a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800799e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 80079a2:	6103      	str	r3, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80079a4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80079a6:	f001 ff95 	bl	80098d4 <HAL_UART_Init>
 80079aa:	b118      	cbz	r0, 80079b4 <MX_USART3_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80079ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80079b0:	f7ff b932 	b.w	8006c18 <Error_Handler>
}
 80079b4:	bd08      	pop	{r3, pc}
 80079b6:	bf00      	nop
 80079b8:	20000ab0 	.word	0x20000ab0
 80079bc:	40004800 	.word	0x40004800

080079c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80079c0:	b570      	push	{r4, r5, r6, lr}
 80079c2:	4606      	mov	r6, r0
 80079c4:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079c6:	2210      	movs	r2, #16
 80079c8:	2100      	movs	r1, #0
 80079ca:	a806      	add	r0, sp, #24
 80079cc:	f004 fac6 	bl	800bf5c <memset>
  if(uartHandle->Instance==USART1)
 80079d0:	6833      	ldr	r3, [r6, #0]
 80079d2:	4a52      	ldr	r2, [pc, #328]	@ (8007b1c <HAL_UART_MspInit+0x15c>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d129      	bne.n	8007a2c <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80079d8:	4b51      	ldr	r3, [pc, #324]	@ (8007b20 <HAL_UART_MspInit+0x160>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079da:	f44f 7000 	mov.w	r0, #512	@ 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 80079de:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079e0:	a906      	add	r1, sp, #24
    __HAL_RCC_USART1_CLK_ENABLE();
 80079e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079e6:	619a      	str	r2, [r3, #24]
 80079e8:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
    __HAL_RCC_USART1_CLK_ENABLE();
 80079ee:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80079f2:	9200      	str	r2, [sp, #0]
 80079f4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079f6:	699a      	ldr	r2, [r3, #24]
 80079f8:	f042 0204 	orr.w	r2, r2, #4
 80079fc:	619a      	str	r2, [r3, #24]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	f003 0304 	and.w	r3, r3, #4
 8007a04:	9301      	str	r3, [sp, #4]
 8007a06:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a08:	2302      	movs	r3, #2
 8007a0a:	e9cd 0306 	strd	r0, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007a0e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a10:	4844      	ldr	r0, [pc, #272]	@ (8007b24 <HAL_UART_MspInit+0x164>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007a12:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a14:	f000 fea8 	bl	8008768 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a18:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a1a:	4842      	ldr	r0, [pc, #264]	@ (8007b24 <HAL_UART_MspInit+0x164>)
 8007a1c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a1e:	e9cd 4306 	strd	r4, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a22:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a24:	f000 fea0 	bl	8008768 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8007a28:	b00a      	add	sp, #40	@ 0x28
 8007a2a:	bd70      	pop	{r4, r5, r6, pc}
  else if(uartHandle->Instance==USART2)
 8007a2c:	4a3e      	ldr	r2, [pc, #248]	@ (8007b28 <HAL_UART_MspInit+0x168>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d12e      	bne.n	8007a90 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007a32:	4b3b      	ldr	r3, [pc, #236]	@ (8007b20 <HAL_UART_MspInit+0x160>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a34:	2104      	movs	r1, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8007a36:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a38:	483a      	ldr	r0, [pc, #232]	@ (8007b24 <HAL_UART_MspInit+0x164>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8007a3a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007a3e:	61da      	str	r2, [r3, #28]
 8007a40:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a42:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8007a44:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8007a48:	9202      	str	r2, [sp, #8]
 8007a4a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a4c:	699a      	ldr	r2, [r3, #24]
 8007a4e:	f042 0204 	orr.w	r2, r2, #4
 8007a52:	619a      	str	r2, [r3, #24]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	f003 0304 	and.w	r3, r3, #4
 8007a5a:	9303      	str	r3, [sp, #12]
 8007a5c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a5e:	2302      	movs	r3, #2
 8007a60:	e9cd 1306 	strd	r1, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007a64:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a66:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007a68:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a6a:	f000 fe7d 	bl	8008768 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a6e:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a70:	482c      	ldr	r0, [pc, #176]	@ (8007b24 <HAL_UART_MspInit+0x164>)
 8007a72:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a74:	e9cd 3406 	strd	r3, r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a78:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a7a:	f000 fe75 	bl	8008768 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007a7e:	2026      	movs	r0, #38	@ 0x26
 8007a80:	4622      	mov	r2, r4
 8007a82:	4621      	mov	r1, r4
 8007a84:	f000 fcb6 	bl	80083f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007a88:	2026      	movs	r0, #38	@ 0x26
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007a8a:	f000 fce3 	bl	8008454 <HAL_NVIC_EnableIRQ>
}
 8007a8e:	e7cb      	b.n	8007a28 <HAL_UART_MspInit+0x68>
  else if(uartHandle->Instance==USART3)
 8007a90:	4a26      	ldr	r2, [pc, #152]	@ (8007b2c <HAL_UART_MspInit+0x16c>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d1c8      	bne.n	8007a28 <HAL_UART_MspInit+0x68>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007a96:	4b22      	ldr	r3, [pc, #136]	@ (8007b20 <HAL_UART_MspInit+0x160>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a98:	4825      	ldr	r0, [pc, #148]	@ (8007b30 <HAL_UART_MspInit+0x170>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8007a9a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a9c:	a906      	add	r1, sp, #24
    __HAL_RCC_USART3_CLK_ENABLE();
 8007a9e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007aa2:	61da      	str	r2, [r3, #28]
 8007aa4:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007aa6:	2500      	movs	r5, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8007aa8:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8007aac:	9204      	str	r2, [sp, #16]
 8007aae:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ab0:	699a      	ldr	r2, [r3, #24]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8007ab2:	4c20      	ldr	r4, [pc, #128]	@ (8007b34 <HAL_UART_MspInit+0x174>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ab4:	f042 0208 	orr.w	r2, r2, #8
 8007ab8:	619a      	str	r2, [r3, #24]
 8007aba:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007abc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ac0:	f003 0308 	and.w	r3, r3, #8
 8007ac4:	9305      	str	r3, [sp, #20]
 8007ac6:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ac8:	2302      	movs	r3, #2
 8007aca:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ad2:	f000 fe49 	bl	8008768 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ad6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ada:	4815      	ldr	r0, [pc, #84]	@ (8007b30 <HAL_UART_MspInit+0x170>)
 8007adc:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ade:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ae2:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ae4:	f000 fe40 	bl	8008768 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8007ae8:	4b13      	ldr	r3, [pc, #76]	@ (8007b38 <HAL_UART_MspInit+0x178>)
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8007aea:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007aec:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007af0:	2380      	movs	r3, #128	@ 0x80
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8007af2:	e9c4 5505 	strd	r5, r5, [r4, #20]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007af6:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007afa:	60a5      	str	r5, [r4, #8]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007afc:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8007afe:	f000 fccb 	bl	8008498 <HAL_DMA_Init>
 8007b02:	b108      	cbz	r0, 8007b08 <HAL_UART_MspInit+0x148>
      Error_Handler();
 8007b04:	f7ff f888 	bl	8006c18 <Error_Handler>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007b08:	2200      	movs	r2, #0
 8007b0a:	2027      	movs	r0, #39	@ 0x27
 8007b0c:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8007b0e:	63f4      	str	r4, [r6, #60]	@ 0x3c
 8007b10:	6266      	str	r6, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007b12:	f000 fc6f 	bl	80083f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007b16:	2027      	movs	r0, #39	@ 0x27
 8007b18:	e7b7      	b.n	8007a8a <HAL_UART_MspInit+0xca>
 8007b1a:	bf00      	nop
 8007b1c:	40013800 	.word	0x40013800
 8007b20:	40021000 	.word	0x40021000
 8007b24:	40010800 	.word	0x40010800
 8007b28:	40004400 	.word	0x40004400
 8007b2c:	40004800 	.word	0x40004800
 8007b30:	40010c00 	.word	0x40010c00
 8007b34:	20000a6c 	.word	0x20000a6c
 8007b38:	40020030 	.word	0x40020030

08007b3c <USART1_Tx_HMIdata>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void USART1_Tx_HMIdata(uint8_t *Tx_Buffer){
 8007b3c:	b510      	push	{r4, lr}
 8007b3e:	4604      	mov	r4, r0
//	Tx1_cplt_flag = 0;
	HAL_UART_Transmit(&huart1, (uint8_t*)Tx_Buffer, strlen(Tx_Buffer),HAL_MAX_DELAY);
 8007b40:	f7f8 fb10 	bl	8000164 <strlen>
 8007b44:	4621      	mov	r1, r4
//	while(!Tx1_cplt_flag);
}
 8007b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*)Tx_Buffer, strlen(Tx_Buffer),HAL_MAX_DELAY);
 8007b4a:	b282      	uxth	r2, r0
 8007b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b50:	4801      	ldr	r0, [pc, #4]	@ (8007b58 <USART1_Tx_HMIdata+0x1c>)
 8007b52:	f001 beee 	b.w	8009932 <HAL_UART_Transmit>
 8007b56:	bf00      	nop
 8007b58:	20000b40 	.word	0x20000b40

08007b5c <HAL_UART_TxCpltCallback>:
//	    HAL_UART_Receive_DMA(&huart1, rx1_buffer, RX_BUFFER_SIZE);
//	}
//}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
	if(huart == &huart2){
 8007b5c:	4b05      	ldr	r3, [pc, #20]	@ (8007b74 <HAL_UART_TxCpltCallback+0x18>)
 8007b5e:	4298      	cmp	r0, r3
 8007b60:	d103      	bne.n	8007b6a <HAL_UART_TxCpltCallback+0xe>
		Tx2_cplt_flag = 1;
 8007b62:	4b05      	ldr	r3, [pc, #20]	@ (8007b78 <HAL_UART_TxCpltCallback+0x1c>)
	}
	if(huart == &huart3){
		Tx3_cplt_flag = 1;
 8007b64:	2201      	movs	r2, #1
 8007b66:	701a      	strb	r2, [r3, #0]
	}
}
 8007b68:	4770      	bx	lr
	if(huart == &huart3){
 8007b6a:	4b04      	ldr	r3, [pc, #16]	@ (8007b7c <HAL_UART_TxCpltCallback+0x20>)
 8007b6c:	4298      	cmp	r0, r3
 8007b6e:	d1fb      	bne.n	8007b68 <HAL_UART_TxCpltCallback+0xc>
		Tx3_cplt_flag = 1;
 8007b70:	4b03      	ldr	r3, [pc, #12]	@ (8007b80 <HAL_UART_TxCpltCallback+0x24>)
 8007b72:	e7f7      	b.n	8007b64 <HAL_UART_TxCpltCallback+0x8>
 8007b74:	20000af8 	.word	0x20000af8
 8007b78:	20000b89 	.word	0x20000b89
 8007b7c:	20000ab0 	.word	0x20000ab0
 8007b80:	20000b88 	.word	0x20000b88

08007b84 <HAL_UART_RxCpltCallback>:

// UART接收完成回调
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8007b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    static uint8_t prev_char = 0;
    static int ret = 0;
    static uint8_t frame_header_valid = 0;
    GPS_Data gps_rsltBuf;

    if (huart == &huart3) {
 8007b88:	4b3d      	ldr	r3, [pc, #244]	@ (8007c80 <HAL_UART_RxCpltCallback+0xfc>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8007b8a:	b091      	sub	sp, #68	@ 0x44
    if (huart == &huart3) {
 8007b8c:	4283      	cmp	r3, r0
 8007b8e:	d14c      	bne.n	8007c2a <HAL_UART_RxCpltCallback+0xa6>
        uint8_t ch = gps_rx_buffer[gps_rx_index];
 8007b90:	4e3c      	ldr	r6, [pc, #240]	@ (8007c84 <HAL_UART_RxCpltCallback+0x100>)
 8007b92:	4f3d      	ldr	r7, [pc, #244]	@ (8007c88 <HAL_UART_RxCpltCallback+0x104>)
 8007b94:	8833      	ldrh	r3, [r6, #0]
 8007b96:	483d      	ldr	r0, [pc, #244]	@ (8007c8c <HAL_UART_RxCpltCallback+0x108>)
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	5cf9      	ldrb	r1, [r7, r3]

        if(ch == '$' || frame_header_valid){
 8007b9c:	4c3c      	ldr	r4, [pc, #240]	@ (8007c90 <HAL_UART_RxCpltCallback+0x10c>)
 8007b9e:	2924      	cmp	r1, #36	@ 0x24
 8007ba0:	4a3c      	ldr	r2, [pc, #240]	@ (8007c94 <HAL_UART_RxCpltCallback+0x110>)
 8007ba2:	d001      	beq.n	8007ba8 <HAL_UART_RxCpltCallback+0x24>
 8007ba4:	7803      	ldrb	r3, [r0, #0]
 8007ba6:	b193      	cbz	r3, 8007bce <HAL_UART_RxCpltCallback+0x4a>
						frame_header_valid = 1;
 8007ba8:	f04f 0c01 	mov.w	ip, #1
					// 检测帧尾
					if (prev_char == '\r' && ch == '\n') {
 8007bac:	7823      	ldrb	r3, [r4, #0]
						frame_header_valid = 1;
 8007bae:	f880 c000 	strb.w	ip, [r0]
					if (prev_char == '\r' && ch == '\n') {
 8007bb2:	2b0d      	cmp	r3, #13
							gps_rx_buffer[gps_rx_index-1] = '\0'; // 终止字符串
 8007bb4:	8833      	ldrh	r3, [r6, #0]
 8007bb6:	b29b      	uxth	r3, r3
					if (prev_char == '\r' && ch == '\n') {
 8007bb8:	d13a      	bne.n	8007c30 <HAL_UART_RxCpltCallback+0xac>
 8007bba:	290a      	cmp	r1, #10
 8007bbc:	d138      	bne.n	8007c30 <HAL_UART_RxCpltCallback+0xac>
							gps_rx_buffer[gps_rx_index-1] = '\0'; // 终止字符串
 8007bbe:	2500      	movs	r5, #0
 8007bc0:	443b      	add	r3, r7
							gps_data_ready = true;
 8007bc2:	f882 c000 	strb.w	ip, [r2]
							gps_rx_buffer[gps_rx_index-1] = '\0'; // 终止字符串
 8007bc6:	f803 5c01 	strb.w	r5, [r3, #-1]
							gps_rx_index = 0;
 8007bca:	8035      	strh	r5, [r6, #0]
							frame_header_valid = 0;
 8007bcc:	7005      	strb	r5, [r0, #0]
        }
        else{
        	frame_header_valid = 0;
        }
        prev_char = ch;
        if(gps_data_ready){
 8007bce:	7813      	ldrb	r3, [r2, #0]
        prev_char = ch;
 8007bd0:	7021      	strb	r1, [r4, #0]
        if(gps_data_ready){
 8007bd2:	b31b      	cbz	r3, 8007c1c <HAL_UART_RxCpltCallback+0x98>
        	gps_data_ready = 0;
 8007bd4:	2300      	movs	r3, #0
//        	printf("%s\r\n",gps_rx_buffer);
        	ret = process_gps_data(gps_rx_buffer, &gps_rsltBuf);
 8007bd6:	482c      	ldr	r0, [pc, #176]	@ (8007c88 <HAL_UART_RxCpltCallback+0x104>)
 8007bd8:	a901      	add	r1, sp, #4
        	gps_data_ready = 0;
 8007bda:	7013      	strb	r3, [r2, #0]
        	ret = process_gps_data(gps_rx_buffer, &gps_rsltBuf);
 8007bdc:	f7f9 fa1a 	bl	8001014 <process_gps_data>

        	if(ret == 0 && strcmp(gps_rsltBuf.header,"GNGGA") == 0 && GGA_data_used){
 8007be0:	b9e0      	cbnz	r0, 8007c1c <HAL_UART_RxCpltCallback+0x98>
 8007be2:	492d      	ldr	r1, [pc, #180]	@ (8007c98 <HAL_UART_RxCpltCallback+0x114>)
 8007be4:	a801      	add	r0, sp, #4
 8007be6:	f7f8 fab3 	bl	8000150 <strcmp>
 8007bea:	4680      	mov	r8, r0
 8007bec:	bb40      	cbnz	r0, 8007c40 <HAL_UART_RxCpltCallback+0xbc>
 8007bee:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8007c9c <HAL_UART_RxCpltCallback+0x118>
 8007bf2:	f899 3000 	ldrb.w	r3, [r9]
 8007bf6:	b31b      	cbz	r3, 8007c40 <HAL_UART_RxCpltCallback+0xbc>
            HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
            GPS_GGA_Data = gps_rsltBuf;
 8007bf8:	4c29      	ldr	r4, [pc, #164]	@ (8007ca0 <HAL_UART_RxCpltCallback+0x11c>)
            HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8007bfa:	2102      	movs	r1, #2
 8007bfc:	4829      	ldr	r0, [pc, #164]	@ (8007ca4 <HAL_UART_RxCpltCallback+0x120>)
            GPS_GGA_Data = gps_rsltBuf;
 8007bfe:	ad01      	add	r5, sp, #4
            HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8007c00:	f000 fe95 	bl	800892e <HAL_GPIO_TogglePin>
            GPS_GGA_Data = gps_rsltBuf;
 8007c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007c14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        		GGA_data_used = 0;
        	}else if(ret == 0 && strcmp(gps_rsltBuf.header,"GNRMC") == 0 && RMC_data_used){
            HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
            GPS_RMC_Data = gps_rsltBuf;
        		RMC_data_used = 0;
 8007c18:	f889 8000 	strb.w	r8, [r9]
        	}
        }

        HAL_UART_Receive_DMA(&huart3, &gps_rx_buffer[gps_rx_index], 1);
 8007c1c:	8831      	ldrh	r1, [r6, #0]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	b289      	uxth	r1, r1
 8007c22:	4817      	ldr	r0, [pc, #92]	@ (8007c80 <HAL_UART_RxCpltCallback+0xfc>)
 8007c24:	4439      	add	r1, r7
 8007c26:	f002 f957 	bl	8009ed8 <HAL_UART_Receive_DMA>
    }
}
 8007c2a:	b011      	add	sp, #68	@ 0x44
 8007c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
							if (gps_rx_index < GPS_RX_BUFFER_SIZE-1) {
 8007c30:	2bfe      	cmp	r3, #254	@ 0xfe
									gps_rx_index = 0;
 8007c32:	bf8f      	iteee	hi
 8007c34:	2300      	movhi	r3, #0
									gps_rx_index++;
 8007c36:	8833      	ldrhls	r3, [r6, #0]
 8007c38:	3301      	addls	r3, #1
 8007c3a:	b29b      	uxthls	r3, r3
									gps_rx_index = 0;
 8007c3c:	8033      	strh	r3, [r6, #0]
 8007c3e:	e7c6      	b.n	8007bce <HAL_UART_RxCpltCallback+0x4a>
        	}else if(ret == 0 && strcmp(gps_rsltBuf.header,"GNRMC") == 0 && RMC_data_used){
 8007c40:	4919      	ldr	r1, [pc, #100]	@ (8007ca8 <HAL_UART_RxCpltCallback+0x124>)
 8007c42:	a801      	add	r0, sp, #4
 8007c44:	f7f8 fa84 	bl	8000150 <strcmp>
 8007c48:	4680      	mov	r8, r0
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	d1e6      	bne.n	8007c1c <HAL_UART_RxCpltCallback+0x98>
 8007c4e:	f8df 905c 	ldr.w	r9, [pc, #92]	@ 8007cac <HAL_UART_RxCpltCallback+0x128>
 8007c52:	f899 3000 	ldrb.w	r3, [r9]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d0e0      	beq.n	8007c1c <HAL_UART_RxCpltCallback+0x98>
            GPS_RMC_Data = gps_rsltBuf;
 8007c5a:	4d15      	ldr	r5, [pc, #84]	@ (8007cb0 <HAL_UART_RxCpltCallback+0x12c>)
            HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8007c5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007c60:	4814      	ldr	r0, [pc, #80]	@ (8007cb4 <HAL_UART_RxCpltCallback+0x130>)
            GPS_RMC_Data = gps_rsltBuf;
 8007c62:	ac01      	add	r4, sp, #4
            HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8007c64:	f000 fe63 	bl	800892e <HAL_GPIO_TogglePin>
            GPS_RMC_Data = gps_rsltBuf;
 8007c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c74:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007c78:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007c7c:	e7cc      	b.n	8007c18 <HAL_UART_RxCpltCallback+0x94>
 8007c7e:	bf00      	nop
 8007c80:	20000ab0 	.word	0x20000ab0
 8007c84:	2000026e 	.word	0x2000026e
 8007c88:	20000270 	.word	0x20000270
 8007c8c:	20000a69 	.word	0x20000a69
 8007c90:	20000a68 	.word	0x20000a68
 8007c94:	2000026c 	.word	0x2000026c
 8007c98:	0800e879 	.word	0x0800e879
 8007c9c:	20000001 	.word	0x20000001
 8007ca0:	20000230 	.word	0x20000230
 8007ca4:	40011400 	.word	0x40011400
 8007ca8:	0800e87f 	.word	0x0800e87f
 8007cac:	20000000 	.word	0x20000000
 8007cb0:	200001f4 	.word	0x200001f4
 8007cb4:	40011000 	.word	0x40011000

08007cb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007cb8:	f7ff fa92 	bl	80071e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007cbc:	480b      	ldr	r0, [pc, #44]	@ (8007cec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8007cbe:	490c      	ldr	r1, [pc, #48]	@ (8007cf0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8007cf4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8007cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007cc4:	e002      	b.n	8007ccc <LoopCopyDataInit>

08007cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007cca:	3304      	adds	r3, #4

08007ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007cd0:	d3f9      	bcc.n	8007cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007cd2:	4a09      	ldr	r2, [pc, #36]	@ (8007cf8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8007cd4:	4c09      	ldr	r4, [pc, #36]	@ (8007cfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007cd8:	e001      	b.n	8007cde <LoopFillZerobss>

08007cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007cdc:	3204      	adds	r2, #4

08007cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007ce0:	d3fb      	bcc.n	8007cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007ce2:	f004 fa0f 	bl	800c104 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007ce6:	f7fe fe5d 	bl	80069a4 <main>
  bx lr
 8007cea:	4770      	bx	lr
  ldr r0, =_sdata
 8007cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007cf0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8007cf4:	0800f798 	.word	0x0800f798
  ldr r2, =_sbss
 8007cf8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8007cfc:	20000d0c 	.word	0x20000d0c

08007d00 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007d00:	e7fe      	b.n	8007d00 <CAN1_RX1_IRQHandler>
	...

08007d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007d04:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007d06:	4b0e      	ldr	r3, [pc, #56]	@ (8007d40 <HAL_InitTick+0x3c>)
{
 8007d08:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007d0a:	781a      	ldrb	r2, [r3, #0]
 8007d0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007d10:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d14:	4a0b      	ldr	r2, [pc, #44]	@ (8007d44 <HAL_InitTick+0x40>)
 8007d16:	6810      	ldr	r0, [r2, #0]
 8007d18:	fbb0 f0f3 	udiv	r0, r0, r3
 8007d1c:	f000 fba8 	bl	8008470 <HAL_SYSTICK_Config>
 8007d20:	4604      	mov	r4, r0
 8007d22:	b958      	cbnz	r0, 8007d3c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007d24:	2d0f      	cmp	r5, #15
 8007d26:	d809      	bhi.n	8007d3c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007d28:	4602      	mov	r2, r0
 8007d2a:	4629      	mov	r1, r5
 8007d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d30:	f000 fb60 	bl	80083f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007d34:	4620      	mov	r0, r4
 8007d36:	4b04      	ldr	r3, [pc, #16]	@ (8007d48 <HAL_InitTick+0x44>)
 8007d38:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8007d3a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007d3c:	2001      	movs	r0, #1
 8007d3e:	e7fc      	b.n	8007d3a <HAL_InitTick+0x36>
 8007d40:	20000008 	.word	0x20000008
 8007d44:	20000004 	.word	0x20000004
 8007d48:	2000000c 	.word	0x2000000c

08007d4c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007d4c:	4a07      	ldr	r2, [pc, #28]	@ (8007d6c <HAL_Init+0x20>)
{
 8007d4e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007d50:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d52:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007d54:	f043 0310 	orr.w	r3, r3, #16
 8007d58:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d5a:	f000 fb39 	bl	80083d0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8007d5e:	2005      	movs	r0, #5
 8007d60:	f7ff ffd0 	bl	8007d04 <HAL_InitTick>
  HAL_MspInit();
 8007d64:	f7ff f98a 	bl	800707c <HAL_MspInit>
}
 8007d68:	2000      	movs	r0, #0
 8007d6a:	bd08      	pop	{r3, pc}
 8007d6c:	40022000 	.word	0x40022000

08007d70 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007d70:	4a03      	ldr	r2, [pc, #12]	@ (8007d80 <HAL_IncTick+0x10>)
 8007d72:	4b04      	ldr	r3, [pc, #16]	@ (8007d84 <HAL_IncTick+0x14>)
 8007d74:	6811      	ldr	r1, [r2, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	440b      	add	r3, r1
 8007d7a:	6013      	str	r3, [r2, #0]
}
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	20000bbc 	.word	0x20000bbc
 8007d84:	20000008 	.word	0x20000008

08007d88 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007d88:	4b01      	ldr	r3, [pc, #4]	@ (8007d90 <HAL_GetTick+0x8>)
 8007d8a:	6818      	ldr	r0, [r3, #0]
}
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	20000bbc 	.word	0x20000bbc

08007d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007d98:	f7ff fff6 	bl	8007d88 <HAL_GetTick>
 8007d9c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d9e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8007da0:	bf1e      	ittt	ne
 8007da2:	4b04      	ldrne	r3, [pc, #16]	@ (8007db4 <HAL_Delay+0x20>)
 8007da4:	781b      	ldrbne	r3, [r3, #0]
 8007da6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007da8:	f7ff ffee 	bl	8007d88 <HAL_GetTick>
 8007dac:	1b43      	subs	r3, r0, r5
 8007dae:	42a3      	cmp	r3, r4
 8007db0:	d3fa      	bcc.n	8007da8 <HAL_Delay+0x14>
  {
  }
}
 8007db2:	bd38      	pop	{r3, r4, r5, pc}
 8007db4:	20000008 	.word	0x20000008

08007db8 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007db8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8007dba:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007dbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007dbe:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8007dc2:	d11b      	bne.n	8007dfc <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007dc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007dc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dca:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	6892      	ldr	r2, [r2, #8]
 8007dd0:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8007dd4:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8007dd8:	d10c      	bne.n	8007df4 <ADC_DMAConvCplt+0x3c>
 8007dda:	7b1a      	ldrb	r2, [r3, #12]
 8007ddc:	b952      	cbnz	r2, 8007df4 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007dde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007de0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007de4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007de6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007de8:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007dea:	bf5e      	ittt	pl
 8007dec:	6a9a      	ldrpl	r2, [r3, #40]	@ 0x28
 8007dee:	f042 0201 	orrpl.w	r2, r2, #1
 8007df2:	629a      	strpl	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fa fd4b 	bl	8002890 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8007dfa:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
}
 8007dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8007e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e04:	4718      	bx	r3

08007e06 <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
 8007e06:	4770      	bx	lr

08007e08 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007e08:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007e0a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8007e0c:	f7ff fffb 	bl	8007e06 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007e10:	bd08      	pop	{r3, pc}

08007e12 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 8007e12:	4770      	bx	lr

08007e14 <HAL_ADC_IRQHandler>:
  uint32_t tmp_sr = hadc->Instance->SR;
 8007e14:	6803      	ldr	r3, [r0, #0]
{
 8007e16:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 8007e18:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8007e1a:	685e      	ldr	r6, [r3, #4]
{
 8007e1c:	4604      	mov	r4, r0
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8007e1e:	06b0      	lsls	r0, r6, #26
 8007e20:	d526      	bpl.n	8007e70 <HAL_ADC_IRQHandler+0x5c>
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8007e22:	07a9      	lsls	r1, r5, #30
 8007e24:	d524      	bpl.n	8007e70 <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007e26:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007e28:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8007e2a:	bf5e      	ittt	pl
 8007e2c:	6aa2      	ldrpl	r2, [r4, #40]	@ 0x28
 8007e2e:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 8007e32:	62a2      	strpl	r2, [r4, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007e34:	689a      	ldr	r2, [r3, #8]
 8007e36:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8007e3a:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8007e3e:	d110      	bne.n	8007e62 <HAL_ADC_IRQHandler+0x4e>
 8007e40:	7b22      	ldrb	r2, [r4, #12]
 8007e42:	b972      	cbnz	r2, 8007e62 <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007e44:	685a      	ldr	r2, [r3, #4]
 8007e46:	f022 0220 	bic.w	r2, r2, #32
 8007e4a:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007e4c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007e4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e52:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007e54:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007e56:	04d8      	lsls	r0, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007e58:	bf5e      	ittt	pl
 8007e5a:	6aa3      	ldrpl	r3, [r4, #40]	@ 0x28
 8007e5c:	f043 0301 	orrpl.w	r3, r3, #1
 8007e60:	62a3      	strpl	r3, [r4, #40]	@ 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8007e62:	4620      	mov	r0, r4
 8007e64:	f7fa fd14 	bl	8002890 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007e68:	f06f 0212 	mvn.w	r2, #18
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8007e70:	0631      	lsls	r1, r6, #24
 8007e72:	d530      	bpl.n	8007ed6 <HAL_ADC_IRQHandler+0xc2>
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8007e74:	076a      	lsls	r2, r5, #29
 8007e76:	d52e      	bpl.n	8007ed6 <HAL_ADC_IRQHandler+0xc2>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007e78:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007e7a:	06db      	lsls	r3, r3, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007e7c:	bf5e      	ittt	pl
 8007e7e:	6aa3      	ldrpl	r3, [r4, #40]	@ 0x28
 8007e80:	f443 5300 	orrpl.w	r3, r3, #8192	@ 0x2000
 8007e84:	62a3      	strpl	r3, [r4, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	689a      	ldr	r2, [r3, #8]
 8007e8a:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
 8007e8e:	f5b2 4fe0 	cmp.w	r2, #28672	@ 0x7000
 8007e92:	d00a      	beq.n	8007eaa <HAL_ADC_IRQHandler+0x96>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8007e94:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8007e96:	0550      	lsls	r0, r2, #21
 8007e98:	d416      	bmi.n	8007ec8 <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8007e9a:	689a      	ldr	r2, [r3, #8]
 8007e9c:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8007ea0:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8007ea4:	d110      	bne.n	8007ec8 <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8007ea6:	7b22      	ldrb	r2, [r4, #12]
 8007ea8:	b972      	cbnz	r2, 8007ec8 <HAL_ADC_IRQHandler+0xb4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007eb0:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8007eb2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007eb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007eb8:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007eba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007ebc:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007ebe:	bf5e      	ittt	pl
 8007ec0:	6aa3      	ldrpl	r3, [r4, #40]	@ 0x28
 8007ec2:	f043 0301 	orrpl.w	r3, r3, #1
 8007ec6:	62a3      	strpl	r3, [r4, #40]	@ 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f000 fa7f 	bl	80083cc <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8007ece:	f06f 020c 	mvn.w	r2, #12
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8007ed6:	0672      	lsls	r2, r6, #25
 8007ed8:	d50c      	bpl.n	8007ef4 <HAL_ADC_IRQHandler+0xe0>
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8007eda:	07eb      	lsls	r3, r5, #31
 8007edc:	d50a      	bpl.n	8007ef4 <HAL_ADC_IRQHandler+0xe0>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007ede:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007ee0:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007ee2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ee6:	62a3      	str	r3, [r4, #40]	@ 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007ee8:	f7ff ff93 	bl	8007e12 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8007eec:	f06f 0201 	mvn.w	r2, #1
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	601a      	str	r2, [r3, #0]
}
 8007ef4:	bd70      	pop	{r4, r5, r6, pc}

08007ef6 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8007ef6:	4770      	bx	lr

08007ef8 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007ef8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 8007efa:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007efc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f02:	6283      	str	r3, [r0, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007f04:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8007f06:	f043 0304 	orr.w	r3, r3, #4
 8007f0a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007f0c:	f7ff fff3 	bl	8007ef6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007f10:	bd08      	pop	{r3, pc}
	...

08007f14 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8007f14:	2300      	movs	r3, #0
{ 
 8007f16:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8007f18:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8007f1a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{ 
 8007f1e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d06c      	beq.n	8007ffe <HAL_ADC_ConfigChannel+0xea>
 8007f24:	2301      	movs	r3, #1
 8007f26:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 8007f2a:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007f2c:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8007f2e:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007f30:	6808      	ldr	r0, [r1, #0]
 8007f32:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8007f36:	d822      	bhi.n	8007f7e <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007f38:	261f      	movs	r6, #31
 8007f3a:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8007f3c:	3b05      	subs	r3, #5
 8007f3e:	409e      	lsls	r6, r3
 8007f40:	ea25 0506 	bic.w	r5, r5, r6
 8007f44:	fa00 f303 	lsl.w	r3, r0, r3
 8007f48:	432b      	orrs	r3, r5
 8007f4a:	6353      	str	r3, [r2, #52]	@ 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007f4c:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007f4e:	688b      	ldr	r3, [r1, #8]
 8007f50:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8007f54:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007f58:	d929      	bls.n	8007fae <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007f5a:	68d6      	ldr	r6, [r2, #12]
 8007f5c:	3d1e      	subs	r5, #30
 8007f5e:	40a9      	lsls	r1, r5
 8007f60:	ea26 0101 	bic.w	r1, r6, r1
 8007f64:	40ab      	lsls	r3, r5
 8007f66:	430b      	orrs	r3, r1
 8007f68:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007f6a:	f1a0 0310 	sub.w	r3, r0, #16
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d925      	bls.n	8007fbe <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f72:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8007f74:	2300      	movs	r3, #0
 8007f76:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8007f7a:	b002      	add	sp, #8
 8007f7c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8007f7e:	2d0c      	cmp	r5, #12
 8007f80:	f04f 051f 	mov.w	r5, #31
 8007f84:	d809      	bhi.n	8007f9a <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8007f86:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 8007f88:	3b23      	subs	r3, #35	@ 0x23
 8007f8a:	409d      	lsls	r5, r3
 8007f8c:	ea26 0505 	bic.w	r5, r6, r5
 8007f90:	fa00 f303 	lsl.w	r3, r0, r3
 8007f94:	432b      	orrs	r3, r5
 8007f96:	6313      	str	r3, [r2, #48]	@ 0x30
 8007f98:	e7d8      	b.n	8007f4c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8007f9a:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
 8007f9c:	3b41      	subs	r3, #65	@ 0x41
 8007f9e:	409d      	lsls	r5, r3
 8007fa0:	ea26 0505 	bic.w	r5, r6, r5
 8007fa4:	fa00 f303 	lsl.w	r3, r0, r3
 8007fa8:	432b      	orrs	r3, r5
 8007faa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007fac:	e7ce      	b.n	8007f4c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007fae:	6910      	ldr	r0, [r2, #16]
 8007fb0:	40a9      	lsls	r1, r5
 8007fb2:	ea20 0101 	bic.w	r1, r0, r1
 8007fb6:	40ab      	lsls	r3, r5
 8007fb8:	430b      	orrs	r3, r1
 8007fba:	6113      	str	r3, [r2, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007fbc:	e7d9      	b.n	8007f72 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8007fbe:	4b11      	ldr	r3, [pc, #68]	@ (8008004 <HAL_ADC_ConfigChannel+0xf0>)
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d116      	bne.n	8007ff2 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007fc4:	6893      	ldr	r3, [r2, #8]
 8007fc6:	021b      	lsls	r3, r3, #8
 8007fc8:	d4d3      	bmi.n	8007f72 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007fca:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007fcc:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007fce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007fd2:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007fd4:	d1cd      	bne.n	8007f72 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8008008 <HAL_ADC_ConfigChannel+0xf4>)
 8007fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800800c <HAL_ADC_ConfigChannel+0xf8>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fe0:	220a      	movs	r2, #10
 8007fe2:	4353      	muls	r3, r2
            wait_loop_index--;
 8007fe4:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8007fe6:	9b01      	ldr	r3, [sp, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d0c2      	beq.n	8007f72 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8007fec:	9b01      	ldr	r3, [sp, #4]
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	e7f8      	b.n	8007fe4 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ff2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8007ff4:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ff6:	f043 0320 	orr.w	r3, r3, #32
 8007ffa:	62a3      	str	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8007ffc:	e7ba      	b.n	8007f74 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8007ffe:	2002      	movs	r0, #2
 8008000:	e7bb      	b.n	8007f7a <HAL_ADC_ConfigChannel+0x66>
 8008002:	bf00      	nop
 8008004:	40012400 	.word	0x40012400
 8008008:	20000004 	.word	0x20000004
 800800c:	000f4240 	.word	0x000f4240

08008010 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8008010:	2300      	movs	r3, #0
{
 8008012:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8008014:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008016:	6803      	ldr	r3, [r0, #0]
{
 8008018:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800801a:	689a      	ldr	r2, [r3, #8]
 800801c:	07d2      	lsls	r2, r2, #31
 800801e:	d502      	bpl.n	8008026 <ADC_Enable+0x16>
  return HAL_OK;
 8008020:	2000      	movs	r0, #0
}
 8008022:	b003      	add	sp, #12
 8008024:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	f042 0201 	orr.w	r2, r2, #1
 800802c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800802e:	4b14      	ldr	r3, [pc, #80]	@ (8008080 <ADC_Enable+0x70>)
 8008030:	4a14      	ldr	r2, [pc, #80]	@ (8008084 <ADC_Enable+0x74>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8008038:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800803a:	9b01      	ldr	r3, [sp, #4]
 800803c:	b9e3      	cbnz	r3, 8008078 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 800803e:	f7ff fea3 	bl	8007d88 <HAL_GetTick>
 8008042:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	07db      	lsls	r3, r3, #31
 800804a:	d4e9      	bmi.n	8008020 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800804c:	f7ff fe9c 	bl	8007d88 <HAL_GetTick>
 8008050:	1b40      	subs	r0, r0, r5
 8008052:	2802      	cmp	r0, #2
 8008054:	d9f6      	bls.n	8008044 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f013 0301 	ands.w	r3, r3, #1
 800805e:	d1f1      	bne.n	8008044 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008060:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          return HAL_ERROR;
 8008062:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008064:	f042 0210 	orr.w	r2, r2, #16
 8008068:	62a2      	str	r2, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800806a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 800806c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008070:	f042 0201 	orr.w	r2, r2, #1
 8008074:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8008076:	e7d4      	b.n	8008022 <ADC_Enable+0x12>
      wait_loop_index--;
 8008078:	9b01      	ldr	r3, [sp, #4]
 800807a:	3b01      	subs	r3, #1
 800807c:	e7dc      	b.n	8008038 <ADC_Enable+0x28>
 800807e:	bf00      	nop
 8008080:	20000004 	.word	0x20000004
 8008084:	000f4240 	.word	0x000f4240

08008088 <HAL_ADC_Start_DMA>:
{
 8008088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800808c:	4b40      	ldr	r3, [pc, #256]	@ (8008190 <HAL_ADC_Start_DMA+0x108>)
{
 800808e:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8008090:	6802      	ldr	r2, [r0, #0]
{
 8008092:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8008094:	429a      	cmp	r2, r3
{
 8008096:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8008098:	d002      	beq.n	80080a0 <HAL_ADC_Start_DMA+0x18>
 800809a:	493e      	ldr	r1, [pc, #248]	@ (8008194 <HAL_ADC_Start_DMA+0x10c>)
 800809c:	428a      	cmp	r2, r1
 800809e:	d103      	bne.n	80080a8 <HAL_ADC_Start_DMA+0x20>
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 80080a6:	d16e      	bne.n	8008186 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80080a8:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d06c      	beq.n	800818a <HAL_ADC_Start_DMA+0x102>
 80080b0:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80080b2:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80080b4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80080b8:	f7ff ffaa 	bl	8008010 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80080bc:	4606      	mov	r6, r0
 80080be:	2800      	cmp	r0, #0
 80080c0:	d15d      	bne.n	800817e <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 80080c2:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80080c4:	6821      	ldr	r1, [r4, #0]
 80080c6:	4b33      	ldr	r3, [pc, #204]	@ (8008194 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 80080c8:	f425 6570 	bic.w	r5, r5, #3840	@ 0xf00
 80080cc:	f025 0501 	bic.w	r5, r5, #1
 80080d0:	f445 7580 	orr.w	r5, r5, #256	@ 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80080d4:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 80080d6:	62a5      	str	r5, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80080d8:	d104      	bne.n	80080e4 <HAL_ADC_Start_DMA+0x5c>
 80080da:	4a2d      	ldr	r2, [pc, #180]	@ (8008190 <HAL_ADC_Start_DMA+0x108>)
 80080dc:	6853      	ldr	r3, [r2, #4]
 80080de:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 80080e2:	d13e      	bne.n	8008162 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80080e4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80080e6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80080ea:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80080ec:	684b      	ldr	r3, [r1, #4]
 80080ee:	055a      	lsls	r2, r3, #21
 80080f0:	d505      	bpl.n	80080fe <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80080f2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80080f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80080f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80080fc:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80080fe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008100:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008102:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008106:	bf18      	it	ne
 8008108:	6ae3      	ldrne	r3, [r4, #44]	@ 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800810a:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800810c:	bf18      	it	ne
 800810e:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8008112:	62e3      	str	r3, [r4, #44]	@ 0x2c
      __HAL_UNLOCK(hadc);
 8008114:	2300      	movs	r3, #0
 8008116:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800811a:	4b1f      	ldr	r3, [pc, #124]	@ (8008198 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800811c:	314c      	adds	r1, #76	@ 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800811e:	6283      	str	r3, [r0, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008120:	4b1e      	ldr	r3, [pc, #120]	@ (800819c <HAL_ADC_Start_DMA+0x114>)
 8008122:	62c3      	str	r3, [r0, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008124:	4b1e      	ldr	r3, [pc, #120]	@ (80081a0 <HAL_ADC_Start_DMA+0x118>)
 8008126:	6303      	str	r3, [r0, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8008128:	f06f 0302 	mvn.w	r3, #2
 800812c:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8008130:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8008134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008138:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800813c:	4643      	mov	r3, r8
 800813e:	f000 f9dd 	bl	80084fc <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	689a      	ldr	r2, [r3, #8]
 8008146:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 800814a:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800814e:	689a      	ldr	r2, [r3, #8]
 8008150:	bf0c      	ite	eq
 8008152:	f442 02a0 	orreq.w	r2, r2, #5242880	@ 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8008156:	f442 1280 	orrne.w	r2, r2, #1048576	@ 0x100000
 800815a:	609a      	str	r2, [r3, #8]
}
 800815c:	4630      	mov	r0, r6
 800815e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008162:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008164:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008168:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800816a:	6853      	ldr	r3, [r2, #4]
 800816c:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800816e:	bf41      	itttt	mi
 8008170:	6aa0      	ldrmi	r0, [r4, #40]	@ 0x28
 8008172:	f420 5040 	bicmi.w	r0, r0, #12288	@ 0x3000
 8008176:	f440 5080 	orrmi.w	r0, r0, #4096	@ 0x1000
 800817a:	62a0      	strmi	r0, [r4, #40]	@ 0x28
 800817c:	e7bf      	b.n	80080fe <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 800817e:	2300      	movs	r3, #0
 8008180:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8008184:	e7ea      	b.n	800815c <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8008186:	2601      	movs	r6, #1
 8008188:	e7e8      	b.n	800815c <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 800818a:	2602      	movs	r6, #2
 800818c:	e7e6      	b.n	800815c <HAL_ADC_Start_DMA+0xd4>
 800818e:	bf00      	nop
 8008190:	40012400 	.word	0x40012400
 8008194:	40012800 	.word	0x40012800
 8008198:	08007db9 	.word	0x08007db9
 800819c:	08007e09 	.word	0x08007e09
 80081a0:	08007ef9 	.word	0x08007ef9

080081a4 <ADC_ConversionStop_Disable>:
{
 80081a4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80081a6:	6803      	ldr	r3, [r0, #0]
{
 80081a8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80081aa:	689a      	ldr	r2, [r3, #8]
 80081ac:	07d1      	lsls	r1, r2, #31
 80081ae:	d401      	bmi.n	80081b4 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80081b0:	2000      	movs	r0, #0
}
 80081b2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80081b4:	689a      	ldr	r2, [r3, #8]
 80081b6:	f022 0201 	bic.w	r2, r2, #1
 80081ba:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80081bc:	f7ff fde4 	bl	8007d88 <HAL_GetTick>
 80081c0:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	07db      	lsls	r3, r3, #31
 80081c8:	d5f2      	bpl.n	80081b0 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80081ca:	f7ff fddd 	bl	8007d88 <HAL_GetTick>
 80081ce:	1b40      	subs	r0, r0, r5
 80081d0:	2802      	cmp	r0, #2
 80081d2:	d9f6      	bls.n	80081c2 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80081d4:	6823      	ldr	r3, [r4, #0]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	07da      	lsls	r2, r3, #31
 80081da:	d5f2      	bpl.n	80081c2 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80081dc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          return HAL_ERROR;
 80081de:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80081e0:	f043 0310 	orr.w	r3, r3, #16
 80081e4:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80081e6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80081e8:	f043 0301 	orr.w	r3, r3, #1
 80081ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 80081ee:	e7e0      	b.n	80081b2 <ADC_ConversionStop_Disable+0xe>

080081f0 <HAL_ADC_Init>:
{
 80081f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 80081f2:	4604      	mov	r4, r0
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d06d      	beq.n	80082d4 <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80081f8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80081fa:	b923      	cbnz	r3, 8008206 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80081fc:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80081fe:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8008202:	f7fa fae1 	bl	80027c8 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8008206:	4620      	mov	r0, r4
 8008208:	f7ff ffcc 	bl	80081a4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800820c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800820e:	f013 0310 	ands.w	r3, r3, #16
 8008212:	d161      	bne.n	80082d8 <HAL_ADC_Init+0xe8>
 8008214:	2800      	cmp	r0, #0
 8008216:	d15f      	bne.n	80082d8 <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 8008218:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800821a:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800821c:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8008220:	f022 0202 	bic.w	r2, r2, #2
 8008224:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8008228:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800822a:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800822c:	62a2      	str	r2, [r4, #40]	@ 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800822e:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8008230:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8008232:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8008236:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800823a:	d036      	beq.n	80082aa <HAL_ADC_Init+0xba>
 800823c:	1e77      	subs	r7, r6, #1
 800823e:	427d      	negs	r5, r7
 8008240:	417d      	adcs	r5, r7
 8008242:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008244:	7d27      	ldrb	r7, [r4, #20]
 8008246:	2f01      	cmp	r7, #1
 8008248:	d106      	bne.n	8008258 <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800824a:	bb82      	cbnz	r2, 80082ae <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800824c:	69a2      	ldr	r2, [r4, #24]
 800824e:	3a01      	subs	r2, #1
 8008250:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 8008254:	f442 6500 	orr.w	r5, r2, #2048	@ 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8008258:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800825a:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800825e:	6857      	ldr	r7, [r2, #4]
 8008260:	f427 4769 	bic.w	r7, r7, #59648	@ 0xe900
 8008264:	ea45 0507 	orr.w	r5, r5, r7
 8008268:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800826a:	6897      	ldr	r7, [r2, #8]
 800826c:	4d1d      	ldr	r5, [pc, #116]	@ (80082e4 <HAL_ADC_Init+0xf4>)
 800826e:	ea05 0507 	and.w	r5, r5, r7
 8008272:	ea45 0501 	orr.w	r5, r5, r1
 8008276:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8008278:	d001      	beq.n	800827e <HAL_ADC_Init+0x8e>
 800827a:	2e01      	cmp	r6, #1
 800827c:	d102      	bne.n	8008284 <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800827e:	6923      	ldr	r3, [r4, #16]
 8008280:	3b01      	subs	r3, #1
 8008282:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8008284:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 8008286:	f425 0570 	bic.w	r5, r5, #15728640	@ 0xf00000
 800828a:	432b      	orrs	r3, r5
 800828c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800828e:	6892      	ldr	r2, [r2, #8]
 8008290:	4b15      	ldr	r3, [pc, #84]	@ (80082e8 <HAL_ADC_Init+0xf8>)
 8008292:	4013      	ands	r3, r2
 8008294:	4299      	cmp	r1, r3
 8008296:	d113      	bne.n	80082c0 <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 8008298:	2300      	movs	r3, #0
 800829a:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800829c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800829e:	f023 0303 	bic.w	r3, r3, #3
 80082a2:	f043 0301 	orr.w	r3, r3, #1
 80082a6:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 80082a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80082aa:	4635      	mov	r5, r6
 80082ac:	e7ca      	b.n	8008244 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80082ae:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80082b0:	f042 0220 	orr.w	r2, r2, #32
 80082b4:	62a2      	str	r2, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082b6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80082b8:	f042 0201 	orr.w	r2, r2, #1
 80082bc:	62e2      	str	r2, [r4, #44]	@ 0x2c
 80082be:	e7cb      	b.n	8008258 <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 80082c0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80082c2:	f023 0312 	bic.w	r3, r3, #18
 80082c6:	f043 0310 	orr.w	r3, r3, #16
 80082ca:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082cc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80082ce:	f043 0301 	orr.w	r3, r3, #1
 80082d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
    return HAL_ERROR;
 80082d4:	2001      	movs	r0, #1
 80082d6:	e7e7      	b.n	80082a8 <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082d8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80082da:	f043 0310 	orr.w	r3, r3, #16
 80082de:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 80082e0:	e7f8      	b.n	80082d4 <HAL_ADC_Init+0xe4>
 80082e2:	bf00      	nop
 80082e4:	ffe1f7fd 	.word	0xffe1f7fd
 80082e8:	ff1f0efe 	.word	0xff1f0efe

080082ec <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80082ec:	2300      	movs	r3, #0
{
 80082ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80082f0:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80082f2:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 80082f6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d062      	beq.n	80083c2 <HAL_ADCEx_Calibration_Start+0xd6>
 80082fc:	2301      	movs	r3, #1
 80082fe:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8008302:	f7ff ff4f 	bl	80081a4 <ADC_ConversionStop_Disable>
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8008306:	4620      	mov	r0, r4
 8008308:	f7ff fe82 	bl	8008010 <ADC_Enable>

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800830c:	4605      	mov	r5, r0
 800830e:	2800      	cmp	r0, #0
 8008310:	d12f      	bne.n	8008372 <HAL_ADCEx_Calibration_Start+0x86>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8008312:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8008314:	2002      	movs	r0, #2
     ADC_STATE_CLR_SET(hadc->State,
 8008316:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800831a:	f023 0302 	bic.w	r3, r3, #2
 800831e:	f043 0302 	orr.w	r3, r3, #2
 8008322:	62a3      	str	r3, [r4, #40]	@ 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8008324:	4b28      	ldr	r3, [pc, #160]	@ (80083c8 <HAL_ADCEx_Calibration_Start+0xdc>)
 8008326:	681e      	ldr	r6, [r3, #0]
 8008328:	f000 fe0e 	bl	8008f48 <HAL_RCCEx_GetPeriphCLKFreq>
 800832c:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8008330:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 8008332:	9601      	str	r6, [sp, #4]

    while(wait_loop_index != 0U)
 8008334:	9b01      	ldr	r3, [sp, #4]
 8008336:	bb03      	cbnz	r3, 800837a <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8008338:	6822      	ldr	r2, [r4, #0]
 800833a:	6893      	ldr	r3, [r2, #8]
 800833c:	f043 0308 	orr.w	r3, r3, #8
 8008340:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 8008342:	f7ff fd21 	bl	8007d88 <HAL_GetTick>
 8008346:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	689a      	ldr	r2, [r3, #8]
 800834c:	0711      	lsls	r1, r2, #28
 800834e:	d418      	bmi.n	8008382 <HAL_ADCEx_Calibration_Start+0x96>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8008350:	689a      	ldr	r2, [r3, #8]
 8008352:	f042 0204 	orr.w	r2, r2, #4
 8008356:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8008358:	f7ff fd16 	bl	8007d88 <HAL_GetTick>
 800835c:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	075b      	lsls	r3, r3, #29
 8008364:	d423      	bmi.n	80083ae <HAL_ADCEx_Calibration_Start+0xc2>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008366:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008368:	f023 0303 	bic.w	r3, r3, #3
 800836c:	f043 0301 	orr.w	r3, r3, #1
 8008370:	62a3      	str	r3, [r4, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008372:	2300      	movs	r3, #0
 8008374:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8008378:	e016      	b.n	80083a8 <HAL_ADCEx_Calibration_Start+0xbc>
      wait_loop_index--;
 800837a:	9b01      	ldr	r3, [sp, #4]
 800837c:	3b01      	subs	r3, #1
 800837e:	9301      	str	r3, [sp, #4]
 8008380:	e7d8      	b.n	8008334 <HAL_ADCEx_Calibration_Start+0x48>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8008382:	f7ff fd01 	bl	8007d88 <HAL_GetTick>
 8008386:	1b80      	subs	r0, r0, r6
 8008388:	280a      	cmp	r0, #10
 800838a:	d9dd      	bls.n	8008348 <HAL_ADCEx_Calibration_Start+0x5c>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800838c:	6823      	ldr	r3, [r4, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	0718      	lsls	r0, r3, #28
 8008392:	d5d9      	bpl.n	8008348 <HAL_ADCEx_Calibration_Start+0x5c>
          ADC_STATE_CLR_SET(hadc->State,
 8008394:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          return HAL_ERROR;
 8008396:	2501      	movs	r5, #1
          ADC_STATE_CLR_SET(hadc->State,
 8008398:	f023 0312 	bic.w	r3, r3, #18
 800839c:	f043 0310 	orr.w	r3, r3, #16
 80083a0:	62a3      	str	r3, [r4, #40]	@ 0x28
          __HAL_UNLOCK(hadc);
 80083a2:	2300      	movs	r3, #0
 80083a4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 80083a8:	4628      	mov	r0, r5
 80083aa:	b002      	add	sp, #8
 80083ac:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80083ae:	f7ff fceb 	bl	8007d88 <HAL_GetTick>
 80083b2:	1b80      	subs	r0, r0, r6
 80083b4:	280a      	cmp	r0, #10
 80083b6:	d9d2      	bls.n	800835e <HAL_ADCEx_Calibration_Start+0x72>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80083b8:	6823      	ldr	r3, [r4, #0]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	075a      	lsls	r2, r3, #29
 80083be:	d5ce      	bpl.n	800835e <HAL_ADCEx_Calibration_Start+0x72>
 80083c0:	e7e8      	b.n	8008394 <HAL_ADCEx_Calibration_Start+0xa8>
  __HAL_LOCK(hadc);
 80083c2:	2502      	movs	r5, #2
 80083c4:	e7f0      	b.n	80083a8 <HAL_ADCEx_Calibration_Start+0xbc>
 80083c6:	bf00      	nop
 80083c8:	20000004 	.word	0x20000004

080083cc <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80083cc:	4770      	bx	lr
	...

080083d0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80083d0:	4907      	ldr	r1, [pc, #28]	@ (80083f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80083d2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80083d4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80083d6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80083da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80083de:	0412      	lsls	r2, r2, #16
 80083e0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80083e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80083e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80083e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80083ec:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80083ee:	4770      	bx	lr
 80083f0:	e000ed00 	.word	0xe000ed00

080083f4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80083f4:	4b15      	ldr	r3, [pc, #84]	@ (800844c <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80083f6:	b530      	push	{r4, r5, lr}
 80083f8:	68dc      	ldr	r4, [r3, #12]
 80083fa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80083fe:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008402:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008404:	2b04      	cmp	r3, #4
 8008406:	bf28      	it	cs
 8008408:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800840a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800840c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008410:	bf94      	ite	ls
 8008412:	2400      	movls	r4, #0
 8008414:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008416:	fa05 f303 	lsl.w	r3, r5, r3
 800841a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800841e:	40a5      	lsls	r5, r4
 8008420:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008424:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8008426:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008428:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800842c:	bfac      	ite	ge
 800842e:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008432:	4a07      	ldrlt	r2, [pc, #28]	@ (8008450 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008434:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008438:	b2db      	uxtb	r3, r3
 800843a:	bfab      	itete	ge
 800843c:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008440:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008444:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008448:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800844a:	bd30      	pop	{r4, r5, pc}
 800844c:	e000ed00 	.word	0xe000ed00
 8008450:	e000ed14 	.word	0xe000ed14

08008454 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008454:	2800      	cmp	r0, #0
 8008456:	db07      	blt.n	8008468 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008458:	2301      	movs	r3, #1
 800845a:	0941      	lsrs	r1, r0, #5
 800845c:	4a03      	ldr	r2, [pc, #12]	@ (800846c <HAL_NVIC_EnableIRQ+0x18>)
 800845e:	f000 001f 	and.w	r0, r0, #31
 8008462:	4083      	lsls	r3, r0
 8008464:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	e000e100 	.word	0xe000e100

08008470 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008470:	3801      	subs	r0, #1
 8008472:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8008476:	d20b      	bcs.n	8008490 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008478:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800847c:	21f0      	movs	r1, #240	@ 0xf0
 800847e:	4a05      	ldr	r2, [pc, #20]	@ (8008494 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008480:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008482:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008486:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008488:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800848a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800848c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800848e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8008490:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008492:	4770      	bx	lr
 8008494:	e000ed00 	.word	0xe000ed00

08008498 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008498:	4603      	mov	r3, r0
{
 800849a:	b510      	push	{r4, lr}
  if(hdma == NULL)
 800849c:	b340      	cbz	r0, 80084f0 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800849e:	2114      	movs	r1, #20
 80084a0:	6800      	ldr	r0, [r0, #0]
 80084a2:	4a14      	ldr	r2, [pc, #80]	@ (80084f4 <HAL_DMA_Init+0x5c>)
 80084a4:	4402      	add	r2, r0
 80084a6:	fbb2 f2f1 	udiv	r2, r2, r1
 80084aa:	0092      	lsls	r2, r2, #2
 80084ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80084ae:	4a12      	ldr	r2, [pc, #72]	@ (80084f8 <HAL_DMA_Init+0x60>)
 80084b0:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80084b2:	2202      	movs	r2, #2
 80084b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80084b8:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 80084bc:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084be:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 80084c0:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084c2:	4322      	orrs	r2, r4
 80084c4:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80084c6:	f421 517f 	bic.w	r1, r1, #16320	@ 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084ca:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084cc:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80084ce:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084d2:	4322      	orrs	r2, r4
 80084d4:	699c      	ldr	r4, [r3, #24]
 80084d6:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80084d8:	69dc      	ldr	r4, [r3, #28]
 80084da:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 80084dc:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80084de:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80084e0:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80084e2:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80084e4:	6398      	str	r0, [r3, #56]	@ 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80084e6:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 80084ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
}
 80084ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80084f0:	2001      	movs	r0, #1
 80084f2:	e7fc      	b.n	80084ee <HAL_DMA_Init+0x56>
 80084f4:	bffdfff8 	.word	0xbffdfff8
 80084f8:	40020000 	.word	0x40020000

080084fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80084fc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80084fe:	f890 4020 	ldrb.w	r4, [r0, #32]
 8008502:	2c01      	cmp	r4, #1
 8008504:	d034      	beq.n	8008570 <HAL_DMA_Start_IT+0x74>
 8008506:	2401      	movs	r4, #1
 8008508:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800850c:	f890 4021 	ldrb.w	r4, [r0, #33]	@ 0x21
 8008510:	2c01      	cmp	r4, #1
 8008512:	b2e5      	uxtb	r5, r4
 8008514:	f04f 0400 	mov.w	r4, #0
 8008518:	d128      	bne.n	800856c <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800851a:	2602      	movs	r6, #2
 800851c:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008520:	6384      	str	r4, [r0, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008522:	6804      	ldr	r4, [r0, #0]
 8008524:	6826      	ldr	r6, [r4, #0]
 8008526:	f026 0601 	bic.w	r6, r6, #1
 800852a:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800852c:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 8008530:	40bd      	lsls	r5, r7
 8008532:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008534:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008536:	6843      	ldr	r3, [r0, #4]
 8008538:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 800853a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800853c:	bf0b      	itete	eq
 800853e:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8008540:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8008542:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8008544:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8008546:	b14b      	cbz	r3, 800855c <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008548:	6823      	ldr	r3, [r4, #0]
 800854a:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 800854e:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008550:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	f043 0301 	orr.w	r3, r3, #1
 8008558:	6023      	str	r3, [r4, #0]
}
 800855a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800855c:	6823      	ldr	r3, [r4, #0]
 800855e:	f023 0304 	bic.w	r3, r3, #4
 8008562:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	f043 030a 	orr.w	r3, r3, #10
 800856a:	e7f0      	b.n	800854e <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 800856c:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 8008570:	2002      	movs	r0, #2
 8008572:	e7f2      	b.n	800855a <HAL_DMA_Start_IT+0x5e>

08008574 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008574:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{
 8008578:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800857a:	2a02      	cmp	r2, #2
 800857c:	d006      	beq.n	800858c <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800857e:	2204      	movs	r2, #4
 8008580:	6382      	str	r2, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8008582:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2020 	strb.w	r2, [r3, #32]
}
 800858a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800858c:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800858e:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008590:	6811      	ldr	r1, [r2, #0]
 8008592:	f021 010e 	bic.w	r1, r1, #14
 8008596:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8008598:	6811      	ldr	r1, [r2, #0]
 800859a:	f021 0101 	bic.w	r1, r1, #1
 800859e:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80085a0:	2101      	movs	r1, #1
 80085a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80085a4:	fa01 f202 	lsl.w	r2, r1, r2
 80085a8:	6042      	str	r2, [r0, #4]
  return status; 
 80085aa:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80085ac:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  return status; 
 80085b0:	e7e8      	b.n	8008584 <HAL_DMA_Abort+0x10>
	...

080085b4 <HAL_DMA_Abort_IT>:
{  
 80085b4:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80085b6:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d003      	beq.n	80085c6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80085be:	2304      	movs	r3, #4
 80085c0:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 80085c2:	2001      	movs	r0, #1
}
 80085c4:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80085c6:	6803      	ldr	r3, [r0, #0]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	f022 020e 	bic.w	r2, r2, #14
 80085ce:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	f022 0201 	bic.w	r2, r2, #1
 80085d6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80085d8:	4a17      	ldr	r2, [pc, #92]	@ (8008638 <HAL_DMA_Abort_IT+0x84>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d01f      	beq.n	800861e <HAL_DMA_Abort_IT+0x6a>
 80085de:	3214      	adds	r2, #20
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d01e      	beq.n	8008622 <HAL_DMA_Abort_IT+0x6e>
 80085e4:	3214      	adds	r2, #20
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d01d      	beq.n	8008626 <HAL_DMA_Abort_IT+0x72>
 80085ea:	3214      	adds	r2, #20
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d01d      	beq.n	800862c <HAL_DMA_Abort_IT+0x78>
 80085f0:	3214      	adds	r2, #20
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d01d      	beq.n	8008632 <HAL_DMA_Abort_IT+0x7e>
 80085f6:	3214      	adds	r2, #20
 80085f8:	4293      	cmp	r3, r2
 80085fa:	bf14      	ite	ne
 80085fc:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8008600:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 8008604:	4a0d      	ldr	r2, [pc, #52]	@ (800863c <HAL_DMA_Abort_IT+0x88>)
 8008606:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008608:	2301      	movs	r3, #1
 800860a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 800860e:	2300      	movs	r3, #0
 8008610:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8008614:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008616:	b103      	cbz	r3, 800861a <HAL_DMA_Abort_IT+0x66>
      hdma->XferAbortCallback(hdma);
 8008618:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800861a:	2000      	movs	r0, #0
 800861c:	e7d2      	b.n	80085c4 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800861e:	2301      	movs	r3, #1
 8008620:	e7f0      	b.n	8008604 <HAL_DMA_Abort_IT+0x50>
 8008622:	2310      	movs	r3, #16
 8008624:	e7ee      	b.n	8008604 <HAL_DMA_Abort_IT+0x50>
 8008626:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800862a:	e7eb      	b.n	8008604 <HAL_DMA_Abort_IT+0x50>
 800862c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008630:	e7e8      	b.n	8008604 <HAL_DMA_Abort_IT+0x50>
 8008632:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008636:	e7e5      	b.n	8008604 <HAL_DMA_Abort_IT+0x50>
 8008638:	40020008 	.word	0x40020008
 800863c:	40020000 	.word	0x40020000

08008640 <HAL_DMA_IRQHandler>:
{
 8008640:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008642:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008644:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008646:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008648:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800864a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800864c:	4095      	lsls	r5, r2
 800864e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8008650:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008652:	d032      	beq.n	80086ba <HAL_DMA_IRQHandler+0x7a>
 8008654:	074d      	lsls	r5, r1, #29
 8008656:	d530      	bpl.n	80086ba <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800865c:	bf5e      	ittt	pl
 800865e:	681a      	ldrpl	r2, [r3, #0]
 8008660:	f022 0204 	bicpl.w	r2, r2, #4
 8008664:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008666:	4a3e      	ldr	r2, [pc, #248]	@ (8008760 <HAL_DMA_IRQHandler+0x120>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d019      	beq.n	80086a0 <HAL_DMA_IRQHandler+0x60>
 800866c:	3214      	adds	r2, #20
 800866e:	4293      	cmp	r3, r2
 8008670:	d018      	beq.n	80086a4 <HAL_DMA_IRQHandler+0x64>
 8008672:	3214      	adds	r2, #20
 8008674:	4293      	cmp	r3, r2
 8008676:	d017      	beq.n	80086a8 <HAL_DMA_IRQHandler+0x68>
 8008678:	3214      	adds	r2, #20
 800867a:	4293      	cmp	r3, r2
 800867c:	d017      	beq.n	80086ae <HAL_DMA_IRQHandler+0x6e>
 800867e:	3214      	adds	r2, #20
 8008680:	4293      	cmp	r3, r2
 8008682:	d017      	beq.n	80086b4 <HAL_DMA_IRQHandler+0x74>
 8008684:	3214      	adds	r2, #20
 8008686:	4293      	cmp	r3, r2
 8008688:	bf14      	ite	ne
 800868a:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 800868e:	f44f 0380 	moveq.w	r3, #4194304	@ 0x400000
 8008692:	4a34      	ldr	r2, [pc, #208]	@ (8008764 <HAL_DMA_IRQHandler+0x124>)
 8008694:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8008696:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 8008698:	2b00      	cmp	r3, #0
 800869a:	d05e      	beq.n	800875a <HAL_DMA_IRQHandler+0x11a>
}
 800869c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800869e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80086a0:	2304      	movs	r3, #4
 80086a2:	e7f6      	b.n	8008692 <HAL_DMA_IRQHandler+0x52>
 80086a4:	2340      	movs	r3, #64	@ 0x40
 80086a6:	e7f4      	b.n	8008692 <HAL_DMA_IRQHandler+0x52>
 80086a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80086ac:	e7f1      	b.n	8008692 <HAL_DMA_IRQHandler+0x52>
 80086ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80086b2:	e7ee      	b.n	8008692 <HAL_DMA_IRQHandler+0x52>
 80086b4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80086b8:	e7eb      	b.n	8008692 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80086ba:	2502      	movs	r5, #2
 80086bc:	4095      	lsls	r5, r2
 80086be:	4225      	tst	r5, r4
 80086c0:	d035      	beq.n	800872e <HAL_DMA_IRQHandler+0xee>
 80086c2:	078d      	lsls	r5, r1, #30
 80086c4:	d533      	bpl.n	800872e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	0694      	lsls	r4, r2, #26
 80086ca:	d406      	bmi.n	80086da <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	f022 020a 	bic.w	r2, r2, #10
 80086d2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80086d4:	2201      	movs	r2, #1
 80086d6:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80086da:	4a21      	ldr	r2, [pc, #132]	@ (8008760 <HAL_DMA_IRQHandler+0x120>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d019      	beq.n	8008714 <HAL_DMA_IRQHandler+0xd4>
 80086e0:	3214      	adds	r2, #20
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d018      	beq.n	8008718 <HAL_DMA_IRQHandler+0xd8>
 80086e6:	3214      	adds	r2, #20
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d017      	beq.n	800871c <HAL_DMA_IRQHandler+0xdc>
 80086ec:	3214      	adds	r2, #20
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d017      	beq.n	8008722 <HAL_DMA_IRQHandler+0xe2>
 80086f2:	3214      	adds	r2, #20
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d017      	beq.n	8008728 <HAL_DMA_IRQHandler+0xe8>
 80086f8:	3214      	adds	r2, #20
 80086fa:	4293      	cmp	r3, r2
 80086fc:	bf14      	ite	ne
 80086fe:	f04f 7300 	movne.w	r3, #33554432	@ 0x2000000
 8008702:	f44f 1300 	moveq.w	r3, #2097152	@ 0x200000
 8008706:	4a17      	ldr	r2, [pc, #92]	@ (8008764 <HAL_DMA_IRQHandler+0x124>)
 8008708:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800870a:	2300      	movs	r3, #0
 800870c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8008710:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008712:	e7c1      	b.n	8008698 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008714:	2302      	movs	r3, #2
 8008716:	e7f6      	b.n	8008706 <HAL_DMA_IRQHandler+0xc6>
 8008718:	2320      	movs	r3, #32
 800871a:	e7f4      	b.n	8008706 <HAL_DMA_IRQHandler+0xc6>
 800871c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008720:	e7f1      	b.n	8008706 <HAL_DMA_IRQHandler+0xc6>
 8008722:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008726:	e7ee      	b.n	8008706 <HAL_DMA_IRQHandler+0xc6>
 8008728:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800872c:	e7eb      	b.n	8008706 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800872e:	2508      	movs	r5, #8
 8008730:	4095      	lsls	r5, r2
 8008732:	4225      	tst	r5, r4
 8008734:	d011      	beq.n	800875a <HAL_DMA_IRQHandler+0x11a>
 8008736:	0709      	lsls	r1, r1, #28
 8008738:	d50f      	bpl.n	800875a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800873a:	6819      	ldr	r1, [r3, #0]
 800873c:	f021 010e 	bic.w	r1, r1, #14
 8008740:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008742:	2301      	movs	r3, #1
 8008744:	fa03 f202 	lsl.w	r2, r3, r2
 8008748:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800874a:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800874c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8008750:	2300      	movs	r3, #0
 8008752:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8008756:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8008758:	e79e      	b.n	8008698 <HAL_DMA_IRQHandler+0x58>
}
 800875a:	bc70      	pop	{r4, r5, r6}
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	40020008 	.word	0x40020008
 8008764:	40020000 	.word	0x40020000

08008768 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800876c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800876e:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008770:	f8df c188 	ldr.w	ip, [pc, #392]	@ 80088fc <HAL_GPIO_Init+0x194>
 8008774:	4b62      	ldr	r3, [pc, #392]	@ (8008900 <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 8008776:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8008904 <HAL_GPIO_Init+0x19c>
 800877a:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8008908 <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800877e:	680a      	ldr	r2, [r1, #0]
 8008780:	fa32 f506 	lsrs.w	r5, r2, r6
 8008784:	d102      	bne.n	800878c <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8008786:	b003      	add	sp, #12
 8008788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800878c:	2701      	movs	r7, #1
 800878e:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008790:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8008794:	ea37 0202 	bics.w	r2, r7, r2
 8008798:	d17a      	bne.n	8008890 <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 800879a:	684a      	ldr	r2, [r1, #4]
 800879c:	2a03      	cmp	r2, #3
 800879e:	d807      	bhi.n	80087b0 <HAL_GPIO_Init+0x48>
 80087a0:	3a01      	subs	r2, #1
 80087a2:	2a02      	cmp	r2, #2
 80087a4:	f200 8083 	bhi.w	80088ae <HAL_GPIO_Init+0x146>
 80087a8:	e8df f002 	tbb	[pc, r2]
 80087ac:	9792      	.short	0x9792
 80087ae:	9d          	.byte	0x9d
 80087af:	00          	.byte	0x00
 80087b0:	2a12      	cmp	r2, #18
 80087b2:	f000 8095 	beq.w	80088e0 <HAL_GPIO_Init+0x178>
 80087b6:	d86d      	bhi.n	8008894 <HAL_GPIO_Init+0x12c>
 80087b8:	2a11      	cmp	r2, #17
 80087ba:	f000 808b 	beq.w	80088d4 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80087be:	2dff      	cmp	r5, #255	@ 0xff
 80087c0:	bf98      	it	ls
 80087c2:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80087c4:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80087c8:	bf88      	it	hi
 80087ca:	f100 0904 	addhi.w	r9, r0, #4
 80087ce:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80087d2:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80087d6:	bf88      	it	hi
 80087d8:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80087da:	fa0b fa02 	lsl.w	sl, fp, r2
 80087de:	ea27 070a 	bic.w	r7, r7, sl
 80087e2:	fa04 f202 	lsl.w	r2, r4, r2
 80087e6:	4317      	orrs	r7, r2
 80087e8:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80087ec:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80087f0:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 80087f4:	d04c      	beq.n	8008890 <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80087f6:	f8dc 2018 	ldr.w	r2, [ip, #24]
 80087fa:	f026 0703 	bic.w	r7, r6, #3
 80087fe:	f042 0201 	orr.w	r2, r2, #1
 8008802:	f8cc 2018 	str.w	r2, [ip, #24]
 8008806:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800880a:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 800880e:	f002 0201 	and.w	r2, r2, #1
 8008812:	9201      	str	r2, [sp, #4]
 8008814:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008818:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800881c:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800881e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8008822:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008824:	fa0b fb0a 	lsl.w	fp, fp, sl
 8008828:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800882c:	4a37      	ldr	r2, [pc, #220]	@ (800890c <HAL_GPIO_Init+0x1a4>)
 800882e:	4290      	cmp	r0, r2
 8008830:	d05d      	beq.n	80088ee <HAL_GPIO_Init+0x186>
 8008832:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008836:	4290      	cmp	r0, r2
 8008838:	d05b      	beq.n	80088f2 <HAL_GPIO_Init+0x18a>
 800883a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800883e:	4290      	cmp	r0, r2
 8008840:	d059      	beq.n	80088f6 <HAL_GPIO_Init+0x18e>
 8008842:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008846:	4290      	cmp	r0, r2
 8008848:	bf14      	ite	ne
 800884a:	2204      	movne	r2, #4
 800884c:	2203      	moveq	r2, #3
 800884e:	fa02 f20a 	lsl.w	r2, r2, sl
 8008852:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8008856:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8008858:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800885a:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800885e:	bf14      	ite	ne
 8008860:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008862:	43aa      	biceq	r2, r5
 8008864:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8008866:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008868:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800886c:	bf14      	ite	ne
 800886e:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008870:	43aa      	biceq	r2, r5
 8008872:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8008874:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008876:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800887a:	bf14      	ite	ne
 800887c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800887e:	43aa      	biceq	r2, r5
 8008880:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8008882:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008884:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8008888:	bf14      	ite	ne
 800888a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800888c:	43aa      	biceq	r2, r5
 800888e:	601a      	str	r2, [r3, #0]
	position++;
 8008890:	3601      	adds	r6, #1
 8008892:	e774      	b.n	800877e <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8008894:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8008910 <HAL_GPIO_Init+0x1a8>
 8008898:	454a      	cmp	r2, r9
 800889a:	d008      	beq.n	80088ae <HAL_GPIO_Init+0x146>
 800889c:	d810      	bhi.n	80088c0 <HAL_GPIO_Init+0x158>
 800889e:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 80088a2:	454a      	cmp	r2, r9
 80088a4:	d003      	beq.n	80088ae <HAL_GPIO_Init+0x146>
 80088a6:	4572      	cmp	r2, lr
 80088a8:	d001      	beq.n	80088ae <HAL_GPIO_Init+0x146>
 80088aa:	4542      	cmp	r2, r8
 80088ac:	d187      	bne.n	80087be <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80088ae:	688a      	ldr	r2, [r1, #8]
 80088b0:	b1da      	cbz	r2, 80088ea <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80088b2:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80088b4:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 80088b8:	bf0c      	ite	eq
 80088ba:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 80088bc:	6147      	strne	r7, [r0, #20]
 80088be:	e77e      	b.n	80087be <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 80088c0:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8008914 <HAL_GPIO_Init+0x1ac>
 80088c4:	454a      	cmp	r2, r9
 80088c6:	d0f2      	beq.n	80088ae <HAL_GPIO_Init+0x146>
 80088c8:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 80088cc:	454a      	cmp	r2, r9
 80088ce:	e7ed      	b.n	80088ac <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80088d0:	68cc      	ldr	r4, [r1, #12]
          break;
 80088d2:	e774      	b.n	80087be <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80088d4:	68cc      	ldr	r4, [r1, #12]
 80088d6:	3404      	adds	r4, #4
          break;
 80088d8:	e771      	b.n	80087be <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80088da:	68cc      	ldr	r4, [r1, #12]
 80088dc:	3408      	adds	r4, #8
          break;
 80088de:	e76e      	b.n	80087be <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80088e0:	68cc      	ldr	r4, [r1, #12]
 80088e2:	340c      	adds	r4, #12
          break;
 80088e4:	e76b      	b.n	80087be <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 80088e6:	2400      	movs	r4, #0
 80088e8:	e769      	b.n	80087be <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80088ea:	2404      	movs	r4, #4
 80088ec:	e767      	b.n	80087be <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80088ee:	2200      	movs	r2, #0
 80088f0:	e7ad      	b.n	800884e <HAL_GPIO_Init+0xe6>
 80088f2:	2201      	movs	r2, #1
 80088f4:	e7ab      	b.n	800884e <HAL_GPIO_Init+0xe6>
 80088f6:	2202      	movs	r2, #2
 80088f8:	e7a9      	b.n	800884e <HAL_GPIO_Init+0xe6>
 80088fa:	bf00      	nop
 80088fc:	40021000 	.word	0x40021000
 8008900:	40010400 	.word	0x40010400
 8008904:	10210000 	.word	0x10210000
 8008908:	10110000 	.word	0x10110000
 800890c:	40010800 	.word	0x40010800
 8008910:	10220000 	.word	0x10220000
 8008914:	10310000 	.word	0x10310000

08008918 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008918:	6883      	ldr	r3, [r0, #8]
 800891a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800891c:	bf14      	ite	ne
 800891e:	2001      	movne	r0, #1
 8008920:	2000      	moveq	r0, #0
 8008922:	4770      	bx	lr

08008924 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008924:	b10a      	cbz	r2, 800892a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008926:	6101      	str	r1, [r0, #16]
  }
}
 8008928:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800892a:	0409      	lsls	r1, r1, #16
 800892c:	e7fb      	b.n	8008926 <HAL_GPIO_WritePin+0x2>

0800892e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800892e:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008930:	ea01 0203 	and.w	r2, r1, r3
 8008934:	ea21 0103 	bic.w	r1, r1, r3
 8008938:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800893c:	6101      	str	r1, [r0, #16]
}
 800893e:	4770      	bx	lr

08008940 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008940:	4a04      	ldr	r2, [pc, #16]	@ (8008954 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8008942:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008944:	6951      	ldr	r1, [r2, #20]
 8008946:	4201      	tst	r1, r0
 8008948:	d002      	beq.n	8008950 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800894a:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800894c:	f7fd ff5e 	bl	800680c <HAL_GPIO_EXTI_Callback>
  }
}
 8008950:	bd08      	pop	{r3, pc}
 8008952:	bf00      	nop
 8008954:	40010400 	.word	0x40010400

08008958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008958:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800895c:	4605      	mov	r5, r0
 800895e:	b338      	cbz	r0, 80089b0 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008960:	6803      	ldr	r3, [r0, #0]
 8008962:	07db      	lsls	r3, r3, #31
 8008964:	d410      	bmi.n	8008988 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008966:	682b      	ldr	r3, [r5, #0]
 8008968:	079f      	lsls	r7, r3, #30
 800896a:	d45e      	bmi.n	8008a2a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800896c:	682b      	ldr	r3, [r5, #0]
 800896e:	0719      	lsls	r1, r3, #28
 8008970:	f100 8095 	bmi.w	8008a9e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	075a      	lsls	r2, r3, #29
 8008978:	f100 80c1 	bmi.w	8008afe <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800897c:	69eb      	ldr	r3, [r5, #28]
 800897e:	2b00      	cmp	r3, #0
 8008980:	f040 812c 	bne.w	8008bdc <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8008984:	2000      	movs	r0, #0
 8008986:	e029      	b.n	80089dc <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008988:	4c90      	ldr	r4, [pc, #576]	@ (8008bcc <HAL_RCC_OscConfig+0x274>)
 800898a:	6863      	ldr	r3, [r4, #4]
 800898c:	f003 030c 	and.w	r3, r3, #12
 8008990:	2b04      	cmp	r3, #4
 8008992:	d007      	beq.n	80089a4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008994:	6863      	ldr	r3, [r4, #4]
 8008996:	f003 030c 	and.w	r3, r3, #12
 800899a:	2b08      	cmp	r3, #8
 800899c:	d10a      	bne.n	80089b4 <HAL_RCC_OscConfig+0x5c>
 800899e:	6863      	ldr	r3, [r4, #4]
 80089a0:	03de      	lsls	r6, r3, #15
 80089a2:	d507      	bpl.n	80089b4 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089a4:	6823      	ldr	r3, [r4, #0]
 80089a6:	039c      	lsls	r4, r3, #14
 80089a8:	d5dd      	bpl.n	8008966 <HAL_RCC_OscConfig+0xe>
 80089aa:	686b      	ldr	r3, [r5, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1da      	bne.n	8008966 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80089b0:	2001      	movs	r0, #1
 80089b2:	e013      	b.n	80089dc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089b4:	686b      	ldr	r3, [r5, #4]
 80089b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089ba:	d112      	bne.n	80089e2 <HAL_RCC_OscConfig+0x8a>
 80089bc:	6823      	ldr	r3, [r4, #0]
 80089be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089c2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80089c4:	f7ff f9e0 	bl	8007d88 <HAL_GetTick>
 80089c8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	0398      	lsls	r0, r3, #14
 80089ce:	d4ca      	bmi.n	8008966 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089d0:	f7ff f9da 	bl	8007d88 <HAL_GetTick>
 80089d4:	1b80      	subs	r0, r0, r6
 80089d6:	2864      	cmp	r0, #100	@ 0x64
 80089d8:	d9f7      	bls.n	80089ca <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80089da:	2003      	movs	r0, #3
}
 80089dc:	b002      	add	sp, #8
 80089de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089e2:	b99b      	cbnz	r3, 8008a0c <HAL_RCC_OscConfig+0xb4>
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089ea:	6023      	str	r3, [r4, #0]
 80089ec:	6823      	ldr	r3, [r4, #0]
 80089ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089f2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80089f4:	f7ff f9c8 	bl	8007d88 <HAL_GetTick>
 80089f8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	0399      	lsls	r1, r3, #14
 80089fe:	d5b2      	bpl.n	8008966 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a00:	f7ff f9c2 	bl	8007d88 <HAL_GetTick>
 8008a04:	1b80      	subs	r0, r0, r6
 8008a06:	2864      	cmp	r0, #100	@ 0x64
 8008a08:	d9f7      	bls.n	80089fa <HAL_RCC_OscConfig+0xa2>
 8008a0a:	e7e6      	b.n	80089da <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	d103      	bne.n	8008a1c <HAL_RCC_OscConfig+0xc4>
 8008a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	e7cf      	b.n	80089bc <HAL_RCC_OscConfig+0x64>
 8008a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a28:	e7cb      	b.n	80089c2 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008a2a:	4c68      	ldr	r4, [pc, #416]	@ (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008a2c:	6863      	ldr	r3, [r4, #4]
 8008a2e:	f013 0f0c 	tst.w	r3, #12
 8008a32:	d007      	beq.n	8008a44 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008a34:	6863      	ldr	r3, [r4, #4]
 8008a36:	f003 030c 	and.w	r3, r3, #12
 8008a3a:	2b08      	cmp	r3, #8
 8008a3c:	d110      	bne.n	8008a60 <HAL_RCC_OscConfig+0x108>
 8008a3e:	6863      	ldr	r3, [r4, #4]
 8008a40:	03da      	lsls	r2, r3, #15
 8008a42:	d40d      	bmi.n	8008a60 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a44:	6823      	ldr	r3, [r4, #0]
 8008a46:	079b      	lsls	r3, r3, #30
 8008a48:	d502      	bpl.n	8008a50 <HAL_RCC_OscConfig+0xf8>
 8008a4a:	692b      	ldr	r3, [r5, #16]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d1af      	bne.n	80089b0 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	696a      	ldr	r2, [r5, #20]
 8008a54:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008a58:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	e785      	b.n	800896c <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a60:	692a      	ldr	r2, [r5, #16]
 8008a62:	4b5b      	ldr	r3, [pc, #364]	@ (8008bd0 <HAL_RCC_OscConfig+0x278>)
 8008a64:	b16a      	cbz	r2, 8008a82 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8008a66:	2201      	movs	r2, #1
 8008a68:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008a6a:	f7ff f98d 	bl	8007d88 <HAL_GetTick>
 8008a6e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	079f      	lsls	r7, r3, #30
 8008a74:	d4ec      	bmi.n	8008a50 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a76:	f7ff f987 	bl	8007d88 <HAL_GetTick>
 8008a7a:	1b80      	subs	r0, r0, r6
 8008a7c:	2802      	cmp	r0, #2
 8008a7e:	d9f7      	bls.n	8008a70 <HAL_RCC_OscConfig+0x118>
 8008a80:	e7ab      	b.n	80089da <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8008a82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008a84:	f7ff f980 	bl	8007d88 <HAL_GetTick>
 8008a88:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	0798      	lsls	r0, r3, #30
 8008a8e:	f57f af6d 	bpl.w	800896c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a92:	f7ff f979 	bl	8007d88 <HAL_GetTick>
 8008a96:	1b80      	subs	r0, r0, r6
 8008a98:	2802      	cmp	r0, #2
 8008a9a:	d9f6      	bls.n	8008a8a <HAL_RCC_OscConfig+0x132>
 8008a9c:	e79d      	b.n	80089da <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a9e:	69aa      	ldr	r2, [r5, #24]
 8008aa0:	4e4a      	ldr	r6, [pc, #296]	@ (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008aa2:	4b4b      	ldr	r3, [pc, #300]	@ (8008bd0 <HAL_RCC_OscConfig+0x278>)
 8008aa4:	b1e2      	cbz	r2, 8008ae0 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8008aac:	f7ff f96c 	bl	8007d88 <HAL_GetTick>
 8008ab0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ab2:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8008ab4:	079b      	lsls	r3, r3, #30
 8008ab6:	d50d      	bpl.n	8008ad4 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008ab8:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008abc:	4b45      	ldr	r3, [pc, #276]	@ (8008bd4 <HAL_RCC_OscConfig+0x27c>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ac4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8008ac6:	bf00      	nop
  }
  while (Delay --);
 8008ac8:	9b01      	ldr	r3, [sp, #4]
 8008aca:	1e5a      	subs	r2, r3, #1
 8008acc:	9201      	str	r2, [sp, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1f9      	bne.n	8008ac6 <HAL_RCC_OscConfig+0x16e>
 8008ad2:	e74f      	b.n	8008974 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ad4:	f7ff f958 	bl	8007d88 <HAL_GetTick>
 8008ad8:	1b00      	subs	r0, r0, r4
 8008ada:	2802      	cmp	r0, #2
 8008adc:	d9e9      	bls.n	8008ab2 <HAL_RCC_OscConfig+0x15a>
 8008ade:	e77c      	b.n	80089da <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8008ae0:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8008ae4:	f7ff f950 	bl	8007d88 <HAL_GetTick>
 8008ae8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008aea:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8008aec:	079f      	lsls	r7, r3, #30
 8008aee:	f57f af41 	bpl.w	8008974 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008af2:	f7ff f949 	bl	8007d88 <HAL_GetTick>
 8008af6:	1b00      	subs	r0, r0, r4
 8008af8:	2802      	cmp	r0, #2
 8008afa:	d9f6      	bls.n	8008aea <HAL_RCC_OscConfig+0x192>
 8008afc:	e76d      	b.n	80089da <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008afe:	4c33      	ldr	r4, [pc, #204]	@ (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008b00:	69e3      	ldr	r3, [r4, #28]
 8008b02:	00d8      	lsls	r0, r3, #3
 8008b04:	d424      	bmi.n	8008b50 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8008b06:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b08:	69e3      	ldr	r3, [r4, #28]
 8008b0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b0e:	61e3      	str	r3, [r4, #28]
 8008b10:	69e3      	ldr	r3, [r4, #28]
 8008b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b1a:	4e2f      	ldr	r6, [pc, #188]	@ (8008bd8 <HAL_RCC_OscConfig+0x280>)
 8008b1c:	6833      	ldr	r3, [r6, #0]
 8008b1e:	05d9      	lsls	r1, r3, #23
 8008b20:	d518      	bpl.n	8008b54 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b22:	68eb      	ldr	r3, [r5, #12]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d126      	bne.n	8008b76 <HAL_RCC_OscConfig+0x21e>
 8008b28:	6a23      	ldr	r3, [r4, #32]
 8008b2a:	f043 0301 	orr.w	r3, r3, #1
 8008b2e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8008b30:	f7ff f92a 	bl	8007d88 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b34:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8008b38:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b3a:	6a23      	ldr	r3, [r4, #32]
 8008b3c:	079b      	lsls	r3, r3, #30
 8008b3e:	d53f      	bpl.n	8008bc0 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8008b40:	2f00      	cmp	r7, #0
 8008b42:	f43f af1b 	beq.w	800897c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b46:	69e3      	ldr	r3, [r4, #28]
 8008b48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b4c:	61e3      	str	r3, [r4, #28]
 8008b4e:	e715      	b.n	800897c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8008b50:	2700      	movs	r7, #0
 8008b52:	e7e2      	b.n	8008b1a <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b54:	6833      	ldr	r3, [r6, #0]
 8008b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b5a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8008b5c:	f7ff f914 	bl	8007d88 <HAL_GetTick>
 8008b60:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b62:	6833      	ldr	r3, [r6, #0]
 8008b64:	05da      	lsls	r2, r3, #23
 8008b66:	d4dc      	bmi.n	8008b22 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b68:	f7ff f90e 	bl	8007d88 <HAL_GetTick>
 8008b6c:	eba0 0008 	sub.w	r0, r0, r8
 8008b70:	2864      	cmp	r0, #100	@ 0x64
 8008b72:	d9f6      	bls.n	8008b62 <HAL_RCC_OscConfig+0x20a>
 8008b74:	e731      	b.n	80089da <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b76:	b9ab      	cbnz	r3, 8008ba4 <HAL_RCC_OscConfig+0x24c>
 8008b78:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b7a:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b7e:	f023 0301 	bic.w	r3, r3, #1
 8008b82:	6223      	str	r3, [r4, #32]
 8008b84:	6a23      	ldr	r3, [r4, #32]
 8008b86:	f023 0304 	bic.w	r3, r3, #4
 8008b8a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8008b8c:	f7ff f8fc 	bl	8007d88 <HAL_GetTick>
 8008b90:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b92:	6a23      	ldr	r3, [r4, #32]
 8008b94:	0798      	lsls	r0, r3, #30
 8008b96:	d5d3      	bpl.n	8008b40 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b98:	f7ff f8f6 	bl	8007d88 <HAL_GetTick>
 8008b9c:	1b80      	subs	r0, r0, r6
 8008b9e:	4540      	cmp	r0, r8
 8008ba0:	d9f7      	bls.n	8008b92 <HAL_RCC_OscConfig+0x23a>
 8008ba2:	e71a      	b.n	80089da <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ba4:	2b05      	cmp	r3, #5
 8008ba6:	6a23      	ldr	r3, [r4, #32]
 8008ba8:	d103      	bne.n	8008bb2 <HAL_RCC_OscConfig+0x25a>
 8008baa:	f043 0304 	orr.w	r3, r3, #4
 8008bae:	6223      	str	r3, [r4, #32]
 8008bb0:	e7ba      	b.n	8008b28 <HAL_RCC_OscConfig+0x1d0>
 8008bb2:	f023 0301 	bic.w	r3, r3, #1
 8008bb6:	6223      	str	r3, [r4, #32]
 8008bb8:	6a23      	ldr	r3, [r4, #32]
 8008bba:	f023 0304 	bic.w	r3, r3, #4
 8008bbe:	e7b6      	b.n	8008b2e <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bc0:	f7ff f8e2 	bl	8007d88 <HAL_GetTick>
 8008bc4:	1b80      	subs	r0, r0, r6
 8008bc6:	4540      	cmp	r0, r8
 8008bc8:	d9b7      	bls.n	8008b3a <HAL_RCC_OscConfig+0x1e2>
 8008bca:	e706      	b.n	80089da <HAL_RCC_OscConfig+0x82>
 8008bcc:	40021000 	.word	0x40021000
 8008bd0:	42420000 	.word	0x42420000
 8008bd4:	20000004 	.word	0x20000004
 8008bd8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008bdc:	4c2a      	ldr	r4, [pc, #168]	@ (8008c88 <HAL_RCC_OscConfig+0x330>)
 8008bde:	6862      	ldr	r2, [r4, #4]
 8008be0:	f002 020c 	and.w	r2, r2, #12
 8008be4:	2a08      	cmp	r2, #8
 8008be6:	d03e      	beq.n	8008c66 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008be8:	2200      	movs	r2, #0
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	4b27      	ldr	r3, [pc, #156]	@ (8008c8c <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8008bee:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008bf0:	d12c      	bne.n	8008c4c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8008bf2:	f7ff f8c9 	bl	8007d88 <HAL_GetTick>
 8008bf6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	0199      	lsls	r1, r3, #6
 8008bfc:	d420      	bmi.n	8008c40 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008bfe:	6a2b      	ldr	r3, [r5, #32]
 8008c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c04:	d105      	bne.n	8008c12 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008c06:	6862      	ldr	r2, [r4, #4]
 8008c08:	68a9      	ldr	r1, [r5, #8]
 8008c0a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008c0e:	430a      	orrs	r2, r1
 8008c10:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c12:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8008c14:	6862      	ldr	r2, [r4, #4]
 8008c16:	430b      	orrs	r3, r1
 8008c18:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8008c1c:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8008c1e:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c20:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8008c22:	4b1a      	ldr	r3, [pc, #104]	@ (8008c8c <HAL_RCC_OscConfig+0x334>)
 8008c24:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8008c26:	f7ff f8af 	bl	8007d88 <HAL_GetTick>
 8008c2a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	019a      	lsls	r2, r3, #6
 8008c30:	f53f aea8 	bmi.w	8008984 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c34:	f7ff f8a8 	bl	8007d88 <HAL_GetTick>
 8008c38:	1b40      	subs	r0, r0, r5
 8008c3a:	2802      	cmp	r0, #2
 8008c3c:	d9f6      	bls.n	8008c2c <HAL_RCC_OscConfig+0x2d4>
 8008c3e:	e6cc      	b.n	80089da <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c40:	f7ff f8a2 	bl	8007d88 <HAL_GetTick>
 8008c44:	1b80      	subs	r0, r0, r6
 8008c46:	2802      	cmp	r0, #2
 8008c48:	d9d6      	bls.n	8008bf8 <HAL_RCC_OscConfig+0x2a0>
 8008c4a:	e6c6      	b.n	80089da <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8008c4c:	f7ff f89c 	bl	8007d88 <HAL_GetTick>
 8008c50:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c52:	6823      	ldr	r3, [r4, #0]
 8008c54:	019b      	lsls	r3, r3, #6
 8008c56:	f57f ae95 	bpl.w	8008984 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c5a:	f7ff f895 	bl	8007d88 <HAL_GetTick>
 8008c5e:	1b40      	subs	r0, r0, r5
 8008c60:	2802      	cmp	r0, #2
 8008c62:	d9f6      	bls.n	8008c52 <HAL_RCC_OscConfig+0x2fa>
 8008c64:	e6b9      	b.n	80089da <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	f43f aea2 	beq.w	80089b0 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8008c6c:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c6e:	6a2b      	ldr	r3, [r5, #32]
 8008c70:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8008c74:	429a      	cmp	r2, r3
 8008c76:	f47f ae9b 	bne.w	80089b0 <HAL_RCC_OscConfig+0x58>
 8008c7a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008c7c:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c80:	1ac0      	subs	r0, r0, r3
 8008c82:	bf18      	it	ne
 8008c84:	2001      	movne	r0, #1
 8008c86:	e6a9      	b.n	80089dc <HAL_RCC_OscConfig+0x84>
 8008c88:	40021000 	.word	0x40021000
 8008c8c:	42420000 	.word	0x42420000

08008c90 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8008c90:	4a0d      	ldr	r2, [pc, #52]	@ (8008cc8 <HAL_RCC_GetSysClockFreq+0x38>)
 8008c92:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8008c94:	f003 010c 	and.w	r1, r3, #12
 8008c98:	2908      	cmp	r1, #8
 8008c9a:	d112      	bne.n	8008cc2 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008c9c:	480b      	ldr	r0, [pc, #44]	@ (8008ccc <HAL_RCC_GetSysClockFreq+0x3c>)
 8008c9e:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008ca2:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008ca4:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008ca6:	d509      	bpl.n	8008cbc <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008ca8:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008caa:	4a09      	ldr	r2, [pc, #36]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008cac:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008cb0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008cb2:	4a08      	ldr	r2, [pc, #32]	@ (8008cd4 <HAL_RCC_GetSysClockFreq+0x44>)
 8008cb4:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008cb6:	fbb0 f0f3 	udiv	r0, r0, r3
 8008cba:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008cbc:	4b06      	ldr	r3, [pc, #24]	@ (8008cd8 <HAL_RCC_GetSysClockFreq+0x48>)
 8008cbe:	4358      	muls	r0, r3
 8008cc0:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8008cc2:	4803      	ldr	r0, [pc, #12]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	40021000 	.word	0x40021000
 8008ccc:	0800f345 	.word	0x0800f345
 8008cd0:	007a1200 	.word	0x007a1200
 8008cd4:	0800f343 	.word	0x0800f343
 8008cd8:	003d0900 	.word	0x003d0900

08008cdc <HAL_RCC_ClockConfig>:
{
 8008cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	b910      	cbnz	r0, 8008cec <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8008ce6:	2001      	movs	r0, #1
}
 8008ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008cec:	4a44      	ldr	r2, [pc, #272]	@ (8008e00 <HAL_RCC_ClockConfig+0x124>)
 8008cee:	6813      	ldr	r3, [r2, #0]
 8008cf0:	f003 0307 	and.w	r3, r3, #7
 8008cf4:	428b      	cmp	r3, r1
 8008cf6:	d328      	bcc.n	8008d4a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cf8:	6821      	ldr	r1, [r4, #0]
 8008cfa:	078e      	lsls	r6, r1, #30
 8008cfc:	d430      	bmi.n	8008d60 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cfe:	07ca      	lsls	r2, r1, #31
 8008d00:	d443      	bmi.n	8008d8a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d02:	4a3f      	ldr	r2, [pc, #252]	@ (8008e00 <HAL_RCC_ClockConfig+0x124>)
 8008d04:	6813      	ldr	r3, [r2, #0]
 8008d06:	f003 0307 	and.w	r3, r3, #7
 8008d0a:	42ab      	cmp	r3, r5
 8008d0c:	d865      	bhi.n	8008dda <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d0e:	6822      	ldr	r2, [r4, #0]
 8008d10:	4d3c      	ldr	r5, [pc, #240]	@ (8008e04 <HAL_RCC_ClockConfig+0x128>)
 8008d12:	f012 0f04 	tst.w	r2, #4
 8008d16:	d16c      	bne.n	8008df2 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d18:	0713      	lsls	r3, r2, #28
 8008d1a:	d506      	bpl.n	8008d2a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008d1c:	686b      	ldr	r3, [r5, #4]
 8008d1e:	6922      	ldr	r2, [r4, #16]
 8008d20:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8008d24:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008d28:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008d2a:	f7ff ffb1 	bl	8008c90 <HAL_RCC_GetSysClockFreq>
 8008d2e:	686b      	ldr	r3, [r5, #4]
 8008d30:	4a35      	ldr	r2, [pc, #212]	@ (8008e08 <HAL_RCC_ClockConfig+0x12c>)
 8008d32:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008d36:	5cd3      	ldrb	r3, [r2, r3]
 8008d38:	40d8      	lsrs	r0, r3
 8008d3a:	4b34      	ldr	r3, [pc, #208]	@ (8008e0c <HAL_RCC_ClockConfig+0x130>)
 8008d3c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8008d3e:	4b34      	ldr	r3, [pc, #208]	@ (8008e10 <HAL_RCC_ClockConfig+0x134>)
 8008d40:	6818      	ldr	r0, [r3, #0]
 8008d42:	f7fe ffdf 	bl	8007d04 <HAL_InitTick>
  return HAL_OK;
 8008d46:	2000      	movs	r0, #0
 8008d48:	e7ce      	b.n	8008ce8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d4a:	6813      	ldr	r3, [r2, #0]
 8008d4c:	f023 0307 	bic.w	r3, r3, #7
 8008d50:	430b      	orrs	r3, r1
 8008d52:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d54:	6813      	ldr	r3, [r2, #0]
 8008d56:	f003 0307 	and.w	r3, r3, #7
 8008d5a:	428b      	cmp	r3, r1
 8008d5c:	d1c3      	bne.n	8008ce6 <HAL_RCC_ClockConfig+0xa>
 8008d5e:	e7cb      	b.n	8008cf8 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d60:	4b28      	ldr	r3, [pc, #160]	@ (8008e04 <HAL_RCC_ClockConfig+0x128>)
 8008d62:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d66:	bf1e      	ittt	ne
 8008d68:	685a      	ldrne	r2, [r3, #4]
 8008d6a:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8008d6e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d70:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d72:	bf42      	ittt	mi
 8008d74:	685a      	ldrmi	r2, [r3, #4]
 8008d76:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8008d7a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	68a0      	ldr	r0, [r4, #8]
 8008d80:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8008d84:	4302      	orrs	r2, r0
 8008d86:	605a      	str	r2, [r3, #4]
 8008d88:	e7b9      	b.n	8008cfe <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d8a:	6862      	ldr	r2, [r4, #4]
 8008d8c:	4e1d      	ldr	r6, [pc, #116]	@ (8008e04 <HAL_RCC_ClockConfig+0x128>)
 8008d8e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d90:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d92:	d11a      	bne.n	8008dca <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d94:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d98:	d0a5      	beq.n	8008ce6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d9a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d9c:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008da0:	f023 0303 	bic.w	r3, r3, #3
 8008da4:	4313      	orrs	r3, r2
 8008da6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8008da8:	f7fe ffee 	bl	8007d88 <HAL_GetTick>
 8008dac:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dae:	6873      	ldr	r3, [r6, #4]
 8008db0:	6862      	ldr	r2, [r4, #4]
 8008db2:	f003 030c 	and.w	r3, r3, #12
 8008db6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008dba:	d0a2      	beq.n	8008d02 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dbc:	f7fe ffe4 	bl	8007d88 <HAL_GetTick>
 8008dc0:	1bc0      	subs	r0, r0, r7
 8008dc2:	4540      	cmp	r0, r8
 8008dc4:	d9f3      	bls.n	8008dae <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8008dc6:	2003      	movs	r0, #3
 8008dc8:	e78e      	b.n	8008ce8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008dca:	2a02      	cmp	r2, #2
 8008dcc:	d102      	bne.n	8008dd4 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008dce:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8008dd2:	e7e1      	b.n	8008d98 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dd4:	f013 0f02 	tst.w	r3, #2
 8008dd8:	e7de      	b.n	8008d98 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dda:	6813      	ldr	r3, [r2, #0]
 8008ddc:	f023 0307 	bic.w	r3, r3, #7
 8008de0:	432b      	orrs	r3, r5
 8008de2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008de4:	6813      	ldr	r3, [r2, #0]
 8008de6:	f003 0307 	and.w	r3, r3, #7
 8008dea:	42ab      	cmp	r3, r5
 8008dec:	f47f af7b 	bne.w	8008ce6 <HAL_RCC_ClockConfig+0xa>
 8008df0:	e78d      	b.n	8008d0e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008df2:	686b      	ldr	r3, [r5, #4]
 8008df4:	68e1      	ldr	r1, [r4, #12]
 8008df6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008dfa:	430b      	orrs	r3, r1
 8008dfc:	606b      	str	r3, [r5, #4]
 8008dfe:	e78b      	b.n	8008d18 <HAL_RCC_ClockConfig+0x3c>
 8008e00:	40022000 	.word	0x40022000
 8008e04:	40021000 	.word	0x40021000
 8008e08:	0800f306 	.word	0x0800f306
 8008e0c:	20000004 	.word	0x20000004
 8008e10:	2000000c 	.word	0x2000000c

08008e14 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008e14:	4b04      	ldr	r3, [pc, #16]	@ (8008e28 <HAL_RCC_GetPCLK1Freq+0x14>)
 8008e16:	4a05      	ldr	r2, [pc, #20]	@ (8008e2c <HAL_RCC_GetPCLK1Freq+0x18>)
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008e1e:	5cd3      	ldrb	r3, [r2, r3]
 8008e20:	4a03      	ldr	r2, [pc, #12]	@ (8008e30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008e22:	6810      	ldr	r0, [r2, #0]
}
 8008e24:	40d8      	lsrs	r0, r3
 8008e26:	4770      	bx	lr
 8008e28:	40021000 	.word	0x40021000
 8008e2c:	0800f2fe 	.word	0x0800f2fe
 8008e30:	20000004 	.word	0x20000004

08008e34 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008e34:	4b04      	ldr	r3, [pc, #16]	@ (8008e48 <HAL_RCC_GetPCLK2Freq+0x14>)
 8008e36:	4a05      	ldr	r2, [pc, #20]	@ (8008e4c <HAL_RCC_GetPCLK2Freq+0x18>)
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8008e3e:	5cd3      	ldrb	r3, [r2, r3]
 8008e40:	4a03      	ldr	r2, [pc, #12]	@ (8008e50 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008e42:	6810      	ldr	r0, [r2, #0]
}
 8008e44:	40d8      	lsrs	r0, r3
 8008e46:	4770      	bx	lr
 8008e48:	40021000 	.word	0x40021000
 8008e4c:	0800f2fe 	.word	0x0800f2fe
 8008e50:	20000004 	.word	0x20000004

08008e54 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008e54:	6803      	ldr	r3, [r0, #0]
{
 8008e56:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008e5a:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008e5c:	07d8      	lsls	r0, r3, #31
 8008e5e:	d521      	bpl.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e60:	4c36      	ldr	r4, [pc, #216]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008e62:	69e3      	ldr	r3, [r4, #28]
 8008e64:	00d9      	lsls	r1, r3, #3
 8008e66:	d42b      	bmi.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8008e68:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e6a:	69e3      	ldr	r3, [r4, #28]
 8008e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e70:	61e3      	str	r3, [r4, #28]
 8008e72:	69e3      	ldr	r3, [r4, #28]
 8008e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e78:	9301      	str	r3, [sp, #4]
 8008e7a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e7c:	4f30      	ldr	r7, [pc, #192]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	05da      	lsls	r2, r3, #23
 8008e82:	d51f      	bpl.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008e84:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008e86:	686a      	ldr	r2, [r5, #4]
 8008e88:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8008e8c:	d12e      	bne.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e8e:	6a23      	ldr	r3, [r4, #32]
 8008e90:	686a      	ldr	r2, [r5, #4]
 8008e92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e96:	4313      	orrs	r3, r2
 8008e98:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008e9a:	b11e      	cbz	r6, 8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e9c:	69e3      	ldr	r3, [r4, #28]
 8008e9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ea2:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ea4:	682a      	ldr	r2, [r5, #0]
 8008ea6:	0791      	lsls	r1, r2, #30
 8008ea8:	d506      	bpl.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008eaa:	4924      	ldr	r1, [pc, #144]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008eac:	68a8      	ldr	r0, [r5, #8]
 8008eae:	684b      	ldr	r3, [r1, #4]
 8008eb0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8008eb4:	4303      	orrs	r3, r0
 8008eb6:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008eb8:	06d3      	lsls	r3, r2, #27
 8008eba:	d436      	bmi.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	e012      	b.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8008ec0:	2600      	movs	r6, #0
 8008ec2:	e7db      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008eca:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8008ecc:	f7fe ff5c 	bl	8007d88 <HAL_GetTick>
 8008ed0:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	05db      	lsls	r3, r3, #23
 8008ed6:	d4d5      	bmi.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ed8:	f7fe ff56 	bl	8007d88 <HAL_GetTick>
 8008edc:	eba0 0008 	sub.w	r0, r0, r8
 8008ee0:	2864      	cmp	r0, #100	@ 0x64
 8008ee2:	d9f6      	bls.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 8008ee4:	2003      	movs	r0, #3
}
 8008ee6:	b002      	add	sp, #8
 8008ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008eec:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d0cc      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8008ef4:	2001      	movs	r0, #1
 8008ef6:	4a13      	ldr	r2, [pc, #76]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ef8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8008efa:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008efe:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f00:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008f04:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008f06:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 8008f0a:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008f0c:	d5bf      	bpl.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8008f0e:	f7fe ff3b 	bl	8007d88 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f12:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8008f16:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f18:	6a23      	ldr	r3, [r4, #32]
 8008f1a:	0798      	lsls	r0, r3, #30
 8008f1c:	d4b7      	bmi.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f1e:	f7fe ff33 	bl	8007d88 <HAL_GetTick>
 8008f22:	1bc0      	subs	r0, r0, r7
 8008f24:	4540      	cmp	r0, r8
 8008f26:	d9f7      	bls.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8008f28:	e7dc      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f2a:	4a04      	ldr	r2, [pc, #16]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008f2c:	68e9      	ldr	r1, [r5, #12]
 8008f2e:	6853      	ldr	r3, [r2, #4]
 8008f30:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8008f34:	430b      	orrs	r3, r1
 8008f36:	6053      	str	r3, [r2, #4]
 8008f38:	e7c0      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x68>
 8008f3a:	bf00      	nop
 8008f3c:	40021000 	.word	0x40021000
 8008f40:	40007000 	.word	0x40007000
 8008f44:	42420000 	.word	0x42420000

08008f48 <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8008f48:	2802      	cmp	r0, #2
{
 8008f4a:	b508      	push	{r3, lr}
  switch (PeriphClk)
 8008f4c:	d044      	beq.n	8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8008f4e:	2810      	cmp	r0, #16
 8008f50:	d003      	beq.n	8008f5a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8008f52:	2801      	cmp	r0, #1
 8008f54:	d022      	beq.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 8008f56:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8008f58:	e034      	b.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      temp_reg = RCC->CFGR;
 8008f5a:	4b25      	ldr	r3, [pc, #148]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8008f5c:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008f5e:	6818      	ldr	r0, [r3, #0]
 8008f60:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 8008f64:	d02e      	beq.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008f66:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8008f6a:	4822      	ldr	r0, [pc, #136]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008f6c:	03d2      	lsls	r2, r2, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008f6e:	bf48      	it	mi
 8008f70:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008f72:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008f74:	bf41      	itttt	mi
 8008f76:	4920      	ldrmi	r1, [pc, #128]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008f78:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8008f7c:	5c89      	ldrbmi	r1, [r1, r2]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008f7e:	4a1f      	ldrmi	r2, [pc, #124]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008f80:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008f82:	bf4c      	ite	mi
 8008f84:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008f88:	4a1d      	ldrpl	r2, [pc, #116]	@ (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008f8a:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008f8c:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008f90:	d418      	bmi.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = (pllclk * 2) / 3;
 8008f92:	2303      	movs	r3, #3
 8008f94:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008f96:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8008f9a:	e013      	b.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008f9c:	f240 3102 	movw	r1, #770	@ 0x302
      temp_reg = RCC->BDCR;
 8008fa0:	4a13      	ldr	r2, [pc, #76]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8008fa2:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008fa4:	4019      	ands	r1, r3
 8008fa6:	f5b1 7f81 	cmp.w	r1, #258	@ 0x102
 8008faa:	d01e      	beq.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008fac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fb4:	d107      	bne.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSI_VALUE;
 8008fb6:	f649 4340 	movw	r3, #40000	@ 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008fba:	6a50      	ldr	r0, [r2, #36]	@ 0x24
        frequency = LSI_VALUE;
 8008fbc:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8008fc0:	bf18      	it	ne
 8008fc2:	4618      	movne	r0, r3
}
 8008fc4:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008fc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fca:	d1c4      	bne.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 8008fcc:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8008fce:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8008fd2:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8008fd6:	e7f3      	b.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008fd8:	f7ff ff2c 	bl	8008e34 <HAL_RCC_GetPCLK2Freq>
 8008fdc:	4b04      	ldr	r3, [pc, #16]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	005b      	lsls	r3, r3, #1
 8008fe8:	e7d5      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 8008fea:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008fee:	e7e9      	b.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008ff0:	40021000 	.word	0x40021000
 8008ff4:	0800f357 	.word	0x0800f357
 8008ff8:	0800f355 	.word	0x0800f355
 8008ffc:	007a1200 	.word	0x007a1200
 8009000:	003d0900 	.word	0x003d0900

08009004 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009004:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009008:	461f      	mov	r7, r3
 800900a:	4689      	mov	r9, r1
 800900c:	4690      	mov	r8, r2
 800900e:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009010:	f7fe feba 	bl	8007d88 <HAL_GetTick>
 8009014:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009016:	443d      	add	r5, r7
 8009018:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800901a:	f7fe feb5 	bl	8007d88 <HAL_GetTick>
 800901e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009020:	4b25      	ldr	r3, [pc, #148]	@ (80090b8 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8009022:	681e      	ldr	r6, [r3, #0]
 8009024:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8009028:	436e      	muls	r6, r5
 800902a:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800902c:	6822      	ldr	r2, [r4, #0]
 800902e:	6893      	ldr	r3, [r2, #8]
 8009030:	ea39 0303 	bics.w	r3, r9, r3
 8009034:	bf0c      	ite	eq
 8009036:	2301      	moveq	r3, #1
 8009038:	2300      	movne	r3, #0
 800903a:	4543      	cmp	r3, r8
 800903c:	d101      	bne.n	8009042 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 800903e:	2000      	movs	r0, #0
 8009040:	e02e      	b.n	80090a0 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8009042:	1c7b      	adds	r3, r7, #1
 8009044:	d0f3      	beq.n	800902e <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009046:	f7fe fe9f 	bl	8007d88 <HAL_GetTick>
 800904a:	eba0 000a 	sub.w	r0, r0, sl
 800904e:	42a8      	cmp	r0, r5
 8009050:	d329      	bcc.n	80090a6 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	685a      	ldr	r2, [r3, #4]
 8009056:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800905a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800905c:	6862      	ldr	r2, [r4, #4]
 800905e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8009062:	d10a      	bne.n	800907a <SPI_WaitFlagStateUntilTimeout+0x76>
 8009064:	68a2      	ldr	r2, [r4, #8]
 8009066:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800906a:	d002      	beq.n	8009072 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800906c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8009070:	d103      	bne.n	800907a <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009078:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800907a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800907c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8009080:	d107      	bne.n	8009092 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009090:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009092:	2301      	movs	r3, #1
 8009094:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009098:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800909a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800909c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80090a0:	b002      	add	sp, #8
 80090a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 80090a6:	9a01      	ldr	r2, [sp, #4]
      count--;
 80090a8:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 80090aa:	2a00      	cmp	r2, #0
      count--;
 80090ac:	f103 33ff 	add.w	r3, r3, #4294967295
 80090b0:	bf08      	it	eq
 80090b2:	4615      	moveq	r5, r2
 80090b4:	9301      	str	r3, [sp, #4]
 80090b6:	e7b9      	b.n	800902c <SPI_WaitFlagStateUntilTimeout+0x28>
 80090b8:	20000004 	.word	0x20000004

080090bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80090bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80090be:	460b      	mov	r3, r1
 80090c0:	9200      	str	r2, [sp, #0]
{
 80090c2:	460d      	mov	r5, r1
 80090c4:	4616      	mov	r6, r2
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80090c6:	2102      	movs	r1, #2
 80090c8:	2201      	movs	r2, #1
{
 80090ca:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80090cc:	f7ff ff9a 	bl	8009004 <SPI_WaitFlagStateUntilTimeout>
 80090d0:	4602      	mov	r2, r0
 80090d2:	b128      	cbz	r0, 80090e0 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090d4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 80090d6:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090d8:	f043 0320 	orr.w	r3, r3, #32
 80090dc:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 80090de:	e007      	b.n	80090f0 <SPI_EndRxTxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090e0:	462b      	mov	r3, r5
 80090e2:	2180      	movs	r1, #128	@ 0x80
 80090e4:	4620      	mov	r0, r4
 80090e6:	9600      	str	r6, [sp, #0]
 80090e8:	f7ff ff8c 	bl	8009004 <SPI_WaitFlagStateUntilTimeout>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	d1f1      	bne.n	80090d4 <SPI_EndRxTxTransaction+0x18>
  }
  return HAL_OK;
}
 80090f0:	b002      	add	sp, #8
 80090f2:	bd70      	pop	{r4, r5, r6, pc}

080090f4 <HAL_SPI_Init>:
{
 80090f4:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80090f6:	4604      	mov	r4, r0
 80090f8:	2800      	cmp	r0, #0
 80090fa:	d051      	beq.n	80091a0 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80090fc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d14a      	bne.n	8009198 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009102:	6842      	ldr	r2, [r0, #4]
 8009104:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8009108:	d000      	beq.n	800910c <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800910a:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800910c:	2300      	movs	r3, #0
 800910e:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009110:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8009114:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009118:	b923      	cbnz	r3, 8009124 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 800911a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800911c:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8009120:	f7fd ff72 	bl	8007008 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8009124:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8009126:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8009128:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 800912c:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800912e:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8009130:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009134:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009136:	6863      	ldr	r3, [r4, #4]
 8009138:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 800913c:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8009140:	4303      	orrs	r3, r0
 8009142:	68e0      	ldr	r0, [r4, #12]
 8009144:	69a1      	ldr	r1, [r4, #24]
 8009146:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 800914a:	4303      	orrs	r3, r0
 800914c:	6920      	ldr	r0, [r4, #16]
 800914e:	f000 0002 	and.w	r0, r0, #2
 8009152:	4303      	orrs	r3, r0
 8009154:	6960      	ldr	r0, [r4, #20]
 8009156:	f000 0001 	and.w	r0, r0, #1
 800915a:	4303      	orrs	r3, r0
 800915c:	f401 7000 	and.w	r0, r1, #512	@ 0x200
 8009160:	4303      	orrs	r3, r0
 8009162:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009164:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009166:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 800916a:	4303      	orrs	r3, r0
 800916c:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800916e:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009172:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 8009176:	4303      	orrs	r3, r0
 8009178:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800917a:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 800917e:	4303      	orrs	r3, r0
 8009180:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009182:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009184:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009186:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009188:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800918c:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800918e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009190:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009192:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8009196:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009198:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800919a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800919e:	e7b5      	b.n	800910c <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80091a0:	2001      	movs	r0, #1
 80091a2:	e7f8      	b.n	8009196 <HAL_SPI_Init+0xa2>

080091a4 <HAL_SPI_TransmitReceive>:
{
 80091a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80091a8:	4604      	mov	r4, r0
 80091aa:	460d      	mov	r5, r1
 80091ac:	4691      	mov	r9, r2
 80091ae:	461e      	mov	r6, r3
 80091b0:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 80091b4:	f7fe fde8 	bl	8007d88 <HAL_GetTick>
  tmp_state           = hspi->State;
 80091b8:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 80091bc:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80091be:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 80091c0:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 80091c2:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80091c4:	d00a      	beq.n	80091dc <HAL_SPI_TransmitReceive+0x38>
 80091c6:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80091ca:	f040 80e5 	bne.w	8009398 <HAL_SPI_TransmitReceive+0x1f4>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80091ce:	68a3      	ldr	r3, [r4, #8]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f040 80e1 	bne.w	8009398 <HAL_SPI_TransmitReceive+0x1f4>
 80091d6:	2904      	cmp	r1, #4
 80091d8:	f040 80de 	bne.w	8009398 <HAL_SPI_TransmitReceive+0x1f4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80091dc:	2d00      	cmp	r5, #0
 80091de:	d04b      	beq.n	8009278 <HAL_SPI_TransmitReceive+0xd4>
 80091e0:	f1b9 0f00 	cmp.w	r9, #0
 80091e4:	d048      	beq.n	8009278 <HAL_SPI_TransmitReceive+0xd4>
 80091e6:	2e00      	cmp	r6, #0
 80091e8:	d046      	beq.n	8009278 <HAL_SPI_TransmitReceive+0xd4>
  __HAL_LOCK(hspi);
 80091ea:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	f000 80d2 	beq.w	8009398 <HAL_SPI_TransmitReceive+0x1f4>
 80091f4:	2301      	movs	r3, #1
 80091f6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80091fa:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80091fe:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009202:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009204:	bf1c      	itt	ne
 8009206:	2305      	movne	r3, #5
 8009208:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800920c:	2300      	movs	r3, #0
 800920e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 8009210:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009214:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8009216:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8009218:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800921a:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 800921c:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800921e:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8009220:	bf58      	it	pl
 8009222:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009224:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 8009226:	bf58      	it	pl
 8009228:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 800922c:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 800922e:	bf58      	it	pl
 8009230:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009232:	68e1      	ldr	r1, [r4, #12]
 8009234:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8009238:	d155      	bne.n	80092e6 <HAL_SPI_TransmitReceive+0x142>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800923a:	b10a      	cbz	r2, 8009240 <HAL_SPI_TransmitReceive+0x9c>
 800923c:	2e01      	cmp	r6, #1
 800923e:	d107      	bne.n	8009250 <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009240:	f835 2b02 	ldrh.w	r2, [r5], #2
 8009244:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8009246:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009248:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800924a:	3b01      	subs	r3, #1
 800924c:	b29b      	uxth	r3, r3
 800924e:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8009250:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009252:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8009254:	b29b      	uxth	r3, r3
 8009256:	b98b      	cbnz	r3, 800927c <HAL_SPI_TransmitReceive+0xd8>
 8009258:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800925a:	b29b      	uxth	r3, r3
 800925c:	b973      	cbnz	r3, 800927c <HAL_SPI_TransmitReceive+0xd8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800925e:	463a      	mov	r2, r7
 8009260:	4641      	mov	r1, r8
 8009262:	4620      	mov	r0, r4
 8009264:	f7ff ff2a 	bl	80090bc <SPI_EndRxTxTransaction>
 8009268:	2800      	cmp	r0, #0
 800926a:	f000 8081 	beq.w	8009370 <HAL_SPI_TransmitReceive+0x1cc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800926e:	2320      	movs	r3, #32
 8009270:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8009272:	2300      	movs	r3, #0
 8009274:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8009278:	2001      	movs	r0, #1
 800927a:	e031      	b.n	80092e0 <HAL_SPI_TransmitReceive+0x13c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800927c:	6821      	ldr	r1, [r4, #0]
 800927e:	688b      	ldr	r3, [r1, #8]
 8009280:	079a      	lsls	r2, r3, #30
 8009282:	d50d      	bpl.n	80092a0 <HAL_SPI_TransmitReceive+0xfc>
 8009284:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8009286:	b29b      	uxth	r3, r3
 8009288:	b153      	cbz	r3, 80092a0 <HAL_SPI_TransmitReceive+0xfc>
 800928a:	b145      	cbz	r5, 800929e <HAL_SPI_TransmitReceive+0xfa>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800928c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800928e:	f833 2b02 	ldrh.w	r2, [r3], #2
 8009292:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009294:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8009296:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8009298:	3b01      	subs	r3, #1
 800929a:	b29b      	uxth	r3, r3
 800929c:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 800929e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80092a0:	688a      	ldr	r2, [r1, #8]
 80092a2:	f012 0201 	ands.w	r2, r2, #1
 80092a6:	d00c      	beq.n	80092c2 <HAL_SPI_TransmitReceive+0x11e>
 80092a8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	b14b      	cbz	r3, 80092c2 <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 80092ae:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80092b0:	68c9      	ldr	r1, [r1, #12]
 80092b2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80092b4:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80092b8:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80092ba:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80092bc:	3b01      	subs	r3, #1
 80092be:	b29b      	uxth	r3, r3
 80092c0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80092c2:	f7fe fd61 	bl	8007d88 <HAL_GetTick>
 80092c6:	1bc0      	subs	r0, r0, r7
 80092c8:	4540      	cmp	r0, r8
 80092ca:	d3c2      	bcc.n	8009252 <HAL_SPI_TransmitReceive+0xae>
 80092cc:	f1b8 3fff 	cmp.w	r8, #4294967295
 80092d0:	d0bf      	beq.n	8009252 <HAL_SPI_TransmitReceive+0xae>
        hspi->State = HAL_SPI_STATE_READY;
 80092d2:	2301      	movs	r3, #1
 80092d4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80092d8:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80092da:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80092dc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80092e0:	b003      	add	sp, #12
 80092e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092e6:	b10a      	cbz	r2, 80092ec <HAL_SPI_TransmitReceive+0x148>
 80092e8:	2e01      	cmp	r6, #1
 80092ea:	d108      	bne.n	80092fe <HAL_SPI_TransmitReceive+0x15a>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80092ec:	782a      	ldrb	r2, [r5, #0]
 80092ee:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80092f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80092f2:	3301      	adds	r3, #1
 80092f4:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80092f6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80092f8:	3b01      	subs	r3, #1
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80092fe:	2501      	movs	r5, #1
 8009300:	e02d      	b.n	800935e <HAL_SPI_TransmitReceive+0x1ba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009302:	6822      	ldr	r2, [r4, #0]
 8009304:	6893      	ldr	r3, [r2, #8]
 8009306:	079b      	lsls	r3, r3, #30
 8009308:	d50e      	bpl.n	8009328 <HAL_SPI_TransmitReceive+0x184>
 800930a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800930c:	b29b      	uxth	r3, r3
 800930e:	b15b      	cbz	r3, 8009328 <HAL_SPI_TransmitReceive+0x184>
 8009310:	b14d      	cbz	r5, 8009326 <HAL_SPI_TransmitReceive+0x182>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009312:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8009318:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800931a:	3301      	adds	r3, #1
 800931c:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800931e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8009320:	3b01      	subs	r3, #1
 8009322:	b29b      	uxth	r3, r3
 8009324:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8009326:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009328:	6822      	ldr	r2, [r4, #0]
 800932a:	6891      	ldr	r1, [r2, #8]
 800932c:	f011 0101 	ands.w	r1, r1, #1
 8009330:	d00d      	beq.n	800934e <HAL_SPI_TransmitReceive+0x1aa>
 8009332:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8009334:	b29b      	uxth	r3, r3
 8009336:	b153      	cbz	r3, 800934e <HAL_SPI_TransmitReceive+0x1aa>
        txallowed = 1U;
 8009338:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800933a:	68d2      	ldr	r2, [r2, #12]
 800933c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800933e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009340:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009342:	3301      	adds	r3, #1
 8009344:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8009346:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8009348:	3b01      	subs	r3, #1
 800934a:	b29b      	uxth	r3, r3
 800934c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800934e:	f7fe fd1b 	bl	8007d88 <HAL_GetTick>
 8009352:	1bc0      	subs	r0, r0, r7
 8009354:	4540      	cmp	r0, r8
 8009356:	d302      	bcc.n	800935e <HAL_SPI_TransmitReceive+0x1ba>
 8009358:	f1b8 3fff 	cmp.w	r8, #4294967295
 800935c:	d1b9      	bne.n	80092d2 <HAL_SPI_TransmitReceive+0x12e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800935e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8009360:	b29b      	uxth	r3, r3
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1cd      	bne.n	8009302 <HAL_SPI_TransmitReceive+0x15e>
 8009366:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8009368:	b29b      	uxth	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1c9      	bne.n	8009302 <HAL_SPI_TransmitReceive+0x15e>
 800936e:	e776      	b.n	800925e <HAL_SPI_TransmitReceive+0xba>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009370:	68a3      	ldr	r3, [r4, #8]
 8009372:	b933      	cbnz	r3, 8009382 <HAL_SPI_TransmitReceive+0x1de>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009374:	9301      	str	r3, [sp, #4]
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	68da      	ldr	r2, [r3, #12]
 800937a:	9201      	str	r2, [sp, #4]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	9301      	str	r3, [sp, #4]
 8009380:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8009382:	2301      	movs	r3, #1
 8009384:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8009388:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800938a:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 800938c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009390:	1ac0      	subs	r0, r0, r3
 8009392:	bf18      	it	ne
 8009394:	2001      	movne	r0, #1
 8009396:	e7a3      	b.n	80092e0 <HAL_SPI_TransmitReceive+0x13c>
    return HAL_BUSY;
 8009398:	2002      	movs	r0, #2
 800939a:	e7a1      	b.n	80092e0 <HAL_SPI_TransmitReceive+0x13c>

0800939c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800939c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d120      	bne.n	80093e6 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093a4:	2302      	movs	r3, #2
 80093a6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80093aa:	6803      	ldr	r3, [r0, #0]
 80093ac:	68da      	ldr	r2, [r3, #12]
 80093ae:	f042 0201 	orr.w	r2, r2, #1
 80093b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093b4:	4a0d      	ldr	r2, [pc, #52]	@ (80093ec <HAL_TIM_Base_Start_IT+0x50>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d00a      	beq.n	80093d0 <HAL_TIM_Base_Start_IT+0x34>
 80093ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093be:	d007      	beq.n	80093d0 <HAL_TIM_Base_Start_IT+0x34>
 80093c0:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d003      	beq.n	80093d0 <HAL_TIM_Base_Start_IT+0x34>
 80093c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d104      	bne.n	80093da <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093d0:	689a      	ldr	r2, [r3, #8]
 80093d2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093d6:	2a06      	cmp	r2, #6
 80093d8:	d003      	beq.n	80093e2 <HAL_TIM_Base_Start_IT+0x46>
    {
      __HAL_TIM_ENABLE(htim);
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	f042 0201 	orr.w	r2, r2, #1
 80093e0:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80093e2:	2000      	movs	r0, #0
 80093e4:	4770      	bx	lr
    return HAL_ERROR;
 80093e6:	2001      	movs	r0, #1
}
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	40012c00 	.word	0x40012c00

080093f0 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80093f0:	4770      	bx	lr

080093f2 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80093f2:	4770      	bx	lr

080093f4 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80093f4:	4770      	bx	lr

080093f6 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80093f6:	4770      	bx	lr

080093f8 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 80093f8:	6803      	ldr	r3, [r0, #0]
{
 80093fa:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80093fc:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80093fe:	691e      	ldr	r6, [r3, #16]
{
 8009400:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009402:	07b1      	lsls	r1, r6, #30
 8009404:	d50d      	bpl.n	8009422 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009406:	07aa      	lsls	r2, r5, #30
 8009408:	d50b      	bpl.n	8009422 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800940a:	f06f 0202 	mvn.w	r2, #2
 800940e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009410:	2201      	movs	r2, #1
 8009412:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	079b      	lsls	r3, r3, #30
 8009418:	d069      	beq.n	80094ee <HAL_TIM_IRQHandler+0xf6>
          HAL_TIM_IC_CaptureCallback(htim);
 800941a:	f7ff ffea 	bl	80093f2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800941e:	2300      	movs	r3, #0
 8009420:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009422:	0771      	lsls	r1, r6, #29
 8009424:	d510      	bpl.n	8009448 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009426:	076a      	lsls	r2, r5, #29
 8009428:	d50e      	bpl.n	8009448 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800942a:	f06f 0204 	mvn.w	r2, #4
 800942e:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8009430:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009432:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009434:	2202      	movs	r2, #2
 8009436:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800943e:	d05c      	beq.n	80094fa <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8009440:	f7ff ffd7 	bl	80093f2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009444:	2300      	movs	r3, #0
 8009446:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009448:	0733      	lsls	r3, r6, #28
 800944a:	d50f      	bpl.n	800946c <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800944c:	0728      	lsls	r0, r5, #28
 800944e:	d50d      	bpl.n	800946c <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009450:	f06f 0208 	mvn.w	r2, #8
 8009454:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8009456:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800945a:	2204      	movs	r2, #4
 800945c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800945e:	69db      	ldr	r3, [r3, #28]
 8009460:	0799      	lsls	r1, r3, #30
 8009462:	d050      	beq.n	8009506 <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 8009464:	f7ff ffc5 	bl	80093f2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009468:	2300      	movs	r3, #0
 800946a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800946c:	06f2      	lsls	r2, r6, #27
 800946e:	d510      	bpl.n	8009492 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009470:	06eb      	lsls	r3, r5, #27
 8009472:	d50e      	bpl.n	8009492 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009474:	f06f 0210 	mvn.w	r2, #16
 8009478:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 800947a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800947c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800947e:	2208      	movs	r2, #8
 8009480:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009482:	69db      	ldr	r3, [r3, #28]
 8009484:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8009488:	d043      	beq.n	8009512 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800948a:	f7ff ffb2 	bl	80093f2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800948e:	2300      	movs	r3, #0
 8009490:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009492:	07f0      	lsls	r0, r6, #31
 8009494:	d508      	bpl.n	80094a8 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009496:	07e9      	lsls	r1, r5, #31
 8009498:	d506      	bpl.n	80094a8 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800949a:	f06f 0201 	mvn.w	r2, #1
 800949e:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_PeriodElapsedCallback(htim);
 80094a0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80094a2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80094a4:	f7fd ff42 	bl	800732c <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80094a8:	0632      	lsls	r2, r6, #24
 80094aa:	d508      	bpl.n	80094be <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80094ac:	062b      	lsls	r3, r5, #24
 80094ae:	d506      	bpl.n	80094be <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80094b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80094b4:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_BreakCallback(htim);
 80094b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80094b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80094ba:	f000 f970 	bl	800979e <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80094be:	0670      	lsls	r0, r6, #25
 80094c0:	d508      	bpl.n	80094d4 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80094c2:	0669      	lsls	r1, r5, #25
 80094c4:	d506      	bpl.n	80094d4 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80094c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80094ca:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_TriggerCallback(htim);
 80094cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80094ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80094d0:	f7ff ff91 	bl	80093f6 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80094d4:	06b2      	lsls	r2, r6, #26
 80094d6:	d522      	bpl.n	800951e <HAL_TIM_IRQHandler+0x126>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80094d8:	06ab      	lsls	r3, r5, #26
 80094da:	d520      	bpl.n	800951e <HAL_TIM_IRQHandler+0x126>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80094dc:	f06f 0220 	mvn.w	r2, #32
 80094e0:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_CommutCallback(htim);
 80094e2:	4620      	mov	r0, r4
}
 80094e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80094e8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80094ea:	f000 b957 	b.w	800979c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ee:	f7ff ff7f 	bl	80093f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094f2:	4620      	mov	r0, r4
 80094f4:	f7ff ff7e 	bl	80093f4 <HAL_TIM_PWM_PulseFinishedCallback>
 80094f8:	e791      	b.n	800941e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094fa:	f7ff ff79 	bl	80093f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094fe:	4620      	mov	r0, r4
 8009500:	f7ff ff78 	bl	80093f4 <HAL_TIM_PWM_PulseFinishedCallback>
 8009504:	e79e      	b.n	8009444 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009506:	f7ff ff73 	bl	80093f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800950a:	4620      	mov	r0, r4
 800950c:	f7ff ff72 	bl	80093f4 <HAL_TIM_PWM_PulseFinishedCallback>
 8009510:	e7aa      	b.n	8009468 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009512:	f7ff ff6d 	bl	80093f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009516:	4620      	mov	r0, r4
 8009518:	f7ff ff6c 	bl	80093f4 <HAL_TIM_PWM_PulseFinishedCallback>
 800951c:	e7b7      	b.n	800948e <HAL_TIM_IRQHandler+0x96>
}
 800951e:	bd70      	pop	{r4, r5, r6, pc}

08009520 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009520:	4a1e      	ldr	r2, [pc, #120]	@ (800959c <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8009522:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009524:	4290      	cmp	r0, r2
 8009526:	d00a      	beq.n	800953e <TIM_Base_SetConfig+0x1e>
 8009528:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800952c:	d007      	beq.n	800953e <TIM_Base_SetConfig+0x1e>
 800952e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8009532:	4290      	cmp	r0, r2
 8009534:	d003      	beq.n	800953e <TIM_Base_SetConfig+0x1e>
 8009536:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800953a:	4290      	cmp	r0, r2
 800953c:	d115      	bne.n	800956a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800953e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009540:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8009544:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009546:	4a15      	ldr	r2, [pc, #84]	@ (800959c <TIM_Base_SetConfig+0x7c>)
 8009548:	4290      	cmp	r0, r2
 800954a:	d00a      	beq.n	8009562 <TIM_Base_SetConfig+0x42>
 800954c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8009550:	d007      	beq.n	8009562 <TIM_Base_SetConfig+0x42>
 8009552:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8009556:	4290      	cmp	r0, r2
 8009558:	d003      	beq.n	8009562 <TIM_Base_SetConfig+0x42>
 800955a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800955e:	4290      	cmp	r0, r2
 8009560:	d103      	bne.n	800956a <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009562:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009568:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800956a:	694a      	ldr	r2, [r1, #20]
 800956c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009570:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8009572:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009574:	688b      	ldr	r3, [r1, #8]
 8009576:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009578:	680b      	ldr	r3, [r1, #0]
 800957a:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800957c:	4b07      	ldr	r3, [pc, #28]	@ (800959c <TIM_Base_SetConfig+0x7c>)
 800957e:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009580:	bf04      	itt	eq
 8009582:	690b      	ldreq	r3, [r1, #16]
 8009584:	6303      	streq	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009586:	2301      	movs	r3, #1
 8009588:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800958a:	6903      	ldr	r3, [r0, #16]
 800958c:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800958e:	bf42      	ittt	mi
 8009590:	6903      	ldrmi	r3, [r0, #16]
 8009592:	f023 0301 	bicmi.w	r3, r3, #1
 8009596:	6103      	strmi	r3, [r0, #16]
  }
}
 8009598:	4770      	bx	lr
 800959a:	bf00      	nop
 800959c:	40012c00 	.word	0x40012c00

080095a0 <HAL_TIM_Base_Init>:
{
 80095a0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80095a2:	4604      	mov	r4, r0
 80095a4:	b330      	cbz	r0, 80095f4 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80095a6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80095aa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80095ae:	b91b      	cbnz	r3, 80095b8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80095b0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80095b4:	f7fd fe82 	bl	80072bc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80095b8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095ba:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80095bc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095c0:	1d21      	adds	r1, r4, #4
 80095c2:	f7ff ffad 	bl	8009520 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095c6:	2301      	movs	r3, #1
  return HAL_OK;
 80095c8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095ca:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095ce:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80095d2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80095d6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80095da:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095de:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80095e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095e6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80095ea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80095ee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80095f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80095f4:	2001      	movs	r0, #1
 80095f6:	e7fc      	b.n	80095f2 <HAL_TIM_Base_Init+0x52>

080095f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095f8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095fa:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095fc:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095fe:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009602:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009606:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009608:	6082      	str	r2, [r0, #8]
}
 800960a:	bd10      	pop	{r4, pc}

0800960c <HAL_TIM_ConfigClockSource>:
{
 800960c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800960e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8009612:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8009614:	2b01      	cmp	r3, #1
 8009616:	f04f 0002 	mov.w	r0, #2
 800961a:	f000 808e 	beq.w	800973a <HAL_TIM_ConfigClockSource+0x12e>
 800961e:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8009620:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8009624:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8009626:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800962a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800962c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009630:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8009634:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8009636:	680b      	ldr	r3, [r1, #0]
 8009638:	2b60      	cmp	r3, #96	@ 0x60
 800963a:	d04f      	beq.n	80096dc <HAL_TIM_ConfigClockSource+0xd0>
 800963c:	d832      	bhi.n	80096a4 <HAL_TIM_ConfigClockSource+0x98>
 800963e:	2b40      	cmp	r3, #64	@ 0x40
 8009640:	d064      	beq.n	800970c <HAL_TIM_ConfigClockSource+0x100>
 8009642:	d816      	bhi.n	8009672 <HAL_TIM_ConfigClockSource+0x66>
 8009644:	2b20      	cmp	r3, #32
 8009646:	d00d      	beq.n	8009664 <HAL_TIM_ConfigClockSource+0x58>
 8009648:	d80a      	bhi.n	8009660 <HAL_TIM_ConfigClockSource+0x54>
 800964a:	f033 0110 	bics.w	r1, r3, #16
 800964e:	d009      	beq.n	8009664 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8009650:	2301      	movs	r3, #1
 8009652:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8009656:	2300      	movs	r3, #0
 8009658:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800965c:	4610      	mov	r0, r2
 800965e:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8009660:	2b30      	cmp	r3, #48	@ 0x30
 8009662:	d1f5      	bne.n	8009650 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8009664:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009666:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800966a:	4313      	orrs	r3, r2
 800966c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8009670:	e028      	b.n	80096c4 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8009672:	2b50      	cmp	r3, #80	@ 0x50
 8009674:	d1ec      	bne.n	8009650 <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 8009676:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8009678:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800967a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800967c:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800967e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009682:	f023 0301 	bic.w	r3, r3, #1
 8009686:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009688:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800968a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800968c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009690:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8009694:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8009696:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8009698:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800969a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800969e:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80096a2:	e00f      	b.n	80096c4 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 80096a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096a8:	d00d      	beq.n	80096c6 <HAL_TIM_ConfigClockSource+0xba>
 80096aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096ae:	d00c      	beq.n	80096ca <HAL_TIM_ConfigClockSource+0xbe>
 80096b0:	2b70      	cmp	r3, #112	@ 0x70
 80096b2:	d1cd      	bne.n	8009650 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 80096b4:	68cb      	ldr	r3, [r1, #12]
 80096b6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80096ba:	f7ff ff9d 	bl	80095f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80096be:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80096c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80096c4:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80096c6:	2200      	movs	r2, #0
 80096c8:	e7c2      	b.n	8009650 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 80096ca:	68cb      	ldr	r3, [r1, #12]
 80096cc:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80096d0:	f7ff ff92 	bl	80095f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096d4:	6883      	ldr	r3, [r0, #8]
 80096d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80096da:	e7f3      	b.n	80096c4 <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 80096dc:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096de:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 80096e0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096e2:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 80096e6:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096e8:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096ea:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80096ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80096f0:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 80096f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80096f8:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80096fc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80096fe:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8009700:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009706:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800970a:	e7db      	b.n	80096c4 <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 800970c:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800970e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8009710:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009712:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009714:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009718:	f023 0301 	bic.w	r3, r3, #1
 800971c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800971e:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8009720:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009722:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009726:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800972a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800972c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800972e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009730:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009734:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8009738:	e7c4      	b.n	80096c4 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 800973a:	4602      	mov	r2, r0
 800973c:	e78e      	b.n	800965c <HAL_TIM_ConfigClockSource+0x50>
	...

08009740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009740:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009742:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8009746:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8009748:	2b01      	cmp	r3, #1
 800974a:	f04f 0002 	mov.w	r0, #2
 800974e:	d022      	beq.n	8009796 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009750:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009752:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8009756:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009758:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800975a:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800975e:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8009760:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009762:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009764:	4c0c      	ldr	r4, [pc, #48]	@ (8009798 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8009766:	42a3      	cmp	r3, r4
 8009768:	d00a      	beq.n	8009780 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800976a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800976e:	d007      	beq.n	8009780 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8009770:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8009774:	42a3      	cmp	r3, r4
 8009776:	d003      	beq.n	8009780 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8009778:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800977c:	42a3      	cmp	r3, r4
 800977e:	d104      	bne.n	800978a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009780:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009782:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009786:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009788:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800978a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800978c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800978e:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8009792:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8009796:	bd30      	pop	{r4, r5, pc}
 8009798:	40012c00 	.word	0x40012c00

0800979c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800979c:	4770      	bx	lr

0800979e <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800979e:	4770      	bx	lr

080097a0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097a0:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a2:	f102 030c 	add.w	r3, r2, #12
 80097a6:	e853 3f00 	ldrex	r3, [r3]
 80097aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ae:	320c      	adds	r2, #12
 80097b0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80097b4:	6802      	ldr	r2, [r0, #0]
 80097b6:	2900      	cmp	r1, #0
 80097b8:	d1f2      	bne.n	80097a0 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ba:	f102 0314 	add.w	r3, r2, #20
 80097be:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097c2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c6:	f102 0c14 	add.w	ip, r2, #20
 80097ca:	e84c 3100 	strex	r1, r3, [ip]
 80097ce:	2900      	cmp	r1, #0
 80097d0:	d1f3      	bne.n	80097ba <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097d2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d10b      	bne.n	80097f0 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d8:	f102 030c 	add.w	r3, r2, #12
 80097dc:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097e0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e4:	f102 0c0c 	add.w	ip, r2, #12
 80097e8:	e84c 3100 	strex	r1, r3, [ip]
 80097ec:	2900      	cmp	r1, #0
 80097ee:	d1f3      	bne.n	80097d8 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097f0:	2320      	movs	r3, #32
 80097f2:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097f6:	2300      	movs	r3, #0
 80097f8:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80097fa:	4770      	bx	lr

080097fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097fc:	b510      	push	{r4, lr}
 80097fe:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009800:	6803      	ldr	r3, [r0, #0]
 8009802:	68c1      	ldr	r1, [r0, #12]
 8009804:	691a      	ldr	r2, [r3, #16]
 8009806:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800980a:	430a      	orrs	r2, r1
 800980c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800980e:	6882      	ldr	r2, [r0, #8]
 8009810:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8009812:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009814:	4302      	orrs	r2, r0
 8009816:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8009818:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 800981c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009820:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8009822:	430a      	orrs	r2, r1
 8009824:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009826:	695a      	ldr	r2, [r3, #20]
 8009828:	69a1      	ldr	r1, [r4, #24]
 800982a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800982e:	430a      	orrs	r2, r1
 8009830:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009832:	4a0e      	ldr	r2, [pc, #56]	@ (800986c <UART_SetConfig+0x70>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d115      	bne.n	8009864 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009838:	f7ff fafc 	bl	8008e34 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800983c:	2319      	movs	r3, #25
 800983e:	4343      	muls	r3, r0
 8009840:	6862      	ldr	r2, [r4, #4]
 8009842:	6820      	ldr	r0, [r4, #0]
 8009844:	0092      	lsls	r2, r2, #2
 8009846:	fbb3 f3f2 	udiv	r3, r3, r2
 800984a:	2264      	movs	r2, #100	@ 0x64
 800984c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009850:	fb02 3311 	mls	r3, r2, r1, r3
 8009854:	011b      	lsls	r3, r3, #4
 8009856:	3332      	adds	r3, #50	@ 0x32
 8009858:	fbb3 f3f2 	udiv	r3, r3, r2
 800985c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8009860:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8009862:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8009864:	f7ff fad6 	bl	8008e14 <HAL_RCC_GetPCLK1Freq>
 8009868:	e7e8      	b.n	800983c <UART_SetConfig+0x40>
 800986a:	bf00      	nop
 800986c:	40013800 	.word	0x40013800

08009870 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8009870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009872:	4605      	mov	r5, r0
 8009874:	460c      	mov	r4, r1
 8009876:	4617      	mov	r7, r2
 8009878:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800987a:	682a      	ldr	r2, [r5, #0]
 800987c:	6813      	ldr	r3, [r2, #0]
 800987e:	ea34 0303 	bics.w	r3, r4, r3
 8009882:	d101      	bne.n	8009888 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8009884:	2000      	movs	r0, #0
 8009886:	e021      	b.n	80098cc <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8009888:	1c70      	adds	r0, r6, #1
 800988a:	d0f7      	beq.n	800987c <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800988c:	f7fe fa7c 	bl	8007d88 <HAL_GetTick>
 8009890:	1bc0      	subs	r0, r0, r7
 8009892:	4286      	cmp	r6, r0
 8009894:	d31c      	bcc.n	80098d0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 8009896:	b1de      	cbz	r6, 80098d0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009898:	682b      	ldr	r3, [r5, #0]
 800989a:	68da      	ldr	r2, [r3, #12]
 800989c:	0751      	lsls	r1, r2, #29
 800989e:	d5ec      	bpl.n	800987a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 80098a0:	2c80      	cmp	r4, #128	@ 0x80
 80098a2:	d0ea      	beq.n	800987a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 80098a4:	2c40      	cmp	r4, #64	@ 0x40
 80098a6:	d0e8      	beq.n	800987a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	0712      	lsls	r2, r2, #28
 80098ac:	d5e5      	bpl.n	800987a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80098ae:	2400      	movs	r4, #0
 80098b0:	9401      	str	r4, [sp, #4]
 80098b2:	681a      	ldr	r2, [r3, #0]
          UART_EndRxTransfer(huart);
 80098b4:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 80098b6:	9201      	str	r2, [sp, #4]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	9301      	str	r3, [sp, #4]
 80098bc:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80098be:	f7ff ff6f 	bl	80097a0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80098c2:	2308      	movs	r3, #8
          return HAL_ERROR;
 80098c4:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80098c6:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80098c8:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
}
 80098cc:	b003      	add	sp, #12
 80098ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80098d0:	2003      	movs	r0, #3
 80098d2:	e7fb      	b.n	80098cc <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

080098d4 <HAL_UART_Init>:
{
 80098d4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80098d6:	4604      	mov	r4, r0
 80098d8:	b348      	cbz	r0, 800992e <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80098da:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80098de:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80098e2:	b91b      	cbnz	r3, 80098ec <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80098e4:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80098e8:	f7fe f86a 	bl	80079c0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80098ec:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80098ee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80098f0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80098f4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80098f6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80098f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80098fc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80098fe:	f7ff ff7d 	bl	80097fc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009902:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009904:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009906:	691a      	ldr	r2, [r3, #16]
 8009908:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800990c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800990e:	695a      	ldr	r2, [r3, #20]
 8009910:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009914:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8009916:	68da      	ldr	r2, [r3, #12]
 8009918:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800991c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800991e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009920:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009922:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009926:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800992a:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800992c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800992e:	2001      	movs	r0, #1
 8009930:	e7fc      	b.n	800992c <HAL_UART_Init+0x58>

08009932 <HAL_UART_Transmit>:
{
 8009932:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009936:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8009938:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800993c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800993e:	2b20      	cmp	r3, #32
{
 8009940:	460e      	mov	r6, r1
 8009942:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8009944:	d13f      	bne.n	80099c6 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 8009946:	2900      	cmp	r1, #0
 8009948:	d03f      	beq.n	80099ca <HAL_UART_Transmit+0x98>
 800994a:	2a00      	cmp	r2, #0
 800994c:	d03d      	beq.n	80099ca <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800994e:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009950:	2500      	movs	r5, #0
 8009952:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009954:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8009958:	f7fe fa16 	bl	8007d88 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800995c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800995e:	4681      	mov	r9, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferSize = Size;
 8009964:	84a7      	strh	r7, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009966:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009968:	d103      	bne.n	8009972 <HAL_UART_Transmit+0x40>
 800996a:	6923      	ldr	r3, [r4, #16]
 800996c:	b90b      	cbnz	r3, 8009972 <HAL_UART_Transmit+0x40>
 800996e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8009970:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8009972:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8009974:	b29b      	uxth	r3, r3
 8009976:	b953      	cbnz	r3, 800998e <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009978:	4643      	mov	r3, r8
 800997a:	464a      	mov	r2, r9
 800997c:	2140      	movs	r1, #64	@ 0x40
 800997e:	4620      	mov	r0, r4
 8009980:	f7ff ff76 	bl	8009870 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8009984:	2320      	movs	r3, #32
 8009986:	b950      	cbnz	r0, 800999e <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8009988:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 800998c:	e00a      	b.n	80099a4 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800998e:	4643      	mov	r3, r8
 8009990:	464a      	mov	r2, r9
 8009992:	2180      	movs	r1, #128	@ 0x80
 8009994:	4620      	mov	r0, r4
 8009996:	f7ff ff6b 	bl	8009870 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800999a:	b128      	cbz	r0, 80099a8 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 800999c:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800999e:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80099a0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 80099a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099a8:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80099aa:	b94e      	cbnz	r6, 80099c0 <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099ac:	f835 3b02 	ldrh.w	r3, [r5], #2
 80099b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80099b4:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80099b6:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 80099b8:	3901      	subs	r1, #1
 80099ba:	b289      	uxth	r1, r1
 80099bc:	84e1      	strh	r1, [r4, #38]	@ 0x26
 80099be:	e7d8      	b.n	8009972 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80099c0:	f816 3b01 	ldrb.w	r3, [r6], #1
 80099c4:	e7f6      	b.n	80099b4 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80099c6:	2002      	movs	r0, #2
 80099c8:	e7ec      	b.n	80099a4 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 80099ca:	2001      	movs	r0, #1
 80099cc:	e7ea      	b.n	80099a4 <HAL_UART_Transmit+0x72>

080099ce <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 80099ce:	4770      	bx	lr

080099d0 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 80099d0:	4770      	bx	lr

080099d2 <UART_DMAError>:
{
 80099d2:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099d4:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80099d6:	6803      	ldr	r3, [r0, #0]
 80099d8:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80099da:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 80099de:	2921      	cmp	r1, #33	@ 0x21
 80099e0:	d112      	bne.n	8009a08 <UART_DMAError+0x36>
 80099e2:	0612      	lsls	r2, r2, #24
 80099e4:	d510      	bpl.n	8009a08 <UART_DMAError+0x36>
    huart->TxXferCount = 0x00U;
 80099e6:	2200      	movs	r2, #0
 80099e8:	84c2      	strh	r2, [r0, #38]	@ 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ea:	f103 020c 	add.w	r2, r3, #12
 80099ee:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80099f2:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f6:	f103 0c0c 	add.w	ip, r3, #12
 80099fa:	e84c 2100 	strex	r1, r2, [ip]
 80099fe:	2900      	cmp	r1, #0
 8009a00:	d1f3      	bne.n	80099ea <UART_DMAError+0x18>
  huart->gState = HAL_UART_STATE_READY;
 8009a02:	2220      	movs	r2, #32
 8009a04:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009a08:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009a0a:	f890 2042 	ldrb.w	r2, [r0, #66]	@ 0x42
 8009a0e:	2a22      	cmp	r2, #34	@ 0x22
 8009a10:	d105      	bne.n	8009a1e <UART_DMAError+0x4c>
 8009a12:	065b      	lsls	r3, r3, #25
 8009a14:	d503      	bpl.n	8009a1e <UART_DMAError+0x4c>
    huart->RxXferCount = 0x00U;
 8009a16:	2300      	movs	r3, #0
 8009a18:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009a1a:	f7ff fec1 	bl	80097a0 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009a1e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8009a20:	f043 0310 	orr.w	r3, r3, #16
 8009a24:	6443      	str	r3, [r0, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 8009a26:	f7ff ffd3 	bl	80099d0 <HAL_UART_ErrorCallback>
}
 8009a2a:	bd08      	pop	{r3, pc}

08009a2c <UART_DMAAbortOnError>:
{
 8009a2c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8009a2e:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a30:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 8009a32:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009a34:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8009a36:	f7ff ffcb 	bl	80099d0 <HAL_UART_ErrorCallback>
}
 8009a3a:	bd08      	pop	{r3, pc}

08009a3c <HAL_UARTEx_RxEventCallback>:
}
 8009a3c:	4770      	bx	lr

08009a3e <UART_DMARxHalfCplt>:
{
 8009a3e:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009a40:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a42:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009a44:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a46:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d104      	bne.n	8009a56 <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009a4c:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8009a4e:	0849      	lsrs	r1, r1, #1
 8009a50:	f7ff fff4 	bl	8009a3c <HAL_UARTEx_RxEventCallback>
}
 8009a54:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8009a56:	f7ff ffba 	bl	80099ce <HAL_UART_RxHalfCpltCallback>
}
 8009a5a:	e7fb      	b.n	8009a54 <UART_DMARxHalfCplt+0x16>

08009a5c <UART_DMAReceiveCplt>:
{
 8009a5c:	b508      	push	{r3, lr}
 8009a5e:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009a60:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a62:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f013 0320 	ands.w	r3, r3, #32
 8009a6a:	d137      	bne.n	8009adc <UART_DMAReceiveCplt+0x80>
    huart->RxXferCount = 0U;
 8009a6c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a6e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a70:	f102 030c 	add.w	r3, r2, #12
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7c:	320c      	adds	r2, #12
 8009a7e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8009a82:	6803      	ldr	r3, [r0, #0]
 8009a84:	2900      	cmp	r1, #0
 8009a86:	d1f2      	bne.n	8009a6e <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a88:	f103 0214 	add.w	r2, r3, #20
 8009a8c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a90:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a94:	f103 0c14 	add.w	ip, r3, #20
 8009a98:	e84c 2100 	strex	r1, r2, [ip]
 8009a9c:	2900      	cmp	r1, #0
 8009a9e:	d1f3      	bne.n	8009a88 <UART_DMAReceiveCplt+0x2c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa0:	f103 0214 	add.w	r2, r3, #20
 8009aa4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aa8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aac:	f103 0c14 	add.w	ip, r3, #20
 8009ab0:	e84c 2100 	strex	r1, r2, [ip]
 8009ab4:	2900      	cmp	r1, #0
 8009ab6:	d1f3      	bne.n	8009aa0 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8009ab8:	2220      	movs	r2, #32
 8009aba:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009abe:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8009ac0:	2a01      	cmp	r2, #1
 8009ac2:	d10b      	bne.n	8009adc <UART_DMAReceiveCplt+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac4:	f103 020c 	add.w	r2, r3, #12
 8009ac8:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009acc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad0:	f103 0c0c 	add.w	ip, r3, #12
 8009ad4:	e84c 2100 	strex	r1, r2, [ip]
 8009ad8:	2900      	cmp	r1, #0
 8009ada:	d1f3      	bne.n	8009ac4 <UART_DMAReceiveCplt+0x68>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009adc:	2300      	movs	r3, #0
 8009ade:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ae0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d103      	bne.n	8009aee <UART_DMAReceiveCplt+0x92>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ae6:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8009ae8:	f7ff ffa8 	bl	8009a3c <HAL_UARTEx_RxEventCallback>
}
 8009aec:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8009aee:	f7fe f849 	bl	8007b84 <HAL_UART_RxCpltCallback>
}
 8009af2:	e7fb      	b.n	8009aec <UART_DMAReceiveCplt+0x90>

08009af4 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009af4:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8009af8:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009afa:	2b22      	cmp	r3, #34	@ 0x22
 8009afc:	d142      	bne.n	8009b84 <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009afe:	6881      	ldr	r1, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b00:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b02:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b06:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b08:	d13f      	bne.n	8009b8a <UART_Receive_IT.isra.0+0x96>
 8009b0a:	6901      	ldr	r1, [r0, #16]
 8009b0c:	2900      	cmp	r1, #0
 8009b0e:	d13f      	bne.n	8009b90 <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b10:	6852      	ldr	r2, [r2, #4]
 8009b12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b16:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8009b1a:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8009b1c:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d12d      	bne.n	8009b84 <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b28:	6802      	ldr	r2, [r0, #0]
 8009b2a:	68d1      	ldr	r1, [r2, #12]
 8009b2c:	f021 0120 	bic.w	r1, r1, #32
 8009b30:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b32:	68d1      	ldr	r1, [r2, #12]
 8009b34:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8009b38:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b3a:	6951      	ldr	r1, [r2, #20]
 8009b3c:	f021 0101 	bic.w	r1, r1, #1
 8009b40:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8009b42:	2220      	movs	r2, #32
 8009b44:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b48:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b4a:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8009b4c:	2a01      	cmp	r2, #1
 8009b4e:	6802      	ldr	r2, [r0, #0]
 8009b50:	d128      	bne.n	8009ba4 <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b52:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b54:	f102 030c 	add.w	r3, r2, #12
 8009b58:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b5c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b60:	f102 0c0c 	add.w	ip, r2, #12
 8009b64:	e84c 3100 	strex	r1, r3, [ip]
 8009b68:	2900      	cmp	r1, #0
 8009b6a:	d1f3      	bne.n	8009b54 <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009b6c:	6813      	ldr	r3, [r2, #0]
 8009b6e:	06db      	lsls	r3, r3, #27
 8009b70:	d505      	bpl.n	8009b7e <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b72:	9101      	str	r1, [sp, #4]
 8009b74:	6813      	ldr	r3, [r2, #0]
 8009b76:	9301      	str	r3, [sp, #4]
 8009b78:	6853      	ldr	r3, [r2, #4]
 8009b7a:	9301      	str	r3, [sp, #4]
 8009b7c:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b7e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8009b80:	f7ff ff5c 	bl	8009a3c <HAL_UARTEx_RxEventCallback>
}
 8009b84:	b003      	add	sp, #12
 8009b86:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009b8a:	b939      	cbnz	r1, 8009b9c <UART_Receive_IT.isra.0+0xa8>
 8009b8c:	6901      	ldr	r1, [r0, #16]
 8009b8e:	b929      	cbnz	r1, 8009b9c <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b90:	6852      	ldr	r2, [r2, #4]
 8009b92:	b2d2      	uxtb	r2, r2
 8009b94:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8009b96:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009b98:	3301      	adds	r3, #1
 8009b9a:	e7be      	b.n	8009b1a <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b9c:	6852      	ldr	r2, [r2, #4]
 8009b9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009ba2:	e7f7      	b.n	8009b94 <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 8009ba4:	f7fd ffee 	bl	8007b84 <HAL_UART_RxCpltCallback>
 8009ba8:	e7ec      	b.n	8009b84 <UART_Receive_IT.isra.0+0x90>
	...

08009bac <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009bac:	6803      	ldr	r3, [r0, #0]
{
 8009bae:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009bb0:	681a      	ldr	r2, [r3, #0]
{
 8009bb2:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8009bb4:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009bb6:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009bb8:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8009bba:	d108      	bne.n	8009bce <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009bbc:	0696      	lsls	r6, r2, #26
 8009bbe:	d568      	bpl.n	8009c92 <HAL_UART_IRQHandler+0xe6>
 8009bc0:	068d      	lsls	r5, r1, #26
 8009bc2:	d566      	bpl.n	8009c92 <HAL_UART_IRQHandler+0xe6>
}
 8009bc4:	b002      	add	sp, #8
 8009bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8009bca:	f7ff bf93 	b.w	8009af4 <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009bce:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009bd2:	f401 7590 	and.w	r5, r1, #288	@ 0x120
 8009bd6:	4305      	orrs	r5, r0
 8009bd8:	d05b      	beq.n	8009c92 <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009bda:	07d6      	lsls	r6, r2, #31
 8009bdc:	d505      	bpl.n	8009bea <HAL_UART_IRQHandler+0x3e>
 8009bde:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009be0:	bf42      	ittt	mi
 8009be2:	6c63      	ldrmi	r3, [r4, #68]	@ 0x44
 8009be4:	f043 0301 	orrmi.w	r3, r3, #1
 8009be8:	6463      	strmi	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009bea:	0753      	lsls	r3, r2, #29
 8009bec:	d504      	bpl.n	8009bf8 <HAL_UART_IRQHandler+0x4c>
 8009bee:	b118      	cbz	r0, 8009bf8 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009bf0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009bf2:	f043 0302 	orr.w	r3, r3, #2
 8009bf6:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009bf8:	0796      	lsls	r6, r2, #30
 8009bfa:	d504      	bpl.n	8009c06 <HAL_UART_IRQHandler+0x5a>
 8009bfc:	b118      	cbz	r0, 8009c06 <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009bfe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009c00:	f043 0304 	orr.w	r3, r3, #4
 8009c04:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009c06:	0715      	lsls	r5, r2, #28
 8009c08:	d507      	bpl.n	8009c1a <HAL_UART_IRQHandler+0x6e>
 8009c0a:	f001 0320 	and.w	r3, r1, #32
 8009c0e:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c10:	bf1e      	ittt	ne
 8009c12:	6c63      	ldrne	r3, [r4, #68]	@ 0x44
 8009c14:	f043 0308 	orrne.w	r3, r3, #8
 8009c18:	6463      	strne	r3, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c1a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d032      	beq.n	8009c86 <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c20:	0692      	lsls	r2, r2, #26
 8009c22:	d504      	bpl.n	8009c2e <HAL_UART_IRQHandler+0x82>
 8009c24:	068b      	lsls	r3, r1, #26
 8009c26:	d502      	bpl.n	8009c2e <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f7ff ff63 	bl	8009af4 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c2e:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 8009c30:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c32:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009c34:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009c3a:	f002 0208 	and.w	r2, r2, #8
 8009c3e:	ea53 0502 	orrs.w	r5, r3, r2
 8009c42:	d022      	beq.n	8009c8a <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8009c44:	f7ff fdac 	bl	80097a0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c48:	6973      	ldr	r3, [r6, #20]
 8009c4a:	065e      	lsls	r6, r3, #25
 8009c4c:	d518      	bpl.n	8009c80 <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c4e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c50:	f102 0314 	add.w	r3, r2, #20
 8009c54:	e853 3f00 	ldrex	r3, [r3]
 8009c58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5c:	3214      	adds	r2, #20
 8009c5e:	e842 3100 	strex	r1, r3, [r2]
 8009c62:	2900      	cmp	r1, #0
 8009c64:	d1f3      	bne.n	8009c4e <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 8009c66:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8009c68:	b150      	cbz	r0, 8009c80 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c6a:	4b74      	ldr	r3, [pc, #464]	@ (8009e3c <HAL_UART_IRQHandler+0x290>)
 8009c6c:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c6e:	f7fe fca1 	bl	80085b4 <HAL_DMA_Abort_IT>
 8009c72:	b140      	cbz	r0, 8009c86 <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c74:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8009c76:	6b43      	ldr	r3, [r0, #52]	@ 0x34
}
 8009c78:	b002      	add	sp, #8
 8009c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c7e:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8009c80:	4620      	mov	r0, r4
 8009c82:	f7ff fea5 	bl	80099d0 <HAL_UART_ErrorCallback>
}
 8009c86:	b002      	add	sp, #8
 8009c88:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8009c8a:	f7ff fea1 	bl	80099d0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c8e:	6465      	str	r5, [r4, #68]	@ 0x44
 8009c90:	e7f9      	b.n	8009c86 <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c92:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8009c94:	2801      	cmp	r0, #1
 8009c96:	f040 8094 	bne.w	8009dc2 <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009c9a:	06d5      	lsls	r5, r2, #27
 8009c9c:	f140 8091 	bpl.w	8009dc2 <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009ca0:	06c8      	lsls	r0, r1, #27
 8009ca2:	f140 808e 	bpl.w	8009dc2 <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	9201      	str	r2, [sp, #4]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	9201      	str	r2, [sp, #4]
 8009cae:	685a      	ldr	r2, [r3, #4]
 8009cb0:	9201      	str	r2, [sp, #4]
 8009cb2:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cb4:	695a      	ldr	r2, [r3, #20]
 8009cb6:	0652      	lsls	r2, r2, #25
 8009cb8:	d54d      	bpl.n	8009d56 <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009cba:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8009cbc:	680a      	ldr	r2, [r1, #0]
 8009cbe:	6852      	ldr	r2, [r2, #4]
 8009cc0:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8009cc2:	2a00      	cmp	r2, #0
 8009cc4:	d0df      	beq.n	8009c86 <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009cc6:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 8009cc8:	4290      	cmp	r0, r2
 8009cca:	d9dc      	bls.n	8009c86 <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 8009ccc:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009cce:	698a      	ldr	r2, [r1, #24]
 8009cd0:	2a20      	cmp	r2, #32
 8009cd2:	d036      	beq.n	8009d42 <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd4:	f103 020c 	add.w	r2, r3, #12
 8009cd8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce0:	f103 000c 	add.w	r0, r3, #12
 8009ce4:	e840 2100 	strex	r1, r2, [r0]
 8009ce8:	2900      	cmp	r1, #0
 8009cea:	d1f3      	bne.n	8009cd4 <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cec:	f103 0214 	add.w	r2, r3, #20
 8009cf0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cf4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf8:	f103 0014 	add.w	r0, r3, #20
 8009cfc:	e840 2100 	strex	r1, r2, [r0]
 8009d00:	2900      	cmp	r1, #0
 8009d02:	d1f3      	bne.n	8009cec <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d04:	f103 0214 	add.w	r2, r3, #20
 8009d08:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d10:	f103 0014 	add.w	r0, r3, #20
 8009d14:	e840 2100 	strex	r1, r2, [r0]
 8009d18:	2900      	cmp	r1, #0
 8009d1a:	d1f3      	bne.n	8009d04 <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 8009d1c:	2220      	movs	r2, #32
 8009d1e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d22:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d24:	f103 020c 	add.w	r2, r3, #12
 8009d28:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d2c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d30:	f103 000c 	add.w	r0, r3, #12
 8009d34:	e840 2100 	strex	r1, r2, [r0]
 8009d38:	2900      	cmp	r1, #0
 8009d3a:	d1f3      	bne.n	8009d24 <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d3c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8009d3e:	f7fe fc19 	bl	8008574 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d42:	2302      	movs	r3, #2
 8009d44:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d46:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8009d48:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8009d4a:	1ac9      	subs	r1, r1, r3
 8009d4c:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f7ff fe74 	bl	8009a3c <HAL_UARTEx_RxEventCallback>
 8009d54:	e797      	b.n	8009c86 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d56:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8009d58:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d5a:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 8009d5c:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d5e:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8009d60:	2800      	cmp	r0, #0
 8009d62:	d090      	beq.n	8009c86 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d64:	1a89      	subs	r1, r1, r2
 8009d66:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8009d68:	2900      	cmp	r1, #0
 8009d6a:	d08c      	beq.n	8009c86 <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6c:	f103 020c 	add.w	r2, r3, #12
 8009d70:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d74:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d78:	f103 050c 	add.w	r5, r3, #12
 8009d7c:	e845 2000 	strex	r0, r2, [r5]
 8009d80:	2800      	cmp	r0, #0
 8009d82:	d1f3      	bne.n	8009d6c <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d84:	f103 0214 	add.w	r2, r3, #20
 8009d88:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d8c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d90:	f103 0514 	add.w	r5, r3, #20
 8009d94:	e845 2000 	strex	r0, r2, [r5]
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	d1f3      	bne.n	8009d84 <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 8009d9c:	2220      	movs	r2, #32
 8009d9e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009da2:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da4:	f103 020c 	add.w	r2, r3, #12
 8009da8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dac:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db0:	f103 050c 	add.w	r5, r3, #12
 8009db4:	e845 2000 	strex	r0, r2, [r5]
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d1f3      	bne.n	8009da4 <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009dbc:	2302      	movs	r3, #2
 8009dbe:	6363      	str	r3, [r4, #52]	@ 0x34
 8009dc0:	e7c5      	b.n	8009d4e <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009dc2:	0616      	lsls	r6, r2, #24
 8009dc4:	d528      	bpl.n	8009e18 <HAL_UART_IRQHandler+0x26c>
 8009dc6:	060d      	lsls	r5, r1, #24
 8009dc8:	d526      	bpl.n	8009e18 <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009dca:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8009dce:	2a21      	cmp	r2, #33	@ 0x21
 8009dd0:	f47f af59 	bne.w	8009c86 <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009dd4:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009dd6:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009dd8:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8009ddc:	d117      	bne.n	8009e0e <HAL_UART_IRQHandler+0x262>
 8009dde:	6921      	ldr	r1, [r4, #16]
 8009de0:	b9a9      	cbnz	r1, 8009e0e <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009de2:	f832 1b02 	ldrh.w	r1, [r2], #2
 8009de6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8009dea:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009dec:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8009dee:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8009df0:	3a01      	subs	r2, #1
 8009df2:	b292      	uxth	r2, r2
 8009df4:	84e2      	strh	r2, [r4, #38]	@ 0x26
 8009df6:	2a00      	cmp	r2, #0
 8009df8:	f47f af45 	bne.w	8009c86 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009dfc:	68da      	ldr	r2, [r3, #12]
 8009dfe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009e02:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009e04:	68da      	ldr	r2, [r3, #12]
 8009e06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e0a:	60da      	str	r2, [r3, #12]
 8009e0c:	e73b      	b.n	8009c86 <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009e0e:	1c51      	adds	r1, r2, #1
 8009e10:	6221      	str	r1, [r4, #32]
 8009e12:	7812      	ldrb	r2, [r2, #0]
 8009e14:	605a      	str	r2, [r3, #4]
 8009e16:	e7ea      	b.n	8009dee <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009e18:	0650      	lsls	r0, r2, #25
 8009e1a:	f57f af34 	bpl.w	8009c86 <HAL_UART_IRQHandler+0xda>
 8009e1e:	064a      	lsls	r2, r1, #25
 8009e20:	f57f af31 	bpl.w	8009c86 <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009e24:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8009e26:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009e28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e2c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8009e2e:	2320      	movs	r3, #32
 8009e30:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8009e34:	f7fd fe92 	bl	8007b5c <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8009e38:	e725      	b.n	8009c86 <HAL_UART_IRQHandler+0xda>
 8009e3a:	bf00      	nop
 8009e3c:	08009a2d 	.word	0x08009a2d

08009e40 <UART_Start_Receive_DMA>:
{
 8009e40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e42:	4613      	mov	r3, r2
  huart->RxXferSize = Size;
 8009e44:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e46:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e48:	2222      	movs	r2, #34	@ 0x22
{
 8009e4a:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8009e4c:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e4e:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e50:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009e54:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8009e56:	4a1d      	ldr	r2, [pc, #116]	@ (8009ecc <UART_Start_Receive_DMA+0x8c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009e58:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009e5a:	6282      	str	r2, [r0, #40]	@ 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8009ed0 <UART_Start_Receive_DMA+0x90>)
 8009e5e:	62c2      	str	r2, [r0, #44]	@ 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009e60:	4a1c      	ldr	r2, [pc, #112]	@ (8009ed4 <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 8009e62:	e9c0 250c 	strd	r2, r5, [r0, #48]	@ 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009e66:	460a      	mov	r2, r1
 8009e68:	1d31      	adds	r1, r6, #4
 8009e6a:	f7fe fb47 	bl	80084fc <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009e6e:	6823      	ldr	r3, [r4, #0]
 8009e70:	9501      	str	r5, [sp, #4]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	9201      	str	r2, [sp, #4]
 8009e76:	685a      	ldr	r2, [r3, #4]
 8009e78:	9201      	str	r2, [sp, #4]
 8009e7a:	9a01      	ldr	r2, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009e7c:	6922      	ldr	r2, [r4, #16]
 8009e7e:	b15a      	cbz	r2, 8009e98 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e80:	f103 020c 	add.w	r2, r3, #12
 8009e84:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8c:	f103 000c 	add.w	r0, r3, #12
 8009e90:	e840 2100 	strex	r1, r2, [r0]
 8009e94:	2900      	cmp	r1, #0
 8009e96:	d1f3      	bne.n	8009e80 <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e98:	f103 0214 	add.w	r2, r3, #20
 8009e9c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ea0:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea4:	f103 0014 	add.w	r0, r3, #20
 8009ea8:	e840 2100 	strex	r1, r2, [r0]
 8009eac:	2900      	cmp	r1, #0
 8009eae:	d1f3      	bne.n	8009e98 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb0:	f103 0214 	add.w	r2, r3, #20
 8009eb4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009eb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebc:	f103 0114 	add.w	r1, r3, #20
 8009ec0:	e841 2000 	strex	r0, r2, [r1]
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	d1f3      	bne.n	8009eb0 <UART_Start_Receive_DMA+0x70>
}
 8009ec8:	b002      	add	sp, #8
 8009eca:	bd70      	pop	{r4, r5, r6, pc}
 8009ecc:	08009a5d 	.word	0x08009a5d
 8009ed0:	08009a3f 	.word	0x08009a3f
 8009ed4:	080099d3 	.word	0x080099d3

08009ed8 <HAL_UART_Receive_DMA>:
{
 8009ed8:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8009eda:	f890 6042 	ldrb.w	r6, [r0, #66]	@ 0x42
 8009ede:	2e20      	cmp	r6, #32
 8009ee0:	d106      	bne.n	8009ef0 <HAL_UART_Receive_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 8009ee2:	b141      	cbz	r1, 8009ef6 <HAL_UART_Receive_DMA+0x1e>
 8009ee4:	b13a      	cbz	r2, 8009ef6 <HAL_UART_Receive_DMA+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ee6:	2400      	movs	r4, #0
 8009ee8:	6304      	str	r4, [r0, #48]	@ 0x30
}
 8009eea:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009eec:	f7ff bfa8 	b.w	8009e40 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8009ef0:	2002      	movs	r0, #2
}
 8009ef2:	bc70      	pop	{r4, r5, r6}
 8009ef4:	4770      	bx	lr
      return HAL_ERROR;
 8009ef6:	2001      	movs	r0, #1
 8009ef8:	e7fb      	b.n	8009ef2 <HAL_UART_Receive_DMA+0x1a>

08009efa <atof>:
 8009efa:	2100      	movs	r1, #0
 8009efc:	f000 bec2 	b.w	800ac84 <strtod>

08009f00 <atoi>:
 8009f00:	220a      	movs	r2, #10
 8009f02:	2100      	movs	r1, #0
 8009f04:	f000 bf46 	b.w	800ad94 <strtol>

08009f08 <malloc>:
 8009f08:	4b02      	ldr	r3, [pc, #8]	@ (8009f14 <malloc+0xc>)
 8009f0a:	4601      	mov	r1, r0
 8009f0c:	6818      	ldr	r0, [r3, #0]
 8009f0e:	f000 b82d 	b.w	8009f6c <_malloc_r>
 8009f12:	bf00      	nop
 8009f14:	20000188 	.word	0x20000188

08009f18 <free>:
 8009f18:	4b02      	ldr	r3, [pc, #8]	@ (8009f24 <free+0xc>)
 8009f1a:	4601      	mov	r1, r0
 8009f1c:	6818      	ldr	r0, [r3, #0]
 8009f1e:	f002 bf97 	b.w	800ce50 <_free_r>
 8009f22:	bf00      	nop
 8009f24:	20000188 	.word	0x20000188

08009f28 <sbrk_aligned>:
 8009f28:	b570      	push	{r4, r5, r6, lr}
 8009f2a:	4e0f      	ldr	r6, [pc, #60]	@ (8009f68 <sbrk_aligned+0x40>)
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	6831      	ldr	r1, [r6, #0]
 8009f30:	4605      	mov	r5, r0
 8009f32:	b911      	cbnz	r1, 8009f3a <sbrk_aligned+0x12>
 8009f34:	f002 f8be 	bl	800c0b4 <_sbrk_r>
 8009f38:	6030      	str	r0, [r6, #0]
 8009f3a:	4621      	mov	r1, r4
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	f002 f8b9 	bl	800c0b4 <_sbrk_r>
 8009f42:	1c43      	adds	r3, r0, #1
 8009f44:	d103      	bne.n	8009f4e <sbrk_aligned+0x26>
 8009f46:	f04f 34ff 	mov.w	r4, #4294967295
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	bd70      	pop	{r4, r5, r6, pc}
 8009f4e:	1cc4      	adds	r4, r0, #3
 8009f50:	f024 0403 	bic.w	r4, r4, #3
 8009f54:	42a0      	cmp	r0, r4
 8009f56:	d0f8      	beq.n	8009f4a <sbrk_aligned+0x22>
 8009f58:	1a21      	subs	r1, r4, r0
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	f002 f8aa 	bl	800c0b4 <_sbrk_r>
 8009f60:	3001      	adds	r0, #1
 8009f62:	d1f2      	bne.n	8009f4a <sbrk_aligned+0x22>
 8009f64:	e7ef      	b.n	8009f46 <sbrk_aligned+0x1e>
 8009f66:	bf00      	nop
 8009f68:	20000bc0 	.word	0x20000bc0

08009f6c <_malloc_r>:
 8009f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f70:	1ccd      	adds	r5, r1, #3
 8009f72:	f025 0503 	bic.w	r5, r5, #3
 8009f76:	3508      	adds	r5, #8
 8009f78:	2d0c      	cmp	r5, #12
 8009f7a:	bf38      	it	cc
 8009f7c:	250c      	movcc	r5, #12
 8009f7e:	2d00      	cmp	r5, #0
 8009f80:	4606      	mov	r6, r0
 8009f82:	db01      	blt.n	8009f88 <_malloc_r+0x1c>
 8009f84:	42a9      	cmp	r1, r5
 8009f86:	d904      	bls.n	8009f92 <_malloc_r+0x26>
 8009f88:	230c      	movs	r3, #12
 8009f8a:	6033      	str	r3, [r6, #0]
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a068 <_malloc_r+0xfc>
 8009f96:	f000 f869 	bl	800a06c <__malloc_lock>
 8009f9a:	f8d8 3000 	ldr.w	r3, [r8]
 8009f9e:	461c      	mov	r4, r3
 8009fa0:	bb44      	cbnz	r4, 8009ff4 <_malloc_r+0x88>
 8009fa2:	4629      	mov	r1, r5
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	f7ff ffbf 	bl	8009f28 <sbrk_aligned>
 8009faa:	1c43      	adds	r3, r0, #1
 8009fac:	4604      	mov	r4, r0
 8009fae:	d158      	bne.n	800a062 <_malloc_r+0xf6>
 8009fb0:	f8d8 4000 	ldr.w	r4, [r8]
 8009fb4:	4627      	mov	r7, r4
 8009fb6:	2f00      	cmp	r7, #0
 8009fb8:	d143      	bne.n	800a042 <_malloc_r+0xd6>
 8009fba:	2c00      	cmp	r4, #0
 8009fbc:	d04b      	beq.n	800a056 <_malloc_r+0xea>
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	4639      	mov	r1, r7
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	eb04 0903 	add.w	r9, r4, r3
 8009fc8:	f002 f874 	bl	800c0b4 <_sbrk_r>
 8009fcc:	4581      	cmp	r9, r0
 8009fce:	d142      	bne.n	800a056 <_malloc_r+0xea>
 8009fd0:	6821      	ldr	r1, [r4, #0]
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	1a6d      	subs	r5, r5, r1
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	f7ff ffa6 	bl	8009f28 <sbrk_aligned>
 8009fdc:	3001      	adds	r0, #1
 8009fde:	d03a      	beq.n	800a056 <_malloc_r+0xea>
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	442b      	add	r3, r5
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	f8d8 3000 	ldr.w	r3, [r8]
 8009fea:	685a      	ldr	r2, [r3, #4]
 8009fec:	bb62      	cbnz	r2, 800a048 <_malloc_r+0xdc>
 8009fee:	f8c8 7000 	str.w	r7, [r8]
 8009ff2:	e00f      	b.n	800a014 <_malloc_r+0xa8>
 8009ff4:	6822      	ldr	r2, [r4, #0]
 8009ff6:	1b52      	subs	r2, r2, r5
 8009ff8:	d420      	bmi.n	800a03c <_malloc_r+0xd0>
 8009ffa:	2a0b      	cmp	r2, #11
 8009ffc:	d917      	bls.n	800a02e <_malloc_r+0xc2>
 8009ffe:	1961      	adds	r1, r4, r5
 800a000:	42a3      	cmp	r3, r4
 800a002:	6025      	str	r5, [r4, #0]
 800a004:	bf18      	it	ne
 800a006:	6059      	strne	r1, [r3, #4]
 800a008:	6863      	ldr	r3, [r4, #4]
 800a00a:	bf08      	it	eq
 800a00c:	f8c8 1000 	streq.w	r1, [r8]
 800a010:	5162      	str	r2, [r4, r5]
 800a012:	604b      	str	r3, [r1, #4]
 800a014:	4630      	mov	r0, r6
 800a016:	f000 f82f 	bl	800a078 <__malloc_unlock>
 800a01a:	f104 000b 	add.w	r0, r4, #11
 800a01e:	1d23      	adds	r3, r4, #4
 800a020:	f020 0007 	bic.w	r0, r0, #7
 800a024:	1ac2      	subs	r2, r0, r3
 800a026:	bf1c      	itt	ne
 800a028:	1a1b      	subne	r3, r3, r0
 800a02a:	50a3      	strne	r3, [r4, r2]
 800a02c:	e7af      	b.n	8009f8e <_malloc_r+0x22>
 800a02e:	6862      	ldr	r2, [r4, #4]
 800a030:	42a3      	cmp	r3, r4
 800a032:	bf0c      	ite	eq
 800a034:	f8c8 2000 	streq.w	r2, [r8]
 800a038:	605a      	strne	r2, [r3, #4]
 800a03a:	e7eb      	b.n	800a014 <_malloc_r+0xa8>
 800a03c:	4623      	mov	r3, r4
 800a03e:	6864      	ldr	r4, [r4, #4]
 800a040:	e7ae      	b.n	8009fa0 <_malloc_r+0x34>
 800a042:	463c      	mov	r4, r7
 800a044:	687f      	ldr	r7, [r7, #4]
 800a046:	e7b6      	b.n	8009fb6 <_malloc_r+0x4a>
 800a048:	461a      	mov	r2, r3
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	42a3      	cmp	r3, r4
 800a04e:	d1fb      	bne.n	800a048 <_malloc_r+0xdc>
 800a050:	2300      	movs	r3, #0
 800a052:	6053      	str	r3, [r2, #4]
 800a054:	e7de      	b.n	800a014 <_malloc_r+0xa8>
 800a056:	230c      	movs	r3, #12
 800a058:	4630      	mov	r0, r6
 800a05a:	6033      	str	r3, [r6, #0]
 800a05c:	f000 f80c 	bl	800a078 <__malloc_unlock>
 800a060:	e794      	b.n	8009f8c <_malloc_r+0x20>
 800a062:	6005      	str	r5, [r0, #0]
 800a064:	e7d6      	b.n	800a014 <_malloc_r+0xa8>
 800a066:	bf00      	nop
 800a068:	20000bc4 	.word	0x20000bc4

0800a06c <__malloc_lock>:
 800a06c:	4801      	ldr	r0, [pc, #4]	@ (800a074 <__malloc_lock+0x8>)
 800a06e:	f002 b86e 	b.w	800c14e <__retarget_lock_acquire_recursive>
 800a072:	bf00      	nop
 800a074:	20000d08 	.word	0x20000d08

0800a078 <__malloc_unlock>:
 800a078:	4801      	ldr	r0, [pc, #4]	@ (800a080 <__malloc_unlock+0x8>)
 800a07a:	f002 b869 	b.w	800c150 <__retarget_lock_release_recursive>
 800a07e:	bf00      	nop
 800a080:	20000d08 	.word	0x20000d08

0800a084 <sulp>:
 800a084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a088:	460f      	mov	r7, r1
 800a08a:	4690      	mov	r8, r2
 800a08c:	f003 fde6 	bl	800dc5c <__ulp>
 800a090:	4604      	mov	r4, r0
 800a092:	460d      	mov	r5, r1
 800a094:	f1b8 0f00 	cmp.w	r8, #0
 800a098:	d011      	beq.n	800a0be <sulp+0x3a>
 800a09a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a09e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	dd0b      	ble.n	800a0be <sulp+0x3a>
 800a0a6:	2400      	movs	r4, #0
 800a0a8:	051b      	lsls	r3, r3, #20
 800a0aa:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a0ae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a0b2:	4622      	mov	r2, r4
 800a0b4:	462b      	mov	r3, r5
 800a0b6:	f7f6 fa19 	bl	80004ec <__aeabi_dmul>
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	460d      	mov	r5, r1
 800a0be:	4620      	mov	r0, r4
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a0c8 <_strtod_l>:
 800a0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0cc:	b09f      	sub	sp, #124	@ 0x7c
 800a0ce:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	460c      	mov	r4, r1
 800a0d4:	921a      	str	r2, [sp, #104]	@ 0x68
 800a0d6:	f04f 0a00 	mov.w	sl, #0
 800a0da:	f04f 0b00 	mov.w	fp, #0
 800a0de:	460a      	mov	r2, r1
 800a0e0:	9005      	str	r0, [sp, #20]
 800a0e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0e4:	7811      	ldrb	r1, [r2, #0]
 800a0e6:	292b      	cmp	r1, #43	@ 0x2b
 800a0e8:	d048      	beq.n	800a17c <_strtod_l+0xb4>
 800a0ea:	d836      	bhi.n	800a15a <_strtod_l+0x92>
 800a0ec:	290d      	cmp	r1, #13
 800a0ee:	d830      	bhi.n	800a152 <_strtod_l+0x8a>
 800a0f0:	2908      	cmp	r1, #8
 800a0f2:	d830      	bhi.n	800a156 <_strtod_l+0x8e>
 800a0f4:	2900      	cmp	r1, #0
 800a0f6:	d039      	beq.n	800a16c <_strtod_l+0xa4>
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a0fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a0fe:	782a      	ldrb	r2, [r5, #0]
 800a100:	2a30      	cmp	r2, #48	@ 0x30
 800a102:	f040 80b1 	bne.w	800a268 <_strtod_l+0x1a0>
 800a106:	786a      	ldrb	r2, [r5, #1]
 800a108:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a10c:	2a58      	cmp	r2, #88	@ 0x58
 800a10e:	d16c      	bne.n	800a1ea <_strtod_l+0x122>
 800a110:	9302      	str	r3, [sp, #8]
 800a112:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a114:	4a8e      	ldr	r2, [pc, #568]	@ (800a350 <_strtod_l+0x288>)
 800a116:	9301      	str	r3, [sp, #4]
 800a118:	ab1a      	add	r3, sp, #104	@ 0x68
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	9805      	ldr	r0, [sp, #20]
 800a11e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a120:	a919      	add	r1, sp, #100	@ 0x64
 800a122:	f002 ff45 	bl	800cfb0 <__gethex>
 800a126:	f010 060f 	ands.w	r6, r0, #15
 800a12a:	4604      	mov	r4, r0
 800a12c:	d005      	beq.n	800a13a <_strtod_l+0x72>
 800a12e:	2e06      	cmp	r6, #6
 800a130:	d126      	bne.n	800a180 <_strtod_l+0xb8>
 800a132:	2300      	movs	r3, #0
 800a134:	3501      	adds	r5, #1
 800a136:	9519      	str	r5, [sp, #100]	@ 0x64
 800a138:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a13a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f040 8584 	bne.w	800ac4a <_strtod_l+0xb82>
 800a142:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a144:	b1bb      	cbz	r3, 800a176 <_strtod_l+0xae>
 800a146:	4650      	mov	r0, sl
 800a148:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800a14c:	b01f      	add	sp, #124	@ 0x7c
 800a14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a152:	2920      	cmp	r1, #32
 800a154:	d1d0      	bne.n	800a0f8 <_strtod_l+0x30>
 800a156:	3201      	adds	r2, #1
 800a158:	e7c3      	b.n	800a0e2 <_strtod_l+0x1a>
 800a15a:	292d      	cmp	r1, #45	@ 0x2d
 800a15c:	d1cc      	bne.n	800a0f8 <_strtod_l+0x30>
 800a15e:	2101      	movs	r1, #1
 800a160:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a162:	1c51      	adds	r1, r2, #1
 800a164:	9119      	str	r1, [sp, #100]	@ 0x64
 800a166:	7852      	ldrb	r2, [r2, #1]
 800a168:	2a00      	cmp	r2, #0
 800a16a:	d1c7      	bne.n	800a0fc <_strtod_l+0x34>
 800a16c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a16e:	9419      	str	r4, [sp, #100]	@ 0x64
 800a170:	2b00      	cmp	r3, #0
 800a172:	f040 8568 	bne.w	800ac46 <_strtod_l+0xb7e>
 800a176:	4650      	mov	r0, sl
 800a178:	4659      	mov	r1, fp
 800a17a:	e7e7      	b.n	800a14c <_strtod_l+0x84>
 800a17c:	2100      	movs	r1, #0
 800a17e:	e7ef      	b.n	800a160 <_strtod_l+0x98>
 800a180:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a182:	b13a      	cbz	r2, 800a194 <_strtod_l+0xcc>
 800a184:	2135      	movs	r1, #53	@ 0x35
 800a186:	a81c      	add	r0, sp, #112	@ 0x70
 800a188:	f003 fe58 	bl	800de3c <__copybits>
 800a18c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a18e:	9805      	ldr	r0, [sp, #20]
 800a190:	f003 fa32 	bl	800d5f8 <_Bfree>
 800a194:	3e01      	subs	r6, #1
 800a196:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a198:	2e04      	cmp	r6, #4
 800a19a:	d806      	bhi.n	800a1aa <_strtod_l+0xe2>
 800a19c:	e8df f006 	tbb	[pc, r6]
 800a1a0:	201d0314 	.word	0x201d0314
 800a1a4:	14          	.byte	0x14
 800a1a5:	00          	.byte	0x00
 800a1a6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a1aa:	05e1      	lsls	r1, r4, #23
 800a1ac:	bf48      	it	mi
 800a1ae:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a1b2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a1b6:	0d1b      	lsrs	r3, r3, #20
 800a1b8:	051b      	lsls	r3, r3, #20
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d1bd      	bne.n	800a13a <_strtod_l+0x72>
 800a1be:	f001 ff9b 	bl	800c0f8 <__errno>
 800a1c2:	2322      	movs	r3, #34	@ 0x22
 800a1c4:	6003      	str	r3, [r0, #0]
 800a1c6:	e7b8      	b.n	800a13a <_strtod_l+0x72>
 800a1c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a1cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a1d0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a1d4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a1d8:	e7e7      	b.n	800a1aa <_strtod_l+0xe2>
 800a1da:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800a354 <_strtod_l+0x28c>
 800a1de:	e7e4      	b.n	800a1aa <_strtod_l+0xe2>
 800a1e0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a1e4:	f04f 3aff 	mov.w	sl, #4294967295
 800a1e8:	e7df      	b.n	800a1aa <_strtod_l+0xe2>
 800a1ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1ec:	1c5a      	adds	r2, r3, #1
 800a1ee:	9219      	str	r2, [sp, #100]	@ 0x64
 800a1f0:	785b      	ldrb	r3, [r3, #1]
 800a1f2:	2b30      	cmp	r3, #48	@ 0x30
 800a1f4:	d0f9      	beq.n	800a1ea <_strtod_l+0x122>
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d09f      	beq.n	800a13a <_strtod_l+0x72>
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a200:	220a      	movs	r2, #10
 800a202:	930c      	str	r3, [sp, #48]	@ 0x30
 800a204:	2300      	movs	r3, #0
 800a206:	461f      	mov	r7, r3
 800a208:	9308      	str	r3, [sp, #32]
 800a20a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a20c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a20e:	7805      	ldrb	r5, [r0, #0]
 800a210:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a214:	b2d9      	uxtb	r1, r3
 800a216:	2909      	cmp	r1, #9
 800a218:	d928      	bls.n	800a26c <_strtod_l+0x1a4>
 800a21a:	2201      	movs	r2, #1
 800a21c:	494e      	ldr	r1, [pc, #312]	@ (800a358 <_strtod_l+0x290>)
 800a21e:	f001 fec1 	bl	800bfa4 <strncmp>
 800a222:	2800      	cmp	r0, #0
 800a224:	d032      	beq.n	800a28c <_strtod_l+0x1c4>
 800a226:	2000      	movs	r0, #0
 800a228:	462a      	mov	r2, r5
 800a22a:	4681      	mov	r9, r0
 800a22c:	463d      	mov	r5, r7
 800a22e:	4603      	mov	r3, r0
 800a230:	2a65      	cmp	r2, #101	@ 0x65
 800a232:	d001      	beq.n	800a238 <_strtod_l+0x170>
 800a234:	2a45      	cmp	r2, #69	@ 0x45
 800a236:	d114      	bne.n	800a262 <_strtod_l+0x19a>
 800a238:	b91d      	cbnz	r5, 800a242 <_strtod_l+0x17a>
 800a23a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a23c:	4302      	orrs	r2, r0
 800a23e:	d095      	beq.n	800a16c <_strtod_l+0xa4>
 800a240:	2500      	movs	r5, #0
 800a242:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a244:	1c62      	adds	r2, r4, #1
 800a246:	9219      	str	r2, [sp, #100]	@ 0x64
 800a248:	7862      	ldrb	r2, [r4, #1]
 800a24a:	2a2b      	cmp	r2, #43	@ 0x2b
 800a24c:	d077      	beq.n	800a33e <_strtod_l+0x276>
 800a24e:	2a2d      	cmp	r2, #45	@ 0x2d
 800a250:	d07b      	beq.n	800a34a <_strtod_l+0x282>
 800a252:	f04f 0c00 	mov.w	ip, #0
 800a256:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a25a:	2909      	cmp	r1, #9
 800a25c:	f240 8082 	bls.w	800a364 <_strtod_l+0x29c>
 800a260:	9419      	str	r4, [sp, #100]	@ 0x64
 800a262:	f04f 0800 	mov.w	r8, #0
 800a266:	e0a2      	b.n	800a3ae <_strtod_l+0x2e6>
 800a268:	2300      	movs	r3, #0
 800a26a:	e7c7      	b.n	800a1fc <_strtod_l+0x134>
 800a26c:	2f08      	cmp	r7, #8
 800a26e:	bfd5      	itete	le
 800a270:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a272:	9908      	ldrgt	r1, [sp, #32]
 800a274:	fb02 3301 	mlale	r3, r2, r1, r3
 800a278:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a27c:	f100 0001 	add.w	r0, r0, #1
 800a280:	bfd4      	ite	le
 800a282:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a284:	9308      	strgt	r3, [sp, #32]
 800a286:	3701      	adds	r7, #1
 800a288:	9019      	str	r0, [sp, #100]	@ 0x64
 800a28a:	e7bf      	b.n	800a20c <_strtod_l+0x144>
 800a28c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a28e:	1c5a      	adds	r2, r3, #1
 800a290:	9219      	str	r2, [sp, #100]	@ 0x64
 800a292:	785a      	ldrb	r2, [r3, #1]
 800a294:	b37f      	cbz	r7, 800a2f6 <_strtod_l+0x22e>
 800a296:	4681      	mov	r9, r0
 800a298:	463d      	mov	r5, r7
 800a29a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a29e:	2b09      	cmp	r3, #9
 800a2a0:	d912      	bls.n	800a2c8 <_strtod_l+0x200>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e7c4      	b.n	800a230 <_strtod_l+0x168>
 800a2a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	1c5a      	adds	r2, r3, #1
 800a2ac:	9219      	str	r2, [sp, #100]	@ 0x64
 800a2ae:	785a      	ldrb	r2, [r3, #1]
 800a2b0:	2a30      	cmp	r2, #48	@ 0x30
 800a2b2:	d0f8      	beq.n	800a2a6 <_strtod_l+0x1de>
 800a2b4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a2b8:	2b08      	cmp	r3, #8
 800a2ba:	f200 84cb 	bhi.w	800ac54 <_strtod_l+0xb8c>
 800a2be:	4681      	mov	r9, r0
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2c6:	930c      	str	r3, [sp, #48]	@ 0x30
 800a2c8:	3a30      	subs	r2, #48	@ 0x30
 800a2ca:	f100 0301 	add.w	r3, r0, #1
 800a2ce:	d02a      	beq.n	800a326 <_strtod_l+0x25e>
 800a2d0:	4499      	add	r9, r3
 800a2d2:	210a      	movs	r1, #10
 800a2d4:	462b      	mov	r3, r5
 800a2d6:	eb00 0c05 	add.w	ip, r0, r5
 800a2da:	4563      	cmp	r3, ip
 800a2dc:	d10d      	bne.n	800a2fa <_strtod_l+0x232>
 800a2de:	1c69      	adds	r1, r5, #1
 800a2e0:	4401      	add	r1, r0
 800a2e2:	4428      	add	r0, r5
 800a2e4:	2808      	cmp	r0, #8
 800a2e6:	dc16      	bgt.n	800a316 <_strtod_l+0x24e>
 800a2e8:	230a      	movs	r3, #10
 800a2ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a2ec:	fb03 2300 	mla	r3, r3, r0, r2
 800a2f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	e018      	b.n	800a328 <_strtod_l+0x260>
 800a2f6:	4638      	mov	r0, r7
 800a2f8:	e7da      	b.n	800a2b0 <_strtod_l+0x1e8>
 800a2fa:	2b08      	cmp	r3, #8
 800a2fc:	f103 0301 	add.w	r3, r3, #1
 800a300:	dc03      	bgt.n	800a30a <_strtod_l+0x242>
 800a302:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a304:	434e      	muls	r6, r1
 800a306:	960a      	str	r6, [sp, #40]	@ 0x28
 800a308:	e7e7      	b.n	800a2da <_strtod_l+0x212>
 800a30a:	2b10      	cmp	r3, #16
 800a30c:	bfde      	ittt	le
 800a30e:	9e08      	ldrle	r6, [sp, #32]
 800a310:	434e      	mulle	r6, r1
 800a312:	9608      	strle	r6, [sp, #32]
 800a314:	e7e1      	b.n	800a2da <_strtod_l+0x212>
 800a316:	280f      	cmp	r0, #15
 800a318:	dceb      	bgt.n	800a2f2 <_strtod_l+0x22a>
 800a31a:	230a      	movs	r3, #10
 800a31c:	9808      	ldr	r0, [sp, #32]
 800a31e:	fb03 2300 	mla	r3, r3, r0, r2
 800a322:	9308      	str	r3, [sp, #32]
 800a324:	e7e5      	b.n	800a2f2 <_strtod_l+0x22a>
 800a326:	4629      	mov	r1, r5
 800a328:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a32a:	460d      	mov	r5, r1
 800a32c:	1c50      	adds	r0, r2, #1
 800a32e:	9019      	str	r0, [sp, #100]	@ 0x64
 800a330:	7852      	ldrb	r2, [r2, #1]
 800a332:	4618      	mov	r0, r3
 800a334:	e7b1      	b.n	800a29a <_strtod_l+0x1d2>
 800a336:	f04f 0900 	mov.w	r9, #0
 800a33a:	2301      	movs	r3, #1
 800a33c:	e77d      	b.n	800a23a <_strtod_l+0x172>
 800a33e:	f04f 0c00 	mov.w	ip, #0
 800a342:	1ca2      	adds	r2, r4, #2
 800a344:	9219      	str	r2, [sp, #100]	@ 0x64
 800a346:	78a2      	ldrb	r2, [r4, #2]
 800a348:	e785      	b.n	800a256 <_strtod_l+0x18e>
 800a34a:	f04f 0c01 	mov.w	ip, #1
 800a34e:	e7f8      	b.n	800a342 <_strtod_l+0x27a>
 800a350:	0800f37c 	.word	0x0800f37c
 800a354:	7ff00000 	.word	0x7ff00000
 800a358:	0800e952 	.word	0x0800e952
 800a35c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a35e:	1c51      	adds	r1, r2, #1
 800a360:	9119      	str	r1, [sp, #100]	@ 0x64
 800a362:	7852      	ldrb	r2, [r2, #1]
 800a364:	2a30      	cmp	r2, #48	@ 0x30
 800a366:	d0f9      	beq.n	800a35c <_strtod_l+0x294>
 800a368:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a36c:	2908      	cmp	r1, #8
 800a36e:	f63f af78 	bhi.w	800a262 <_strtod_l+0x19a>
 800a372:	f04f 080a 	mov.w	r8, #10
 800a376:	3a30      	subs	r2, #48	@ 0x30
 800a378:	920e      	str	r2, [sp, #56]	@ 0x38
 800a37a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a37c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a37e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a380:	1c56      	adds	r6, r2, #1
 800a382:	9619      	str	r6, [sp, #100]	@ 0x64
 800a384:	7852      	ldrb	r2, [r2, #1]
 800a386:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a38a:	f1be 0f09 	cmp.w	lr, #9
 800a38e:	d939      	bls.n	800a404 <_strtod_l+0x33c>
 800a390:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a392:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a396:	1a76      	subs	r6, r6, r1
 800a398:	2e08      	cmp	r6, #8
 800a39a:	dc03      	bgt.n	800a3a4 <_strtod_l+0x2dc>
 800a39c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a39e:	4588      	cmp	r8, r1
 800a3a0:	bfa8      	it	ge
 800a3a2:	4688      	movge	r8, r1
 800a3a4:	f1bc 0f00 	cmp.w	ip, #0
 800a3a8:	d001      	beq.n	800a3ae <_strtod_l+0x2e6>
 800a3aa:	f1c8 0800 	rsb	r8, r8, #0
 800a3ae:	2d00      	cmp	r5, #0
 800a3b0:	d14e      	bne.n	800a450 <_strtod_l+0x388>
 800a3b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3b4:	4308      	orrs	r0, r1
 800a3b6:	f47f aec0 	bne.w	800a13a <_strtod_l+0x72>
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f47f aed6 	bne.w	800a16c <_strtod_l+0xa4>
 800a3c0:	2a69      	cmp	r2, #105	@ 0x69
 800a3c2:	d028      	beq.n	800a416 <_strtod_l+0x34e>
 800a3c4:	dc25      	bgt.n	800a412 <_strtod_l+0x34a>
 800a3c6:	2a49      	cmp	r2, #73	@ 0x49
 800a3c8:	d025      	beq.n	800a416 <_strtod_l+0x34e>
 800a3ca:	2a4e      	cmp	r2, #78	@ 0x4e
 800a3cc:	f47f aece 	bne.w	800a16c <_strtod_l+0xa4>
 800a3d0:	499a      	ldr	r1, [pc, #616]	@ (800a63c <_strtod_l+0x574>)
 800a3d2:	a819      	add	r0, sp, #100	@ 0x64
 800a3d4:	f003 f80e 	bl	800d3f4 <__match>
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	f43f aec7 	beq.w	800a16c <_strtod_l+0xa4>
 800a3de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	2b28      	cmp	r3, #40	@ 0x28
 800a3e4:	d12e      	bne.n	800a444 <_strtod_l+0x37c>
 800a3e6:	4996      	ldr	r1, [pc, #600]	@ (800a640 <_strtod_l+0x578>)
 800a3e8:	aa1c      	add	r2, sp, #112	@ 0x70
 800a3ea:	a819      	add	r0, sp, #100	@ 0x64
 800a3ec:	f003 f816 	bl	800d41c <__hexnan>
 800a3f0:	2805      	cmp	r0, #5
 800a3f2:	d127      	bne.n	800a444 <_strtod_l+0x37c>
 800a3f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a3f6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a3fa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a3fe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a402:	e69a      	b.n	800a13a <_strtod_l+0x72>
 800a404:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a406:	fb08 2101 	mla	r1, r8, r1, r2
 800a40a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a40e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a410:	e7b5      	b.n	800a37e <_strtod_l+0x2b6>
 800a412:	2a6e      	cmp	r2, #110	@ 0x6e
 800a414:	e7da      	b.n	800a3cc <_strtod_l+0x304>
 800a416:	498b      	ldr	r1, [pc, #556]	@ (800a644 <_strtod_l+0x57c>)
 800a418:	a819      	add	r0, sp, #100	@ 0x64
 800a41a:	f002 ffeb 	bl	800d3f4 <__match>
 800a41e:	2800      	cmp	r0, #0
 800a420:	f43f aea4 	beq.w	800a16c <_strtod_l+0xa4>
 800a424:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a426:	4988      	ldr	r1, [pc, #544]	@ (800a648 <_strtod_l+0x580>)
 800a428:	3b01      	subs	r3, #1
 800a42a:	a819      	add	r0, sp, #100	@ 0x64
 800a42c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a42e:	f002 ffe1 	bl	800d3f4 <__match>
 800a432:	b910      	cbnz	r0, 800a43a <_strtod_l+0x372>
 800a434:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a436:	3301      	adds	r3, #1
 800a438:	9319      	str	r3, [sp, #100]	@ 0x64
 800a43a:	f04f 0a00 	mov.w	sl, #0
 800a43e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800a64c <_strtod_l+0x584>
 800a442:	e67a      	b.n	800a13a <_strtod_l+0x72>
 800a444:	4882      	ldr	r0, [pc, #520]	@ (800a650 <_strtod_l+0x588>)
 800a446:	f001 fea9 	bl	800c19c <nan>
 800a44a:	4682      	mov	sl, r0
 800a44c:	468b      	mov	fp, r1
 800a44e:	e674      	b.n	800a13a <_strtod_l+0x72>
 800a450:	eba8 0309 	sub.w	r3, r8, r9
 800a454:	2f00      	cmp	r7, #0
 800a456:	bf08      	it	eq
 800a458:	462f      	moveq	r7, r5
 800a45a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a45c:	2d10      	cmp	r5, #16
 800a45e:	462c      	mov	r4, r5
 800a460:	9309      	str	r3, [sp, #36]	@ 0x24
 800a462:	bfa8      	it	ge
 800a464:	2410      	movge	r4, #16
 800a466:	f7f5 ffc7 	bl	80003f8 <__aeabi_ui2d>
 800a46a:	2d09      	cmp	r5, #9
 800a46c:	4682      	mov	sl, r0
 800a46e:	468b      	mov	fp, r1
 800a470:	dc11      	bgt.n	800a496 <_strtod_l+0x3ce>
 800a472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a474:	2b00      	cmp	r3, #0
 800a476:	f43f ae60 	beq.w	800a13a <_strtod_l+0x72>
 800a47a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a47c:	dd76      	ble.n	800a56c <_strtod_l+0x4a4>
 800a47e:	2b16      	cmp	r3, #22
 800a480:	dc5d      	bgt.n	800a53e <_strtod_l+0x476>
 800a482:	4974      	ldr	r1, [pc, #464]	@ (800a654 <_strtod_l+0x58c>)
 800a484:	4652      	mov	r2, sl
 800a486:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a48a:	465b      	mov	r3, fp
 800a48c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a490:	f7f6 f82c 	bl	80004ec <__aeabi_dmul>
 800a494:	e7d9      	b.n	800a44a <_strtod_l+0x382>
 800a496:	4b6f      	ldr	r3, [pc, #444]	@ (800a654 <_strtod_l+0x58c>)
 800a498:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a49c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a4a0:	f7f6 f824 	bl	80004ec <__aeabi_dmul>
 800a4a4:	4682      	mov	sl, r0
 800a4a6:	9808      	ldr	r0, [sp, #32]
 800a4a8:	468b      	mov	fp, r1
 800a4aa:	f7f5 ffa5 	bl	80003f8 <__aeabi_ui2d>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	4650      	mov	r0, sl
 800a4b4:	4659      	mov	r1, fp
 800a4b6:	f7f5 fe63 	bl	8000180 <__adddf3>
 800a4ba:	2d0f      	cmp	r5, #15
 800a4bc:	4682      	mov	sl, r0
 800a4be:	468b      	mov	fp, r1
 800a4c0:	ddd7      	ble.n	800a472 <_strtod_l+0x3aa>
 800a4c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4c4:	1b2c      	subs	r4, r5, r4
 800a4c6:	441c      	add	r4, r3
 800a4c8:	2c00      	cmp	r4, #0
 800a4ca:	f340 8096 	ble.w	800a5fa <_strtod_l+0x532>
 800a4ce:	f014 030f 	ands.w	r3, r4, #15
 800a4d2:	d00a      	beq.n	800a4ea <_strtod_l+0x422>
 800a4d4:	495f      	ldr	r1, [pc, #380]	@ (800a654 <_strtod_l+0x58c>)
 800a4d6:	4652      	mov	r2, sl
 800a4d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a4dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4e0:	465b      	mov	r3, fp
 800a4e2:	f7f6 f803 	bl	80004ec <__aeabi_dmul>
 800a4e6:	4682      	mov	sl, r0
 800a4e8:	468b      	mov	fp, r1
 800a4ea:	f034 040f 	bics.w	r4, r4, #15
 800a4ee:	d073      	beq.n	800a5d8 <_strtod_l+0x510>
 800a4f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a4f4:	dd48      	ble.n	800a588 <_strtod_l+0x4c0>
 800a4f6:	2400      	movs	r4, #0
 800a4f8:	46a0      	mov	r8, r4
 800a4fa:	46a1      	mov	r9, r4
 800a4fc:	940a      	str	r4, [sp, #40]	@ 0x28
 800a4fe:	2322      	movs	r3, #34	@ 0x22
 800a500:	f04f 0a00 	mov.w	sl, #0
 800a504:	9a05      	ldr	r2, [sp, #20]
 800a506:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800a64c <_strtod_l+0x584>
 800a50a:	6013      	str	r3, [r2, #0]
 800a50c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f43f ae13 	beq.w	800a13a <_strtod_l+0x72>
 800a514:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a516:	9805      	ldr	r0, [sp, #20]
 800a518:	f003 f86e 	bl	800d5f8 <_Bfree>
 800a51c:	4649      	mov	r1, r9
 800a51e:	9805      	ldr	r0, [sp, #20]
 800a520:	f003 f86a 	bl	800d5f8 <_Bfree>
 800a524:	4641      	mov	r1, r8
 800a526:	9805      	ldr	r0, [sp, #20]
 800a528:	f003 f866 	bl	800d5f8 <_Bfree>
 800a52c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a52e:	9805      	ldr	r0, [sp, #20]
 800a530:	f003 f862 	bl	800d5f8 <_Bfree>
 800a534:	4621      	mov	r1, r4
 800a536:	9805      	ldr	r0, [sp, #20]
 800a538:	f003 f85e 	bl	800d5f8 <_Bfree>
 800a53c:	e5fd      	b.n	800a13a <_strtod_l+0x72>
 800a53e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a540:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a544:	4293      	cmp	r3, r2
 800a546:	dbbc      	blt.n	800a4c2 <_strtod_l+0x3fa>
 800a548:	4c42      	ldr	r4, [pc, #264]	@ (800a654 <_strtod_l+0x58c>)
 800a54a:	f1c5 050f 	rsb	r5, r5, #15
 800a54e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a552:	4652      	mov	r2, sl
 800a554:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a558:	465b      	mov	r3, fp
 800a55a:	f7f5 ffc7 	bl	80004ec <__aeabi_dmul>
 800a55e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a560:	1b5d      	subs	r5, r3, r5
 800a562:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a566:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a56a:	e791      	b.n	800a490 <_strtod_l+0x3c8>
 800a56c:	3316      	adds	r3, #22
 800a56e:	dba8      	blt.n	800a4c2 <_strtod_l+0x3fa>
 800a570:	4b38      	ldr	r3, [pc, #224]	@ (800a654 <_strtod_l+0x58c>)
 800a572:	eba9 0808 	sub.w	r8, r9, r8
 800a576:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a57a:	4650      	mov	r0, sl
 800a57c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a580:	4659      	mov	r1, fp
 800a582:	f7f6 f8dd 	bl	8000740 <__aeabi_ddiv>
 800a586:	e760      	b.n	800a44a <_strtod_l+0x382>
 800a588:	4b33      	ldr	r3, [pc, #204]	@ (800a658 <_strtod_l+0x590>)
 800a58a:	4650      	mov	r0, sl
 800a58c:	9308      	str	r3, [sp, #32]
 800a58e:	2300      	movs	r3, #0
 800a590:	4659      	mov	r1, fp
 800a592:	461e      	mov	r6, r3
 800a594:	1124      	asrs	r4, r4, #4
 800a596:	2c01      	cmp	r4, #1
 800a598:	dc21      	bgt.n	800a5de <_strtod_l+0x516>
 800a59a:	b10b      	cbz	r3, 800a5a0 <_strtod_l+0x4d8>
 800a59c:	4682      	mov	sl, r0
 800a59e:	468b      	mov	fp, r1
 800a5a0:	492d      	ldr	r1, [pc, #180]	@ (800a658 <_strtod_l+0x590>)
 800a5a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a5a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a5aa:	4652      	mov	r2, sl
 800a5ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5b0:	465b      	mov	r3, fp
 800a5b2:	f7f5 ff9b 	bl	80004ec <__aeabi_dmul>
 800a5b6:	4b25      	ldr	r3, [pc, #148]	@ (800a64c <_strtod_l+0x584>)
 800a5b8:	460a      	mov	r2, r1
 800a5ba:	400b      	ands	r3, r1
 800a5bc:	4927      	ldr	r1, [pc, #156]	@ (800a65c <_strtod_l+0x594>)
 800a5be:	4682      	mov	sl, r0
 800a5c0:	428b      	cmp	r3, r1
 800a5c2:	d898      	bhi.n	800a4f6 <_strtod_l+0x42e>
 800a5c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a5c8:	428b      	cmp	r3, r1
 800a5ca:	bf86      	itte	hi
 800a5cc:	f04f 3aff 	movhi.w	sl, #4294967295
 800a5d0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800a660 <_strtod_l+0x598>
 800a5d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a5d8:	2300      	movs	r3, #0
 800a5da:	9308      	str	r3, [sp, #32]
 800a5dc:	e07a      	b.n	800a6d4 <_strtod_l+0x60c>
 800a5de:	07e2      	lsls	r2, r4, #31
 800a5e0:	d505      	bpl.n	800a5ee <_strtod_l+0x526>
 800a5e2:	9b08      	ldr	r3, [sp, #32]
 800a5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e8:	f7f5 ff80 	bl	80004ec <__aeabi_dmul>
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	9a08      	ldr	r2, [sp, #32]
 800a5f0:	3601      	adds	r6, #1
 800a5f2:	3208      	adds	r2, #8
 800a5f4:	1064      	asrs	r4, r4, #1
 800a5f6:	9208      	str	r2, [sp, #32]
 800a5f8:	e7cd      	b.n	800a596 <_strtod_l+0x4ce>
 800a5fa:	d0ed      	beq.n	800a5d8 <_strtod_l+0x510>
 800a5fc:	4264      	negs	r4, r4
 800a5fe:	f014 020f 	ands.w	r2, r4, #15
 800a602:	d00a      	beq.n	800a61a <_strtod_l+0x552>
 800a604:	4b13      	ldr	r3, [pc, #76]	@ (800a654 <_strtod_l+0x58c>)
 800a606:	4650      	mov	r0, sl
 800a608:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a60c:	4659      	mov	r1, fp
 800a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a612:	f7f6 f895 	bl	8000740 <__aeabi_ddiv>
 800a616:	4682      	mov	sl, r0
 800a618:	468b      	mov	fp, r1
 800a61a:	1124      	asrs	r4, r4, #4
 800a61c:	d0dc      	beq.n	800a5d8 <_strtod_l+0x510>
 800a61e:	2c1f      	cmp	r4, #31
 800a620:	dd20      	ble.n	800a664 <_strtod_l+0x59c>
 800a622:	2400      	movs	r4, #0
 800a624:	46a0      	mov	r8, r4
 800a626:	46a1      	mov	r9, r4
 800a628:	940a      	str	r4, [sp, #40]	@ 0x28
 800a62a:	2322      	movs	r3, #34	@ 0x22
 800a62c:	9a05      	ldr	r2, [sp, #20]
 800a62e:	f04f 0a00 	mov.w	sl, #0
 800a632:	f04f 0b00 	mov.w	fp, #0
 800a636:	6013      	str	r3, [r2, #0]
 800a638:	e768      	b.n	800a50c <_strtod_l+0x444>
 800a63a:	bf00      	nop
 800a63c:	0800f4c6 	.word	0x0800f4c6
 800a640:	0800f368 	.word	0x0800f368
 800a644:	0800f4be 	.word	0x0800f4be
 800a648:	0800f4f9 	.word	0x0800f4f9
 800a64c:	7ff00000 	.word	0x7ff00000
 800a650:	0800ea60 	.word	0x0800ea60
 800a654:	0800f670 	.word	0x0800f670
 800a658:	0800f648 	.word	0x0800f648
 800a65c:	7ca00000 	.word	0x7ca00000
 800a660:	7fefffff 	.word	0x7fefffff
 800a664:	f014 0310 	ands.w	r3, r4, #16
 800a668:	bf18      	it	ne
 800a66a:	236a      	movne	r3, #106	@ 0x6a
 800a66c:	4650      	mov	r0, sl
 800a66e:	9308      	str	r3, [sp, #32]
 800a670:	4659      	mov	r1, fp
 800a672:	2300      	movs	r3, #0
 800a674:	4ea9      	ldr	r6, [pc, #676]	@ (800a91c <_strtod_l+0x854>)
 800a676:	07e2      	lsls	r2, r4, #31
 800a678:	d504      	bpl.n	800a684 <_strtod_l+0x5bc>
 800a67a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a67e:	f7f5 ff35 	bl	80004ec <__aeabi_dmul>
 800a682:	2301      	movs	r3, #1
 800a684:	1064      	asrs	r4, r4, #1
 800a686:	f106 0608 	add.w	r6, r6, #8
 800a68a:	d1f4      	bne.n	800a676 <_strtod_l+0x5ae>
 800a68c:	b10b      	cbz	r3, 800a692 <_strtod_l+0x5ca>
 800a68e:	4682      	mov	sl, r0
 800a690:	468b      	mov	fp, r1
 800a692:	9b08      	ldr	r3, [sp, #32]
 800a694:	b1b3      	cbz	r3, 800a6c4 <_strtod_l+0x5fc>
 800a696:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a69a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	4659      	mov	r1, fp
 800a6a2:	dd0f      	ble.n	800a6c4 <_strtod_l+0x5fc>
 800a6a4:	2b1f      	cmp	r3, #31
 800a6a6:	dd57      	ble.n	800a758 <_strtod_l+0x690>
 800a6a8:	2b34      	cmp	r3, #52	@ 0x34
 800a6aa:	bfd8      	it	le
 800a6ac:	f04f 33ff 	movle.w	r3, #4294967295
 800a6b0:	f04f 0a00 	mov.w	sl, #0
 800a6b4:	bfcf      	iteee	gt
 800a6b6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a6ba:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a6be:	4093      	lslle	r3, r2
 800a6c0:	ea03 0b01 	andle.w	fp, r3, r1
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	4650      	mov	r0, sl
 800a6ca:	4659      	mov	r1, fp
 800a6cc:	f7f6 f976 	bl	80009bc <__aeabi_dcmpeq>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	d1a6      	bne.n	800a622 <_strtod_l+0x55a>
 800a6d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6d6:	463a      	mov	r2, r7
 800a6d8:	9300      	str	r3, [sp, #0]
 800a6da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a6dc:	462b      	mov	r3, r5
 800a6de:	9805      	ldr	r0, [sp, #20]
 800a6e0:	f002 fff2 	bl	800d6c8 <__s2b>
 800a6e4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	f43f af05 	beq.w	800a4f6 <_strtod_l+0x42e>
 800a6ec:	2400      	movs	r4, #0
 800a6ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6f0:	eba9 0308 	sub.w	r3, r9, r8
 800a6f4:	2a00      	cmp	r2, #0
 800a6f6:	bfa8      	it	ge
 800a6f8:	2300      	movge	r3, #0
 800a6fa:	46a0      	mov	r8, r4
 800a6fc:	9312      	str	r3, [sp, #72]	@ 0x48
 800a6fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a702:	9316      	str	r3, [sp, #88]	@ 0x58
 800a704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a706:	9805      	ldr	r0, [sp, #20]
 800a708:	6859      	ldr	r1, [r3, #4]
 800a70a:	f002 ff35 	bl	800d578 <_Balloc>
 800a70e:	4681      	mov	r9, r0
 800a710:	2800      	cmp	r0, #0
 800a712:	f43f aef4 	beq.w	800a4fe <_strtod_l+0x436>
 800a716:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a718:	300c      	adds	r0, #12
 800a71a:	691a      	ldr	r2, [r3, #16]
 800a71c:	f103 010c 	add.w	r1, r3, #12
 800a720:	3202      	adds	r2, #2
 800a722:	0092      	lsls	r2, r2, #2
 800a724:	f001 fd2b 	bl	800c17e <memcpy>
 800a728:	ab1c      	add	r3, sp, #112	@ 0x70
 800a72a:	9301      	str	r3, [sp, #4]
 800a72c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	4652      	mov	r2, sl
 800a732:	465b      	mov	r3, fp
 800a734:	9805      	ldr	r0, [sp, #20]
 800a736:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a73a:	f003 faf7 	bl	800dd2c <__d2b>
 800a73e:	901a      	str	r0, [sp, #104]	@ 0x68
 800a740:	2800      	cmp	r0, #0
 800a742:	f43f aedc 	beq.w	800a4fe <_strtod_l+0x436>
 800a746:	2101      	movs	r1, #1
 800a748:	9805      	ldr	r0, [sp, #20]
 800a74a:	f003 f853 	bl	800d7f4 <__i2b>
 800a74e:	4680      	mov	r8, r0
 800a750:	b948      	cbnz	r0, 800a766 <_strtod_l+0x69e>
 800a752:	f04f 0800 	mov.w	r8, #0
 800a756:	e6d2      	b.n	800a4fe <_strtod_l+0x436>
 800a758:	f04f 32ff 	mov.w	r2, #4294967295
 800a75c:	fa02 f303 	lsl.w	r3, r2, r3
 800a760:	ea03 0a0a 	and.w	sl, r3, sl
 800a764:	e7ae      	b.n	800a6c4 <_strtod_l+0x5fc>
 800a766:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a768:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a76a:	2d00      	cmp	r5, #0
 800a76c:	bfab      	itete	ge
 800a76e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a770:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a772:	18ef      	addge	r7, r5, r3
 800a774:	1b5e      	sublt	r6, r3, r5
 800a776:	9b08      	ldr	r3, [sp, #32]
 800a778:	bfa8      	it	ge
 800a77a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a77c:	eba5 0503 	sub.w	r5, r5, r3
 800a780:	4415      	add	r5, r2
 800a782:	4b67      	ldr	r3, [pc, #412]	@ (800a920 <_strtod_l+0x858>)
 800a784:	f105 35ff 	add.w	r5, r5, #4294967295
 800a788:	bfb8      	it	lt
 800a78a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a78c:	429d      	cmp	r5, r3
 800a78e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a792:	da50      	bge.n	800a836 <_strtod_l+0x76e>
 800a794:	1b5b      	subs	r3, r3, r5
 800a796:	2b1f      	cmp	r3, #31
 800a798:	f04f 0101 	mov.w	r1, #1
 800a79c:	eba2 0203 	sub.w	r2, r2, r3
 800a7a0:	dc3d      	bgt.n	800a81e <_strtod_l+0x756>
 800a7a2:	fa01 f303 	lsl.w	r3, r1, r3
 800a7a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	9310      	str	r3, [sp, #64]	@ 0x40
 800a7ac:	18bd      	adds	r5, r7, r2
 800a7ae:	9b08      	ldr	r3, [sp, #32]
 800a7b0:	42af      	cmp	r7, r5
 800a7b2:	4416      	add	r6, r2
 800a7b4:	441e      	add	r6, r3
 800a7b6:	463b      	mov	r3, r7
 800a7b8:	bfa8      	it	ge
 800a7ba:	462b      	movge	r3, r5
 800a7bc:	42b3      	cmp	r3, r6
 800a7be:	bfa8      	it	ge
 800a7c0:	4633      	movge	r3, r6
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	bfc2      	ittt	gt
 800a7c6:	1aed      	subgt	r5, r5, r3
 800a7c8:	1af6      	subgt	r6, r6, r3
 800a7ca:	1aff      	subgt	r7, r7, r3
 800a7cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	dd16      	ble.n	800a800 <_strtod_l+0x738>
 800a7d2:	4641      	mov	r1, r8
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	9805      	ldr	r0, [sp, #20]
 800a7d8:	f003 f8ca 	bl	800d970 <__pow5mult>
 800a7dc:	4680      	mov	r8, r0
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	d0b7      	beq.n	800a752 <_strtod_l+0x68a>
 800a7e2:	4601      	mov	r1, r0
 800a7e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a7e6:	9805      	ldr	r0, [sp, #20]
 800a7e8:	f003 f81a 	bl	800d820 <__multiply>
 800a7ec:	900e      	str	r0, [sp, #56]	@ 0x38
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	f43f ae85 	beq.w	800a4fe <_strtod_l+0x436>
 800a7f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a7f6:	9805      	ldr	r0, [sp, #20]
 800a7f8:	f002 fefe 	bl	800d5f8 <_Bfree>
 800a7fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7fe:	931a      	str	r3, [sp, #104]	@ 0x68
 800a800:	2d00      	cmp	r5, #0
 800a802:	dc1d      	bgt.n	800a840 <_strtod_l+0x778>
 800a804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a806:	2b00      	cmp	r3, #0
 800a808:	dd23      	ble.n	800a852 <_strtod_l+0x78a>
 800a80a:	4649      	mov	r1, r9
 800a80c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a80e:	9805      	ldr	r0, [sp, #20]
 800a810:	f003 f8ae 	bl	800d970 <__pow5mult>
 800a814:	4681      	mov	r9, r0
 800a816:	b9e0      	cbnz	r0, 800a852 <_strtod_l+0x78a>
 800a818:	f04f 0900 	mov.w	r9, #0
 800a81c:	e66f      	b.n	800a4fe <_strtod_l+0x436>
 800a81e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a822:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a826:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a82a:	35e2      	adds	r5, #226	@ 0xe2
 800a82c:	fa01 f305 	lsl.w	r3, r1, r5
 800a830:	9310      	str	r3, [sp, #64]	@ 0x40
 800a832:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a834:	e7ba      	b.n	800a7ac <_strtod_l+0x6e4>
 800a836:	2300      	movs	r3, #0
 800a838:	9310      	str	r3, [sp, #64]	@ 0x40
 800a83a:	2301      	movs	r3, #1
 800a83c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a83e:	e7b5      	b.n	800a7ac <_strtod_l+0x6e4>
 800a840:	462a      	mov	r2, r5
 800a842:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a844:	9805      	ldr	r0, [sp, #20]
 800a846:	f003 f8ed 	bl	800da24 <__lshift>
 800a84a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a84c:	2800      	cmp	r0, #0
 800a84e:	d1d9      	bne.n	800a804 <_strtod_l+0x73c>
 800a850:	e655      	b.n	800a4fe <_strtod_l+0x436>
 800a852:	2e00      	cmp	r6, #0
 800a854:	dd07      	ble.n	800a866 <_strtod_l+0x79e>
 800a856:	4649      	mov	r1, r9
 800a858:	4632      	mov	r2, r6
 800a85a:	9805      	ldr	r0, [sp, #20]
 800a85c:	f003 f8e2 	bl	800da24 <__lshift>
 800a860:	4681      	mov	r9, r0
 800a862:	2800      	cmp	r0, #0
 800a864:	d0d8      	beq.n	800a818 <_strtod_l+0x750>
 800a866:	2f00      	cmp	r7, #0
 800a868:	dd08      	ble.n	800a87c <_strtod_l+0x7b4>
 800a86a:	4641      	mov	r1, r8
 800a86c:	463a      	mov	r2, r7
 800a86e:	9805      	ldr	r0, [sp, #20]
 800a870:	f003 f8d8 	bl	800da24 <__lshift>
 800a874:	4680      	mov	r8, r0
 800a876:	2800      	cmp	r0, #0
 800a878:	f43f ae41 	beq.w	800a4fe <_strtod_l+0x436>
 800a87c:	464a      	mov	r2, r9
 800a87e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a880:	9805      	ldr	r0, [sp, #20]
 800a882:	f003 f957 	bl	800db34 <__mdiff>
 800a886:	4604      	mov	r4, r0
 800a888:	2800      	cmp	r0, #0
 800a88a:	f43f ae38 	beq.w	800a4fe <_strtod_l+0x436>
 800a88e:	68c3      	ldr	r3, [r0, #12]
 800a890:	4641      	mov	r1, r8
 800a892:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a894:	2300      	movs	r3, #0
 800a896:	60c3      	str	r3, [r0, #12]
 800a898:	f003 f930 	bl	800dafc <__mcmp>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	da45      	bge.n	800a92c <_strtod_l+0x864>
 800a8a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8a2:	ea53 030a 	orrs.w	r3, r3, sl
 800a8a6:	d16b      	bne.n	800a980 <_strtod_l+0x8b8>
 800a8a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d167      	bne.n	800a980 <_strtod_l+0x8b8>
 800a8b0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a8b4:	0d1b      	lsrs	r3, r3, #20
 800a8b6:	051b      	lsls	r3, r3, #20
 800a8b8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a8bc:	d960      	bls.n	800a980 <_strtod_l+0x8b8>
 800a8be:	6963      	ldr	r3, [r4, #20]
 800a8c0:	b913      	cbnz	r3, 800a8c8 <_strtod_l+0x800>
 800a8c2:	6923      	ldr	r3, [r4, #16]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	dd5b      	ble.n	800a980 <_strtod_l+0x8b8>
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	9805      	ldr	r0, [sp, #20]
 800a8ce:	f003 f8a9 	bl	800da24 <__lshift>
 800a8d2:	4641      	mov	r1, r8
 800a8d4:	4604      	mov	r4, r0
 800a8d6:	f003 f911 	bl	800dafc <__mcmp>
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	dd50      	ble.n	800a980 <_strtod_l+0x8b8>
 800a8de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a8e2:	9a08      	ldr	r2, [sp, #32]
 800a8e4:	0d1b      	lsrs	r3, r3, #20
 800a8e6:	051b      	lsls	r3, r3, #20
 800a8e8:	2a00      	cmp	r2, #0
 800a8ea:	d06a      	beq.n	800a9c2 <_strtod_l+0x8fa>
 800a8ec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a8f0:	d867      	bhi.n	800a9c2 <_strtod_l+0x8fa>
 800a8f2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a8f6:	f67f ae98 	bls.w	800a62a <_strtod_l+0x562>
 800a8fa:	4650      	mov	r0, sl
 800a8fc:	4659      	mov	r1, fp
 800a8fe:	4b09      	ldr	r3, [pc, #36]	@ (800a924 <_strtod_l+0x85c>)
 800a900:	2200      	movs	r2, #0
 800a902:	f7f5 fdf3 	bl	80004ec <__aeabi_dmul>
 800a906:	4b08      	ldr	r3, [pc, #32]	@ (800a928 <_strtod_l+0x860>)
 800a908:	4682      	mov	sl, r0
 800a90a:	400b      	ands	r3, r1
 800a90c:	468b      	mov	fp, r1
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f47f ae00 	bne.w	800a514 <_strtod_l+0x44c>
 800a914:	2322      	movs	r3, #34	@ 0x22
 800a916:	9a05      	ldr	r2, [sp, #20]
 800a918:	6013      	str	r3, [r2, #0]
 800a91a:	e5fb      	b.n	800a514 <_strtod_l+0x44c>
 800a91c:	0800f390 	.word	0x0800f390
 800a920:	fffffc02 	.word	0xfffffc02
 800a924:	39500000 	.word	0x39500000
 800a928:	7ff00000 	.word	0x7ff00000
 800a92c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a930:	d165      	bne.n	800a9fe <_strtod_l+0x936>
 800a932:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a934:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a938:	b35a      	cbz	r2, 800a992 <_strtod_l+0x8ca>
 800a93a:	4a99      	ldr	r2, [pc, #612]	@ (800aba0 <_strtod_l+0xad8>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d12b      	bne.n	800a998 <_strtod_l+0x8d0>
 800a940:	9b08      	ldr	r3, [sp, #32]
 800a942:	4651      	mov	r1, sl
 800a944:	b303      	cbz	r3, 800a988 <_strtod_l+0x8c0>
 800a946:	465a      	mov	r2, fp
 800a948:	4b96      	ldr	r3, [pc, #600]	@ (800aba4 <_strtod_l+0xadc>)
 800a94a:	4013      	ands	r3, r2
 800a94c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a950:	f04f 32ff 	mov.w	r2, #4294967295
 800a954:	d81b      	bhi.n	800a98e <_strtod_l+0x8c6>
 800a956:	0d1b      	lsrs	r3, r3, #20
 800a958:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a95c:	fa02 f303 	lsl.w	r3, r2, r3
 800a960:	4299      	cmp	r1, r3
 800a962:	d119      	bne.n	800a998 <_strtod_l+0x8d0>
 800a964:	4b90      	ldr	r3, [pc, #576]	@ (800aba8 <_strtod_l+0xae0>)
 800a966:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a968:	429a      	cmp	r2, r3
 800a96a:	d102      	bne.n	800a972 <_strtod_l+0x8aa>
 800a96c:	3101      	adds	r1, #1
 800a96e:	f43f adc6 	beq.w	800a4fe <_strtod_l+0x436>
 800a972:	f04f 0a00 	mov.w	sl, #0
 800a976:	4b8b      	ldr	r3, [pc, #556]	@ (800aba4 <_strtod_l+0xadc>)
 800a978:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a97a:	401a      	ands	r2, r3
 800a97c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a980:	9b08      	ldr	r3, [sp, #32]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d1b9      	bne.n	800a8fa <_strtod_l+0x832>
 800a986:	e5c5      	b.n	800a514 <_strtod_l+0x44c>
 800a988:	f04f 33ff 	mov.w	r3, #4294967295
 800a98c:	e7e8      	b.n	800a960 <_strtod_l+0x898>
 800a98e:	4613      	mov	r3, r2
 800a990:	e7e6      	b.n	800a960 <_strtod_l+0x898>
 800a992:	ea53 030a 	orrs.w	r3, r3, sl
 800a996:	d0a2      	beq.n	800a8de <_strtod_l+0x816>
 800a998:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a99a:	b1db      	cbz	r3, 800a9d4 <_strtod_l+0x90c>
 800a99c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a99e:	4213      	tst	r3, r2
 800a9a0:	d0ee      	beq.n	800a980 <_strtod_l+0x8b8>
 800a9a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9a4:	4650      	mov	r0, sl
 800a9a6:	4659      	mov	r1, fp
 800a9a8:	9a08      	ldr	r2, [sp, #32]
 800a9aa:	b1bb      	cbz	r3, 800a9dc <_strtod_l+0x914>
 800a9ac:	f7ff fb6a 	bl	800a084 <sulp>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9b8:	f7f5 fbe2 	bl	8000180 <__adddf3>
 800a9bc:	4682      	mov	sl, r0
 800a9be:	468b      	mov	fp, r1
 800a9c0:	e7de      	b.n	800a980 <_strtod_l+0x8b8>
 800a9c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a9c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a9ca:	f04f 3aff 	mov.w	sl, #4294967295
 800a9ce:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a9d2:	e7d5      	b.n	800a980 <_strtod_l+0x8b8>
 800a9d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a9d6:	ea13 0f0a 	tst.w	r3, sl
 800a9da:	e7e1      	b.n	800a9a0 <_strtod_l+0x8d8>
 800a9dc:	f7ff fb52 	bl	800a084 <sulp>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9e8:	f7f5 fbc8 	bl	800017c <__aeabi_dsub>
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	4682      	mov	sl, r0
 800a9f2:	468b      	mov	fp, r1
 800a9f4:	f7f5 ffe2 	bl	80009bc <__aeabi_dcmpeq>
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	d0c1      	beq.n	800a980 <_strtod_l+0x8b8>
 800a9fc:	e615      	b.n	800a62a <_strtod_l+0x562>
 800a9fe:	4641      	mov	r1, r8
 800aa00:	4620      	mov	r0, r4
 800aa02:	f003 f9eb 	bl	800dddc <__ratio>
 800aa06:	2200      	movs	r2, #0
 800aa08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aa0c:	4606      	mov	r6, r0
 800aa0e:	460f      	mov	r7, r1
 800aa10:	f7f5 ffe8 	bl	80009e4 <__aeabi_dcmple>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	d06d      	beq.n	800aaf4 <_strtod_l+0xa2c>
 800aa18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d178      	bne.n	800ab10 <_strtod_l+0xa48>
 800aa1e:	f1ba 0f00 	cmp.w	sl, #0
 800aa22:	d156      	bne.n	800aad2 <_strtod_l+0xa0a>
 800aa24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d158      	bne.n	800aae0 <_strtod_l+0xa18>
 800aa2e:	2200      	movs	r2, #0
 800aa30:	4630      	mov	r0, r6
 800aa32:	4639      	mov	r1, r7
 800aa34:	4b5d      	ldr	r3, [pc, #372]	@ (800abac <_strtod_l+0xae4>)
 800aa36:	f7f5 ffcb 	bl	80009d0 <__aeabi_dcmplt>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	d157      	bne.n	800aaee <_strtod_l+0xa26>
 800aa3e:	4630      	mov	r0, r6
 800aa40:	4639      	mov	r1, r7
 800aa42:	2200      	movs	r2, #0
 800aa44:	4b5a      	ldr	r3, [pc, #360]	@ (800abb0 <_strtod_l+0xae8>)
 800aa46:	f7f5 fd51 	bl	80004ec <__aeabi_dmul>
 800aa4a:	4606      	mov	r6, r0
 800aa4c:	460f      	mov	r7, r1
 800aa4e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800aa52:	9606      	str	r6, [sp, #24]
 800aa54:	9307      	str	r3, [sp, #28]
 800aa56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa5a:	4d52      	ldr	r5, [pc, #328]	@ (800aba4 <_strtod_l+0xadc>)
 800aa5c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aa60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa62:	401d      	ands	r5, r3
 800aa64:	4b53      	ldr	r3, [pc, #332]	@ (800abb4 <_strtod_l+0xaec>)
 800aa66:	429d      	cmp	r5, r3
 800aa68:	f040 80aa 	bne.w	800abc0 <_strtod_l+0xaf8>
 800aa6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa6e:	4650      	mov	r0, sl
 800aa70:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800aa74:	4659      	mov	r1, fp
 800aa76:	f003 f8f1 	bl	800dc5c <__ulp>
 800aa7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa7e:	f7f5 fd35 	bl	80004ec <__aeabi_dmul>
 800aa82:	4652      	mov	r2, sl
 800aa84:	465b      	mov	r3, fp
 800aa86:	f7f5 fb7b 	bl	8000180 <__adddf3>
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	4945      	ldr	r1, [pc, #276]	@ (800aba4 <_strtod_l+0xadc>)
 800aa8e:	4a4a      	ldr	r2, [pc, #296]	@ (800abb8 <_strtod_l+0xaf0>)
 800aa90:	4019      	ands	r1, r3
 800aa92:	4291      	cmp	r1, r2
 800aa94:	4682      	mov	sl, r0
 800aa96:	d942      	bls.n	800ab1e <_strtod_l+0xa56>
 800aa98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aa9a:	4b43      	ldr	r3, [pc, #268]	@ (800aba8 <_strtod_l+0xae0>)
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d103      	bne.n	800aaa8 <_strtod_l+0x9e0>
 800aaa0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	f43f ad2b 	beq.w	800a4fe <_strtod_l+0x436>
 800aaa8:	f04f 3aff 	mov.w	sl, #4294967295
 800aaac:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800aba8 <_strtod_l+0xae0>
 800aab0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aab2:	9805      	ldr	r0, [sp, #20]
 800aab4:	f002 fda0 	bl	800d5f8 <_Bfree>
 800aab8:	4649      	mov	r1, r9
 800aaba:	9805      	ldr	r0, [sp, #20]
 800aabc:	f002 fd9c 	bl	800d5f8 <_Bfree>
 800aac0:	4641      	mov	r1, r8
 800aac2:	9805      	ldr	r0, [sp, #20]
 800aac4:	f002 fd98 	bl	800d5f8 <_Bfree>
 800aac8:	4621      	mov	r1, r4
 800aaca:	9805      	ldr	r0, [sp, #20]
 800aacc:	f002 fd94 	bl	800d5f8 <_Bfree>
 800aad0:	e618      	b.n	800a704 <_strtod_l+0x63c>
 800aad2:	f1ba 0f01 	cmp.w	sl, #1
 800aad6:	d103      	bne.n	800aae0 <_strtod_l+0xa18>
 800aad8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aada:	2b00      	cmp	r3, #0
 800aadc:	f43f ada5 	beq.w	800a62a <_strtod_l+0x562>
 800aae0:	2200      	movs	r2, #0
 800aae2:	4b36      	ldr	r3, [pc, #216]	@ (800abbc <_strtod_l+0xaf4>)
 800aae4:	2600      	movs	r6, #0
 800aae6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aaea:	4f30      	ldr	r7, [pc, #192]	@ (800abac <_strtod_l+0xae4>)
 800aaec:	e7b3      	b.n	800aa56 <_strtod_l+0x98e>
 800aaee:	2600      	movs	r6, #0
 800aaf0:	4f2f      	ldr	r7, [pc, #188]	@ (800abb0 <_strtod_l+0xae8>)
 800aaf2:	e7ac      	b.n	800aa4e <_strtod_l+0x986>
 800aaf4:	4630      	mov	r0, r6
 800aaf6:	4639      	mov	r1, r7
 800aaf8:	4b2d      	ldr	r3, [pc, #180]	@ (800abb0 <_strtod_l+0xae8>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	f7f5 fcf6 	bl	80004ec <__aeabi_dmul>
 800ab00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab02:	4606      	mov	r6, r0
 800ab04:	460f      	mov	r7, r1
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d0a1      	beq.n	800aa4e <_strtod_l+0x986>
 800ab0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ab0e:	e7a2      	b.n	800aa56 <_strtod_l+0x98e>
 800ab10:	2200      	movs	r2, #0
 800ab12:	4b26      	ldr	r3, [pc, #152]	@ (800abac <_strtod_l+0xae4>)
 800ab14:	4616      	mov	r6, r2
 800ab16:	461f      	mov	r7, r3
 800ab18:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ab1c:	e79b      	b.n	800aa56 <_strtod_l+0x98e>
 800ab1e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ab22:	9b08      	ldr	r3, [sp, #32]
 800ab24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1c1      	bne.n	800aab0 <_strtod_l+0x9e8>
 800ab2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab30:	0d1b      	lsrs	r3, r3, #20
 800ab32:	051b      	lsls	r3, r3, #20
 800ab34:	429d      	cmp	r5, r3
 800ab36:	d1bb      	bne.n	800aab0 <_strtod_l+0x9e8>
 800ab38:	4630      	mov	r0, r6
 800ab3a:	4639      	mov	r1, r7
 800ab3c:	f7f6 f836 	bl	8000bac <__aeabi_d2lz>
 800ab40:	f7f5 fca6 	bl	8000490 <__aeabi_l2d>
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	4630      	mov	r0, r6
 800ab4a:	4639      	mov	r1, r7
 800ab4c:	f7f5 fb16 	bl	800017c <__aeabi_dsub>
 800ab50:	460b      	mov	r3, r1
 800ab52:	4602      	mov	r2, r0
 800ab54:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ab58:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ab5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab5e:	ea46 060a 	orr.w	r6, r6, sl
 800ab62:	431e      	orrs	r6, r3
 800ab64:	d069      	beq.n	800ac3a <_strtod_l+0xb72>
 800ab66:	a30a      	add	r3, pc, #40	@ (adr r3, 800ab90 <_strtod_l+0xac8>)
 800ab68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6c:	f7f5 ff30 	bl	80009d0 <__aeabi_dcmplt>
 800ab70:	2800      	cmp	r0, #0
 800ab72:	f47f accf 	bne.w	800a514 <_strtod_l+0x44c>
 800ab76:	a308      	add	r3, pc, #32	@ (adr r3, 800ab98 <_strtod_l+0xad0>)
 800ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab80:	f7f5 ff44 	bl	8000a0c <__aeabi_dcmpgt>
 800ab84:	2800      	cmp	r0, #0
 800ab86:	d093      	beq.n	800aab0 <_strtod_l+0x9e8>
 800ab88:	e4c4      	b.n	800a514 <_strtod_l+0x44c>
 800ab8a:	bf00      	nop
 800ab8c:	f3af 8000 	nop.w
 800ab90:	94a03595 	.word	0x94a03595
 800ab94:	3fdfffff 	.word	0x3fdfffff
 800ab98:	35afe535 	.word	0x35afe535
 800ab9c:	3fe00000 	.word	0x3fe00000
 800aba0:	000fffff 	.word	0x000fffff
 800aba4:	7ff00000 	.word	0x7ff00000
 800aba8:	7fefffff 	.word	0x7fefffff
 800abac:	3ff00000 	.word	0x3ff00000
 800abb0:	3fe00000 	.word	0x3fe00000
 800abb4:	7fe00000 	.word	0x7fe00000
 800abb8:	7c9fffff 	.word	0x7c9fffff
 800abbc:	bff00000 	.word	0xbff00000
 800abc0:	9b08      	ldr	r3, [sp, #32]
 800abc2:	b323      	cbz	r3, 800ac0e <_strtod_l+0xb46>
 800abc4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800abc8:	d821      	bhi.n	800ac0e <_strtod_l+0xb46>
 800abca:	a327      	add	r3, pc, #156	@ (adr r3, 800ac68 <_strtod_l+0xba0>)
 800abcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd0:	4630      	mov	r0, r6
 800abd2:	4639      	mov	r1, r7
 800abd4:	f7f5 ff06 	bl	80009e4 <__aeabi_dcmple>
 800abd8:	b1a0      	cbz	r0, 800ac04 <_strtod_l+0xb3c>
 800abda:	4639      	mov	r1, r7
 800abdc:	4630      	mov	r0, r6
 800abde:	f7f5 ff5d 	bl	8000a9c <__aeabi_d2uiz>
 800abe2:	2801      	cmp	r0, #1
 800abe4:	bf38      	it	cc
 800abe6:	2001      	movcc	r0, #1
 800abe8:	f7f5 fc06 	bl	80003f8 <__aeabi_ui2d>
 800abec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abee:	4606      	mov	r6, r0
 800abf0:	460f      	mov	r7, r1
 800abf2:	b9fb      	cbnz	r3, 800ac34 <_strtod_l+0xb6c>
 800abf4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800abf8:	9014      	str	r0, [sp, #80]	@ 0x50
 800abfa:	9315      	str	r3, [sp, #84]	@ 0x54
 800abfc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ac00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ac04:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ac06:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ac0a:	1b5b      	subs	r3, r3, r5
 800ac0c:	9311      	str	r3, [sp, #68]	@ 0x44
 800ac0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac12:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ac16:	f003 f821 	bl	800dc5c <__ulp>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	4650      	mov	r0, sl
 800ac20:	4659      	mov	r1, fp
 800ac22:	f7f5 fc63 	bl	80004ec <__aeabi_dmul>
 800ac26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ac2a:	f7f5 faa9 	bl	8000180 <__adddf3>
 800ac2e:	4682      	mov	sl, r0
 800ac30:	468b      	mov	fp, r1
 800ac32:	e776      	b.n	800ab22 <_strtod_l+0xa5a>
 800ac34:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ac38:	e7e0      	b.n	800abfc <_strtod_l+0xb34>
 800ac3a:	a30d      	add	r3, pc, #52	@ (adr r3, 800ac70 <_strtod_l+0xba8>)
 800ac3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac40:	f7f5 fec6 	bl	80009d0 <__aeabi_dcmplt>
 800ac44:	e79e      	b.n	800ab84 <_strtod_l+0xabc>
 800ac46:	2300      	movs	r3, #0
 800ac48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac4c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ac4e:	6013      	str	r3, [r2, #0]
 800ac50:	f7ff ba77 	b.w	800a142 <_strtod_l+0x7a>
 800ac54:	2a65      	cmp	r2, #101	@ 0x65
 800ac56:	f43f ab6e 	beq.w	800a336 <_strtod_l+0x26e>
 800ac5a:	2a45      	cmp	r2, #69	@ 0x45
 800ac5c:	f43f ab6b 	beq.w	800a336 <_strtod_l+0x26e>
 800ac60:	2301      	movs	r3, #1
 800ac62:	f7ff bba6 	b.w	800a3b2 <_strtod_l+0x2ea>
 800ac66:	bf00      	nop
 800ac68:	ffc00000 	.word	0xffc00000
 800ac6c:	41dfffff 	.word	0x41dfffff
 800ac70:	94a03595 	.word	0x94a03595
 800ac74:	3fcfffff 	.word	0x3fcfffff

0800ac78 <_strtod_r>:
 800ac78:	4b01      	ldr	r3, [pc, #4]	@ (800ac80 <_strtod_r+0x8>)
 800ac7a:	f7ff ba25 	b.w	800a0c8 <_strtod_l>
 800ac7e:	bf00      	nop
 800ac80:	2000001c 	.word	0x2000001c

0800ac84 <strtod>:
 800ac84:	460a      	mov	r2, r1
 800ac86:	4601      	mov	r1, r0
 800ac88:	4802      	ldr	r0, [pc, #8]	@ (800ac94 <strtod+0x10>)
 800ac8a:	4b03      	ldr	r3, [pc, #12]	@ (800ac98 <strtod+0x14>)
 800ac8c:	6800      	ldr	r0, [r0, #0]
 800ac8e:	f7ff ba1b 	b.w	800a0c8 <_strtod_l>
 800ac92:	bf00      	nop
 800ac94:	20000188 	.word	0x20000188
 800ac98:	2000001c 	.word	0x2000001c

0800ac9c <_strtol_l.constprop.0>:
 800ac9c:	2b24      	cmp	r3, #36	@ 0x24
 800ac9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aca2:	4686      	mov	lr, r0
 800aca4:	4690      	mov	r8, r2
 800aca6:	d801      	bhi.n	800acac <_strtol_l.constprop.0+0x10>
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d106      	bne.n	800acba <_strtol_l.constprop.0+0x1e>
 800acac:	f001 fa24 	bl	800c0f8 <__errno>
 800acb0:	2316      	movs	r3, #22
 800acb2:	6003      	str	r3, [r0, #0]
 800acb4:	2000      	movs	r0, #0
 800acb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acba:	460d      	mov	r5, r1
 800acbc:	4833      	ldr	r0, [pc, #204]	@ (800ad8c <_strtol_l.constprop.0+0xf0>)
 800acbe:	462a      	mov	r2, r5
 800acc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acc4:	5d06      	ldrb	r6, [r0, r4]
 800acc6:	f016 0608 	ands.w	r6, r6, #8
 800acca:	d1f8      	bne.n	800acbe <_strtol_l.constprop.0+0x22>
 800accc:	2c2d      	cmp	r4, #45	@ 0x2d
 800acce:	d12d      	bne.n	800ad2c <_strtol_l.constprop.0+0x90>
 800acd0:	2601      	movs	r6, #1
 800acd2:	782c      	ldrb	r4, [r5, #0]
 800acd4:	1c95      	adds	r5, r2, #2
 800acd6:	f033 0210 	bics.w	r2, r3, #16
 800acda:	d109      	bne.n	800acf0 <_strtol_l.constprop.0+0x54>
 800acdc:	2c30      	cmp	r4, #48	@ 0x30
 800acde:	d12a      	bne.n	800ad36 <_strtol_l.constprop.0+0x9a>
 800ace0:	782a      	ldrb	r2, [r5, #0]
 800ace2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ace6:	2a58      	cmp	r2, #88	@ 0x58
 800ace8:	d125      	bne.n	800ad36 <_strtol_l.constprop.0+0x9a>
 800acea:	2310      	movs	r3, #16
 800acec:	786c      	ldrb	r4, [r5, #1]
 800acee:	3502      	adds	r5, #2
 800acf0:	2200      	movs	r2, #0
 800acf2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800acf6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800acfa:	fbbc f9f3 	udiv	r9, ip, r3
 800acfe:	4610      	mov	r0, r2
 800ad00:	fb03 ca19 	mls	sl, r3, r9, ip
 800ad04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ad08:	2f09      	cmp	r7, #9
 800ad0a:	d81b      	bhi.n	800ad44 <_strtol_l.constprop.0+0xa8>
 800ad0c:	463c      	mov	r4, r7
 800ad0e:	42a3      	cmp	r3, r4
 800ad10:	dd27      	ble.n	800ad62 <_strtol_l.constprop.0+0xc6>
 800ad12:	1c57      	adds	r7, r2, #1
 800ad14:	d007      	beq.n	800ad26 <_strtol_l.constprop.0+0x8a>
 800ad16:	4581      	cmp	r9, r0
 800ad18:	d320      	bcc.n	800ad5c <_strtol_l.constprop.0+0xc0>
 800ad1a:	d101      	bne.n	800ad20 <_strtol_l.constprop.0+0x84>
 800ad1c:	45a2      	cmp	sl, r4
 800ad1e:	db1d      	blt.n	800ad5c <_strtol_l.constprop.0+0xc0>
 800ad20:	2201      	movs	r2, #1
 800ad22:	fb00 4003 	mla	r0, r0, r3, r4
 800ad26:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad2a:	e7eb      	b.n	800ad04 <_strtol_l.constprop.0+0x68>
 800ad2c:	2c2b      	cmp	r4, #43	@ 0x2b
 800ad2e:	bf04      	itt	eq
 800ad30:	782c      	ldrbeq	r4, [r5, #0]
 800ad32:	1c95      	addeq	r5, r2, #2
 800ad34:	e7cf      	b.n	800acd6 <_strtol_l.constprop.0+0x3a>
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1da      	bne.n	800acf0 <_strtol_l.constprop.0+0x54>
 800ad3a:	2c30      	cmp	r4, #48	@ 0x30
 800ad3c:	bf0c      	ite	eq
 800ad3e:	2308      	moveq	r3, #8
 800ad40:	230a      	movne	r3, #10
 800ad42:	e7d5      	b.n	800acf0 <_strtol_l.constprop.0+0x54>
 800ad44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ad48:	2f19      	cmp	r7, #25
 800ad4a:	d801      	bhi.n	800ad50 <_strtol_l.constprop.0+0xb4>
 800ad4c:	3c37      	subs	r4, #55	@ 0x37
 800ad4e:	e7de      	b.n	800ad0e <_strtol_l.constprop.0+0x72>
 800ad50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ad54:	2f19      	cmp	r7, #25
 800ad56:	d804      	bhi.n	800ad62 <_strtol_l.constprop.0+0xc6>
 800ad58:	3c57      	subs	r4, #87	@ 0x57
 800ad5a:	e7d8      	b.n	800ad0e <_strtol_l.constprop.0+0x72>
 800ad5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad60:	e7e1      	b.n	800ad26 <_strtol_l.constprop.0+0x8a>
 800ad62:	1c53      	adds	r3, r2, #1
 800ad64:	d108      	bne.n	800ad78 <_strtol_l.constprop.0+0xdc>
 800ad66:	2322      	movs	r3, #34	@ 0x22
 800ad68:	4660      	mov	r0, ip
 800ad6a:	f8ce 3000 	str.w	r3, [lr]
 800ad6e:	f1b8 0f00 	cmp.w	r8, #0
 800ad72:	d0a0      	beq.n	800acb6 <_strtol_l.constprop.0+0x1a>
 800ad74:	1e69      	subs	r1, r5, #1
 800ad76:	e006      	b.n	800ad86 <_strtol_l.constprop.0+0xea>
 800ad78:	b106      	cbz	r6, 800ad7c <_strtol_l.constprop.0+0xe0>
 800ad7a:	4240      	negs	r0, r0
 800ad7c:	f1b8 0f00 	cmp.w	r8, #0
 800ad80:	d099      	beq.n	800acb6 <_strtol_l.constprop.0+0x1a>
 800ad82:	2a00      	cmp	r2, #0
 800ad84:	d1f6      	bne.n	800ad74 <_strtol_l.constprop.0+0xd8>
 800ad86:	f8c8 1000 	str.w	r1, [r8]
 800ad8a:	e794      	b.n	800acb6 <_strtol_l.constprop.0+0x1a>
 800ad8c:	0800f3b9 	.word	0x0800f3b9

0800ad90 <_strtol_r>:
 800ad90:	f7ff bf84 	b.w	800ac9c <_strtol_l.constprop.0>

0800ad94 <strtol>:
 800ad94:	4613      	mov	r3, r2
 800ad96:	460a      	mov	r2, r1
 800ad98:	4601      	mov	r1, r0
 800ad9a:	4802      	ldr	r0, [pc, #8]	@ (800ada4 <strtol+0x10>)
 800ad9c:	6800      	ldr	r0, [r0, #0]
 800ad9e:	f7ff bf7d 	b.w	800ac9c <_strtol_l.constprop.0>
 800ada2:	bf00      	nop
 800ada4:	20000188 	.word	0x20000188

0800ada8 <__cvt>:
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adae:	461d      	mov	r5, r3
 800adb0:	bfbb      	ittet	lt
 800adb2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800adb6:	461d      	movlt	r5, r3
 800adb8:	2300      	movge	r3, #0
 800adba:	232d      	movlt	r3, #45	@ 0x2d
 800adbc:	b088      	sub	sp, #32
 800adbe:	4614      	mov	r4, r2
 800adc0:	bfb8      	it	lt
 800adc2:	4614      	movlt	r4, r2
 800adc4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800adc6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800adc8:	7013      	strb	r3, [r2, #0]
 800adca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800adcc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800add0:	f023 0820 	bic.w	r8, r3, #32
 800add4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800add8:	d005      	beq.n	800ade6 <__cvt+0x3e>
 800adda:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800adde:	d100      	bne.n	800ade2 <__cvt+0x3a>
 800ade0:	3601      	adds	r6, #1
 800ade2:	2302      	movs	r3, #2
 800ade4:	e000      	b.n	800ade8 <__cvt+0x40>
 800ade6:	2303      	movs	r3, #3
 800ade8:	aa07      	add	r2, sp, #28
 800adea:	9204      	str	r2, [sp, #16]
 800adec:	aa06      	add	r2, sp, #24
 800adee:	e9cd a202 	strd	sl, r2, [sp, #8]
 800adf2:	e9cd 3600 	strd	r3, r6, [sp]
 800adf6:	4622      	mov	r2, r4
 800adf8:	462b      	mov	r3, r5
 800adfa:	f001 fa61 	bl	800c2c0 <_dtoa_r>
 800adfe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ae02:	4607      	mov	r7, r0
 800ae04:	d119      	bne.n	800ae3a <__cvt+0x92>
 800ae06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ae08:	07db      	lsls	r3, r3, #31
 800ae0a:	d50e      	bpl.n	800ae2a <__cvt+0x82>
 800ae0c:	eb00 0906 	add.w	r9, r0, r6
 800ae10:	2200      	movs	r2, #0
 800ae12:	2300      	movs	r3, #0
 800ae14:	4620      	mov	r0, r4
 800ae16:	4629      	mov	r1, r5
 800ae18:	f7f5 fdd0 	bl	80009bc <__aeabi_dcmpeq>
 800ae1c:	b108      	cbz	r0, 800ae22 <__cvt+0x7a>
 800ae1e:	f8cd 901c 	str.w	r9, [sp, #28]
 800ae22:	2230      	movs	r2, #48	@ 0x30
 800ae24:	9b07      	ldr	r3, [sp, #28]
 800ae26:	454b      	cmp	r3, r9
 800ae28:	d31e      	bcc.n	800ae68 <__cvt+0xc0>
 800ae2a:	4638      	mov	r0, r7
 800ae2c:	9b07      	ldr	r3, [sp, #28]
 800ae2e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ae30:	1bdb      	subs	r3, r3, r7
 800ae32:	6013      	str	r3, [r2, #0]
 800ae34:	b008      	add	sp, #32
 800ae36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae3a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ae3e:	eb00 0906 	add.w	r9, r0, r6
 800ae42:	d1e5      	bne.n	800ae10 <__cvt+0x68>
 800ae44:	7803      	ldrb	r3, [r0, #0]
 800ae46:	2b30      	cmp	r3, #48	@ 0x30
 800ae48:	d10a      	bne.n	800ae60 <__cvt+0xb8>
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	4620      	mov	r0, r4
 800ae50:	4629      	mov	r1, r5
 800ae52:	f7f5 fdb3 	bl	80009bc <__aeabi_dcmpeq>
 800ae56:	b918      	cbnz	r0, 800ae60 <__cvt+0xb8>
 800ae58:	f1c6 0601 	rsb	r6, r6, #1
 800ae5c:	f8ca 6000 	str.w	r6, [sl]
 800ae60:	f8da 3000 	ldr.w	r3, [sl]
 800ae64:	4499      	add	r9, r3
 800ae66:	e7d3      	b.n	800ae10 <__cvt+0x68>
 800ae68:	1c59      	adds	r1, r3, #1
 800ae6a:	9107      	str	r1, [sp, #28]
 800ae6c:	701a      	strb	r2, [r3, #0]
 800ae6e:	e7d9      	b.n	800ae24 <__cvt+0x7c>

0800ae70 <__exponent>:
 800ae70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae72:	2900      	cmp	r1, #0
 800ae74:	bfb6      	itet	lt
 800ae76:	232d      	movlt	r3, #45	@ 0x2d
 800ae78:	232b      	movge	r3, #43	@ 0x2b
 800ae7a:	4249      	neglt	r1, r1
 800ae7c:	2909      	cmp	r1, #9
 800ae7e:	7002      	strb	r2, [r0, #0]
 800ae80:	7043      	strb	r3, [r0, #1]
 800ae82:	dd29      	ble.n	800aed8 <__exponent+0x68>
 800ae84:	f10d 0307 	add.w	r3, sp, #7
 800ae88:	461d      	mov	r5, r3
 800ae8a:	270a      	movs	r7, #10
 800ae8c:	fbb1 f6f7 	udiv	r6, r1, r7
 800ae90:	461a      	mov	r2, r3
 800ae92:	fb07 1416 	mls	r4, r7, r6, r1
 800ae96:	3430      	adds	r4, #48	@ 0x30
 800ae98:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ae9c:	460c      	mov	r4, r1
 800ae9e:	2c63      	cmp	r4, #99	@ 0x63
 800aea0:	4631      	mov	r1, r6
 800aea2:	f103 33ff 	add.w	r3, r3, #4294967295
 800aea6:	dcf1      	bgt.n	800ae8c <__exponent+0x1c>
 800aea8:	3130      	adds	r1, #48	@ 0x30
 800aeaa:	1e94      	subs	r4, r2, #2
 800aeac:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aeb0:	4623      	mov	r3, r4
 800aeb2:	1c41      	adds	r1, r0, #1
 800aeb4:	42ab      	cmp	r3, r5
 800aeb6:	d30a      	bcc.n	800aece <__exponent+0x5e>
 800aeb8:	f10d 0309 	add.w	r3, sp, #9
 800aebc:	1a9b      	subs	r3, r3, r2
 800aebe:	42ac      	cmp	r4, r5
 800aec0:	bf88      	it	hi
 800aec2:	2300      	movhi	r3, #0
 800aec4:	3302      	adds	r3, #2
 800aec6:	4403      	add	r3, r0
 800aec8:	1a18      	subs	r0, r3, r0
 800aeca:	b003      	add	sp, #12
 800aecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aece:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aed2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800aed6:	e7ed      	b.n	800aeb4 <__exponent+0x44>
 800aed8:	2330      	movs	r3, #48	@ 0x30
 800aeda:	3130      	adds	r1, #48	@ 0x30
 800aedc:	7083      	strb	r3, [r0, #2]
 800aede:	70c1      	strb	r1, [r0, #3]
 800aee0:	1d03      	adds	r3, r0, #4
 800aee2:	e7f1      	b.n	800aec8 <__exponent+0x58>

0800aee4 <_printf_float>:
 800aee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee8:	b091      	sub	sp, #68	@ 0x44
 800aeea:	460c      	mov	r4, r1
 800aeec:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800aef0:	4616      	mov	r6, r2
 800aef2:	461f      	mov	r7, r3
 800aef4:	4605      	mov	r5, r0
 800aef6:	f001 f8a5 	bl	800c044 <_localeconv_r>
 800aefa:	6803      	ldr	r3, [r0, #0]
 800aefc:	4618      	mov	r0, r3
 800aefe:	9308      	str	r3, [sp, #32]
 800af00:	f7f5 f930 	bl	8000164 <strlen>
 800af04:	2300      	movs	r3, #0
 800af06:	930e      	str	r3, [sp, #56]	@ 0x38
 800af08:	f8d8 3000 	ldr.w	r3, [r8]
 800af0c:	9009      	str	r0, [sp, #36]	@ 0x24
 800af0e:	3307      	adds	r3, #7
 800af10:	f023 0307 	bic.w	r3, r3, #7
 800af14:	f103 0208 	add.w	r2, r3, #8
 800af18:	f894 a018 	ldrb.w	sl, [r4, #24]
 800af1c:	f8d4 b000 	ldr.w	fp, [r4]
 800af20:	f8c8 2000 	str.w	r2, [r8]
 800af24:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af28:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800af2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af2e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800af32:	f04f 32ff 	mov.w	r2, #4294967295
 800af36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800af3a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800af3e:	4b9c      	ldr	r3, [pc, #624]	@ (800b1b0 <_printf_float+0x2cc>)
 800af40:	f7f5 fd6e 	bl	8000a20 <__aeabi_dcmpun>
 800af44:	bb70      	cbnz	r0, 800afa4 <_printf_float+0xc0>
 800af46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800af4a:	f04f 32ff 	mov.w	r2, #4294967295
 800af4e:	4b98      	ldr	r3, [pc, #608]	@ (800b1b0 <_printf_float+0x2cc>)
 800af50:	f7f5 fd48 	bl	80009e4 <__aeabi_dcmple>
 800af54:	bb30      	cbnz	r0, 800afa4 <_printf_float+0xc0>
 800af56:	2200      	movs	r2, #0
 800af58:	2300      	movs	r3, #0
 800af5a:	4640      	mov	r0, r8
 800af5c:	4649      	mov	r1, r9
 800af5e:	f7f5 fd37 	bl	80009d0 <__aeabi_dcmplt>
 800af62:	b110      	cbz	r0, 800af6a <_printf_float+0x86>
 800af64:	232d      	movs	r3, #45	@ 0x2d
 800af66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af6a:	4a92      	ldr	r2, [pc, #584]	@ (800b1b4 <_printf_float+0x2d0>)
 800af6c:	4b92      	ldr	r3, [pc, #584]	@ (800b1b8 <_printf_float+0x2d4>)
 800af6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800af72:	bf94      	ite	ls
 800af74:	4690      	movls	r8, r2
 800af76:	4698      	movhi	r8, r3
 800af78:	2303      	movs	r3, #3
 800af7a:	f04f 0900 	mov.w	r9, #0
 800af7e:	6123      	str	r3, [r4, #16]
 800af80:	f02b 0304 	bic.w	r3, fp, #4
 800af84:	6023      	str	r3, [r4, #0]
 800af86:	4633      	mov	r3, r6
 800af88:	4621      	mov	r1, r4
 800af8a:	4628      	mov	r0, r5
 800af8c:	9700      	str	r7, [sp, #0]
 800af8e:	aa0f      	add	r2, sp, #60	@ 0x3c
 800af90:	f000 f9d4 	bl	800b33c <_printf_common>
 800af94:	3001      	adds	r0, #1
 800af96:	f040 8090 	bne.w	800b0ba <_printf_float+0x1d6>
 800af9a:	f04f 30ff 	mov.w	r0, #4294967295
 800af9e:	b011      	add	sp, #68	@ 0x44
 800afa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa4:	4642      	mov	r2, r8
 800afa6:	464b      	mov	r3, r9
 800afa8:	4640      	mov	r0, r8
 800afaa:	4649      	mov	r1, r9
 800afac:	f7f5 fd38 	bl	8000a20 <__aeabi_dcmpun>
 800afb0:	b148      	cbz	r0, 800afc6 <_printf_float+0xe2>
 800afb2:	464b      	mov	r3, r9
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	bfb8      	it	lt
 800afb8:	232d      	movlt	r3, #45	@ 0x2d
 800afba:	4a80      	ldr	r2, [pc, #512]	@ (800b1bc <_printf_float+0x2d8>)
 800afbc:	bfb8      	it	lt
 800afbe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800afc2:	4b7f      	ldr	r3, [pc, #508]	@ (800b1c0 <_printf_float+0x2dc>)
 800afc4:	e7d3      	b.n	800af6e <_printf_float+0x8a>
 800afc6:	6863      	ldr	r3, [r4, #4]
 800afc8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800afcc:	1c5a      	adds	r2, r3, #1
 800afce:	d13f      	bne.n	800b050 <_printf_float+0x16c>
 800afd0:	2306      	movs	r3, #6
 800afd2:	6063      	str	r3, [r4, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800afda:	6023      	str	r3, [r4, #0]
 800afdc:	9206      	str	r2, [sp, #24]
 800afde:	aa0e      	add	r2, sp, #56	@ 0x38
 800afe0:	e9cd a204 	strd	sl, r2, [sp, #16]
 800afe4:	aa0d      	add	r2, sp, #52	@ 0x34
 800afe6:	9203      	str	r2, [sp, #12]
 800afe8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800afec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800aff0:	6863      	ldr	r3, [r4, #4]
 800aff2:	4642      	mov	r2, r8
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	4628      	mov	r0, r5
 800aff8:	464b      	mov	r3, r9
 800affa:	910a      	str	r1, [sp, #40]	@ 0x28
 800affc:	f7ff fed4 	bl	800ada8 <__cvt>
 800b000:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b002:	4680      	mov	r8, r0
 800b004:	2947      	cmp	r1, #71	@ 0x47
 800b006:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b008:	d128      	bne.n	800b05c <_printf_float+0x178>
 800b00a:	1cc8      	adds	r0, r1, #3
 800b00c:	db02      	blt.n	800b014 <_printf_float+0x130>
 800b00e:	6863      	ldr	r3, [r4, #4]
 800b010:	4299      	cmp	r1, r3
 800b012:	dd40      	ble.n	800b096 <_printf_float+0x1b2>
 800b014:	f1aa 0a02 	sub.w	sl, sl, #2
 800b018:	fa5f fa8a 	uxtb.w	sl, sl
 800b01c:	4652      	mov	r2, sl
 800b01e:	3901      	subs	r1, #1
 800b020:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b024:	910d      	str	r1, [sp, #52]	@ 0x34
 800b026:	f7ff ff23 	bl	800ae70 <__exponent>
 800b02a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b02c:	4681      	mov	r9, r0
 800b02e:	1813      	adds	r3, r2, r0
 800b030:	2a01      	cmp	r2, #1
 800b032:	6123      	str	r3, [r4, #16]
 800b034:	dc02      	bgt.n	800b03c <_printf_float+0x158>
 800b036:	6822      	ldr	r2, [r4, #0]
 800b038:	07d2      	lsls	r2, r2, #31
 800b03a:	d501      	bpl.n	800b040 <_printf_float+0x15c>
 800b03c:	3301      	adds	r3, #1
 800b03e:	6123      	str	r3, [r4, #16]
 800b040:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b044:	2b00      	cmp	r3, #0
 800b046:	d09e      	beq.n	800af86 <_printf_float+0xa2>
 800b048:	232d      	movs	r3, #45	@ 0x2d
 800b04a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b04e:	e79a      	b.n	800af86 <_printf_float+0xa2>
 800b050:	2947      	cmp	r1, #71	@ 0x47
 800b052:	d1bf      	bne.n	800afd4 <_printf_float+0xf0>
 800b054:	2b00      	cmp	r3, #0
 800b056:	d1bd      	bne.n	800afd4 <_printf_float+0xf0>
 800b058:	2301      	movs	r3, #1
 800b05a:	e7ba      	b.n	800afd2 <_printf_float+0xee>
 800b05c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b060:	d9dc      	bls.n	800b01c <_printf_float+0x138>
 800b062:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b066:	d118      	bne.n	800b09a <_printf_float+0x1b6>
 800b068:	2900      	cmp	r1, #0
 800b06a:	6863      	ldr	r3, [r4, #4]
 800b06c:	dd0b      	ble.n	800b086 <_printf_float+0x1a2>
 800b06e:	6121      	str	r1, [r4, #16]
 800b070:	b913      	cbnz	r3, 800b078 <_printf_float+0x194>
 800b072:	6822      	ldr	r2, [r4, #0]
 800b074:	07d0      	lsls	r0, r2, #31
 800b076:	d502      	bpl.n	800b07e <_printf_float+0x19a>
 800b078:	3301      	adds	r3, #1
 800b07a:	440b      	add	r3, r1
 800b07c:	6123      	str	r3, [r4, #16]
 800b07e:	f04f 0900 	mov.w	r9, #0
 800b082:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b084:	e7dc      	b.n	800b040 <_printf_float+0x15c>
 800b086:	b913      	cbnz	r3, 800b08e <_printf_float+0x1aa>
 800b088:	6822      	ldr	r2, [r4, #0]
 800b08a:	07d2      	lsls	r2, r2, #31
 800b08c:	d501      	bpl.n	800b092 <_printf_float+0x1ae>
 800b08e:	3302      	adds	r3, #2
 800b090:	e7f4      	b.n	800b07c <_printf_float+0x198>
 800b092:	2301      	movs	r3, #1
 800b094:	e7f2      	b.n	800b07c <_printf_float+0x198>
 800b096:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b09a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b09c:	4299      	cmp	r1, r3
 800b09e:	db05      	blt.n	800b0ac <_printf_float+0x1c8>
 800b0a0:	6823      	ldr	r3, [r4, #0]
 800b0a2:	6121      	str	r1, [r4, #16]
 800b0a4:	07d8      	lsls	r0, r3, #31
 800b0a6:	d5ea      	bpl.n	800b07e <_printf_float+0x19a>
 800b0a8:	1c4b      	adds	r3, r1, #1
 800b0aa:	e7e7      	b.n	800b07c <_printf_float+0x198>
 800b0ac:	2900      	cmp	r1, #0
 800b0ae:	bfcc      	ite	gt
 800b0b0:	2201      	movgt	r2, #1
 800b0b2:	f1c1 0202 	rsble	r2, r1, #2
 800b0b6:	4413      	add	r3, r2
 800b0b8:	e7e0      	b.n	800b07c <_printf_float+0x198>
 800b0ba:	6823      	ldr	r3, [r4, #0]
 800b0bc:	055a      	lsls	r2, r3, #21
 800b0be:	d407      	bmi.n	800b0d0 <_printf_float+0x1ec>
 800b0c0:	6923      	ldr	r3, [r4, #16]
 800b0c2:	4642      	mov	r2, r8
 800b0c4:	4631      	mov	r1, r6
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	47b8      	blx	r7
 800b0ca:	3001      	adds	r0, #1
 800b0cc:	d12b      	bne.n	800b126 <_printf_float+0x242>
 800b0ce:	e764      	b.n	800af9a <_printf_float+0xb6>
 800b0d0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b0d4:	f240 80dc 	bls.w	800b290 <_printf_float+0x3ac>
 800b0d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b0dc:	2200      	movs	r2, #0
 800b0de:	2300      	movs	r3, #0
 800b0e0:	f7f5 fc6c 	bl	80009bc <__aeabi_dcmpeq>
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	d033      	beq.n	800b150 <_printf_float+0x26c>
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	4a35      	ldr	r2, [pc, #212]	@ (800b1c4 <_printf_float+0x2e0>)
 800b0f0:	47b8      	blx	r7
 800b0f2:	3001      	adds	r0, #1
 800b0f4:	f43f af51 	beq.w	800af9a <_printf_float+0xb6>
 800b0f8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b0fc:	4543      	cmp	r3, r8
 800b0fe:	db02      	blt.n	800b106 <_printf_float+0x222>
 800b100:	6823      	ldr	r3, [r4, #0]
 800b102:	07d8      	lsls	r0, r3, #31
 800b104:	d50f      	bpl.n	800b126 <_printf_float+0x242>
 800b106:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b10a:	4631      	mov	r1, r6
 800b10c:	4628      	mov	r0, r5
 800b10e:	47b8      	blx	r7
 800b110:	3001      	adds	r0, #1
 800b112:	f43f af42 	beq.w	800af9a <_printf_float+0xb6>
 800b116:	f04f 0900 	mov.w	r9, #0
 800b11a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b11e:	f104 0a1a 	add.w	sl, r4, #26
 800b122:	45c8      	cmp	r8, r9
 800b124:	dc09      	bgt.n	800b13a <_printf_float+0x256>
 800b126:	6823      	ldr	r3, [r4, #0]
 800b128:	079b      	lsls	r3, r3, #30
 800b12a:	f100 8102 	bmi.w	800b332 <_printf_float+0x44e>
 800b12e:	68e0      	ldr	r0, [r4, #12]
 800b130:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b132:	4298      	cmp	r0, r3
 800b134:	bfb8      	it	lt
 800b136:	4618      	movlt	r0, r3
 800b138:	e731      	b.n	800af9e <_printf_float+0xba>
 800b13a:	2301      	movs	r3, #1
 800b13c:	4652      	mov	r2, sl
 800b13e:	4631      	mov	r1, r6
 800b140:	4628      	mov	r0, r5
 800b142:	47b8      	blx	r7
 800b144:	3001      	adds	r0, #1
 800b146:	f43f af28 	beq.w	800af9a <_printf_float+0xb6>
 800b14a:	f109 0901 	add.w	r9, r9, #1
 800b14e:	e7e8      	b.n	800b122 <_printf_float+0x23e>
 800b150:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b152:	2b00      	cmp	r3, #0
 800b154:	dc38      	bgt.n	800b1c8 <_printf_float+0x2e4>
 800b156:	2301      	movs	r3, #1
 800b158:	4631      	mov	r1, r6
 800b15a:	4628      	mov	r0, r5
 800b15c:	4a19      	ldr	r2, [pc, #100]	@ (800b1c4 <_printf_float+0x2e0>)
 800b15e:	47b8      	blx	r7
 800b160:	3001      	adds	r0, #1
 800b162:	f43f af1a 	beq.w	800af9a <_printf_float+0xb6>
 800b166:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b16a:	ea59 0303 	orrs.w	r3, r9, r3
 800b16e:	d102      	bne.n	800b176 <_printf_float+0x292>
 800b170:	6823      	ldr	r3, [r4, #0]
 800b172:	07d9      	lsls	r1, r3, #31
 800b174:	d5d7      	bpl.n	800b126 <_printf_float+0x242>
 800b176:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b17a:	4631      	mov	r1, r6
 800b17c:	4628      	mov	r0, r5
 800b17e:	47b8      	blx	r7
 800b180:	3001      	adds	r0, #1
 800b182:	f43f af0a 	beq.w	800af9a <_printf_float+0xb6>
 800b186:	f04f 0a00 	mov.w	sl, #0
 800b18a:	f104 0b1a 	add.w	fp, r4, #26
 800b18e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b190:	425b      	negs	r3, r3
 800b192:	4553      	cmp	r3, sl
 800b194:	dc01      	bgt.n	800b19a <_printf_float+0x2b6>
 800b196:	464b      	mov	r3, r9
 800b198:	e793      	b.n	800b0c2 <_printf_float+0x1de>
 800b19a:	2301      	movs	r3, #1
 800b19c:	465a      	mov	r2, fp
 800b19e:	4631      	mov	r1, r6
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	47b8      	blx	r7
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	f43f aef8 	beq.w	800af9a <_printf_float+0xb6>
 800b1aa:	f10a 0a01 	add.w	sl, sl, #1
 800b1ae:	e7ee      	b.n	800b18e <_printf_float+0x2aa>
 800b1b0:	7fefffff 	.word	0x7fefffff
 800b1b4:	0800f4b9 	.word	0x0800f4b9
 800b1b8:	0800f4bd 	.word	0x0800f4bd
 800b1bc:	0800f4c1 	.word	0x0800f4c1
 800b1c0:	0800f4c5 	.word	0x0800f4c5
 800b1c4:	0800edb2 	.word	0x0800edb2
 800b1c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b1ca:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b1ce:	4553      	cmp	r3, sl
 800b1d0:	bfa8      	it	ge
 800b1d2:	4653      	movge	r3, sl
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	4699      	mov	r9, r3
 800b1d8:	dc36      	bgt.n	800b248 <_printf_float+0x364>
 800b1da:	f04f 0b00 	mov.w	fp, #0
 800b1de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1e2:	f104 021a 	add.w	r2, r4, #26
 800b1e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b1e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1ea:	eba3 0309 	sub.w	r3, r3, r9
 800b1ee:	455b      	cmp	r3, fp
 800b1f0:	dc31      	bgt.n	800b256 <_printf_float+0x372>
 800b1f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1f4:	459a      	cmp	sl, r3
 800b1f6:	dc3a      	bgt.n	800b26e <_printf_float+0x38a>
 800b1f8:	6823      	ldr	r3, [r4, #0]
 800b1fa:	07da      	lsls	r2, r3, #31
 800b1fc:	d437      	bmi.n	800b26e <_printf_float+0x38a>
 800b1fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b200:	ebaa 0903 	sub.w	r9, sl, r3
 800b204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b206:	ebaa 0303 	sub.w	r3, sl, r3
 800b20a:	4599      	cmp	r9, r3
 800b20c:	bfa8      	it	ge
 800b20e:	4699      	movge	r9, r3
 800b210:	f1b9 0f00 	cmp.w	r9, #0
 800b214:	dc33      	bgt.n	800b27e <_printf_float+0x39a>
 800b216:	f04f 0800 	mov.w	r8, #0
 800b21a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b21e:	f104 0b1a 	add.w	fp, r4, #26
 800b222:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b224:	ebaa 0303 	sub.w	r3, sl, r3
 800b228:	eba3 0309 	sub.w	r3, r3, r9
 800b22c:	4543      	cmp	r3, r8
 800b22e:	f77f af7a 	ble.w	800b126 <_printf_float+0x242>
 800b232:	2301      	movs	r3, #1
 800b234:	465a      	mov	r2, fp
 800b236:	4631      	mov	r1, r6
 800b238:	4628      	mov	r0, r5
 800b23a:	47b8      	blx	r7
 800b23c:	3001      	adds	r0, #1
 800b23e:	f43f aeac 	beq.w	800af9a <_printf_float+0xb6>
 800b242:	f108 0801 	add.w	r8, r8, #1
 800b246:	e7ec      	b.n	800b222 <_printf_float+0x33e>
 800b248:	4642      	mov	r2, r8
 800b24a:	4631      	mov	r1, r6
 800b24c:	4628      	mov	r0, r5
 800b24e:	47b8      	blx	r7
 800b250:	3001      	adds	r0, #1
 800b252:	d1c2      	bne.n	800b1da <_printf_float+0x2f6>
 800b254:	e6a1      	b.n	800af9a <_printf_float+0xb6>
 800b256:	2301      	movs	r3, #1
 800b258:	4631      	mov	r1, r6
 800b25a:	4628      	mov	r0, r5
 800b25c:	920a      	str	r2, [sp, #40]	@ 0x28
 800b25e:	47b8      	blx	r7
 800b260:	3001      	adds	r0, #1
 800b262:	f43f ae9a 	beq.w	800af9a <_printf_float+0xb6>
 800b266:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b268:	f10b 0b01 	add.w	fp, fp, #1
 800b26c:	e7bb      	b.n	800b1e6 <_printf_float+0x302>
 800b26e:	4631      	mov	r1, r6
 800b270:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b274:	4628      	mov	r0, r5
 800b276:	47b8      	blx	r7
 800b278:	3001      	adds	r0, #1
 800b27a:	d1c0      	bne.n	800b1fe <_printf_float+0x31a>
 800b27c:	e68d      	b.n	800af9a <_printf_float+0xb6>
 800b27e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b280:	464b      	mov	r3, r9
 800b282:	4631      	mov	r1, r6
 800b284:	4628      	mov	r0, r5
 800b286:	4442      	add	r2, r8
 800b288:	47b8      	blx	r7
 800b28a:	3001      	adds	r0, #1
 800b28c:	d1c3      	bne.n	800b216 <_printf_float+0x332>
 800b28e:	e684      	b.n	800af9a <_printf_float+0xb6>
 800b290:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b294:	f1ba 0f01 	cmp.w	sl, #1
 800b298:	dc01      	bgt.n	800b29e <_printf_float+0x3ba>
 800b29a:	07db      	lsls	r3, r3, #31
 800b29c:	d536      	bpl.n	800b30c <_printf_float+0x428>
 800b29e:	2301      	movs	r3, #1
 800b2a0:	4642      	mov	r2, r8
 800b2a2:	4631      	mov	r1, r6
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	47b8      	blx	r7
 800b2a8:	3001      	adds	r0, #1
 800b2aa:	f43f ae76 	beq.w	800af9a <_printf_float+0xb6>
 800b2ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b2b2:	4631      	mov	r1, r6
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	47b8      	blx	r7
 800b2b8:	3001      	adds	r0, #1
 800b2ba:	f43f ae6e 	beq.w	800af9a <_printf_float+0xb6>
 800b2be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2ca:	f7f5 fb77 	bl	80009bc <__aeabi_dcmpeq>
 800b2ce:	b9c0      	cbnz	r0, 800b302 <_printf_float+0x41e>
 800b2d0:	4653      	mov	r3, sl
 800b2d2:	f108 0201 	add.w	r2, r8, #1
 800b2d6:	4631      	mov	r1, r6
 800b2d8:	4628      	mov	r0, r5
 800b2da:	47b8      	blx	r7
 800b2dc:	3001      	adds	r0, #1
 800b2de:	d10c      	bne.n	800b2fa <_printf_float+0x416>
 800b2e0:	e65b      	b.n	800af9a <_printf_float+0xb6>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	465a      	mov	r2, fp
 800b2e6:	4631      	mov	r1, r6
 800b2e8:	4628      	mov	r0, r5
 800b2ea:	47b8      	blx	r7
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	f43f ae54 	beq.w	800af9a <_printf_float+0xb6>
 800b2f2:	f108 0801 	add.w	r8, r8, #1
 800b2f6:	45d0      	cmp	r8, sl
 800b2f8:	dbf3      	blt.n	800b2e2 <_printf_float+0x3fe>
 800b2fa:	464b      	mov	r3, r9
 800b2fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b300:	e6e0      	b.n	800b0c4 <_printf_float+0x1e0>
 800b302:	f04f 0800 	mov.w	r8, #0
 800b306:	f104 0b1a 	add.w	fp, r4, #26
 800b30a:	e7f4      	b.n	800b2f6 <_printf_float+0x412>
 800b30c:	2301      	movs	r3, #1
 800b30e:	4642      	mov	r2, r8
 800b310:	e7e1      	b.n	800b2d6 <_printf_float+0x3f2>
 800b312:	2301      	movs	r3, #1
 800b314:	464a      	mov	r2, r9
 800b316:	4631      	mov	r1, r6
 800b318:	4628      	mov	r0, r5
 800b31a:	47b8      	blx	r7
 800b31c:	3001      	adds	r0, #1
 800b31e:	f43f ae3c 	beq.w	800af9a <_printf_float+0xb6>
 800b322:	f108 0801 	add.w	r8, r8, #1
 800b326:	68e3      	ldr	r3, [r4, #12]
 800b328:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b32a:	1a5b      	subs	r3, r3, r1
 800b32c:	4543      	cmp	r3, r8
 800b32e:	dcf0      	bgt.n	800b312 <_printf_float+0x42e>
 800b330:	e6fd      	b.n	800b12e <_printf_float+0x24a>
 800b332:	f04f 0800 	mov.w	r8, #0
 800b336:	f104 0919 	add.w	r9, r4, #25
 800b33a:	e7f4      	b.n	800b326 <_printf_float+0x442>

0800b33c <_printf_common>:
 800b33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b340:	4616      	mov	r6, r2
 800b342:	4698      	mov	r8, r3
 800b344:	688a      	ldr	r2, [r1, #8]
 800b346:	690b      	ldr	r3, [r1, #16]
 800b348:	4607      	mov	r7, r0
 800b34a:	4293      	cmp	r3, r2
 800b34c:	bfb8      	it	lt
 800b34e:	4613      	movlt	r3, r2
 800b350:	6033      	str	r3, [r6, #0]
 800b352:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b356:	460c      	mov	r4, r1
 800b358:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b35c:	b10a      	cbz	r2, 800b362 <_printf_common+0x26>
 800b35e:	3301      	adds	r3, #1
 800b360:	6033      	str	r3, [r6, #0]
 800b362:	6823      	ldr	r3, [r4, #0]
 800b364:	0699      	lsls	r1, r3, #26
 800b366:	bf42      	ittt	mi
 800b368:	6833      	ldrmi	r3, [r6, #0]
 800b36a:	3302      	addmi	r3, #2
 800b36c:	6033      	strmi	r3, [r6, #0]
 800b36e:	6825      	ldr	r5, [r4, #0]
 800b370:	f015 0506 	ands.w	r5, r5, #6
 800b374:	d106      	bne.n	800b384 <_printf_common+0x48>
 800b376:	f104 0a19 	add.w	sl, r4, #25
 800b37a:	68e3      	ldr	r3, [r4, #12]
 800b37c:	6832      	ldr	r2, [r6, #0]
 800b37e:	1a9b      	subs	r3, r3, r2
 800b380:	42ab      	cmp	r3, r5
 800b382:	dc2b      	bgt.n	800b3dc <_printf_common+0xa0>
 800b384:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b388:	6822      	ldr	r2, [r4, #0]
 800b38a:	3b00      	subs	r3, #0
 800b38c:	bf18      	it	ne
 800b38e:	2301      	movne	r3, #1
 800b390:	0692      	lsls	r2, r2, #26
 800b392:	d430      	bmi.n	800b3f6 <_printf_common+0xba>
 800b394:	4641      	mov	r1, r8
 800b396:	4638      	mov	r0, r7
 800b398:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b39c:	47c8      	blx	r9
 800b39e:	3001      	adds	r0, #1
 800b3a0:	d023      	beq.n	800b3ea <_printf_common+0xae>
 800b3a2:	6823      	ldr	r3, [r4, #0]
 800b3a4:	6922      	ldr	r2, [r4, #16]
 800b3a6:	f003 0306 	and.w	r3, r3, #6
 800b3aa:	2b04      	cmp	r3, #4
 800b3ac:	bf14      	ite	ne
 800b3ae:	2500      	movne	r5, #0
 800b3b0:	6833      	ldreq	r3, [r6, #0]
 800b3b2:	f04f 0600 	mov.w	r6, #0
 800b3b6:	bf08      	it	eq
 800b3b8:	68e5      	ldreq	r5, [r4, #12]
 800b3ba:	f104 041a 	add.w	r4, r4, #26
 800b3be:	bf08      	it	eq
 800b3c0:	1aed      	subeq	r5, r5, r3
 800b3c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b3c6:	bf08      	it	eq
 800b3c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	bfc4      	itt	gt
 800b3d0:	1a9b      	subgt	r3, r3, r2
 800b3d2:	18ed      	addgt	r5, r5, r3
 800b3d4:	42b5      	cmp	r5, r6
 800b3d6:	d11a      	bne.n	800b40e <_printf_common+0xd2>
 800b3d8:	2000      	movs	r0, #0
 800b3da:	e008      	b.n	800b3ee <_printf_common+0xb2>
 800b3dc:	2301      	movs	r3, #1
 800b3de:	4652      	mov	r2, sl
 800b3e0:	4641      	mov	r1, r8
 800b3e2:	4638      	mov	r0, r7
 800b3e4:	47c8      	blx	r9
 800b3e6:	3001      	adds	r0, #1
 800b3e8:	d103      	bne.n	800b3f2 <_printf_common+0xb6>
 800b3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3f2:	3501      	adds	r5, #1
 800b3f4:	e7c1      	b.n	800b37a <_printf_common+0x3e>
 800b3f6:	2030      	movs	r0, #48	@ 0x30
 800b3f8:	18e1      	adds	r1, r4, r3
 800b3fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b3fe:	1c5a      	adds	r2, r3, #1
 800b400:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b404:	4422      	add	r2, r4
 800b406:	3302      	adds	r3, #2
 800b408:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b40c:	e7c2      	b.n	800b394 <_printf_common+0x58>
 800b40e:	2301      	movs	r3, #1
 800b410:	4622      	mov	r2, r4
 800b412:	4641      	mov	r1, r8
 800b414:	4638      	mov	r0, r7
 800b416:	47c8      	blx	r9
 800b418:	3001      	adds	r0, #1
 800b41a:	d0e6      	beq.n	800b3ea <_printf_common+0xae>
 800b41c:	3601      	adds	r6, #1
 800b41e:	e7d9      	b.n	800b3d4 <_printf_common+0x98>

0800b420 <_printf_i>:
 800b420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b424:	7e0f      	ldrb	r7, [r1, #24]
 800b426:	4691      	mov	r9, r2
 800b428:	2f78      	cmp	r7, #120	@ 0x78
 800b42a:	4680      	mov	r8, r0
 800b42c:	460c      	mov	r4, r1
 800b42e:	469a      	mov	sl, r3
 800b430:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b432:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b436:	d807      	bhi.n	800b448 <_printf_i+0x28>
 800b438:	2f62      	cmp	r7, #98	@ 0x62
 800b43a:	d80a      	bhi.n	800b452 <_printf_i+0x32>
 800b43c:	2f00      	cmp	r7, #0
 800b43e:	f000 80d3 	beq.w	800b5e8 <_printf_i+0x1c8>
 800b442:	2f58      	cmp	r7, #88	@ 0x58
 800b444:	f000 80ba 	beq.w	800b5bc <_printf_i+0x19c>
 800b448:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b44c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b450:	e03a      	b.n	800b4c8 <_printf_i+0xa8>
 800b452:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b456:	2b15      	cmp	r3, #21
 800b458:	d8f6      	bhi.n	800b448 <_printf_i+0x28>
 800b45a:	a101      	add	r1, pc, #4	@ (adr r1, 800b460 <_printf_i+0x40>)
 800b45c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b460:	0800b4b9 	.word	0x0800b4b9
 800b464:	0800b4cd 	.word	0x0800b4cd
 800b468:	0800b449 	.word	0x0800b449
 800b46c:	0800b449 	.word	0x0800b449
 800b470:	0800b449 	.word	0x0800b449
 800b474:	0800b449 	.word	0x0800b449
 800b478:	0800b4cd 	.word	0x0800b4cd
 800b47c:	0800b449 	.word	0x0800b449
 800b480:	0800b449 	.word	0x0800b449
 800b484:	0800b449 	.word	0x0800b449
 800b488:	0800b449 	.word	0x0800b449
 800b48c:	0800b5cf 	.word	0x0800b5cf
 800b490:	0800b4f7 	.word	0x0800b4f7
 800b494:	0800b589 	.word	0x0800b589
 800b498:	0800b449 	.word	0x0800b449
 800b49c:	0800b449 	.word	0x0800b449
 800b4a0:	0800b5f1 	.word	0x0800b5f1
 800b4a4:	0800b449 	.word	0x0800b449
 800b4a8:	0800b4f7 	.word	0x0800b4f7
 800b4ac:	0800b449 	.word	0x0800b449
 800b4b0:	0800b449 	.word	0x0800b449
 800b4b4:	0800b591 	.word	0x0800b591
 800b4b8:	6833      	ldr	r3, [r6, #0]
 800b4ba:	1d1a      	adds	r2, r3, #4
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	6032      	str	r2, [r6, #0]
 800b4c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e09e      	b.n	800b60a <_printf_i+0x1ea>
 800b4cc:	6833      	ldr	r3, [r6, #0]
 800b4ce:	6820      	ldr	r0, [r4, #0]
 800b4d0:	1d19      	adds	r1, r3, #4
 800b4d2:	6031      	str	r1, [r6, #0]
 800b4d4:	0606      	lsls	r6, r0, #24
 800b4d6:	d501      	bpl.n	800b4dc <_printf_i+0xbc>
 800b4d8:	681d      	ldr	r5, [r3, #0]
 800b4da:	e003      	b.n	800b4e4 <_printf_i+0xc4>
 800b4dc:	0645      	lsls	r5, r0, #25
 800b4de:	d5fb      	bpl.n	800b4d8 <_printf_i+0xb8>
 800b4e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b4e4:	2d00      	cmp	r5, #0
 800b4e6:	da03      	bge.n	800b4f0 <_printf_i+0xd0>
 800b4e8:	232d      	movs	r3, #45	@ 0x2d
 800b4ea:	426d      	negs	r5, r5
 800b4ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4f0:	230a      	movs	r3, #10
 800b4f2:	4859      	ldr	r0, [pc, #356]	@ (800b658 <_printf_i+0x238>)
 800b4f4:	e011      	b.n	800b51a <_printf_i+0xfa>
 800b4f6:	6821      	ldr	r1, [r4, #0]
 800b4f8:	6833      	ldr	r3, [r6, #0]
 800b4fa:	0608      	lsls	r0, r1, #24
 800b4fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b500:	d402      	bmi.n	800b508 <_printf_i+0xe8>
 800b502:	0649      	lsls	r1, r1, #25
 800b504:	bf48      	it	mi
 800b506:	b2ad      	uxthmi	r5, r5
 800b508:	2f6f      	cmp	r7, #111	@ 0x6f
 800b50a:	6033      	str	r3, [r6, #0]
 800b50c:	bf14      	ite	ne
 800b50e:	230a      	movne	r3, #10
 800b510:	2308      	moveq	r3, #8
 800b512:	4851      	ldr	r0, [pc, #324]	@ (800b658 <_printf_i+0x238>)
 800b514:	2100      	movs	r1, #0
 800b516:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b51a:	6866      	ldr	r6, [r4, #4]
 800b51c:	2e00      	cmp	r6, #0
 800b51e:	bfa8      	it	ge
 800b520:	6821      	ldrge	r1, [r4, #0]
 800b522:	60a6      	str	r6, [r4, #8]
 800b524:	bfa4      	itt	ge
 800b526:	f021 0104 	bicge.w	r1, r1, #4
 800b52a:	6021      	strge	r1, [r4, #0]
 800b52c:	b90d      	cbnz	r5, 800b532 <_printf_i+0x112>
 800b52e:	2e00      	cmp	r6, #0
 800b530:	d04b      	beq.n	800b5ca <_printf_i+0x1aa>
 800b532:	4616      	mov	r6, r2
 800b534:	fbb5 f1f3 	udiv	r1, r5, r3
 800b538:	fb03 5711 	mls	r7, r3, r1, r5
 800b53c:	5dc7      	ldrb	r7, [r0, r7]
 800b53e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b542:	462f      	mov	r7, r5
 800b544:	42bb      	cmp	r3, r7
 800b546:	460d      	mov	r5, r1
 800b548:	d9f4      	bls.n	800b534 <_printf_i+0x114>
 800b54a:	2b08      	cmp	r3, #8
 800b54c:	d10b      	bne.n	800b566 <_printf_i+0x146>
 800b54e:	6823      	ldr	r3, [r4, #0]
 800b550:	07df      	lsls	r7, r3, #31
 800b552:	d508      	bpl.n	800b566 <_printf_i+0x146>
 800b554:	6923      	ldr	r3, [r4, #16]
 800b556:	6861      	ldr	r1, [r4, #4]
 800b558:	4299      	cmp	r1, r3
 800b55a:	bfde      	ittt	le
 800b55c:	2330      	movle	r3, #48	@ 0x30
 800b55e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b562:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b566:	1b92      	subs	r2, r2, r6
 800b568:	6122      	str	r2, [r4, #16]
 800b56a:	464b      	mov	r3, r9
 800b56c:	4621      	mov	r1, r4
 800b56e:	4640      	mov	r0, r8
 800b570:	f8cd a000 	str.w	sl, [sp]
 800b574:	aa03      	add	r2, sp, #12
 800b576:	f7ff fee1 	bl	800b33c <_printf_common>
 800b57a:	3001      	adds	r0, #1
 800b57c:	d14a      	bne.n	800b614 <_printf_i+0x1f4>
 800b57e:	f04f 30ff 	mov.w	r0, #4294967295
 800b582:	b004      	add	sp, #16
 800b584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b588:	6823      	ldr	r3, [r4, #0]
 800b58a:	f043 0320 	orr.w	r3, r3, #32
 800b58e:	6023      	str	r3, [r4, #0]
 800b590:	2778      	movs	r7, #120	@ 0x78
 800b592:	4832      	ldr	r0, [pc, #200]	@ (800b65c <_printf_i+0x23c>)
 800b594:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b598:	6823      	ldr	r3, [r4, #0]
 800b59a:	6831      	ldr	r1, [r6, #0]
 800b59c:	061f      	lsls	r7, r3, #24
 800b59e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b5a2:	d402      	bmi.n	800b5aa <_printf_i+0x18a>
 800b5a4:	065f      	lsls	r7, r3, #25
 800b5a6:	bf48      	it	mi
 800b5a8:	b2ad      	uxthmi	r5, r5
 800b5aa:	6031      	str	r1, [r6, #0]
 800b5ac:	07d9      	lsls	r1, r3, #31
 800b5ae:	bf44      	itt	mi
 800b5b0:	f043 0320 	orrmi.w	r3, r3, #32
 800b5b4:	6023      	strmi	r3, [r4, #0]
 800b5b6:	b11d      	cbz	r5, 800b5c0 <_printf_i+0x1a0>
 800b5b8:	2310      	movs	r3, #16
 800b5ba:	e7ab      	b.n	800b514 <_printf_i+0xf4>
 800b5bc:	4826      	ldr	r0, [pc, #152]	@ (800b658 <_printf_i+0x238>)
 800b5be:	e7e9      	b.n	800b594 <_printf_i+0x174>
 800b5c0:	6823      	ldr	r3, [r4, #0]
 800b5c2:	f023 0320 	bic.w	r3, r3, #32
 800b5c6:	6023      	str	r3, [r4, #0]
 800b5c8:	e7f6      	b.n	800b5b8 <_printf_i+0x198>
 800b5ca:	4616      	mov	r6, r2
 800b5cc:	e7bd      	b.n	800b54a <_printf_i+0x12a>
 800b5ce:	6833      	ldr	r3, [r6, #0]
 800b5d0:	6825      	ldr	r5, [r4, #0]
 800b5d2:	1d18      	adds	r0, r3, #4
 800b5d4:	6961      	ldr	r1, [r4, #20]
 800b5d6:	6030      	str	r0, [r6, #0]
 800b5d8:	062e      	lsls	r6, r5, #24
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	d501      	bpl.n	800b5e2 <_printf_i+0x1c2>
 800b5de:	6019      	str	r1, [r3, #0]
 800b5e0:	e002      	b.n	800b5e8 <_printf_i+0x1c8>
 800b5e2:	0668      	lsls	r0, r5, #25
 800b5e4:	d5fb      	bpl.n	800b5de <_printf_i+0x1be>
 800b5e6:	8019      	strh	r1, [r3, #0]
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	4616      	mov	r6, r2
 800b5ec:	6123      	str	r3, [r4, #16]
 800b5ee:	e7bc      	b.n	800b56a <_printf_i+0x14a>
 800b5f0:	6833      	ldr	r3, [r6, #0]
 800b5f2:	2100      	movs	r1, #0
 800b5f4:	1d1a      	adds	r2, r3, #4
 800b5f6:	6032      	str	r2, [r6, #0]
 800b5f8:	681e      	ldr	r6, [r3, #0]
 800b5fa:	6862      	ldr	r2, [r4, #4]
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	f000 fdb0 	bl	800c162 <memchr>
 800b602:	b108      	cbz	r0, 800b608 <_printf_i+0x1e8>
 800b604:	1b80      	subs	r0, r0, r6
 800b606:	6060      	str	r0, [r4, #4]
 800b608:	6863      	ldr	r3, [r4, #4]
 800b60a:	6123      	str	r3, [r4, #16]
 800b60c:	2300      	movs	r3, #0
 800b60e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b612:	e7aa      	b.n	800b56a <_printf_i+0x14a>
 800b614:	4632      	mov	r2, r6
 800b616:	4649      	mov	r1, r9
 800b618:	4640      	mov	r0, r8
 800b61a:	6923      	ldr	r3, [r4, #16]
 800b61c:	47d0      	blx	sl
 800b61e:	3001      	adds	r0, #1
 800b620:	d0ad      	beq.n	800b57e <_printf_i+0x15e>
 800b622:	6823      	ldr	r3, [r4, #0]
 800b624:	079b      	lsls	r3, r3, #30
 800b626:	d413      	bmi.n	800b650 <_printf_i+0x230>
 800b628:	68e0      	ldr	r0, [r4, #12]
 800b62a:	9b03      	ldr	r3, [sp, #12]
 800b62c:	4298      	cmp	r0, r3
 800b62e:	bfb8      	it	lt
 800b630:	4618      	movlt	r0, r3
 800b632:	e7a6      	b.n	800b582 <_printf_i+0x162>
 800b634:	2301      	movs	r3, #1
 800b636:	4632      	mov	r2, r6
 800b638:	4649      	mov	r1, r9
 800b63a:	4640      	mov	r0, r8
 800b63c:	47d0      	blx	sl
 800b63e:	3001      	adds	r0, #1
 800b640:	d09d      	beq.n	800b57e <_printf_i+0x15e>
 800b642:	3501      	adds	r5, #1
 800b644:	68e3      	ldr	r3, [r4, #12]
 800b646:	9903      	ldr	r1, [sp, #12]
 800b648:	1a5b      	subs	r3, r3, r1
 800b64a:	42ab      	cmp	r3, r5
 800b64c:	dcf2      	bgt.n	800b634 <_printf_i+0x214>
 800b64e:	e7eb      	b.n	800b628 <_printf_i+0x208>
 800b650:	2500      	movs	r5, #0
 800b652:	f104 0619 	add.w	r6, r4, #25
 800b656:	e7f5      	b.n	800b644 <_printf_i+0x224>
 800b658:	0800f4c9 	.word	0x0800f4c9
 800b65c:	0800f4da 	.word	0x0800f4da

0800b660 <_scanf_float>:
 800b660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b664:	b087      	sub	sp, #28
 800b666:	9303      	str	r3, [sp, #12]
 800b668:	688b      	ldr	r3, [r1, #8]
 800b66a:	4617      	mov	r7, r2
 800b66c:	1e5a      	subs	r2, r3, #1
 800b66e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b672:	bf82      	ittt	hi
 800b674:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b678:	eb03 0b05 	addhi.w	fp, r3, r5
 800b67c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b680:	460a      	mov	r2, r1
 800b682:	f04f 0500 	mov.w	r5, #0
 800b686:	bf88      	it	hi
 800b688:	608b      	strhi	r3, [r1, #8]
 800b68a:	680b      	ldr	r3, [r1, #0]
 800b68c:	4680      	mov	r8, r0
 800b68e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b692:	f842 3b1c 	str.w	r3, [r2], #28
 800b696:	460c      	mov	r4, r1
 800b698:	bf98      	it	ls
 800b69a:	f04f 0b00 	movls.w	fp, #0
 800b69e:	4616      	mov	r6, r2
 800b6a0:	46aa      	mov	sl, r5
 800b6a2:	46a9      	mov	r9, r5
 800b6a4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b6a8:	9201      	str	r2, [sp, #4]
 800b6aa:	9502      	str	r5, [sp, #8]
 800b6ac:	68a2      	ldr	r2, [r4, #8]
 800b6ae:	b152      	cbz	r2, 800b6c6 <_scanf_float+0x66>
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	2b4e      	cmp	r3, #78	@ 0x4e
 800b6b6:	d865      	bhi.n	800b784 <_scanf_float+0x124>
 800b6b8:	2b40      	cmp	r3, #64	@ 0x40
 800b6ba:	d83d      	bhi.n	800b738 <_scanf_float+0xd8>
 800b6bc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b6c0:	b2c8      	uxtb	r0, r1
 800b6c2:	280e      	cmp	r0, #14
 800b6c4:	d93b      	bls.n	800b73e <_scanf_float+0xde>
 800b6c6:	f1b9 0f00 	cmp.w	r9, #0
 800b6ca:	d003      	beq.n	800b6d4 <_scanf_float+0x74>
 800b6cc:	6823      	ldr	r3, [r4, #0]
 800b6ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6d2:	6023      	str	r3, [r4, #0]
 800b6d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6d8:	f1ba 0f01 	cmp.w	sl, #1
 800b6dc:	f200 8118 	bhi.w	800b910 <_scanf_float+0x2b0>
 800b6e0:	9b01      	ldr	r3, [sp, #4]
 800b6e2:	429e      	cmp	r6, r3
 800b6e4:	f200 8109 	bhi.w	800b8fa <_scanf_float+0x29a>
 800b6e8:	2001      	movs	r0, #1
 800b6ea:	b007      	add	sp, #28
 800b6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b6f4:	2a0d      	cmp	r2, #13
 800b6f6:	d8e6      	bhi.n	800b6c6 <_scanf_float+0x66>
 800b6f8:	a101      	add	r1, pc, #4	@ (adr r1, 800b700 <_scanf_float+0xa0>)
 800b6fa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b6fe:	bf00      	nop
 800b700:	0800b847 	.word	0x0800b847
 800b704:	0800b6c7 	.word	0x0800b6c7
 800b708:	0800b6c7 	.word	0x0800b6c7
 800b70c:	0800b6c7 	.word	0x0800b6c7
 800b710:	0800b8a7 	.word	0x0800b8a7
 800b714:	0800b87f 	.word	0x0800b87f
 800b718:	0800b6c7 	.word	0x0800b6c7
 800b71c:	0800b6c7 	.word	0x0800b6c7
 800b720:	0800b855 	.word	0x0800b855
 800b724:	0800b6c7 	.word	0x0800b6c7
 800b728:	0800b6c7 	.word	0x0800b6c7
 800b72c:	0800b6c7 	.word	0x0800b6c7
 800b730:	0800b6c7 	.word	0x0800b6c7
 800b734:	0800b80d 	.word	0x0800b80d
 800b738:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b73c:	e7da      	b.n	800b6f4 <_scanf_float+0x94>
 800b73e:	290e      	cmp	r1, #14
 800b740:	d8c1      	bhi.n	800b6c6 <_scanf_float+0x66>
 800b742:	a001      	add	r0, pc, #4	@ (adr r0, 800b748 <_scanf_float+0xe8>)
 800b744:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b748:	0800b7fd 	.word	0x0800b7fd
 800b74c:	0800b6c7 	.word	0x0800b6c7
 800b750:	0800b7fd 	.word	0x0800b7fd
 800b754:	0800b893 	.word	0x0800b893
 800b758:	0800b6c7 	.word	0x0800b6c7
 800b75c:	0800b7a5 	.word	0x0800b7a5
 800b760:	0800b7e3 	.word	0x0800b7e3
 800b764:	0800b7e3 	.word	0x0800b7e3
 800b768:	0800b7e3 	.word	0x0800b7e3
 800b76c:	0800b7e3 	.word	0x0800b7e3
 800b770:	0800b7e3 	.word	0x0800b7e3
 800b774:	0800b7e3 	.word	0x0800b7e3
 800b778:	0800b7e3 	.word	0x0800b7e3
 800b77c:	0800b7e3 	.word	0x0800b7e3
 800b780:	0800b7e3 	.word	0x0800b7e3
 800b784:	2b6e      	cmp	r3, #110	@ 0x6e
 800b786:	d809      	bhi.n	800b79c <_scanf_float+0x13c>
 800b788:	2b60      	cmp	r3, #96	@ 0x60
 800b78a:	d8b1      	bhi.n	800b6f0 <_scanf_float+0x90>
 800b78c:	2b54      	cmp	r3, #84	@ 0x54
 800b78e:	d07b      	beq.n	800b888 <_scanf_float+0x228>
 800b790:	2b59      	cmp	r3, #89	@ 0x59
 800b792:	d198      	bne.n	800b6c6 <_scanf_float+0x66>
 800b794:	2d07      	cmp	r5, #7
 800b796:	d196      	bne.n	800b6c6 <_scanf_float+0x66>
 800b798:	2508      	movs	r5, #8
 800b79a:	e02c      	b.n	800b7f6 <_scanf_float+0x196>
 800b79c:	2b74      	cmp	r3, #116	@ 0x74
 800b79e:	d073      	beq.n	800b888 <_scanf_float+0x228>
 800b7a0:	2b79      	cmp	r3, #121	@ 0x79
 800b7a2:	e7f6      	b.n	800b792 <_scanf_float+0x132>
 800b7a4:	6821      	ldr	r1, [r4, #0]
 800b7a6:	05c8      	lsls	r0, r1, #23
 800b7a8:	d51b      	bpl.n	800b7e2 <_scanf_float+0x182>
 800b7aa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b7ae:	6021      	str	r1, [r4, #0]
 800b7b0:	f109 0901 	add.w	r9, r9, #1
 800b7b4:	f1bb 0f00 	cmp.w	fp, #0
 800b7b8:	d003      	beq.n	800b7c2 <_scanf_float+0x162>
 800b7ba:	3201      	adds	r2, #1
 800b7bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b7c0:	60a2      	str	r2, [r4, #8]
 800b7c2:	68a3      	ldr	r3, [r4, #8]
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	60a3      	str	r3, [r4, #8]
 800b7c8:	6923      	ldr	r3, [r4, #16]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	6123      	str	r3, [r4, #16]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	607b      	str	r3, [r7, #4]
 800b7d6:	f340 8087 	ble.w	800b8e8 <_scanf_float+0x288>
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	3301      	adds	r3, #1
 800b7de:	603b      	str	r3, [r7, #0]
 800b7e0:	e764      	b.n	800b6ac <_scanf_float+0x4c>
 800b7e2:	eb1a 0105 	adds.w	r1, sl, r5
 800b7e6:	f47f af6e 	bne.w	800b6c6 <_scanf_float+0x66>
 800b7ea:	460d      	mov	r5, r1
 800b7ec:	468a      	mov	sl, r1
 800b7ee:	6822      	ldr	r2, [r4, #0]
 800b7f0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b7f4:	6022      	str	r2, [r4, #0]
 800b7f6:	f806 3b01 	strb.w	r3, [r6], #1
 800b7fa:	e7e2      	b.n	800b7c2 <_scanf_float+0x162>
 800b7fc:	6822      	ldr	r2, [r4, #0]
 800b7fe:	0610      	lsls	r0, r2, #24
 800b800:	f57f af61 	bpl.w	800b6c6 <_scanf_float+0x66>
 800b804:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b808:	6022      	str	r2, [r4, #0]
 800b80a:	e7f4      	b.n	800b7f6 <_scanf_float+0x196>
 800b80c:	f1ba 0f00 	cmp.w	sl, #0
 800b810:	d10e      	bne.n	800b830 <_scanf_float+0x1d0>
 800b812:	f1b9 0f00 	cmp.w	r9, #0
 800b816:	d10e      	bne.n	800b836 <_scanf_float+0x1d6>
 800b818:	6822      	ldr	r2, [r4, #0]
 800b81a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b81e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b822:	d108      	bne.n	800b836 <_scanf_float+0x1d6>
 800b824:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b828:	f04f 0a01 	mov.w	sl, #1
 800b82c:	6022      	str	r2, [r4, #0]
 800b82e:	e7e2      	b.n	800b7f6 <_scanf_float+0x196>
 800b830:	f1ba 0f02 	cmp.w	sl, #2
 800b834:	d055      	beq.n	800b8e2 <_scanf_float+0x282>
 800b836:	2d01      	cmp	r5, #1
 800b838:	d002      	beq.n	800b840 <_scanf_float+0x1e0>
 800b83a:	2d04      	cmp	r5, #4
 800b83c:	f47f af43 	bne.w	800b6c6 <_scanf_float+0x66>
 800b840:	3501      	adds	r5, #1
 800b842:	b2ed      	uxtb	r5, r5
 800b844:	e7d7      	b.n	800b7f6 <_scanf_float+0x196>
 800b846:	f1ba 0f01 	cmp.w	sl, #1
 800b84a:	f47f af3c 	bne.w	800b6c6 <_scanf_float+0x66>
 800b84e:	f04f 0a02 	mov.w	sl, #2
 800b852:	e7d0      	b.n	800b7f6 <_scanf_float+0x196>
 800b854:	b97d      	cbnz	r5, 800b876 <_scanf_float+0x216>
 800b856:	f1b9 0f00 	cmp.w	r9, #0
 800b85a:	f47f af37 	bne.w	800b6cc <_scanf_float+0x6c>
 800b85e:	6822      	ldr	r2, [r4, #0]
 800b860:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b864:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b868:	f040 8103 	bne.w	800ba72 <_scanf_float+0x412>
 800b86c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b870:	2501      	movs	r5, #1
 800b872:	6022      	str	r2, [r4, #0]
 800b874:	e7bf      	b.n	800b7f6 <_scanf_float+0x196>
 800b876:	2d03      	cmp	r5, #3
 800b878:	d0e2      	beq.n	800b840 <_scanf_float+0x1e0>
 800b87a:	2d05      	cmp	r5, #5
 800b87c:	e7de      	b.n	800b83c <_scanf_float+0x1dc>
 800b87e:	2d02      	cmp	r5, #2
 800b880:	f47f af21 	bne.w	800b6c6 <_scanf_float+0x66>
 800b884:	2503      	movs	r5, #3
 800b886:	e7b6      	b.n	800b7f6 <_scanf_float+0x196>
 800b888:	2d06      	cmp	r5, #6
 800b88a:	f47f af1c 	bne.w	800b6c6 <_scanf_float+0x66>
 800b88e:	2507      	movs	r5, #7
 800b890:	e7b1      	b.n	800b7f6 <_scanf_float+0x196>
 800b892:	6822      	ldr	r2, [r4, #0]
 800b894:	0591      	lsls	r1, r2, #22
 800b896:	f57f af16 	bpl.w	800b6c6 <_scanf_float+0x66>
 800b89a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b89e:	6022      	str	r2, [r4, #0]
 800b8a0:	f8cd 9008 	str.w	r9, [sp, #8]
 800b8a4:	e7a7      	b.n	800b7f6 <_scanf_float+0x196>
 800b8a6:	6822      	ldr	r2, [r4, #0]
 800b8a8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b8ac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b8b0:	d006      	beq.n	800b8c0 <_scanf_float+0x260>
 800b8b2:	0550      	lsls	r0, r2, #21
 800b8b4:	f57f af07 	bpl.w	800b6c6 <_scanf_float+0x66>
 800b8b8:	f1b9 0f00 	cmp.w	r9, #0
 800b8bc:	f000 80d9 	beq.w	800ba72 <_scanf_float+0x412>
 800b8c0:	0591      	lsls	r1, r2, #22
 800b8c2:	bf58      	it	pl
 800b8c4:	9902      	ldrpl	r1, [sp, #8]
 800b8c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b8ca:	bf58      	it	pl
 800b8cc:	eba9 0101 	subpl.w	r1, r9, r1
 800b8d0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b8d4:	f04f 0900 	mov.w	r9, #0
 800b8d8:	bf58      	it	pl
 800b8da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b8de:	6022      	str	r2, [r4, #0]
 800b8e0:	e789      	b.n	800b7f6 <_scanf_float+0x196>
 800b8e2:	f04f 0a03 	mov.w	sl, #3
 800b8e6:	e786      	b.n	800b7f6 <_scanf_float+0x196>
 800b8e8:	4639      	mov	r1, r7
 800b8ea:	4640      	mov	r0, r8
 800b8ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b8f0:	4798      	blx	r3
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	f43f aeda 	beq.w	800b6ac <_scanf_float+0x4c>
 800b8f8:	e6e5      	b.n	800b6c6 <_scanf_float+0x66>
 800b8fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b8fe:	463a      	mov	r2, r7
 800b900:	4640      	mov	r0, r8
 800b902:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b906:	4798      	blx	r3
 800b908:	6923      	ldr	r3, [r4, #16]
 800b90a:	3b01      	subs	r3, #1
 800b90c:	6123      	str	r3, [r4, #16]
 800b90e:	e6e7      	b.n	800b6e0 <_scanf_float+0x80>
 800b910:	1e6b      	subs	r3, r5, #1
 800b912:	2b06      	cmp	r3, #6
 800b914:	d824      	bhi.n	800b960 <_scanf_float+0x300>
 800b916:	2d02      	cmp	r5, #2
 800b918:	d836      	bhi.n	800b988 <_scanf_float+0x328>
 800b91a:	9b01      	ldr	r3, [sp, #4]
 800b91c:	429e      	cmp	r6, r3
 800b91e:	f67f aee3 	bls.w	800b6e8 <_scanf_float+0x88>
 800b922:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b926:	463a      	mov	r2, r7
 800b928:	4640      	mov	r0, r8
 800b92a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b92e:	4798      	blx	r3
 800b930:	6923      	ldr	r3, [r4, #16]
 800b932:	3b01      	subs	r3, #1
 800b934:	6123      	str	r3, [r4, #16]
 800b936:	e7f0      	b.n	800b91a <_scanf_float+0x2ba>
 800b938:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b93c:	463a      	mov	r2, r7
 800b93e:	4640      	mov	r0, r8
 800b940:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b944:	4798      	blx	r3
 800b946:	6923      	ldr	r3, [r4, #16]
 800b948:	3b01      	subs	r3, #1
 800b94a:	6123      	str	r3, [r4, #16]
 800b94c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b950:	fa5f fa8a 	uxtb.w	sl, sl
 800b954:	f1ba 0f02 	cmp.w	sl, #2
 800b958:	d1ee      	bne.n	800b938 <_scanf_float+0x2d8>
 800b95a:	3d03      	subs	r5, #3
 800b95c:	b2ed      	uxtb	r5, r5
 800b95e:	1b76      	subs	r6, r6, r5
 800b960:	6823      	ldr	r3, [r4, #0]
 800b962:	05da      	lsls	r2, r3, #23
 800b964:	d530      	bpl.n	800b9c8 <_scanf_float+0x368>
 800b966:	055b      	lsls	r3, r3, #21
 800b968:	d511      	bpl.n	800b98e <_scanf_float+0x32e>
 800b96a:	9b01      	ldr	r3, [sp, #4]
 800b96c:	429e      	cmp	r6, r3
 800b96e:	f67f aebb 	bls.w	800b6e8 <_scanf_float+0x88>
 800b972:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b976:	463a      	mov	r2, r7
 800b978:	4640      	mov	r0, r8
 800b97a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b97e:	4798      	blx	r3
 800b980:	6923      	ldr	r3, [r4, #16]
 800b982:	3b01      	subs	r3, #1
 800b984:	6123      	str	r3, [r4, #16]
 800b986:	e7f0      	b.n	800b96a <_scanf_float+0x30a>
 800b988:	46aa      	mov	sl, r5
 800b98a:	46b3      	mov	fp, r6
 800b98c:	e7de      	b.n	800b94c <_scanf_float+0x2ec>
 800b98e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b992:	6923      	ldr	r3, [r4, #16]
 800b994:	2965      	cmp	r1, #101	@ 0x65
 800b996:	f103 33ff 	add.w	r3, r3, #4294967295
 800b99a:	f106 35ff 	add.w	r5, r6, #4294967295
 800b99e:	6123      	str	r3, [r4, #16]
 800b9a0:	d00c      	beq.n	800b9bc <_scanf_float+0x35c>
 800b9a2:	2945      	cmp	r1, #69	@ 0x45
 800b9a4:	d00a      	beq.n	800b9bc <_scanf_float+0x35c>
 800b9a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b9aa:	463a      	mov	r2, r7
 800b9ac:	4640      	mov	r0, r8
 800b9ae:	4798      	blx	r3
 800b9b0:	6923      	ldr	r3, [r4, #16]
 800b9b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	1eb5      	subs	r5, r6, #2
 800b9ba:	6123      	str	r3, [r4, #16]
 800b9bc:	463a      	mov	r2, r7
 800b9be:	4640      	mov	r0, r8
 800b9c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b9c4:	4798      	blx	r3
 800b9c6:	462e      	mov	r6, r5
 800b9c8:	6822      	ldr	r2, [r4, #0]
 800b9ca:	f012 0210 	ands.w	r2, r2, #16
 800b9ce:	d001      	beq.n	800b9d4 <_scanf_float+0x374>
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	e68a      	b.n	800b6ea <_scanf_float+0x8a>
 800b9d4:	7032      	strb	r2, [r6, #0]
 800b9d6:	6823      	ldr	r3, [r4, #0]
 800b9d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b9dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b9e0:	d11c      	bne.n	800ba1c <_scanf_float+0x3bc>
 800b9e2:	9b02      	ldr	r3, [sp, #8]
 800b9e4:	454b      	cmp	r3, r9
 800b9e6:	eba3 0209 	sub.w	r2, r3, r9
 800b9ea:	d123      	bne.n	800ba34 <_scanf_float+0x3d4>
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	4640      	mov	r0, r8
 800b9f0:	9901      	ldr	r1, [sp, #4]
 800b9f2:	f7ff f941 	bl	800ac78 <_strtod_r>
 800b9f6:	9b03      	ldr	r3, [sp, #12]
 800b9f8:	6825      	ldr	r5, [r4, #0]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f015 0f02 	tst.w	r5, #2
 800ba00:	4606      	mov	r6, r0
 800ba02:	460f      	mov	r7, r1
 800ba04:	f103 0204 	add.w	r2, r3, #4
 800ba08:	d01f      	beq.n	800ba4a <_scanf_float+0x3ea>
 800ba0a:	9903      	ldr	r1, [sp, #12]
 800ba0c:	600a      	str	r2, [r1, #0]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	e9c3 6700 	strd	r6, r7, [r3]
 800ba14:	68e3      	ldr	r3, [r4, #12]
 800ba16:	3301      	adds	r3, #1
 800ba18:	60e3      	str	r3, [r4, #12]
 800ba1a:	e7d9      	b.n	800b9d0 <_scanf_float+0x370>
 800ba1c:	9b04      	ldr	r3, [sp, #16]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d0e4      	beq.n	800b9ec <_scanf_float+0x38c>
 800ba22:	9905      	ldr	r1, [sp, #20]
 800ba24:	230a      	movs	r3, #10
 800ba26:	4640      	mov	r0, r8
 800ba28:	3101      	adds	r1, #1
 800ba2a:	f7ff f9b1 	bl	800ad90 <_strtol_r>
 800ba2e:	9b04      	ldr	r3, [sp, #16]
 800ba30:	9e05      	ldr	r6, [sp, #20]
 800ba32:	1ac2      	subs	r2, r0, r3
 800ba34:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ba38:	429e      	cmp	r6, r3
 800ba3a:	bf28      	it	cs
 800ba3c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ba40:	4630      	mov	r0, r6
 800ba42:	490d      	ldr	r1, [pc, #52]	@ (800ba78 <_scanf_float+0x418>)
 800ba44:	f000 f982 	bl	800bd4c <siprintf>
 800ba48:	e7d0      	b.n	800b9ec <_scanf_float+0x38c>
 800ba4a:	076d      	lsls	r5, r5, #29
 800ba4c:	d4dd      	bmi.n	800ba0a <_scanf_float+0x3aa>
 800ba4e:	9d03      	ldr	r5, [sp, #12]
 800ba50:	602a      	str	r2, [r5, #0]
 800ba52:	681d      	ldr	r5, [r3, #0]
 800ba54:	4602      	mov	r2, r0
 800ba56:	460b      	mov	r3, r1
 800ba58:	f7f4 ffe2 	bl	8000a20 <__aeabi_dcmpun>
 800ba5c:	b120      	cbz	r0, 800ba68 <_scanf_float+0x408>
 800ba5e:	4807      	ldr	r0, [pc, #28]	@ (800ba7c <_scanf_float+0x41c>)
 800ba60:	f000 fba2 	bl	800c1a8 <nanf>
 800ba64:	6028      	str	r0, [r5, #0]
 800ba66:	e7d5      	b.n	800ba14 <_scanf_float+0x3b4>
 800ba68:	4630      	mov	r0, r6
 800ba6a:	4639      	mov	r1, r7
 800ba6c:	f7f5 f836 	bl	8000adc <__aeabi_d2f>
 800ba70:	e7f8      	b.n	800ba64 <_scanf_float+0x404>
 800ba72:	f04f 0900 	mov.w	r9, #0
 800ba76:	e62d      	b.n	800b6d4 <_scanf_float+0x74>
 800ba78:	0800f4eb 	.word	0x0800f4eb
 800ba7c:	0800ea60 	.word	0x0800ea60

0800ba80 <std>:
 800ba80:	2300      	movs	r3, #0
 800ba82:	b510      	push	{r4, lr}
 800ba84:	4604      	mov	r4, r0
 800ba86:	e9c0 3300 	strd	r3, r3, [r0]
 800ba8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba8e:	6083      	str	r3, [r0, #8]
 800ba90:	8181      	strh	r1, [r0, #12]
 800ba92:	6643      	str	r3, [r0, #100]	@ 0x64
 800ba94:	81c2      	strh	r2, [r0, #14]
 800ba96:	6183      	str	r3, [r0, #24]
 800ba98:	4619      	mov	r1, r3
 800ba9a:	2208      	movs	r2, #8
 800ba9c:	305c      	adds	r0, #92	@ 0x5c
 800ba9e:	f000 fa5d 	bl	800bf5c <memset>
 800baa2:	4b0d      	ldr	r3, [pc, #52]	@ (800bad8 <std+0x58>)
 800baa4:	6224      	str	r4, [r4, #32]
 800baa6:	6263      	str	r3, [r4, #36]	@ 0x24
 800baa8:	4b0c      	ldr	r3, [pc, #48]	@ (800badc <std+0x5c>)
 800baaa:	62a3      	str	r3, [r4, #40]	@ 0x28
 800baac:	4b0c      	ldr	r3, [pc, #48]	@ (800bae0 <std+0x60>)
 800baae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bab0:	4b0c      	ldr	r3, [pc, #48]	@ (800bae4 <std+0x64>)
 800bab2:	6323      	str	r3, [r4, #48]	@ 0x30
 800bab4:	4b0c      	ldr	r3, [pc, #48]	@ (800bae8 <std+0x68>)
 800bab6:	429c      	cmp	r4, r3
 800bab8:	d006      	beq.n	800bac8 <std+0x48>
 800baba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800babe:	4294      	cmp	r4, r2
 800bac0:	d002      	beq.n	800bac8 <std+0x48>
 800bac2:	33d0      	adds	r3, #208	@ 0xd0
 800bac4:	429c      	cmp	r4, r3
 800bac6:	d105      	bne.n	800bad4 <std+0x54>
 800bac8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bacc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bad0:	f000 bb3c 	b.w	800c14c <__retarget_lock_init_recursive>
 800bad4:	bd10      	pop	{r4, pc}
 800bad6:	bf00      	nop
 800bad8:	0800bd8d 	.word	0x0800bd8d
 800badc:	0800bdaf 	.word	0x0800bdaf
 800bae0:	0800bde7 	.word	0x0800bde7
 800bae4:	0800be0b 	.word	0x0800be0b
 800bae8:	20000bc8 	.word	0x20000bc8

0800baec <stdio_exit_handler>:
 800baec:	4a02      	ldr	r2, [pc, #8]	@ (800baf8 <stdio_exit_handler+0xc>)
 800baee:	4903      	ldr	r1, [pc, #12]	@ (800bafc <stdio_exit_handler+0x10>)
 800baf0:	4803      	ldr	r0, [pc, #12]	@ (800bb00 <stdio_exit_handler+0x14>)
 800baf2:	f000 b869 	b.w	800bbc8 <_fwalk_sglue>
 800baf6:	bf00      	nop
 800baf8:	20000010 	.word	0x20000010
 800bafc:	0800e50d 	.word	0x0800e50d
 800bb00:	2000018c 	.word	0x2000018c

0800bb04 <cleanup_stdio>:
 800bb04:	6841      	ldr	r1, [r0, #4]
 800bb06:	4b0c      	ldr	r3, [pc, #48]	@ (800bb38 <cleanup_stdio+0x34>)
 800bb08:	b510      	push	{r4, lr}
 800bb0a:	4299      	cmp	r1, r3
 800bb0c:	4604      	mov	r4, r0
 800bb0e:	d001      	beq.n	800bb14 <cleanup_stdio+0x10>
 800bb10:	f002 fcfc 	bl	800e50c <_fflush_r>
 800bb14:	68a1      	ldr	r1, [r4, #8]
 800bb16:	4b09      	ldr	r3, [pc, #36]	@ (800bb3c <cleanup_stdio+0x38>)
 800bb18:	4299      	cmp	r1, r3
 800bb1a:	d002      	beq.n	800bb22 <cleanup_stdio+0x1e>
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	f002 fcf5 	bl	800e50c <_fflush_r>
 800bb22:	68e1      	ldr	r1, [r4, #12]
 800bb24:	4b06      	ldr	r3, [pc, #24]	@ (800bb40 <cleanup_stdio+0x3c>)
 800bb26:	4299      	cmp	r1, r3
 800bb28:	d004      	beq.n	800bb34 <cleanup_stdio+0x30>
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb30:	f002 bcec 	b.w	800e50c <_fflush_r>
 800bb34:	bd10      	pop	{r4, pc}
 800bb36:	bf00      	nop
 800bb38:	20000bc8 	.word	0x20000bc8
 800bb3c:	20000c30 	.word	0x20000c30
 800bb40:	20000c98 	.word	0x20000c98

0800bb44 <global_stdio_init.part.0>:
 800bb44:	b510      	push	{r4, lr}
 800bb46:	4b0b      	ldr	r3, [pc, #44]	@ (800bb74 <global_stdio_init.part.0+0x30>)
 800bb48:	4c0b      	ldr	r4, [pc, #44]	@ (800bb78 <global_stdio_init.part.0+0x34>)
 800bb4a:	4a0c      	ldr	r2, [pc, #48]	@ (800bb7c <global_stdio_init.part.0+0x38>)
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	601a      	str	r2, [r3, #0]
 800bb50:	2104      	movs	r1, #4
 800bb52:	2200      	movs	r2, #0
 800bb54:	f7ff ff94 	bl	800ba80 <std>
 800bb58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	2109      	movs	r1, #9
 800bb60:	f7ff ff8e 	bl	800ba80 <std>
 800bb64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bb68:	2202      	movs	r2, #2
 800bb6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb6e:	2112      	movs	r1, #18
 800bb70:	f7ff bf86 	b.w	800ba80 <std>
 800bb74:	20000d00 	.word	0x20000d00
 800bb78:	20000bc8 	.word	0x20000bc8
 800bb7c:	0800baed 	.word	0x0800baed

0800bb80 <__sfp_lock_acquire>:
 800bb80:	4801      	ldr	r0, [pc, #4]	@ (800bb88 <__sfp_lock_acquire+0x8>)
 800bb82:	f000 bae4 	b.w	800c14e <__retarget_lock_acquire_recursive>
 800bb86:	bf00      	nop
 800bb88:	20000d09 	.word	0x20000d09

0800bb8c <__sfp_lock_release>:
 800bb8c:	4801      	ldr	r0, [pc, #4]	@ (800bb94 <__sfp_lock_release+0x8>)
 800bb8e:	f000 badf 	b.w	800c150 <__retarget_lock_release_recursive>
 800bb92:	bf00      	nop
 800bb94:	20000d09 	.word	0x20000d09

0800bb98 <__sinit>:
 800bb98:	b510      	push	{r4, lr}
 800bb9a:	4604      	mov	r4, r0
 800bb9c:	f7ff fff0 	bl	800bb80 <__sfp_lock_acquire>
 800bba0:	6a23      	ldr	r3, [r4, #32]
 800bba2:	b11b      	cbz	r3, 800bbac <__sinit+0x14>
 800bba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bba8:	f7ff bff0 	b.w	800bb8c <__sfp_lock_release>
 800bbac:	4b04      	ldr	r3, [pc, #16]	@ (800bbc0 <__sinit+0x28>)
 800bbae:	6223      	str	r3, [r4, #32]
 800bbb0:	4b04      	ldr	r3, [pc, #16]	@ (800bbc4 <__sinit+0x2c>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1f5      	bne.n	800bba4 <__sinit+0xc>
 800bbb8:	f7ff ffc4 	bl	800bb44 <global_stdio_init.part.0>
 800bbbc:	e7f2      	b.n	800bba4 <__sinit+0xc>
 800bbbe:	bf00      	nop
 800bbc0:	0800bb05 	.word	0x0800bb05
 800bbc4:	20000d00 	.word	0x20000d00

0800bbc8 <_fwalk_sglue>:
 800bbc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbcc:	4607      	mov	r7, r0
 800bbce:	4688      	mov	r8, r1
 800bbd0:	4614      	mov	r4, r2
 800bbd2:	2600      	movs	r6, #0
 800bbd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bbd8:	f1b9 0901 	subs.w	r9, r9, #1
 800bbdc:	d505      	bpl.n	800bbea <_fwalk_sglue+0x22>
 800bbde:	6824      	ldr	r4, [r4, #0]
 800bbe0:	2c00      	cmp	r4, #0
 800bbe2:	d1f7      	bne.n	800bbd4 <_fwalk_sglue+0xc>
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbea:	89ab      	ldrh	r3, [r5, #12]
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d907      	bls.n	800bc00 <_fwalk_sglue+0x38>
 800bbf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	d003      	beq.n	800bc00 <_fwalk_sglue+0x38>
 800bbf8:	4629      	mov	r1, r5
 800bbfa:	4638      	mov	r0, r7
 800bbfc:	47c0      	blx	r8
 800bbfe:	4306      	orrs	r6, r0
 800bc00:	3568      	adds	r5, #104	@ 0x68
 800bc02:	e7e9      	b.n	800bbd8 <_fwalk_sglue+0x10>

0800bc04 <iprintf>:
 800bc04:	b40f      	push	{r0, r1, r2, r3}
 800bc06:	b507      	push	{r0, r1, r2, lr}
 800bc08:	4906      	ldr	r1, [pc, #24]	@ (800bc24 <iprintf+0x20>)
 800bc0a:	ab04      	add	r3, sp, #16
 800bc0c:	6808      	ldr	r0, [r1, #0]
 800bc0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc12:	6881      	ldr	r1, [r0, #8]
 800bc14:	9301      	str	r3, [sp, #4]
 800bc16:	f002 fae1 	bl	800e1dc <_vfiprintf_r>
 800bc1a:	b003      	add	sp, #12
 800bc1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc20:	b004      	add	sp, #16
 800bc22:	4770      	bx	lr
 800bc24:	20000188 	.word	0x20000188

0800bc28 <_puts_r>:
 800bc28:	6a03      	ldr	r3, [r0, #32]
 800bc2a:	b570      	push	{r4, r5, r6, lr}
 800bc2c:	4605      	mov	r5, r0
 800bc2e:	460e      	mov	r6, r1
 800bc30:	6884      	ldr	r4, [r0, #8]
 800bc32:	b90b      	cbnz	r3, 800bc38 <_puts_r+0x10>
 800bc34:	f7ff ffb0 	bl	800bb98 <__sinit>
 800bc38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc3a:	07db      	lsls	r3, r3, #31
 800bc3c:	d405      	bmi.n	800bc4a <_puts_r+0x22>
 800bc3e:	89a3      	ldrh	r3, [r4, #12]
 800bc40:	0598      	lsls	r0, r3, #22
 800bc42:	d402      	bmi.n	800bc4a <_puts_r+0x22>
 800bc44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc46:	f000 fa82 	bl	800c14e <__retarget_lock_acquire_recursive>
 800bc4a:	89a3      	ldrh	r3, [r4, #12]
 800bc4c:	0719      	lsls	r1, r3, #28
 800bc4e:	d502      	bpl.n	800bc56 <_puts_r+0x2e>
 800bc50:	6923      	ldr	r3, [r4, #16]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d135      	bne.n	800bcc2 <_puts_r+0x9a>
 800bc56:	4621      	mov	r1, r4
 800bc58:	4628      	mov	r0, r5
 800bc5a:	f000 f919 	bl	800be90 <__swsetup_r>
 800bc5e:	b380      	cbz	r0, 800bcc2 <_puts_r+0x9a>
 800bc60:	f04f 35ff 	mov.w	r5, #4294967295
 800bc64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc66:	07da      	lsls	r2, r3, #31
 800bc68:	d405      	bmi.n	800bc76 <_puts_r+0x4e>
 800bc6a:	89a3      	ldrh	r3, [r4, #12]
 800bc6c:	059b      	lsls	r3, r3, #22
 800bc6e:	d402      	bmi.n	800bc76 <_puts_r+0x4e>
 800bc70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc72:	f000 fa6d 	bl	800c150 <__retarget_lock_release_recursive>
 800bc76:	4628      	mov	r0, r5
 800bc78:	bd70      	pop	{r4, r5, r6, pc}
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	da04      	bge.n	800bc88 <_puts_r+0x60>
 800bc7e:	69a2      	ldr	r2, [r4, #24]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	dc17      	bgt.n	800bcb4 <_puts_r+0x8c>
 800bc84:	290a      	cmp	r1, #10
 800bc86:	d015      	beq.n	800bcb4 <_puts_r+0x8c>
 800bc88:	6823      	ldr	r3, [r4, #0]
 800bc8a:	1c5a      	adds	r2, r3, #1
 800bc8c:	6022      	str	r2, [r4, #0]
 800bc8e:	7019      	strb	r1, [r3, #0]
 800bc90:	68a3      	ldr	r3, [r4, #8]
 800bc92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bc96:	3b01      	subs	r3, #1
 800bc98:	60a3      	str	r3, [r4, #8]
 800bc9a:	2900      	cmp	r1, #0
 800bc9c:	d1ed      	bne.n	800bc7a <_puts_r+0x52>
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	da11      	bge.n	800bcc6 <_puts_r+0x9e>
 800bca2:	4622      	mov	r2, r4
 800bca4:	210a      	movs	r1, #10
 800bca6:	4628      	mov	r0, r5
 800bca8:	f000 f8b3 	bl	800be12 <__swbuf_r>
 800bcac:	3001      	adds	r0, #1
 800bcae:	d0d7      	beq.n	800bc60 <_puts_r+0x38>
 800bcb0:	250a      	movs	r5, #10
 800bcb2:	e7d7      	b.n	800bc64 <_puts_r+0x3c>
 800bcb4:	4622      	mov	r2, r4
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	f000 f8ab 	bl	800be12 <__swbuf_r>
 800bcbc:	3001      	adds	r0, #1
 800bcbe:	d1e7      	bne.n	800bc90 <_puts_r+0x68>
 800bcc0:	e7ce      	b.n	800bc60 <_puts_r+0x38>
 800bcc2:	3e01      	subs	r6, #1
 800bcc4:	e7e4      	b.n	800bc90 <_puts_r+0x68>
 800bcc6:	6823      	ldr	r3, [r4, #0]
 800bcc8:	1c5a      	adds	r2, r3, #1
 800bcca:	6022      	str	r2, [r4, #0]
 800bccc:	220a      	movs	r2, #10
 800bcce:	701a      	strb	r2, [r3, #0]
 800bcd0:	e7ee      	b.n	800bcb0 <_puts_r+0x88>
	...

0800bcd4 <puts>:
 800bcd4:	4b02      	ldr	r3, [pc, #8]	@ (800bce0 <puts+0xc>)
 800bcd6:	4601      	mov	r1, r0
 800bcd8:	6818      	ldr	r0, [r3, #0]
 800bcda:	f7ff bfa5 	b.w	800bc28 <_puts_r>
 800bcde:	bf00      	nop
 800bce0:	20000188 	.word	0x20000188

0800bce4 <sniprintf>:
 800bce4:	b40c      	push	{r2, r3}
 800bce6:	b530      	push	{r4, r5, lr}
 800bce8:	4b17      	ldr	r3, [pc, #92]	@ (800bd48 <sniprintf+0x64>)
 800bcea:	1e0c      	subs	r4, r1, #0
 800bcec:	681d      	ldr	r5, [r3, #0]
 800bcee:	b09d      	sub	sp, #116	@ 0x74
 800bcf0:	da08      	bge.n	800bd04 <sniprintf+0x20>
 800bcf2:	238b      	movs	r3, #139	@ 0x8b
 800bcf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf8:	602b      	str	r3, [r5, #0]
 800bcfa:	b01d      	add	sp, #116	@ 0x74
 800bcfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd00:	b002      	add	sp, #8
 800bd02:	4770      	bx	lr
 800bd04:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bd08:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bd0c:	bf0c      	ite	eq
 800bd0e:	4623      	moveq	r3, r4
 800bd10:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bd14:	9304      	str	r3, [sp, #16]
 800bd16:	9307      	str	r3, [sp, #28]
 800bd18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bd1c:	9002      	str	r0, [sp, #8]
 800bd1e:	9006      	str	r0, [sp, #24]
 800bd20:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bd24:	4628      	mov	r0, r5
 800bd26:	ab21      	add	r3, sp, #132	@ 0x84
 800bd28:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bd2a:	a902      	add	r1, sp, #8
 800bd2c:	9301      	str	r3, [sp, #4]
 800bd2e:	f002 f931 	bl	800df94 <_svfiprintf_r>
 800bd32:	1c43      	adds	r3, r0, #1
 800bd34:	bfbc      	itt	lt
 800bd36:	238b      	movlt	r3, #139	@ 0x8b
 800bd38:	602b      	strlt	r3, [r5, #0]
 800bd3a:	2c00      	cmp	r4, #0
 800bd3c:	d0dd      	beq.n	800bcfa <sniprintf+0x16>
 800bd3e:	2200      	movs	r2, #0
 800bd40:	9b02      	ldr	r3, [sp, #8]
 800bd42:	701a      	strb	r2, [r3, #0]
 800bd44:	e7d9      	b.n	800bcfa <sniprintf+0x16>
 800bd46:	bf00      	nop
 800bd48:	20000188 	.word	0x20000188

0800bd4c <siprintf>:
 800bd4c:	b40e      	push	{r1, r2, r3}
 800bd4e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bd52:	b500      	push	{lr}
 800bd54:	b09c      	sub	sp, #112	@ 0x70
 800bd56:	ab1d      	add	r3, sp, #116	@ 0x74
 800bd58:	9002      	str	r0, [sp, #8]
 800bd5a:	9006      	str	r0, [sp, #24]
 800bd5c:	9107      	str	r1, [sp, #28]
 800bd5e:	9104      	str	r1, [sp, #16]
 800bd60:	4808      	ldr	r0, [pc, #32]	@ (800bd84 <siprintf+0x38>)
 800bd62:	4909      	ldr	r1, [pc, #36]	@ (800bd88 <siprintf+0x3c>)
 800bd64:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd68:	9105      	str	r1, [sp, #20]
 800bd6a:	6800      	ldr	r0, [r0, #0]
 800bd6c:	a902      	add	r1, sp, #8
 800bd6e:	9301      	str	r3, [sp, #4]
 800bd70:	f002 f910 	bl	800df94 <_svfiprintf_r>
 800bd74:	2200      	movs	r2, #0
 800bd76:	9b02      	ldr	r3, [sp, #8]
 800bd78:	701a      	strb	r2, [r3, #0]
 800bd7a:	b01c      	add	sp, #112	@ 0x70
 800bd7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd80:	b003      	add	sp, #12
 800bd82:	4770      	bx	lr
 800bd84:	20000188 	.word	0x20000188
 800bd88:	ffff0208 	.word	0xffff0208

0800bd8c <__sread>:
 800bd8c:	b510      	push	{r4, lr}
 800bd8e:	460c      	mov	r4, r1
 800bd90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd94:	f000 f97c 	bl	800c090 <_read_r>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	bfab      	itete	ge
 800bd9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bd9e:	89a3      	ldrhlt	r3, [r4, #12]
 800bda0:	181b      	addge	r3, r3, r0
 800bda2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bda6:	bfac      	ite	ge
 800bda8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bdaa:	81a3      	strhlt	r3, [r4, #12]
 800bdac:	bd10      	pop	{r4, pc}

0800bdae <__swrite>:
 800bdae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdb2:	461f      	mov	r7, r3
 800bdb4:	898b      	ldrh	r3, [r1, #12]
 800bdb6:	4605      	mov	r5, r0
 800bdb8:	05db      	lsls	r3, r3, #23
 800bdba:	460c      	mov	r4, r1
 800bdbc:	4616      	mov	r6, r2
 800bdbe:	d505      	bpl.n	800bdcc <__swrite+0x1e>
 800bdc0:	2302      	movs	r3, #2
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdc8:	f000 f950 	bl	800c06c <_lseek_r>
 800bdcc:	89a3      	ldrh	r3, [r4, #12]
 800bdce:	4632      	mov	r2, r6
 800bdd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bdd4:	81a3      	strh	r3, [r4, #12]
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	463b      	mov	r3, r7
 800bdda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bde2:	f000 b977 	b.w	800c0d4 <_write_r>

0800bde6 <__sseek>:
 800bde6:	b510      	push	{r4, lr}
 800bde8:	460c      	mov	r4, r1
 800bdea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdee:	f000 f93d 	bl	800c06c <_lseek_r>
 800bdf2:	1c43      	adds	r3, r0, #1
 800bdf4:	89a3      	ldrh	r3, [r4, #12]
 800bdf6:	bf15      	itete	ne
 800bdf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bdfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bdfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800be02:	81a3      	strheq	r3, [r4, #12]
 800be04:	bf18      	it	ne
 800be06:	81a3      	strhne	r3, [r4, #12]
 800be08:	bd10      	pop	{r4, pc}

0800be0a <__sclose>:
 800be0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be0e:	f000 b91d 	b.w	800c04c <_close_r>

0800be12 <__swbuf_r>:
 800be12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be14:	460e      	mov	r6, r1
 800be16:	4614      	mov	r4, r2
 800be18:	4605      	mov	r5, r0
 800be1a:	b118      	cbz	r0, 800be24 <__swbuf_r+0x12>
 800be1c:	6a03      	ldr	r3, [r0, #32]
 800be1e:	b90b      	cbnz	r3, 800be24 <__swbuf_r+0x12>
 800be20:	f7ff feba 	bl	800bb98 <__sinit>
 800be24:	69a3      	ldr	r3, [r4, #24]
 800be26:	60a3      	str	r3, [r4, #8]
 800be28:	89a3      	ldrh	r3, [r4, #12]
 800be2a:	071a      	lsls	r2, r3, #28
 800be2c:	d501      	bpl.n	800be32 <__swbuf_r+0x20>
 800be2e:	6923      	ldr	r3, [r4, #16]
 800be30:	b943      	cbnz	r3, 800be44 <__swbuf_r+0x32>
 800be32:	4621      	mov	r1, r4
 800be34:	4628      	mov	r0, r5
 800be36:	f000 f82b 	bl	800be90 <__swsetup_r>
 800be3a:	b118      	cbz	r0, 800be44 <__swbuf_r+0x32>
 800be3c:	f04f 37ff 	mov.w	r7, #4294967295
 800be40:	4638      	mov	r0, r7
 800be42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be44:	6823      	ldr	r3, [r4, #0]
 800be46:	6922      	ldr	r2, [r4, #16]
 800be48:	b2f6      	uxtb	r6, r6
 800be4a:	1a98      	subs	r0, r3, r2
 800be4c:	6963      	ldr	r3, [r4, #20]
 800be4e:	4637      	mov	r7, r6
 800be50:	4283      	cmp	r3, r0
 800be52:	dc05      	bgt.n	800be60 <__swbuf_r+0x4e>
 800be54:	4621      	mov	r1, r4
 800be56:	4628      	mov	r0, r5
 800be58:	f002 fb58 	bl	800e50c <_fflush_r>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d1ed      	bne.n	800be3c <__swbuf_r+0x2a>
 800be60:	68a3      	ldr	r3, [r4, #8]
 800be62:	3b01      	subs	r3, #1
 800be64:	60a3      	str	r3, [r4, #8]
 800be66:	6823      	ldr	r3, [r4, #0]
 800be68:	1c5a      	adds	r2, r3, #1
 800be6a:	6022      	str	r2, [r4, #0]
 800be6c:	701e      	strb	r6, [r3, #0]
 800be6e:	6962      	ldr	r2, [r4, #20]
 800be70:	1c43      	adds	r3, r0, #1
 800be72:	429a      	cmp	r2, r3
 800be74:	d004      	beq.n	800be80 <__swbuf_r+0x6e>
 800be76:	89a3      	ldrh	r3, [r4, #12]
 800be78:	07db      	lsls	r3, r3, #31
 800be7a:	d5e1      	bpl.n	800be40 <__swbuf_r+0x2e>
 800be7c:	2e0a      	cmp	r6, #10
 800be7e:	d1df      	bne.n	800be40 <__swbuf_r+0x2e>
 800be80:	4621      	mov	r1, r4
 800be82:	4628      	mov	r0, r5
 800be84:	f002 fb42 	bl	800e50c <_fflush_r>
 800be88:	2800      	cmp	r0, #0
 800be8a:	d0d9      	beq.n	800be40 <__swbuf_r+0x2e>
 800be8c:	e7d6      	b.n	800be3c <__swbuf_r+0x2a>
	...

0800be90 <__swsetup_r>:
 800be90:	b538      	push	{r3, r4, r5, lr}
 800be92:	4b29      	ldr	r3, [pc, #164]	@ (800bf38 <__swsetup_r+0xa8>)
 800be94:	4605      	mov	r5, r0
 800be96:	6818      	ldr	r0, [r3, #0]
 800be98:	460c      	mov	r4, r1
 800be9a:	b118      	cbz	r0, 800bea4 <__swsetup_r+0x14>
 800be9c:	6a03      	ldr	r3, [r0, #32]
 800be9e:	b90b      	cbnz	r3, 800bea4 <__swsetup_r+0x14>
 800bea0:	f7ff fe7a 	bl	800bb98 <__sinit>
 800bea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bea8:	0719      	lsls	r1, r3, #28
 800beaa:	d422      	bmi.n	800bef2 <__swsetup_r+0x62>
 800beac:	06da      	lsls	r2, r3, #27
 800beae:	d407      	bmi.n	800bec0 <__swsetup_r+0x30>
 800beb0:	2209      	movs	r2, #9
 800beb2:	602a      	str	r2, [r5, #0]
 800beb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bebc:	81a3      	strh	r3, [r4, #12]
 800bebe:	e033      	b.n	800bf28 <__swsetup_r+0x98>
 800bec0:	0758      	lsls	r0, r3, #29
 800bec2:	d512      	bpl.n	800beea <__swsetup_r+0x5a>
 800bec4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bec6:	b141      	cbz	r1, 800beda <__swsetup_r+0x4a>
 800bec8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800becc:	4299      	cmp	r1, r3
 800bece:	d002      	beq.n	800bed6 <__swsetup_r+0x46>
 800bed0:	4628      	mov	r0, r5
 800bed2:	f000 ffbd 	bl	800ce50 <_free_r>
 800bed6:	2300      	movs	r3, #0
 800bed8:	6363      	str	r3, [r4, #52]	@ 0x34
 800beda:	89a3      	ldrh	r3, [r4, #12]
 800bedc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bee0:	81a3      	strh	r3, [r4, #12]
 800bee2:	2300      	movs	r3, #0
 800bee4:	6063      	str	r3, [r4, #4]
 800bee6:	6923      	ldr	r3, [r4, #16]
 800bee8:	6023      	str	r3, [r4, #0]
 800beea:	89a3      	ldrh	r3, [r4, #12]
 800beec:	f043 0308 	orr.w	r3, r3, #8
 800bef0:	81a3      	strh	r3, [r4, #12]
 800bef2:	6923      	ldr	r3, [r4, #16]
 800bef4:	b94b      	cbnz	r3, 800bf0a <__swsetup_r+0x7a>
 800bef6:	89a3      	ldrh	r3, [r4, #12]
 800bef8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800befc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf00:	d003      	beq.n	800bf0a <__swsetup_r+0x7a>
 800bf02:	4621      	mov	r1, r4
 800bf04:	4628      	mov	r0, r5
 800bf06:	f002 fb4e 	bl	800e5a6 <__smakebuf_r>
 800bf0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf0e:	f013 0201 	ands.w	r2, r3, #1
 800bf12:	d00a      	beq.n	800bf2a <__swsetup_r+0x9a>
 800bf14:	2200      	movs	r2, #0
 800bf16:	60a2      	str	r2, [r4, #8]
 800bf18:	6962      	ldr	r2, [r4, #20]
 800bf1a:	4252      	negs	r2, r2
 800bf1c:	61a2      	str	r2, [r4, #24]
 800bf1e:	6922      	ldr	r2, [r4, #16]
 800bf20:	b942      	cbnz	r2, 800bf34 <__swsetup_r+0xa4>
 800bf22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bf26:	d1c5      	bne.n	800beb4 <__swsetup_r+0x24>
 800bf28:	bd38      	pop	{r3, r4, r5, pc}
 800bf2a:	0799      	lsls	r1, r3, #30
 800bf2c:	bf58      	it	pl
 800bf2e:	6962      	ldrpl	r2, [r4, #20]
 800bf30:	60a2      	str	r2, [r4, #8]
 800bf32:	e7f4      	b.n	800bf1e <__swsetup_r+0x8e>
 800bf34:	2000      	movs	r0, #0
 800bf36:	e7f7      	b.n	800bf28 <__swsetup_r+0x98>
 800bf38:	20000188 	.word	0x20000188

0800bf3c <memcmp>:
 800bf3c:	b510      	push	{r4, lr}
 800bf3e:	3901      	subs	r1, #1
 800bf40:	4402      	add	r2, r0
 800bf42:	4290      	cmp	r0, r2
 800bf44:	d101      	bne.n	800bf4a <memcmp+0xe>
 800bf46:	2000      	movs	r0, #0
 800bf48:	e005      	b.n	800bf56 <memcmp+0x1a>
 800bf4a:	7803      	ldrb	r3, [r0, #0]
 800bf4c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bf50:	42a3      	cmp	r3, r4
 800bf52:	d001      	beq.n	800bf58 <memcmp+0x1c>
 800bf54:	1b18      	subs	r0, r3, r4
 800bf56:	bd10      	pop	{r4, pc}
 800bf58:	3001      	adds	r0, #1
 800bf5a:	e7f2      	b.n	800bf42 <memcmp+0x6>

0800bf5c <memset>:
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	4402      	add	r2, r0
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d100      	bne.n	800bf66 <memset+0xa>
 800bf64:	4770      	bx	lr
 800bf66:	f803 1b01 	strb.w	r1, [r3], #1
 800bf6a:	e7f9      	b.n	800bf60 <memset+0x4>

0800bf6c <strcat>:
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	b510      	push	{r4, lr}
 800bf70:	7814      	ldrb	r4, [r2, #0]
 800bf72:	4613      	mov	r3, r2
 800bf74:	3201      	adds	r2, #1
 800bf76:	2c00      	cmp	r4, #0
 800bf78:	d1fa      	bne.n	800bf70 <strcat+0x4>
 800bf7a:	3b01      	subs	r3, #1
 800bf7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf80:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf84:	2a00      	cmp	r2, #0
 800bf86:	d1f9      	bne.n	800bf7c <strcat+0x10>
 800bf88:	bd10      	pop	{r4, pc}

0800bf8a <strchr>:
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	b2c9      	uxtb	r1, r1
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf94:	b112      	cbz	r2, 800bf9c <strchr+0x12>
 800bf96:	428a      	cmp	r2, r1
 800bf98:	d1f9      	bne.n	800bf8e <strchr+0x4>
 800bf9a:	4770      	bx	lr
 800bf9c:	2900      	cmp	r1, #0
 800bf9e:	bf18      	it	ne
 800bfa0:	2000      	movne	r0, #0
 800bfa2:	4770      	bx	lr

0800bfa4 <strncmp>:
 800bfa4:	b510      	push	{r4, lr}
 800bfa6:	b16a      	cbz	r2, 800bfc4 <strncmp+0x20>
 800bfa8:	3901      	subs	r1, #1
 800bfaa:	1884      	adds	r4, r0, r2
 800bfac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfb0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d103      	bne.n	800bfc0 <strncmp+0x1c>
 800bfb8:	42a0      	cmp	r0, r4
 800bfba:	d001      	beq.n	800bfc0 <strncmp+0x1c>
 800bfbc:	2a00      	cmp	r2, #0
 800bfbe:	d1f5      	bne.n	800bfac <strncmp+0x8>
 800bfc0:	1ad0      	subs	r0, r2, r3
 800bfc2:	bd10      	pop	{r4, pc}
 800bfc4:	4610      	mov	r0, r2
 800bfc6:	e7fc      	b.n	800bfc2 <strncmp+0x1e>

0800bfc8 <strncpy>:
 800bfc8:	4603      	mov	r3, r0
 800bfca:	b510      	push	{r4, lr}
 800bfcc:	3901      	subs	r1, #1
 800bfce:	b132      	cbz	r2, 800bfde <strncpy+0x16>
 800bfd0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bfd4:	3a01      	subs	r2, #1
 800bfd6:	f803 4b01 	strb.w	r4, [r3], #1
 800bfda:	2c00      	cmp	r4, #0
 800bfdc:	d1f7      	bne.n	800bfce <strncpy+0x6>
 800bfde:	2100      	movs	r1, #0
 800bfe0:	441a      	add	r2, r3
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d100      	bne.n	800bfe8 <strncpy+0x20>
 800bfe6:	bd10      	pop	{r4, pc}
 800bfe8:	f803 1b01 	strb.w	r1, [r3], #1
 800bfec:	e7f9      	b.n	800bfe2 <strncpy+0x1a>

0800bfee <__strtok_r>:
 800bfee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bff0:	4604      	mov	r4, r0
 800bff2:	b908      	cbnz	r0, 800bff8 <__strtok_r+0xa>
 800bff4:	6814      	ldr	r4, [r2, #0]
 800bff6:	b144      	cbz	r4, 800c00a <__strtok_r+0x1c>
 800bff8:	460f      	mov	r7, r1
 800bffa:	4620      	mov	r0, r4
 800bffc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c000:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c004:	b91e      	cbnz	r6, 800c00e <__strtok_r+0x20>
 800c006:	b965      	cbnz	r5, 800c022 <__strtok_r+0x34>
 800c008:	6015      	str	r5, [r2, #0]
 800c00a:	2000      	movs	r0, #0
 800c00c:	e005      	b.n	800c01a <__strtok_r+0x2c>
 800c00e:	42b5      	cmp	r5, r6
 800c010:	d1f6      	bne.n	800c000 <__strtok_r+0x12>
 800c012:	2b00      	cmp	r3, #0
 800c014:	d1f0      	bne.n	800bff8 <__strtok_r+0xa>
 800c016:	6014      	str	r4, [r2, #0]
 800c018:	7003      	strb	r3, [r0, #0]
 800c01a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c01c:	461c      	mov	r4, r3
 800c01e:	e00c      	b.n	800c03a <__strtok_r+0x4c>
 800c020:	b915      	cbnz	r5, 800c028 <__strtok_r+0x3a>
 800c022:	460e      	mov	r6, r1
 800c024:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c028:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c02c:	42ab      	cmp	r3, r5
 800c02e:	d1f7      	bne.n	800c020 <__strtok_r+0x32>
 800c030:	2b00      	cmp	r3, #0
 800c032:	d0f3      	beq.n	800c01c <__strtok_r+0x2e>
 800c034:	2300      	movs	r3, #0
 800c036:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c03a:	6014      	str	r4, [r2, #0]
 800c03c:	e7ed      	b.n	800c01a <__strtok_r+0x2c>

0800c03e <strtok_r>:
 800c03e:	2301      	movs	r3, #1
 800c040:	f7ff bfd5 	b.w	800bfee <__strtok_r>

0800c044 <_localeconv_r>:
 800c044:	4800      	ldr	r0, [pc, #0]	@ (800c048 <_localeconv_r+0x4>)
 800c046:	4770      	bx	lr
 800c048:	2000010c 	.word	0x2000010c

0800c04c <_close_r>:
 800c04c:	b538      	push	{r3, r4, r5, lr}
 800c04e:	2300      	movs	r3, #0
 800c050:	4d05      	ldr	r5, [pc, #20]	@ (800c068 <_close_r+0x1c>)
 800c052:	4604      	mov	r4, r0
 800c054:	4608      	mov	r0, r1
 800c056:	602b      	str	r3, [r5, #0]
 800c058:	f7fb f896 	bl	8007188 <_close>
 800c05c:	1c43      	adds	r3, r0, #1
 800c05e:	d102      	bne.n	800c066 <_close_r+0x1a>
 800c060:	682b      	ldr	r3, [r5, #0]
 800c062:	b103      	cbz	r3, 800c066 <_close_r+0x1a>
 800c064:	6023      	str	r3, [r4, #0]
 800c066:	bd38      	pop	{r3, r4, r5, pc}
 800c068:	20000d04 	.word	0x20000d04

0800c06c <_lseek_r>:
 800c06c:	b538      	push	{r3, r4, r5, lr}
 800c06e:	4604      	mov	r4, r0
 800c070:	4608      	mov	r0, r1
 800c072:	4611      	mov	r1, r2
 800c074:	2200      	movs	r2, #0
 800c076:	4d05      	ldr	r5, [pc, #20]	@ (800c08c <_lseek_r+0x20>)
 800c078:	602a      	str	r2, [r5, #0]
 800c07a:	461a      	mov	r2, r3
 800c07c:	f7fb f88e 	bl	800719c <_lseek>
 800c080:	1c43      	adds	r3, r0, #1
 800c082:	d102      	bne.n	800c08a <_lseek_r+0x1e>
 800c084:	682b      	ldr	r3, [r5, #0]
 800c086:	b103      	cbz	r3, 800c08a <_lseek_r+0x1e>
 800c088:	6023      	str	r3, [r4, #0]
 800c08a:	bd38      	pop	{r3, r4, r5, pc}
 800c08c:	20000d04 	.word	0x20000d04

0800c090 <_read_r>:
 800c090:	b538      	push	{r3, r4, r5, lr}
 800c092:	4604      	mov	r4, r0
 800c094:	4608      	mov	r0, r1
 800c096:	4611      	mov	r1, r2
 800c098:	2200      	movs	r2, #0
 800c09a:	4d05      	ldr	r5, [pc, #20]	@ (800c0b0 <_read_r+0x20>)
 800c09c:	602a      	str	r2, [r5, #0]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	f7fb f856 	bl	8007150 <_read>
 800c0a4:	1c43      	adds	r3, r0, #1
 800c0a6:	d102      	bne.n	800c0ae <_read_r+0x1e>
 800c0a8:	682b      	ldr	r3, [r5, #0]
 800c0aa:	b103      	cbz	r3, 800c0ae <_read_r+0x1e>
 800c0ac:	6023      	str	r3, [r4, #0]
 800c0ae:	bd38      	pop	{r3, r4, r5, pc}
 800c0b0:	20000d04 	.word	0x20000d04

0800c0b4 <_sbrk_r>:
 800c0b4:	b538      	push	{r3, r4, r5, lr}
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	4d05      	ldr	r5, [pc, #20]	@ (800c0d0 <_sbrk_r+0x1c>)
 800c0ba:	4604      	mov	r4, r0
 800c0bc:	4608      	mov	r0, r1
 800c0be:	602b      	str	r3, [r5, #0]
 800c0c0:	f7fb f86e 	bl	80071a0 <_sbrk>
 800c0c4:	1c43      	adds	r3, r0, #1
 800c0c6:	d102      	bne.n	800c0ce <_sbrk_r+0x1a>
 800c0c8:	682b      	ldr	r3, [r5, #0]
 800c0ca:	b103      	cbz	r3, 800c0ce <_sbrk_r+0x1a>
 800c0cc:	6023      	str	r3, [r4, #0]
 800c0ce:	bd38      	pop	{r3, r4, r5, pc}
 800c0d0:	20000d04 	.word	0x20000d04

0800c0d4 <_write_r>:
 800c0d4:	b538      	push	{r3, r4, r5, lr}
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	4608      	mov	r0, r1
 800c0da:	4611      	mov	r1, r2
 800c0dc:	2200      	movs	r2, #0
 800c0de:	4d05      	ldr	r5, [pc, #20]	@ (800c0f4 <_write_r+0x20>)
 800c0e0:	602a      	str	r2, [r5, #0]
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	f7fb f842 	bl	800716c <_write>
 800c0e8:	1c43      	adds	r3, r0, #1
 800c0ea:	d102      	bne.n	800c0f2 <_write_r+0x1e>
 800c0ec:	682b      	ldr	r3, [r5, #0]
 800c0ee:	b103      	cbz	r3, 800c0f2 <_write_r+0x1e>
 800c0f0:	6023      	str	r3, [r4, #0]
 800c0f2:	bd38      	pop	{r3, r4, r5, pc}
 800c0f4:	20000d04 	.word	0x20000d04

0800c0f8 <__errno>:
 800c0f8:	4b01      	ldr	r3, [pc, #4]	@ (800c100 <__errno+0x8>)
 800c0fa:	6818      	ldr	r0, [r3, #0]
 800c0fc:	4770      	bx	lr
 800c0fe:	bf00      	nop
 800c100:	20000188 	.word	0x20000188

0800c104 <__libc_init_array>:
 800c104:	b570      	push	{r4, r5, r6, lr}
 800c106:	2600      	movs	r6, #0
 800c108:	4d0c      	ldr	r5, [pc, #48]	@ (800c13c <__libc_init_array+0x38>)
 800c10a:	4c0d      	ldr	r4, [pc, #52]	@ (800c140 <__libc_init_array+0x3c>)
 800c10c:	1b64      	subs	r4, r4, r5
 800c10e:	10a4      	asrs	r4, r4, #2
 800c110:	42a6      	cmp	r6, r4
 800c112:	d109      	bne.n	800c128 <__libc_init_array+0x24>
 800c114:	f002 fb86 	bl	800e824 <_init>
 800c118:	2600      	movs	r6, #0
 800c11a:	4d0a      	ldr	r5, [pc, #40]	@ (800c144 <__libc_init_array+0x40>)
 800c11c:	4c0a      	ldr	r4, [pc, #40]	@ (800c148 <__libc_init_array+0x44>)
 800c11e:	1b64      	subs	r4, r4, r5
 800c120:	10a4      	asrs	r4, r4, #2
 800c122:	42a6      	cmp	r6, r4
 800c124:	d105      	bne.n	800c132 <__libc_init_array+0x2e>
 800c126:	bd70      	pop	{r4, r5, r6, pc}
 800c128:	f855 3b04 	ldr.w	r3, [r5], #4
 800c12c:	4798      	blx	r3
 800c12e:	3601      	adds	r6, #1
 800c130:	e7ee      	b.n	800c110 <__libc_init_array+0xc>
 800c132:	f855 3b04 	ldr.w	r3, [r5], #4
 800c136:	4798      	blx	r3
 800c138:	3601      	adds	r6, #1
 800c13a:	e7f2      	b.n	800c122 <__libc_init_array+0x1e>
 800c13c:	0800f790 	.word	0x0800f790
 800c140:	0800f790 	.word	0x0800f790
 800c144:	0800f790 	.word	0x0800f790
 800c148:	0800f794 	.word	0x0800f794

0800c14c <__retarget_lock_init_recursive>:
 800c14c:	4770      	bx	lr

0800c14e <__retarget_lock_acquire_recursive>:
 800c14e:	4770      	bx	lr

0800c150 <__retarget_lock_release_recursive>:
 800c150:	4770      	bx	lr

0800c152 <strcpy>:
 800c152:	4603      	mov	r3, r0
 800c154:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c158:	f803 2b01 	strb.w	r2, [r3], #1
 800c15c:	2a00      	cmp	r2, #0
 800c15e:	d1f9      	bne.n	800c154 <strcpy+0x2>
 800c160:	4770      	bx	lr

0800c162 <memchr>:
 800c162:	4603      	mov	r3, r0
 800c164:	b510      	push	{r4, lr}
 800c166:	b2c9      	uxtb	r1, r1
 800c168:	4402      	add	r2, r0
 800c16a:	4293      	cmp	r3, r2
 800c16c:	4618      	mov	r0, r3
 800c16e:	d101      	bne.n	800c174 <memchr+0x12>
 800c170:	2000      	movs	r0, #0
 800c172:	e003      	b.n	800c17c <memchr+0x1a>
 800c174:	7804      	ldrb	r4, [r0, #0]
 800c176:	3301      	adds	r3, #1
 800c178:	428c      	cmp	r4, r1
 800c17a:	d1f6      	bne.n	800c16a <memchr+0x8>
 800c17c:	bd10      	pop	{r4, pc}

0800c17e <memcpy>:
 800c17e:	440a      	add	r2, r1
 800c180:	4291      	cmp	r1, r2
 800c182:	f100 33ff 	add.w	r3, r0, #4294967295
 800c186:	d100      	bne.n	800c18a <memcpy+0xc>
 800c188:	4770      	bx	lr
 800c18a:	b510      	push	{r4, lr}
 800c18c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c190:	4291      	cmp	r1, r2
 800c192:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c196:	d1f9      	bne.n	800c18c <memcpy+0xe>
 800c198:	bd10      	pop	{r4, pc}
	...

0800c19c <nan>:
 800c19c:	2000      	movs	r0, #0
 800c19e:	4901      	ldr	r1, [pc, #4]	@ (800c1a4 <nan+0x8>)
 800c1a0:	4770      	bx	lr
 800c1a2:	bf00      	nop
 800c1a4:	7ff80000 	.word	0x7ff80000

0800c1a8 <nanf>:
 800c1a8:	4800      	ldr	r0, [pc, #0]	@ (800c1ac <nanf+0x4>)
 800c1aa:	4770      	bx	lr
 800c1ac:	7fc00000 	.word	0x7fc00000

0800c1b0 <quorem>:
 800c1b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b4:	6903      	ldr	r3, [r0, #16]
 800c1b6:	690c      	ldr	r4, [r1, #16]
 800c1b8:	4607      	mov	r7, r0
 800c1ba:	42a3      	cmp	r3, r4
 800c1bc:	db7e      	blt.n	800c2bc <quorem+0x10c>
 800c1be:	3c01      	subs	r4, #1
 800c1c0:	00a3      	lsls	r3, r4, #2
 800c1c2:	f100 0514 	add.w	r5, r0, #20
 800c1c6:	f101 0814 	add.w	r8, r1, #20
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1d0:	9301      	str	r3, [sp, #4]
 800c1d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c1d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	fbb2 f6f3 	udiv	r6, r2, r3
 800c1e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c1e6:	d32e      	bcc.n	800c246 <quorem+0x96>
 800c1e8:	f04f 0a00 	mov.w	sl, #0
 800c1ec:	46c4      	mov	ip, r8
 800c1ee:	46ae      	mov	lr, r5
 800c1f0:	46d3      	mov	fp, sl
 800c1f2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c1f6:	b298      	uxth	r0, r3
 800c1f8:	fb06 a000 	mla	r0, r6, r0, sl
 800c1fc:	0c1b      	lsrs	r3, r3, #16
 800c1fe:	0c02      	lsrs	r2, r0, #16
 800c200:	fb06 2303 	mla	r3, r6, r3, r2
 800c204:	f8de 2000 	ldr.w	r2, [lr]
 800c208:	b280      	uxth	r0, r0
 800c20a:	b292      	uxth	r2, r2
 800c20c:	1a12      	subs	r2, r2, r0
 800c20e:	445a      	add	r2, fp
 800c210:	f8de 0000 	ldr.w	r0, [lr]
 800c214:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c218:	b29b      	uxth	r3, r3
 800c21a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c21e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c222:	b292      	uxth	r2, r2
 800c224:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c228:	45e1      	cmp	r9, ip
 800c22a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c22e:	f84e 2b04 	str.w	r2, [lr], #4
 800c232:	d2de      	bcs.n	800c1f2 <quorem+0x42>
 800c234:	9b00      	ldr	r3, [sp, #0]
 800c236:	58eb      	ldr	r3, [r5, r3]
 800c238:	b92b      	cbnz	r3, 800c246 <quorem+0x96>
 800c23a:	9b01      	ldr	r3, [sp, #4]
 800c23c:	3b04      	subs	r3, #4
 800c23e:	429d      	cmp	r5, r3
 800c240:	461a      	mov	r2, r3
 800c242:	d32f      	bcc.n	800c2a4 <quorem+0xf4>
 800c244:	613c      	str	r4, [r7, #16]
 800c246:	4638      	mov	r0, r7
 800c248:	f001 fc58 	bl	800dafc <__mcmp>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	db25      	blt.n	800c29c <quorem+0xec>
 800c250:	4629      	mov	r1, r5
 800c252:	2000      	movs	r0, #0
 800c254:	f858 2b04 	ldr.w	r2, [r8], #4
 800c258:	f8d1 c000 	ldr.w	ip, [r1]
 800c25c:	fa1f fe82 	uxth.w	lr, r2
 800c260:	fa1f f38c 	uxth.w	r3, ip
 800c264:	eba3 030e 	sub.w	r3, r3, lr
 800c268:	4403      	add	r3, r0
 800c26a:	0c12      	lsrs	r2, r2, #16
 800c26c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c270:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c274:	b29b      	uxth	r3, r3
 800c276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c27a:	45c1      	cmp	r9, r8
 800c27c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c280:	f841 3b04 	str.w	r3, [r1], #4
 800c284:	d2e6      	bcs.n	800c254 <quorem+0xa4>
 800c286:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c28a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c28e:	b922      	cbnz	r2, 800c29a <quorem+0xea>
 800c290:	3b04      	subs	r3, #4
 800c292:	429d      	cmp	r5, r3
 800c294:	461a      	mov	r2, r3
 800c296:	d30b      	bcc.n	800c2b0 <quorem+0x100>
 800c298:	613c      	str	r4, [r7, #16]
 800c29a:	3601      	adds	r6, #1
 800c29c:	4630      	mov	r0, r6
 800c29e:	b003      	add	sp, #12
 800c2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a4:	6812      	ldr	r2, [r2, #0]
 800c2a6:	3b04      	subs	r3, #4
 800c2a8:	2a00      	cmp	r2, #0
 800c2aa:	d1cb      	bne.n	800c244 <quorem+0x94>
 800c2ac:	3c01      	subs	r4, #1
 800c2ae:	e7c6      	b.n	800c23e <quorem+0x8e>
 800c2b0:	6812      	ldr	r2, [r2, #0]
 800c2b2:	3b04      	subs	r3, #4
 800c2b4:	2a00      	cmp	r2, #0
 800c2b6:	d1ef      	bne.n	800c298 <quorem+0xe8>
 800c2b8:	3c01      	subs	r4, #1
 800c2ba:	e7ea      	b.n	800c292 <quorem+0xe2>
 800c2bc:	2000      	movs	r0, #0
 800c2be:	e7ee      	b.n	800c29e <quorem+0xee>

0800c2c0 <_dtoa_r>:
 800c2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c4:	4614      	mov	r4, r2
 800c2c6:	461d      	mov	r5, r3
 800c2c8:	69c7      	ldr	r7, [r0, #28]
 800c2ca:	b097      	sub	sp, #92	@ 0x5c
 800c2cc:	4683      	mov	fp, r0
 800c2ce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c2d2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800c2d4:	b97f      	cbnz	r7, 800c2f6 <_dtoa_r+0x36>
 800c2d6:	2010      	movs	r0, #16
 800c2d8:	f7fd fe16 	bl	8009f08 <malloc>
 800c2dc:	4602      	mov	r2, r0
 800c2de:	f8cb 001c 	str.w	r0, [fp, #28]
 800c2e2:	b920      	cbnz	r0, 800c2ee <_dtoa_r+0x2e>
 800c2e4:	21ef      	movs	r1, #239	@ 0xef
 800c2e6:	4ba8      	ldr	r3, [pc, #672]	@ (800c588 <_dtoa_r+0x2c8>)
 800c2e8:	48a8      	ldr	r0, [pc, #672]	@ (800c58c <_dtoa_r+0x2cc>)
 800c2ea:	f002 f9d5 	bl	800e698 <__assert_func>
 800c2ee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c2f2:	6007      	str	r7, [r0, #0]
 800c2f4:	60c7      	str	r7, [r0, #12]
 800c2f6:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c2fa:	6819      	ldr	r1, [r3, #0]
 800c2fc:	b159      	cbz	r1, 800c316 <_dtoa_r+0x56>
 800c2fe:	685a      	ldr	r2, [r3, #4]
 800c300:	2301      	movs	r3, #1
 800c302:	4093      	lsls	r3, r2
 800c304:	604a      	str	r2, [r1, #4]
 800c306:	608b      	str	r3, [r1, #8]
 800c308:	4658      	mov	r0, fp
 800c30a:	f001 f975 	bl	800d5f8 <_Bfree>
 800c30e:	2200      	movs	r2, #0
 800c310:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c314:	601a      	str	r2, [r3, #0]
 800c316:	1e2b      	subs	r3, r5, #0
 800c318:	bfaf      	iteee	ge
 800c31a:	2300      	movge	r3, #0
 800c31c:	2201      	movlt	r2, #1
 800c31e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c322:	9303      	strlt	r3, [sp, #12]
 800c324:	bfa8      	it	ge
 800c326:	6033      	strge	r3, [r6, #0]
 800c328:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c32c:	4b98      	ldr	r3, [pc, #608]	@ (800c590 <_dtoa_r+0x2d0>)
 800c32e:	bfb8      	it	lt
 800c330:	6032      	strlt	r2, [r6, #0]
 800c332:	ea33 0308 	bics.w	r3, r3, r8
 800c336:	d112      	bne.n	800c35e <_dtoa_r+0x9e>
 800c338:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c33c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c33e:	6013      	str	r3, [r2, #0]
 800c340:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c344:	4323      	orrs	r3, r4
 800c346:	f000 8550 	beq.w	800cdea <_dtoa_r+0xb2a>
 800c34a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c34c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800c594 <_dtoa_r+0x2d4>
 800c350:	2b00      	cmp	r3, #0
 800c352:	f000 8552 	beq.w	800cdfa <_dtoa_r+0xb3a>
 800c356:	f10a 0303 	add.w	r3, sl, #3
 800c35a:	f000 bd4c 	b.w	800cdf6 <_dtoa_r+0xb36>
 800c35e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c362:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c366:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c36a:	2200      	movs	r2, #0
 800c36c:	2300      	movs	r3, #0
 800c36e:	f7f4 fb25 	bl	80009bc <__aeabi_dcmpeq>
 800c372:	4607      	mov	r7, r0
 800c374:	b158      	cbz	r0, 800c38e <_dtoa_r+0xce>
 800c376:	2301      	movs	r3, #1
 800c378:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c37a:	6013      	str	r3, [r2, #0]
 800c37c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c37e:	b113      	cbz	r3, 800c386 <_dtoa_r+0xc6>
 800c380:	4b85      	ldr	r3, [pc, #532]	@ (800c598 <_dtoa_r+0x2d8>)
 800c382:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c384:	6013      	str	r3, [r2, #0]
 800c386:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800c59c <_dtoa_r+0x2dc>
 800c38a:	f000 bd36 	b.w	800cdfa <_dtoa_r+0xb3a>
 800c38e:	ab14      	add	r3, sp, #80	@ 0x50
 800c390:	9301      	str	r3, [sp, #4]
 800c392:	ab15      	add	r3, sp, #84	@ 0x54
 800c394:	9300      	str	r3, [sp, #0]
 800c396:	4658      	mov	r0, fp
 800c398:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c39c:	f001 fcc6 	bl	800dd2c <__d2b>
 800c3a0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800c3a4:	4681      	mov	r9, r0
 800c3a6:	2e00      	cmp	r6, #0
 800c3a8:	d077      	beq.n	800c49a <_dtoa_r+0x1da>
 800c3aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c3b0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c3b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3b8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c3bc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c3c0:	9712      	str	r7, [sp, #72]	@ 0x48
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	4b76      	ldr	r3, [pc, #472]	@ (800c5a0 <_dtoa_r+0x2e0>)
 800c3c8:	f7f3 fed8 	bl	800017c <__aeabi_dsub>
 800c3cc:	a368      	add	r3, pc, #416	@ (adr r3, 800c570 <_dtoa_r+0x2b0>)
 800c3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d2:	f7f4 f88b 	bl	80004ec <__aeabi_dmul>
 800c3d6:	a368      	add	r3, pc, #416	@ (adr r3, 800c578 <_dtoa_r+0x2b8>)
 800c3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3dc:	f7f3 fed0 	bl	8000180 <__adddf3>
 800c3e0:	4604      	mov	r4, r0
 800c3e2:	4630      	mov	r0, r6
 800c3e4:	460d      	mov	r5, r1
 800c3e6:	f7f4 f817 	bl	8000418 <__aeabi_i2d>
 800c3ea:	a365      	add	r3, pc, #404	@ (adr r3, 800c580 <_dtoa_r+0x2c0>)
 800c3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f0:	f7f4 f87c 	bl	80004ec <__aeabi_dmul>
 800c3f4:	4602      	mov	r2, r0
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	4629      	mov	r1, r5
 800c3fc:	f7f3 fec0 	bl	8000180 <__adddf3>
 800c400:	4604      	mov	r4, r0
 800c402:	460d      	mov	r5, r1
 800c404:	f7f4 fb22 	bl	8000a4c <__aeabi_d2iz>
 800c408:	2200      	movs	r2, #0
 800c40a:	4607      	mov	r7, r0
 800c40c:	2300      	movs	r3, #0
 800c40e:	4620      	mov	r0, r4
 800c410:	4629      	mov	r1, r5
 800c412:	f7f4 fadd 	bl	80009d0 <__aeabi_dcmplt>
 800c416:	b140      	cbz	r0, 800c42a <_dtoa_r+0x16a>
 800c418:	4638      	mov	r0, r7
 800c41a:	f7f3 fffd 	bl	8000418 <__aeabi_i2d>
 800c41e:	4622      	mov	r2, r4
 800c420:	462b      	mov	r3, r5
 800c422:	f7f4 facb 	bl	80009bc <__aeabi_dcmpeq>
 800c426:	b900      	cbnz	r0, 800c42a <_dtoa_r+0x16a>
 800c428:	3f01      	subs	r7, #1
 800c42a:	2f16      	cmp	r7, #22
 800c42c:	d853      	bhi.n	800c4d6 <_dtoa_r+0x216>
 800c42e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c432:	4b5c      	ldr	r3, [pc, #368]	@ (800c5a4 <_dtoa_r+0x2e4>)
 800c434:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43c:	f7f4 fac8 	bl	80009d0 <__aeabi_dcmplt>
 800c440:	2800      	cmp	r0, #0
 800c442:	d04a      	beq.n	800c4da <_dtoa_r+0x21a>
 800c444:	2300      	movs	r3, #0
 800c446:	3f01      	subs	r7, #1
 800c448:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c44a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c44c:	1b9b      	subs	r3, r3, r6
 800c44e:	1e5a      	subs	r2, r3, #1
 800c450:	bf46      	itte	mi
 800c452:	f1c3 0801 	rsbmi	r8, r3, #1
 800c456:	2300      	movmi	r3, #0
 800c458:	f04f 0800 	movpl.w	r8, #0
 800c45c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c45e:	bf48      	it	mi
 800c460:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800c462:	2f00      	cmp	r7, #0
 800c464:	db3b      	blt.n	800c4de <_dtoa_r+0x21e>
 800c466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c468:	970e      	str	r7, [sp, #56]	@ 0x38
 800c46a:	443b      	add	r3, r7
 800c46c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c46e:	2300      	movs	r3, #0
 800c470:	930a      	str	r3, [sp, #40]	@ 0x28
 800c472:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c474:	2b09      	cmp	r3, #9
 800c476:	d866      	bhi.n	800c546 <_dtoa_r+0x286>
 800c478:	2b05      	cmp	r3, #5
 800c47a:	bfc4      	itt	gt
 800c47c:	3b04      	subgt	r3, #4
 800c47e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800c480:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c482:	bfc8      	it	gt
 800c484:	2400      	movgt	r4, #0
 800c486:	f1a3 0302 	sub.w	r3, r3, #2
 800c48a:	bfd8      	it	le
 800c48c:	2401      	movle	r4, #1
 800c48e:	2b03      	cmp	r3, #3
 800c490:	d864      	bhi.n	800c55c <_dtoa_r+0x29c>
 800c492:	e8df f003 	tbb	[pc, r3]
 800c496:	382b      	.short	0x382b
 800c498:	5636      	.short	0x5636
 800c49a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c49e:	441e      	add	r6, r3
 800c4a0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c4a4:	2b20      	cmp	r3, #32
 800c4a6:	bfc1      	itttt	gt
 800c4a8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c4ac:	fa08 f803 	lslgt.w	r8, r8, r3
 800c4b0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c4b4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c4b8:	bfd6      	itet	le
 800c4ba:	f1c3 0320 	rsble	r3, r3, #32
 800c4be:	ea48 0003 	orrgt.w	r0, r8, r3
 800c4c2:	fa04 f003 	lslle.w	r0, r4, r3
 800c4c6:	f7f3 ff97 	bl	80003f8 <__aeabi_ui2d>
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c4d0:	3e01      	subs	r6, #1
 800c4d2:	9212      	str	r2, [sp, #72]	@ 0x48
 800c4d4:	e775      	b.n	800c3c2 <_dtoa_r+0x102>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e7b6      	b.n	800c448 <_dtoa_r+0x188>
 800c4da:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c4dc:	e7b5      	b.n	800c44a <_dtoa_r+0x18a>
 800c4de:	427b      	negs	r3, r7
 800c4e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	eba8 0807 	sub.w	r8, r8, r7
 800c4e8:	930e      	str	r3, [sp, #56]	@ 0x38
 800c4ea:	e7c2      	b.n	800c472 <_dtoa_r+0x1b2>
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	dc35      	bgt.n	800c562 <_dtoa_r+0x2a2>
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c4fe:	9221      	str	r2, [sp, #132]	@ 0x84
 800c500:	e00b      	b.n	800c51a <_dtoa_r+0x25a>
 800c502:	2301      	movs	r3, #1
 800c504:	e7f3      	b.n	800c4ee <_dtoa_r+0x22e>
 800c506:	2300      	movs	r3, #0
 800c508:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c50a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c50c:	18fb      	adds	r3, r7, r3
 800c50e:	9308      	str	r3, [sp, #32]
 800c510:	3301      	adds	r3, #1
 800c512:	2b01      	cmp	r3, #1
 800c514:	9307      	str	r3, [sp, #28]
 800c516:	bfb8      	it	lt
 800c518:	2301      	movlt	r3, #1
 800c51a:	2100      	movs	r1, #0
 800c51c:	2204      	movs	r2, #4
 800c51e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c522:	f102 0514 	add.w	r5, r2, #20
 800c526:	429d      	cmp	r5, r3
 800c528:	d91f      	bls.n	800c56a <_dtoa_r+0x2aa>
 800c52a:	6041      	str	r1, [r0, #4]
 800c52c:	4658      	mov	r0, fp
 800c52e:	f001 f823 	bl	800d578 <_Balloc>
 800c532:	4682      	mov	sl, r0
 800c534:	2800      	cmp	r0, #0
 800c536:	d139      	bne.n	800c5ac <_dtoa_r+0x2ec>
 800c538:	4602      	mov	r2, r0
 800c53a:	f240 11af 	movw	r1, #431	@ 0x1af
 800c53e:	4b1a      	ldr	r3, [pc, #104]	@ (800c5a8 <_dtoa_r+0x2e8>)
 800c540:	e6d2      	b.n	800c2e8 <_dtoa_r+0x28>
 800c542:	2301      	movs	r3, #1
 800c544:	e7e0      	b.n	800c508 <_dtoa_r+0x248>
 800c546:	2401      	movs	r4, #1
 800c548:	2300      	movs	r3, #0
 800c54a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c54c:	9320      	str	r3, [sp, #128]	@ 0x80
 800c54e:	f04f 33ff 	mov.w	r3, #4294967295
 800c552:	2200      	movs	r2, #0
 800c554:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c558:	2312      	movs	r3, #18
 800c55a:	e7d0      	b.n	800c4fe <_dtoa_r+0x23e>
 800c55c:	2301      	movs	r3, #1
 800c55e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c560:	e7f5      	b.n	800c54e <_dtoa_r+0x28e>
 800c562:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c564:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c568:	e7d7      	b.n	800c51a <_dtoa_r+0x25a>
 800c56a:	3101      	adds	r1, #1
 800c56c:	0052      	lsls	r2, r2, #1
 800c56e:	e7d8      	b.n	800c522 <_dtoa_r+0x262>
 800c570:	636f4361 	.word	0x636f4361
 800c574:	3fd287a7 	.word	0x3fd287a7
 800c578:	8b60c8b3 	.word	0x8b60c8b3
 800c57c:	3fc68a28 	.word	0x3fc68a28
 800c580:	509f79fb 	.word	0x509f79fb
 800c584:	3fd34413 	.word	0x3fd34413
 800c588:	0800f503 	.word	0x0800f503
 800c58c:	0800f51a 	.word	0x0800f51a
 800c590:	7ff00000 	.word	0x7ff00000
 800c594:	0800f4ff 	.word	0x0800f4ff
 800c598:	0800edb3 	.word	0x0800edb3
 800c59c:	0800edb2 	.word	0x0800edb2
 800c5a0:	3ff80000 	.word	0x3ff80000
 800c5a4:	0800f670 	.word	0x0800f670
 800c5a8:	0800f572 	.word	0x0800f572
 800c5ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c5b0:	6018      	str	r0, [r3, #0]
 800c5b2:	9b07      	ldr	r3, [sp, #28]
 800c5b4:	2b0e      	cmp	r3, #14
 800c5b6:	f200 80a4 	bhi.w	800c702 <_dtoa_r+0x442>
 800c5ba:	2c00      	cmp	r4, #0
 800c5bc:	f000 80a1 	beq.w	800c702 <_dtoa_r+0x442>
 800c5c0:	2f00      	cmp	r7, #0
 800c5c2:	dd33      	ble.n	800c62c <_dtoa_r+0x36c>
 800c5c4:	4b86      	ldr	r3, [pc, #536]	@ (800c7e0 <_dtoa_r+0x520>)
 800c5c6:	f007 020f 	and.w	r2, r7, #15
 800c5ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5ce:	05f8      	lsls	r0, r7, #23
 800c5d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c5d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c5d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c5dc:	d516      	bpl.n	800c60c <_dtoa_r+0x34c>
 800c5de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c5e2:	4b80      	ldr	r3, [pc, #512]	@ (800c7e4 <_dtoa_r+0x524>)
 800c5e4:	2603      	movs	r6, #3
 800c5e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c5ea:	f7f4 f8a9 	bl	8000740 <__aeabi_ddiv>
 800c5ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5f2:	f004 040f 	and.w	r4, r4, #15
 800c5f6:	4d7b      	ldr	r5, [pc, #492]	@ (800c7e4 <_dtoa_r+0x524>)
 800c5f8:	b954      	cbnz	r4, 800c610 <_dtoa_r+0x350>
 800c5fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c602:	f7f4 f89d 	bl	8000740 <__aeabi_ddiv>
 800c606:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c60a:	e028      	b.n	800c65e <_dtoa_r+0x39e>
 800c60c:	2602      	movs	r6, #2
 800c60e:	e7f2      	b.n	800c5f6 <_dtoa_r+0x336>
 800c610:	07e1      	lsls	r1, r4, #31
 800c612:	d508      	bpl.n	800c626 <_dtoa_r+0x366>
 800c614:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c618:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c61c:	f7f3 ff66 	bl	80004ec <__aeabi_dmul>
 800c620:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c624:	3601      	adds	r6, #1
 800c626:	1064      	asrs	r4, r4, #1
 800c628:	3508      	adds	r5, #8
 800c62a:	e7e5      	b.n	800c5f8 <_dtoa_r+0x338>
 800c62c:	f000 80d2 	beq.w	800c7d4 <_dtoa_r+0x514>
 800c630:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c634:	427c      	negs	r4, r7
 800c636:	4b6a      	ldr	r3, [pc, #424]	@ (800c7e0 <_dtoa_r+0x520>)
 800c638:	f004 020f 	and.w	r2, r4, #15
 800c63c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c644:	f7f3 ff52 	bl	80004ec <__aeabi_dmul>
 800c648:	2602      	movs	r6, #2
 800c64a:	2300      	movs	r3, #0
 800c64c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c650:	4d64      	ldr	r5, [pc, #400]	@ (800c7e4 <_dtoa_r+0x524>)
 800c652:	1124      	asrs	r4, r4, #4
 800c654:	2c00      	cmp	r4, #0
 800c656:	f040 80b2 	bne.w	800c7be <_dtoa_r+0x4fe>
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d1d3      	bne.n	800c606 <_dtoa_r+0x346>
 800c65e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c662:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c664:	2b00      	cmp	r3, #0
 800c666:	f000 80b7 	beq.w	800c7d8 <_dtoa_r+0x518>
 800c66a:	2200      	movs	r2, #0
 800c66c:	4620      	mov	r0, r4
 800c66e:	4629      	mov	r1, r5
 800c670:	4b5d      	ldr	r3, [pc, #372]	@ (800c7e8 <_dtoa_r+0x528>)
 800c672:	f7f4 f9ad 	bl	80009d0 <__aeabi_dcmplt>
 800c676:	2800      	cmp	r0, #0
 800c678:	f000 80ae 	beq.w	800c7d8 <_dtoa_r+0x518>
 800c67c:	9b07      	ldr	r3, [sp, #28]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	f000 80aa 	beq.w	800c7d8 <_dtoa_r+0x518>
 800c684:	9b08      	ldr	r3, [sp, #32]
 800c686:	2b00      	cmp	r3, #0
 800c688:	dd37      	ble.n	800c6fa <_dtoa_r+0x43a>
 800c68a:	1e7b      	subs	r3, r7, #1
 800c68c:	4620      	mov	r0, r4
 800c68e:	9304      	str	r3, [sp, #16]
 800c690:	2200      	movs	r2, #0
 800c692:	4629      	mov	r1, r5
 800c694:	4b55      	ldr	r3, [pc, #340]	@ (800c7ec <_dtoa_r+0x52c>)
 800c696:	f7f3 ff29 	bl	80004ec <__aeabi_dmul>
 800c69a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c69e:	9c08      	ldr	r4, [sp, #32]
 800c6a0:	3601      	adds	r6, #1
 800c6a2:	4630      	mov	r0, r6
 800c6a4:	f7f3 feb8 	bl	8000418 <__aeabi_i2d>
 800c6a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6ac:	f7f3 ff1e 	bl	80004ec <__aeabi_dmul>
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	4b4f      	ldr	r3, [pc, #316]	@ (800c7f0 <_dtoa_r+0x530>)
 800c6b4:	f7f3 fd64 	bl	8000180 <__adddf3>
 800c6b8:	4605      	mov	r5, r0
 800c6ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c6be:	2c00      	cmp	r4, #0
 800c6c0:	f040 809a 	bne.w	800c7f8 <_dtoa_r+0x538>
 800c6c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	4b4a      	ldr	r3, [pc, #296]	@ (800c7f4 <_dtoa_r+0x534>)
 800c6cc:	f7f3 fd56 	bl	800017c <__aeabi_dsub>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c6d8:	462a      	mov	r2, r5
 800c6da:	4633      	mov	r3, r6
 800c6dc:	f7f4 f996 	bl	8000a0c <__aeabi_dcmpgt>
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	f040 828e 	bne.w	800cc02 <_dtoa_r+0x942>
 800c6e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6ea:	462a      	mov	r2, r5
 800c6ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c6f0:	f7f4 f96e 	bl	80009d0 <__aeabi_dcmplt>
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	f040 8127 	bne.w	800c948 <_dtoa_r+0x688>
 800c6fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c6fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c702:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c704:	2b00      	cmp	r3, #0
 800c706:	f2c0 8163 	blt.w	800c9d0 <_dtoa_r+0x710>
 800c70a:	2f0e      	cmp	r7, #14
 800c70c:	f300 8160 	bgt.w	800c9d0 <_dtoa_r+0x710>
 800c710:	4b33      	ldr	r3, [pc, #204]	@ (800c7e0 <_dtoa_r+0x520>)
 800c712:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c716:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c71a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c71e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c720:	2b00      	cmp	r3, #0
 800c722:	da03      	bge.n	800c72c <_dtoa_r+0x46c>
 800c724:	9b07      	ldr	r3, [sp, #28]
 800c726:	2b00      	cmp	r3, #0
 800c728:	f340 8100 	ble.w	800c92c <_dtoa_r+0x66c>
 800c72c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c730:	4656      	mov	r6, sl
 800c732:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c736:	4620      	mov	r0, r4
 800c738:	4629      	mov	r1, r5
 800c73a:	f7f4 f801 	bl	8000740 <__aeabi_ddiv>
 800c73e:	f7f4 f985 	bl	8000a4c <__aeabi_d2iz>
 800c742:	4680      	mov	r8, r0
 800c744:	f7f3 fe68 	bl	8000418 <__aeabi_i2d>
 800c748:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c74c:	f7f3 fece 	bl	80004ec <__aeabi_dmul>
 800c750:	4602      	mov	r2, r0
 800c752:	460b      	mov	r3, r1
 800c754:	4620      	mov	r0, r4
 800c756:	4629      	mov	r1, r5
 800c758:	f7f3 fd10 	bl	800017c <__aeabi_dsub>
 800c75c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c760:	9d07      	ldr	r5, [sp, #28]
 800c762:	f806 4b01 	strb.w	r4, [r6], #1
 800c766:	eba6 040a 	sub.w	r4, r6, sl
 800c76a:	42a5      	cmp	r5, r4
 800c76c:	4602      	mov	r2, r0
 800c76e:	460b      	mov	r3, r1
 800c770:	f040 8116 	bne.w	800c9a0 <_dtoa_r+0x6e0>
 800c774:	f7f3 fd04 	bl	8000180 <__adddf3>
 800c778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c77c:	4604      	mov	r4, r0
 800c77e:	460d      	mov	r5, r1
 800c780:	f7f4 f944 	bl	8000a0c <__aeabi_dcmpgt>
 800c784:	2800      	cmp	r0, #0
 800c786:	f040 80f8 	bne.w	800c97a <_dtoa_r+0x6ba>
 800c78a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c78e:	4620      	mov	r0, r4
 800c790:	4629      	mov	r1, r5
 800c792:	f7f4 f913 	bl	80009bc <__aeabi_dcmpeq>
 800c796:	b118      	cbz	r0, 800c7a0 <_dtoa_r+0x4e0>
 800c798:	f018 0f01 	tst.w	r8, #1
 800c79c:	f040 80ed 	bne.w	800c97a <_dtoa_r+0x6ba>
 800c7a0:	4649      	mov	r1, r9
 800c7a2:	4658      	mov	r0, fp
 800c7a4:	f000 ff28 	bl	800d5f8 <_Bfree>
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	7033      	strb	r3, [r6, #0]
 800c7ac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c7ae:	3701      	adds	r7, #1
 800c7b0:	601f      	str	r7, [r3, #0]
 800c7b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f000 8320 	beq.w	800cdfa <_dtoa_r+0xb3a>
 800c7ba:	601e      	str	r6, [r3, #0]
 800c7bc:	e31d      	b.n	800cdfa <_dtoa_r+0xb3a>
 800c7be:	07e2      	lsls	r2, r4, #31
 800c7c0:	d505      	bpl.n	800c7ce <_dtoa_r+0x50e>
 800c7c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c7c6:	f7f3 fe91 	bl	80004ec <__aeabi_dmul>
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	3601      	adds	r6, #1
 800c7ce:	1064      	asrs	r4, r4, #1
 800c7d0:	3508      	adds	r5, #8
 800c7d2:	e73f      	b.n	800c654 <_dtoa_r+0x394>
 800c7d4:	2602      	movs	r6, #2
 800c7d6:	e742      	b.n	800c65e <_dtoa_r+0x39e>
 800c7d8:	9c07      	ldr	r4, [sp, #28]
 800c7da:	9704      	str	r7, [sp, #16]
 800c7dc:	e761      	b.n	800c6a2 <_dtoa_r+0x3e2>
 800c7de:	bf00      	nop
 800c7e0:	0800f670 	.word	0x0800f670
 800c7e4:	0800f648 	.word	0x0800f648
 800c7e8:	3ff00000 	.word	0x3ff00000
 800c7ec:	40240000 	.word	0x40240000
 800c7f0:	401c0000 	.word	0x401c0000
 800c7f4:	40140000 	.word	0x40140000
 800c7f8:	4b70      	ldr	r3, [pc, #448]	@ (800c9bc <_dtoa_r+0x6fc>)
 800c7fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c7fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c800:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c804:	4454      	add	r4, sl
 800c806:	2900      	cmp	r1, #0
 800c808:	d045      	beq.n	800c896 <_dtoa_r+0x5d6>
 800c80a:	2000      	movs	r0, #0
 800c80c:	496c      	ldr	r1, [pc, #432]	@ (800c9c0 <_dtoa_r+0x700>)
 800c80e:	f7f3 ff97 	bl	8000740 <__aeabi_ddiv>
 800c812:	4633      	mov	r3, r6
 800c814:	462a      	mov	r2, r5
 800c816:	f7f3 fcb1 	bl	800017c <__aeabi_dsub>
 800c81a:	4656      	mov	r6, sl
 800c81c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c820:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c824:	f7f4 f912 	bl	8000a4c <__aeabi_d2iz>
 800c828:	4605      	mov	r5, r0
 800c82a:	f7f3 fdf5 	bl	8000418 <__aeabi_i2d>
 800c82e:	4602      	mov	r2, r0
 800c830:	460b      	mov	r3, r1
 800c832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c836:	f7f3 fca1 	bl	800017c <__aeabi_dsub>
 800c83a:	4602      	mov	r2, r0
 800c83c:	460b      	mov	r3, r1
 800c83e:	3530      	adds	r5, #48	@ 0x30
 800c840:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c844:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c848:	f806 5b01 	strb.w	r5, [r6], #1
 800c84c:	f7f4 f8c0 	bl	80009d0 <__aeabi_dcmplt>
 800c850:	2800      	cmp	r0, #0
 800c852:	d163      	bne.n	800c91c <_dtoa_r+0x65c>
 800c854:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c858:	2000      	movs	r0, #0
 800c85a:	495a      	ldr	r1, [pc, #360]	@ (800c9c4 <_dtoa_r+0x704>)
 800c85c:	f7f3 fc8e 	bl	800017c <__aeabi_dsub>
 800c860:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c864:	f7f4 f8b4 	bl	80009d0 <__aeabi_dcmplt>
 800c868:	2800      	cmp	r0, #0
 800c86a:	f040 8087 	bne.w	800c97c <_dtoa_r+0x6bc>
 800c86e:	42a6      	cmp	r6, r4
 800c870:	f43f af43 	beq.w	800c6fa <_dtoa_r+0x43a>
 800c874:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c878:	2200      	movs	r2, #0
 800c87a:	4b53      	ldr	r3, [pc, #332]	@ (800c9c8 <_dtoa_r+0x708>)
 800c87c:	f7f3 fe36 	bl	80004ec <__aeabi_dmul>
 800c880:	2200      	movs	r2, #0
 800c882:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c88a:	4b4f      	ldr	r3, [pc, #316]	@ (800c9c8 <_dtoa_r+0x708>)
 800c88c:	f7f3 fe2e 	bl	80004ec <__aeabi_dmul>
 800c890:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c894:	e7c4      	b.n	800c820 <_dtoa_r+0x560>
 800c896:	4631      	mov	r1, r6
 800c898:	4628      	mov	r0, r5
 800c89a:	f7f3 fe27 	bl	80004ec <__aeabi_dmul>
 800c89e:	4656      	mov	r6, sl
 800c8a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c8a4:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c8a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8aa:	f7f4 f8cf 	bl	8000a4c <__aeabi_d2iz>
 800c8ae:	4605      	mov	r5, r0
 800c8b0:	f7f3 fdb2 	bl	8000418 <__aeabi_i2d>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8bc:	f7f3 fc5e 	bl	800017c <__aeabi_dsub>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	3530      	adds	r5, #48	@ 0x30
 800c8c6:	f806 5b01 	strb.w	r5, [r6], #1
 800c8ca:	42a6      	cmp	r6, r4
 800c8cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c8d0:	f04f 0200 	mov.w	r2, #0
 800c8d4:	d124      	bne.n	800c920 <_dtoa_r+0x660>
 800c8d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c8da:	4b39      	ldr	r3, [pc, #228]	@ (800c9c0 <_dtoa_r+0x700>)
 800c8dc:	f7f3 fc50 	bl	8000180 <__adddf3>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8e8:	f7f4 f890 	bl	8000a0c <__aeabi_dcmpgt>
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	d145      	bne.n	800c97c <_dtoa_r+0x6bc>
 800c8f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c8f4:	2000      	movs	r0, #0
 800c8f6:	4932      	ldr	r1, [pc, #200]	@ (800c9c0 <_dtoa_r+0x700>)
 800c8f8:	f7f3 fc40 	bl	800017c <__aeabi_dsub>
 800c8fc:	4602      	mov	r2, r0
 800c8fe:	460b      	mov	r3, r1
 800c900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c904:	f7f4 f864 	bl	80009d0 <__aeabi_dcmplt>
 800c908:	2800      	cmp	r0, #0
 800c90a:	f43f aef6 	beq.w	800c6fa <_dtoa_r+0x43a>
 800c90e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c910:	1e73      	subs	r3, r6, #1
 800c912:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c914:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c918:	2b30      	cmp	r3, #48	@ 0x30
 800c91a:	d0f8      	beq.n	800c90e <_dtoa_r+0x64e>
 800c91c:	9f04      	ldr	r7, [sp, #16]
 800c91e:	e73f      	b.n	800c7a0 <_dtoa_r+0x4e0>
 800c920:	4b29      	ldr	r3, [pc, #164]	@ (800c9c8 <_dtoa_r+0x708>)
 800c922:	f7f3 fde3 	bl	80004ec <__aeabi_dmul>
 800c926:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c92a:	e7bc      	b.n	800c8a6 <_dtoa_r+0x5e6>
 800c92c:	d10c      	bne.n	800c948 <_dtoa_r+0x688>
 800c92e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c932:	2200      	movs	r2, #0
 800c934:	4b25      	ldr	r3, [pc, #148]	@ (800c9cc <_dtoa_r+0x70c>)
 800c936:	f7f3 fdd9 	bl	80004ec <__aeabi_dmul>
 800c93a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c93e:	f7f4 f85b 	bl	80009f8 <__aeabi_dcmpge>
 800c942:	2800      	cmp	r0, #0
 800c944:	f000 815b 	beq.w	800cbfe <_dtoa_r+0x93e>
 800c948:	2400      	movs	r4, #0
 800c94a:	4625      	mov	r5, r4
 800c94c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c94e:	4656      	mov	r6, sl
 800c950:	43db      	mvns	r3, r3
 800c952:	9304      	str	r3, [sp, #16]
 800c954:	2700      	movs	r7, #0
 800c956:	4621      	mov	r1, r4
 800c958:	4658      	mov	r0, fp
 800c95a:	f000 fe4d 	bl	800d5f8 <_Bfree>
 800c95e:	2d00      	cmp	r5, #0
 800c960:	d0dc      	beq.n	800c91c <_dtoa_r+0x65c>
 800c962:	b12f      	cbz	r7, 800c970 <_dtoa_r+0x6b0>
 800c964:	42af      	cmp	r7, r5
 800c966:	d003      	beq.n	800c970 <_dtoa_r+0x6b0>
 800c968:	4639      	mov	r1, r7
 800c96a:	4658      	mov	r0, fp
 800c96c:	f000 fe44 	bl	800d5f8 <_Bfree>
 800c970:	4629      	mov	r1, r5
 800c972:	4658      	mov	r0, fp
 800c974:	f000 fe40 	bl	800d5f8 <_Bfree>
 800c978:	e7d0      	b.n	800c91c <_dtoa_r+0x65c>
 800c97a:	9704      	str	r7, [sp, #16]
 800c97c:	4633      	mov	r3, r6
 800c97e:	461e      	mov	r6, r3
 800c980:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c984:	2a39      	cmp	r2, #57	@ 0x39
 800c986:	d107      	bne.n	800c998 <_dtoa_r+0x6d8>
 800c988:	459a      	cmp	sl, r3
 800c98a:	d1f8      	bne.n	800c97e <_dtoa_r+0x6be>
 800c98c:	9a04      	ldr	r2, [sp, #16]
 800c98e:	3201      	adds	r2, #1
 800c990:	9204      	str	r2, [sp, #16]
 800c992:	2230      	movs	r2, #48	@ 0x30
 800c994:	f88a 2000 	strb.w	r2, [sl]
 800c998:	781a      	ldrb	r2, [r3, #0]
 800c99a:	3201      	adds	r2, #1
 800c99c:	701a      	strb	r2, [r3, #0]
 800c99e:	e7bd      	b.n	800c91c <_dtoa_r+0x65c>
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	4b09      	ldr	r3, [pc, #36]	@ (800c9c8 <_dtoa_r+0x708>)
 800c9a4:	f7f3 fda2 	bl	80004ec <__aeabi_dmul>
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	4604      	mov	r4, r0
 800c9ae:	460d      	mov	r5, r1
 800c9b0:	f7f4 f804 	bl	80009bc <__aeabi_dcmpeq>
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	f43f aebc 	beq.w	800c732 <_dtoa_r+0x472>
 800c9ba:	e6f1      	b.n	800c7a0 <_dtoa_r+0x4e0>
 800c9bc:	0800f670 	.word	0x0800f670
 800c9c0:	3fe00000 	.word	0x3fe00000
 800c9c4:	3ff00000 	.word	0x3ff00000
 800c9c8:	40240000 	.word	0x40240000
 800c9cc:	40140000 	.word	0x40140000
 800c9d0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c9d2:	2a00      	cmp	r2, #0
 800c9d4:	f000 80db 	beq.w	800cb8e <_dtoa_r+0x8ce>
 800c9d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c9da:	2a01      	cmp	r2, #1
 800c9dc:	f300 80bf 	bgt.w	800cb5e <_dtoa_r+0x89e>
 800c9e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c9e2:	2a00      	cmp	r2, #0
 800c9e4:	f000 80b7 	beq.w	800cb56 <_dtoa_r+0x896>
 800c9e8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c9ec:	4646      	mov	r6, r8
 800c9ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c9f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9f2:	2101      	movs	r1, #1
 800c9f4:	441a      	add	r2, r3
 800c9f6:	4658      	mov	r0, fp
 800c9f8:	4498      	add	r8, r3
 800c9fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9fc:	f000 fefa 	bl	800d7f4 <__i2b>
 800ca00:	4605      	mov	r5, r0
 800ca02:	b15e      	cbz	r6, 800ca1c <_dtoa_r+0x75c>
 800ca04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	dd08      	ble.n	800ca1c <_dtoa_r+0x75c>
 800ca0a:	42b3      	cmp	r3, r6
 800ca0c:	bfa8      	it	ge
 800ca0e:	4633      	movge	r3, r6
 800ca10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca12:	eba8 0803 	sub.w	r8, r8, r3
 800ca16:	1af6      	subs	r6, r6, r3
 800ca18:	1ad3      	subs	r3, r2, r3
 800ca1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca1e:	b1f3      	cbz	r3, 800ca5e <_dtoa_r+0x79e>
 800ca20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f000 80b7 	beq.w	800cb96 <_dtoa_r+0x8d6>
 800ca28:	b18c      	cbz	r4, 800ca4e <_dtoa_r+0x78e>
 800ca2a:	4629      	mov	r1, r5
 800ca2c:	4622      	mov	r2, r4
 800ca2e:	4658      	mov	r0, fp
 800ca30:	f000 ff9e 	bl	800d970 <__pow5mult>
 800ca34:	464a      	mov	r2, r9
 800ca36:	4601      	mov	r1, r0
 800ca38:	4605      	mov	r5, r0
 800ca3a:	4658      	mov	r0, fp
 800ca3c:	f000 fef0 	bl	800d820 <__multiply>
 800ca40:	4649      	mov	r1, r9
 800ca42:	9004      	str	r0, [sp, #16]
 800ca44:	4658      	mov	r0, fp
 800ca46:	f000 fdd7 	bl	800d5f8 <_Bfree>
 800ca4a:	9b04      	ldr	r3, [sp, #16]
 800ca4c:	4699      	mov	r9, r3
 800ca4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca50:	1b1a      	subs	r2, r3, r4
 800ca52:	d004      	beq.n	800ca5e <_dtoa_r+0x79e>
 800ca54:	4649      	mov	r1, r9
 800ca56:	4658      	mov	r0, fp
 800ca58:	f000 ff8a 	bl	800d970 <__pow5mult>
 800ca5c:	4681      	mov	r9, r0
 800ca5e:	2101      	movs	r1, #1
 800ca60:	4658      	mov	r0, fp
 800ca62:	f000 fec7 	bl	800d7f4 <__i2b>
 800ca66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca68:	4604      	mov	r4, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	f000 81c9 	beq.w	800ce02 <_dtoa_r+0xb42>
 800ca70:	461a      	mov	r2, r3
 800ca72:	4601      	mov	r1, r0
 800ca74:	4658      	mov	r0, fp
 800ca76:	f000 ff7b 	bl	800d970 <__pow5mult>
 800ca7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ca7c:	4604      	mov	r4, r0
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	f300 808f 	bgt.w	800cba2 <_dtoa_r+0x8e2>
 800ca84:	9b02      	ldr	r3, [sp, #8]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	f040 8087 	bne.w	800cb9a <_dtoa_r+0x8da>
 800ca8c:	9b03      	ldr	r3, [sp, #12]
 800ca8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	f040 8083 	bne.w	800cb9e <_dtoa_r+0x8de>
 800ca98:	9b03      	ldr	r3, [sp, #12]
 800ca9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ca9e:	0d1b      	lsrs	r3, r3, #20
 800caa0:	051b      	lsls	r3, r3, #20
 800caa2:	b12b      	cbz	r3, 800cab0 <_dtoa_r+0x7f0>
 800caa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caa6:	f108 0801 	add.w	r8, r8, #1
 800caaa:	3301      	adds	r3, #1
 800caac:	9309      	str	r3, [sp, #36]	@ 0x24
 800caae:	2301      	movs	r3, #1
 800cab0:	930a      	str	r3, [sp, #40]	@ 0x28
 800cab2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	f000 81aa 	beq.w	800ce0e <_dtoa_r+0xb4e>
 800caba:	6923      	ldr	r3, [r4, #16]
 800cabc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cac0:	6918      	ldr	r0, [r3, #16]
 800cac2:	f000 fe4b 	bl	800d75c <__hi0bits>
 800cac6:	f1c0 0020 	rsb	r0, r0, #32
 800caca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cacc:	4418      	add	r0, r3
 800cace:	f010 001f 	ands.w	r0, r0, #31
 800cad2:	d071      	beq.n	800cbb8 <_dtoa_r+0x8f8>
 800cad4:	f1c0 0320 	rsb	r3, r0, #32
 800cad8:	2b04      	cmp	r3, #4
 800cada:	dd65      	ble.n	800cba8 <_dtoa_r+0x8e8>
 800cadc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cade:	f1c0 001c 	rsb	r0, r0, #28
 800cae2:	4403      	add	r3, r0
 800cae4:	4480      	add	r8, r0
 800cae6:	4406      	add	r6, r0
 800cae8:	9309      	str	r3, [sp, #36]	@ 0x24
 800caea:	f1b8 0f00 	cmp.w	r8, #0
 800caee:	dd05      	ble.n	800cafc <_dtoa_r+0x83c>
 800caf0:	4649      	mov	r1, r9
 800caf2:	4642      	mov	r2, r8
 800caf4:	4658      	mov	r0, fp
 800caf6:	f000 ff95 	bl	800da24 <__lshift>
 800cafa:	4681      	mov	r9, r0
 800cafc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	dd05      	ble.n	800cb0e <_dtoa_r+0x84e>
 800cb02:	4621      	mov	r1, r4
 800cb04:	461a      	mov	r2, r3
 800cb06:	4658      	mov	r0, fp
 800cb08:	f000 ff8c 	bl	800da24 <__lshift>
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d053      	beq.n	800cbbc <_dtoa_r+0x8fc>
 800cb14:	4621      	mov	r1, r4
 800cb16:	4648      	mov	r0, r9
 800cb18:	f000 fff0 	bl	800dafc <__mcmp>
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	da4d      	bge.n	800cbbc <_dtoa_r+0x8fc>
 800cb20:	1e7b      	subs	r3, r7, #1
 800cb22:	4649      	mov	r1, r9
 800cb24:	9304      	str	r3, [sp, #16]
 800cb26:	220a      	movs	r2, #10
 800cb28:	2300      	movs	r3, #0
 800cb2a:	4658      	mov	r0, fp
 800cb2c:	f000 fd86 	bl	800d63c <__multadd>
 800cb30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb32:	4681      	mov	r9, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	f000 816c 	beq.w	800ce12 <_dtoa_r+0xb52>
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	4629      	mov	r1, r5
 800cb3e:	220a      	movs	r2, #10
 800cb40:	4658      	mov	r0, fp
 800cb42:	f000 fd7b 	bl	800d63c <__multadd>
 800cb46:	9b08      	ldr	r3, [sp, #32]
 800cb48:	4605      	mov	r5, r0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	dc61      	bgt.n	800cc12 <_dtoa_r+0x952>
 800cb4e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cb50:	2b02      	cmp	r3, #2
 800cb52:	dc3b      	bgt.n	800cbcc <_dtoa_r+0x90c>
 800cb54:	e05d      	b.n	800cc12 <_dtoa_r+0x952>
 800cb56:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cb58:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cb5c:	e746      	b.n	800c9ec <_dtoa_r+0x72c>
 800cb5e:	9b07      	ldr	r3, [sp, #28]
 800cb60:	1e5c      	subs	r4, r3, #1
 800cb62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb64:	42a3      	cmp	r3, r4
 800cb66:	bfbf      	itttt	lt
 800cb68:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cb6a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800cb6c:	1ae3      	sublt	r3, r4, r3
 800cb6e:	18d2      	addlt	r2, r2, r3
 800cb70:	bfa8      	it	ge
 800cb72:	1b1c      	subge	r4, r3, r4
 800cb74:	9b07      	ldr	r3, [sp, #28]
 800cb76:	bfbe      	ittt	lt
 800cb78:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cb7a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800cb7c:	2400      	movlt	r4, #0
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	bfb5      	itete	lt
 800cb82:	eba8 0603 	sublt.w	r6, r8, r3
 800cb86:	4646      	movge	r6, r8
 800cb88:	2300      	movlt	r3, #0
 800cb8a:	9b07      	ldrge	r3, [sp, #28]
 800cb8c:	e730      	b.n	800c9f0 <_dtoa_r+0x730>
 800cb8e:	4646      	mov	r6, r8
 800cb90:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cb92:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cb94:	e735      	b.n	800ca02 <_dtoa_r+0x742>
 800cb96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb98:	e75c      	b.n	800ca54 <_dtoa_r+0x794>
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	e788      	b.n	800cab0 <_dtoa_r+0x7f0>
 800cb9e:	9b02      	ldr	r3, [sp, #8]
 800cba0:	e786      	b.n	800cab0 <_dtoa_r+0x7f0>
 800cba2:	2300      	movs	r3, #0
 800cba4:	930a      	str	r3, [sp, #40]	@ 0x28
 800cba6:	e788      	b.n	800caba <_dtoa_r+0x7fa>
 800cba8:	d09f      	beq.n	800caea <_dtoa_r+0x82a>
 800cbaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbac:	331c      	adds	r3, #28
 800cbae:	441a      	add	r2, r3
 800cbb0:	4498      	add	r8, r3
 800cbb2:	441e      	add	r6, r3
 800cbb4:	9209      	str	r2, [sp, #36]	@ 0x24
 800cbb6:	e798      	b.n	800caea <_dtoa_r+0x82a>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	e7f6      	b.n	800cbaa <_dtoa_r+0x8ea>
 800cbbc:	9b07      	ldr	r3, [sp, #28]
 800cbbe:	9704      	str	r7, [sp, #16]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	dc20      	bgt.n	800cc06 <_dtoa_r+0x946>
 800cbc4:	9308      	str	r3, [sp, #32]
 800cbc6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cbc8:	2b02      	cmp	r3, #2
 800cbca:	dd1e      	ble.n	800cc0a <_dtoa_r+0x94a>
 800cbcc:	9b08      	ldr	r3, [sp, #32]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	f47f aebc 	bne.w	800c94c <_dtoa_r+0x68c>
 800cbd4:	4621      	mov	r1, r4
 800cbd6:	2205      	movs	r2, #5
 800cbd8:	4658      	mov	r0, fp
 800cbda:	f000 fd2f 	bl	800d63c <__multadd>
 800cbde:	4601      	mov	r1, r0
 800cbe0:	4604      	mov	r4, r0
 800cbe2:	4648      	mov	r0, r9
 800cbe4:	f000 ff8a 	bl	800dafc <__mcmp>
 800cbe8:	2800      	cmp	r0, #0
 800cbea:	f77f aeaf 	ble.w	800c94c <_dtoa_r+0x68c>
 800cbee:	2331      	movs	r3, #49	@ 0x31
 800cbf0:	4656      	mov	r6, sl
 800cbf2:	f806 3b01 	strb.w	r3, [r6], #1
 800cbf6:	9b04      	ldr	r3, [sp, #16]
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	9304      	str	r3, [sp, #16]
 800cbfc:	e6aa      	b.n	800c954 <_dtoa_r+0x694>
 800cbfe:	9c07      	ldr	r4, [sp, #28]
 800cc00:	9704      	str	r7, [sp, #16]
 800cc02:	4625      	mov	r5, r4
 800cc04:	e7f3      	b.n	800cbee <_dtoa_r+0x92e>
 800cc06:	9b07      	ldr	r3, [sp, #28]
 800cc08:	9308      	str	r3, [sp, #32]
 800cc0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f000 8104 	beq.w	800ce1a <_dtoa_r+0xb5a>
 800cc12:	2e00      	cmp	r6, #0
 800cc14:	dd05      	ble.n	800cc22 <_dtoa_r+0x962>
 800cc16:	4629      	mov	r1, r5
 800cc18:	4632      	mov	r2, r6
 800cc1a:	4658      	mov	r0, fp
 800cc1c:	f000 ff02 	bl	800da24 <__lshift>
 800cc20:	4605      	mov	r5, r0
 800cc22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d05a      	beq.n	800ccde <_dtoa_r+0xa1e>
 800cc28:	4658      	mov	r0, fp
 800cc2a:	6869      	ldr	r1, [r5, #4]
 800cc2c:	f000 fca4 	bl	800d578 <_Balloc>
 800cc30:	4606      	mov	r6, r0
 800cc32:	b928      	cbnz	r0, 800cc40 <_dtoa_r+0x980>
 800cc34:	4602      	mov	r2, r0
 800cc36:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cc3a:	4b83      	ldr	r3, [pc, #524]	@ (800ce48 <_dtoa_r+0xb88>)
 800cc3c:	f7ff bb54 	b.w	800c2e8 <_dtoa_r+0x28>
 800cc40:	692a      	ldr	r2, [r5, #16]
 800cc42:	f105 010c 	add.w	r1, r5, #12
 800cc46:	3202      	adds	r2, #2
 800cc48:	0092      	lsls	r2, r2, #2
 800cc4a:	300c      	adds	r0, #12
 800cc4c:	f7ff fa97 	bl	800c17e <memcpy>
 800cc50:	2201      	movs	r2, #1
 800cc52:	4631      	mov	r1, r6
 800cc54:	4658      	mov	r0, fp
 800cc56:	f000 fee5 	bl	800da24 <__lshift>
 800cc5a:	462f      	mov	r7, r5
 800cc5c:	4605      	mov	r5, r0
 800cc5e:	f10a 0301 	add.w	r3, sl, #1
 800cc62:	9307      	str	r3, [sp, #28]
 800cc64:	9b08      	ldr	r3, [sp, #32]
 800cc66:	4453      	add	r3, sl
 800cc68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc6a:	9b02      	ldr	r3, [sp, #8]
 800cc6c:	f003 0301 	and.w	r3, r3, #1
 800cc70:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc72:	9b07      	ldr	r3, [sp, #28]
 800cc74:	4621      	mov	r1, r4
 800cc76:	3b01      	subs	r3, #1
 800cc78:	4648      	mov	r0, r9
 800cc7a:	9302      	str	r3, [sp, #8]
 800cc7c:	f7ff fa98 	bl	800c1b0 <quorem>
 800cc80:	4639      	mov	r1, r7
 800cc82:	9008      	str	r0, [sp, #32]
 800cc84:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cc88:	4648      	mov	r0, r9
 800cc8a:	f000 ff37 	bl	800dafc <__mcmp>
 800cc8e:	462a      	mov	r2, r5
 800cc90:	9009      	str	r0, [sp, #36]	@ 0x24
 800cc92:	4621      	mov	r1, r4
 800cc94:	4658      	mov	r0, fp
 800cc96:	f000 ff4d 	bl	800db34 <__mdiff>
 800cc9a:	68c2      	ldr	r2, [r0, #12]
 800cc9c:	4606      	mov	r6, r0
 800cc9e:	bb02      	cbnz	r2, 800cce2 <_dtoa_r+0xa22>
 800cca0:	4601      	mov	r1, r0
 800cca2:	4648      	mov	r0, r9
 800cca4:	f000 ff2a 	bl	800dafc <__mcmp>
 800cca8:	4602      	mov	r2, r0
 800ccaa:	4631      	mov	r1, r6
 800ccac:	4658      	mov	r0, fp
 800ccae:	920c      	str	r2, [sp, #48]	@ 0x30
 800ccb0:	f000 fca2 	bl	800d5f8 <_Bfree>
 800ccb4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ccb6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ccb8:	9e07      	ldr	r6, [sp, #28]
 800ccba:	ea43 0102 	orr.w	r1, r3, r2
 800ccbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccc0:	4319      	orrs	r1, r3
 800ccc2:	d110      	bne.n	800cce6 <_dtoa_r+0xa26>
 800ccc4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ccc8:	d029      	beq.n	800cd1e <_dtoa_r+0xa5e>
 800ccca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	dd02      	ble.n	800ccd6 <_dtoa_r+0xa16>
 800ccd0:	9b08      	ldr	r3, [sp, #32]
 800ccd2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ccd6:	9b02      	ldr	r3, [sp, #8]
 800ccd8:	f883 8000 	strb.w	r8, [r3]
 800ccdc:	e63b      	b.n	800c956 <_dtoa_r+0x696>
 800ccde:	4628      	mov	r0, r5
 800cce0:	e7bb      	b.n	800cc5a <_dtoa_r+0x99a>
 800cce2:	2201      	movs	r2, #1
 800cce4:	e7e1      	b.n	800ccaa <_dtoa_r+0x9ea>
 800cce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	db04      	blt.n	800ccf6 <_dtoa_r+0xa36>
 800ccec:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800ccee:	430b      	orrs	r3, r1
 800ccf0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ccf2:	430b      	orrs	r3, r1
 800ccf4:	d120      	bne.n	800cd38 <_dtoa_r+0xa78>
 800ccf6:	2a00      	cmp	r2, #0
 800ccf8:	dded      	ble.n	800ccd6 <_dtoa_r+0xa16>
 800ccfa:	4649      	mov	r1, r9
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	4658      	mov	r0, fp
 800cd00:	f000 fe90 	bl	800da24 <__lshift>
 800cd04:	4621      	mov	r1, r4
 800cd06:	4681      	mov	r9, r0
 800cd08:	f000 fef8 	bl	800dafc <__mcmp>
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	dc03      	bgt.n	800cd18 <_dtoa_r+0xa58>
 800cd10:	d1e1      	bne.n	800ccd6 <_dtoa_r+0xa16>
 800cd12:	f018 0f01 	tst.w	r8, #1
 800cd16:	d0de      	beq.n	800ccd6 <_dtoa_r+0xa16>
 800cd18:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cd1c:	d1d8      	bne.n	800ccd0 <_dtoa_r+0xa10>
 800cd1e:	2339      	movs	r3, #57	@ 0x39
 800cd20:	9a02      	ldr	r2, [sp, #8]
 800cd22:	7013      	strb	r3, [r2, #0]
 800cd24:	4633      	mov	r3, r6
 800cd26:	461e      	mov	r6, r3
 800cd28:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cd2c:	3b01      	subs	r3, #1
 800cd2e:	2a39      	cmp	r2, #57	@ 0x39
 800cd30:	d052      	beq.n	800cdd8 <_dtoa_r+0xb18>
 800cd32:	3201      	adds	r2, #1
 800cd34:	701a      	strb	r2, [r3, #0]
 800cd36:	e60e      	b.n	800c956 <_dtoa_r+0x696>
 800cd38:	2a00      	cmp	r2, #0
 800cd3a:	dd07      	ble.n	800cd4c <_dtoa_r+0xa8c>
 800cd3c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cd40:	d0ed      	beq.n	800cd1e <_dtoa_r+0xa5e>
 800cd42:	9a02      	ldr	r2, [sp, #8]
 800cd44:	f108 0301 	add.w	r3, r8, #1
 800cd48:	7013      	strb	r3, [r2, #0]
 800cd4a:	e604      	b.n	800c956 <_dtoa_r+0x696>
 800cd4c:	9b07      	ldr	r3, [sp, #28]
 800cd4e:	9a07      	ldr	r2, [sp, #28]
 800cd50:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cd54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d028      	beq.n	800cdac <_dtoa_r+0xaec>
 800cd5a:	4649      	mov	r1, r9
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	220a      	movs	r2, #10
 800cd60:	4658      	mov	r0, fp
 800cd62:	f000 fc6b 	bl	800d63c <__multadd>
 800cd66:	42af      	cmp	r7, r5
 800cd68:	4681      	mov	r9, r0
 800cd6a:	f04f 0300 	mov.w	r3, #0
 800cd6e:	f04f 020a 	mov.w	r2, #10
 800cd72:	4639      	mov	r1, r7
 800cd74:	4658      	mov	r0, fp
 800cd76:	d107      	bne.n	800cd88 <_dtoa_r+0xac8>
 800cd78:	f000 fc60 	bl	800d63c <__multadd>
 800cd7c:	4607      	mov	r7, r0
 800cd7e:	4605      	mov	r5, r0
 800cd80:	9b07      	ldr	r3, [sp, #28]
 800cd82:	3301      	adds	r3, #1
 800cd84:	9307      	str	r3, [sp, #28]
 800cd86:	e774      	b.n	800cc72 <_dtoa_r+0x9b2>
 800cd88:	f000 fc58 	bl	800d63c <__multadd>
 800cd8c:	4629      	mov	r1, r5
 800cd8e:	4607      	mov	r7, r0
 800cd90:	2300      	movs	r3, #0
 800cd92:	220a      	movs	r2, #10
 800cd94:	4658      	mov	r0, fp
 800cd96:	f000 fc51 	bl	800d63c <__multadd>
 800cd9a:	4605      	mov	r5, r0
 800cd9c:	e7f0      	b.n	800cd80 <_dtoa_r+0xac0>
 800cd9e:	9b08      	ldr	r3, [sp, #32]
 800cda0:	2700      	movs	r7, #0
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	bfcc      	ite	gt
 800cda6:	461e      	movgt	r6, r3
 800cda8:	2601      	movle	r6, #1
 800cdaa:	4456      	add	r6, sl
 800cdac:	4649      	mov	r1, r9
 800cdae:	2201      	movs	r2, #1
 800cdb0:	4658      	mov	r0, fp
 800cdb2:	f000 fe37 	bl	800da24 <__lshift>
 800cdb6:	4621      	mov	r1, r4
 800cdb8:	4681      	mov	r9, r0
 800cdba:	f000 fe9f 	bl	800dafc <__mcmp>
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	dcb0      	bgt.n	800cd24 <_dtoa_r+0xa64>
 800cdc2:	d102      	bne.n	800cdca <_dtoa_r+0xb0a>
 800cdc4:	f018 0f01 	tst.w	r8, #1
 800cdc8:	d1ac      	bne.n	800cd24 <_dtoa_r+0xa64>
 800cdca:	4633      	mov	r3, r6
 800cdcc:	461e      	mov	r6, r3
 800cdce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cdd2:	2a30      	cmp	r2, #48	@ 0x30
 800cdd4:	d0fa      	beq.n	800cdcc <_dtoa_r+0xb0c>
 800cdd6:	e5be      	b.n	800c956 <_dtoa_r+0x696>
 800cdd8:	459a      	cmp	sl, r3
 800cdda:	d1a4      	bne.n	800cd26 <_dtoa_r+0xa66>
 800cddc:	9b04      	ldr	r3, [sp, #16]
 800cdde:	3301      	adds	r3, #1
 800cde0:	9304      	str	r3, [sp, #16]
 800cde2:	2331      	movs	r3, #49	@ 0x31
 800cde4:	f88a 3000 	strb.w	r3, [sl]
 800cde8:	e5b5      	b.n	800c956 <_dtoa_r+0x696>
 800cdea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800cdec:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ce4c <_dtoa_r+0xb8c>
 800cdf0:	b11b      	cbz	r3, 800cdfa <_dtoa_r+0xb3a>
 800cdf2:	f10a 0308 	add.w	r3, sl, #8
 800cdf6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800cdf8:	6013      	str	r3, [r2, #0]
 800cdfa:	4650      	mov	r0, sl
 800cdfc:	b017      	add	sp, #92	@ 0x5c
 800cdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce02:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ce04:	2b01      	cmp	r3, #1
 800ce06:	f77f ae3d 	ble.w	800ca84 <_dtoa_r+0x7c4>
 800ce0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce0c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce0e:	2001      	movs	r0, #1
 800ce10:	e65b      	b.n	800caca <_dtoa_r+0x80a>
 800ce12:	9b08      	ldr	r3, [sp, #32]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	f77f aed6 	ble.w	800cbc6 <_dtoa_r+0x906>
 800ce1a:	4656      	mov	r6, sl
 800ce1c:	4621      	mov	r1, r4
 800ce1e:	4648      	mov	r0, r9
 800ce20:	f7ff f9c6 	bl	800c1b0 <quorem>
 800ce24:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ce28:	9b08      	ldr	r3, [sp, #32]
 800ce2a:	f806 8b01 	strb.w	r8, [r6], #1
 800ce2e:	eba6 020a 	sub.w	r2, r6, sl
 800ce32:	4293      	cmp	r3, r2
 800ce34:	ddb3      	ble.n	800cd9e <_dtoa_r+0xade>
 800ce36:	4649      	mov	r1, r9
 800ce38:	2300      	movs	r3, #0
 800ce3a:	220a      	movs	r2, #10
 800ce3c:	4658      	mov	r0, fp
 800ce3e:	f000 fbfd 	bl	800d63c <__multadd>
 800ce42:	4681      	mov	r9, r0
 800ce44:	e7ea      	b.n	800ce1c <_dtoa_r+0xb5c>
 800ce46:	bf00      	nop
 800ce48:	0800f572 	.word	0x0800f572
 800ce4c:	0800f4f6 	.word	0x0800f4f6

0800ce50 <_free_r>:
 800ce50:	b538      	push	{r3, r4, r5, lr}
 800ce52:	4605      	mov	r5, r0
 800ce54:	2900      	cmp	r1, #0
 800ce56:	d040      	beq.n	800ceda <_free_r+0x8a>
 800ce58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce5c:	1f0c      	subs	r4, r1, #4
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	bfb8      	it	lt
 800ce62:	18e4      	addlt	r4, r4, r3
 800ce64:	f7fd f902 	bl	800a06c <__malloc_lock>
 800ce68:	4a1c      	ldr	r2, [pc, #112]	@ (800cedc <_free_r+0x8c>)
 800ce6a:	6813      	ldr	r3, [r2, #0]
 800ce6c:	b933      	cbnz	r3, 800ce7c <_free_r+0x2c>
 800ce6e:	6063      	str	r3, [r4, #4]
 800ce70:	6014      	str	r4, [r2, #0]
 800ce72:	4628      	mov	r0, r5
 800ce74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce78:	f7fd b8fe 	b.w	800a078 <__malloc_unlock>
 800ce7c:	42a3      	cmp	r3, r4
 800ce7e:	d908      	bls.n	800ce92 <_free_r+0x42>
 800ce80:	6820      	ldr	r0, [r4, #0]
 800ce82:	1821      	adds	r1, r4, r0
 800ce84:	428b      	cmp	r3, r1
 800ce86:	bf01      	itttt	eq
 800ce88:	6819      	ldreq	r1, [r3, #0]
 800ce8a:	685b      	ldreq	r3, [r3, #4]
 800ce8c:	1809      	addeq	r1, r1, r0
 800ce8e:	6021      	streq	r1, [r4, #0]
 800ce90:	e7ed      	b.n	800ce6e <_free_r+0x1e>
 800ce92:	461a      	mov	r2, r3
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	b10b      	cbz	r3, 800ce9c <_free_r+0x4c>
 800ce98:	42a3      	cmp	r3, r4
 800ce9a:	d9fa      	bls.n	800ce92 <_free_r+0x42>
 800ce9c:	6811      	ldr	r1, [r2, #0]
 800ce9e:	1850      	adds	r0, r2, r1
 800cea0:	42a0      	cmp	r0, r4
 800cea2:	d10b      	bne.n	800cebc <_free_r+0x6c>
 800cea4:	6820      	ldr	r0, [r4, #0]
 800cea6:	4401      	add	r1, r0
 800cea8:	1850      	adds	r0, r2, r1
 800ceaa:	4283      	cmp	r3, r0
 800ceac:	6011      	str	r1, [r2, #0]
 800ceae:	d1e0      	bne.n	800ce72 <_free_r+0x22>
 800ceb0:	6818      	ldr	r0, [r3, #0]
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	4408      	add	r0, r1
 800ceb6:	6010      	str	r0, [r2, #0]
 800ceb8:	6053      	str	r3, [r2, #4]
 800ceba:	e7da      	b.n	800ce72 <_free_r+0x22>
 800cebc:	d902      	bls.n	800cec4 <_free_r+0x74>
 800cebe:	230c      	movs	r3, #12
 800cec0:	602b      	str	r3, [r5, #0]
 800cec2:	e7d6      	b.n	800ce72 <_free_r+0x22>
 800cec4:	6820      	ldr	r0, [r4, #0]
 800cec6:	1821      	adds	r1, r4, r0
 800cec8:	428b      	cmp	r3, r1
 800ceca:	bf01      	itttt	eq
 800cecc:	6819      	ldreq	r1, [r3, #0]
 800cece:	685b      	ldreq	r3, [r3, #4]
 800ced0:	1809      	addeq	r1, r1, r0
 800ced2:	6021      	streq	r1, [r4, #0]
 800ced4:	6063      	str	r3, [r4, #4]
 800ced6:	6054      	str	r4, [r2, #4]
 800ced8:	e7cb      	b.n	800ce72 <_free_r+0x22>
 800ceda:	bd38      	pop	{r3, r4, r5, pc}
 800cedc:	20000bc4 	.word	0x20000bc4

0800cee0 <rshift>:
 800cee0:	6903      	ldr	r3, [r0, #16]
 800cee2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cee6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ceea:	f100 0414 	add.w	r4, r0, #20
 800ceee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cef2:	dd46      	ble.n	800cf82 <rshift+0xa2>
 800cef4:	f011 011f 	ands.w	r1, r1, #31
 800cef8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cefc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cf00:	d10c      	bne.n	800cf1c <rshift+0x3c>
 800cf02:	4629      	mov	r1, r5
 800cf04:	f100 0710 	add.w	r7, r0, #16
 800cf08:	42b1      	cmp	r1, r6
 800cf0a:	d335      	bcc.n	800cf78 <rshift+0x98>
 800cf0c:	1a9b      	subs	r3, r3, r2
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	1eea      	subs	r2, r5, #3
 800cf12:	4296      	cmp	r6, r2
 800cf14:	bf38      	it	cc
 800cf16:	2300      	movcc	r3, #0
 800cf18:	4423      	add	r3, r4
 800cf1a:	e015      	b.n	800cf48 <rshift+0x68>
 800cf1c:	46a1      	mov	r9, r4
 800cf1e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cf22:	f1c1 0820 	rsb	r8, r1, #32
 800cf26:	40cf      	lsrs	r7, r1
 800cf28:	f105 0e04 	add.w	lr, r5, #4
 800cf2c:	4576      	cmp	r6, lr
 800cf2e:	46f4      	mov	ip, lr
 800cf30:	d816      	bhi.n	800cf60 <rshift+0x80>
 800cf32:	1a9a      	subs	r2, r3, r2
 800cf34:	0092      	lsls	r2, r2, #2
 800cf36:	3a04      	subs	r2, #4
 800cf38:	3501      	adds	r5, #1
 800cf3a:	42ae      	cmp	r6, r5
 800cf3c:	bf38      	it	cc
 800cf3e:	2200      	movcc	r2, #0
 800cf40:	18a3      	adds	r3, r4, r2
 800cf42:	50a7      	str	r7, [r4, r2]
 800cf44:	b107      	cbz	r7, 800cf48 <rshift+0x68>
 800cf46:	3304      	adds	r3, #4
 800cf48:	42a3      	cmp	r3, r4
 800cf4a:	eba3 0204 	sub.w	r2, r3, r4
 800cf4e:	bf08      	it	eq
 800cf50:	2300      	moveq	r3, #0
 800cf52:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cf56:	6102      	str	r2, [r0, #16]
 800cf58:	bf08      	it	eq
 800cf5a:	6143      	streq	r3, [r0, #20]
 800cf5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf60:	f8dc c000 	ldr.w	ip, [ip]
 800cf64:	fa0c fc08 	lsl.w	ip, ip, r8
 800cf68:	ea4c 0707 	orr.w	r7, ip, r7
 800cf6c:	f849 7b04 	str.w	r7, [r9], #4
 800cf70:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cf74:	40cf      	lsrs	r7, r1
 800cf76:	e7d9      	b.n	800cf2c <rshift+0x4c>
 800cf78:	f851 cb04 	ldr.w	ip, [r1], #4
 800cf7c:	f847 cf04 	str.w	ip, [r7, #4]!
 800cf80:	e7c2      	b.n	800cf08 <rshift+0x28>
 800cf82:	4623      	mov	r3, r4
 800cf84:	e7e0      	b.n	800cf48 <rshift+0x68>

0800cf86 <__hexdig_fun>:
 800cf86:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cf8a:	2b09      	cmp	r3, #9
 800cf8c:	d802      	bhi.n	800cf94 <__hexdig_fun+0xe>
 800cf8e:	3820      	subs	r0, #32
 800cf90:	b2c0      	uxtb	r0, r0
 800cf92:	4770      	bx	lr
 800cf94:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cf98:	2b05      	cmp	r3, #5
 800cf9a:	d801      	bhi.n	800cfa0 <__hexdig_fun+0x1a>
 800cf9c:	3847      	subs	r0, #71	@ 0x47
 800cf9e:	e7f7      	b.n	800cf90 <__hexdig_fun+0xa>
 800cfa0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cfa4:	2b05      	cmp	r3, #5
 800cfa6:	d801      	bhi.n	800cfac <__hexdig_fun+0x26>
 800cfa8:	3827      	subs	r0, #39	@ 0x27
 800cfaa:	e7f1      	b.n	800cf90 <__hexdig_fun+0xa>
 800cfac:	2000      	movs	r0, #0
 800cfae:	4770      	bx	lr

0800cfb0 <__gethex>:
 800cfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb4:	468a      	mov	sl, r1
 800cfb6:	4690      	mov	r8, r2
 800cfb8:	b085      	sub	sp, #20
 800cfba:	9302      	str	r3, [sp, #8]
 800cfbc:	680b      	ldr	r3, [r1, #0]
 800cfbe:	9001      	str	r0, [sp, #4]
 800cfc0:	1c9c      	adds	r4, r3, #2
 800cfc2:	46a1      	mov	r9, r4
 800cfc4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cfc8:	2830      	cmp	r0, #48	@ 0x30
 800cfca:	d0fa      	beq.n	800cfc2 <__gethex+0x12>
 800cfcc:	eba9 0303 	sub.w	r3, r9, r3
 800cfd0:	f1a3 0b02 	sub.w	fp, r3, #2
 800cfd4:	f7ff ffd7 	bl	800cf86 <__hexdig_fun>
 800cfd8:	4605      	mov	r5, r0
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	d168      	bne.n	800d0b0 <__gethex+0x100>
 800cfde:	2201      	movs	r2, #1
 800cfe0:	4648      	mov	r0, r9
 800cfe2:	499f      	ldr	r1, [pc, #636]	@ (800d260 <__gethex+0x2b0>)
 800cfe4:	f7fe ffde 	bl	800bfa4 <strncmp>
 800cfe8:	4607      	mov	r7, r0
 800cfea:	2800      	cmp	r0, #0
 800cfec:	d167      	bne.n	800d0be <__gethex+0x10e>
 800cfee:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cff2:	4626      	mov	r6, r4
 800cff4:	f7ff ffc7 	bl	800cf86 <__hexdig_fun>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	d062      	beq.n	800d0c2 <__gethex+0x112>
 800cffc:	4623      	mov	r3, r4
 800cffe:	7818      	ldrb	r0, [r3, #0]
 800d000:	4699      	mov	r9, r3
 800d002:	2830      	cmp	r0, #48	@ 0x30
 800d004:	f103 0301 	add.w	r3, r3, #1
 800d008:	d0f9      	beq.n	800cffe <__gethex+0x4e>
 800d00a:	f7ff ffbc 	bl	800cf86 <__hexdig_fun>
 800d00e:	fab0 f580 	clz	r5, r0
 800d012:	f04f 0b01 	mov.w	fp, #1
 800d016:	096d      	lsrs	r5, r5, #5
 800d018:	464a      	mov	r2, r9
 800d01a:	4616      	mov	r6, r2
 800d01c:	7830      	ldrb	r0, [r6, #0]
 800d01e:	3201      	adds	r2, #1
 800d020:	f7ff ffb1 	bl	800cf86 <__hexdig_fun>
 800d024:	2800      	cmp	r0, #0
 800d026:	d1f8      	bne.n	800d01a <__gethex+0x6a>
 800d028:	2201      	movs	r2, #1
 800d02a:	4630      	mov	r0, r6
 800d02c:	498c      	ldr	r1, [pc, #560]	@ (800d260 <__gethex+0x2b0>)
 800d02e:	f7fe ffb9 	bl	800bfa4 <strncmp>
 800d032:	2800      	cmp	r0, #0
 800d034:	d13f      	bne.n	800d0b6 <__gethex+0x106>
 800d036:	b944      	cbnz	r4, 800d04a <__gethex+0x9a>
 800d038:	1c74      	adds	r4, r6, #1
 800d03a:	4622      	mov	r2, r4
 800d03c:	4616      	mov	r6, r2
 800d03e:	7830      	ldrb	r0, [r6, #0]
 800d040:	3201      	adds	r2, #1
 800d042:	f7ff ffa0 	bl	800cf86 <__hexdig_fun>
 800d046:	2800      	cmp	r0, #0
 800d048:	d1f8      	bne.n	800d03c <__gethex+0x8c>
 800d04a:	1ba4      	subs	r4, r4, r6
 800d04c:	00a7      	lsls	r7, r4, #2
 800d04e:	7833      	ldrb	r3, [r6, #0]
 800d050:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d054:	2b50      	cmp	r3, #80	@ 0x50
 800d056:	d13e      	bne.n	800d0d6 <__gethex+0x126>
 800d058:	7873      	ldrb	r3, [r6, #1]
 800d05a:	2b2b      	cmp	r3, #43	@ 0x2b
 800d05c:	d033      	beq.n	800d0c6 <__gethex+0x116>
 800d05e:	2b2d      	cmp	r3, #45	@ 0x2d
 800d060:	d034      	beq.n	800d0cc <__gethex+0x11c>
 800d062:	2400      	movs	r4, #0
 800d064:	1c71      	adds	r1, r6, #1
 800d066:	7808      	ldrb	r0, [r1, #0]
 800d068:	f7ff ff8d 	bl	800cf86 <__hexdig_fun>
 800d06c:	1e43      	subs	r3, r0, #1
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	2b18      	cmp	r3, #24
 800d072:	d830      	bhi.n	800d0d6 <__gethex+0x126>
 800d074:	f1a0 0210 	sub.w	r2, r0, #16
 800d078:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d07c:	f7ff ff83 	bl	800cf86 <__hexdig_fun>
 800d080:	f100 3cff 	add.w	ip, r0, #4294967295
 800d084:	fa5f fc8c 	uxtb.w	ip, ip
 800d088:	f1bc 0f18 	cmp.w	ip, #24
 800d08c:	f04f 030a 	mov.w	r3, #10
 800d090:	d91e      	bls.n	800d0d0 <__gethex+0x120>
 800d092:	b104      	cbz	r4, 800d096 <__gethex+0xe6>
 800d094:	4252      	negs	r2, r2
 800d096:	4417      	add	r7, r2
 800d098:	f8ca 1000 	str.w	r1, [sl]
 800d09c:	b1ed      	cbz	r5, 800d0da <__gethex+0x12a>
 800d09e:	f1bb 0f00 	cmp.w	fp, #0
 800d0a2:	bf0c      	ite	eq
 800d0a4:	2506      	moveq	r5, #6
 800d0a6:	2500      	movne	r5, #0
 800d0a8:	4628      	mov	r0, r5
 800d0aa:	b005      	add	sp, #20
 800d0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b0:	2500      	movs	r5, #0
 800d0b2:	462c      	mov	r4, r5
 800d0b4:	e7b0      	b.n	800d018 <__gethex+0x68>
 800d0b6:	2c00      	cmp	r4, #0
 800d0b8:	d1c7      	bne.n	800d04a <__gethex+0x9a>
 800d0ba:	4627      	mov	r7, r4
 800d0bc:	e7c7      	b.n	800d04e <__gethex+0x9e>
 800d0be:	464e      	mov	r6, r9
 800d0c0:	462f      	mov	r7, r5
 800d0c2:	2501      	movs	r5, #1
 800d0c4:	e7c3      	b.n	800d04e <__gethex+0x9e>
 800d0c6:	2400      	movs	r4, #0
 800d0c8:	1cb1      	adds	r1, r6, #2
 800d0ca:	e7cc      	b.n	800d066 <__gethex+0xb6>
 800d0cc:	2401      	movs	r4, #1
 800d0ce:	e7fb      	b.n	800d0c8 <__gethex+0x118>
 800d0d0:	fb03 0002 	mla	r0, r3, r2, r0
 800d0d4:	e7ce      	b.n	800d074 <__gethex+0xc4>
 800d0d6:	4631      	mov	r1, r6
 800d0d8:	e7de      	b.n	800d098 <__gethex+0xe8>
 800d0da:	4629      	mov	r1, r5
 800d0dc:	eba6 0309 	sub.w	r3, r6, r9
 800d0e0:	3b01      	subs	r3, #1
 800d0e2:	2b07      	cmp	r3, #7
 800d0e4:	dc0a      	bgt.n	800d0fc <__gethex+0x14c>
 800d0e6:	9801      	ldr	r0, [sp, #4]
 800d0e8:	f000 fa46 	bl	800d578 <_Balloc>
 800d0ec:	4604      	mov	r4, r0
 800d0ee:	b940      	cbnz	r0, 800d102 <__gethex+0x152>
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	21e4      	movs	r1, #228	@ 0xe4
 800d0f4:	4b5b      	ldr	r3, [pc, #364]	@ (800d264 <__gethex+0x2b4>)
 800d0f6:	485c      	ldr	r0, [pc, #368]	@ (800d268 <__gethex+0x2b8>)
 800d0f8:	f001 face 	bl	800e698 <__assert_func>
 800d0fc:	3101      	adds	r1, #1
 800d0fe:	105b      	asrs	r3, r3, #1
 800d100:	e7ef      	b.n	800d0e2 <__gethex+0x132>
 800d102:	2300      	movs	r3, #0
 800d104:	f100 0a14 	add.w	sl, r0, #20
 800d108:	4655      	mov	r5, sl
 800d10a:	469b      	mov	fp, r3
 800d10c:	45b1      	cmp	r9, r6
 800d10e:	d337      	bcc.n	800d180 <__gethex+0x1d0>
 800d110:	f845 bb04 	str.w	fp, [r5], #4
 800d114:	eba5 050a 	sub.w	r5, r5, sl
 800d118:	10ad      	asrs	r5, r5, #2
 800d11a:	6125      	str	r5, [r4, #16]
 800d11c:	4658      	mov	r0, fp
 800d11e:	f000 fb1d 	bl	800d75c <__hi0bits>
 800d122:	016d      	lsls	r5, r5, #5
 800d124:	f8d8 6000 	ldr.w	r6, [r8]
 800d128:	1a2d      	subs	r5, r5, r0
 800d12a:	42b5      	cmp	r5, r6
 800d12c:	dd54      	ble.n	800d1d8 <__gethex+0x228>
 800d12e:	1bad      	subs	r5, r5, r6
 800d130:	4629      	mov	r1, r5
 800d132:	4620      	mov	r0, r4
 800d134:	f000 fea5 	bl	800de82 <__any_on>
 800d138:	4681      	mov	r9, r0
 800d13a:	b178      	cbz	r0, 800d15c <__gethex+0x1ac>
 800d13c:	f04f 0901 	mov.w	r9, #1
 800d140:	1e6b      	subs	r3, r5, #1
 800d142:	1159      	asrs	r1, r3, #5
 800d144:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d148:	f003 021f 	and.w	r2, r3, #31
 800d14c:	fa09 f202 	lsl.w	r2, r9, r2
 800d150:	420a      	tst	r2, r1
 800d152:	d003      	beq.n	800d15c <__gethex+0x1ac>
 800d154:	454b      	cmp	r3, r9
 800d156:	dc36      	bgt.n	800d1c6 <__gethex+0x216>
 800d158:	f04f 0902 	mov.w	r9, #2
 800d15c:	4629      	mov	r1, r5
 800d15e:	4620      	mov	r0, r4
 800d160:	f7ff febe 	bl	800cee0 <rshift>
 800d164:	442f      	add	r7, r5
 800d166:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d16a:	42bb      	cmp	r3, r7
 800d16c:	da42      	bge.n	800d1f4 <__gethex+0x244>
 800d16e:	4621      	mov	r1, r4
 800d170:	9801      	ldr	r0, [sp, #4]
 800d172:	f000 fa41 	bl	800d5f8 <_Bfree>
 800d176:	2300      	movs	r3, #0
 800d178:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d17a:	25a3      	movs	r5, #163	@ 0xa3
 800d17c:	6013      	str	r3, [r2, #0]
 800d17e:	e793      	b.n	800d0a8 <__gethex+0xf8>
 800d180:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d184:	2a2e      	cmp	r2, #46	@ 0x2e
 800d186:	d012      	beq.n	800d1ae <__gethex+0x1fe>
 800d188:	2b20      	cmp	r3, #32
 800d18a:	d104      	bne.n	800d196 <__gethex+0x1e6>
 800d18c:	f845 bb04 	str.w	fp, [r5], #4
 800d190:	f04f 0b00 	mov.w	fp, #0
 800d194:	465b      	mov	r3, fp
 800d196:	7830      	ldrb	r0, [r6, #0]
 800d198:	9303      	str	r3, [sp, #12]
 800d19a:	f7ff fef4 	bl	800cf86 <__hexdig_fun>
 800d19e:	9b03      	ldr	r3, [sp, #12]
 800d1a0:	f000 000f 	and.w	r0, r0, #15
 800d1a4:	4098      	lsls	r0, r3
 800d1a6:	ea4b 0b00 	orr.w	fp, fp, r0
 800d1aa:	3304      	adds	r3, #4
 800d1ac:	e7ae      	b.n	800d10c <__gethex+0x15c>
 800d1ae:	45b1      	cmp	r9, r6
 800d1b0:	d8ea      	bhi.n	800d188 <__gethex+0x1d8>
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	4630      	mov	r0, r6
 800d1b6:	492a      	ldr	r1, [pc, #168]	@ (800d260 <__gethex+0x2b0>)
 800d1b8:	9303      	str	r3, [sp, #12]
 800d1ba:	f7fe fef3 	bl	800bfa4 <strncmp>
 800d1be:	9b03      	ldr	r3, [sp, #12]
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	d1e1      	bne.n	800d188 <__gethex+0x1d8>
 800d1c4:	e7a2      	b.n	800d10c <__gethex+0x15c>
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	1ea9      	subs	r1, r5, #2
 800d1ca:	f000 fe5a 	bl	800de82 <__any_on>
 800d1ce:	2800      	cmp	r0, #0
 800d1d0:	d0c2      	beq.n	800d158 <__gethex+0x1a8>
 800d1d2:	f04f 0903 	mov.w	r9, #3
 800d1d6:	e7c1      	b.n	800d15c <__gethex+0x1ac>
 800d1d8:	da09      	bge.n	800d1ee <__gethex+0x23e>
 800d1da:	1b75      	subs	r5, r6, r5
 800d1dc:	4621      	mov	r1, r4
 800d1de:	462a      	mov	r2, r5
 800d1e0:	9801      	ldr	r0, [sp, #4]
 800d1e2:	f000 fc1f 	bl	800da24 <__lshift>
 800d1e6:	4604      	mov	r4, r0
 800d1e8:	1b7f      	subs	r7, r7, r5
 800d1ea:	f100 0a14 	add.w	sl, r0, #20
 800d1ee:	f04f 0900 	mov.w	r9, #0
 800d1f2:	e7b8      	b.n	800d166 <__gethex+0x1b6>
 800d1f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d1f8:	42bd      	cmp	r5, r7
 800d1fa:	dd6f      	ble.n	800d2dc <__gethex+0x32c>
 800d1fc:	1bed      	subs	r5, r5, r7
 800d1fe:	42ae      	cmp	r6, r5
 800d200:	dc34      	bgt.n	800d26c <__gethex+0x2bc>
 800d202:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d206:	2b02      	cmp	r3, #2
 800d208:	d022      	beq.n	800d250 <__gethex+0x2a0>
 800d20a:	2b03      	cmp	r3, #3
 800d20c:	d024      	beq.n	800d258 <__gethex+0x2a8>
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d115      	bne.n	800d23e <__gethex+0x28e>
 800d212:	42ae      	cmp	r6, r5
 800d214:	d113      	bne.n	800d23e <__gethex+0x28e>
 800d216:	2e01      	cmp	r6, #1
 800d218:	d10b      	bne.n	800d232 <__gethex+0x282>
 800d21a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d21e:	9a02      	ldr	r2, [sp, #8]
 800d220:	2562      	movs	r5, #98	@ 0x62
 800d222:	6013      	str	r3, [r2, #0]
 800d224:	2301      	movs	r3, #1
 800d226:	6123      	str	r3, [r4, #16]
 800d228:	f8ca 3000 	str.w	r3, [sl]
 800d22c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d22e:	601c      	str	r4, [r3, #0]
 800d230:	e73a      	b.n	800d0a8 <__gethex+0xf8>
 800d232:	4620      	mov	r0, r4
 800d234:	1e71      	subs	r1, r6, #1
 800d236:	f000 fe24 	bl	800de82 <__any_on>
 800d23a:	2800      	cmp	r0, #0
 800d23c:	d1ed      	bne.n	800d21a <__gethex+0x26a>
 800d23e:	4621      	mov	r1, r4
 800d240:	9801      	ldr	r0, [sp, #4]
 800d242:	f000 f9d9 	bl	800d5f8 <_Bfree>
 800d246:	2300      	movs	r3, #0
 800d248:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d24a:	2550      	movs	r5, #80	@ 0x50
 800d24c:	6013      	str	r3, [r2, #0]
 800d24e:	e72b      	b.n	800d0a8 <__gethex+0xf8>
 800d250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d252:	2b00      	cmp	r3, #0
 800d254:	d1f3      	bne.n	800d23e <__gethex+0x28e>
 800d256:	e7e0      	b.n	800d21a <__gethex+0x26a>
 800d258:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d1dd      	bne.n	800d21a <__gethex+0x26a>
 800d25e:	e7ee      	b.n	800d23e <__gethex+0x28e>
 800d260:	0800e952 	.word	0x0800e952
 800d264:	0800f572 	.word	0x0800f572
 800d268:	0800f583 	.word	0x0800f583
 800d26c:	1e6f      	subs	r7, r5, #1
 800d26e:	f1b9 0f00 	cmp.w	r9, #0
 800d272:	d130      	bne.n	800d2d6 <__gethex+0x326>
 800d274:	b127      	cbz	r7, 800d280 <__gethex+0x2d0>
 800d276:	4639      	mov	r1, r7
 800d278:	4620      	mov	r0, r4
 800d27a:	f000 fe02 	bl	800de82 <__any_on>
 800d27e:	4681      	mov	r9, r0
 800d280:	2301      	movs	r3, #1
 800d282:	4629      	mov	r1, r5
 800d284:	1b76      	subs	r6, r6, r5
 800d286:	2502      	movs	r5, #2
 800d288:	117a      	asrs	r2, r7, #5
 800d28a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d28e:	f007 071f 	and.w	r7, r7, #31
 800d292:	40bb      	lsls	r3, r7
 800d294:	4213      	tst	r3, r2
 800d296:	4620      	mov	r0, r4
 800d298:	bf18      	it	ne
 800d29a:	f049 0902 	orrne.w	r9, r9, #2
 800d29e:	f7ff fe1f 	bl	800cee0 <rshift>
 800d2a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d2a6:	f1b9 0f00 	cmp.w	r9, #0
 800d2aa:	d047      	beq.n	800d33c <__gethex+0x38c>
 800d2ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d2b0:	2b02      	cmp	r3, #2
 800d2b2:	d015      	beq.n	800d2e0 <__gethex+0x330>
 800d2b4:	2b03      	cmp	r3, #3
 800d2b6:	d017      	beq.n	800d2e8 <__gethex+0x338>
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d109      	bne.n	800d2d0 <__gethex+0x320>
 800d2bc:	f019 0f02 	tst.w	r9, #2
 800d2c0:	d006      	beq.n	800d2d0 <__gethex+0x320>
 800d2c2:	f8da 3000 	ldr.w	r3, [sl]
 800d2c6:	ea49 0903 	orr.w	r9, r9, r3
 800d2ca:	f019 0f01 	tst.w	r9, #1
 800d2ce:	d10e      	bne.n	800d2ee <__gethex+0x33e>
 800d2d0:	f045 0510 	orr.w	r5, r5, #16
 800d2d4:	e032      	b.n	800d33c <__gethex+0x38c>
 800d2d6:	f04f 0901 	mov.w	r9, #1
 800d2da:	e7d1      	b.n	800d280 <__gethex+0x2d0>
 800d2dc:	2501      	movs	r5, #1
 800d2de:	e7e2      	b.n	800d2a6 <__gethex+0x2f6>
 800d2e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2e2:	f1c3 0301 	rsb	r3, r3, #1
 800d2e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d2e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d0f0      	beq.n	800d2d0 <__gethex+0x320>
 800d2ee:	f04f 0c00 	mov.w	ip, #0
 800d2f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d2f6:	f104 0314 	add.w	r3, r4, #20
 800d2fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d2fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d302:	4618      	mov	r0, r3
 800d304:	f853 2b04 	ldr.w	r2, [r3], #4
 800d308:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d30c:	d01b      	beq.n	800d346 <__gethex+0x396>
 800d30e:	3201      	adds	r2, #1
 800d310:	6002      	str	r2, [r0, #0]
 800d312:	2d02      	cmp	r5, #2
 800d314:	f104 0314 	add.w	r3, r4, #20
 800d318:	d13c      	bne.n	800d394 <__gethex+0x3e4>
 800d31a:	f8d8 2000 	ldr.w	r2, [r8]
 800d31e:	3a01      	subs	r2, #1
 800d320:	42b2      	cmp	r2, r6
 800d322:	d109      	bne.n	800d338 <__gethex+0x388>
 800d324:	2201      	movs	r2, #1
 800d326:	1171      	asrs	r1, r6, #5
 800d328:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d32c:	f006 061f 	and.w	r6, r6, #31
 800d330:	fa02 f606 	lsl.w	r6, r2, r6
 800d334:	421e      	tst	r6, r3
 800d336:	d13a      	bne.n	800d3ae <__gethex+0x3fe>
 800d338:	f045 0520 	orr.w	r5, r5, #32
 800d33c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d33e:	601c      	str	r4, [r3, #0]
 800d340:	9b02      	ldr	r3, [sp, #8]
 800d342:	601f      	str	r7, [r3, #0]
 800d344:	e6b0      	b.n	800d0a8 <__gethex+0xf8>
 800d346:	4299      	cmp	r1, r3
 800d348:	f843 cc04 	str.w	ip, [r3, #-4]
 800d34c:	d8d9      	bhi.n	800d302 <__gethex+0x352>
 800d34e:	68a3      	ldr	r3, [r4, #8]
 800d350:	459b      	cmp	fp, r3
 800d352:	db17      	blt.n	800d384 <__gethex+0x3d4>
 800d354:	6861      	ldr	r1, [r4, #4]
 800d356:	9801      	ldr	r0, [sp, #4]
 800d358:	3101      	adds	r1, #1
 800d35a:	f000 f90d 	bl	800d578 <_Balloc>
 800d35e:	4681      	mov	r9, r0
 800d360:	b918      	cbnz	r0, 800d36a <__gethex+0x3ba>
 800d362:	4602      	mov	r2, r0
 800d364:	2184      	movs	r1, #132	@ 0x84
 800d366:	4b19      	ldr	r3, [pc, #100]	@ (800d3cc <__gethex+0x41c>)
 800d368:	e6c5      	b.n	800d0f6 <__gethex+0x146>
 800d36a:	6922      	ldr	r2, [r4, #16]
 800d36c:	f104 010c 	add.w	r1, r4, #12
 800d370:	3202      	adds	r2, #2
 800d372:	0092      	lsls	r2, r2, #2
 800d374:	300c      	adds	r0, #12
 800d376:	f7fe ff02 	bl	800c17e <memcpy>
 800d37a:	4621      	mov	r1, r4
 800d37c:	9801      	ldr	r0, [sp, #4]
 800d37e:	f000 f93b 	bl	800d5f8 <_Bfree>
 800d382:	464c      	mov	r4, r9
 800d384:	6923      	ldr	r3, [r4, #16]
 800d386:	1c5a      	adds	r2, r3, #1
 800d388:	6122      	str	r2, [r4, #16]
 800d38a:	2201      	movs	r2, #1
 800d38c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d390:	615a      	str	r2, [r3, #20]
 800d392:	e7be      	b.n	800d312 <__gethex+0x362>
 800d394:	6922      	ldr	r2, [r4, #16]
 800d396:	455a      	cmp	r2, fp
 800d398:	dd0b      	ble.n	800d3b2 <__gethex+0x402>
 800d39a:	2101      	movs	r1, #1
 800d39c:	4620      	mov	r0, r4
 800d39e:	f7ff fd9f 	bl	800cee0 <rshift>
 800d3a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d3a6:	3701      	adds	r7, #1
 800d3a8:	42bb      	cmp	r3, r7
 800d3aa:	f6ff aee0 	blt.w	800d16e <__gethex+0x1be>
 800d3ae:	2501      	movs	r5, #1
 800d3b0:	e7c2      	b.n	800d338 <__gethex+0x388>
 800d3b2:	f016 061f 	ands.w	r6, r6, #31
 800d3b6:	d0fa      	beq.n	800d3ae <__gethex+0x3fe>
 800d3b8:	4453      	add	r3, sl
 800d3ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d3be:	f000 f9cd 	bl	800d75c <__hi0bits>
 800d3c2:	f1c6 0620 	rsb	r6, r6, #32
 800d3c6:	42b0      	cmp	r0, r6
 800d3c8:	dbe7      	blt.n	800d39a <__gethex+0x3ea>
 800d3ca:	e7f0      	b.n	800d3ae <__gethex+0x3fe>
 800d3cc:	0800f572 	.word	0x0800f572

0800d3d0 <L_shift>:
 800d3d0:	f1c2 0208 	rsb	r2, r2, #8
 800d3d4:	0092      	lsls	r2, r2, #2
 800d3d6:	b570      	push	{r4, r5, r6, lr}
 800d3d8:	f1c2 0620 	rsb	r6, r2, #32
 800d3dc:	6843      	ldr	r3, [r0, #4]
 800d3de:	6804      	ldr	r4, [r0, #0]
 800d3e0:	fa03 f506 	lsl.w	r5, r3, r6
 800d3e4:	432c      	orrs	r4, r5
 800d3e6:	40d3      	lsrs	r3, r2
 800d3e8:	6004      	str	r4, [r0, #0]
 800d3ea:	f840 3f04 	str.w	r3, [r0, #4]!
 800d3ee:	4288      	cmp	r0, r1
 800d3f0:	d3f4      	bcc.n	800d3dc <L_shift+0xc>
 800d3f2:	bd70      	pop	{r4, r5, r6, pc}

0800d3f4 <__match>:
 800d3f4:	b530      	push	{r4, r5, lr}
 800d3f6:	6803      	ldr	r3, [r0, #0]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3fe:	b914      	cbnz	r4, 800d406 <__match+0x12>
 800d400:	6003      	str	r3, [r0, #0]
 800d402:	2001      	movs	r0, #1
 800d404:	bd30      	pop	{r4, r5, pc}
 800d406:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d40a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d40e:	2d19      	cmp	r5, #25
 800d410:	bf98      	it	ls
 800d412:	3220      	addls	r2, #32
 800d414:	42a2      	cmp	r2, r4
 800d416:	d0f0      	beq.n	800d3fa <__match+0x6>
 800d418:	2000      	movs	r0, #0
 800d41a:	e7f3      	b.n	800d404 <__match+0x10>

0800d41c <__hexnan>:
 800d41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d420:	2500      	movs	r5, #0
 800d422:	680b      	ldr	r3, [r1, #0]
 800d424:	4682      	mov	sl, r0
 800d426:	115e      	asrs	r6, r3, #5
 800d428:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d42c:	f013 031f 	ands.w	r3, r3, #31
 800d430:	bf18      	it	ne
 800d432:	3604      	addne	r6, #4
 800d434:	1f37      	subs	r7, r6, #4
 800d436:	4690      	mov	r8, r2
 800d438:	46b9      	mov	r9, r7
 800d43a:	463c      	mov	r4, r7
 800d43c:	46ab      	mov	fp, r5
 800d43e:	b087      	sub	sp, #28
 800d440:	6801      	ldr	r1, [r0, #0]
 800d442:	9301      	str	r3, [sp, #4]
 800d444:	f846 5c04 	str.w	r5, [r6, #-4]
 800d448:	9502      	str	r5, [sp, #8]
 800d44a:	784a      	ldrb	r2, [r1, #1]
 800d44c:	1c4b      	adds	r3, r1, #1
 800d44e:	9303      	str	r3, [sp, #12]
 800d450:	b342      	cbz	r2, 800d4a4 <__hexnan+0x88>
 800d452:	4610      	mov	r0, r2
 800d454:	9105      	str	r1, [sp, #20]
 800d456:	9204      	str	r2, [sp, #16]
 800d458:	f7ff fd95 	bl	800cf86 <__hexdig_fun>
 800d45c:	2800      	cmp	r0, #0
 800d45e:	d151      	bne.n	800d504 <__hexnan+0xe8>
 800d460:	9a04      	ldr	r2, [sp, #16]
 800d462:	9905      	ldr	r1, [sp, #20]
 800d464:	2a20      	cmp	r2, #32
 800d466:	d818      	bhi.n	800d49a <__hexnan+0x7e>
 800d468:	9b02      	ldr	r3, [sp, #8]
 800d46a:	459b      	cmp	fp, r3
 800d46c:	dd13      	ble.n	800d496 <__hexnan+0x7a>
 800d46e:	454c      	cmp	r4, r9
 800d470:	d206      	bcs.n	800d480 <__hexnan+0x64>
 800d472:	2d07      	cmp	r5, #7
 800d474:	dc04      	bgt.n	800d480 <__hexnan+0x64>
 800d476:	462a      	mov	r2, r5
 800d478:	4649      	mov	r1, r9
 800d47a:	4620      	mov	r0, r4
 800d47c:	f7ff ffa8 	bl	800d3d0 <L_shift>
 800d480:	4544      	cmp	r4, r8
 800d482:	d952      	bls.n	800d52a <__hexnan+0x10e>
 800d484:	2300      	movs	r3, #0
 800d486:	f1a4 0904 	sub.w	r9, r4, #4
 800d48a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d48e:	461d      	mov	r5, r3
 800d490:	464c      	mov	r4, r9
 800d492:	f8cd b008 	str.w	fp, [sp, #8]
 800d496:	9903      	ldr	r1, [sp, #12]
 800d498:	e7d7      	b.n	800d44a <__hexnan+0x2e>
 800d49a:	2a29      	cmp	r2, #41	@ 0x29
 800d49c:	d157      	bne.n	800d54e <__hexnan+0x132>
 800d49e:	3102      	adds	r1, #2
 800d4a0:	f8ca 1000 	str.w	r1, [sl]
 800d4a4:	f1bb 0f00 	cmp.w	fp, #0
 800d4a8:	d051      	beq.n	800d54e <__hexnan+0x132>
 800d4aa:	454c      	cmp	r4, r9
 800d4ac:	d206      	bcs.n	800d4bc <__hexnan+0xa0>
 800d4ae:	2d07      	cmp	r5, #7
 800d4b0:	dc04      	bgt.n	800d4bc <__hexnan+0xa0>
 800d4b2:	462a      	mov	r2, r5
 800d4b4:	4649      	mov	r1, r9
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	f7ff ff8a 	bl	800d3d0 <L_shift>
 800d4bc:	4544      	cmp	r4, r8
 800d4be:	d936      	bls.n	800d52e <__hexnan+0x112>
 800d4c0:	4623      	mov	r3, r4
 800d4c2:	f1a8 0204 	sub.w	r2, r8, #4
 800d4c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800d4ca:	429f      	cmp	r7, r3
 800d4cc:	f842 1f04 	str.w	r1, [r2, #4]!
 800d4d0:	d2f9      	bcs.n	800d4c6 <__hexnan+0xaa>
 800d4d2:	1b3b      	subs	r3, r7, r4
 800d4d4:	f023 0303 	bic.w	r3, r3, #3
 800d4d8:	3304      	adds	r3, #4
 800d4da:	3401      	adds	r4, #1
 800d4dc:	3e03      	subs	r6, #3
 800d4de:	42b4      	cmp	r4, r6
 800d4e0:	bf88      	it	hi
 800d4e2:	2304      	movhi	r3, #4
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	4443      	add	r3, r8
 800d4e8:	f843 2b04 	str.w	r2, [r3], #4
 800d4ec:	429f      	cmp	r7, r3
 800d4ee:	d2fb      	bcs.n	800d4e8 <__hexnan+0xcc>
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	b91b      	cbnz	r3, 800d4fc <__hexnan+0xe0>
 800d4f4:	4547      	cmp	r7, r8
 800d4f6:	d128      	bne.n	800d54a <__hexnan+0x12e>
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	603b      	str	r3, [r7, #0]
 800d4fc:	2005      	movs	r0, #5
 800d4fe:	b007      	add	sp, #28
 800d500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d504:	3501      	adds	r5, #1
 800d506:	2d08      	cmp	r5, #8
 800d508:	f10b 0b01 	add.w	fp, fp, #1
 800d50c:	dd06      	ble.n	800d51c <__hexnan+0x100>
 800d50e:	4544      	cmp	r4, r8
 800d510:	d9c1      	bls.n	800d496 <__hexnan+0x7a>
 800d512:	2300      	movs	r3, #0
 800d514:	2501      	movs	r5, #1
 800d516:	f844 3c04 	str.w	r3, [r4, #-4]
 800d51a:	3c04      	subs	r4, #4
 800d51c:	6822      	ldr	r2, [r4, #0]
 800d51e:	f000 000f 	and.w	r0, r0, #15
 800d522:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d526:	6020      	str	r0, [r4, #0]
 800d528:	e7b5      	b.n	800d496 <__hexnan+0x7a>
 800d52a:	2508      	movs	r5, #8
 800d52c:	e7b3      	b.n	800d496 <__hexnan+0x7a>
 800d52e:	9b01      	ldr	r3, [sp, #4]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d0dd      	beq.n	800d4f0 <__hexnan+0xd4>
 800d534:	f04f 32ff 	mov.w	r2, #4294967295
 800d538:	f1c3 0320 	rsb	r3, r3, #32
 800d53c:	40da      	lsrs	r2, r3
 800d53e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d542:	4013      	ands	r3, r2
 800d544:	f846 3c04 	str.w	r3, [r6, #-4]
 800d548:	e7d2      	b.n	800d4f0 <__hexnan+0xd4>
 800d54a:	3f04      	subs	r7, #4
 800d54c:	e7d0      	b.n	800d4f0 <__hexnan+0xd4>
 800d54e:	2004      	movs	r0, #4
 800d550:	e7d5      	b.n	800d4fe <__hexnan+0xe2>

0800d552 <__ascii_mbtowc>:
 800d552:	b082      	sub	sp, #8
 800d554:	b901      	cbnz	r1, 800d558 <__ascii_mbtowc+0x6>
 800d556:	a901      	add	r1, sp, #4
 800d558:	b142      	cbz	r2, 800d56c <__ascii_mbtowc+0x1a>
 800d55a:	b14b      	cbz	r3, 800d570 <__ascii_mbtowc+0x1e>
 800d55c:	7813      	ldrb	r3, [r2, #0]
 800d55e:	600b      	str	r3, [r1, #0]
 800d560:	7812      	ldrb	r2, [r2, #0]
 800d562:	1e10      	subs	r0, r2, #0
 800d564:	bf18      	it	ne
 800d566:	2001      	movne	r0, #1
 800d568:	b002      	add	sp, #8
 800d56a:	4770      	bx	lr
 800d56c:	4610      	mov	r0, r2
 800d56e:	e7fb      	b.n	800d568 <__ascii_mbtowc+0x16>
 800d570:	f06f 0001 	mvn.w	r0, #1
 800d574:	e7f8      	b.n	800d568 <__ascii_mbtowc+0x16>
	...

0800d578 <_Balloc>:
 800d578:	b570      	push	{r4, r5, r6, lr}
 800d57a:	69c6      	ldr	r6, [r0, #28]
 800d57c:	4604      	mov	r4, r0
 800d57e:	460d      	mov	r5, r1
 800d580:	b976      	cbnz	r6, 800d5a0 <_Balloc+0x28>
 800d582:	2010      	movs	r0, #16
 800d584:	f7fc fcc0 	bl	8009f08 <malloc>
 800d588:	4602      	mov	r2, r0
 800d58a:	61e0      	str	r0, [r4, #28]
 800d58c:	b920      	cbnz	r0, 800d598 <_Balloc+0x20>
 800d58e:	216b      	movs	r1, #107	@ 0x6b
 800d590:	4b17      	ldr	r3, [pc, #92]	@ (800d5f0 <_Balloc+0x78>)
 800d592:	4818      	ldr	r0, [pc, #96]	@ (800d5f4 <_Balloc+0x7c>)
 800d594:	f001 f880 	bl	800e698 <__assert_func>
 800d598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d59c:	6006      	str	r6, [r0, #0]
 800d59e:	60c6      	str	r6, [r0, #12]
 800d5a0:	69e6      	ldr	r6, [r4, #28]
 800d5a2:	68f3      	ldr	r3, [r6, #12]
 800d5a4:	b183      	cbz	r3, 800d5c8 <_Balloc+0x50>
 800d5a6:	69e3      	ldr	r3, [r4, #28]
 800d5a8:	68db      	ldr	r3, [r3, #12]
 800d5aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d5ae:	b9b8      	cbnz	r0, 800d5e0 <_Balloc+0x68>
 800d5b0:	2101      	movs	r1, #1
 800d5b2:	fa01 f605 	lsl.w	r6, r1, r5
 800d5b6:	1d72      	adds	r2, r6, #5
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	0092      	lsls	r2, r2, #2
 800d5bc:	f001 f88a 	bl	800e6d4 <_calloc_r>
 800d5c0:	b160      	cbz	r0, 800d5dc <_Balloc+0x64>
 800d5c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d5c6:	e00e      	b.n	800d5e6 <_Balloc+0x6e>
 800d5c8:	2221      	movs	r2, #33	@ 0x21
 800d5ca:	2104      	movs	r1, #4
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	f001 f881 	bl	800e6d4 <_calloc_r>
 800d5d2:	69e3      	ldr	r3, [r4, #28]
 800d5d4:	60f0      	str	r0, [r6, #12]
 800d5d6:	68db      	ldr	r3, [r3, #12]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d1e4      	bne.n	800d5a6 <_Balloc+0x2e>
 800d5dc:	2000      	movs	r0, #0
 800d5de:	bd70      	pop	{r4, r5, r6, pc}
 800d5e0:	6802      	ldr	r2, [r0, #0]
 800d5e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d5ec:	e7f7      	b.n	800d5de <_Balloc+0x66>
 800d5ee:	bf00      	nop
 800d5f0:	0800f503 	.word	0x0800f503
 800d5f4:	0800f5e3 	.word	0x0800f5e3

0800d5f8 <_Bfree>:
 800d5f8:	b570      	push	{r4, r5, r6, lr}
 800d5fa:	69c6      	ldr	r6, [r0, #28]
 800d5fc:	4605      	mov	r5, r0
 800d5fe:	460c      	mov	r4, r1
 800d600:	b976      	cbnz	r6, 800d620 <_Bfree+0x28>
 800d602:	2010      	movs	r0, #16
 800d604:	f7fc fc80 	bl	8009f08 <malloc>
 800d608:	4602      	mov	r2, r0
 800d60a:	61e8      	str	r0, [r5, #28]
 800d60c:	b920      	cbnz	r0, 800d618 <_Bfree+0x20>
 800d60e:	218f      	movs	r1, #143	@ 0x8f
 800d610:	4b08      	ldr	r3, [pc, #32]	@ (800d634 <_Bfree+0x3c>)
 800d612:	4809      	ldr	r0, [pc, #36]	@ (800d638 <_Bfree+0x40>)
 800d614:	f001 f840 	bl	800e698 <__assert_func>
 800d618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d61c:	6006      	str	r6, [r0, #0]
 800d61e:	60c6      	str	r6, [r0, #12]
 800d620:	b13c      	cbz	r4, 800d632 <_Bfree+0x3a>
 800d622:	69eb      	ldr	r3, [r5, #28]
 800d624:	6862      	ldr	r2, [r4, #4]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d62c:	6021      	str	r1, [r4, #0]
 800d62e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d632:	bd70      	pop	{r4, r5, r6, pc}
 800d634:	0800f503 	.word	0x0800f503
 800d638:	0800f5e3 	.word	0x0800f5e3

0800d63c <__multadd>:
 800d63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d640:	4607      	mov	r7, r0
 800d642:	460c      	mov	r4, r1
 800d644:	461e      	mov	r6, r3
 800d646:	2000      	movs	r0, #0
 800d648:	690d      	ldr	r5, [r1, #16]
 800d64a:	f101 0c14 	add.w	ip, r1, #20
 800d64e:	f8dc 3000 	ldr.w	r3, [ip]
 800d652:	3001      	adds	r0, #1
 800d654:	b299      	uxth	r1, r3
 800d656:	fb02 6101 	mla	r1, r2, r1, r6
 800d65a:	0c1e      	lsrs	r6, r3, #16
 800d65c:	0c0b      	lsrs	r3, r1, #16
 800d65e:	fb02 3306 	mla	r3, r2, r6, r3
 800d662:	b289      	uxth	r1, r1
 800d664:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d668:	4285      	cmp	r5, r0
 800d66a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d66e:	f84c 1b04 	str.w	r1, [ip], #4
 800d672:	dcec      	bgt.n	800d64e <__multadd+0x12>
 800d674:	b30e      	cbz	r6, 800d6ba <__multadd+0x7e>
 800d676:	68a3      	ldr	r3, [r4, #8]
 800d678:	42ab      	cmp	r3, r5
 800d67a:	dc19      	bgt.n	800d6b0 <__multadd+0x74>
 800d67c:	6861      	ldr	r1, [r4, #4]
 800d67e:	4638      	mov	r0, r7
 800d680:	3101      	adds	r1, #1
 800d682:	f7ff ff79 	bl	800d578 <_Balloc>
 800d686:	4680      	mov	r8, r0
 800d688:	b928      	cbnz	r0, 800d696 <__multadd+0x5a>
 800d68a:	4602      	mov	r2, r0
 800d68c:	21ba      	movs	r1, #186	@ 0xba
 800d68e:	4b0c      	ldr	r3, [pc, #48]	@ (800d6c0 <__multadd+0x84>)
 800d690:	480c      	ldr	r0, [pc, #48]	@ (800d6c4 <__multadd+0x88>)
 800d692:	f001 f801 	bl	800e698 <__assert_func>
 800d696:	6922      	ldr	r2, [r4, #16]
 800d698:	f104 010c 	add.w	r1, r4, #12
 800d69c:	3202      	adds	r2, #2
 800d69e:	0092      	lsls	r2, r2, #2
 800d6a0:	300c      	adds	r0, #12
 800d6a2:	f7fe fd6c 	bl	800c17e <memcpy>
 800d6a6:	4621      	mov	r1, r4
 800d6a8:	4638      	mov	r0, r7
 800d6aa:	f7ff ffa5 	bl	800d5f8 <_Bfree>
 800d6ae:	4644      	mov	r4, r8
 800d6b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d6b4:	3501      	adds	r5, #1
 800d6b6:	615e      	str	r6, [r3, #20]
 800d6b8:	6125      	str	r5, [r4, #16]
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6c0:	0800f572 	.word	0x0800f572
 800d6c4:	0800f5e3 	.word	0x0800f5e3

0800d6c8 <__s2b>:
 800d6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6cc:	4615      	mov	r5, r2
 800d6ce:	2209      	movs	r2, #9
 800d6d0:	461f      	mov	r7, r3
 800d6d2:	3308      	adds	r3, #8
 800d6d4:	460c      	mov	r4, r1
 800d6d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800d6da:	4606      	mov	r6, r0
 800d6dc:	2201      	movs	r2, #1
 800d6de:	2100      	movs	r1, #0
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	db09      	blt.n	800d6f8 <__s2b+0x30>
 800d6e4:	4630      	mov	r0, r6
 800d6e6:	f7ff ff47 	bl	800d578 <_Balloc>
 800d6ea:	b940      	cbnz	r0, 800d6fe <__s2b+0x36>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	21d3      	movs	r1, #211	@ 0xd3
 800d6f0:	4b18      	ldr	r3, [pc, #96]	@ (800d754 <__s2b+0x8c>)
 800d6f2:	4819      	ldr	r0, [pc, #100]	@ (800d758 <__s2b+0x90>)
 800d6f4:	f000 ffd0 	bl	800e698 <__assert_func>
 800d6f8:	0052      	lsls	r2, r2, #1
 800d6fa:	3101      	adds	r1, #1
 800d6fc:	e7f0      	b.n	800d6e0 <__s2b+0x18>
 800d6fe:	9b08      	ldr	r3, [sp, #32]
 800d700:	2d09      	cmp	r5, #9
 800d702:	6143      	str	r3, [r0, #20]
 800d704:	f04f 0301 	mov.w	r3, #1
 800d708:	6103      	str	r3, [r0, #16]
 800d70a:	dd16      	ble.n	800d73a <__s2b+0x72>
 800d70c:	f104 0909 	add.w	r9, r4, #9
 800d710:	46c8      	mov	r8, r9
 800d712:	442c      	add	r4, r5
 800d714:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d718:	4601      	mov	r1, r0
 800d71a:	220a      	movs	r2, #10
 800d71c:	4630      	mov	r0, r6
 800d71e:	3b30      	subs	r3, #48	@ 0x30
 800d720:	f7ff ff8c 	bl	800d63c <__multadd>
 800d724:	45a0      	cmp	r8, r4
 800d726:	d1f5      	bne.n	800d714 <__s2b+0x4c>
 800d728:	f1a5 0408 	sub.w	r4, r5, #8
 800d72c:	444c      	add	r4, r9
 800d72e:	1b2d      	subs	r5, r5, r4
 800d730:	1963      	adds	r3, r4, r5
 800d732:	42bb      	cmp	r3, r7
 800d734:	db04      	blt.n	800d740 <__s2b+0x78>
 800d736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d73a:	2509      	movs	r5, #9
 800d73c:	340a      	adds	r4, #10
 800d73e:	e7f6      	b.n	800d72e <__s2b+0x66>
 800d740:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d744:	4601      	mov	r1, r0
 800d746:	220a      	movs	r2, #10
 800d748:	4630      	mov	r0, r6
 800d74a:	3b30      	subs	r3, #48	@ 0x30
 800d74c:	f7ff ff76 	bl	800d63c <__multadd>
 800d750:	e7ee      	b.n	800d730 <__s2b+0x68>
 800d752:	bf00      	nop
 800d754:	0800f572 	.word	0x0800f572
 800d758:	0800f5e3 	.word	0x0800f5e3

0800d75c <__hi0bits>:
 800d75c:	4603      	mov	r3, r0
 800d75e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d762:	bf3a      	itte	cc
 800d764:	0403      	lslcc	r3, r0, #16
 800d766:	2010      	movcc	r0, #16
 800d768:	2000      	movcs	r0, #0
 800d76a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d76e:	bf3c      	itt	cc
 800d770:	021b      	lslcc	r3, r3, #8
 800d772:	3008      	addcc	r0, #8
 800d774:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d778:	bf3c      	itt	cc
 800d77a:	011b      	lslcc	r3, r3, #4
 800d77c:	3004      	addcc	r0, #4
 800d77e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d782:	bf3c      	itt	cc
 800d784:	009b      	lslcc	r3, r3, #2
 800d786:	3002      	addcc	r0, #2
 800d788:	2b00      	cmp	r3, #0
 800d78a:	db05      	blt.n	800d798 <__hi0bits+0x3c>
 800d78c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d790:	f100 0001 	add.w	r0, r0, #1
 800d794:	bf08      	it	eq
 800d796:	2020      	moveq	r0, #32
 800d798:	4770      	bx	lr

0800d79a <__lo0bits>:
 800d79a:	6803      	ldr	r3, [r0, #0]
 800d79c:	4602      	mov	r2, r0
 800d79e:	f013 0007 	ands.w	r0, r3, #7
 800d7a2:	d00b      	beq.n	800d7bc <__lo0bits+0x22>
 800d7a4:	07d9      	lsls	r1, r3, #31
 800d7a6:	d421      	bmi.n	800d7ec <__lo0bits+0x52>
 800d7a8:	0798      	lsls	r0, r3, #30
 800d7aa:	bf49      	itett	mi
 800d7ac:	085b      	lsrmi	r3, r3, #1
 800d7ae:	089b      	lsrpl	r3, r3, #2
 800d7b0:	2001      	movmi	r0, #1
 800d7b2:	6013      	strmi	r3, [r2, #0]
 800d7b4:	bf5c      	itt	pl
 800d7b6:	2002      	movpl	r0, #2
 800d7b8:	6013      	strpl	r3, [r2, #0]
 800d7ba:	4770      	bx	lr
 800d7bc:	b299      	uxth	r1, r3
 800d7be:	b909      	cbnz	r1, 800d7c4 <__lo0bits+0x2a>
 800d7c0:	2010      	movs	r0, #16
 800d7c2:	0c1b      	lsrs	r3, r3, #16
 800d7c4:	b2d9      	uxtb	r1, r3
 800d7c6:	b909      	cbnz	r1, 800d7cc <__lo0bits+0x32>
 800d7c8:	3008      	adds	r0, #8
 800d7ca:	0a1b      	lsrs	r3, r3, #8
 800d7cc:	0719      	lsls	r1, r3, #28
 800d7ce:	bf04      	itt	eq
 800d7d0:	091b      	lsreq	r3, r3, #4
 800d7d2:	3004      	addeq	r0, #4
 800d7d4:	0799      	lsls	r1, r3, #30
 800d7d6:	bf04      	itt	eq
 800d7d8:	089b      	lsreq	r3, r3, #2
 800d7da:	3002      	addeq	r0, #2
 800d7dc:	07d9      	lsls	r1, r3, #31
 800d7de:	d403      	bmi.n	800d7e8 <__lo0bits+0x4e>
 800d7e0:	085b      	lsrs	r3, r3, #1
 800d7e2:	f100 0001 	add.w	r0, r0, #1
 800d7e6:	d003      	beq.n	800d7f0 <__lo0bits+0x56>
 800d7e8:	6013      	str	r3, [r2, #0]
 800d7ea:	4770      	bx	lr
 800d7ec:	2000      	movs	r0, #0
 800d7ee:	4770      	bx	lr
 800d7f0:	2020      	movs	r0, #32
 800d7f2:	4770      	bx	lr

0800d7f4 <__i2b>:
 800d7f4:	b510      	push	{r4, lr}
 800d7f6:	460c      	mov	r4, r1
 800d7f8:	2101      	movs	r1, #1
 800d7fa:	f7ff febd 	bl	800d578 <_Balloc>
 800d7fe:	4602      	mov	r2, r0
 800d800:	b928      	cbnz	r0, 800d80e <__i2b+0x1a>
 800d802:	f240 1145 	movw	r1, #325	@ 0x145
 800d806:	4b04      	ldr	r3, [pc, #16]	@ (800d818 <__i2b+0x24>)
 800d808:	4804      	ldr	r0, [pc, #16]	@ (800d81c <__i2b+0x28>)
 800d80a:	f000 ff45 	bl	800e698 <__assert_func>
 800d80e:	2301      	movs	r3, #1
 800d810:	6144      	str	r4, [r0, #20]
 800d812:	6103      	str	r3, [r0, #16]
 800d814:	bd10      	pop	{r4, pc}
 800d816:	bf00      	nop
 800d818:	0800f572 	.word	0x0800f572
 800d81c:	0800f5e3 	.word	0x0800f5e3

0800d820 <__multiply>:
 800d820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d824:	4614      	mov	r4, r2
 800d826:	690a      	ldr	r2, [r1, #16]
 800d828:	6923      	ldr	r3, [r4, #16]
 800d82a:	460f      	mov	r7, r1
 800d82c:	429a      	cmp	r2, r3
 800d82e:	bfa2      	ittt	ge
 800d830:	4623      	movge	r3, r4
 800d832:	460c      	movge	r4, r1
 800d834:	461f      	movge	r7, r3
 800d836:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d83a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d83e:	68a3      	ldr	r3, [r4, #8]
 800d840:	6861      	ldr	r1, [r4, #4]
 800d842:	eb0a 0609 	add.w	r6, sl, r9
 800d846:	42b3      	cmp	r3, r6
 800d848:	b085      	sub	sp, #20
 800d84a:	bfb8      	it	lt
 800d84c:	3101      	addlt	r1, #1
 800d84e:	f7ff fe93 	bl	800d578 <_Balloc>
 800d852:	b930      	cbnz	r0, 800d862 <__multiply+0x42>
 800d854:	4602      	mov	r2, r0
 800d856:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d85a:	4b43      	ldr	r3, [pc, #268]	@ (800d968 <__multiply+0x148>)
 800d85c:	4843      	ldr	r0, [pc, #268]	@ (800d96c <__multiply+0x14c>)
 800d85e:	f000 ff1b 	bl	800e698 <__assert_func>
 800d862:	f100 0514 	add.w	r5, r0, #20
 800d866:	462b      	mov	r3, r5
 800d868:	2200      	movs	r2, #0
 800d86a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d86e:	4543      	cmp	r3, r8
 800d870:	d321      	bcc.n	800d8b6 <__multiply+0x96>
 800d872:	f107 0114 	add.w	r1, r7, #20
 800d876:	f104 0214 	add.w	r2, r4, #20
 800d87a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d87e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d882:	9302      	str	r3, [sp, #8]
 800d884:	1b13      	subs	r3, r2, r4
 800d886:	3b15      	subs	r3, #21
 800d888:	f023 0303 	bic.w	r3, r3, #3
 800d88c:	3304      	adds	r3, #4
 800d88e:	f104 0715 	add.w	r7, r4, #21
 800d892:	42ba      	cmp	r2, r7
 800d894:	bf38      	it	cc
 800d896:	2304      	movcc	r3, #4
 800d898:	9301      	str	r3, [sp, #4]
 800d89a:	9b02      	ldr	r3, [sp, #8]
 800d89c:	9103      	str	r1, [sp, #12]
 800d89e:	428b      	cmp	r3, r1
 800d8a0:	d80c      	bhi.n	800d8bc <__multiply+0x9c>
 800d8a2:	2e00      	cmp	r6, #0
 800d8a4:	dd03      	ble.n	800d8ae <__multiply+0x8e>
 800d8a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d05a      	beq.n	800d964 <__multiply+0x144>
 800d8ae:	6106      	str	r6, [r0, #16]
 800d8b0:	b005      	add	sp, #20
 800d8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8b6:	f843 2b04 	str.w	r2, [r3], #4
 800d8ba:	e7d8      	b.n	800d86e <__multiply+0x4e>
 800d8bc:	f8b1 a000 	ldrh.w	sl, [r1]
 800d8c0:	f1ba 0f00 	cmp.w	sl, #0
 800d8c4:	d023      	beq.n	800d90e <__multiply+0xee>
 800d8c6:	46a9      	mov	r9, r5
 800d8c8:	f04f 0c00 	mov.w	ip, #0
 800d8cc:	f104 0e14 	add.w	lr, r4, #20
 800d8d0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d8d4:	f8d9 3000 	ldr.w	r3, [r9]
 800d8d8:	fa1f fb87 	uxth.w	fp, r7
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	fb0a 330b 	mla	r3, sl, fp, r3
 800d8e2:	4463      	add	r3, ip
 800d8e4:	f8d9 c000 	ldr.w	ip, [r9]
 800d8e8:	0c3f      	lsrs	r7, r7, #16
 800d8ea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d8ee:	fb0a c707 	mla	r7, sl, r7, ip
 800d8f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d8fc:	4572      	cmp	r2, lr
 800d8fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d902:	f849 3b04 	str.w	r3, [r9], #4
 800d906:	d8e3      	bhi.n	800d8d0 <__multiply+0xb0>
 800d908:	9b01      	ldr	r3, [sp, #4]
 800d90a:	f845 c003 	str.w	ip, [r5, r3]
 800d90e:	9b03      	ldr	r3, [sp, #12]
 800d910:	3104      	adds	r1, #4
 800d912:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d916:	f1b9 0f00 	cmp.w	r9, #0
 800d91a:	d021      	beq.n	800d960 <__multiply+0x140>
 800d91c:	46ae      	mov	lr, r5
 800d91e:	f04f 0a00 	mov.w	sl, #0
 800d922:	682b      	ldr	r3, [r5, #0]
 800d924:	f104 0c14 	add.w	ip, r4, #20
 800d928:	f8bc b000 	ldrh.w	fp, [ip]
 800d92c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d930:	b29b      	uxth	r3, r3
 800d932:	fb09 770b 	mla	r7, r9, fp, r7
 800d936:	4457      	add	r7, sl
 800d938:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d93c:	f84e 3b04 	str.w	r3, [lr], #4
 800d940:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d944:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d948:	f8be 3000 	ldrh.w	r3, [lr]
 800d94c:	4562      	cmp	r2, ip
 800d94e:	fb09 330a 	mla	r3, r9, sl, r3
 800d952:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d956:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d95a:	d8e5      	bhi.n	800d928 <__multiply+0x108>
 800d95c:	9f01      	ldr	r7, [sp, #4]
 800d95e:	51eb      	str	r3, [r5, r7]
 800d960:	3504      	adds	r5, #4
 800d962:	e79a      	b.n	800d89a <__multiply+0x7a>
 800d964:	3e01      	subs	r6, #1
 800d966:	e79c      	b.n	800d8a2 <__multiply+0x82>
 800d968:	0800f572 	.word	0x0800f572
 800d96c:	0800f5e3 	.word	0x0800f5e3

0800d970 <__pow5mult>:
 800d970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d974:	4615      	mov	r5, r2
 800d976:	f012 0203 	ands.w	r2, r2, #3
 800d97a:	4607      	mov	r7, r0
 800d97c:	460e      	mov	r6, r1
 800d97e:	d007      	beq.n	800d990 <__pow5mult+0x20>
 800d980:	4c25      	ldr	r4, [pc, #148]	@ (800da18 <__pow5mult+0xa8>)
 800d982:	3a01      	subs	r2, #1
 800d984:	2300      	movs	r3, #0
 800d986:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d98a:	f7ff fe57 	bl	800d63c <__multadd>
 800d98e:	4606      	mov	r6, r0
 800d990:	10ad      	asrs	r5, r5, #2
 800d992:	d03d      	beq.n	800da10 <__pow5mult+0xa0>
 800d994:	69fc      	ldr	r4, [r7, #28]
 800d996:	b97c      	cbnz	r4, 800d9b8 <__pow5mult+0x48>
 800d998:	2010      	movs	r0, #16
 800d99a:	f7fc fab5 	bl	8009f08 <malloc>
 800d99e:	4602      	mov	r2, r0
 800d9a0:	61f8      	str	r0, [r7, #28]
 800d9a2:	b928      	cbnz	r0, 800d9b0 <__pow5mult+0x40>
 800d9a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d9a8:	4b1c      	ldr	r3, [pc, #112]	@ (800da1c <__pow5mult+0xac>)
 800d9aa:	481d      	ldr	r0, [pc, #116]	@ (800da20 <__pow5mult+0xb0>)
 800d9ac:	f000 fe74 	bl	800e698 <__assert_func>
 800d9b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d9b4:	6004      	str	r4, [r0, #0]
 800d9b6:	60c4      	str	r4, [r0, #12]
 800d9b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d9bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d9c0:	b94c      	cbnz	r4, 800d9d6 <__pow5mult+0x66>
 800d9c2:	f240 2171 	movw	r1, #625	@ 0x271
 800d9c6:	4638      	mov	r0, r7
 800d9c8:	f7ff ff14 	bl	800d7f4 <__i2b>
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	f8c8 0008 	str.w	r0, [r8, #8]
 800d9d4:	6003      	str	r3, [r0, #0]
 800d9d6:	f04f 0900 	mov.w	r9, #0
 800d9da:	07eb      	lsls	r3, r5, #31
 800d9dc:	d50a      	bpl.n	800d9f4 <__pow5mult+0x84>
 800d9de:	4631      	mov	r1, r6
 800d9e0:	4622      	mov	r2, r4
 800d9e2:	4638      	mov	r0, r7
 800d9e4:	f7ff ff1c 	bl	800d820 <__multiply>
 800d9e8:	4680      	mov	r8, r0
 800d9ea:	4631      	mov	r1, r6
 800d9ec:	4638      	mov	r0, r7
 800d9ee:	f7ff fe03 	bl	800d5f8 <_Bfree>
 800d9f2:	4646      	mov	r6, r8
 800d9f4:	106d      	asrs	r5, r5, #1
 800d9f6:	d00b      	beq.n	800da10 <__pow5mult+0xa0>
 800d9f8:	6820      	ldr	r0, [r4, #0]
 800d9fa:	b938      	cbnz	r0, 800da0c <__pow5mult+0x9c>
 800d9fc:	4622      	mov	r2, r4
 800d9fe:	4621      	mov	r1, r4
 800da00:	4638      	mov	r0, r7
 800da02:	f7ff ff0d 	bl	800d820 <__multiply>
 800da06:	6020      	str	r0, [r4, #0]
 800da08:	f8c0 9000 	str.w	r9, [r0]
 800da0c:	4604      	mov	r4, r0
 800da0e:	e7e4      	b.n	800d9da <__pow5mult+0x6a>
 800da10:	4630      	mov	r0, r6
 800da12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da16:	bf00      	nop
 800da18:	0800f63c 	.word	0x0800f63c
 800da1c:	0800f503 	.word	0x0800f503
 800da20:	0800f5e3 	.word	0x0800f5e3

0800da24 <__lshift>:
 800da24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da28:	460c      	mov	r4, r1
 800da2a:	4607      	mov	r7, r0
 800da2c:	4691      	mov	r9, r2
 800da2e:	6923      	ldr	r3, [r4, #16]
 800da30:	6849      	ldr	r1, [r1, #4]
 800da32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da36:	68a3      	ldr	r3, [r4, #8]
 800da38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da3c:	f108 0601 	add.w	r6, r8, #1
 800da40:	42b3      	cmp	r3, r6
 800da42:	db0b      	blt.n	800da5c <__lshift+0x38>
 800da44:	4638      	mov	r0, r7
 800da46:	f7ff fd97 	bl	800d578 <_Balloc>
 800da4a:	4605      	mov	r5, r0
 800da4c:	b948      	cbnz	r0, 800da62 <__lshift+0x3e>
 800da4e:	4602      	mov	r2, r0
 800da50:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800da54:	4b27      	ldr	r3, [pc, #156]	@ (800daf4 <__lshift+0xd0>)
 800da56:	4828      	ldr	r0, [pc, #160]	@ (800daf8 <__lshift+0xd4>)
 800da58:	f000 fe1e 	bl	800e698 <__assert_func>
 800da5c:	3101      	adds	r1, #1
 800da5e:	005b      	lsls	r3, r3, #1
 800da60:	e7ee      	b.n	800da40 <__lshift+0x1c>
 800da62:	2300      	movs	r3, #0
 800da64:	f100 0114 	add.w	r1, r0, #20
 800da68:	f100 0210 	add.w	r2, r0, #16
 800da6c:	4618      	mov	r0, r3
 800da6e:	4553      	cmp	r3, sl
 800da70:	db33      	blt.n	800dada <__lshift+0xb6>
 800da72:	6920      	ldr	r0, [r4, #16]
 800da74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da78:	f104 0314 	add.w	r3, r4, #20
 800da7c:	f019 091f 	ands.w	r9, r9, #31
 800da80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800da84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800da88:	d02b      	beq.n	800dae2 <__lshift+0xbe>
 800da8a:	468a      	mov	sl, r1
 800da8c:	2200      	movs	r2, #0
 800da8e:	f1c9 0e20 	rsb	lr, r9, #32
 800da92:	6818      	ldr	r0, [r3, #0]
 800da94:	fa00 f009 	lsl.w	r0, r0, r9
 800da98:	4310      	orrs	r0, r2
 800da9a:	f84a 0b04 	str.w	r0, [sl], #4
 800da9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800daa2:	459c      	cmp	ip, r3
 800daa4:	fa22 f20e 	lsr.w	r2, r2, lr
 800daa8:	d8f3      	bhi.n	800da92 <__lshift+0x6e>
 800daaa:	ebac 0304 	sub.w	r3, ip, r4
 800daae:	3b15      	subs	r3, #21
 800dab0:	f023 0303 	bic.w	r3, r3, #3
 800dab4:	3304      	adds	r3, #4
 800dab6:	f104 0015 	add.w	r0, r4, #21
 800daba:	4584      	cmp	ip, r0
 800dabc:	bf38      	it	cc
 800dabe:	2304      	movcc	r3, #4
 800dac0:	50ca      	str	r2, [r1, r3]
 800dac2:	b10a      	cbz	r2, 800dac8 <__lshift+0xa4>
 800dac4:	f108 0602 	add.w	r6, r8, #2
 800dac8:	3e01      	subs	r6, #1
 800daca:	4638      	mov	r0, r7
 800dacc:	4621      	mov	r1, r4
 800dace:	612e      	str	r6, [r5, #16]
 800dad0:	f7ff fd92 	bl	800d5f8 <_Bfree>
 800dad4:	4628      	mov	r0, r5
 800dad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dada:	f842 0f04 	str.w	r0, [r2, #4]!
 800dade:	3301      	adds	r3, #1
 800dae0:	e7c5      	b.n	800da6e <__lshift+0x4a>
 800dae2:	3904      	subs	r1, #4
 800dae4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dae8:	459c      	cmp	ip, r3
 800daea:	f841 2f04 	str.w	r2, [r1, #4]!
 800daee:	d8f9      	bhi.n	800dae4 <__lshift+0xc0>
 800daf0:	e7ea      	b.n	800dac8 <__lshift+0xa4>
 800daf2:	bf00      	nop
 800daf4:	0800f572 	.word	0x0800f572
 800daf8:	0800f5e3 	.word	0x0800f5e3

0800dafc <__mcmp>:
 800dafc:	4603      	mov	r3, r0
 800dafe:	690a      	ldr	r2, [r1, #16]
 800db00:	6900      	ldr	r0, [r0, #16]
 800db02:	b530      	push	{r4, r5, lr}
 800db04:	1a80      	subs	r0, r0, r2
 800db06:	d10e      	bne.n	800db26 <__mcmp+0x2a>
 800db08:	3314      	adds	r3, #20
 800db0a:	3114      	adds	r1, #20
 800db0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800db10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800db14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800db18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800db1c:	4295      	cmp	r5, r2
 800db1e:	d003      	beq.n	800db28 <__mcmp+0x2c>
 800db20:	d205      	bcs.n	800db2e <__mcmp+0x32>
 800db22:	f04f 30ff 	mov.w	r0, #4294967295
 800db26:	bd30      	pop	{r4, r5, pc}
 800db28:	42a3      	cmp	r3, r4
 800db2a:	d3f3      	bcc.n	800db14 <__mcmp+0x18>
 800db2c:	e7fb      	b.n	800db26 <__mcmp+0x2a>
 800db2e:	2001      	movs	r0, #1
 800db30:	e7f9      	b.n	800db26 <__mcmp+0x2a>
	...

0800db34 <__mdiff>:
 800db34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db38:	4689      	mov	r9, r1
 800db3a:	4606      	mov	r6, r0
 800db3c:	4611      	mov	r1, r2
 800db3e:	4648      	mov	r0, r9
 800db40:	4614      	mov	r4, r2
 800db42:	f7ff ffdb 	bl	800dafc <__mcmp>
 800db46:	1e05      	subs	r5, r0, #0
 800db48:	d112      	bne.n	800db70 <__mdiff+0x3c>
 800db4a:	4629      	mov	r1, r5
 800db4c:	4630      	mov	r0, r6
 800db4e:	f7ff fd13 	bl	800d578 <_Balloc>
 800db52:	4602      	mov	r2, r0
 800db54:	b928      	cbnz	r0, 800db62 <__mdiff+0x2e>
 800db56:	f240 2137 	movw	r1, #567	@ 0x237
 800db5a:	4b3e      	ldr	r3, [pc, #248]	@ (800dc54 <__mdiff+0x120>)
 800db5c:	483e      	ldr	r0, [pc, #248]	@ (800dc58 <__mdiff+0x124>)
 800db5e:	f000 fd9b 	bl	800e698 <__assert_func>
 800db62:	2301      	movs	r3, #1
 800db64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db68:	4610      	mov	r0, r2
 800db6a:	b003      	add	sp, #12
 800db6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db70:	bfbc      	itt	lt
 800db72:	464b      	movlt	r3, r9
 800db74:	46a1      	movlt	r9, r4
 800db76:	4630      	mov	r0, r6
 800db78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800db7c:	bfba      	itte	lt
 800db7e:	461c      	movlt	r4, r3
 800db80:	2501      	movlt	r5, #1
 800db82:	2500      	movge	r5, #0
 800db84:	f7ff fcf8 	bl	800d578 <_Balloc>
 800db88:	4602      	mov	r2, r0
 800db8a:	b918      	cbnz	r0, 800db94 <__mdiff+0x60>
 800db8c:	f240 2145 	movw	r1, #581	@ 0x245
 800db90:	4b30      	ldr	r3, [pc, #192]	@ (800dc54 <__mdiff+0x120>)
 800db92:	e7e3      	b.n	800db5c <__mdiff+0x28>
 800db94:	f100 0b14 	add.w	fp, r0, #20
 800db98:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800db9c:	f109 0310 	add.w	r3, r9, #16
 800dba0:	60c5      	str	r5, [r0, #12]
 800dba2:	f04f 0c00 	mov.w	ip, #0
 800dba6:	f109 0514 	add.w	r5, r9, #20
 800dbaa:	46d9      	mov	r9, fp
 800dbac:	6926      	ldr	r6, [r4, #16]
 800dbae:	f104 0e14 	add.w	lr, r4, #20
 800dbb2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dbb6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dbba:	9301      	str	r3, [sp, #4]
 800dbbc:	9b01      	ldr	r3, [sp, #4]
 800dbbe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dbc2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dbc6:	b281      	uxth	r1, r0
 800dbc8:	9301      	str	r3, [sp, #4]
 800dbca:	fa1f f38a 	uxth.w	r3, sl
 800dbce:	1a5b      	subs	r3, r3, r1
 800dbd0:	0c00      	lsrs	r0, r0, #16
 800dbd2:	4463      	add	r3, ip
 800dbd4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dbd8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dbdc:	b29b      	uxth	r3, r3
 800dbde:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dbe2:	4576      	cmp	r6, lr
 800dbe4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dbe8:	f849 3b04 	str.w	r3, [r9], #4
 800dbec:	d8e6      	bhi.n	800dbbc <__mdiff+0x88>
 800dbee:	1b33      	subs	r3, r6, r4
 800dbf0:	3b15      	subs	r3, #21
 800dbf2:	f023 0303 	bic.w	r3, r3, #3
 800dbf6:	3415      	adds	r4, #21
 800dbf8:	3304      	adds	r3, #4
 800dbfa:	42a6      	cmp	r6, r4
 800dbfc:	bf38      	it	cc
 800dbfe:	2304      	movcc	r3, #4
 800dc00:	441d      	add	r5, r3
 800dc02:	445b      	add	r3, fp
 800dc04:	461e      	mov	r6, r3
 800dc06:	462c      	mov	r4, r5
 800dc08:	4544      	cmp	r4, r8
 800dc0a:	d30e      	bcc.n	800dc2a <__mdiff+0xf6>
 800dc0c:	f108 0103 	add.w	r1, r8, #3
 800dc10:	1b49      	subs	r1, r1, r5
 800dc12:	f021 0103 	bic.w	r1, r1, #3
 800dc16:	3d03      	subs	r5, #3
 800dc18:	45a8      	cmp	r8, r5
 800dc1a:	bf38      	it	cc
 800dc1c:	2100      	movcc	r1, #0
 800dc1e:	440b      	add	r3, r1
 800dc20:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dc24:	b199      	cbz	r1, 800dc4e <__mdiff+0x11a>
 800dc26:	6117      	str	r7, [r2, #16]
 800dc28:	e79e      	b.n	800db68 <__mdiff+0x34>
 800dc2a:	46e6      	mov	lr, ip
 800dc2c:	f854 1b04 	ldr.w	r1, [r4], #4
 800dc30:	fa1f fc81 	uxth.w	ip, r1
 800dc34:	44f4      	add	ip, lr
 800dc36:	0c08      	lsrs	r0, r1, #16
 800dc38:	4471      	add	r1, lr
 800dc3a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dc3e:	b289      	uxth	r1, r1
 800dc40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dc44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dc48:	f846 1b04 	str.w	r1, [r6], #4
 800dc4c:	e7dc      	b.n	800dc08 <__mdiff+0xd4>
 800dc4e:	3f01      	subs	r7, #1
 800dc50:	e7e6      	b.n	800dc20 <__mdiff+0xec>
 800dc52:	bf00      	nop
 800dc54:	0800f572 	.word	0x0800f572
 800dc58:	0800f5e3 	.word	0x0800f5e3

0800dc5c <__ulp>:
 800dc5c:	4b0e      	ldr	r3, [pc, #56]	@ (800dc98 <__ulp+0x3c>)
 800dc5e:	400b      	ands	r3, r1
 800dc60:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	dc08      	bgt.n	800dc7a <__ulp+0x1e>
 800dc68:	425b      	negs	r3, r3
 800dc6a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800dc6e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dc72:	da04      	bge.n	800dc7e <__ulp+0x22>
 800dc74:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800dc78:	4113      	asrs	r3, r2
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	e008      	b.n	800dc90 <__ulp+0x34>
 800dc7e:	f1a2 0314 	sub.w	r3, r2, #20
 800dc82:	2b1e      	cmp	r3, #30
 800dc84:	bfd6      	itet	le
 800dc86:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800dc8a:	2201      	movgt	r2, #1
 800dc8c:	40da      	lsrle	r2, r3
 800dc8e:	2300      	movs	r3, #0
 800dc90:	4619      	mov	r1, r3
 800dc92:	4610      	mov	r0, r2
 800dc94:	4770      	bx	lr
 800dc96:	bf00      	nop
 800dc98:	7ff00000 	.word	0x7ff00000

0800dc9c <__b2d>:
 800dc9c:	6902      	ldr	r2, [r0, #16]
 800dc9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dca0:	f100 0614 	add.w	r6, r0, #20
 800dca4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800dca8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800dcac:	4f1e      	ldr	r7, [pc, #120]	@ (800dd28 <__b2d+0x8c>)
 800dcae:	4620      	mov	r0, r4
 800dcb0:	f7ff fd54 	bl	800d75c <__hi0bits>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	f1c0 0020 	rsb	r0, r0, #32
 800dcba:	2b0a      	cmp	r3, #10
 800dcbc:	f1a2 0504 	sub.w	r5, r2, #4
 800dcc0:	6008      	str	r0, [r1, #0]
 800dcc2:	dc12      	bgt.n	800dcea <__b2d+0x4e>
 800dcc4:	42ae      	cmp	r6, r5
 800dcc6:	bf2c      	ite	cs
 800dcc8:	2200      	movcs	r2, #0
 800dcca:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800dcce:	f1c3 0c0b 	rsb	ip, r3, #11
 800dcd2:	3315      	adds	r3, #21
 800dcd4:	fa24 fe0c 	lsr.w	lr, r4, ip
 800dcd8:	fa04 f303 	lsl.w	r3, r4, r3
 800dcdc:	fa22 f20c 	lsr.w	r2, r2, ip
 800dce0:	ea4e 0107 	orr.w	r1, lr, r7
 800dce4:	431a      	orrs	r2, r3
 800dce6:	4610      	mov	r0, r2
 800dce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcea:	42ae      	cmp	r6, r5
 800dcec:	bf36      	itet	cc
 800dcee:	f1a2 0508 	subcc.w	r5, r2, #8
 800dcf2:	2200      	movcs	r2, #0
 800dcf4:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800dcf8:	3b0b      	subs	r3, #11
 800dcfa:	d012      	beq.n	800dd22 <__b2d+0x86>
 800dcfc:	f1c3 0720 	rsb	r7, r3, #32
 800dd00:	fa22 f107 	lsr.w	r1, r2, r7
 800dd04:	409c      	lsls	r4, r3
 800dd06:	430c      	orrs	r4, r1
 800dd08:	42b5      	cmp	r5, r6
 800dd0a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800dd0e:	bf94      	ite	ls
 800dd10:	2400      	movls	r4, #0
 800dd12:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800dd16:	409a      	lsls	r2, r3
 800dd18:	40fc      	lsrs	r4, r7
 800dd1a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800dd1e:	4322      	orrs	r2, r4
 800dd20:	e7e1      	b.n	800dce6 <__b2d+0x4a>
 800dd22:	ea44 0107 	orr.w	r1, r4, r7
 800dd26:	e7de      	b.n	800dce6 <__b2d+0x4a>
 800dd28:	3ff00000 	.word	0x3ff00000

0800dd2c <__d2b>:
 800dd2c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800dd30:	2101      	movs	r1, #1
 800dd32:	4690      	mov	r8, r2
 800dd34:	4699      	mov	r9, r3
 800dd36:	9e08      	ldr	r6, [sp, #32]
 800dd38:	f7ff fc1e 	bl	800d578 <_Balloc>
 800dd3c:	4604      	mov	r4, r0
 800dd3e:	b930      	cbnz	r0, 800dd4e <__d2b+0x22>
 800dd40:	4602      	mov	r2, r0
 800dd42:	f240 310f 	movw	r1, #783	@ 0x30f
 800dd46:	4b23      	ldr	r3, [pc, #140]	@ (800ddd4 <__d2b+0xa8>)
 800dd48:	4823      	ldr	r0, [pc, #140]	@ (800ddd8 <__d2b+0xac>)
 800dd4a:	f000 fca5 	bl	800e698 <__assert_func>
 800dd4e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dd52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dd56:	b10d      	cbz	r5, 800dd5c <__d2b+0x30>
 800dd58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd5c:	9301      	str	r3, [sp, #4]
 800dd5e:	f1b8 0300 	subs.w	r3, r8, #0
 800dd62:	d024      	beq.n	800ddae <__d2b+0x82>
 800dd64:	4668      	mov	r0, sp
 800dd66:	9300      	str	r3, [sp, #0]
 800dd68:	f7ff fd17 	bl	800d79a <__lo0bits>
 800dd6c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dd70:	b1d8      	cbz	r0, 800ddaa <__d2b+0x7e>
 800dd72:	f1c0 0320 	rsb	r3, r0, #32
 800dd76:	fa02 f303 	lsl.w	r3, r2, r3
 800dd7a:	430b      	orrs	r3, r1
 800dd7c:	40c2      	lsrs	r2, r0
 800dd7e:	6163      	str	r3, [r4, #20]
 800dd80:	9201      	str	r2, [sp, #4]
 800dd82:	9b01      	ldr	r3, [sp, #4]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	bf0c      	ite	eq
 800dd88:	2201      	moveq	r2, #1
 800dd8a:	2202      	movne	r2, #2
 800dd8c:	61a3      	str	r3, [r4, #24]
 800dd8e:	6122      	str	r2, [r4, #16]
 800dd90:	b1ad      	cbz	r5, 800ddbe <__d2b+0x92>
 800dd92:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dd96:	4405      	add	r5, r0
 800dd98:	6035      	str	r5, [r6, #0]
 800dd9a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dd9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dda0:	6018      	str	r0, [r3, #0]
 800dda2:	4620      	mov	r0, r4
 800dda4:	b002      	add	sp, #8
 800dda6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800ddaa:	6161      	str	r1, [r4, #20]
 800ddac:	e7e9      	b.n	800dd82 <__d2b+0x56>
 800ddae:	a801      	add	r0, sp, #4
 800ddb0:	f7ff fcf3 	bl	800d79a <__lo0bits>
 800ddb4:	9b01      	ldr	r3, [sp, #4]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	6163      	str	r3, [r4, #20]
 800ddba:	3020      	adds	r0, #32
 800ddbc:	e7e7      	b.n	800dd8e <__d2b+0x62>
 800ddbe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ddc2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ddc6:	6030      	str	r0, [r6, #0]
 800ddc8:	6918      	ldr	r0, [r3, #16]
 800ddca:	f7ff fcc7 	bl	800d75c <__hi0bits>
 800ddce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ddd2:	e7e4      	b.n	800dd9e <__d2b+0x72>
 800ddd4:	0800f572 	.word	0x0800f572
 800ddd8:	0800f5e3 	.word	0x0800f5e3

0800dddc <__ratio>:
 800dddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde0:	b085      	sub	sp, #20
 800dde2:	e9cd 1000 	strd	r1, r0, [sp]
 800dde6:	a902      	add	r1, sp, #8
 800dde8:	f7ff ff58 	bl	800dc9c <__b2d>
 800ddec:	468b      	mov	fp, r1
 800ddee:	4606      	mov	r6, r0
 800ddf0:	460f      	mov	r7, r1
 800ddf2:	9800      	ldr	r0, [sp, #0]
 800ddf4:	a903      	add	r1, sp, #12
 800ddf6:	f7ff ff51 	bl	800dc9c <__b2d>
 800ddfa:	460d      	mov	r5, r1
 800ddfc:	9b01      	ldr	r3, [sp, #4]
 800ddfe:	4689      	mov	r9, r1
 800de00:	6919      	ldr	r1, [r3, #16]
 800de02:	9b00      	ldr	r3, [sp, #0]
 800de04:	4604      	mov	r4, r0
 800de06:	691b      	ldr	r3, [r3, #16]
 800de08:	4630      	mov	r0, r6
 800de0a:	1ac9      	subs	r1, r1, r3
 800de0c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800de10:	1a9b      	subs	r3, r3, r2
 800de12:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800de16:	2b00      	cmp	r3, #0
 800de18:	bfcd      	iteet	gt
 800de1a:	463a      	movgt	r2, r7
 800de1c:	462a      	movle	r2, r5
 800de1e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800de22:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800de26:	bfd8      	it	le
 800de28:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800de2c:	464b      	mov	r3, r9
 800de2e:	4622      	mov	r2, r4
 800de30:	4659      	mov	r1, fp
 800de32:	f7f2 fc85 	bl	8000740 <__aeabi_ddiv>
 800de36:	b005      	add	sp, #20
 800de38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de3c <__copybits>:
 800de3c:	3901      	subs	r1, #1
 800de3e:	b570      	push	{r4, r5, r6, lr}
 800de40:	1149      	asrs	r1, r1, #5
 800de42:	6914      	ldr	r4, [r2, #16]
 800de44:	3101      	adds	r1, #1
 800de46:	f102 0314 	add.w	r3, r2, #20
 800de4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800de4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800de52:	1f05      	subs	r5, r0, #4
 800de54:	42a3      	cmp	r3, r4
 800de56:	d30c      	bcc.n	800de72 <__copybits+0x36>
 800de58:	1aa3      	subs	r3, r4, r2
 800de5a:	3b11      	subs	r3, #17
 800de5c:	f023 0303 	bic.w	r3, r3, #3
 800de60:	3211      	adds	r2, #17
 800de62:	42a2      	cmp	r2, r4
 800de64:	bf88      	it	hi
 800de66:	2300      	movhi	r3, #0
 800de68:	4418      	add	r0, r3
 800de6a:	2300      	movs	r3, #0
 800de6c:	4288      	cmp	r0, r1
 800de6e:	d305      	bcc.n	800de7c <__copybits+0x40>
 800de70:	bd70      	pop	{r4, r5, r6, pc}
 800de72:	f853 6b04 	ldr.w	r6, [r3], #4
 800de76:	f845 6f04 	str.w	r6, [r5, #4]!
 800de7a:	e7eb      	b.n	800de54 <__copybits+0x18>
 800de7c:	f840 3b04 	str.w	r3, [r0], #4
 800de80:	e7f4      	b.n	800de6c <__copybits+0x30>

0800de82 <__any_on>:
 800de82:	f100 0214 	add.w	r2, r0, #20
 800de86:	6900      	ldr	r0, [r0, #16]
 800de88:	114b      	asrs	r3, r1, #5
 800de8a:	4298      	cmp	r0, r3
 800de8c:	b510      	push	{r4, lr}
 800de8e:	db11      	blt.n	800deb4 <__any_on+0x32>
 800de90:	dd0a      	ble.n	800dea8 <__any_on+0x26>
 800de92:	f011 011f 	ands.w	r1, r1, #31
 800de96:	d007      	beq.n	800dea8 <__any_on+0x26>
 800de98:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800de9c:	fa24 f001 	lsr.w	r0, r4, r1
 800dea0:	fa00 f101 	lsl.w	r1, r0, r1
 800dea4:	428c      	cmp	r4, r1
 800dea6:	d10b      	bne.n	800dec0 <__any_on+0x3e>
 800dea8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800deac:	4293      	cmp	r3, r2
 800deae:	d803      	bhi.n	800deb8 <__any_on+0x36>
 800deb0:	2000      	movs	r0, #0
 800deb2:	bd10      	pop	{r4, pc}
 800deb4:	4603      	mov	r3, r0
 800deb6:	e7f7      	b.n	800dea8 <__any_on+0x26>
 800deb8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800debc:	2900      	cmp	r1, #0
 800debe:	d0f5      	beq.n	800deac <__any_on+0x2a>
 800dec0:	2001      	movs	r0, #1
 800dec2:	e7f6      	b.n	800deb2 <__any_on+0x30>

0800dec4 <__ascii_wctomb>:
 800dec4:	4603      	mov	r3, r0
 800dec6:	4608      	mov	r0, r1
 800dec8:	b141      	cbz	r1, 800dedc <__ascii_wctomb+0x18>
 800deca:	2aff      	cmp	r2, #255	@ 0xff
 800decc:	d904      	bls.n	800ded8 <__ascii_wctomb+0x14>
 800dece:	228a      	movs	r2, #138	@ 0x8a
 800ded0:	f04f 30ff 	mov.w	r0, #4294967295
 800ded4:	601a      	str	r2, [r3, #0]
 800ded6:	4770      	bx	lr
 800ded8:	2001      	movs	r0, #1
 800deda:	700a      	strb	r2, [r1, #0]
 800dedc:	4770      	bx	lr

0800dede <__ssputs_r>:
 800dede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dee2:	461f      	mov	r7, r3
 800dee4:	688e      	ldr	r6, [r1, #8]
 800dee6:	4682      	mov	sl, r0
 800dee8:	42be      	cmp	r6, r7
 800deea:	460c      	mov	r4, r1
 800deec:	4690      	mov	r8, r2
 800deee:	680b      	ldr	r3, [r1, #0]
 800def0:	d82d      	bhi.n	800df4e <__ssputs_r+0x70>
 800def2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800def6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800defa:	d026      	beq.n	800df4a <__ssputs_r+0x6c>
 800defc:	6965      	ldr	r5, [r4, #20]
 800defe:	6909      	ldr	r1, [r1, #16]
 800df00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df04:	eba3 0901 	sub.w	r9, r3, r1
 800df08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df0c:	1c7b      	adds	r3, r7, #1
 800df0e:	444b      	add	r3, r9
 800df10:	106d      	asrs	r5, r5, #1
 800df12:	429d      	cmp	r5, r3
 800df14:	bf38      	it	cc
 800df16:	461d      	movcc	r5, r3
 800df18:	0553      	lsls	r3, r2, #21
 800df1a:	d527      	bpl.n	800df6c <__ssputs_r+0x8e>
 800df1c:	4629      	mov	r1, r5
 800df1e:	f7fc f825 	bl	8009f6c <_malloc_r>
 800df22:	4606      	mov	r6, r0
 800df24:	b360      	cbz	r0, 800df80 <__ssputs_r+0xa2>
 800df26:	464a      	mov	r2, r9
 800df28:	6921      	ldr	r1, [r4, #16]
 800df2a:	f7fe f928 	bl	800c17e <memcpy>
 800df2e:	89a3      	ldrh	r3, [r4, #12]
 800df30:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800df34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df38:	81a3      	strh	r3, [r4, #12]
 800df3a:	6126      	str	r6, [r4, #16]
 800df3c:	444e      	add	r6, r9
 800df3e:	6026      	str	r6, [r4, #0]
 800df40:	463e      	mov	r6, r7
 800df42:	6165      	str	r5, [r4, #20]
 800df44:	eba5 0509 	sub.w	r5, r5, r9
 800df48:	60a5      	str	r5, [r4, #8]
 800df4a:	42be      	cmp	r6, r7
 800df4c:	d900      	bls.n	800df50 <__ssputs_r+0x72>
 800df4e:	463e      	mov	r6, r7
 800df50:	4632      	mov	r2, r6
 800df52:	4641      	mov	r1, r8
 800df54:	6820      	ldr	r0, [r4, #0]
 800df56:	f000 fb62 	bl	800e61e <memmove>
 800df5a:	2000      	movs	r0, #0
 800df5c:	68a3      	ldr	r3, [r4, #8]
 800df5e:	1b9b      	subs	r3, r3, r6
 800df60:	60a3      	str	r3, [r4, #8]
 800df62:	6823      	ldr	r3, [r4, #0]
 800df64:	4433      	add	r3, r6
 800df66:	6023      	str	r3, [r4, #0]
 800df68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df6c:	462a      	mov	r2, r5
 800df6e:	f000 fbc5 	bl	800e6fc <_realloc_r>
 800df72:	4606      	mov	r6, r0
 800df74:	2800      	cmp	r0, #0
 800df76:	d1e0      	bne.n	800df3a <__ssputs_r+0x5c>
 800df78:	4650      	mov	r0, sl
 800df7a:	6921      	ldr	r1, [r4, #16]
 800df7c:	f7fe ff68 	bl	800ce50 <_free_r>
 800df80:	230c      	movs	r3, #12
 800df82:	f8ca 3000 	str.w	r3, [sl]
 800df86:	89a3      	ldrh	r3, [r4, #12]
 800df88:	f04f 30ff 	mov.w	r0, #4294967295
 800df8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df90:	81a3      	strh	r3, [r4, #12]
 800df92:	e7e9      	b.n	800df68 <__ssputs_r+0x8a>

0800df94 <_svfiprintf_r>:
 800df94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df98:	4698      	mov	r8, r3
 800df9a:	898b      	ldrh	r3, [r1, #12]
 800df9c:	4607      	mov	r7, r0
 800df9e:	061b      	lsls	r3, r3, #24
 800dfa0:	460d      	mov	r5, r1
 800dfa2:	4614      	mov	r4, r2
 800dfa4:	b09d      	sub	sp, #116	@ 0x74
 800dfa6:	d510      	bpl.n	800dfca <_svfiprintf_r+0x36>
 800dfa8:	690b      	ldr	r3, [r1, #16]
 800dfaa:	b973      	cbnz	r3, 800dfca <_svfiprintf_r+0x36>
 800dfac:	2140      	movs	r1, #64	@ 0x40
 800dfae:	f7fb ffdd 	bl	8009f6c <_malloc_r>
 800dfb2:	6028      	str	r0, [r5, #0]
 800dfb4:	6128      	str	r0, [r5, #16]
 800dfb6:	b930      	cbnz	r0, 800dfc6 <_svfiprintf_r+0x32>
 800dfb8:	230c      	movs	r3, #12
 800dfba:	603b      	str	r3, [r7, #0]
 800dfbc:	f04f 30ff 	mov.w	r0, #4294967295
 800dfc0:	b01d      	add	sp, #116	@ 0x74
 800dfc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfc6:	2340      	movs	r3, #64	@ 0x40
 800dfc8:	616b      	str	r3, [r5, #20]
 800dfca:	2300      	movs	r3, #0
 800dfcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfce:	2320      	movs	r3, #32
 800dfd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dfd4:	2330      	movs	r3, #48	@ 0x30
 800dfd6:	f04f 0901 	mov.w	r9, #1
 800dfda:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfde:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800e178 <_svfiprintf_r+0x1e4>
 800dfe2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dfe6:	4623      	mov	r3, r4
 800dfe8:	469a      	mov	sl, r3
 800dfea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfee:	b10a      	cbz	r2, 800dff4 <_svfiprintf_r+0x60>
 800dff0:	2a25      	cmp	r2, #37	@ 0x25
 800dff2:	d1f9      	bne.n	800dfe8 <_svfiprintf_r+0x54>
 800dff4:	ebba 0b04 	subs.w	fp, sl, r4
 800dff8:	d00b      	beq.n	800e012 <_svfiprintf_r+0x7e>
 800dffa:	465b      	mov	r3, fp
 800dffc:	4622      	mov	r2, r4
 800dffe:	4629      	mov	r1, r5
 800e000:	4638      	mov	r0, r7
 800e002:	f7ff ff6c 	bl	800dede <__ssputs_r>
 800e006:	3001      	adds	r0, #1
 800e008:	f000 80a7 	beq.w	800e15a <_svfiprintf_r+0x1c6>
 800e00c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e00e:	445a      	add	r2, fp
 800e010:	9209      	str	r2, [sp, #36]	@ 0x24
 800e012:	f89a 3000 	ldrb.w	r3, [sl]
 800e016:	2b00      	cmp	r3, #0
 800e018:	f000 809f 	beq.w	800e15a <_svfiprintf_r+0x1c6>
 800e01c:	2300      	movs	r3, #0
 800e01e:	f04f 32ff 	mov.w	r2, #4294967295
 800e022:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e026:	f10a 0a01 	add.w	sl, sl, #1
 800e02a:	9304      	str	r3, [sp, #16]
 800e02c:	9307      	str	r3, [sp, #28]
 800e02e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e032:	931a      	str	r3, [sp, #104]	@ 0x68
 800e034:	4654      	mov	r4, sl
 800e036:	2205      	movs	r2, #5
 800e038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e03c:	484e      	ldr	r0, [pc, #312]	@ (800e178 <_svfiprintf_r+0x1e4>)
 800e03e:	f7fe f890 	bl	800c162 <memchr>
 800e042:	9a04      	ldr	r2, [sp, #16]
 800e044:	b9d8      	cbnz	r0, 800e07e <_svfiprintf_r+0xea>
 800e046:	06d0      	lsls	r0, r2, #27
 800e048:	bf44      	itt	mi
 800e04a:	2320      	movmi	r3, #32
 800e04c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e050:	0711      	lsls	r1, r2, #28
 800e052:	bf44      	itt	mi
 800e054:	232b      	movmi	r3, #43	@ 0x2b
 800e056:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e05a:	f89a 3000 	ldrb.w	r3, [sl]
 800e05e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e060:	d015      	beq.n	800e08e <_svfiprintf_r+0xfa>
 800e062:	4654      	mov	r4, sl
 800e064:	2000      	movs	r0, #0
 800e066:	f04f 0c0a 	mov.w	ip, #10
 800e06a:	9a07      	ldr	r2, [sp, #28]
 800e06c:	4621      	mov	r1, r4
 800e06e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e072:	3b30      	subs	r3, #48	@ 0x30
 800e074:	2b09      	cmp	r3, #9
 800e076:	d94b      	bls.n	800e110 <_svfiprintf_r+0x17c>
 800e078:	b1b0      	cbz	r0, 800e0a8 <_svfiprintf_r+0x114>
 800e07a:	9207      	str	r2, [sp, #28]
 800e07c:	e014      	b.n	800e0a8 <_svfiprintf_r+0x114>
 800e07e:	eba0 0308 	sub.w	r3, r0, r8
 800e082:	fa09 f303 	lsl.w	r3, r9, r3
 800e086:	4313      	orrs	r3, r2
 800e088:	46a2      	mov	sl, r4
 800e08a:	9304      	str	r3, [sp, #16]
 800e08c:	e7d2      	b.n	800e034 <_svfiprintf_r+0xa0>
 800e08e:	9b03      	ldr	r3, [sp, #12]
 800e090:	1d19      	adds	r1, r3, #4
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	9103      	str	r1, [sp, #12]
 800e096:	2b00      	cmp	r3, #0
 800e098:	bfbb      	ittet	lt
 800e09a:	425b      	neglt	r3, r3
 800e09c:	f042 0202 	orrlt.w	r2, r2, #2
 800e0a0:	9307      	strge	r3, [sp, #28]
 800e0a2:	9307      	strlt	r3, [sp, #28]
 800e0a4:	bfb8      	it	lt
 800e0a6:	9204      	strlt	r2, [sp, #16]
 800e0a8:	7823      	ldrb	r3, [r4, #0]
 800e0aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0ac:	d10a      	bne.n	800e0c4 <_svfiprintf_r+0x130>
 800e0ae:	7863      	ldrb	r3, [r4, #1]
 800e0b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0b2:	d132      	bne.n	800e11a <_svfiprintf_r+0x186>
 800e0b4:	9b03      	ldr	r3, [sp, #12]
 800e0b6:	3402      	adds	r4, #2
 800e0b8:	1d1a      	adds	r2, r3, #4
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	9203      	str	r2, [sp, #12]
 800e0be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e0c2:	9305      	str	r3, [sp, #20]
 800e0c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800e17c <_svfiprintf_r+0x1e8>
 800e0c8:	2203      	movs	r2, #3
 800e0ca:	4650      	mov	r0, sl
 800e0cc:	7821      	ldrb	r1, [r4, #0]
 800e0ce:	f7fe f848 	bl	800c162 <memchr>
 800e0d2:	b138      	cbz	r0, 800e0e4 <_svfiprintf_r+0x150>
 800e0d4:	2240      	movs	r2, #64	@ 0x40
 800e0d6:	9b04      	ldr	r3, [sp, #16]
 800e0d8:	eba0 000a 	sub.w	r0, r0, sl
 800e0dc:	4082      	lsls	r2, r0
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	3401      	adds	r4, #1
 800e0e2:	9304      	str	r3, [sp, #16]
 800e0e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0e8:	2206      	movs	r2, #6
 800e0ea:	4825      	ldr	r0, [pc, #148]	@ (800e180 <_svfiprintf_r+0x1ec>)
 800e0ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e0f0:	f7fe f837 	bl	800c162 <memchr>
 800e0f4:	2800      	cmp	r0, #0
 800e0f6:	d036      	beq.n	800e166 <_svfiprintf_r+0x1d2>
 800e0f8:	4b22      	ldr	r3, [pc, #136]	@ (800e184 <_svfiprintf_r+0x1f0>)
 800e0fa:	bb1b      	cbnz	r3, 800e144 <_svfiprintf_r+0x1b0>
 800e0fc:	9b03      	ldr	r3, [sp, #12]
 800e0fe:	3307      	adds	r3, #7
 800e100:	f023 0307 	bic.w	r3, r3, #7
 800e104:	3308      	adds	r3, #8
 800e106:	9303      	str	r3, [sp, #12]
 800e108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e10a:	4433      	add	r3, r6
 800e10c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e10e:	e76a      	b.n	800dfe6 <_svfiprintf_r+0x52>
 800e110:	460c      	mov	r4, r1
 800e112:	2001      	movs	r0, #1
 800e114:	fb0c 3202 	mla	r2, ip, r2, r3
 800e118:	e7a8      	b.n	800e06c <_svfiprintf_r+0xd8>
 800e11a:	2300      	movs	r3, #0
 800e11c:	f04f 0c0a 	mov.w	ip, #10
 800e120:	4619      	mov	r1, r3
 800e122:	3401      	adds	r4, #1
 800e124:	9305      	str	r3, [sp, #20]
 800e126:	4620      	mov	r0, r4
 800e128:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e12c:	3a30      	subs	r2, #48	@ 0x30
 800e12e:	2a09      	cmp	r2, #9
 800e130:	d903      	bls.n	800e13a <_svfiprintf_r+0x1a6>
 800e132:	2b00      	cmp	r3, #0
 800e134:	d0c6      	beq.n	800e0c4 <_svfiprintf_r+0x130>
 800e136:	9105      	str	r1, [sp, #20]
 800e138:	e7c4      	b.n	800e0c4 <_svfiprintf_r+0x130>
 800e13a:	4604      	mov	r4, r0
 800e13c:	2301      	movs	r3, #1
 800e13e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e142:	e7f0      	b.n	800e126 <_svfiprintf_r+0x192>
 800e144:	ab03      	add	r3, sp, #12
 800e146:	9300      	str	r3, [sp, #0]
 800e148:	462a      	mov	r2, r5
 800e14a:	4638      	mov	r0, r7
 800e14c:	4b0e      	ldr	r3, [pc, #56]	@ (800e188 <_svfiprintf_r+0x1f4>)
 800e14e:	a904      	add	r1, sp, #16
 800e150:	f7fc fec8 	bl	800aee4 <_printf_float>
 800e154:	1c42      	adds	r2, r0, #1
 800e156:	4606      	mov	r6, r0
 800e158:	d1d6      	bne.n	800e108 <_svfiprintf_r+0x174>
 800e15a:	89ab      	ldrh	r3, [r5, #12]
 800e15c:	065b      	lsls	r3, r3, #25
 800e15e:	f53f af2d 	bmi.w	800dfbc <_svfiprintf_r+0x28>
 800e162:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e164:	e72c      	b.n	800dfc0 <_svfiprintf_r+0x2c>
 800e166:	ab03      	add	r3, sp, #12
 800e168:	9300      	str	r3, [sp, #0]
 800e16a:	462a      	mov	r2, r5
 800e16c:	4638      	mov	r0, r7
 800e16e:	4b06      	ldr	r3, [pc, #24]	@ (800e188 <_svfiprintf_r+0x1f4>)
 800e170:	a904      	add	r1, sp, #16
 800e172:	f7fd f955 	bl	800b420 <_printf_i>
 800e176:	e7ed      	b.n	800e154 <_svfiprintf_r+0x1c0>
 800e178:	0800f738 	.word	0x0800f738
 800e17c:	0800f73e 	.word	0x0800f73e
 800e180:	0800f742 	.word	0x0800f742
 800e184:	0800aee5 	.word	0x0800aee5
 800e188:	0800dedf 	.word	0x0800dedf

0800e18c <__sfputc_r>:
 800e18c:	6893      	ldr	r3, [r2, #8]
 800e18e:	b410      	push	{r4}
 800e190:	3b01      	subs	r3, #1
 800e192:	2b00      	cmp	r3, #0
 800e194:	6093      	str	r3, [r2, #8]
 800e196:	da07      	bge.n	800e1a8 <__sfputc_r+0x1c>
 800e198:	6994      	ldr	r4, [r2, #24]
 800e19a:	42a3      	cmp	r3, r4
 800e19c:	db01      	blt.n	800e1a2 <__sfputc_r+0x16>
 800e19e:	290a      	cmp	r1, #10
 800e1a0:	d102      	bne.n	800e1a8 <__sfputc_r+0x1c>
 800e1a2:	bc10      	pop	{r4}
 800e1a4:	f7fd be35 	b.w	800be12 <__swbuf_r>
 800e1a8:	6813      	ldr	r3, [r2, #0]
 800e1aa:	1c58      	adds	r0, r3, #1
 800e1ac:	6010      	str	r0, [r2, #0]
 800e1ae:	7019      	strb	r1, [r3, #0]
 800e1b0:	4608      	mov	r0, r1
 800e1b2:	bc10      	pop	{r4}
 800e1b4:	4770      	bx	lr

0800e1b6 <__sfputs_r>:
 800e1b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1b8:	4606      	mov	r6, r0
 800e1ba:	460f      	mov	r7, r1
 800e1bc:	4614      	mov	r4, r2
 800e1be:	18d5      	adds	r5, r2, r3
 800e1c0:	42ac      	cmp	r4, r5
 800e1c2:	d101      	bne.n	800e1c8 <__sfputs_r+0x12>
 800e1c4:	2000      	movs	r0, #0
 800e1c6:	e007      	b.n	800e1d8 <__sfputs_r+0x22>
 800e1c8:	463a      	mov	r2, r7
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1d0:	f7ff ffdc 	bl	800e18c <__sfputc_r>
 800e1d4:	1c43      	adds	r3, r0, #1
 800e1d6:	d1f3      	bne.n	800e1c0 <__sfputs_r+0xa>
 800e1d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e1dc <_vfiprintf_r>:
 800e1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e0:	460d      	mov	r5, r1
 800e1e2:	4614      	mov	r4, r2
 800e1e4:	4698      	mov	r8, r3
 800e1e6:	4606      	mov	r6, r0
 800e1e8:	b09d      	sub	sp, #116	@ 0x74
 800e1ea:	b118      	cbz	r0, 800e1f4 <_vfiprintf_r+0x18>
 800e1ec:	6a03      	ldr	r3, [r0, #32]
 800e1ee:	b90b      	cbnz	r3, 800e1f4 <_vfiprintf_r+0x18>
 800e1f0:	f7fd fcd2 	bl	800bb98 <__sinit>
 800e1f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e1f6:	07d9      	lsls	r1, r3, #31
 800e1f8:	d405      	bmi.n	800e206 <_vfiprintf_r+0x2a>
 800e1fa:	89ab      	ldrh	r3, [r5, #12]
 800e1fc:	059a      	lsls	r2, r3, #22
 800e1fe:	d402      	bmi.n	800e206 <_vfiprintf_r+0x2a>
 800e200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e202:	f7fd ffa4 	bl	800c14e <__retarget_lock_acquire_recursive>
 800e206:	89ab      	ldrh	r3, [r5, #12]
 800e208:	071b      	lsls	r3, r3, #28
 800e20a:	d501      	bpl.n	800e210 <_vfiprintf_r+0x34>
 800e20c:	692b      	ldr	r3, [r5, #16]
 800e20e:	b99b      	cbnz	r3, 800e238 <_vfiprintf_r+0x5c>
 800e210:	4629      	mov	r1, r5
 800e212:	4630      	mov	r0, r6
 800e214:	f7fd fe3c 	bl	800be90 <__swsetup_r>
 800e218:	b170      	cbz	r0, 800e238 <_vfiprintf_r+0x5c>
 800e21a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e21c:	07dc      	lsls	r4, r3, #31
 800e21e:	d504      	bpl.n	800e22a <_vfiprintf_r+0x4e>
 800e220:	f04f 30ff 	mov.w	r0, #4294967295
 800e224:	b01d      	add	sp, #116	@ 0x74
 800e226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e22a:	89ab      	ldrh	r3, [r5, #12]
 800e22c:	0598      	lsls	r0, r3, #22
 800e22e:	d4f7      	bmi.n	800e220 <_vfiprintf_r+0x44>
 800e230:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e232:	f7fd ff8d 	bl	800c150 <__retarget_lock_release_recursive>
 800e236:	e7f3      	b.n	800e220 <_vfiprintf_r+0x44>
 800e238:	2300      	movs	r3, #0
 800e23a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e23c:	2320      	movs	r3, #32
 800e23e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e242:	2330      	movs	r3, #48	@ 0x30
 800e244:	f04f 0901 	mov.w	r9, #1
 800e248:	f8cd 800c 	str.w	r8, [sp, #12]
 800e24c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800e3f8 <_vfiprintf_r+0x21c>
 800e250:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e254:	4623      	mov	r3, r4
 800e256:	469a      	mov	sl, r3
 800e258:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e25c:	b10a      	cbz	r2, 800e262 <_vfiprintf_r+0x86>
 800e25e:	2a25      	cmp	r2, #37	@ 0x25
 800e260:	d1f9      	bne.n	800e256 <_vfiprintf_r+0x7a>
 800e262:	ebba 0b04 	subs.w	fp, sl, r4
 800e266:	d00b      	beq.n	800e280 <_vfiprintf_r+0xa4>
 800e268:	465b      	mov	r3, fp
 800e26a:	4622      	mov	r2, r4
 800e26c:	4629      	mov	r1, r5
 800e26e:	4630      	mov	r0, r6
 800e270:	f7ff ffa1 	bl	800e1b6 <__sfputs_r>
 800e274:	3001      	adds	r0, #1
 800e276:	f000 80a7 	beq.w	800e3c8 <_vfiprintf_r+0x1ec>
 800e27a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e27c:	445a      	add	r2, fp
 800e27e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e280:	f89a 3000 	ldrb.w	r3, [sl]
 800e284:	2b00      	cmp	r3, #0
 800e286:	f000 809f 	beq.w	800e3c8 <_vfiprintf_r+0x1ec>
 800e28a:	2300      	movs	r3, #0
 800e28c:	f04f 32ff 	mov.w	r2, #4294967295
 800e290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e294:	f10a 0a01 	add.w	sl, sl, #1
 800e298:	9304      	str	r3, [sp, #16]
 800e29a:	9307      	str	r3, [sp, #28]
 800e29c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e2a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e2a2:	4654      	mov	r4, sl
 800e2a4:	2205      	movs	r2, #5
 800e2a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2aa:	4853      	ldr	r0, [pc, #332]	@ (800e3f8 <_vfiprintf_r+0x21c>)
 800e2ac:	f7fd ff59 	bl	800c162 <memchr>
 800e2b0:	9a04      	ldr	r2, [sp, #16]
 800e2b2:	b9d8      	cbnz	r0, 800e2ec <_vfiprintf_r+0x110>
 800e2b4:	06d1      	lsls	r1, r2, #27
 800e2b6:	bf44      	itt	mi
 800e2b8:	2320      	movmi	r3, #32
 800e2ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2be:	0713      	lsls	r3, r2, #28
 800e2c0:	bf44      	itt	mi
 800e2c2:	232b      	movmi	r3, #43	@ 0x2b
 800e2c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2c8:	f89a 3000 	ldrb.w	r3, [sl]
 800e2cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2ce:	d015      	beq.n	800e2fc <_vfiprintf_r+0x120>
 800e2d0:	4654      	mov	r4, sl
 800e2d2:	2000      	movs	r0, #0
 800e2d4:	f04f 0c0a 	mov.w	ip, #10
 800e2d8:	9a07      	ldr	r2, [sp, #28]
 800e2da:	4621      	mov	r1, r4
 800e2dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2e0:	3b30      	subs	r3, #48	@ 0x30
 800e2e2:	2b09      	cmp	r3, #9
 800e2e4:	d94b      	bls.n	800e37e <_vfiprintf_r+0x1a2>
 800e2e6:	b1b0      	cbz	r0, 800e316 <_vfiprintf_r+0x13a>
 800e2e8:	9207      	str	r2, [sp, #28]
 800e2ea:	e014      	b.n	800e316 <_vfiprintf_r+0x13a>
 800e2ec:	eba0 0308 	sub.w	r3, r0, r8
 800e2f0:	fa09 f303 	lsl.w	r3, r9, r3
 800e2f4:	4313      	orrs	r3, r2
 800e2f6:	46a2      	mov	sl, r4
 800e2f8:	9304      	str	r3, [sp, #16]
 800e2fa:	e7d2      	b.n	800e2a2 <_vfiprintf_r+0xc6>
 800e2fc:	9b03      	ldr	r3, [sp, #12]
 800e2fe:	1d19      	adds	r1, r3, #4
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	9103      	str	r1, [sp, #12]
 800e304:	2b00      	cmp	r3, #0
 800e306:	bfbb      	ittet	lt
 800e308:	425b      	neglt	r3, r3
 800e30a:	f042 0202 	orrlt.w	r2, r2, #2
 800e30e:	9307      	strge	r3, [sp, #28]
 800e310:	9307      	strlt	r3, [sp, #28]
 800e312:	bfb8      	it	lt
 800e314:	9204      	strlt	r2, [sp, #16]
 800e316:	7823      	ldrb	r3, [r4, #0]
 800e318:	2b2e      	cmp	r3, #46	@ 0x2e
 800e31a:	d10a      	bne.n	800e332 <_vfiprintf_r+0x156>
 800e31c:	7863      	ldrb	r3, [r4, #1]
 800e31e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e320:	d132      	bne.n	800e388 <_vfiprintf_r+0x1ac>
 800e322:	9b03      	ldr	r3, [sp, #12]
 800e324:	3402      	adds	r4, #2
 800e326:	1d1a      	adds	r2, r3, #4
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	9203      	str	r2, [sp, #12]
 800e32c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e330:	9305      	str	r3, [sp, #20]
 800e332:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800e3fc <_vfiprintf_r+0x220>
 800e336:	2203      	movs	r2, #3
 800e338:	4650      	mov	r0, sl
 800e33a:	7821      	ldrb	r1, [r4, #0]
 800e33c:	f7fd ff11 	bl	800c162 <memchr>
 800e340:	b138      	cbz	r0, 800e352 <_vfiprintf_r+0x176>
 800e342:	2240      	movs	r2, #64	@ 0x40
 800e344:	9b04      	ldr	r3, [sp, #16]
 800e346:	eba0 000a 	sub.w	r0, r0, sl
 800e34a:	4082      	lsls	r2, r0
 800e34c:	4313      	orrs	r3, r2
 800e34e:	3401      	adds	r4, #1
 800e350:	9304      	str	r3, [sp, #16]
 800e352:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e356:	2206      	movs	r2, #6
 800e358:	4829      	ldr	r0, [pc, #164]	@ (800e400 <_vfiprintf_r+0x224>)
 800e35a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e35e:	f7fd ff00 	bl	800c162 <memchr>
 800e362:	2800      	cmp	r0, #0
 800e364:	d03f      	beq.n	800e3e6 <_vfiprintf_r+0x20a>
 800e366:	4b27      	ldr	r3, [pc, #156]	@ (800e404 <_vfiprintf_r+0x228>)
 800e368:	bb1b      	cbnz	r3, 800e3b2 <_vfiprintf_r+0x1d6>
 800e36a:	9b03      	ldr	r3, [sp, #12]
 800e36c:	3307      	adds	r3, #7
 800e36e:	f023 0307 	bic.w	r3, r3, #7
 800e372:	3308      	adds	r3, #8
 800e374:	9303      	str	r3, [sp, #12]
 800e376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e378:	443b      	add	r3, r7
 800e37a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e37c:	e76a      	b.n	800e254 <_vfiprintf_r+0x78>
 800e37e:	460c      	mov	r4, r1
 800e380:	2001      	movs	r0, #1
 800e382:	fb0c 3202 	mla	r2, ip, r2, r3
 800e386:	e7a8      	b.n	800e2da <_vfiprintf_r+0xfe>
 800e388:	2300      	movs	r3, #0
 800e38a:	f04f 0c0a 	mov.w	ip, #10
 800e38e:	4619      	mov	r1, r3
 800e390:	3401      	adds	r4, #1
 800e392:	9305      	str	r3, [sp, #20]
 800e394:	4620      	mov	r0, r4
 800e396:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e39a:	3a30      	subs	r2, #48	@ 0x30
 800e39c:	2a09      	cmp	r2, #9
 800e39e:	d903      	bls.n	800e3a8 <_vfiprintf_r+0x1cc>
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d0c6      	beq.n	800e332 <_vfiprintf_r+0x156>
 800e3a4:	9105      	str	r1, [sp, #20]
 800e3a6:	e7c4      	b.n	800e332 <_vfiprintf_r+0x156>
 800e3a8:	4604      	mov	r4, r0
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3b0:	e7f0      	b.n	800e394 <_vfiprintf_r+0x1b8>
 800e3b2:	ab03      	add	r3, sp, #12
 800e3b4:	9300      	str	r3, [sp, #0]
 800e3b6:	462a      	mov	r2, r5
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	4b13      	ldr	r3, [pc, #76]	@ (800e408 <_vfiprintf_r+0x22c>)
 800e3bc:	a904      	add	r1, sp, #16
 800e3be:	f7fc fd91 	bl	800aee4 <_printf_float>
 800e3c2:	4607      	mov	r7, r0
 800e3c4:	1c78      	adds	r0, r7, #1
 800e3c6:	d1d6      	bne.n	800e376 <_vfiprintf_r+0x19a>
 800e3c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3ca:	07d9      	lsls	r1, r3, #31
 800e3cc:	d405      	bmi.n	800e3da <_vfiprintf_r+0x1fe>
 800e3ce:	89ab      	ldrh	r3, [r5, #12]
 800e3d0:	059a      	lsls	r2, r3, #22
 800e3d2:	d402      	bmi.n	800e3da <_vfiprintf_r+0x1fe>
 800e3d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3d6:	f7fd febb 	bl	800c150 <__retarget_lock_release_recursive>
 800e3da:	89ab      	ldrh	r3, [r5, #12]
 800e3dc:	065b      	lsls	r3, r3, #25
 800e3de:	f53f af1f 	bmi.w	800e220 <_vfiprintf_r+0x44>
 800e3e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e3e4:	e71e      	b.n	800e224 <_vfiprintf_r+0x48>
 800e3e6:	ab03      	add	r3, sp, #12
 800e3e8:	9300      	str	r3, [sp, #0]
 800e3ea:	462a      	mov	r2, r5
 800e3ec:	4630      	mov	r0, r6
 800e3ee:	4b06      	ldr	r3, [pc, #24]	@ (800e408 <_vfiprintf_r+0x22c>)
 800e3f0:	a904      	add	r1, sp, #16
 800e3f2:	f7fd f815 	bl	800b420 <_printf_i>
 800e3f6:	e7e4      	b.n	800e3c2 <_vfiprintf_r+0x1e6>
 800e3f8:	0800f738 	.word	0x0800f738
 800e3fc:	0800f73e 	.word	0x0800f73e
 800e400:	0800f742 	.word	0x0800f742
 800e404:	0800aee5 	.word	0x0800aee5
 800e408:	0800e1b7 	.word	0x0800e1b7

0800e40c <__sflush_r>:
 800e40c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e412:	0716      	lsls	r6, r2, #28
 800e414:	4605      	mov	r5, r0
 800e416:	460c      	mov	r4, r1
 800e418:	d454      	bmi.n	800e4c4 <__sflush_r+0xb8>
 800e41a:	684b      	ldr	r3, [r1, #4]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	dc02      	bgt.n	800e426 <__sflush_r+0x1a>
 800e420:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e422:	2b00      	cmp	r3, #0
 800e424:	dd48      	ble.n	800e4b8 <__sflush_r+0xac>
 800e426:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e428:	2e00      	cmp	r6, #0
 800e42a:	d045      	beq.n	800e4b8 <__sflush_r+0xac>
 800e42c:	2300      	movs	r3, #0
 800e42e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e432:	682f      	ldr	r7, [r5, #0]
 800e434:	6a21      	ldr	r1, [r4, #32]
 800e436:	602b      	str	r3, [r5, #0]
 800e438:	d030      	beq.n	800e49c <__sflush_r+0x90>
 800e43a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e43c:	89a3      	ldrh	r3, [r4, #12]
 800e43e:	0759      	lsls	r1, r3, #29
 800e440:	d505      	bpl.n	800e44e <__sflush_r+0x42>
 800e442:	6863      	ldr	r3, [r4, #4]
 800e444:	1ad2      	subs	r2, r2, r3
 800e446:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e448:	b10b      	cbz	r3, 800e44e <__sflush_r+0x42>
 800e44a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e44c:	1ad2      	subs	r2, r2, r3
 800e44e:	2300      	movs	r3, #0
 800e450:	4628      	mov	r0, r5
 800e452:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e454:	6a21      	ldr	r1, [r4, #32]
 800e456:	47b0      	blx	r6
 800e458:	1c43      	adds	r3, r0, #1
 800e45a:	89a3      	ldrh	r3, [r4, #12]
 800e45c:	d106      	bne.n	800e46c <__sflush_r+0x60>
 800e45e:	6829      	ldr	r1, [r5, #0]
 800e460:	291d      	cmp	r1, #29
 800e462:	d82b      	bhi.n	800e4bc <__sflush_r+0xb0>
 800e464:	4a28      	ldr	r2, [pc, #160]	@ (800e508 <__sflush_r+0xfc>)
 800e466:	410a      	asrs	r2, r1
 800e468:	07d6      	lsls	r6, r2, #31
 800e46a:	d427      	bmi.n	800e4bc <__sflush_r+0xb0>
 800e46c:	2200      	movs	r2, #0
 800e46e:	6062      	str	r2, [r4, #4]
 800e470:	6922      	ldr	r2, [r4, #16]
 800e472:	04d9      	lsls	r1, r3, #19
 800e474:	6022      	str	r2, [r4, #0]
 800e476:	d504      	bpl.n	800e482 <__sflush_r+0x76>
 800e478:	1c42      	adds	r2, r0, #1
 800e47a:	d101      	bne.n	800e480 <__sflush_r+0x74>
 800e47c:	682b      	ldr	r3, [r5, #0]
 800e47e:	b903      	cbnz	r3, 800e482 <__sflush_r+0x76>
 800e480:	6560      	str	r0, [r4, #84]	@ 0x54
 800e482:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e484:	602f      	str	r7, [r5, #0]
 800e486:	b1b9      	cbz	r1, 800e4b8 <__sflush_r+0xac>
 800e488:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e48c:	4299      	cmp	r1, r3
 800e48e:	d002      	beq.n	800e496 <__sflush_r+0x8a>
 800e490:	4628      	mov	r0, r5
 800e492:	f7fe fcdd 	bl	800ce50 <_free_r>
 800e496:	2300      	movs	r3, #0
 800e498:	6363      	str	r3, [r4, #52]	@ 0x34
 800e49a:	e00d      	b.n	800e4b8 <__sflush_r+0xac>
 800e49c:	2301      	movs	r3, #1
 800e49e:	4628      	mov	r0, r5
 800e4a0:	47b0      	blx	r6
 800e4a2:	4602      	mov	r2, r0
 800e4a4:	1c50      	adds	r0, r2, #1
 800e4a6:	d1c9      	bne.n	800e43c <__sflush_r+0x30>
 800e4a8:	682b      	ldr	r3, [r5, #0]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d0c6      	beq.n	800e43c <__sflush_r+0x30>
 800e4ae:	2b1d      	cmp	r3, #29
 800e4b0:	d001      	beq.n	800e4b6 <__sflush_r+0xaa>
 800e4b2:	2b16      	cmp	r3, #22
 800e4b4:	d11d      	bne.n	800e4f2 <__sflush_r+0xe6>
 800e4b6:	602f      	str	r7, [r5, #0]
 800e4b8:	2000      	movs	r0, #0
 800e4ba:	e021      	b.n	800e500 <__sflush_r+0xf4>
 800e4bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4c0:	b21b      	sxth	r3, r3
 800e4c2:	e01a      	b.n	800e4fa <__sflush_r+0xee>
 800e4c4:	690f      	ldr	r7, [r1, #16]
 800e4c6:	2f00      	cmp	r7, #0
 800e4c8:	d0f6      	beq.n	800e4b8 <__sflush_r+0xac>
 800e4ca:	0793      	lsls	r3, r2, #30
 800e4cc:	bf18      	it	ne
 800e4ce:	2300      	movne	r3, #0
 800e4d0:	680e      	ldr	r6, [r1, #0]
 800e4d2:	bf08      	it	eq
 800e4d4:	694b      	ldreq	r3, [r1, #20]
 800e4d6:	1bf6      	subs	r6, r6, r7
 800e4d8:	600f      	str	r7, [r1, #0]
 800e4da:	608b      	str	r3, [r1, #8]
 800e4dc:	2e00      	cmp	r6, #0
 800e4de:	ddeb      	ble.n	800e4b8 <__sflush_r+0xac>
 800e4e0:	4633      	mov	r3, r6
 800e4e2:	463a      	mov	r2, r7
 800e4e4:	4628      	mov	r0, r5
 800e4e6:	6a21      	ldr	r1, [r4, #32]
 800e4e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800e4ec:	47e0      	blx	ip
 800e4ee:	2800      	cmp	r0, #0
 800e4f0:	dc07      	bgt.n	800e502 <__sflush_r+0xf6>
 800e4f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800e4fe:	81a3      	strh	r3, [r4, #12]
 800e500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e502:	4407      	add	r7, r0
 800e504:	1a36      	subs	r6, r6, r0
 800e506:	e7e9      	b.n	800e4dc <__sflush_r+0xd0>
 800e508:	dfbffffe 	.word	0xdfbffffe

0800e50c <_fflush_r>:
 800e50c:	b538      	push	{r3, r4, r5, lr}
 800e50e:	690b      	ldr	r3, [r1, #16]
 800e510:	4605      	mov	r5, r0
 800e512:	460c      	mov	r4, r1
 800e514:	b913      	cbnz	r3, 800e51c <_fflush_r+0x10>
 800e516:	2500      	movs	r5, #0
 800e518:	4628      	mov	r0, r5
 800e51a:	bd38      	pop	{r3, r4, r5, pc}
 800e51c:	b118      	cbz	r0, 800e526 <_fflush_r+0x1a>
 800e51e:	6a03      	ldr	r3, [r0, #32]
 800e520:	b90b      	cbnz	r3, 800e526 <_fflush_r+0x1a>
 800e522:	f7fd fb39 	bl	800bb98 <__sinit>
 800e526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d0f3      	beq.n	800e516 <_fflush_r+0xa>
 800e52e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e530:	07d0      	lsls	r0, r2, #31
 800e532:	d404      	bmi.n	800e53e <_fflush_r+0x32>
 800e534:	0599      	lsls	r1, r3, #22
 800e536:	d402      	bmi.n	800e53e <_fflush_r+0x32>
 800e538:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e53a:	f7fd fe08 	bl	800c14e <__retarget_lock_acquire_recursive>
 800e53e:	4628      	mov	r0, r5
 800e540:	4621      	mov	r1, r4
 800e542:	f7ff ff63 	bl	800e40c <__sflush_r>
 800e546:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e548:	4605      	mov	r5, r0
 800e54a:	07da      	lsls	r2, r3, #31
 800e54c:	d4e4      	bmi.n	800e518 <_fflush_r+0xc>
 800e54e:	89a3      	ldrh	r3, [r4, #12]
 800e550:	059b      	lsls	r3, r3, #22
 800e552:	d4e1      	bmi.n	800e518 <_fflush_r+0xc>
 800e554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e556:	f7fd fdfb 	bl	800c150 <__retarget_lock_release_recursive>
 800e55a:	e7dd      	b.n	800e518 <_fflush_r+0xc>

0800e55c <__swhatbuf_r>:
 800e55c:	b570      	push	{r4, r5, r6, lr}
 800e55e:	460c      	mov	r4, r1
 800e560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e564:	4615      	mov	r5, r2
 800e566:	2900      	cmp	r1, #0
 800e568:	461e      	mov	r6, r3
 800e56a:	b096      	sub	sp, #88	@ 0x58
 800e56c:	da0c      	bge.n	800e588 <__swhatbuf_r+0x2c>
 800e56e:	89a3      	ldrh	r3, [r4, #12]
 800e570:	2100      	movs	r1, #0
 800e572:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e576:	bf14      	ite	ne
 800e578:	2340      	movne	r3, #64	@ 0x40
 800e57a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e57e:	2000      	movs	r0, #0
 800e580:	6031      	str	r1, [r6, #0]
 800e582:	602b      	str	r3, [r5, #0]
 800e584:	b016      	add	sp, #88	@ 0x58
 800e586:	bd70      	pop	{r4, r5, r6, pc}
 800e588:	466a      	mov	r2, sp
 800e58a:	f000 f863 	bl	800e654 <_fstat_r>
 800e58e:	2800      	cmp	r0, #0
 800e590:	dbed      	blt.n	800e56e <__swhatbuf_r+0x12>
 800e592:	9901      	ldr	r1, [sp, #4]
 800e594:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e598:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e59c:	4259      	negs	r1, r3
 800e59e:	4159      	adcs	r1, r3
 800e5a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e5a4:	e7eb      	b.n	800e57e <__swhatbuf_r+0x22>

0800e5a6 <__smakebuf_r>:
 800e5a6:	898b      	ldrh	r3, [r1, #12]
 800e5a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5aa:	079d      	lsls	r5, r3, #30
 800e5ac:	4606      	mov	r6, r0
 800e5ae:	460c      	mov	r4, r1
 800e5b0:	d507      	bpl.n	800e5c2 <__smakebuf_r+0x1c>
 800e5b2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e5b6:	6023      	str	r3, [r4, #0]
 800e5b8:	6123      	str	r3, [r4, #16]
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	6163      	str	r3, [r4, #20]
 800e5be:	b003      	add	sp, #12
 800e5c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5c2:	466a      	mov	r2, sp
 800e5c4:	ab01      	add	r3, sp, #4
 800e5c6:	f7ff ffc9 	bl	800e55c <__swhatbuf_r>
 800e5ca:	9f00      	ldr	r7, [sp, #0]
 800e5cc:	4605      	mov	r5, r0
 800e5ce:	4639      	mov	r1, r7
 800e5d0:	4630      	mov	r0, r6
 800e5d2:	f7fb fccb 	bl	8009f6c <_malloc_r>
 800e5d6:	b948      	cbnz	r0, 800e5ec <__smakebuf_r+0x46>
 800e5d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5dc:	059a      	lsls	r2, r3, #22
 800e5de:	d4ee      	bmi.n	800e5be <__smakebuf_r+0x18>
 800e5e0:	f023 0303 	bic.w	r3, r3, #3
 800e5e4:	f043 0302 	orr.w	r3, r3, #2
 800e5e8:	81a3      	strh	r3, [r4, #12]
 800e5ea:	e7e2      	b.n	800e5b2 <__smakebuf_r+0xc>
 800e5ec:	89a3      	ldrh	r3, [r4, #12]
 800e5ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e5f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5f6:	81a3      	strh	r3, [r4, #12]
 800e5f8:	9b01      	ldr	r3, [sp, #4]
 800e5fa:	6020      	str	r0, [r4, #0]
 800e5fc:	b15b      	cbz	r3, 800e616 <__smakebuf_r+0x70>
 800e5fe:	4630      	mov	r0, r6
 800e600:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e604:	f000 f838 	bl	800e678 <_isatty_r>
 800e608:	b128      	cbz	r0, 800e616 <__smakebuf_r+0x70>
 800e60a:	89a3      	ldrh	r3, [r4, #12]
 800e60c:	f023 0303 	bic.w	r3, r3, #3
 800e610:	f043 0301 	orr.w	r3, r3, #1
 800e614:	81a3      	strh	r3, [r4, #12]
 800e616:	89a3      	ldrh	r3, [r4, #12]
 800e618:	431d      	orrs	r5, r3
 800e61a:	81a5      	strh	r5, [r4, #12]
 800e61c:	e7cf      	b.n	800e5be <__smakebuf_r+0x18>

0800e61e <memmove>:
 800e61e:	4288      	cmp	r0, r1
 800e620:	b510      	push	{r4, lr}
 800e622:	eb01 0402 	add.w	r4, r1, r2
 800e626:	d902      	bls.n	800e62e <memmove+0x10>
 800e628:	4284      	cmp	r4, r0
 800e62a:	4623      	mov	r3, r4
 800e62c:	d807      	bhi.n	800e63e <memmove+0x20>
 800e62e:	1e43      	subs	r3, r0, #1
 800e630:	42a1      	cmp	r1, r4
 800e632:	d008      	beq.n	800e646 <memmove+0x28>
 800e634:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e638:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e63c:	e7f8      	b.n	800e630 <memmove+0x12>
 800e63e:	4601      	mov	r1, r0
 800e640:	4402      	add	r2, r0
 800e642:	428a      	cmp	r2, r1
 800e644:	d100      	bne.n	800e648 <memmove+0x2a>
 800e646:	bd10      	pop	{r4, pc}
 800e648:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e64c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e650:	e7f7      	b.n	800e642 <memmove+0x24>
	...

0800e654 <_fstat_r>:
 800e654:	b538      	push	{r3, r4, r5, lr}
 800e656:	2300      	movs	r3, #0
 800e658:	4d06      	ldr	r5, [pc, #24]	@ (800e674 <_fstat_r+0x20>)
 800e65a:	4604      	mov	r4, r0
 800e65c:	4608      	mov	r0, r1
 800e65e:	4611      	mov	r1, r2
 800e660:	602b      	str	r3, [r5, #0]
 800e662:	f7f8 fd94 	bl	800718e <_fstat>
 800e666:	1c43      	adds	r3, r0, #1
 800e668:	d102      	bne.n	800e670 <_fstat_r+0x1c>
 800e66a:	682b      	ldr	r3, [r5, #0]
 800e66c:	b103      	cbz	r3, 800e670 <_fstat_r+0x1c>
 800e66e:	6023      	str	r3, [r4, #0]
 800e670:	bd38      	pop	{r3, r4, r5, pc}
 800e672:	bf00      	nop
 800e674:	20000d04 	.word	0x20000d04

0800e678 <_isatty_r>:
 800e678:	b538      	push	{r3, r4, r5, lr}
 800e67a:	2300      	movs	r3, #0
 800e67c:	4d05      	ldr	r5, [pc, #20]	@ (800e694 <_isatty_r+0x1c>)
 800e67e:	4604      	mov	r4, r0
 800e680:	4608      	mov	r0, r1
 800e682:	602b      	str	r3, [r5, #0]
 800e684:	f7f8 fd88 	bl	8007198 <_isatty>
 800e688:	1c43      	adds	r3, r0, #1
 800e68a:	d102      	bne.n	800e692 <_isatty_r+0x1a>
 800e68c:	682b      	ldr	r3, [r5, #0]
 800e68e:	b103      	cbz	r3, 800e692 <_isatty_r+0x1a>
 800e690:	6023      	str	r3, [r4, #0]
 800e692:	bd38      	pop	{r3, r4, r5, pc}
 800e694:	20000d04 	.word	0x20000d04

0800e698 <__assert_func>:
 800e698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e69a:	4614      	mov	r4, r2
 800e69c:	461a      	mov	r2, r3
 800e69e:	4b09      	ldr	r3, [pc, #36]	@ (800e6c4 <__assert_func+0x2c>)
 800e6a0:	4605      	mov	r5, r0
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	68d8      	ldr	r0, [r3, #12]
 800e6a6:	b954      	cbnz	r4, 800e6be <__assert_func+0x26>
 800e6a8:	4b07      	ldr	r3, [pc, #28]	@ (800e6c8 <__assert_func+0x30>)
 800e6aa:	461c      	mov	r4, r3
 800e6ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e6b0:	9100      	str	r1, [sp, #0]
 800e6b2:	462b      	mov	r3, r5
 800e6b4:	4905      	ldr	r1, [pc, #20]	@ (800e6cc <__assert_func+0x34>)
 800e6b6:	f000 f84f 	bl	800e758 <fiprintf>
 800e6ba:	f000 f85f 	bl	800e77c <abort>
 800e6be:	4b04      	ldr	r3, [pc, #16]	@ (800e6d0 <__assert_func+0x38>)
 800e6c0:	e7f4      	b.n	800e6ac <__assert_func+0x14>
 800e6c2:	bf00      	nop
 800e6c4:	20000188 	.word	0x20000188
 800e6c8:	0800ea60 	.word	0x0800ea60
 800e6cc:	0800f756 	.word	0x0800f756
 800e6d0:	0800f749 	.word	0x0800f749

0800e6d4 <_calloc_r>:
 800e6d4:	b570      	push	{r4, r5, r6, lr}
 800e6d6:	fba1 5402 	umull	r5, r4, r1, r2
 800e6da:	b93c      	cbnz	r4, 800e6ec <_calloc_r+0x18>
 800e6dc:	4629      	mov	r1, r5
 800e6de:	f7fb fc45 	bl	8009f6c <_malloc_r>
 800e6e2:	4606      	mov	r6, r0
 800e6e4:	b928      	cbnz	r0, 800e6f2 <_calloc_r+0x1e>
 800e6e6:	2600      	movs	r6, #0
 800e6e8:	4630      	mov	r0, r6
 800e6ea:	bd70      	pop	{r4, r5, r6, pc}
 800e6ec:	220c      	movs	r2, #12
 800e6ee:	6002      	str	r2, [r0, #0]
 800e6f0:	e7f9      	b.n	800e6e6 <_calloc_r+0x12>
 800e6f2:	462a      	mov	r2, r5
 800e6f4:	4621      	mov	r1, r4
 800e6f6:	f7fd fc31 	bl	800bf5c <memset>
 800e6fa:	e7f5      	b.n	800e6e8 <_calloc_r+0x14>

0800e6fc <_realloc_r>:
 800e6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e700:	4680      	mov	r8, r0
 800e702:	4615      	mov	r5, r2
 800e704:	460c      	mov	r4, r1
 800e706:	b921      	cbnz	r1, 800e712 <_realloc_r+0x16>
 800e708:	4611      	mov	r1, r2
 800e70a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e70e:	f7fb bc2d 	b.w	8009f6c <_malloc_r>
 800e712:	b92a      	cbnz	r2, 800e720 <_realloc_r+0x24>
 800e714:	f7fe fb9c 	bl	800ce50 <_free_r>
 800e718:	2400      	movs	r4, #0
 800e71a:	4620      	mov	r0, r4
 800e71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e720:	f000 f833 	bl	800e78a <_malloc_usable_size_r>
 800e724:	4285      	cmp	r5, r0
 800e726:	4606      	mov	r6, r0
 800e728:	d802      	bhi.n	800e730 <_realloc_r+0x34>
 800e72a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e72e:	d8f4      	bhi.n	800e71a <_realloc_r+0x1e>
 800e730:	4629      	mov	r1, r5
 800e732:	4640      	mov	r0, r8
 800e734:	f7fb fc1a 	bl	8009f6c <_malloc_r>
 800e738:	4607      	mov	r7, r0
 800e73a:	2800      	cmp	r0, #0
 800e73c:	d0ec      	beq.n	800e718 <_realloc_r+0x1c>
 800e73e:	42b5      	cmp	r5, r6
 800e740:	462a      	mov	r2, r5
 800e742:	4621      	mov	r1, r4
 800e744:	bf28      	it	cs
 800e746:	4632      	movcs	r2, r6
 800e748:	f7fd fd19 	bl	800c17e <memcpy>
 800e74c:	4621      	mov	r1, r4
 800e74e:	4640      	mov	r0, r8
 800e750:	f7fe fb7e 	bl	800ce50 <_free_r>
 800e754:	463c      	mov	r4, r7
 800e756:	e7e0      	b.n	800e71a <_realloc_r+0x1e>

0800e758 <fiprintf>:
 800e758:	b40e      	push	{r1, r2, r3}
 800e75a:	b503      	push	{r0, r1, lr}
 800e75c:	4601      	mov	r1, r0
 800e75e:	ab03      	add	r3, sp, #12
 800e760:	4805      	ldr	r0, [pc, #20]	@ (800e778 <fiprintf+0x20>)
 800e762:	f853 2b04 	ldr.w	r2, [r3], #4
 800e766:	6800      	ldr	r0, [r0, #0]
 800e768:	9301      	str	r3, [sp, #4]
 800e76a:	f7ff fd37 	bl	800e1dc <_vfiprintf_r>
 800e76e:	b002      	add	sp, #8
 800e770:	f85d eb04 	ldr.w	lr, [sp], #4
 800e774:	b003      	add	sp, #12
 800e776:	4770      	bx	lr
 800e778:	20000188 	.word	0x20000188

0800e77c <abort>:
 800e77c:	2006      	movs	r0, #6
 800e77e:	b508      	push	{r3, lr}
 800e780:	f000 f834 	bl	800e7ec <raise>
 800e784:	2001      	movs	r0, #1
 800e786:	f7f8 fcdd 	bl	8007144 <_exit>

0800e78a <_malloc_usable_size_r>:
 800e78a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e78e:	1f18      	subs	r0, r3, #4
 800e790:	2b00      	cmp	r3, #0
 800e792:	bfbc      	itt	lt
 800e794:	580b      	ldrlt	r3, [r1, r0]
 800e796:	18c0      	addlt	r0, r0, r3
 800e798:	4770      	bx	lr

0800e79a <_raise_r>:
 800e79a:	291f      	cmp	r1, #31
 800e79c:	b538      	push	{r3, r4, r5, lr}
 800e79e:	4605      	mov	r5, r0
 800e7a0:	460c      	mov	r4, r1
 800e7a2:	d904      	bls.n	800e7ae <_raise_r+0x14>
 800e7a4:	2316      	movs	r3, #22
 800e7a6:	6003      	str	r3, [r0, #0]
 800e7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ac:	bd38      	pop	{r3, r4, r5, pc}
 800e7ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e7b0:	b112      	cbz	r2, 800e7b8 <_raise_r+0x1e>
 800e7b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e7b6:	b94b      	cbnz	r3, 800e7cc <_raise_r+0x32>
 800e7b8:	4628      	mov	r0, r5
 800e7ba:	f000 f831 	bl	800e820 <_getpid_r>
 800e7be:	4622      	mov	r2, r4
 800e7c0:	4601      	mov	r1, r0
 800e7c2:	4628      	mov	r0, r5
 800e7c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7c8:	f000 b818 	b.w	800e7fc <_kill_r>
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d00a      	beq.n	800e7e6 <_raise_r+0x4c>
 800e7d0:	1c59      	adds	r1, r3, #1
 800e7d2:	d103      	bne.n	800e7dc <_raise_r+0x42>
 800e7d4:	2316      	movs	r3, #22
 800e7d6:	6003      	str	r3, [r0, #0]
 800e7d8:	2001      	movs	r0, #1
 800e7da:	e7e7      	b.n	800e7ac <_raise_r+0x12>
 800e7dc:	2100      	movs	r1, #0
 800e7de:	4620      	mov	r0, r4
 800e7e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e7e4:	4798      	blx	r3
 800e7e6:	2000      	movs	r0, #0
 800e7e8:	e7e0      	b.n	800e7ac <_raise_r+0x12>
	...

0800e7ec <raise>:
 800e7ec:	4b02      	ldr	r3, [pc, #8]	@ (800e7f8 <raise+0xc>)
 800e7ee:	4601      	mov	r1, r0
 800e7f0:	6818      	ldr	r0, [r3, #0]
 800e7f2:	f7ff bfd2 	b.w	800e79a <_raise_r>
 800e7f6:	bf00      	nop
 800e7f8:	20000188 	.word	0x20000188

0800e7fc <_kill_r>:
 800e7fc:	b538      	push	{r3, r4, r5, lr}
 800e7fe:	2300      	movs	r3, #0
 800e800:	4d06      	ldr	r5, [pc, #24]	@ (800e81c <_kill_r+0x20>)
 800e802:	4604      	mov	r4, r0
 800e804:	4608      	mov	r0, r1
 800e806:	4611      	mov	r1, r2
 800e808:	602b      	str	r3, [r5, #0]
 800e80a:	f7f8 fc93 	bl	8007134 <_kill>
 800e80e:	1c43      	adds	r3, r0, #1
 800e810:	d102      	bne.n	800e818 <_kill_r+0x1c>
 800e812:	682b      	ldr	r3, [r5, #0]
 800e814:	b103      	cbz	r3, 800e818 <_kill_r+0x1c>
 800e816:	6023      	str	r3, [r4, #0]
 800e818:	bd38      	pop	{r3, r4, r5, pc}
 800e81a:	bf00      	nop
 800e81c:	20000d04 	.word	0x20000d04

0800e820 <_getpid_r>:
 800e820:	f7f8 bc86 	b.w	8007130 <_getpid>

0800e824 <_init>:
 800e824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e826:	bf00      	nop
 800e828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e82a:	bc08      	pop	{r3}
 800e82c:	469e      	mov	lr, r3
 800e82e:	4770      	bx	lr

0800e830 <_fini>:
 800e830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e832:	bf00      	nop
 800e834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e836:	bc08      	pop	{r3}
 800e838:	469e      	mov	lr, r3
 800e83a:	4770      	bx	lr
